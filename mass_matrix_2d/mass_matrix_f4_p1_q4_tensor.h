// This code conforms with the UFC specification version 2.0.3
// and was automatically generated by FFC version 1.0-beta2.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'ufc'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'tensor'
//   split:                          False
//   swig_binary:                    'swig'
//   swig_path:                      ''

#ifndef __MASS_MATRIX_F4_P1_Q4_TENSOR_H
#define __MASS_MATRIX_F4_P1_Q4_TENSOR_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class mass_matrix_f4_p1_q4_tensor_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  mass_matrix_f4_p1_q4_tensor_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q4_tensor_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mass_matrix_f4_p1_q4_tensor_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class mass_matrix_f4_p1_q4_tensor_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  mass_matrix_f4_p1_q4_tensor_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q4_tensor_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233824, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421162, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.0388807895679869, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968254, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977598, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0109971479845644, 0.00634920634920633, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406278, -0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977598, 0.026770604530526, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527351, -0.0109971479845643, 0.00634920634920644, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382571, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924091, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984127, -0.243432247780074, 0.0, 0.0544331053951818, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.0518410527573159, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924092, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087791, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 15; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233824, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421162, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.0388807895679869, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968254, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977598, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0109971479845644, 0.00634920634920633, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406278, -0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977598, 0.026770604530526, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527351, -0.0109971479845643, 0.00634920634920644, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382571, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924091, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984127, -0.243432247780074, 0.0, 0.0544331053951818, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.0518410527573159, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924092, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087791, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 15; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.75*x[1][0] + 0.25*x[2][0];
      y[1] = 0.75*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.25*x[1][0] + 0.75*x[2][0];
      y[1] = 0.25*x[1][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[2][0];
      y[1] = 0.75*x[0][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[2][0];
      y[1] = 0.25*x[0][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[1][0];
      y[1] = 0.75*x[0][1] + 0.25*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[1][0];
      y[1] = 0.25*x[0][1] + 0.75*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
      y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
      y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.75*x[1][0] + 0.25*x[2][0];
    y[1] = 0.75*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.25*x[1][0] + 0.75*x[2][0];
    y[1] = 0.25*x[1][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[2][0];
    y[1] = 0.75*x[0][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[2][0];
    y[1] = 0.25*x[0][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[1][0];
    y[1] = 0.75*x[0][1] + 0.25*x[1][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[1][0];
    y[1] = 0.25*x[0][1] + 0.75*x[1][1];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mass_matrix_f4_p1_q4_tensor_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mass_matrix_f4_p1_q4_tensor_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  mass_matrix_f4_p1_q4_tensor_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q4_tensor_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 3;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mass_matrix_f4_p1_q4_tensor_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mass_matrix_f4_p1_q4_tensor_dofmap_1: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  mass_matrix_f4_p1_q4_tensor_dofmap_1() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q4_tensor_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + 3.0*m.num_entities[1] + 3.0*m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 15;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 5;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 3;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset += 3*m.num_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
    offset += 3*m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
          break;
        }
      case 1:
        {
          dofs[0] = 6;
        dofs[1] = 7;
        dofs[2] = 8;
          break;
        }
      case 2:
        {
          dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 12;
      dofs[1] = 13;
      dofs[2] = 14;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[6][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[8][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[8][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[9][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[9][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[11][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[11][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[12][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[12][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[13][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[13][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[14][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[14][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mass_matrix_f4_p1_q4_tensor_dofmap_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mass_matrix_f4_p1_q4_tensor_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  mass_matrix_f4_p1_q4_tensor_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q4_tensor_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      9
    // Number of operations (multiply-add pairs) for geometry tensor:    202
    // Number of operations (multiply-add pairs) for tensor contraction: 6443
    // Total number of operations (multiply-add pairs):                  6654
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0_0_0 = det*w[3][0]*w[2][0]*w[0][0]*w[1][0]*(1.0);
    const double G0_0_0_0_1 = det*w[3][0]*w[2][0]*w[0][0]*w[1][1]*(1.0);
    const double G0_0_0_0_2 = det*w[3][0]*w[2][0]*w[0][0]*w[1][2]*(1.0);
    const double G0_0_0_1_0 = det*w[3][0]*w[2][0]*w[0][1]*w[1][0]*(1.0);
    const double G0_0_0_1_1 = det*w[3][0]*w[2][0]*w[0][1]*w[1][1]*(1.0);
    const double G0_0_0_1_2 = det*w[3][0]*w[2][0]*w[0][1]*w[1][2]*(1.0);
    const double G0_0_0_2_0 = det*w[3][0]*w[2][0]*w[0][2]*w[1][0]*(1.0);
    const double G0_0_0_2_1 = det*w[3][0]*w[2][0]*w[0][2]*w[1][1]*(1.0);
    const double G0_0_0_2_2 = det*w[3][0]*w[2][0]*w[0][2]*w[1][2]*(1.0);
    const double G0_0_1_0_0 = det*w[3][0]*w[2][1]*w[0][0]*w[1][0]*(1.0);
    const double G0_0_1_0_1 = det*w[3][0]*w[2][1]*w[0][0]*w[1][1]*(1.0);
    const double G0_0_1_0_2 = det*w[3][0]*w[2][1]*w[0][0]*w[1][2]*(1.0);
    const double G0_0_1_1_0 = det*w[3][0]*w[2][1]*w[0][1]*w[1][0]*(1.0);
    const double G0_0_1_1_1 = det*w[3][0]*w[2][1]*w[0][1]*w[1][1]*(1.0);
    const double G0_0_1_1_2 = det*w[3][0]*w[2][1]*w[0][1]*w[1][2]*(1.0);
    const double G0_0_1_2_0 = det*w[3][0]*w[2][1]*w[0][2]*w[1][0]*(1.0);
    const double G0_0_1_2_1 = det*w[3][0]*w[2][1]*w[0][2]*w[1][1]*(1.0);
    const double G0_0_1_2_2 = det*w[3][0]*w[2][1]*w[0][2]*w[1][2]*(1.0);
    const double G0_0_2_0_0 = det*w[3][0]*w[2][2]*w[0][0]*w[1][0]*(1.0);
    const double G0_0_2_0_1 = det*w[3][0]*w[2][2]*w[0][0]*w[1][1]*(1.0);
    const double G0_0_2_0_2 = det*w[3][0]*w[2][2]*w[0][0]*w[1][2]*(1.0);
    const double G0_0_2_1_0 = det*w[3][0]*w[2][2]*w[0][1]*w[1][0]*(1.0);
    const double G0_0_2_1_1 = det*w[3][0]*w[2][2]*w[0][1]*w[1][1]*(1.0);
    const double G0_0_2_1_2 = det*w[3][0]*w[2][2]*w[0][1]*w[1][2]*(1.0);
    const double G0_0_2_2_0 = det*w[3][0]*w[2][2]*w[0][2]*w[1][0]*(1.0);
    const double G0_0_2_2_1 = det*w[3][0]*w[2][2]*w[0][2]*w[1][1]*(1.0);
    const double G0_0_2_2_2 = det*w[3][0]*w[2][2]*w[0][2]*w[1][2]*(1.0);
    const double G0_1_0_0_0 = det*w[3][1]*w[2][0]*w[0][0]*w[1][0]*(1.0);
    const double G0_1_0_0_1 = det*w[3][1]*w[2][0]*w[0][0]*w[1][1]*(1.0);
    const double G0_1_0_0_2 = det*w[3][1]*w[2][0]*w[0][0]*w[1][2]*(1.0);
    const double G0_1_0_1_0 = det*w[3][1]*w[2][0]*w[0][1]*w[1][0]*(1.0);
    const double G0_1_0_1_1 = det*w[3][1]*w[2][0]*w[0][1]*w[1][1]*(1.0);
    const double G0_1_0_1_2 = det*w[3][1]*w[2][0]*w[0][1]*w[1][2]*(1.0);
    const double G0_1_0_2_0 = det*w[3][1]*w[2][0]*w[0][2]*w[1][0]*(1.0);
    const double G0_1_0_2_1 = det*w[3][1]*w[2][0]*w[0][2]*w[1][1]*(1.0);
    const double G0_1_0_2_2 = det*w[3][1]*w[2][0]*w[0][2]*w[1][2]*(1.0);
    const double G0_1_1_0_0 = det*w[3][1]*w[2][1]*w[0][0]*w[1][0]*(1.0);
    const double G0_1_1_0_1 = det*w[3][1]*w[2][1]*w[0][0]*w[1][1]*(1.0);
    const double G0_1_1_0_2 = det*w[3][1]*w[2][1]*w[0][0]*w[1][2]*(1.0);
    const double G0_1_1_1_0 = det*w[3][1]*w[2][1]*w[0][1]*w[1][0]*(1.0);
    const double G0_1_1_1_1 = det*w[3][1]*w[2][1]*w[0][1]*w[1][1]*(1.0);
    const double G0_1_1_1_2 = det*w[3][1]*w[2][1]*w[0][1]*w[1][2]*(1.0);
    const double G0_1_1_2_0 = det*w[3][1]*w[2][1]*w[0][2]*w[1][0]*(1.0);
    const double G0_1_1_2_1 = det*w[3][1]*w[2][1]*w[0][2]*w[1][1]*(1.0);
    const double G0_1_1_2_2 = det*w[3][1]*w[2][1]*w[0][2]*w[1][2]*(1.0);
    const double G0_1_2_0_0 = det*w[3][1]*w[2][2]*w[0][0]*w[1][0]*(1.0);
    const double G0_1_2_0_1 = det*w[3][1]*w[2][2]*w[0][0]*w[1][1]*(1.0);
    const double G0_1_2_0_2 = det*w[3][1]*w[2][2]*w[0][0]*w[1][2]*(1.0);
    const double G0_1_2_1_0 = det*w[3][1]*w[2][2]*w[0][1]*w[1][0]*(1.0);
    const double G0_1_2_1_1 = det*w[3][1]*w[2][2]*w[0][1]*w[1][1]*(1.0);
    const double G0_1_2_1_2 = det*w[3][1]*w[2][2]*w[0][1]*w[1][2]*(1.0);
    const double G0_1_2_2_0 = det*w[3][1]*w[2][2]*w[0][2]*w[1][0]*(1.0);
    const double G0_1_2_2_1 = det*w[3][1]*w[2][2]*w[0][2]*w[1][1]*(1.0);
    const double G0_1_2_2_2 = det*w[3][1]*w[2][2]*w[0][2]*w[1][2]*(1.0);
    const double G0_2_0_0_0 = det*w[3][2]*w[2][0]*w[0][0]*w[1][0]*(1.0);
    const double G0_2_0_0_1 = det*w[3][2]*w[2][0]*w[0][0]*w[1][1]*(1.0);
    const double G0_2_0_0_2 = det*w[3][2]*w[2][0]*w[0][0]*w[1][2]*(1.0);
    const double G0_2_0_1_0 = det*w[3][2]*w[2][0]*w[0][1]*w[1][0]*(1.0);
    const double G0_2_0_1_1 = det*w[3][2]*w[2][0]*w[0][1]*w[1][1]*(1.0);
    const double G0_2_0_1_2 = det*w[3][2]*w[2][0]*w[0][1]*w[1][2]*(1.0);
    const double G0_2_0_2_0 = det*w[3][2]*w[2][0]*w[0][2]*w[1][0]*(1.0);
    const double G0_2_0_2_1 = det*w[3][2]*w[2][0]*w[0][2]*w[1][1]*(1.0);
    const double G0_2_0_2_2 = det*w[3][2]*w[2][0]*w[0][2]*w[1][2]*(1.0);
    const double G0_2_1_0_0 = det*w[3][2]*w[2][1]*w[0][0]*w[1][0]*(1.0);
    const double G0_2_1_0_1 = det*w[3][2]*w[2][1]*w[0][0]*w[1][1]*(1.0);
    const double G0_2_1_0_2 = det*w[3][2]*w[2][1]*w[0][0]*w[1][2]*(1.0);
    const double G0_2_1_1_0 = det*w[3][2]*w[2][1]*w[0][1]*w[1][0]*(1.0);
    const double G0_2_1_1_1 = det*w[3][2]*w[2][1]*w[0][1]*w[1][1]*(1.0);
    const double G0_2_1_1_2 = det*w[3][2]*w[2][1]*w[0][1]*w[1][2]*(1.0);
    const double G0_2_1_2_0 = det*w[3][2]*w[2][1]*w[0][2]*w[1][0]*(1.0);
    const double G0_2_1_2_1 = det*w[3][2]*w[2][1]*w[0][2]*w[1][1]*(1.0);
    const double G0_2_1_2_2 = det*w[3][2]*w[2][1]*w[0][2]*w[1][2]*(1.0);
    const double G0_2_2_0_0 = det*w[3][2]*w[2][2]*w[0][0]*w[1][0]*(1.0);
    const double G0_2_2_0_1 = det*w[3][2]*w[2][2]*w[0][0]*w[1][1]*(1.0);
    const double G0_2_2_0_2 = det*w[3][2]*w[2][2]*w[0][0]*w[1][2]*(1.0);
    const double G0_2_2_1_0 = det*w[3][2]*w[2][2]*w[0][1]*w[1][0]*(1.0);
    const double G0_2_2_1_1 = det*w[3][2]*w[2][2]*w[0][1]*w[1][1]*(1.0);
    const double G0_2_2_1_2 = det*w[3][2]*w[2][2]*w[0][1]*w[1][2]*(1.0);
    const double G0_2_2_2_0 = det*w[3][2]*w[2][2]*w[0][2]*w[1][0]*(1.0);
    const double G0_2_2_2_1 = det*w[3][2]*w[2][2]*w[0][2]*w[1][1]*(1.0);
    const double G0_2_2_2_2 = det*w[3][2]*w[2][2]*w[0][2]*w[1][2]*(1.0);
    
    // Compute element tensor
    A[108] = 1.26857269714437e-05*G0_0_0_0_0 + 8.45715131429566e-06*G0_0_0_0_1 + 7.75238870477095e-05*G0_0_0_0_2 + 8.45715131429565e-06*G0_0_0_1_0 + 5.49714835429218e-06*G0_0_0_1_1 + 1.36723946247779e-05*G0_0_0_1_2 + 7.75238870477095e-05*G0_0_0_2_0 + 1.36723946247779e-05*G0_0_0_2_1 + 7.75238870477095e-05*G0_0_0_2_2 + 8.45715131429565e-06*G0_0_1_0_0 + 5.49714835429218e-06*G0_0_1_0_1 + 1.36723946247779e-05*G0_0_1_0_2 + 5.49714835429218e-06*G0_0_1_1_0 + 1.07123916647747e-05*G0_0_1_1_1 + 5.49714835429218e-06*G0_0_1_1_2 + 1.36723946247779e-05*G0_0_1_2_0 + 5.49714835429218e-06*G0_0_1_2_1 + 8.45715131429561e-06*G0_0_1_2_2 + 7.75238870477095e-05*G0_0_2_0_0 + 1.36723946247779e-05*G0_0_2_0_1 + 7.75238870477095e-05*G0_0_2_0_2 + 1.36723946247779e-05*G0_0_2_1_0 + 5.49714835429218e-06*G0_0_2_1_1 + 8.45715131429561e-06*G0_0_2_1_2 + 7.75238870477095e-05*G0_0_2_2_0 + 8.45715131429561e-06*G0_0_2_2_1 + 1.26857269714435e-05*G0_0_2_2_2 + 8.45715131429566e-06*G0_1_0_0_0 + 5.49714835429218e-06*G0_1_0_0_1 + 1.36723946247779e-05*G0_1_0_0_2 + 5.49714835429218e-06*G0_1_0_1_0 + 1.07123916647746e-05*G0_1_0_1_1 + 5.49714835429218e-06*G0_1_0_1_2 + 1.36723946247779e-05*G0_1_0_2_0 + 5.49714835429218e-06*G0_1_0_2_1 + 8.45715131429561e-06*G0_1_0_2_2 + 5.49714835429218e-06*G0_1_1_0_0 + 1.07123916647746e-05*G0_1_1_0_1 + 5.49714835429218e-06*G0_1_1_0_2 + 1.07123916647747e-05*G0_1_1_1_0 + 6.9066735733417e-05*G0_1_1_1_1 + 1.49409673219228e-05*G0_1_1_1_2 + 5.49714835429217e-06*G0_1_1_2_0 + 1.49409673219228e-05*G0_1_1_2_1 + 4.22857565714795e-06*G0_1_1_2_2 + 1.36723946247779e-05*G0_1_2_0_0 + 5.49714835429217e-06*G0_1_2_0_1 + 8.45715131429561e-06*G0_1_2_0_2 + 5.49714835429218e-06*G0_1_2_1_0 + 1.49409673219228e-05*G0_1_2_1_1 + 4.22857565714795e-06*G0_1_2_1_2 + 8.45715131429561e-06*G0_1_2_2_0 + 4.22857565714795e-06*G0_1_2_2_1 - 5.21524331048227e-05*G0_1_2_2_2 + 7.75238870477095e-05*G0_2_0_0_0 + 1.36723946247779e-05*G0_2_0_0_1 + 7.75238870477095e-05*G0_2_0_0_2 + 1.36723946247779e-05*G0_2_0_1_0 + 5.49714835429218e-06*G0_2_0_1_1 + 8.45715131429561e-06*G0_2_0_1_2 + 7.75238870477095e-05*G0_2_0_2_0 + 8.45715131429561e-06*G0_2_0_2_1 + 1.26857269714435e-05*G0_2_0_2_2 + 1.36723946247779e-05*G0_2_1_0_0 + 5.49714835429218e-06*G0_2_1_0_1 + 8.45715131429561e-06*G0_2_1_0_2 + 5.49714835429218e-06*G0_2_1_1_0 + 1.49409673219228e-05*G0_2_1_1_1 + 4.22857565714795e-06*G0_2_1_1_2 + 8.45715131429561e-06*G0_2_1_2_0 + 4.22857565714795e-06*G0_2_1_2_1 - 5.21524331048227e-05*G0_2_1_2_2 + 7.75238870477095e-05*G0_2_2_0_0 + 8.45715131429561e-06*G0_2_2_0_1 + 1.26857269714435e-05*G0_2_2_0_2 + 8.45715131429561e-06*G0_2_2_1_0 + 4.22857565714794e-06*G0_2_2_1_1 - 5.21524331048227e-05*G0_2_2_1_2 + 1.26857269714435e-05*G0_2_2_2_0 - 5.21524331048227e-05*G0_2_2_2_1 - 0.000661067327734104*G0_2_2_2_2;
    A[181] = -0.000309390785581314*G0_0_0_0_0 - 3.31238426476579e-05*G0_0_0_0_1 - 9.16191392382024e-05*G0_0_0_0_2 - 3.31238426476579e-05*G0_0_0_1_0 + 4.93333826667235e-06*G0_0_0_1_1 - 1.17695355790614e-05*G0_0_0_1_2 - 9.16191392382024e-05*G0_0_0_2_0 - 1.17695355790614e-05*G0_0_0_2_1 - 4.46114731829093e-05*G0_0_0_2_2 - 3.31238426476579e-05*G0_0_1_0_0 + 4.93333826667235e-06*G0_0_1_0_1 - 1.17695355790614e-05*G0_0_1_0_2 + 4.93333826667235e-06*G0_0_1_1_0 + 4.93333826667233e-06*G0_0_1_1_1 + 1.97333530666894e-06*G0_0_1_1_2 - 1.17695355790614e-05*G0_0_1_2_0 + 1.97333530666894e-06*G0_0_1_2_1 - 6.9771498342939e-06*G0_0_1_2_2 - 9.16191392382024e-05*G0_0_2_0_0 - 1.17695355790614e-05*G0_0_2_0_1 - 4.46114731829093e-05*G0_0_2_0_2 - 1.17695355790614e-05*G0_0_2_1_0 + 1.97333530666894e-06*G0_0_2_1_1 - 6.9771498342939e-06*G0_0_2_1_2 - 4.46114731829093e-05*G0_0_2_2_0 - 6.9771498342939e-06*G0_0_2_2_1 - 2.73447892495558e-05*G0_0_2_2_2 - 3.31238426476579e-05*G0_1_0_0_0 + 4.93333826667235e-06*G0_1_0_0_1 - 1.17695355790614e-05*G0_1_0_0_2 + 4.93333826667235e-06*G0_1_0_1_0 + 4.93333826667233e-06*G0_1_0_1_1 + 1.97333530666894e-06*G0_1_0_1_2 - 1.17695355790614e-05*G0_1_0_2_0 + 1.97333530666894e-06*G0_1_0_2_1 - 6.9771498342939e-06*G0_1_0_2_2 + 4.93333826667235e-06*G0_1_1_0_0 + 4.93333826667233e-06*G0_1_1_0_1 + 1.97333530666894e-06*G0_1_1_0_2 + 4.93333826667233e-06*G0_1_1_1_0 - 9.37334270667775e-05*G0_1_1_1_1 + 4.93333826667234e-06*G0_1_1_1_2 + 1.97333530666894e-06*G0_1_1_2_0 + 4.93333826667233e-06*G0_1_1_2_1 - 1.17695355790614e-05*G0_1_2_0_0 + 1.97333530666894e-06*G0_1_2_0_1 - 6.9771498342939e-06*G0_1_2_0_2 + 1.97333530666894e-06*G0_1_2_1_0 + 4.93333826667234e-06*G0_1_2_1_1 - 6.9771498342939e-06*G0_1_2_2_0 - 4.36952817905277e-06*G0_1_2_2_2 - 9.16191392382024e-05*G0_2_0_0_0 - 1.17695355790614e-05*G0_2_0_0_1 - 4.46114731829093e-05*G0_2_0_0_2 - 1.17695355790614e-05*G0_2_0_1_0 + 1.97333530666894e-06*G0_2_0_1_1 - 6.9771498342939e-06*G0_2_0_1_2 - 4.46114731829093e-05*G0_2_0_2_0 - 6.9771498342939e-06*G0_2_0_2_1 - 2.73447892495558e-05*G0_2_0_2_2 - 1.17695355790614e-05*G0_2_1_0_0 + 1.97333530666894e-06*G0_2_1_0_1 - 6.9771498342939e-06*G0_2_1_0_2 + 1.97333530666894e-06*G0_2_1_1_0 + 4.93333826667233e-06*G0_2_1_1_1 - 6.9771498342939e-06*G0_2_1_2_0 - 4.36952817905277e-06*G0_2_1_2_2 - 4.46114731829093e-05*G0_2_2_0_0 - 6.9771498342939e-06*G0_2_2_0_1 - 2.73447892495558e-05*G0_2_2_0_2 - 6.9771498342939e-06*G0_2_2_1_0 - 4.36952817905277e-06*G0_2_2_1_2 - 2.73447892495558e-05*G0_2_2_2_0 - 4.36952817905277e-06*G0_2_2_2_1 + 1.19809643619187e-05*G0_2_2_2_2;
    A[192] = 0.00994560994561162*G0_0_0_0_0 + 0.0030784030784036*G0_0_0_0_1 + 0.0030784030784036*G0_0_0_0_2 + 0.0030784030784036*G0_0_0_1_0 + 0.00138020709449304*G0_0_0_1_1 + 0.00103515532086978*G0_0_0_1_2 + 0.0030784030784036*G0_0_0_2_0 + 0.00103515532086978*G0_0_0_2_1 + 0.00138020709449304*G0_0_0_2_2 + 0.0030784030784036*G0_0_1_0_0 + 0.00138020709449304*G0_0_1_0_1 + 0.00103515532086978*G0_0_1_0_2 + 0.00138020709449304*G0_0_1_1_0 + 0.000913372341943924*G0_0_1_1_1 + 0.000548023405166354*G0_0_1_1_2 + 0.00103515532086978*G0_0_1_2_0 + 0.000548023405166355*G0_0_1_2_1 + 0.000548023405166354*G0_0_1_2_2 + 0.0030784030784036*G0_0_2_0_0 + 0.00103515532086978*G0_0_2_0_1 + 0.00138020709449304*G0_0_2_0_2 + 0.00103515532086978*G0_0_2_1_0 + 0.000548023405166355*G0_0_2_1_1 + 0.000548023405166354*G0_0_2_1_2 + 0.00138020709449304*G0_0_2_2_0 + 0.000548023405166354*G0_0_2_2_1 + 0.000913372341943924*G0_0_2_2_2 + 0.0030784030784036*G0_1_0_0_0 + 0.00138020709449304*G0_1_0_0_1 + 0.00103515532086978*G0_1_0_0_2 + 0.00138020709449304*G0_1_0_1_0 + 0.000913372341943924*G0_1_0_1_1 + 0.000548023405166355*G0_1_0_1_2 + 0.00103515532086978*G0_1_0_2_0 + 0.000548023405166355*G0_1_0_2_1 + 0.000548023405166354*G0_1_0_2_2 + 0.00138020709449304*G0_1_1_0_0 + 0.000913372341943924*G0_1_1_0_1 + 0.000548023405166355*G0_1_1_0_2 + 0.000913372341943924*G0_1_1_1_0 + 0.00128548699977293*G0_1_1_1_1 + 0.000642743499886466*G0_1_1_1_2 + 0.000548023405166355*G0_1_1_2_0 + 0.000642743499886465*G0_1_1_2_1 + 0.000514194799909172*G0_1_1_2_2 + 0.00103515532086978*G0_1_2_0_0 + 0.000548023405166355*G0_1_2_0_1 + 0.000548023405166354*G0_1_2_0_2 + 0.000548023405166355*G0_1_2_1_0 + 0.000642743499886465*G0_1_2_1_1 + 0.000514194799909172*G0_1_2_1_2 + 0.000548023405166354*G0_1_2_2_0 + 0.000514194799909172*G0_1_2_2_1 + 0.000642743499886465*G0_1_2_2_2 + 0.0030784030784036*G0_2_0_0_0 + 0.00103515532086978*G0_2_0_0_1 + 0.00138020709449304*G0_2_0_0_2 + 0.00103515532086978*G0_2_0_1_0 + 0.000548023405166355*G0_2_0_1_1 + 0.000548023405166354*G0_2_0_1_2 + 0.00138020709449304*G0_2_0_2_0 + 0.000548023405166354*G0_2_0_2_1 + 0.000913372341943924*G0_2_0_2_2 + 0.00103515532086978*G0_2_1_0_0 + 0.000548023405166355*G0_2_1_0_1 + 0.000548023405166354*G0_2_1_0_2 + 0.000548023405166355*G0_2_1_1_0 + 0.000642743499886466*G0_2_1_1_1 + 0.000514194799909172*G0_2_1_1_2 + 0.000548023405166354*G0_2_1_2_0 + 0.000514194799909172*G0_2_1_2_1 + 0.000642743499886465*G0_2_1_2_2 + 0.00138020709449304*G0_2_2_0_0 + 0.000548023405166354*G0_2_2_0_1 + 0.000913372341943924*G0_2_2_0_2 + 0.000548023405166354*G0_2_2_1_0 + 0.000514194799909172*G0_2_2_1_1 + 0.000642743499886465*G0_2_2_1_2 + 0.000913372341943924*G0_2_2_2_0 + 0.000642743499886465*G0_2_2_2_1 + 0.00128548699977293*G0_2_2_2_2;
    A[21] = -0.000306689195578136*G0_0_0_0_0 - 3.07746339492423e-05*G0_0_0_0_1 - 5.63810087619707e-05*G0_0_0_0_2 - 3.07746339492423e-05*G0_0_0_1_0 - 4.38127422254481e-06*G0_0_0_1_1 - 5.87302174603861e-06*G0_0_0_1_2 - 5.63810087619707e-05*G0_0_0_2_0 - 5.87302174603861e-06*G0_0_0_2_1 - 1.38016011031907e-05*G0_0_0_2_2 - 3.07746339492423e-05*G0_0_1_0_0 - 4.38127422254481e-06*G0_0_1_0_1 - 5.87302174603861e-06*G0_0_1_0_2 - 4.38127422254481e-06*G0_0_1_1_0 - 1.12762017523941e-06*G0_0_1_1_2 - 5.87302174603861e-06*G0_0_1_2_0 - 1.12762017523941e-06*G0_0_1_2_1 - 1.71492234984327e-06*G0_0_1_2_2 - 5.63810087619707e-05*G0_0_2_0_0 - 5.87302174603861e-06*G0_0_2_0_1 - 1.38016011031907e-05*G0_0_2_0_2 - 5.87302174603861e-06*G0_0_2_1_0 - 1.12762017523941e-06*G0_0_2_1_1 - 1.71492234984327e-06*G0_0_2_1_2 - 1.38016011031907e-05*G0_0_2_2_0 - 1.71492234984327e-06*G0_0_2_2_1 - 8.73905635810544e-06*G0_0_2_2_2 - 3.07746339492423e-05*G0_1_0_0_0 - 4.38127422254481e-06*G0_1_0_0_1 - 5.87302174603861e-06*G0_1_0_0_2 - 4.38127422254481e-06*G0_1_0_1_0 - 1.12762017523941e-06*G0_1_0_1_2 - 5.87302174603861e-06*G0_1_0_2_0 - 1.12762017523941e-06*G0_1_0_2_1 - 1.71492234984327e-06*G0_1_0_2_2 - 4.38127422254481e-06*G0_1_1_0_0 - 1.12762017523941e-06*G0_1_1_0_2 + 1.5622237844462e-05*G0_1_1_1_1 - 1.12762017523941e-06*G0_1_1_2_0 - 5.87302174603861e-06*G0_1_2_0_0 - 1.12762017523941e-06*G0_1_2_0_1 - 1.71492234984327e-06*G0_1_2_0_2 - 1.12762017523941e-06*G0_1_2_1_0 - 1.71492234984327e-06*G0_1_2_2_0 - 5.82603757207028e-06*G0_1_2_2_2 - 5.63810087619707e-05*G0_2_0_0_0 - 5.87302174603861e-06*G0_2_0_0_1 - 1.38016011031907e-05*G0_2_0_0_2 - 5.87302174603861e-06*G0_2_0_1_0 - 1.12762017523941e-06*G0_2_0_1_1 - 1.71492234984327e-06*G0_2_0_1_2 - 1.38016011031907e-05*G0_2_0_2_0 - 1.71492234984327e-06*G0_2_0_2_1 - 8.73905635810544e-06*G0_2_0_2_2 - 5.87302174603861e-06*G0_2_1_0_0 - 1.12762017523941e-06*G0_2_1_0_1 - 1.71492234984327e-06*G0_2_1_0_2 - 1.12762017523941e-06*G0_2_1_1_0 - 1.71492234984327e-06*G0_2_1_2_0 - 5.82603757207028e-06*G0_2_1_2_2 - 1.38016011031907e-05*G0_2_2_0_0 - 1.71492234984327e-06*G0_2_2_0_1 - 8.73905635810544e-06*G0_2_2_0_2 - 1.71492234984327e-06*G0_2_2_1_0 - 5.82603757207028e-06*G0_2_2_1_2 - 8.73905635810544e-06*G0_2_2_2_0 - 5.82603757207028e-06*G0_2_2_2_1 - 6.847943355881e-05*G0_2_2_2_2;
    A[117] = -A[21] - 0.00243789132678062*G0_0_0_0_0 - 0.000504375107549795*G0_0_0_0_1 + 2.81905043809863e-06*G0_0_0_0_2 - 0.000504375107549795*G0_0_0_1_0 - 0.000173524300508456*G0_0_0_1_1 + 2.8190504380986e-06*G0_0_0_2_0 + 0.000338015893571506*G0_0_0_2_2 - 0.000504375107549795*G0_0_1_0_0 - 0.000173524300508456*G0_0_1_0_1 - 0.000173524300508456*G0_0_1_1_0 - 8.15175418350158e-05*G0_0_1_1_1 + 9.97708934217038e-05*G0_0_1_2_2 + 2.81905043809859e-06*G0_0_2_0_0 + 0.000338015893571506*G0_0_2_0_2 + 9.97708934217038e-05*G0_0_2_1_2 + 0.000338015893571506*G0_0_2_2_0 + 9.97708934217038e-05*G0_0_2_2_1 + 0.000473318568556743*G0_0_2_2_2 - 0.000504375107549795*G0_1_0_0_0 - 0.000173524300508456*G0_1_0_0_1 - 0.000173524300508456*G0_1_0_1_0 - 8.15175418350157e-05*G0_1_0_1_1 + 9.97708934217038e-05*G0_1_0_2_2 - 0.000173524300508456*G0_1_1_0_0 - 8.15175418350158e-05*G0_1_1_0_1 - 8.15175418350158e-05*G0_1_1_1_0 - 1.82063674127208e-05*G0_1_1_1_1 + 4.33194083987806e-05*G0_1_1_1_2 + 4.33194083987806e-05*G0_1_1_2_1 + 0.000107652488604888*G0_1_1_2_2 + 9.97708934217039e-05*G0_1_2_0_2 + 4.33194083987806e-05*G0_1_2_1_1 + 0.000107652488604888*G0_1_2_1_2 + 9.97708934217038e-05*G0_1_2_2_0 + 0.000107652488604888*G0_1_2_2_1 + 0.000281717107113979*G0_1_2_2_2 + 2.8190504380986e-06*G0_2_0_0_0 + 0.000338015893571506*G0_2_0_0_2 + 9.97708934217038e-05*G0_2_0_1_2 + 0.000338015893571506*G0_2_0_2_0 + 9.97708934217038e-05*G0_2_0_2_1 + 0.000473318568556743*G0_2_0_2_2 + 9.97708934217039e-05*G0_2_1_0_2 + 4.33194083987806e-05*G0_2_1_1_1 + 0.000107652488604888*G0_2_1_1_2 + 9.97708934217038e-05*G0_2_1_2_0 + 0.000107652488604888*G0_2_1_2_1 + 0.000281717107113979*G0_2_1_2_2 + 0.000338015893571506*G0_2_2_0_0 + 9.97708934217038e-05*G0_2_2_0_1 + 0.000473318568556743*G0_2_2_0_2 + 9.97708934217038e-05*G0_2_2_1_0 + 0.000107652488604888*G0_2_2_1_1 + 0.000281717107113979*G0_2_2_1_2 + 0.000473318568556743*G0_2_2_2_0 + 0.000281717107113979*G0_2_2_2_1 + 0.00111552175044257*G0_2_2_2_2;
    A[199] = A[117] + 0.0020973735259453*G0_0_0_0_0 + 0.000392411820983315*G0_0_0_0_1 - 1.52228723657322e-05*G0_0_0_0_2 + 0.000392411820983315*G0_0_0_1_0 - 1.52228723657322e-05*G0_0_0_2_0 - 0.000243565957851713*G0_0_0_2_2 + 0.000392411820983315*G0_0_1_0_0 - 0.000392411820983315*G0_0_1_1_1 - 1.52228723657322e-05*G0_0_2_0_0 - 0.000243565957851713*G0_0_2_0_2 - 0.000243565957851713*G0_0_2_2_0 - 0.000194514480228798*G0_0_2_2_2 + 0.000392411820983315*G0_1_0_0_0 - 0.000392411820983315*G0_1_0_1_1 - 0.000392411820983315*G0_1_1_0_1 - 0.000392411820983315*G0_1_1_1_0 - 0.00209737352594531*G0_1_1_1_1 + 1.52228723657328e-05*G0_1_1_1_2 + 1.52228723657328e-05*G0_1_1_2_1 + 0.000243565957851714*G0_1_1_2_2 + 1.52228723657329e-05*G0_1_2_1_1 + 0.000243565957851714*G0_1_2_1_2 + 0.000243565957851714*G0_1_2_2_1 + 0.000194514480228799*G0_1_2_2_2 - 1.52228723657322e-05*G0_2_0_0_0 - 0.000243565957851713*G0_2_0_0_2 - 0.000243565957851713*G0_2_0_2_0 - 0.000194514480228798*G0_2_0_2_2 + 1.52228723657328e-05*G0_2_1_1_1 + 0.000243565957851714*G0_2_1_1_2 + 0.000243565957851714*G0_2_1_2_1 + 0.000194514480228799*G0_2_1_2_2 - 0.000243565957851713*G0_2_2_0_0 - 0.000194514480228798*G0_2_2_0_2 + 0.000243565957851714*G0_2_2_1_1 + 0.000194514480228799*G0_2_2_1_2 - 0.000194514480228798*G0_2_2_2_0 + 0.000194514480228799*G0_2_2_2_1;
    A[52] = A[108];
    A[26] = A[21] + 0.000180066846733544*G0_0_0_0_0 + 6.10794261588016e-06*G0_0_0_0_1 + 3.10565389930522e-05*G0_0_0_0_2 + 6.10794261588016e-06*G0_0_0_1_0 + 3.10565389930522e-05*G0_0_0_2_0 + 1.13936621873149e-06*G0_0_0_2_2 + 6.10794261588016e-06*G0_0_1_0_0 + 9.7351208462336e-05*G0_0_1_1_1 + 3.10565389930522e-05*G0_0_2_0_0 + 1.13936621873149e-06*G0_0_2_0_2 + 1.13936621873149e-06*G0_0_2_2_0 - 3.9231785263538e-06*G0_0_2_2_2 + 6.10794261588016e-06*G0_1_0_0_0 + 9.7351208462336e-05*G0_1_0_1_1 + 9.7351208462336e-05*G0_1_1_0_1 + 9.7351208462336e-05*G0_1_1_1_0 + 0.00149891261002398*G0_1_1_1_1 + 4.91689380578354e-05*G0_1_1_1_2 + 4.91689380578354e-05*G0_1_1_2_1 + 4.91689380578354e-05*G0_1_2_1_1 + 3.10565389930522e-05*G0_2_0_0_0 + 1.13936621873149e-06*G0_2_0_0_2 + 1.13936621873149e-06*G0_2_0_2_0 - 3.9231785263538e-06*G0_2_0_2_2 + 4.91689380578354e-05*G0_2_1_1_1 + 1.13936621873149e-06*G0_2_2_0_0 - 3.9231785263538e-06*G0_2_2_0_2 - 3.9231785263538e-06*G0_2_2_2_0 + 4.31549637898916e-05*G0_2_2_2_2;
    A[16] = 2.69483602816982e-05*G0_0_0_0_0 + 5.47292213958973e-06*G0_0_0_0_1 + 6.73709007042454e-06*G0_0_0_0_2 + 5.47292213958973e-06*G0_0_0_1_0 + 7.29722951945297e-06*G0_0_0_1_1 + 1.82430737986324e-06*G0_0_0_1_2 + 6.73709007042454e-06*G0_0_0_2_0 + 1.82430737986324e-06*G0_0_0_2_1 + 4.49139338028303e-06*G0_0_0_2_2 + 5.47292213958973e-06*G0_0_1_0_0 + 7.29722951945297e-06*G0_0_1_0_1 + 1.82430737986324e-06*G0_0_1_0_2 + 7.29722951945297e-06*G0_0_1_1_0 + 6.73709007042455e-05*G0_0_1_1_1 + 3.64861475972649e-06*G0_0_1_1_2 + 1.82430737986324e-06*G0_0_1_2_0 + 3.64861475972649e-06*G0_0_1_2_1 + 1.82430737986324e-06*G0_0_1_2_2 + 6.73709007042454e-06*G0_0_2_0_0 + 1.82430737986324e-06*G0_0_2_0_1 + 4.49139338028303e-06*G0_0_2_0_2 + 1.82430737986324e-06*G0_0_2_1_0 + 3.64861475972649e-06*G0_0_2_1_1 + 1.82430737986324e-06*G0_0_2_1_2 + 4.49139338028303e-06*G0_0_2_2_0 + 1.82430737986324e-06*G0_0_2_2_1 + 6.73709007042454e-06*G0_0_2_2_2 + 5.47292213958973e-06*G0_1_0_0_0 + 7.29722951945297e-06*G0_1_0_0_1 + 1.82430737986324e-06*G0_1_0_0_2 + 7.29722951945297e-06*G0_1_0_1_0 + 6.73709007042455e-05*G0_1_0_1_1 + 3.64861475972649e-06*G0_1_0_1_2 + 1.82430737986324e-06*G0_1_0_2_0 + 3.64861475972649e-06*G0_1_0_2_1 + 1.82430737986324e-06*G0_1_0_2_2 + 7.29722951945297e-06*G0_1_1_0_0 + 6.73709007042455e-05*G0_1_1_0_1 + 3.64861475972649e-06*G0_1_1_0_2 + 6.73709007042455e-05*G0_1_1_1_0 + 0.00166469333136028*G0_1_1_1_1 + 6.73709007042455e-05*G0_1_1_1_2 + 3.64861475972649e-06*G0_1_1_2_0 + 6.73709007042455e-05*G0_1_1_2_1 + 7.29722951945297e-06*G0_1_1_2_2 + 1.82430737986324e-06*G0_1_2_0_0 + 3.64861475972649e-06*G0_1_2_0_1 + 1.82430737986324e-06*G0_1_2_0_2 + 3.64861475972649e-06*G0_1_2_1_0 + 6.73709007042455e-05*G0_1_2_1_1 + 7.29722951945297e-06*G0_1_2_1_2 + 1.82430737986324e-06*G0_1_2_2_0 + 7.29722951945297e-06*G0_1_2_2_1 + 5.47292213958973e-06*G0_1_2_2_2 + 6.73709007042454e-06*G0_2_0_0_0 + 1.82430737986324e-06*G0_2_0_0_1 + 4.49139338028303e-06*G0_2_0_0_2 + 1.82430737986324e-06*G0_2_0_1_0 + 3.64861475972649e-06*G0_2_0_1_1 + 1.82430737986324e-06*G0_2_0_1_2 + 4.49139338028303e-06*G0_2_0_2_0 + 1.82430737986324e-06*G0_2_0_2_1 + 6.73709007042454e-06*G0_2_0_2_2 + 1.82430737986324e-06*G0_2_1_0_0 + 3.64861475972649e-06*G0_2_1_0_1 + 1.82430737986324e-06*G0_2_1_0_2 + 3.64861475972649e-06*G0_2_1_1_0 + 6.73709007042455e-05*G0_2_1_1_1 + 7.29722951945297e-06*G0_2_1_1_2 + 1.82430737986324e-06*G0_2_1_2_0 + 7.29722951945297e-06*G0_2_1_2_1 + 5.47292213958973e-06*G0_2_1_2_2 + 4.49139338028303e-06*G0_2_2_0_0 + 1.82430737986324e-06*G0_2_2_0_1 + 6.73709007042454e-06*G0_2_2_0_2 + 1.82430737986324e-06*G0_2_2_1_0 + 7.29722951945297e-06*G0_2_2_1_1 + 5.47292213958973e-06*G0_2_2_1_2 + 6.73709007042454e-06*G0_2_2_2_0 + 5.47292213958973e-06*G0_2_2_2_1 + 2.69483602816981e-05*G0_2_2_2_2;
    A[163] = A[16] + 0.00115705282371969*G0_0_0_0_0 + 0.00047658470277526*G0_0_0_0_1 + 0.000280806054615625*G0_0_0_0_2 + 0.00047658470277526*G0_0_0_1_0 + 0.000344520265155244*G0_0_0_1_1 + 9.96615083916839e-05*G0_0_0_1_2 + 0.000280806054615625*G0_0_0_2_0 + 9.96615083916839e-05*G0_0_0_2_1 + 0.000103760143442701*G0_0_0_2_2 + 0.00047658470277526*G0_0_1_0_0 + 0.000344520265155244*G0_0_1_0_1 + 9.96615083916839e-05*G0_0_1_0_2 + 0.000344520265155244*G0_0_1_1_0 - 8.17084150417579e-06*G0_0_1_1_1 + 9.96615083916839e-05*G0_0_1_2_0 + 0.000280806054615625*G0_0_2_0_0 + 9.96615083916839e-05*G0_0_2_0_1 + 0.000103760143442701*G0_0_2_0_2 + 9.96615083916839e-05*G0_0_2_1_0 + 0.0001037601434427*G0_0_2_2_0 + 3.72400967639125e-05*G0_0_2_2_2 + 0.00047658470277526*G0_1_0_0_0 + 0.000344520265155244*G0_1_0_0_1 + 9.96615083916839e-05*G0_1_0_0_2 + 0.000344520265155244*G0_1_0_1_0 - 8.17084150417573e-06*G0_1_0_1_1 + 9.96615083916839e-05*G0_1_0_2_0 + 0.000344520265155244*G0_1_1_0_0 - 8.1708415041758e-06*G0_1_1_0_1 - 8.17084150417583e-06*G0_1_1_1_0 - 0.00379589546256277*G0_1_1_1_1 - 0.000540971374304799*G0_1_1_1_2 - 0.000540971374304799*G0_1_1_2_1 - 0.000176440255805365*G0_1_1_2_2 + 9.96615083916839e-05*G0_1_2_0_0 - 0.000540971374304799*G0_1_2_1_1 - 0.000176440255805365*G0_1_2_1_2 - 0.000176440255805365*G0_1_2_2_1 - 8.66615747568275e-05*G0_1_2_2_2 + 0.000280806054615625*G0_2_0_0_0 + 9.96615083916839e-05*G0_2_0_0_1 + 0.0001037601434427*G0_2_0_0_2 + 9.96615083916839e-05*G0_2_0_1_0 + 0.0001037601434427*G0_2_0_2_0 + 3.72400967639125e-05*G0_2_0_2_2 + 9.96615083916839e-05*G0_2_1_0_0 - 0.000540971374304799*G0_2_1_1_1 - 0.000176440255805365*G0_2_1_1_2 - 0.000176440255805365*G0_2_1_2_1 - 8.66615747568274e-05*G0_2_1_2_2 + 0.000103760143442701*G0_2_2_0_0 + 3.72400967639125e-05*G0_2_2_0_2 - 0.000176440255805365*G0_2_2_1_1 - 8.66615747568274e-05*G0_2_2_1_2 + 3.72400967639125e-05*G0_2_2_2_0 - 8.66615747568275e-05*G0_2_2_2_1 - 6.07769655388807e-05*G0_2_2_2_2;
    A[165] = 0.000473600473600553*G0_0_0_0_0 + 3.61778139555978e-05*G0_0_0_0_1 + 1.56222378444627e-05*G0_0_0_0_2 + 3.61778139555978e-05*G0_0_0_1_0 + 1.31555687111265e-06*G0_0_0_1_1 + 1.56222378444627e-05*G0_0_0_2_0 + 3.61778139555978e-05*G0_0_1_0_0 + 1.31555687111265e-06*G0_0_1_0_1 + 1.31555687111266e-06*G0_0_1_1_0 - 3.46743203886119e-05*G0_0_1_1_1 - 4.3812742225448e-06*G0_0_1_1_2 - 4.3812742225448e-06*G0_0_1_2_1 - 1.12762017523941e-06*G0_0_1_2_2 + 1.56222378444627e-05*G0_0_2_0_0 - 4.3812742225448e-06*G0_0_2_1_1 - 1.12762017523941e-06*G0_0_2_1_2 - 1.12762017523941e-06*G0_0_2_2_1 + 3.61778139555978e-05*G0_1_0_0_0 + 1.31555687111265e-06*G0_1_0_0_1 + 1.31555687111265e-06*G0_1_0_1_0 - 3.46743203886119e-05*G0_1_0_1_1 - 4.3812742225448e-06*G0_1_0_1_2 - 4.3812742225448e-06*G0_1_0_2_1 - 1.12762017523941e-06*G0_1_0_2_2 + 1.31555687111265e-06*G0_1_1_0_0 - 3.46743203886119e-05*G0_1_1_0_1 - 4.3812742225448e-06*G0_1_1_0_2 - 3.46743203886119e-05*G0_1_1_1_0 - 0.000302578080355909*G0_1_1_1_1 - 3.07746339492423e-05*G0_1_1_1_2 - 4.3812742225448e-06*G0_1_1_2_0 - 3.07746339492423e-05*G0_1_1_2_1 - 5.87302174603862e-06*G0_1_1_2_2 - 4.3812742225448e-06*G0_1_2_0_1 - 1.12762017523941e-06*G0_1_2_0_2 - 4.3812742225448e-06*G0_1_2_1_0 - 3.07746339492423e-05*G0_1_2_1_1 - 5.87302174603862e-06*G0_1_2_1_2 - 1.12762017523941e-06*G0_1_2_2_0 - 5.87302174603862e-06*G0_1_2_2_1 - 1.71492234984328e-06*G0_1_2_2_2 + 1.56222378444627e-05*G0_2_0_0_0 - 4.3812742225448e-06*G0_2_0_1_1 - 1.12762017523941e-06*G0_2_0_1_2 - 1.12762017523941e-06*G0_2_0_2_1 - 4.3812742225448e-06*G0_2_1_0_1 - 1.12762017523941e-06*G0_2_1_0_2 - 4.3812742225448e-06*G0_2_1_1_0 - 3.07746339492423e-05*G0_2_1_1_1 - 5.87302174603862e-06*G0_2_1_1_2 - 1.12762017523941e-06*G0_2_1_2_0 - 5.87302174603862e-06*G0_2_1_2_1 - 1.71492234984328e-06*G0_2_1_2_2 - 1.12762017523941e-06*G0_2_2_0_1 - 1.12762017523941e-06*G0_2_2_1_0 - 5.87302174603862e-06*G0_2_2_1_1 - 1.71492234984328e-06*G0_2_2_1_2 - 1.71492234984328e-06*G0_2_2_2_1 - 5.82603757207033e-06*G0_2_2_2_2;
    A[10] = -A[165] - 0.000596933930267365*G0_0_0_0_0 - 4.39889328778292e-05*G0_0_0_0_1 - 2.07611318722464e-05*G0_0_0_0_2 - 4.39889328778292e-05*G0_0_0_1_0 - 2.07611318722464e-05*G0_0_0_2_0 - 4.39889328778292e-05*G0_0_1_0_0 + 6.51905413810286e-06*G0_0_1_1_1 - 2.07611318722464e-05*G0_0_2_0_0 - 4.39889328778292e-05*G0_1_0_0_0 + 6.51905413810284e-06*G0_1_0_1_1 + 6.51905413810285e-06*G0_1_1_0_1 + 6.51905413810284e-06*G0_1_1_1_0 - 5.16825913651397e-05*G0_1_1_1_1 + 6.93016566032557e-06*G0_1_1_1_2 + 6.93016566032557e-06*G0_1_1_2_1 + 6.74222896445232e-06*G0_1_1_2_2 + 6.93016566032556e-06*G0_1_2_1_1 + 6.74222896445232e-06*G0_1_2_1_2 + 6.74222896445232e-06*G0_1_2_2_1 - 2.07611318722464e-05*G0_2_0_0_0 + 6.93016566032557e-06*G0_2_1_1_1 + 6.74222896445232e-06*G0_2_1_1_2 + 6.74222896445232e-06*G0_2_1_2_1 + 6.74222896445232e-06*G0_2_2_1_1;
    A[205] = A[163];
    A[27] = A[181];
    A[208] = A[192] - 0.00866012294583869*G0_0_0_0_0 - 0.00216503073645967*G0_0_0_0_1 - 0.00243565957851713*G0_0_0_0_2 - 0.00216503073645967*G0_0_0_1_0 - 0.000487131915703426*G0_0_0_1_2 - 0.00243565957851713*G0_0_0_2_0 - 0.000487131915703426*G0_0_0_2_1 - 0.000866012294583868*G0_0_0_2_2 - 0.00216503073645967*G0_0_1_0_0 - 0.000487131915703426*G0_0_1_0_2 + 0.00216503073645968*G0_0_1_1_1 + 0.000487131915703427*G0_0_1_1_2 - 0.000487131915703427*G0_0_1_2_0 + 0.000487131915703427*G0_0_1_2_1 - 0.00243565957851713*G0_0_2_0_0 - 0.000487131915703426*G0_0_2_0_1 - 0.000866012294583868*G0_0_2_0_2 - 0.000487131915703426*G0_0_2_1_0 + 0.000487131915703427*G0_0_2_1_1 - 0.000866012294583868*G0_0_2_2_0 - 0.00027062884205746*G0_0_2_2_2 - 0.00216503073645967*G0_1_0_0_0 - 0.000487131915703426*G0_1_0_0_2 + 0.00216503073645968*G0_1_0_1_1 + 0.000487131915703427*G0_1_0_1_2 - 0.000487131915703427*G0_1_0_2_0 + 0.000487131915703427*G0_1_0_2_1 + 0.00216503073645968*G0_1_1_0_1 + 0.000487131915703427*G0_1_1_0_2 + 0.00216503073645968*G0_1_1_1_0 + 0.0086601229458387*G0_1_1_1_1 + 0.00243565957851713*G0_1_1_1_2 + 0.000487131915703427*G0_1_1_2_0 + 0.00243565957851713*G0_1_1_2_1 + 0.000866012294583869*G0_1_1_2_2 - 0.000487131915703427*G0_1_2_0_0 + 0.000487131915703427*G0_1_2_0_1 + 0.000487131915703427*G0_1_2_1_0 + 0.00243565957851713*G0_1_2_1_1 + 0.000866012294583869*G0_1_2_1_2 + 0.000866012294583869*G0_1_2_2_1 + 0.000270628842057459*G0_1_2_2_2 - 0.00243565957851713*G0_2_0_0_0 - 0.000487131915703426*G0_2_0_0_1 - 0.000866012294583868*G0_2_0_0_2 - 0.000487131915703426*G0_2_0_1_0 + 0.000487131915703427*G0_2_0_1_1 - 0.000866012294583868*G0_2_0_2_0 - 0.00027062884205746*G0_2_0_2_2 - 0.000487131915703427*G0_2_1_0_0 + 0.000487131915703427*G0_2_1_0_1 + 0.000487131915703427*G0_2_1_1_0 + 0.00243565957851713*G0_2_1_1_1 + 0.000866012294583869*G0_2_1_1_2 + 0.000866012294583869*G0_2_1_2_1 + 0.000270628842057459*G0_2_1_2_2 - 0.000866012294583868*G0_2_2_0_0 - 0.000270628842057459*G0_2_2_0_2 + 0.000866012294583869*G0_2_2_1_1 + 0.000270628842057459*G0_2_2_1_2 - 0.000270628842057459*G0_2_2_2_0 + 0.000270628842057459*G0_2_2_2_1;
    A[76] = -5.82603757207029e-06*G0_0_0_0_0 - 1.71492234984327e-06*G0_0_0_0_2 - 1.12762017523941e-06*G0_0_0_1_2 - 1.71492234984327e-06*G0_0_0_2_0 - 1.12762017523941e-06*G0_0_0_2_1 - 5.8730217460386e-06*G0_0_0_2_2 - 1.12762017523941e-06*G0_0_1_0_2 + 1.56222378444627e-05*G0_0_1_1_1 - 1.12762017523941e-06*G0_0_1_2_0 - 4.3812742225448e-06*G0_0_1_2_2 - 1.71492234984327e-06*G0_0_2_0_0 - 1.12762017523941e-06*G0_0_2_0_1 - 5.8730217460386e-06*G0_0_2_0_2 - 1.12762017523941e-06*G0_0_2_1_0 - 4.3812742225448e-06*G0_0_2_1_2 - 5.8730217460386e-06*G0_0_2_2_0 - 4.3812742225448e-06*G0_0_2_2_1 - 3.07746339492423e-05*G0_0_2_2_2 - 1.12762017523941e-06*G0_1_0_0_2 + 1.56222378444627e-05*G0_1_0_1_1 - 1.12762017523941e-06*G0_1_0_2_0 - 4.3812742225448e-06*G0_1_0_2_2 + 1.56222378444627e-05*G0_1_1_0_1 + 1.56222378444627e-05*G0_1_1_1_0 + 0.000473600473600554*G0_1_1_1_1 + 3.61778139555979e-05*G0_1_1_1_2 + 3.61778139555979e-05*G0_1_1_2_1 + 1.31555687111265e-06*G0_1_1_2_2 - 1.12762017523941e-06*G0_1_2_0_0 - 4.3812742225448e-06*G0_1_2_0_2 + 3.61778139555979e-05*G0_1_2_1_1 + 1.31555687111266e-06*G0_1_2_1_2 - 4.3812742225448e-06*G0_1_2_2_0 + 1.31555687111265e-06*G0_1_2_2_1 - 3.46743203886119e-05*G0_1_2_2_2 - 1.71492234984327e-06*G0_2_0_0_0 - 1.12762017523941e-06*G0_2_0_0_1 - 5.8730217460386e-06*G0_2_0_0_2 - 1.12762017523941e-06*G0_2_0_1_0 - 4.3812742225448e-06*G0_2_0_1_2 - 5.8730217460386e-06*G0_2_0_2_0 - 4.3812742225448e-06*G0_2_0_2_1 - 3.07746339492423e-05*G0_2_0_2_2 - 1.12762017523941e-06*G0_2_1_0_0 - 4.3812742225448e-06*G0_2_1_0_2 + 3.61778139555979e-05*G0_2_1_1_1 + 1.31555687111266e-06*G0_2_1_1_2 - 4.3812742225448e-06*G0_2_1_2_0 + 1.31555687111265e-06*G0_2_1_2_1 - 3.46743203886119e-05*G0_2_1_2_2 - 5.8730217460386e-06*G0_2_2_0_0 - 4.3812742225448e-06*G0_2_2_0_1 - 3.07746339492423e-05*G0_2_2_0_2 - 4.3812742225448e-06*G0_2_2_1_0 + 1.31555687111265e-06*G0_2_2_1_1 - 3.46743203886119e-05*G0_2_2_1_2 - 3.07746339492423e-05*G0_2_2_2_0 - 3.46743203886119e-05*G0_2_2_2_1 - 0.000302578080355909*G0_2_2_2_2;
    A[47] = -A[76] - 1.51523961047796e-05*G0_0_1_1_1 - 1.51523961047796e-05*G0_0_2_2_2 - 1.51523961047796e-05*G0_1_0_1_1 - 1.51523961047796e-05*G0_1_1_0_1 - 1.51523961047796e-05*G0_1_1_1_0 + 0.000171022393244644*G0_1_1_1_1 + 1.5034935669859e-06*G0_1_1_1_2 + 1.5034935669859e-06*G0_1_1_2_1 + 1.50349356698591e-06*G0_1_2_1_1 + 1.50349356698591e-06*G0_1_2_2_2 - 1.51523961047796e-05*G0_2_0_2_2 + 1.50349356698591e-06*G0_2_1_1_1 + 1.5034935669859e-06*G0_2_1_2_2 - 1.51523961047796e-05*G0_2_2_0_2 + 1.5034935669859e-06*G0_2_2_1_2 - 1.51523961047796e-05*G0_2_2_2_0 + 1.50349356698591e-06*G0_2_2_2_1 + 0.000171022393244644*G0_2_2_2_2;
    A[20] = A[76];
    A[11] = A[165];
    A[51] = -A[21] - 5.67333900667336e-05*G0_0_0_0_0 - 3.71174974349649e-06*G0_0_0_0_1 + 3.38286052571811e-06*G0_0_0_0_2 - 3.71174974349649e-06*G0_0_0_1_0 + 3.38286052571812e-06*G0_0_0_2_0 + 2.36095474190748e-06*G0_0_0_2_2 - 3.71174974349649e-06*G0_0_1_0_0 + 2.67339949879676e-05*G0_0_1_1_1 + 3.38286052571811e-06*G0_0_2_0_0 + 2.36095474190749e-06*G0_0_2_0_2 + 2.36095474190748e-06*G0_0_2_2_0 + 2.32101819403445e-05*G0_0_2_2_2 - 3.71174974349649e-06*G0_1_0_0_0 + 2.67339949879676e-05*G0_1_0_1_1 + 2.67339949879676e-05*G0_1_1_0_1 + 2.67339949879676e-05*G0_1_1_1_0 + 0.000265578043355865*G0_1_1_1_1 + 5.91060908521325e-05*G0_1_1_1_2 + 5.91060908521325e-05*G0_1_1_2_1 + 1.55635076270023e-05*G0_1_1_2_2 + 5.91060908521325e-05*G0_1_2_1_1 + 1.55635076270023e-05*G0_1_2_1_2 + 1.55635076270023e-05*G0_1_2_2_1 + 2.61232007263797e-05*G0_1_2_2_2 + 3.38286052571812e-06*G0_2_0_0_0 + 2.36095474190749e-06*G0_2_0_0_2 + 2.36095474190749e-06*G0_2_0_2_0 + 2.32101819403445e-05*G0_2_0_2_2 + 5.91060908521325e-05*G0_2_1_1_1 + 1.55635076270023e-05*G0_2_1_1_2 + 1.55635076270023e-05*G0_2_1_2_1 + 2.61232007263797e-05*G0_2_1_2_2 + 2.36095474190749e-06*G0_2_2_0_0 + 2.32101819403445e-05*G0_2_2_0_2 + 1.55635076270023e-05*G0_2_2_1_1 + 2.61232007263797e-05*G0_2_2_1_2 + 2.32101819403445e-05*G0_2_2_2_0 + 2.61232007263797e-05*G0_2_2_2_1 + 0.00027544471988921*G0_2_2_2_2;
    A[32] = 2.69483602816981e-05*G0_0_0_0_0 + 6.73709007042453e-06*G0_0_0_0_1 + 5.47292213958973e-06*G0_0_0_0_2 + 6.73709007042453e-06*G0_0_0_1_0 + 4.49139338028302e-06*G0_0_0_1_1 + 1.82430737986324e-06*G0_0_0_1_2 + 5.47292213958973e-06*G0_0_0_2_0 + 1.82430737986324e-06*G0_0_0_2_1 + 7.29722951945296e-06*G0_0_0_2_2 + 6.73709007042453e-06*G0_0_1_0_0 + 4.49139338028302e-06*G0_0_1_0_1 + 1.82430737986324e-06*G0_0_1_0_2 + 4.49139338028302e-06*G0_0_1_1_0 + 6.73709007042454e-06*G0_0_1_1_1 + 1.82430737986324e-06*G0_0_1_1_2 + 1.82430737986324e-06*G0_0_1_2_0 + 1.82430737986324e-06*G0_0_1_2_1 + 3.64861475972649e-06*G0_0_1_2_2 + 5.47292213958973e-06*G0_0_2_0_0 + 1.82430737986324e-06*G0_0_2_0_1 + 7.29722951945296e-06*G0_0_2_0_2 + 1.82430737986324e-06*G0_0_2_1_0 + 1.82430737986324e-06*G0_0_2_1_1 + 3.64861475972649e-06*G0_0_2_1_2 + 7.29722951945296e-06*G0_0_2_2_0 + 3.64861475972649e-06*G0_0_2_2_1 + 6.73709007042453e-05*G0_0_2_2_2 + 6.73709007042453e-06*G0_1_0_0_0 + 4.49139338028302e-06*G0_1_0_0_1 + 1.82430737986324e-06*G0_1_0_0_2 + 4.49139338028302e-06*G0_1_0_1_0 + 6.73709007042454e-06*G0_1_0_1_1 + 1.82430737986324e-06*G0_1_0_1_2 + 1.82430737986324e-06*G0_1_0_2_0 + 1.82430737986324e-06*G0_1_0_2_1 + 3.64861475972649e-06*G0_1_0_2_2 + 4.49139338028302e-06*G0_1_1_0_0 + 6.73709007042454e-06*G0_1_1_0_1 + 1.82430737986324e-06*G0_1_1_0_2 + 6.73709007042454e-06*G0_1_1_1_0 + 2.69483602816982e-05*G0_1_1_1_1 + 5.47292213958973e-06*G0_1_1_1_2 + 1.82430737986324e-06*G0_1_1_2_0 + 5.47292213958973e-06*G0_1_1_2_1 + 7.29722951945298e-06*G0_1_1_2_2 + 1.82430737986324e-06*G0_1_2_0_0 + 1.82430737986324e-06*G0_1_2_0_1 + 3.64861475972649e-06*G0_1_2_0_2 + 1.82430737986324e-06*G0_1_2_1_0 + 5.47292213958973e-06*G0_1_2_1_1 + 7.29722951945298e-06*G0_1_2_1_2 + 3.64861475972649e-06*G0_1_2_2_0 + 7.29722951945298e-06*G0_1_2_2_1 + 6.73709007042454e-05*G0_1_2_2_2 + 5.47292213958973e-06*G0_2_0_0_0 + 1.82430737986324e-06*G0_2_0_0_1 + 7.29722951945296e-06*G0_2_0_0_2 + 1.82430737986324e-06*G0_2_0_1_0 + 1.82430737986324e-06*G0_2_0_1_1 + 3.64861475972649e-06*G0_2_0_1_2 + 7.29722951945296e-06*G0_2_0_2_0 + 3.64861475972649e-06*G0_2_0_2_1 + 6.73709007042453e-05*G0_2_0_2_2 + 1.82430737986324e-06*G0_2_1_0_0 + 1.82430737986324e-06*G0_2_1_0_1 + 3.64861475972649e-06*G0_2_1_0_2 + 1.82430737986324e-06*G0_2_1_1_0 + 5.47292213958973e-06*G0_2_1_1_1 + 7.29722951945298e-06*G0_2_1_1_2 + 3.64861475972649e-06*G0_2_1_2_0 + 7.29722951945298e-06*G0_2_1_2_1 + 6.73709007042454e-05*G0_2_1_2_2 + 7.29722951945296e-06*G0_2_2_0_0 + 3.64861475972649e-06*G0_2_2_0_1 + 6.73709007042453e-05*G0_2_2_0_2 + 3.64861475972649e-06*G0_2_2_1_0 + 7.29722951945298e-06*G0_2_2_1_1 + 6.73709007042454e-05*G0_2_2_1_2 + 6.73709007042453e-05*G0_2_2_2_0 + 6.73709007042454e-05*G0_2_2_2_1 + 0.00166469333136028*G0_2_2_2_2;
    A[214] = A[32] - 6.07769655388805e-05*G0_0_0_0_0 + 3.72400967639125e-05*G0_0_0_0_1 - 8.66615747568273e-05*G0_0_0_0_2 + 3.72400967639125e-05*G0_0_0_1_0 + 0.0001037601434427*G0_0_0_1_1 - 8.66615747568273e-05*G0_0_0_2_0 - 0.000176440255805365*G0_0_0_2_2 + 3.72400967639125e-05*G0_0_1_0_0 + 0.0001037601434427*G0_0_1_0_1 + 0.0001037601434427*G0_0_1_1_0 + 0.000280806054615625*G0_0_1_1_1 + 9.96615083916838e-05*G0_0_1_1_2 + 9.96615083916838e-05*G0_0_1_2_1 - 8.66615747568273e-05*G0_0_2_0_0 - 0.000176440255805365*G0_0_2_0_2 + 9.96615083916838e-05*G0_0_2_1_1 - 0.000176440255805365*G0_0_2_2_0 - 0.000540971374304798*G0_0_2_2_2 + 3.72400967639125e-05*G0_1_0_0_0 + 0.0001037601434427*G0_1_0_0_1 + 0.0001037601434427*G0_1_0_1_0 + 0.000280806054615625*G0_1_0_1_1 + 9.96615083916838e-05*G0_1_0_1_2 + 9.96615083916838e-05*G0_1_0_2_1 + 0.0001037601434427*G0_1_1_0_0 + 0.000280806054615625*G0_1_1_0_1 + 9.96615083916838e-05*G0_1_1_0_2 + 0.000280806054615625*G0_1_1_1_0 + 0.00115705282371968*G0_1_1_1_1 + 0.000476584702775259*G0_1_1_1_2 + 9.96615083916838e-05*G0_1_1_2_0 + 0.000476584702775259*G0_1_1_2_1 + 0.000344520265155244*G0_1_1_2_2 + 9.96615083916838e-05*G0_1_2_0_1 + 9.96615083916838e-05*G0_1_2_1_0 + 0.000476584702775259*G0_1_2_1_1 + 0.000344520265155244*G0_1_2_1_2 + 0.000344520265155244*G0_1_2_2_1 - 8.170841504176e-06*G0_1_2_2_2 - 8.66615747568273e-05*G0_2_0_0_0 - 0.000176440255805365*G0_2_0_0_2 + 9.96615083916838e-05*G0_2_0_1_1 - 0.000176440255805365*G0_2_0_2_0 - 0.000540971374304798*G0_2_0_2_2 + 9.96615083916838e-05*G0_2_1_0_1 + 9.96615083916838e-05*G0_2_1_1_0 + 0.000476584702775259*G0_2_1_1_1 + 0.000344520265155244*G0_2_1_1_2 + 0.000344520265155244*G0_2_1_2_1 - 8.17084150417598e-06*G0_2_1_2_2 - 0.000176440255805365*G0_2_2_0_0 - 0.000540971374304798*G0_2_2_0_2 + 0.000344520265155244*G0_2_2_1_1 - 8.170841504176e-06*G0_2_2_1_2 - 0.000540971374304798*G0_2_2_2_0 - 8.17084150417602e-06*G0_2_2_2_1 - 0.00379589546256276*G0_2_2_2_2;
    A[25] = A[165] - 0.000222704984609784*G0_0_0_0_0 + 5.01556057111697e-06*G0_0_0_0_1 + 2.20825617651052e-05*G0_0_0_0_2 + 5.01556057111697e-06*G0_0_0_1_0 + 2.20825617651052e-05*G0_0_0_2_0 + 1.32730291460473e-05*G0_0_0_2_2 + 5.01556057111698e-06*G0_0_1_0_0 - 4.54924264448152e-05*G0_0_1_1_1 + 2.20825617651052e-05*G0_0_2_0_0 + 1.32730291460473e-05*G0_0_2_0_2 + 1.32730291460473e-05*G0_0_2_2_0 + 5.01556057111697e-06*G0_1_0_0_0 - 4.54924264448152e-05*G0_1_0_1_1 - 4.54924264448152e-05*G0_1_1_0_1 - 4.54924264448152e-05*G0_1_1_1_0 - 0.000767956323512011*G0_1_1_1_1 - 5.60873576746698e-06*G0_1_1_1_2 - 5.60873576746698e-06*G0_1_1_2_1 - 5.60873576746698e-06*G0_1_2_1_1 + 2.20825617651052e-05*G0_2_0_0_0 + 1.32730291460473e-05*G0_2_0_0_2 + 1.32730291460473e-05*G0_2_0_2_0 - 5.60873576746698e-06*G0_2_1_1_1 + 1.32730291460473e-05*G0_2_2_0_0;
    A[61] = -A[76] + 6.74222896445233e-06*G0_0_0_2_2 - 2.07611318722465e-05*G0_0_1_1_1 + 6.74222896445233e-06*G0_0_2_0_2 + 6.74222896445233e-06*G0_0_2_2_0 + 6.93016566032558e-06*G0_0_2_2_2 - 2.07611318722465e-05*G0_1_0_1_1 - 2.07611318722465e-05*G0_1_1_0_1 - 2.07611318722465e-05*G0_1_1_1_0 - 0.000596933930267365*G0_1_1_1_1 - 4.39889328778292e-05*G0_1_1_1_2 - 4.39889328778292e-05*G0_1_1_2_1 - 4.39889328778292e-05*G0_1_2_1_1 + 6.51905413810289e-06*G0_1_2_2_2 + 6.74222896445233e-06*G0_2_0_0_2 + 6.74222896445233e-06*G0_2_0_2_0 + 6.93016566032558e-06*G0_2_0_2_2 - 4.39889328778292e-05*G0_2_1_1_1 + 6.51905413810289e-06*G0_2_1_2_2 + 6.74222896445233e-06*G0_2_2_0_0 + 6.93016566032558e-06*G0_2_2_0_2 + 6.5190541381029e-06*G0_2_2_1_2 + 6.93016566032558e-06*G0_2_2_2_0 + 6.5190541381029e-06*G0_2_2_2_1 - 5.16825913651396e-05*G0_2_2_2_2;
    A[187] = A[117];
    A[85] = A[108] + 6.90667357334139e-05*G0_0_0_0_1 - 6.90667357334139e-05*G0_0_0_0_2 + 6.9066735733414e-05*G0_0_0_1_0 + 7.20267386934174e-05*G0_0_0_1_1 - 6.90667357334139e-05*G0_0_0_2_0 - 7.20267386934174e-05*G0_0_0_2_2 + 6.9066735733414e-05*G0_0_1_0_0 + 7.20267386934174e-05*G0_0_1_0_1 + 7.20267386934174e-05*G0_0_1_1_0 + 1.97333530666883e-06*G0_0_1_1_1 - 6.90667357334139e-05*G0_0_2_0_0 - 7.20267386934174e-05*G0_0_2_0_2 - 7.20267386934174e-05*G0_0_2_2_0 - 1.97333530666896e-06*G0_0_2_2_2 + 6.90667357334139e-05*G0_1_0_0_0 + 7.20267386934174e-05*G0_1_0_0_1 + 7.20267386934174e-05*G0_1_0_1_0 + 1.97333530666885e-06*G0_1_0_1_1 + 7.20267386934174e-05*G0_1_1_0_0 + 1.97333530666886e-06*G0_1_1_0_1 + 1.97333530666885e-06*G0_1_1_1_0 - 0.000730134063467523*G0_1_1_1_1 - 6.70934004267456e-05*G0_1_1_1_2 - 6.70934004267456e-05*G0_1_1_2_1 - 6.70934004267456e-05*G0_1_2_1_1 + 6.70934004267451e-05*G0_1_2_2_2 - 6.90667357334139e-05*G0_2_0_0_0 - 7.20267386934174e-05*G0_2_0_0_2 - 7.20267386934174e-05*G0_2_0_2_0 - 1.97333530666896e-06*G0_2_0_2_2 - 6.70934004267456e-05*G0_2_1_1_1 + 6.70934004267451e-05*G0_2_1_2_2 - 7.20267386934174e-05*G0_2_2_0_0 - 1.97333530666897e-06*G0_2_2_0_2 + 6.70934004267451e-05*G0_2_2_1_2 - 1.97333530666896e-06*G0_2_2_2_0 + 6.70934004267451e-05*G0_2_2_2_1 + 0.000730134063467519*G0_2_2_2_2;
    A[91] = A[21];
    A[109] = A[181] + 0.000208962113724054*G0_0_0_0_0 + 2.50895488990771e-05*G0_0_0_0_1 + 2.54419302038395e-05*G0_0_0_0_2 + 2.50895488990771e-05*G0_0_0_1_0 + 1.51523961047801e-06*G0_0_0_1_2 + 2.54419302038394e-05*G0_0_0_2_0 + 1.51523961047801e-06*G0_0_0_2_1 - 5.49714835429213e-06*G0_0_0_2_2 + 2.50895488990771e-05*G0_0_1_0_0 + 1.51523961047801e-06*G0_0_1_0_2 - 1.22276312752523e-05*G0_0_1_1_2 + 1.51523961047801e-06*G0_0_1_2_0 - 1.22276312752523e-05*G0_0_1_2_1 + 2.54419302038395e-05*G0_0_2_0_0 + 1.51523961047801e-06*G0_0_2_0_1 - 5.49714835429213e-06*G0_0_2_0_2 + 1.51523961047801e-06*G0_0_2_1_0 - 1.22276312752523e-05*G0_0_2_1_1 - 5.49714835429213e-06*G0_0_2_2_0 + 0.00010874487064965*G0_0_2_2_2 + 2.50895488990771e-05*G0_1_0_0_0 + 1.51523961047801e-06*G0_1_0_0_2 - 1.22276312752523e-05*G0_1_0_1_2 + 1.51523961047801e-06*G0_1_0_2_0 - 1.22276312752523e-05*G0_1_0_2_1 - 1.22276312752523e-05*G0_1_1_0_2 - 6.69524479048387e-06*G0_1_1_1_1 - 7.11105473010353e-05*G0_1_1_1_2 - 1.22276312752523e-05*G0_1_1_2_0 - 7.11105473010353e-05*G0_1_1_2_1 - 5.10952891905357e-05*G0_1_1_2_2 + 1.51523961047801e-06*G0_1_2_0_0 - 1.22276312752523e-05*G0_1_2_0_1 - 1.22276312752523e-05*G0_1_2_1_0 - 7.11105473010353e-05*G0_1_2_1_1 - 5.10952891905357e-05*G0_1_2_1_2 - 5.10952891905357e-05*G0_1_2_2_1 + 8.57696095791478e-05*G0_1_2_2_2 + 2.54419302038395e-05*G0_2_0_0_0 + 1.515239610478e-06*G0_2_0_0_1 - 5.49714835429213e-06*G0_2_0_0_2 + 1.51523961047801e-06*G0_2_0_1_0 - 1.22276312752523e-05*G0_2_0_1_1 - 5.49714835429213e-06*G0_2_0_2_0 + 0.00010874487064965*G0_2_0_2_2 + 1.51523961047801e-06*G0_2_1_0_0 - 1.22276312752523e-05*G0_2_1_0_1 - 1.22276312752523e-05*G0_2_1_1_0 - 7.11105473010353e-05*G0_2_1_1_1 - 5.10952891905357e-05*G0_2_1_1_2 - 5.10952891905357e-05*G0_2_1_2_1 + 8.57696095791478e-05*G0_2_1_2_2 - 5.49714835429213e-06*G0_2_2_0_0 + 0.000108744870649651*G0_2_2_0_2 - 5.10952891905357e-05*G0_2_2_1_1 + 8.57696095791478e-05*G0_2_2_1_2 + 0.00010874487064965*G0_2_2_2_0 + 8.57696095791478e-05*G0_2_2_2_1 + 0.00144582049343978*G0_2_2_2_2;
    A[2] = -8.94681450237157e-05*G0_0_0_0_0 - 2.82639171528107e-06*G0_0_0_0_1 - 6.63945108389665e-06*G0_0_0_0_2 - 2.82639171528107e-06*G0_0_0_1_0 - 6.63945108389665e-06*G0_0_0_2_0 - 1.59232302089472e-06*G0_0_0_2_2 - 2.82639171528107e-06*G0_0_1_0_0 + 1.09752093879097e-06*G0_0_1_1_1 - 6.63945108389665e-06*G0_0_2_0_0 - 1.59232302089472e-06*G0_0_2_0_2 - 1.59232302089472e-06*G0_0_2_2_0 - 6.63945108389664e-06*G0_0_2_2_2 - 2.82639171528107e-06*G0_1_0_0_0 + 1.09752093879097e-06*G0_1_0_1_1 + 1.09752093879097e-06*G0_1_1_0_1 + 1.09752093879097e-06*G0_1_1_1_0 + 1.33860848146585e-05*G0_1_1_1_1 + 1.09752093879097e-06*G0_1_1_1_2 + 1.09752093879097e-06*G0_1_1_2_1 + 1.09752093879097e-06*G0_1_2_1_1 - 2.82639171528109e-06*G0_1_2_2_2 - 6.63945108389665e-06*G0_2_0_0_0 - 1.59232302089472e-06*G0_2_0_0_2 - 1.59232302089472e-06*G0_2_0_2_0 - 6.63945108389665e-06*G0_2_0_2_2 + 1.09752093879097e-06*G0_2_1_1_1 - 2.82639171528109e-06*G0_2_1_2_2 - 1.59232302089472e-06*G0_2_2_0_0 - 6.63945108389665e-06*G0_2_2_0_2 - 2.82639171528109e-06*G0_2_2_1_2 - 6.63945108389664e-06*G0_2_2_2_0 - 2.82639171528109e-06*G0_2_2_2_1 - 8.94681450237156e-05*G0_2_2_2_2;
    A[1] = A[2] - 0.000102854229838374*G0_1_1_1_1 + 0.000102854229838374*G0_2_2_2_2;
    A[41] = A[1] + 2.09887114649053e-05*G0_0_0_0_0 - 1.2209278082296e-05*G0_0_0_1_1 - 1.2209278082296e-05*G0_0_1_0_1 - 1.2209278082296e-05*G0_0_1_1_0 - 4.97415576780739e-05*G0_0_1_1_1 - 1.2209278082296e-05*G0_1_0_0_1 - 1.2209278082296e-05*G0_1_0_1_0 - 4.97415576780739e-05*G0_1_0_1_1 - 1.2209278082296e-05*G0_1_1_0_0 - 4.97415576780739e-05*G0_1_1_0_1 - 4.97415576780739e-05*G0_1_1_1_0 - 0.00021722105055442*G0_1_1_1_1 - 2.79482422339612e-05*G0_1_1_1_2 - 2.79482422339612e-05*G0_1_1_2_1 - 2.79482422339612e-05*G0_1_2_1_1 - 2.79482422339612e-05*G0_2_1_1_1 + 2.23615302980435e-06*G0_2_2_2_2;
    A[35] = A[41] + 4.31549637898917e-05*G0_0_0_0_0 - 3.92317852635377e-06*G0_0_0_0_1 - 3.92317852635377e-06*G0_0_0_1_0 + 1.13936621873148e-06*G0_0_0_1_1 - 3.92317852635377e-06*G0_0_1_0_0 + 1.13936621873148e-06*G0_0_1_0_1 + 1.13936621873148e-06*G0_0_1_1_0 + 3.10565389930521e-05*G0_0_1_1_1 + 4.91689380578352e-05*G0_0_2_2_2 - 3.92317852635377e-06*G0_1_0_0_0 + 1.13936621873148e-06*G0_1_0_0_1 + 1.13936621873148e-06*G0_1_0_1_0 + 3.10565389930521e-05*G0_1_0_1_1 + 1.13936621873148e-06*G0_1_1_0_0 + 3.10565389930521e-05*G0_1_1_0_1 + 3.10565389930521e-05*G0_1_1_1_0 + 0.000180066846733544*G0_1_1_1_1 + 6.10794261588014e-06*G0_1_1_1_2 + 6.10794261588014e-06*G0_1_1_2_1 + 6.10794261588014e-06*G0_1_2_1_1 + 9.73512084623361e-05*G0_1_2_2_2 + 4.91689380578352e-05*G0_2_0_2_2 + 6.10794261588014e-06*G0_2_1_1_1 + 9.73512084623361e-05*G0_2_1_2_2 + 4.91689380578352e-05*G0_2_2_0_2 + 9.73512084623361e-05*G0_2_2_1_2 + 4.91689380578352e-05*G0_2_2_2_0 + 9.73512084623361e-05*G0_2_2_2_1 + 0.00149891261002397*G0_2_2_2_2;
    A[31] = A[2] + 0.000102854229838374*G0_0_0_0_0 - 0.000102854229838374*G0_1_1_1_1;
    A[60] = A[31] - 4.36071864643247e-07*G0_0_0_0_0 + 0.000207780168097664*G0_1_1_1_1 - 9.74627958755108e-06*G0_1_1_1_2 - 9.74627958755108e-06*G0_1_1_2_1 - 2.66246099579478e-05*G0_1_1_2_2 - 9.74627958755108e-06*G0_1_2_1_1 - 2.66246099579478e-05*G0_1_2_1_2 - 2.66246099579478e-05*G0_1_2_2_1 - 9.74627958755109e-06*G0_1_2_2_2 - 9.74627958755108e-06*G0_2_1_1_1 - 2.66246099579478e-05*G0_2_1_1_2 - 2.66246099579478e-05*G0_2_1_2_1 - 9.74627958755109e-06*G0_2_1_2_2 - 2.66246099579478e-05*G0_2_2_1_1 - 9.74627958755109e-06*G0_2_2_1_2 - 9.74627958755109e-06*G0_2_2_2_1 + 0.000207780168097663*G0_2_2_2_2;
    A[170] = -A[60] + 4.48992512484651e-05*G0_0_0_0_0 + 1.5669222018431e-05*G0_0_0_0_1 + 1.5669222018431e-05*G0_0_0_1_0 + 5.88741064931639e-05*G0_0_0_1_1 + 1.5669222018431e-05*G0_0_1_0_0 + 5.88741064931639e-05*G0_0_1_0_1 + 5.88741064931639e-05*G0_0_1_1_0 + 0.000258412956825698*G0_0_1_1_1 + 2.32571661143128e-05*G0_0_1_1_2 + 2.32571661143128e-05*G0_0_1_2_1 + 2.32571661143128e-05*G0_0_2_1_1 + 3.55200355200415e-05*G0_0_2_2_2 + 1.5669222018431e-05*G0_1_0_0_0 + 5.88741064931639e-05*G0_1_0_0_1 + 5.88741064931639e-05*G0_1_0_1_0 + 0.000258412956825698*G0_1_0_1_1 + 2.32571661143128e-05*G0_1_0_1_2 + 2.32571661143128e-05*G0_1_0_2_1 + 5.88741064931639e-05*G0_1_1_0_0 + 0.000258412956825698*G0_1_1_0_1 + 2.32571661143128e-05*G0_1_1_0_2 + 0.000258412956825698*G0_1_1_1_0 + 0.00155226901258673*G0_1_1_1_1 + 0.000128325525150943*G0_1_1_1_2 + 2.32571661143128e-05*G0_1_1_2_0 + 0.000128325525150943*G0_1_1_2_1 - 5.2886560823078e-06*G0_1_1_2_2 + 2.32571661143128e-05*G0_1_2_0_1 + 2.32571661143128e-05*G0_1_2_1_0 + 0.000128325525150943*G0_1_2_1_1 - 5.28865608230781e-06*G0_1_2_1_2 - 5.28865608230781e-06*G0_1_2_2_1 + 6.54254622508704e-06*G0_1_2_2_2 + 2.32571661143128e-05*G0_2_0_1_1 + 3.55200355200415e-05*G0_2_0_2_2 + 2.32571661143128e-05*G0_2_1_0_1 + 2.32571661143128e-05*G0_2_1_1_0 + 0.000128325525150943*G0_2_1_1_1 - 5.28865608230781e-06*G0_2_1_1_2 - 5.28865608230781e-06*G0_2_1_2_1 + 6.54254622508705e-06*G0_2_1_2_2 + 3.55200355200415e-05*G0_2_2_0_2 - 5.28865608230781e-06*G0_2_2_1_1 + 6.54254622508705e-06*G0_2_2_1_2 + 3.55200355200415e-05*G0_2_2_2_0 + 6.54254622508705e-06*G0_2_2_2_1 + 0.000263023278896339*G0_2_2_2_2;
    A[4] = A[60];
    A[86] = A[170];
    A[138] = A[170] + 0.00011276201752394*G0_0_0_0_0 + 6.76572105143626e-06*G0_0_0_0_1 + 2.25524035047882e-05*G0_0_0_0_2 + 6.76572105143626e-06*G0_0_0_1_0 - 3.68355923911541e-05*G0_0_0_1_1 + 2.25524035047882e-05*G0_0_0_2_0 + 6.76572105143625e-06*G0_0_1_0_0 - 3.68355923911541e-05*G0_0_1_0_1 - 3.68355923911541e-05*G0_0_1_1_0 - 0.000105244549689011*G0_0_1_1_1 + 2.25524035047882e-05*G0_0_2_0_0 - 2.25524035047883e-05*G0_0_2_2_2 + 6.76572105143626e-06*G0_1_0_0_0 - 3.68355923911541e-05*G0_1_0_0_1 - 3.68355923911541e-05*G0_1_0_1_0 - 0.000105244549689011*G0_1_0_1_1 - 3.68355923911541e-05*G0_1_1_0_0 - 0.000105244549689011*G0_1_1_0_1 - 0.000105244549689011*G0_1_1_1_0 + 0.000105244549689012*G0_1_1_1_2 + 0.000105244549689012*G0_1_1_2_1 + 3.68355923911542e-05*G0_1_1_2_2 + 0.000105244549689012*G0_1_2_1_1 + 3.68355923911542e-05*G0_1_2_1_2 + 3.68355923911542e-05*G0_1_2_2_1 - 6.76572105143651e-06*G0_1_2_2_2 + 2.25524035047882e-05*G0_2_0_0_0 - 2.25524035047883e-05*G0_2_0_2_2 + 0.000105244549689012*G0_2_1_1_1 + 3.68355923911542e-05*G0_2_1_1_2 + 3.68355923911543e-05*G0_2_1_2_1 - 6.76572105143651e-06*G0_2_1_2_2 - 2.25524035047883e-05*G0_2_2_0_2 + 3.68355923911542e-05*G0_2_2_1_1 - 6.76572105143651e-06*G0_2_2_1_2 - 2.25524035047883e-05*G0_2_2_2_0 - 6.76572105143652e-06*G0_2_2_2_1 - 0.000112762017523942*G0_2_2_2_2;
    A[57] = -A[138] + 0.000494273510146606*G0_0_0_0_0 + 5.90121225041954e-05*G0_0_0_0_1 + 0.000178163987687827*G0_0_0_0_2 + 5.90121225041954e-05*G0_0_0_1_0 - 6.38984765969018e-06*G0_0_0_1_1 + 2.49955805511402e-05*G0_0_0_1_2 + 0.000178163987687827*G0_0_0_2_0 + 2.49955805511402e-05*G0_0_0_2_1 + 9.94185121169414e-05*G0_0_0_2_2 + 5.90121225041954e-05*G0_0_1_0_0 - 6.38984765969018e-06*G0_0_1_0_1 + 2.49955805511402e-05*G0_0_1_0_2 - 6.38984765969018e-06*G0_0_1_1_0 - 1.31555687111265e-05*G0_0_1_1_1 - 6.7657210514365e-06*G0_0_1_1_2 + 2.49955805511402e-05*G0_0_1_2_0 - 6.7657210514365e-06*G0_0_1_2_1 + 0.000178163987687827*G0_0_2_0_0 + 2.49955805511402e-05*G0_0_2_0_1 + 9.94185121169414e-05*G0_0_2_0_2 + 2.49955805511402e-05*G0_0_2_1_0 - 6.76572105143651e-06*G0_0_2_1_1 + 9.94185121169414e-05*G0_0_2_2_0 + 6.08914894629282e-05*G0_0_2_2_2 + 5.90121225041954e-05*G0_1_0_0_0 - 6.38984765969018e-06*G0_1_0_0_1 + 2.49955805511402e-05*G0_1_0_0_2 - 6.38984765969018e-06*G0_1_0_1_0 - 1.31555687111265e-05*G0_1_0_1_1 - 6.7657210514365e-06*G0_1_0_1_2 + 2.49955805511402e-05*G0_1_0_2_0 - 6.7657210514365e-06*G0_1_0_2_1 - 6.38984765969019e-06*G0_1_1_0_0 - 1.31555687111265e-05*G0_1_1_0_1 - 6.76572105143651e-06*G0_1_1_0_2 - 1.31555687111265e-05*G0_1_1_1_0 + 9.20889809778854e-05*G0_1_1_1_1 - 6.57778435556326e-05*G0_1_1_1_2 - 6.76572105143651e-06*G0_1_1_2_0 - 6.57778435556326e-05*G0_1_1_2_1 - 1.69143026285913e-05*G0_1_1_2_2 + 2.49955805511402e-05*G0_1_2_0_0 - 6.76572105143651e-06*G0_1_2_0_1 - 6.76572105143651e-06*G0_1_2_1_0 - 6.57778435556326e-05*G0_1_2_1_1 - 1.69143026285913e-05*G0_1_2_1_2 - 1.69143026285913e-05*G0_1_2_2_1 + 4.88635409270406e-06*G0_1_2_2_2 + 0.000178163987687827*G0_2_0_0_0 + 2.49955805511402e-05*G0_2_0_0_1 + 9.94185121169414e-05*G0_2_0_0_2 + 2.49955805511402e-05*G0_2_0_1_0 - 6.7657210514365e-06*G0_2_0_1_1 + 9.94185121169414e-05*G0_2_0_2_0 + 6.08914894629282e-05*G0_2_0_2_2 + 2.49955805511402e-05*G0_2_1_0_0 - 6.76572105143651e-06*G0_2_1_0_1 - 6.7657210514365e-06*G0_2_1_1_0 - 6.57778435556326e-05*G0_2_1_1_1 - 1.69143026285913e-05*G0_2_1_1_2 - 1.69143026285913e-05*G0_2_1_2_1 + 4.88635409270406e-06*G0_2_1_2_2 + 9.94185121169414e-05*G0_2_2_0_0 + 6.08914894629282e-05*G0_2_2_0_2 - 1.69143026285913e-05*G0_2_2_1_1 + 4.88635409270406e-06*G0_2_2_1_2 + 6.08914894629282e-05*G0_2_2_2_0 + 4.88635409270406e-06*G0_2_2_2_1 - 9.20889809778856e-05*G0_2_2_2_2;
    A[106] = A[2] + 0.000207780168097663*G0_0_0_0_0 - 9.74627958755107e-06*G0_0_0_0_2 - 9.74627958755107e-06*G0_0_0_2_0 - 2.66246099579478e-05*G0_0_0_2_2 - 9.74627958755107e-06*G0_0_2_0_0 - 2.66246099579478e-05*G0_0_2_0_2 - 2.66246099579478e-05*G0_0_2_2_0 - 9.74627958755111e-06*G0_0_2_2_2 - 4.36071864642489e-07*G0_1_1_1_1 - 9.74627958755107e-06*G0_2_0_0_0 - 2.66246099579478e-05*G0_2_0_0_2 - 2.66246099579478e-05*G0_2_0_2_0 - 9.74627958755111e-06*G0_2_0_2_2 - 2.66246099579478e-05*G0_2_2_0_0 - 9.7462795875511e-06*G0_2_2_0_2 - 9.74627958755111e-06*G0_2_2_2_0 + 0.000207780168097663*G0_2_2_2_2;
    A[129] = -A[106] + 0.00155226901258673*G0_0_0_0_0 + 0.000258412956825698*G0_0_0_0_1 + 0.000128325525150943*G0_0_0_0_2 + 0.000258412956825698*G0_0_0_1_0 + 5.88741064931639e-05*G0_0_0_1_1 + 2.32571661143128e-05*G0_0_0_1_2 + 0.000128325525150943*G0_0_0_2_0 + 2.32571661143128e-05*G0_0_0_2_1 - 5.28865608230782e-06*G0_0_0_2_2 + 0.000258412956825698*G0_0_1_0_0 + 5.88741064931639e-05*G0_0_1_0_1 + 2.32571661143128e-05*G0_0_1_0_2 + 5.88741064931639e-05*G0_0_1_1_0 + 1.5669222018431e-05*G0_0_1_1_1 + 2.32571661143128e-05*G0_0_1_2_0 + 0.000128325525150943*G0_0_2_0_0 + 2.32571661143128e-05*G0_0_2_0_1 - 5.28865608230782e-06*G0_0_2_0_2 + 2.32571661143128e-05*G0_0_2_1_0 - 5.28865608230782e-06*G0_0_2_2_0 + 6.54254622508694e-06*G0_0_2_2_2 + 0.000258412956825698*G0_1_0_0_0 + 5.88741064931639e-05*G0_1_0_0_1 + 2.32571661143128e-05*G0_1_0_0_2 + 5.88741064931639e-05*G0_1_0_1_0 + 1.5669222018431e-05*G0_1_0_1_1 + 2.32571661143128e-05*G0_1_0_2_0 + 5.88741064931639e-05*G0_1_1_0_0 + 1.5669222018431e-05*G0_1_1_0_1 + 1.5669222018431e-05*G0_1_1_1_0 + 4.4899251248466e-05*G0_1_1_1_1 + 2.32571661143128e-05*G0_1_2_0_0 + 3.55200355200414e-05*G0_1_2_2_2 + 0.000128325525150943*G0_2_0_0_0 + 2.32571661143128e-05*G0_2_0_0_1 - 5.28865608230781e-06*G0_2_0_0_2 + 2.32571661143128e-05*G0_2_0_1_0 - 5.28865608230782e-06*G0_2_0_2_0 + 6.54254622508694e-06*G0_2_0_2_2 + 2.32571661143128e-05*G0_2_1_0_0 + 3.55200355200414e-05*G0_2_1_2_2 - 5.28865608230781e-06*G0_2_2_0_0 + 6.54254622508695e-06*G0_2_2_0_2 + 3.55200355200414e-05*G0_2_2_1_2 + 6.54254622508694e-06*G0_2_2_2_0 + 3.55200355200414e-05*G0_2_2_2_1 + 0.000263023278896338*G0_2_2_2_2;
    A[149] = -A[129] + 9.20889809778857e-05*G0_0_0_0_0 - 6.57778435556324e-05*G0_0_0_0_1 - 1.31555687111266e-05*G0_0_0_0_2 - 6.57778435556324e-05*G0_0_0_1_0 - 1.69143026285911e-05*G0_0_0_1_1 - 6.76572105143647e-06*G0_0_0_1_2 - 1.31555687111266e-05*G0_0_0_2_0 - 6.76572105143647e-06*G0_0_0_2_1 - 6.38984765968997e-06*G0_0_0_2_2 - 6.57778435556323e-05*G0_0_1_0_0 - 1.69143026285911e-05*G0_0_1_0_1 - 6.76572105143647e-06*G0_0_1_0_2 - 1.69143026285911e-05*G0_0_1_1_0 + 4.88635409270421e-06*G0_0_1_1_1 - 6.76572105143647e-06*G0_0_1_2_0 + 2.49955805511403e-05*G0_0_1_2_2 - 1.31555687111266e-05*G0_0_2_0_0 - 6.76572105143646e-06*G0_0_2_0_1 - 6.38984765968997e-06*G0_0_2_0_2 - 6.76572105143647e-06*G0_0_2_1_0 + 2.49955805511403e-05*G0_0_2_1_2 - 6.38984765968996e-06*G0_0_2_2_0 + 2.49955805511403e-05*G0_0_2_2_1 + 5.90121225041959e-05*G0_0_2_2_2 - 6.57778435556324e-05*G0_1_0_0_0 - 1.69143026285911e-05*G0_1_0_0_1 - 6.76572105143646e-06*G0_1_0_0_2 - 1.69143026285911e-05*G0_1_0_1_0 + 4.88635409270422e-06*G0_1_0_1_1 - 6.76572105143646e-06*G0_1_0_2_0 + 2.49955805511403e-05*G0_1_0_2_2 - 1.69143026285911e-05*G0_1_1_0_0 + 4.88635409270422e-06*G0_1_1_0_1 + 4.88635409270422e-06*G0_1_1_1_0 - 9.20889809778852e-05*G0_1_1_1_1 + 6.08914894629283e-05*G0_1_1_1_2 + 6.08914894629283e-05*G0_1_1_2_1 + 9.94185121169415e-05*G0_1_1_2_2 - 6.76572105143647e-06*G0_1_2_0_0 + 2.49955805511403e-05*G0_1_2_0_2 + 6.08914894629283e-05*G0_1_2_1_1 + 9.94185121169415e-05*G0_1_2_1_2 + 2.49955805511403e-05*G0_1_2_2_0 + 9.94185121169415e-05*G0_1_2_2_1 + 0.000178163987687827*G0_1_2_2_2 - 1.31555687111266e-05*G0_2_0_0_0 - 6.76572105143646e-06*G0_2_0_0_1 - 6.38984765968997e-06*G0_2_0_0_2 - 6.76572105143647e-06*G0_2_0_1_0 + 2.49955805511403e-05*G0_2_0_1_2 - 6.38984765968997e-06*G0_2_0_2_0 + 2.49955805511403e-05*G0_2_0_2_1 + 5.90121225041959e-05*G0_2_0_2_2 - 6.76572105143647e-06*G0_2_1_0_0 + 2.49955805511403e-05*G0_2_1_0_2 + 6.08914894629283e-05*G0_2_1_1_1 + 9.94185121169415e-05*G0_2_1_1_2 + 2.49955805511403e-05*G0_2_1_2_0 + 9.94185121169415e-05*G0_2_1_2_1 + 0.000178163987687827*G0_2_1_2_2 - 6.38984765968997e-06*G0_2_2_0_0 + 2.49955805511403e-05*G0_2_2_0_1 + 5.90121225041959e-05*G0_2_2_0_2 + 2.49955805511403e-05*G0_2_2_1_0 + 9.94185121169415e-05*G0_2_2_1_1 + 0.000178163987687827*G0_2_2_1_2 + 5.90121225041959e-05*G0_2_2_2_0 + 0.000178163987687827*G0_2_2_2_1 + 0.000494273510146608*G0_2_2_2_2;
    A[126] = A[129] + 9.20889809778874e-05*G0_0_0_0_0 - 0.000105244549689012*G0_0_0_0_1 + 2.6311137422253e-05*G0_0_0_0_2 - 0.000105244549689012*G0_0_0_1_0 - 3.27009850819429e-05*G0_0_0_1_1 - 4.13460730921117e-06*G0_0_0_1_2 + 2.6311137422253e-05*G0_0_0_2_0 - 4.13460730921116e-06*G0_0_0_2_1 + 4.13460730921113e-06*G0_0_0_2_2 - 0.000105244549689012*G0_0_1_0_0 - 3.27009850819429e-05*G0_0_1_0_1 - 4.13460730921116e-06*G0_0_1_0_2 - 3.27009850819429e-05*G0_0_1_1_0 - 9.2088980977885e-06*G0_0_1_1_1 - 4.13460730921117e-06*G0_0_1_2_0 + 1.48469989739856e-05*G0_0_1_2_2 + 2.6311137422253e-05*G0_0_2_0_0 - 4.13460730921116e-06*G0_0_2_0_1 + 4.13460730921112e-06*G0_0_2_0_2 - 4.13460730921117e-06*G0_0_2_1_0 + 1.48469989739856e-05*G0_0_2_1_2 + 4.13460730921113e-06*G0_0_2_2_0 + 1.48469989739856e-05*G0_0_2_2_1 + 0.000148094116348109*G0_0_2_2_2 - 0.000105244549689012*G0_1_0_0_0 - 3.27009850819429e-05*G0_1_0_0_1 - 4.13460730921116e-06*G0_1_0_0_2 - 3.27009850819429e-05*G0_1_0_1_0 - 9.2088980977885e-06*G0_1_0_1_1 - 4.13460730921116e-06*G0_1_0_2_0 + 1.48469989739856e-05*G0_1_0_2_2 - 3.27009850819429e-05*G0_1_1_0_0 - 9.2088980977885e-06*G0_1_1_0_1 - 9.2088980977885e-06*G0_1_1_1_0 - 2.74387575974923e-05*G0_1_1_1_1 + 2.01092264584362e-05*G0_1_1_2_2 - 4.13460730921116e-06*G0_1_2_0_0 + 1.48469989739856e-05*G0_1_2_0_2 + 2.01092264584362e-05*G0_1_2_1_2 + 1.48469989739856e-05*G0_1_2_2_0 + 2.01092264584362e-05*G0_1_2_2_1 + 0.000117648371616645*G0_1_2_2_2 + 2.6311137422253e-05*G0_2_0_0_0 - 4.13460730921116e-06*G0_2_0_0_1 + 4.13460730921113e-06*G0_2_0_0_2 - 4.13460730921117e-06*G0_2_0_1_0 + 1.48469989739856e-05*G0_2_0_1_2 + 4.13460730921113e-06*G0_2_0_2_0 + 1.48469989739856e-05*G0_2_0_2_1 + 0.000148094116348109*G0_2_0_2_2 - 4.13460730921117e-06*G0_2_1_0_0 + 1.48469989739856e-05*G0_2_1_0_2 + 2.01092264584362e-05*G0_2_1_1_2 + 1.48469989739856e-05*G0_2_1_2_0 + 2.01092264584362e-05*G0_2_1_2_1 + 0.000117648371616645*G0_2_1_2_2 + 4.13460730921112e-06*G0_2_2_0_0 + 1.48469989739856e-05*G0_2_2_0_1 + 0.000148094116348109*G0_2_2_0_2 + 1.48469989739856e-05*G0_2_2_1_0 + 2.01092264584362e-05*G0_2_2_1_1 + 0.000117648371616645*G0_2_2_1_2 + 0.000148094116348109*G0_2_2_2_0 + 0.000117648371616645*G0_2_2_2_1 + 0.00138133471466828*G0_2_2_2_2;
    A[101] = A[129] - 0.000105244549689011*G0_0_0_0_1 + 0.000105244549689012*G0_0_0_0_2 - 0.000105244549689011*G0_0_0_1_0 - 3.68355923911541e-05*G0_0_0_1_1 + 0.000105244549689012*G0_0_0_2_0 + 3.68355923911541e-05*G0_0_0_2_2 - 0.000105244549689011*G0_0_1_0_0 - 3.68355923911541e-05*G0_0_1_0_1 - 3.68355923911541e-05*G0_0_1_1_0 + 6.76572105143627e-06*G0_0_1_1_1 + 0.000105244549689012*G0_0_2_0_0 + 3.68355923911541e-05*G0_0_2_0_2 + 3.68355923911541e-05*G0_0_2_2_0 - 6.76572105143647e-06*G0_0_2_2_2 - 0.000105244549689011*G0_1_0_0_0 - 3.68355923911541e-05*G0_1_0_0_1 - 3.68355923911541e-05*G0_1_0_1_0 + 6.76572105143627e-06*G0_1_0_1_1 - 3.68355923911541e-05*G0_1_1_0_0 + 6.76572105143627e-06*G0_1_1_0_1 + 6.76572105143627e-06*G0_1_1_1_0 + 0.00011276201752394*G0_1_1_1_1 + 2.25524035047882e-05*G0_1_1_1_2 + 2.25524035047882e-05*G0_1_1_2_1 + 2.25524035047882e-05*G0_1_2_1_1 - 2.25524035047882e-05*G0_1_2_2_2 + 0.000105244549689012*G0_2_0_0_0 + 3.68355923911541e-05*G0_2_0_0_2 + 3.68355923911541e-05*G0_2_0_2_0 - 6.76572105143647e-06*G0_2_0_2_2 + 2.25524035047882e-05*G0_2_1_1_1 - 2.25524035047882e-05*G0_2_1_2_2 + 3.68355923911541e-05*G0_2_2_0_0 - 6.76572105143647e-06*G0_2_2_0_2 - 2.25524035047882e-05*G0_2_2_1_2 - 6.76572105143647e-06*G0_2_2_2_0 - 2.25524035047882e-05*G0_2_2_2_1 - 0.000112762017523941*G0_2_2_2_2;
    A[103] = -A[101] + 9.20889809778861e-05*G0_0_0_0_0 - 1.31555687111266e-05*G0_0_0_0_1 - 6.57778435556321e-05*G0_0_0_0_2 - 1.31555687111266e-05*G0_0_0_1_0 - 6.38984765969013e-06*G0_0_0_1_1 - 6.76572105143647e-06*G0_0_0_1_2 - 6.57778435556321e-05*G0_0_0_2_0 - 6.76572105143647e-06*G0_0_0_2_1 - 1.69143026285911e-05*G0_0_0_2_2 - 1.31555687111266e-05*G0_0_1_0_0 - 6.38984765969013e-06*G0_0_1_0_1 - 6.76572105143647e-06*G0_0_1_0_2 - 6.38984765969013e-06*G0_0_1_1_0 + 5.90121225041954e-05*G0_0_1_1_1 + 2.49955805511402e-05*G0_0_1_1_2 - 6.76572105143647e-06*G0_0_1_2_0 + 2.49955805511402e-05*G0_0_1_2_1 - 6.57778435556321e-05*G0_0_2_0_0 - 6.76572105143647e-06*G0_0_2_0_1 - 1.69143026285911e-05*G0_0_2_0_2 - 6.76572105143647e-06*G0_0_2_1_0 + 2.49955805511402e-05*G0_0_2_1_1 - 1.69143026285911e-05*G0_0_2_2_0 + 4.88635409270415e-06*G0_0_2_2_2 - 1.31555687111266e-05*G0_1_0_0_0 - 6.38984765969013e-06*G0_1_0_0_1 - 6.76572105143647e-06*G0_1_0_0_2 - 6.38984765969014e-06*G0_1_0_1_0 + 5.90121225041954e-05*G0_1_0_1_1 + 2.49955805511402e-05*G0_1_0_1_2 - 6.76572105143647e-06*G0_1_0_2_0 + 2.49955805511402e-05*G0_1_0_2_1 - 6.38984765969013e-06*G0_1_1_0_0 + 5.90121225041954e-05*G0_1_1_0_1 + 2.49955805511402e-05*G0_1_1_0_2 + 5.90121225041954e-05*G0_1_1_1_0 + 0.000494273510146607*G0_1_1_1_1 + 0.000178163987687827*G0_1_1_1_2 + 2.49955805511402e-05*G0_1_1_2_0 + 0.000178163987687827*G0_1_1_2_1 + 9.94185121169415e-05*G0_1_1_2_2 - 6.76572105143647e-06*G0_1_2_0_0 + 2.49955805511402e-05*G0_1_2_0_1 + 2.49955805511402e-05*G0_1_2_1_0 + 0.000178163987687827*G0_1_2_1_1 + 9.94185121169415e-05*G0_1_2_1_2 + 9.94185121169415e-05*G0_1_2_2_1 + 6.08914894629284e-05*G0_1_2_2_2 - 6.57778435556321e-05*G0_2_0_0_0 - 6.76572105143648e-06*G0_2_0_0_1 - 1.69143026285911e-05*G0_2_0_0_2 - 6.76572105143647e-06*G0_2_0_1_0 + 2.49955805511402e-05*G0_2_0_1_1 - 1.69143026285911e-05*G0_2_0_2_0 + 4.88635409270416e-06*G0_2_0_2_2 - 6.76572105143647e-06*G0_2_1_0_0 + 2.49955805511402e-05*G0_2_1_0_1 + 2.49955805511402e-05*G0_2_1_1_0 + 0.000178163987687827*G0_2_1_1_1 + 9.94185121169415e-05*G0_2_1_1_2 + 9.94185121169415e-05*G0_2_1_2_1 + 6.08914894629284e-05*G0_2_1_2_2 - 1.69143026285911e-05*G0_2_2_0_0 + 4.88635409270416e-06*G0_2_2_0_2 + 9.94185121169415e-05*G0_2_2_1_1 + 6.08914894629284e-05*G0_2_2_1_2 + 4.88635409270417e-06*G0_2_2_2_0 + 6.08914894629284e-05*G0_2_2_2_1 - 9.20889809778846e-05*G0_2_2_2_2;
    A[104] = A[103] + 0.000473600473600552*G0_0_0_0_0 + 0.000157866824533517*G0_0_0_0_2 - 4.51048070095755e-06*G0_0_0_1_1 + 4.51048070095764e-06*G0_0_0_1_2 + 0.000157866824533517*G0_0_0_2_0 + 4.51048070095765e-06*G0_0_0_2_1 + 2.70628842057458e-05*G0_0_0_2_2 - 4.51048070095755e-06*G0_0_1_0_1 + 4.51048070095765e-06*G0_0_1_0_2 - 4.51048070095755e-06*G0_0_1_1_0 - 2.70628842057456e-05*G0_0_1_1_1 + 4.51048070095765e-06*G0_0_1_2_0 + 2.70628842057459e-05*G0_0_1_2_2 + 0.000157866824533517*G0_0_2_0_0 + 4.51048070095765e-06*G0_0_2_0_1 + 2.70628842057458e-05*G0_0_2_0_2 + 4.51048070095765e-06*G0_0_2_1_0 + 2.70628842057459e-05*G0_0_2_1_2 + 2.70628842057458e-05*G0_0_2_2_0 + 2.70628842057459e-05*G0_0_2_2_1 + 0.000135314421028729*G0_0_2_2_2 - 4.51048070095755e-06*G0_1_0_0_1 + 4.51048070095765e-06*G0_1_0_0_2 - 4.51048070095755e-06*G0_1_0_1_0 - 2.70628842057456e-05*G0_1_0_1_1 + 4.51048070095765e-06*G0_1_0_2_0 + 2.70628842057459e-05*G0_1_0_2_2 - 4.51048070095755e-06*G0_1_1_0_0 - 2.70628842057456e-05*G0_1_1_0_1 - 2.70628842057456e-05*G0_1_1_1_0 - 0.000293181245562246*G0_1_1_1_1 - 5.86362491124494e-05*G0_1_1_1_2 - 5.86362491124494e-05*G0_1_1_2_1 + 5.86362491124494e-05*G0_1_1_2_2 + 4.51048070095764e-06*G0_1_2_0_0 + 2.70628842057459e-05*G0_1_2_0_2 - 5.86362491124494e-05*G0_1_2_1_1 + 5.86362491124494e-05*G0_1_2_1_2 + 2.70628842057459e-05*G0_1_2_2_0 + 5.86362491124494e-05*G0_1_2_2_1 + 0.000293181245562247*G0_1_2_2_2 + 0.000157866824533517*G0_2_0_0_0 + 4.51048070095765e-06*G0_2_0_0_1 + 2.70628842057458e-05*G0_2_0_0_2 + 4.51048070095765e-06*G0_2_0_1_0 + 2.70628842057459e-05*G0_2_0_1_2 + 2.70628842057458e-05*G0_2_0_2_0 + 2.70628842057459e-05*G0_2_0_2_1 + 0.000135314421028729*G0_2_0_2_2 + 4.51048070095765e-06*G0_2_1_0_0 + 2.70628842057459e-05*G0_2_1_0_2 - 5.86362491124494e-05*G0_2_1_1_1 + 5.86362491124494e-05*G0_2_1_1_2 + 2.70628842057459e-05*G0_2_1_2_0 + 5.86362491124494e-05*G0_2_1_2_1 + 0.000293181245562247*G0_2_1_2_2 + 2.70628842057458e-05*G0_2_2_0_0 + 2.70628842057459e-05*G0_2_2_0_1 + 0.000135314421028729*G0_2_2_0_2 + 2.70628842057459e-05*G0_2_2_1_0 + 5.86362491124494e-05*G0_2_2_1_1 + 0.000293181245562247*G0_2_2_1_2 + 0.000135314421028729*G0_2_2_2_0 + 0.000293181245562247*G0_2_2_2_1 + 0.00146590622781123*G0_2_2_2_2;
    A[174] = A[170] + 0.00149409673219222*G0_0_0_0_0 + 0.000154859837399546*G0_0_0_0_1 + 0.000140200775121434*G0_0_0_0_2 + 0.000154859837399546*G0_0_0_1_0 - 3.27009850819429e-05*G0_0_0_1_1 + 1.5974619149225e-05*G0_0_0_1_2 + 0.000140200775121434*G0_0_0_2_0 + 1.5974619149225e-05*G0_0_0_2_1 + 2.01092264584362e-05*G0_0_0_2_2 + 0.000154859837399546*G0_0_1_0_0 - 3.27009850819429e-05*G0_0_1_0_1 + 1.5974619149225e-05*G0_0_1_0_2 - 3.27009850819429e-05*G0_0_1_1_0 - 7.89334122667585e-05*G0_0_1_1_1 - 4.13460730921114e-06*G0_0_1_1_2 + 1.5974619149225e-05*G0_0_1_2_0 - 4.13460730921114e-06*G0_0_1_2_1 + 0.000140200775121434*G0_0_2_0_0 + 1.5974619149225e-05*G0_0_2_0_1 + 2.01092264584362e-05*G0_0_2_0_2 + 1.5974619149225e-05*G0_0_2_1_0 - 4.13460730921114e-06*G0_0_2_1_1 + 2.01092264584362e-05*G0_0_2_2_0 - 2.01092264584362e-05*G0_0_2_2_2 + 0.000154859837399546*G0_1_0_0_0 - 3.27009850819429e-05*G0_1_0_0_1 + 1.5974619149225e-05*G0_1_0_0_2 - 3.27009850819429e-05*G0_1_0_1_0 - 7.89334122667586e-05*G0_1_0_1_1 - 4.13460730921114e-06*G0_1_0_1_2 + 1.5974619149225e-05*G0_1_0_2_0 - 4.13460730921115e-06*G0_1_0_2_1 - 3.27009850819429e-05*G0_1_1_0_0 - 7.89334122667585e-05*G0_1_1_0_1 - 4.13460730921115e-06*G0_1_1_0_2 - 7.89334122667585e-05*G0_1_1_1_0 + 9.2088980977888e-05*G0_1_1_1_1 - 4.13460730921115e-06*G0_1_1_2_0 + 4.1346073092112e-06*G0_1_1_2_2 + 1.5974619149225e-05*G0_1_2_0_0 - 4.13460730921114e-06*G0_1_2_0_1 - 4.13460730921114e-06*G0_1_2_1_0 + 4.1346073092112e-06*G0_1_2_1_2 + 4.1346073092112e-06*G0_1_2_2_1 - 1.59746191492251e-05*G0_1_2_2_2 + 0.000140200775121434*G0_2_0_0_0 + 1.5974619149225e-05*G0_2_0_0_1 + 2.01092264584362e-05*G0_2_0_0_2 + 1.5974619149225e-05*G0_2_0_1_0 - 4.13460730921115e-06*G0_2_0_1_1 + 2.01092264584362e-05*G0_2_0_2_0 - 2.01092264584362e-05*G0_2_0_2_2 + 1.5974619149225e-05*G0_2_1_0_0 - 4.13460730921114e-06*G0_2_1_0_1 - 4.13460730921115e-06*G0_2_1_1_0 + 4.1346073092112e-06*G0_2_1_1_2 + 4.1346073092112e-06*G0_2_1_2_1 - 1.59746191492251e-05*G0_2_1_2_2 + 2.01092264584362e-05*G0_2_2_0_0 - 2.01092264584362e-05*G0_2_2_0_2 + 4.1346073092112e-06*G0_2_2_1_1 - 1.59746191492251e-05*G0_2_2_1_2 - 2.01092264584362e-05*G0_2_2_2_0 - 1.59746191492251e-05*G0_2_2_2_1 - 0.000140200775121434*G0_2_2_2_2;
    A[216] = A[104];
    A[201] = A[103];
    A[5] = A[31] + 2.23615302980389e-06*G0_0_0_0_0 - 2.79482422339612e-05*G0_0_2_2_2 + 2.09887114649055e-05*G0_1_1_1_1 - 1.2209278082296e-05*G0_1_1_2_2 - 1.2209278082296e-05*G0_1_2_1_2 - 1.2209278082296e-05*G0_1_2_2_1 - 4.9741557678074e-05*G0_1_2_2_2 - 2.79482422339612e-05*G0_2_0_2_2 - 1.2209278082296e-05*G0_2_1_1_2 - 1.2209278082296e-05*G0_2_1_2_1 - 4.9741557678074e-05*G0_2_1_2_2 - 2.79482422339612e-05*G0_2_2_0_2 - 1.2209278082296e-05*G0_2_2_1_1 - 4.9741557678074e-05*G0_2_2_1_2 - 2.79482422339612e-05*G0_2_2_2_0 - 4.9741557678074e-05*G0_2_2_2_1 - 0.000217221050554421*G0_2_2_2_2;
    A[7] = -A[5] - 0.00105491216602346*G0_0_0_0_0 - 3.70411481522654e-05*G0_0_0_0_1 - 8.04956360512052e-05*G0_0_0_0_2 - 3.70411481522654e-05*G0_0_0_1_0 - 8.04956360512052e-05*G0_0_0_2_0 - 3.70411481522654e-05*G0_0_1_0_0 - 8.04956360512052e-05*G0_0_2_0_0 + 1.04187405774725e-05*G0_0_2_2_2 - 3.70411481522654e-05*G0_1_0_0_0 - 6.81975285150006e-05*G0_1_1_1_1 - 1.18635039269983e-06*G0_1_1_2_2 - 1.18635039269983e-06*G0_1_2_1_2 - 1.18635039269983e-06*G0_1_2_2_1 - 1.86762091524028e-05*G0_1_2_2_2 - 8.04956360512052e-05*G0_2_0_0_0 + 1.04187405774725e-05*G0_2_0_2_2 - 1.18635039269983e-06*G0_2_1_1_2 - 1.18635039269983e-06*G0_2_1_2_1 - 1.86762091524028e-05*G0_2_1_2_2 + 1.04187405774725e-05*G0_2_2_0_2 - 1.18635039269982e-06*G0_2_2_1_1 - 1.86762091524028e-05*G0_2_2_1_2 + 1.04187405774725e-05*G0_2_2_2_0 - 1.86762091524028e-05*G0_2_2_2_1 - 5.5793706587367e-05*G0_2_2_2_2;
    A[36] = A[7] + 0.000767956323512008*G0_0_0_0_0 + 5.60873576746676e-06*G0_0_0_0_1 + 4.54924264448151e-05*G0_0_0_0_2 + 5.60873576746676e-06*G0_0_0_1_0 + 4.54924264448151e-05*G0_0_0_2_0 + 5.60873576746677e-06*G0_0_1_0_0 + 4.54924264448151e-05*G0_0_2_0_0 - 5.015560571117e-06*G0_0_2_2_2 + 5.60873576746677e-06*G0_1_0_0_0 - 1.32730291460472e-05*G0_1_1_2_2 - 1.32730291460472e-05*G0_1_2_1_2 - 1.32730291460472e-05*G0_1_2_2_1 - 2.20825617651051e-05*G0_1_2_2_2 + 4.54924264448151e-05*G0_2_0_0_0 - 5.015560571117e-06*G0_2_0_2_2 - 1.32730291460472e-05*G0_2_1_1_2 - 1.32730291460472e-05*G0_2_1_2_1 - 2.20825617651051e-05*G0_2_1_2_2 - 5.015560571117e-06*G0_2_2_0_2 - 1.32730291460472e-05*G0_2_2_1_1 - 2.20825617651051e-05*G0_2_2_1_2 - 5.01556057111701e-06*G0_2_2_2_0 - 2.20825617651051e-05*G0_2_2_2_1 + 0.000222704984609783*G0_2_2_2_2;
    A[90] = A[5] + 0.00149891261002398*G0_0_0_0_0 + 4.91689380578351e-05*G0_0_0_0_1 + 9.73512084623362e-05*G0_0_0_0_2 + 4.91689380578351e-05*G0_0_0_1_0 + 9.73512084623362e-05*G0_0_0_2_0 + 4.91689380578351e-05*G0_0_1_0_0 + 9.73512084623362e-05*G0_0_2_0_0 + 6.10794261588014e-06*G0_0_2_2_2 + 4.91689380578351e-05*G0_1_0_0_0 + 4.31549637898918e-05*G0_1_1_1_1 - 3.92317852635378e-06*G0_1_1_1_2 - 3.92317852635378e-06*G0_1_1_2_1 + 1.13936621873149e-06*G0_1_1_2_2 - 3.92317852635378e-06*G0_1_2_1_1 + 1.13936621873149e-06*G0_1_2_1_2 + 1.13936621873149e-06*G0_1_2_2_1 + 3.10565389930522e-05*G0_1_2_2_2 + 9.73512084623361e-05*G0_2_0_0_0 + 6.10794261588014e-06*G0_2_0_2_2 - 3.92317852635378e-06*G0_2_1_1_1 + 1.13936621873149e-06*G0_2_1_1_2 + 1.13936621873149e-06*G0_2_1_2_1 + 3.10565389930522e-05*G0_2_1_2_2 + 6.10794261588013e-06*G0_2_2_0_2 + 1.13936621873149e-06*G0_2_2_1_1 + 3.10565389930522e-05*G0_2_2_1_2 + 6.10794261588014e-06*G0_2_2_2_0 + 3.10565389930522e-05*G0_2_2_2_1 + 0.000180066846733544*G0_2_2_2_2;
    A[14] = A[5] - 0.000109355664911238*G0_0_0_0_0 - 5.89651383302277e-06*G0_0_1_2_2 - 5.89651383302277e-06*G0_0_2_1_2 - 5.89651383302277e-06*G0_0_2_2_1 - 2.34920869841544e-06*G0_0_2_2_2 - 5.89651383302277e-06*G0_1_0_2_2 + 8.0460397920729e-05*G0_1_1_1_1 - 1.86057328914503e-05*G0_1_1_1_2 - 1.86057328914503e-05*G0_1_1_2_1 - 3.08098720797185e-05*G0_1_1_2_2 - 5.89651383302277e-06*G0_1_2_0_2 - 1.86057328914503e-05*G0_1_2_1_1 - 3.08098720797185e-05*G0_1_2_1_2 - 5.89651383302277e-06*G0_1_2_2_0 - 3.08098720797185e-05*G0_1_2_2_1 - 3.52381304762316e-05*G0_1_2_2_2 - 5.89651383302277e-06*G0_2_0_1_2 - 5.89651383302277e-06*G0_2_0_2_1 - 2.34920869841543e-06*G0_2_0_2_2 - 5.89651383302277e-06*G0_2_1_0_2 - 1.86057328914503e-05*G0_2_1_1_1 - 3.08098720797185e-05*G0_2_1_1_2 - 5.89651383302277e-06*G0_2_1_2_0 - 3.08098720797185e-05*G0_2_1_2_1 - 3.52381304762316e-05*G0_2_1_2_2 - 5.89651383302277e-06*G0_2_2_0_1 - 2.34920869841544e-06*G0_2_2_0_2 - 5.89651383302277e-06*G0_2_2_1_0 - 3.08098720797185e-05*G0_2_2_1_1 - 3.52381304762316e-05*G0_2_2_1_2 - 2.34920869841544e-06*G0_2_2_2_0 - 3.52381304762316e-05*G0_2_2_2_1 - 2.70159000317769e-06*G0_2_2_2_2;
    A[70] = A[14] - 6.69524479048434e-06*G0_0_0_0_0 - 7.11105473010354e-05*G0_0_0_0_1 - 7.11105473010354e-05*G0_0_0_1_0 - 5.10952891905359e-05*G0_0_0_1_1 - 1.22276312752524e-05*G0_0_0_1_2 - 1.22276312752524e-05*G0_0_0_2_1 - 7.11105473010354e-05*G0_0_1_0_0 - 5.10952891905359e-05*G0_0_1_0_1 - 1.22276312752524e-05*G0_0_1_0_2 - 5.10952891905359e-05*G0_0_1_1_0 + 8.57696095791477e-05*G0_0_1_1_1 - 1.22276312752524e-05*G0_0_1_2_0 + 1.51523961047796e-06*G0_0_1_2_2 - 1.22276312752524e-05*G0_0_2_0_1 - 1.22276312752524e-05*G0_0_2_1_0 + 1.51523961047797e-06*G0_0_2_1_2 + 1.51523961047797e-06*G0_0_2_2_1 + 2.50895488990769e-05*G0_0_2_2_2 - 7.11105473010354e-05*G0_1_0_0_0 - 5.10952891905359e-05*G0_1_0_0_1 - 1.22276312752524e-05*G0_1_0_0_2 - 5.10952891905359e-05*G0_1_0_1_0 + 8.57696095791477e-05*G0_1_0_1_1 - 1.22276312752524e-05*G0_1_0_2_0 + 1.51523961047796e-06*G0_1_0_2_2 - 5.10952891905359e-05*G0_1_1_0_0 + 8.57696095791477e-05*G0_1_1_0_1 + 8.57696095791477e-05*G0_1_1_1_0 + 0.00144582049343978*G0_1_1_1_1 + 0.000108744870649651*G0_1_1_1_2 + 0.000108744870649651*G0_1_1_2_1 - 5.49714835429225e-06*G0_1_1_2_2 - 1.22276312752524e-05*G0_1_2_0_0 + 1.51523961047796e-06*G0_1_2_0_2 + 0.000108744870649651*G0_1_2_1_1 - 5.49714835429225e-06*G0_1_2_1_2 + 1.51523961047796e-06*G0_1_2_2_0 - 5.49714835429225e-06*G0_1_2_2_1 + 2.54419302038391e-05*G0_1_2_2_2 - 1.22276312752524e-05*G0_2_0_0_1 - 1.22276312752524e-05*G0_2_0_1_0 + 1.51523961047796e-06*G0_2_0_1_2 + 1.51523961047796e-06*G0_2_0_2_1 + 2.50895488990769e-05*G0_2_0_2_2 - 1.22276312752524e-05*G0_2_1_0_0 + 1.51523961047796e-06*G0_2_1_0_2 + 0.000108744870649651*G0_2_1_1_1 - 5.49714835429225e-06*G0_2_1_1_2 + 1.51523961047796e-06*G0_2_1_2_0 - 5.49714835429224e-06*G0_2_1_2_1 + 2.54419302038391e-05*G0_2_1_2_2 + 1.51523961047796e-06*G0_2_2_0_1 + 2.50895488990769e-05*G0_2_2_0_2 + 1.51523961047796e-06*G0_2_2_1_0 - 5.49714835429225e-06*G0_2_2_1_1 + 2.54419302038391e-05*G0_2_2_1_2 + 2.50895488990769e-05*G0_2_2_2_0 + 2.54419302038391e-05*G0_2_2_2_1 + 0.000208962113724053*G0_2_2_2_2;
    A[139] = -A[14] - 2.46666913333612e-05*G0_0_0_0_0 + 1.98743055885948e-05*G0_0_0_0_1 + 1.56457299314468e-05*G0_0_0_0_2 + 1.98743055885948e-05*G0_0_0_1_0 + 1.56457299314468e-05*G0_0_0_2_0 + 1.98743055885948e-05*G0_0_1_0_0 - 5.65219612838755e-05*G0_0_1_1_1 + 1.9028590457165e-06*G0_0_1_2_2 + 1.56457299314468e-05*G0_0_2_0_0 + 1.90285904571649e-06*G0_0_2_1_2 + 1.90285904571649e-06*G0_0_2_2_1 - 2.46666913333621e-05*G0_0_2_2_2 + 1.98743055885948e-05*G0_1_0_0_0 - 5.65219612838755e-05*G0_1_0_1_1 + 1.9028590457165e-06*G0_1_0_2_2 - 5.65219612838755e-05*G0_1_1_0_1 - 5.65219612838755e-05*G0_1_1_1_0 - 0.000649086363372187*G0_1_1_1_1 - 1.46590622781123e-05*G0_1_1_1_2 - 1.46590622781123e-05*G0_1_1_2_1 + 3.29124138648004e-05*G0_1_1_2_2 + 1.9028590457165e-06*G0_1_2_0_2 - 1.46590622781123e-05*G0_1_2_1_1 + 3.29124138648005e-05*G0_1_2_1_2 + 1.9028590457165e-06*G0_1_2_2_0 + 3.29124138648004e-05*G0_1_2_2_1 - 1.40952521904926e-05*G0_1_2_2_2 + 1.56457299314468e-05*G0_2_0_0_0 + 1.90285904571649e-06*G0_2_0_1_2 + 1.90285904571649e-06*G0_2_0_2_1 - 2.46666913333621e-05*G0_2_0_2_2 + 1.9028590457165e-06*G0_2_1_0_2 - 1.46590622781123e-05*G0_2_1_1_1 + 3.29124138648005e-05*G0_2_1_1_2 + 1.9028590457165e-06*G0_2_1_2_0 + 3.29124138648004e-05*G0_2_1_2_1 - 1.40952521904926e-05*G0_2_1_2_2 + 1.90285904571649e-06*G0_2_2_0_1 - 2.46666913333621e-05*G0_2_2_0_2 + 1.9028590457165e-06*G0_2_2_1_0 + 3.29124138648004e-05*G0_2_2_1_1 - 1.40952521904926e-05*G0_2_2_1_2 - 2.46666913333621e-05*G0_2_2_2_0 - 1.40952521904925e-05*G0_2_2_2_1 - 0.00029670505860987*G0_2_2_2_2;
    A[107] = -A[36] - 5.16825913651401e-05*G0_0_0_0_0 + 6.93016566032551e-06*G0_0_0_0_1 + 6.5190541381028e-06*G0_0_0_0_2 + 6.93016566032551e-06*G0_0_0_1_0 + 6.7422289644523e-06*G0_0_0_1_1 + 6.5190541381028e-06*G0_0_0_2_0 + 6.93016566032551e-06*G0_0_1_0_0 + 6.7422289644523e-06*G0_0_1_0_1 + 6.7422289644523e-06*G0_0_1_1_0 + 6.5190541381028e-06*G0_0_2_0_0 - 4.39889328778291e-05*G0_0_2_2_2 + 6.93016566032551e-06*G0_1_0_0_0 + 6.7422289644523e-06*G0_1_0_0_1 + 6.7422289644523e-06*G0_1_0_1_0 + 6.7422289644523e-06*G0_1_1_0_0 - 2.07611318722464e-05*G0_1_2_2_2 + 6.5190541381028e-06*G0_2_0_0_0 - 4.39889328778291e-05*G0_2_0_2_2 - 2.07611318722464e-05*G0_2_1_2_2 - 4.39889328778291e-05*G0_2_2_0_2 - 2.07611318722465e-05*G0_2_2_1_2 - 4.39889328778291e-05*G0_2_2_2_0 - 2.07611318722465e-05*G0_2_2_2_1 - 0.000596933930267362*G0_2_2_2_2;
    A[154] = A[70];
    A[15] = A[1];
    A[8] = -A[36] + 0.000171022393244644*G0_0_0_0_0 - 1.51523961047797e-05*G0_0_0_0_1 + 1.50349356698585e-06*G0_0_0_0_2 - 1.51523961047797e-05*G0_0_0_1_0 + 1.50349356698585e-06*G0_0_0_2_0 - 1.51523961047797e-05*G0_0_1_0_0 + 1.50349356698585e-06*G0_0_2_0_0 + 1.50349356698585e-06*G0_0_2_2_2 - 1.51523961047797e-05*G0_1_0_0_0 - 1.51523961047796e-05*G0_1_2_2_2 + 1.50349356698584e-06*G0_2_0_0_0 + 1.50349356698585e-06*G0_2_0_2_2 - 1.51523961047796e-05*G0_2_1_2_2 + 1.50349356698586e-06*G0_2_2_0_2 - 1.51523961047796e-05*G0_2_2_1_2 + 1.50349356698585e-06*G0_2_2_2_0 - 1.51523961047796e-05*G0_2_2_2_1 + 0.000171022393244643*G0_2_2_2_2;
    A[50] = A[170] - 2.74387575974923e-05*G0_0_0_0_0 - 9.20889809778854e-06*G0_0_0_0_1 - 9.20889809778854e-06*G0_0_0_1_0 - 3.27009850819429e-05*G0_0_0_1_1 + 2.01092264584362e-05*G0_0_0_2_2 - 9.20889809778854e-06*G0_0_1_0_0 - 3.27009850819429e-05*G0_0_1_0_1 - 3.27009850819429e-05*G0_0_1_1_0 - 0.000105244549689012*G0_0_1_1_1 - 4.13460730921115e-06*G0_0_1_1_2 - 4.13460730921114e-06*G0_0_1_2_1 + 1.48469989739856e-05*G0_0_1_2_2 + 2.01092264584362e-05*G0_0_2_0_2 - 4.13460730921114e-06*G0_0_2_1_1 + 1.48469989739856e-05*G0_0_2_1_2 + 2.01092264584362e-05*G0_0_2_2_0 + 1.48469989739856e-05*G0_0_2_2_1 + 0.000117648371616645*G0_0_2_2_2 - 9.20889809778854e-06*G0_1_0_0_0 - 3.27009850819429e-05*G0_1_0_0_1 - 3.27009850819429e-05*G0_1_0_1_0 - 0.000105244549689012*G0_1_0_1_1 - 4.13460730921115e-06*G0_1_0_1_2 - 4.13460730921115e-06*G0_1_0_2_1 + 1.48469989739856e-05*G0_1_0_2_2 - 3.27009850819429e-05*G0_1_1_0_0 - 0.000105244549689012*G0_1_1_0_1 - 4.13460730921115e-06*G0_1_1_0_2 - 0.000105244549689012*G0_1_1_1_0 + 9.20889809778878e-05*G0_1_1_1_1 + 2.63111374222532e-05*G0_1_1_1_2 - 4.13460730921115e-06*G0_1_1_2_0 + 2.63111374222532e-05*G0_1_1_2_1 + 4.13460730921121e-06*G0_1_1_2_2 - 4.13460730921115e-06*G0_1_2_0_1 + 1.48469989739856e-05*G0_1_2_0_2 - 4.13460730921114e-06*G0_1_2_1_0 + 2.63111374222532e-05*G0_1_2_1_1 + 4.13460730921121e-06*G0_1_2_1_2 + 1.48469989739856e-05*G0_1_2_2_0 + 4.13460730921121e-06*G0_1_2_2_1 + 0.00014809411634811*G0_1_2_2_2 + 2.01092264584362e-05*G0_2_0_0_2 - 4.13460730921115e-06*G0_2_0_1_1 + 1.48469989739856e-05*G0_2_0_1_2 + 2.01092264584362e-05*G0_2_0_2_0 + 1.48469989739856e-05*G0_2_0_2_1 + 0.000117648371616645*G0_2_0_2_2 - 4.13460730921114e-06*G0_2_1_0_1 + 1.48469989739856e-05*G0_2_1_0_2 - 4.13460730921115e-06*G0_2_1_1_0 + 2.63111374222532e-05*G0_2_1_1_1 + 4.13460730921121e-06*G0_2_1_1_2 + 1.48469989739856e-05*G0_2_1_2_0 + 4.13460730921121e-06*G0_2_1_2_1 + 0.00014809411634811*G0_2_1_2_2 + 2.01092264584362e-05*G0_2_2_0_0 + 1.48469989739856e-05*G0_2_2_0_1 + 0.000117648371616645*G0_2_2_0_2 + 1.48469989739856e-05*G0_2_2_1_0 + 4.13460730921121e-06*G0_2_2_1_1 + 0.00014809411634811*G0_2_2_1_2 + 0.000117648371616645*G0_2_2_2_0 + 0.00014809411634811*G0_2_2_2_1 + 0.00138133471466828*G0_2_2_2_2;
    A[37] = A[107];
    A[148] = A[149] + 0.00047360047360055*G0_0_0_0_0 + 0.000157866824533517*G0_0_0_0_1 + 0.000157866824533517*G0_0_0_1_0 + 2.70628842057456e-05*G0_0_0_1_1 + 4.51048070095755e-06*G0_0_0_1_2 + 4.51048070095755e-06*G0_0_0_2_1 - 4.51048070095774e-06*G0_0_0_2_2 + 0.000157866824533517*G0_0_1_0_0 + 2.70628842057456e-05*G0_0_1_0_1 + 4.51048070095755e-06*G0_0_1_0_2 + 2.70628842057456e-05*G0_0_1_1_0 + 0.000135314421028729*G0_0_1_1_1 + 2.70628842057458e-05*G0_0_1_1_2 + 4.51048070095755e-06*G0_0_1_2_0 + 2.70628842057458e-05*G0_0_1_2_1 + 4.51048070095755e-06*G0_0_2_0_1 - 4.51048070095774e-06*G0_0_2_0_2 + 4.51048070095755e-06*G0_0_2_1_0 + 2.70628842057458e-05*G0_0_2_1_1 - 4.51048070095775e-06*G0_0_2_2_0 - 2.7062884205746e-05*G0_0_2_2_2 + 0.000157866824533517*G0_1_0_0_0 + 2.70628842057456e-05*G0_1_0_0_1 + 4.51048070095755e-06*G0_1_0_0_2 + 2.70628842057455e-05*G0_1_0_1_0 + 0.000135314421028729*G0_1_0_1_1 + 2.70628842057458e-05*G0_1_0_1_2 + 4.51048070095755e-06*G0_1_0_2_0 + 2.70628842057458e-05*G0_1_0_2_1 + 2.70628842057455e-05*G0_1_1_0_0 + 0.000135314421028729*G0_1_1_0_1 + 2.70628842057458e-05*G0_1_1_0_2 + 0.000135314421028729*G0_1_1_1_0 + 0.00146590622781124*G0_1_1_1_1 + 0.000293181245562247*G0_1_1_1_2 + 2.70628842057458e-05*G0_1_1_2_0 + 0.000293181245562247*G0_1_1_2_1 + 5.86362491124496e-05*G0_1_1_2_2 + 4.51048070095755e-06*G0_1_2_0_0 + 2.70628842057458e-05*G0_1_2_0_1 + 2.70628842057458e-05*G0_1_2_1_0 + 0.000293181245562247*G0_1_2_1_1 + 5.86362491124496e-05*G0_1_2_1_2 + 5.86362491124496e-05*G0_1_2_2_1 - 5.86362491124493e-05*G0_1_2_2_2 + 4.51048070095755e-06*G0_2_0_0_1 - 4.51048070095774e-06*G0_2_0_0_2 + 4.51048070095755e-06*G0_2_0_1_0 + 2.70628842057458e-05*G0_2_0_1_1 - 4.51048070095774e-06*G0_2_0_2_0 - 2.7062884205746e-05*G0_2_0_2_2 + 4.51048070095755e-06*G0_2_1_0_0 + 2.70628842057458e-05*G0_2_1_0_1 + 2.70628842057458e-05*G0_2_1_1_0 + 0.000293181245562247*G0_2_1_1_1 + 5.86362491124496e-05*G0_2_1_1_2 + 5.86362491124496e-05*G0_2_1_2_1 - 5.86362491124493e-05*G0_2_1_2_2 - 4.51048070095774e-06*G0_2_2_0_0 - 2.7062884205746e-05*G0_2_2_0_2 + 5.86362491124496e-05*G0_2_2_1_1 - 5.86362491124494e-05*G0_2_2_1_2 - 2.7062884205746e-05*G0_2_2_2_0 - 5.86362491124494e-05*G0_2_2_2_1 - 0.000293181245562247*G0_2_2_2_2;
    A[123] = -A[60] + 4.4899251248465e-05*G0_0_0_0_0 + 1.56692220184309e-05*G0_0_0_0_2 + 1.56692220184309e-05*G0_0_0_2_0 + 5.88741064931639e-05*G0_0_0_2_2 + 3.55200355200414e-05*G0_0_1_1_1 + 2.32571661143129e-05*G0_0_1_2_2 + 1.56692220184309e-05*G0_0_2_0_0 + 5.88741064931639e-05*G0_0_2_0_2 + 2.32571661143129e-05*G0_0_2_1_2 + 5.88741064931639e-05*G0_0_2_2_0 + 2.32571661143129e-05*G0_0_2_2_1 + 0.000258412956825698*G0_0_2_2_2 + 3.55200355200414e-05*G0_1_0_1_1 + 2.32571661143129e-05*G0_1_0_2_2 + 3.55200355200414e-05*G0_1_1_0_1 + 3.55200355200414e-05*G0_1_1_1_0 + 0.000263023278896339*G0_1_1_1_1 + 6.54254622508702e-06*G0_1_1_1_2 + 6.54254622508702e-06*G0_1_1_2_1 - 5.28865608230779e-06*G0_1_1_2_2 + 2.32571661143129e-05*G0_1_2_0_2 + 6.54254622508702e-06*G0_1_2_1_1 - 5.28865608230779e-06*G0_1_2_1_2 + 2.32571661143129e-05*G0_1_2_2_0 - 5.28865608230779e-06*G0_1_2_2_1 + 0.000128325525150943*G0_1_2_2_2 + 1.56692220184309e-05*G0_2_0_0_0 + 5.88741064931639e-05*G0_2_0_0_2 + 2.32571661143129e-05*G0_2_0_1_2 + 5.88741064931639e-05*G0_2_0_2_0 + 2.32571661143129e-05*G0_2_0_2_1 + 0.000258412956825698*G0_2_0_2_2 + 2.32571661143129e-05*G0_2_1_0_2 + 6.54254622508702e-06*G0_2_1_1_1 - 5.28865608230779e-06*G0_2_1_1_2 + 2.32571661143129e-05*G0_2_1_2_0 - 5.28865608230779e-06*G0_2_1_2_1 + 0.000128325525150943*G0_2_1_2_2 + 5.88741064931639e-05*G0_2_2_0_0 + 2.32571661143129e-05*G0_2_2_0_1 + 0.000258412956825698*G0_2_2_0_2 + 2.32571661143129e-05*G0_2_2_1_0 - 5.28865608230779e-06*G0_2_2_1_1 + 0.000128325525150943*G0_2_2_1_2 + 0.000258412956825698*G0_2_2_2_0 + 0.000128325525150944*G0_2_2_2_1 + 0.00155226901258673*G0_2_2_2_2;
    A[137] = A[1] - 0.00021722105055442*G0_0_0_0_0 - 4.97415576780739e-05*G0_0_0_0_1 - 2.79482422339612e-05*G0_0_0_0_2 - 4.97415576780739e-05*G0_0_0_1_0 - 1.2209278082296e-05*G0_0_0_1_1 - 2.79482422339612e-05*G0_0_0_2_0 - 4.97415576780739e-05*G0_0_1_0_0 - 1.2209278082296e-05*G0_0_1_0_1 - 1.2209278082296e-05*G0_0_1_1_0 - 2.79482422339612e-05*G0_0_2_0_0 - 4.97415576780739e-05*G0_1_0_0_0 - 1.2209278082296e-05*G0_1_0_0_1 - 1.2209278082296e-05*G0_1_0_1_0 - 1.2209278082296e-05*G0_1_1_0_0 + 2.09887114649056e-05*G0_1_1_1_1 - 2.79482422339612e-05*G0_2_0_0_0 + 2.23615302980407e-06*G0_2_2_2_2;
    A[122] = A[137] + 0.000180066846733543*G0_0_0_0_0 + 3.10565389930521e-05*G0_0_0_0_1 + 6.10794261588015e-06*G0_0_0_0_2 + 3.10565389930521e-05*G0_0_0_1_0 + 1.13936621873148e-06*G0_0_0_1_1 + 6.10794261588014e-06*G0_0_0_2_0 + 3.10565389930521e-05*G0_0_1_0_0 + 1.13936621873148e-06*G0_0_1_0_1 + 1.13936621873148e-06*G0_0_1_1_0 - 3.92317852635378e-06*G0_0_1_1_1 + 6.10794261588014e-06*G0_0_2_0_0 + 9.73512084623359e-05*G0_0_2_2_2 + 3.10565389930521e-05*G0_1_0_0_0 + 1.13936621873148e-06*G0_1_0_0_1 + 1.13936621873148e-06*G0_1_0_1_0 - 3.92317852635378e-06*G0_1_0_1_1 + 1.13936621873148e-06*G0_1_1_0_0 - 3.92317852635378e-06*G0_1_1_0_1 - 3.92317852635378e-06*G0_1_1_1_0 + 4.31549637898918e-05*G0_1_1_1_1 + 4.91689380578352e-05*G0_1_2_2_2 + 6.10794261588014e-06*G0_2_0_0_0 + 9.73512084623359e-05*G0_2_0_2_2 + 4.91689380578352e-05*G0_2_1_2_2 + 9.73512084623359e-05*G0_2_2_0_2 + 4.91689380578352e-05*G0_2_2_1_2 + 9.73512084623359e-05*G0_2_2_2_0 + 4.91689380578352e-05*G0_2_2_2_1 + 0.00149891261002397*G0_2_2_2_2;
    A[42] = A[137] - 2.7015900031778e-06*G0_0_0_0_0 - 3.52381304762316e-05*G0_0_0_0_1 - 2.34920869841544e-06*G0_0_0_0_2 - 3.52381304762316e-05*G0_0_0_1_0 - 3.08098720797185e-05*G0_0_0_1_1 - 5.89651383302275e-06*G0_0_0_1_2 - 2.34920869841544e-06*G0_0_0_2_0 - 5.89651383302275e-06*G0_0_0_2_1 - 3.52381304762317e-05*G0_0_1_0_0 - 3.08098720797185e-05*G0_0_1_0_1 - 5.89651383302275e-06*G0_0_1_0_2 - 3.08098720797185e-05*G0_0_1_1_0 - 1.86057328914503e-05*G0_0_1_1_1 - 5.89651383302275e-06*G0_0_1_2_0 - 2.34920869841545e-06*G0_0_2_0_0 - 5.89651383302276e-06*G0_0_2_0_1 - 5.89651383302276e-06*G0_0_2_1_0 - 3.52381304762317e-05*G0_1_0_0_0 - 3.08098720797185e-05*G0_1_0_0_1 - 5.89651383302276e-06*G0_1_0_0_2 - 3.08098720797185e-05*G0_1_0_1_0 - 1.86057328914503e-05*G0_1_0_1_1 - 5.89651383302276e-06*G0_1_0_2_0 - 3.08098720797185e-05*G0_1_1_0_0 - 1.86057328914503e-05*G0_1_1_0_1 - 1.86057328914503e-05*G0_1_1_1_0 + 8.04603979207291e-05*G0_1_1_1_1 - 5.89651383302275e-06*G0_1_2_0_0 - 2.34920869841545e-06*G0_2_0_0_0 - 5.89651383302276e-06*G0_2_0_0_1 - 5.89651383302275e-06*G0_2_0_1_0 - 5.89651383302275e-06*G0_2_1_0_0 - 0.000109355664911239*G0_2_2_2_2;
    A[212] = -A[42] - 0.000184647803695454*G0_0_0_0_0 - 4.17219464838582e-05*G0_0_0_0_1 - 1.04304866209645e-05*G0_0_0_0_2 - 4.17219464838582e-05*G0_0_0_1_0 - 7.18857861715123e-06*G0_0_0_1_1 - 4.22857565714769e-07*G0_0_0_1_2 - 1.04304866209645e-05*G0_0_0_2_0 - 4.22857565714772e-07*G0_0_0_2_1 - 4.17219464838583e-05*G0_0_1_0_0 - 7.18857861715123e-06*G0_0_1_0_1 - 4.22857565714769e-07*G0_0_1_0_2 - 7.18857861715123e-06*G0_0_1_1_0 + 2.25524035047883e-05*G0_0_1_1_1 + 4.36952817905273e-06*G0_0_1_1_2 - 4.2285756571477e-07*G0_0_1_2_0 + 4.36952817905273e-06*G0_0_1_2_1 - 1.04304866209646e-05*G0_0_2_0_0 - 4.22857565714775e-07*G0_0_2_0_1 - 4.22857565714775e-07*G0_0_2_1_0 + 4.36952817905273e-06*G0_0_2_1_1 - 9.86667653334483e-06*G0_0_2_2_2 - 4.17219464838583e-05*G0_1_0_0_0 - 7.18857861715124e-06*G0_1_0_0_1 - 4.22857565714772e-07*G0_1_0_0_2 - 7.18857861715123e-06*G0_1_0_1_0 + 2.25524035047883e-05*G0_1_0_1_1 + 4.36952817905273e-06*G0_1_0_1_2 - 4.22857565714774e-07*G0_1_0_2_0 + 4.36952817905273e-06*G0_1_0_2_1 - 7.18857861715123e-06*G0_1_1_0_0 + 2.25524035047883e-05*G0_1_1_0_1 + 4.36952817905273e-06*G0_1_1_0_2 + 2.25524035047883e-05*G0_1_1_1_0 + 0.000136723946247779*G0_1_1_1_1 + 1.83238278476405e-05*G0_1_1_1_2 + 4.36952817905273e-06*G0_1_1_2_0 + 1.83238278476405e-05*G0_1_1_2_1 - 4.2285756571477e-07*G0_1_2_0_0 + 4.36952817905273e-06*G0_1_2_0_1 + 4.36952817905273e-06*G0_1_2_1_0 + 1.83238278476405e-05*G0_1_2_1_1 - 9.86667653334485e-06*G0_1_2_2_2 - 1.04304866209646e-05*G0_2_0_0_0 - 4.22857565714772e-07*G0_2_0_0_1 - 4.22857565714769e-07*G0_2_0_1_0 + 4.36952817905273e-06*G0_2_0_1_1 - 9.86667653334485e-06*G0_2_0_2_2 - 4.22857565714769e-07*G0_2_1_0_0 + 4.36952817905273e-06*G0_2_1_0_1 + 4.36952817905273e-06*G0_2_1_1_0 + 1.83238278476405e-05*G0_2_1_1_1 - 9.86667653334485e-06*G0_2_1_2_2 - 9.86667653334484e-06*G0_2_2_0_2 - 9.86667653334485e-06*G0_2_2_1_2 - 9.86667653334485e-06*G0_2_2_2_0 - 9.86667653334485e-06*G0_2_2_2_1 + 0.000167733501066862*G0_2_2_2_2;
    A[182] = A[42];
    A[193] = -A[212] - 0.0012960584389158*G0_0_0_0_0 + 0.000151383008525891*G0_0_0_0_1 - 0.000552392933345407*G0_0_0_0_2 + 0.000151383008525891*G0_0_0_1_0 + 0.000335114620828963*G0_0_0_1_1 - 8.95048514096293e-06*G0_0_0_1_2 - 0.000552392933345407*G0_0_0_2_0 - 8.95048514096294e-06*G0_0_0_2_1 - 0.0003547774976347*G0_0_0_2_2 + 0.000151383008525891*G0_0_1_0_0 + 0.000335114620828963*G0_0_1_0_1 - 8.9504851409629e-06*G0_0_1_0_2 + 0.000335114620828963*G0_0_1_1_0 + 0.000151383008525891*G0_0_1_1_1 - 8.95048514096292e-06*G0_0_1_1_2 - 8.9504851409629e-06*G0_0_1_2_0 - 8.95048514096295e-06*G0_0_1_2_1 - 0.000103459151078216*G0_0_1_2_2 - 0.000552392933345407*G0_0_2_0_0 - 8.95048514096291e-06*G0_0_2_0_1 - 0.0003547774976347*G0_0_2_0_2 - 8.95048514096295e-06*G0_0_2_1_0 - 8.95048514096295e-06*G0_0_2_1_1 - 0.000103459151078216*G0_0_2_1_2 - 0.0003547774976347*G0_0_2_2_0 - 0.000103459151078216*G0_0_2_2_1 - 0.000319257462114659*G0_0_2_2_2 + 0.000151383008525891*G0_1_0_0_0 + 0.000335114620828963*G0_1_0_0_1 - 8.9504851409629e-06*G0_1_0_0_2 + 0.000335114620828963*G0_1_0_1_0 + 0.000151383008525891*G0_1_0_1_1 - 8.95048514096293e-06*G0_1_0_1_2 - 8.9504851409629e-06*G0_1_0_2_0 - 8.95048514096295e-06*G0_1_0_2_1 - 0.000103459151078216*G0_1_0_2_2 + 0.000335114620828963*G0_1_1_0_0 + 0.000151383008525891*G0_1_1_0_1 - 8.95048514096295e-06*G0_1_1_0_2 + 0.000151383008525891*G0_1_1_1_0 - 0.0012960584389158*G0_1_1_1_1 - 0.000552392933345408*G0_1_1_1_2 - 8.95048514096295e-06*G0_1_1_2_0 - 0.000552392933345408*G0_1_1_2_1 - 0.000354777497634701*G0_1_1_2_2 - 8.95048514096292e-06*G0_1_2_0_0 - 8.95048514096294e-06*G0_1_2_0_1 - 0.000103459151078216*G0_1_2_0_2 - 8.95048514096292e-06*G0_1_2_1_0 - 0.000552392933345408*G0_1_2_1_1 - 0.000354777497634701*G0_1_2_1_2 - 0.000103459151078216*G0_1_2_2_0 - 0.000354777497634701*G0_1_2_2_1 - 0.000319257462114659*G0_1_2_2_2 - 0.000552392933345407*G0_2_0_0_0 - 8.95048514096291e-06*G0_2_0_0_1 - 0.0003547774976347*G0_2_0_0_2 - 8.95048514096289e-06*G0_2_0_1_0 - 8.95048514096293e-06*G0_2_0_1_1 - 0.000103459151078216*G0_2_0_1_2 - 0.0003547774976347*G0_2_0_2_0 - 0.000103459151078216*G0_2_0_2_1 - 0.000319257462114659*G0_2_0_2_2 - 8.9504851409629e-06*G0_2_1_0_0 - 8.95048514096292e-06*G0_2_1_0_1 - 0.000103459151078216*G0_2_1_0_2 - 8.95048514096295e-06*G0_2_1_1_0 - 0.000552392933345408*G0_2_1_1_1 - 0.000354777497634701*G0_2_1_1_2 - 0.000103459151078216*G0_2_1_2_0 - 0.000354777497634701*G0_2_1_2_1 - 0.000319257462114659*G0_2_1_2_2 - 0.0003547774976347*G0_2_2_0_0 - 0.000103459151078216*G0_2_2_0_1 - 0.000319257462114659*G0_2_2_0_2 - 0.000103459151078216*G0_2_2_1_0 - 0.000354777497634701*G0_2_2_1_1 - 0.000319257462114659*G0_2_2_1_2 - 0.000319257462114659*G0_2_2_2_0 - 0.000319257462114659*G0_2_2_2_1 - 7.68191244381863e-05*G0_2_2_2_2;
    A[213] = A[57] - 0.000293181245562246*G0_0_0_0_0 - 2.70628842057456e-05*G0_0_0_0_1 - 5.86362491124493e-05*G0_0_0_0_2 - 2.70628842057456e-05*G0_0_0_1_0 - 4.51048070095745e-06*G0_0_0_1_1 - 5.86362491124493e-05*G0_0_0_2_0 + 5.86362491124493e-05*G0_0_0_2_2 - 2.70628842057456e-05*G0_0_1_0_0 - 4.51048070095745e-06*G0_0_1_0_1 - 4.51048070095745e-06*G0_0_1_1_0 + 4.51048070095769e-06*G0_0_1_1_2 + 4.51048070095769e-06*G0_0_1_2_1 + 2.70628842057459e-05*G0_0_1_2_2 - 5.86362491124493e-05*G0_0_2_0_0 + 5.86362491124493e-05*G0_0_2_0_2 + 4.5104807009577e-06*G0_0_2_1_1 + 2.70628842057459e-05*G0_0_2_1_2 + 5.86362491124493e-05*G0_0_2_2_0 + 2.70628842057458e-05*G0_0_2_2_1 + 0.000293181245562247*G0_0_2_2_2 - 2.70628842057456e-05*G0_1_0_0_0 - 4.51048070095744e-06*G0_1_0_0_1 - 4.51048070095745e-06*G0_1_0_1_0 + 4.51048070095769e-06*G0_1_0_1_2 + 4.51048070095769e-06*G0_1_0_2_1 + 2.70628842057459e-05*G0_1_0_2_2 - 4.51048070095744e-06*G0_1_1_0_0 + 4.5104807009577e-06*G0_1_1_0_2 + 0.000473600473600555*G0_1_1_1_1 + 0.000157866824533518*G0_1_1_1_2 + 4.5104807009577e-06*G0_1_1_2_0 + 0.000157866824533518*G0_1_1_2_1 + 2.70628842057461e-05*G0_1_1_2_2 + 4.51048070095769e-06*G0_1_2_0_1 + 2.70628842057459e-05*G0_1_2_0_2 + 4.51048070095769e-06*G0_1_2_1_0 + 0.000157866824533518*G0_1_2_1_1 + 2.7062884205746e-05*G0_1_2_1_2 + 2.70628842057459e-05*G0_1_2_2_0 + 2.70628842057461e-05*G0_1_2_2_1 + 0.000135314421028729*G0_1_2_2_2 - 5.86362491124493e-05*G0_2_0_0_0 + 5.86362491124493e-05*G0_2_0_0_2 + 4.51048070095769e-06*G0_2_0_1_1 + 2.70628842057459e-05*G0_2_0_1_2 + 5.86362491124493e-05*G0_2_0_2_0 + 2.70628842057458e-05*G0_2_0_2_1 + 0.000293181245562247*G0_2_0_2_2 + 4.51048070095769e-06*G0_2_1_0_1 + 2.70628842057458e-05*G0_2_1_0_2 + 4.51048070095769e-06*G0_2_1_1_0 + 0.000157866824533518*G0_2_1_1_1 + 2.7062884205746e-05*G0_2_1_1_2 + 2.70628842057459e-05*G0_2_1_2_0 + 2.70628842057461e-05*G0_2_1_2_1 + 0.000135314421028729*G0_2_1_2_2 + 5.86362491124493e-05*G0_2_2_0_0 + 2.70628842057458e-05*G0_2_2_0_1 + 0.000293181245562247*G0_2_2_0_2 + 2.70628842057458e-05*G0_2_2_1_0 + 2.7062884205746e-05*G0_2_2_1_1 + 0.000135314421028729*G0_2_2_1_2 + 0.000293181245562247*G0_2_2_2_0 + 0.000135314421028729*G0_2_2_2_1 + 0.00146590622781123*G0_2_2_2_2;
    A[204] = A[148];
    A[133] = -A[123] - 9.2088980977885e-05*G0_0_0_0_0 + 6.08914894629282e-05*G0_0_0_0_1 + 4.88635409270424e-06*G0_0_0_0_2 + 6.08914894629282e-05*G0_0_0_1_0 + 9.94185121169415e-05*G0_0_0_1_1 + 4.88635409270423e-06*G0_0_0_2_0 - 1.69143026285911e-05*G0_0_0_2_2 + 6.08914894629282e-05*G0_0_1_0_0 + 9.94185121169415e-05*G0_0_1_0_1 + 9.94185121169415e-05*G0_0_1_1_0 + 0.000178163987687827*G0_0_1_1_1 + 2.49955805511403e-05*G0_0_1_1_2 + 2.49955805511403e-05*G0_0_1_2_1 - 6.76572105143644e-06*G0_0_1_2_2 + 4.88635409270422e-06*G0_0_2_0_0 - 1.69143026285911e-05*G0_0_2_0_2 + 2.49955805511403e-05*G0_0_2_1_1 - 6.76572105143643e-06*G0_0_2_1_2 - 1.69143026285911e-05*G0_0_2_2_0 - 6.76572105143644e-06*G0_0_2_2_1 - 6.5777843555632e-05*G0_0_2_2_2 + 6.08914894629282e-05*G0_1_0_0_0 + 9.94185121169415e-05*G0_1_0_0_1 + 9.94185121169415e-05*G0_1_0_1_0 + 0.000178163987687827*G0_1_0_1_1 + 2.49955805511403e-05*G0_1_0_1_2 + 2.49955805511403e-05*G0_1_0_2_1 - 6.76572105143643e-06*G0_1_0_2_2 + 9.94185121169415e-05*G0_1_1_0_0 + 0.000178163987687827*G0_1_1_0_1 + 2.49955805511403e-05*G0_1_1_0_2 + 0.000178163987687827*G0_1_1_1_0 + 0.000494273510146609*G0_1_1_1_1 + 5.9012122504196e-05*G0_1_1_1_2 + 2.49955805511403e-05*G0_1_1_2_0 + 5.9012122504196e-05*G0_1_1_2_1 - 6.38984765968995e-06*G0_1_1_2_2 + 2.49955805511403e-05*G0_1_2_0_1 - 6.76572105143644e-06*G0_1_2_0_2 + 2.49955805511403e-05*G0_1_2_1_0 + 5.9012122504196e-05*G0_1_2_1_1 - 6.38984765968995e-06*G0_1_2_1_2 - 6.76572105143644e-06*G0_1_2_2_0 - 6.38984765968995e-06*G0_1_2_2_1 - 1.31555687111262e-05*G0_1_2_2_2 + 4.88635409270422e-06*G0_2_0_0_0 - 1.69143026285911e-05*G0_2_0_0_2 + 2.49955805511403e-05*G0_2_0_1_1 - 6.76572105143643e-06*G0_2_0_1_2 - 1.69143026285911e-05*G0_2_0_2_0 - 6.76572105143644e-06*G0_2_0_2_1 - 6.5777843555632e-05*G0_2_0_2_2 + 2.49955805511403e-05*G0_2_1_0_1 - 6.76572105143644e-06*G0_2_1_0_2 + 2.49955805511403e-05*G0_2_1_1_0 + 5.9012122504196e-05*G0_2_1_1_1 - 6.38984765968995e-06*G0_2_1_1_2 - 6.76572105143643e-06*G0_2_1_2_0 - 6.38984765968995e-06*G0_2_1_2_1 - 1.31555687111262e-05*G0_2_1_2_2 - 1.69143026285911e-05*G0_2_2_0_0 - 6.76572105143643e-06*G0_2_2_0_1 - 6.5777843555632e-05*G0_2_2_0_2 - 6.76572105143643e-06*G0_2_2_1_0 - 6.38984765968995e-06*G0_2_2_1_1 - 1.31555687111262e-05*G0_2_2_1_2 - 6.5777843555632e-05*G0_2_2_2_0 - 1.31555687111262e-05*G0_2_2_2_1 + 9.20889809778865e-05*G0_2_2_2_2;
    A[132] = A[133] + 0.00146590622781123*G0_0_0_0_0 + 0.000293181245562247*G0_0_0_0_1 + 0.000135314421028729*G0_0_0_0_2 + 0.000293181245562247*G0_0_0_1_0 + 5.86362491124493e-05*G0_0_0_1_1 + 2.70628842057458e-05*G0_0_0_1_2 + 0.000135314421028729*G0_0_0_2_0 + 2.70628842057458e-05*G0_0_0_2_1 + 2.70628842057456e-05*G0_0_0_2_2 + 0.000293181245562247*G0_0_1_0_0 + 5.86362491124493e-05*G0_0_1_0_1 + 2.70628842057458e-05*G0_0_1_0_2 + 5.86362491124493e-05*G0_0_1_1_0 - 5.86362491124495e-05*G0_0_1_1_1 + 2.70628842057458e-05*G0_0_1_2_0 + 4.51048070095756e-06*G0_0_1_2_2 + 0.000135314421028729*G0_0_2_0_0 + 2.70628842057458e-05*G0_0_2_0_1 + 2.70628842057456e-05*G0_0_2_0_2 + 2.70628842057458e-05*G0_0_2_1_0 + 4.51048070095756e-06*G0_0_2_1_2 + 2.70628842057456e-05*G0_0_2_2_0 + 4.51048070095756e-06*G0_0_2_2_1 + 0.000157866824533517*G0_0_2_2_2 + 0.000293181245562247*G0_1_0_0_0 + 5.86362491124493e-05*G0_1_0_0_1 + 2.70628842057458e-05*G0_1_0_0_2 + 5.86362491124493e-05*G0_1_0_1_0 - 5.86362491124495e-05*G0_1_0_1_1 + 2.70628842057458e-05*G0_1_0_2_0 + 4.51048070095757e-06*G0_1_0_2_2 + 5.86362491124493e-05*G0_1_1_0_0 - 5.86362491124495e-05*G0_1_1_0_1 - 5.86362491124495e-05*G0_1_1_1_0 - 0.000293181245562247*G0_1_1_1_1 - 2.70628842057459e-05*G0_1_1_1_2 - 2.7062884205746e-05*G0_1_1_2_1 - 4.51048070095771e-06*G0_1_1_2_2 + 2.70628842057458e-05*G0_1_2_0_0 + 4.51048070095756e-06*G0_1_2_0_2 - 2.70628842057459e-05*G0_1_2_1_1 - 4.51048070095771e-06*G0_1_2_1_2 + 4.51048070095756e-06*G0_1_2_2_0 - 4.51048070095771e-06*G0_1_2_2_1 + 0.000135314421028729*G0_2_0_0_0 + 2.70628842057458e-05*G0_2_0_0_1 + 2.70628842057456e-05*G0_2_0_0_2 + 2.70628842057458e-05*G0_2_0_1_0 + 4.51048070095756e-06*G0_2_0_1_2 + 2.70628842057456e-05*G0_2_0_2_0 + 4.51048070095756e-06*G0_2_0_2_1 + 0.000157866824533517*G0_2_0_2_2 + 2.70628842057458e-05*G0_2_1_0_0 + 4.51048070095756e-06*G0_2_1_0_2 - 2.7062884205746e-05*G0_2_1_1_1 - 4.51048070095771e-06*G0_2_1_1_2 + 4.51048070095756e-06*G0_2_1_2_0 - 4.51048070095771e-06*G0_2_1_2_1 + 2.70628842057456e-05*G0_2_2_0_0 + 4.51048070095756e-06*G0_2_2_0_1 + 0.000157866824533517*G0_2_2_0_2 + 4.51048070095756e-06*G0_2_2_1_0 - 4.51048070095771e-06*G0_2_2_1_1 + 0.000157866824533517*G0_2_2_2_0 + 0.00047360047360055*G0_2_2_2_2;
    A[188] = A[132];
    A[160] = -A[133] + 0.00314676505152748*G0_0_0_0_0 + 0.00115898211136326*G0_0_0_0_1 + 0.000336524146048012*G0_0_0_0_2 + 0.00115898211136326*G0_0_0_1_0 + 0.00094071713119348*G0_0_0_1_1 + 0.000133129656939203*G0_0_0_1_2 + 0.000336524146048012*G0_0_0_2_0 + 0.000133129656939203*G0_0_0_2_1 + 4.9333382666726e-06*G0_0_0_2_2 + 0.00115898211136326*G0_0_1_0_0 + 0.00094071713119348*G0_0_1_0_1 + 0.000133129656939203*G0_0_1_0_2 + 0.00094071713119348*G0_0_1_1_0 + 0.00125370220608337*G0_0_1_1_1 + 0.000141022998165879*G0_0_1_1_2 + 0.000133129656939203*G0_0_1_2_0 + 0.000141022998165879*G0_0_1_2_1 + 2.85428856857483e-06*G0_0_1_2_2 + 0.000336524146048012*G0_0_2_0_0 + 0.000133129656939203*G0_0_2_0_1 + 4.9333382666726e-06*G0_0_2_0_2 + 0.000133129656939203*G0_0_2_1_0 + 0.000141022998165879*G0_0_2_1_1 + 2.85428856857484e-06*G0_0_2_1_2 + 4.93333826667261e-06*G0_0_2_2_0 + 2.85428856857484e-06*G0_0_2_2_1 - 0.000281587900635566*G0_0_2_2_2 + 0.00115898211136326*G0_1_0_0_0 + 0.00094071713119348*G0_1_0_0_1 + 0.000133129656939203*G0_1_0_0_2 + 0.00094071713119348*G0_1_0_1_0 + 0.00125370220608337*G0_1_0_1_1 + 0.000141022998165879*G0_1_0_1_2 + 0.000133129656939203*G0_1_0_2_0 + 0.000141022998165879*G0_1_0_2_1 + 2.85428856857483e-06*G0_1_0_2_2 + 0.00094071713119348*G0_1_1_0_0 + 0.00125370220608337*G0_1_1_0_1 + 0.000141022998165879*G0_1_1_0_2 + 0.00125370220608337*G0_1_1_1_0 + 0.00362036552512804*G0_1_1_1_1 + 0.000383884193408068*G0_1_1_1_2 + 0.000141022998165879*G0_1_1_2_0 + 0.000383884193408068*G0_1_1_2_1 + 5.22933856267278e-05*G0_1_1_2_2 + 0.000133129656939203*G0_1_2_0_0 + 0.000141022998165879*G0_1_2_0_1 + 2.85428856857483e-06*G0_1_2_0_2 + 0.000141022998165879*G0_1_2_1_0 + 0.000383884193408068*G0_1_2_1_1 + 5.22933856267278e-05*G0_1_2_1_2 + 2.85428856857483e-06*G0_1_2_2_0 + 5.22933856267278e-05*G0_1_2_2_1 - 0.000123721076102049*G0_1_2_2_2 + 0.000336524146048012*G0_2_0_0_0 + 0.000133129656939203*G0_2_0_0_1 + 4.93333826667258e-06*G0_2_0_0_2 + 0.000133129656939203*G0_2_0_1_0 + 0.000141022998165879*G0_2_0_1_1 + 2.85428856857483e-06*G0_2_0_1_2 + 4.9333382666726e-06*G0_2_0_2_0 + 2.85428856857483e-06*G0_2_0_2_1 - 0.000281587900635566*G0_2_0_2_2 + 0.000133129656939203*G0_2_1_0_0 + 0.000141022998165879*G0_2_1_0_1 + 2.85428856857484e-06*G0_2_1_0_2 + 0.000141022998165879*G0_2_1_1_0 + 0.000383884193408068*G0_2_1_1_1 + 5.22933856267278e-05*G0_2_1_1_2 + 2.85428856857484e-06*G0_2_1_2_0 + 5.22933856267278e-05*G0_2_1_2_1 - 0.000123721076102049*G0_2_1_2_2 + 4.93333826667258e-06*G0_2_2_0_0 + 2.85428856857484e-06*G0_2_2_0_1 - 0.000281587900635566*G0_2_2_0_2 + 2.85428856857483e-06*G0_2_2_1_0 + 5.22933856267278e-05*G0_2_2_1_1 - 0.000123721076102049*G0_2_2_1_2 - 0.000281587900635566*G0_2_2_2_0 - 0.000123721076102049*G0_2_2_2_1 - 0.00131099940623772*G0_2_2_2_2;
    A[45] = A[31] + 2.23615302980346e-06*G0_0_0_0_0 - 2.79482422339612e-05*G0_0_1_1_1 - 2.79482422339613e-05*G0_1_0_1_1 - 2.79482422339613e-05*G0_1_1_0_1 - 2.79482422339613e-05*G0_1_1_1_0 - 0.000217221050554421*G0_1_1_1_1 - 4.97415576780741e-05*G0_1_1_1_2 - 4.97415576780741e-05*G0_1_1_2_1 - 1.22092780822961e-05*G0_1_1_2_2 - 4.97415576780741e-05*G0_1_2_1_1 - 1.22092780822961e-05*G0_1_2_1_2 - 1.22092780822961e-05*G0_1_2_2_1 - 4.97415576780741e-05*G0_2_1_1_1 - 1.22092780822961e-05*G0_2_1_1_2 - 1.22092780822961e-05*G0_2_1_2_1 - 1.22092780822961e-05*G0_2_2_1_1 + 2.09887114649053e-05*G0_2_2_2_2;
    A[135] = A[45] + 0.00149891261002397*G0_0_0_0_0 + 9.73512084623359e-05*G0_0_0_0_1 + 4.91689380578351e-05*G0_0_0_0_2 + 9.73512084623359e-05*G0_0_0_1_0 + 4.91689380578351e-05*G0_0_0_2_0 + 9.73512084623359e-05*G0_0_1_0_0 + 6.10794261588017e-06*G0_0_1_1_1 + 4.91689380578351e-05*G0_0_2_0_0 + 9.73512084623359e-05*G0_1_0_0_0 + 6.10794261588018e-06*G0_1_0_1_1 + 6.10794261588018e-06*G0_1_1_0_1 + 6.10794261588018e-06*G0_1_1_1_0 + 0.000180066846733544*G0_1_1_1_1 + 3.10565389930523e-05*G0_1_1_1_2 + 3.10565389930523e-05*G0_1_1_2_1 + 1.13936621873152e-06*G0_1_1_2_2 + 3.10565389930523e-05*G0_1_2_1_1 + 1.13936621873152e-06*G0_1_2_1_2 + 1.13936621873153e-06*G0_1_2_2_1 - 3.92317852635377e-06*G0_1_2_2_2 + 4.91689380578351e-05*G0_2_0_0_0 + 3.10565389930523e-05*G0_2_1_1_1 + 1.13936621873152e-06*G0_2_1_1_2 + 1.13936621873152e-06*G0_2_1_2_1 - 3.92317852635377e-06*G0_2_1_2_2 + 1.13936621873152e-06*G0_2_2_1_1 - 3.92317852635377e-06*G0_2_2_1_2 - 3.92317852635377e-06*G0_2_2_2_1 + 4.31549637898917e-05*G0_2_2_2_2;
    A[195] = A[45] - 0.000109355664911238*G0_0_0_0_0 - 2.3492086984155e-06*G0_0_1_1_1 - 5.89651383302278e-06*G0_0_1_1_2 - 5.89651383302278e-06*G0_0_1_2_1 - 5.89651383302278e-06*G0_0_2_1_1 - 2.3492086984155e-06*G0_1_0_1_1 - 5.89651383302278e-06*G0_1_0_1_2 - 5.89651383302278e-06*G0_1_0_2_1 - 2.3492086984155e-06*G0_1_1_0_1 - 5.89651383302278e-06*G0_1_1_0_2 - 2.34920869841549e-06*G0_1_1_1_0 - 2.70159000317753e-06*G0_1_1_1_1 - 3.52381304762317e-05*G0_1_1_1_2 - 5.89651383302278e-06*G0_1_1_2_0 - 3.52381304762317e-05*G0_1_1_2_1 - 3.08098720797186e-05*G0_1_1_2_2 - 5.89651383302278e-06*G0_1_2_0_1 - 5.89651383302278e-06*G0_1_2_1_0 - 3.52381304762317e-05*G0_1_2_1_1 - 3.08098720797186e-05*G0_1_2_1_2 - 3.08098720797186e-05*G0_1_2_2_1 - 1.86057328914503e-05*G0_1_2_2_2 - 5.89651383302278e-06*G0_2_0_1_1 - 5.89651383302278e-06*G0_2_1_0_1 - 5.89651383302278e-06*G0_2_1_1_0 - 3.52381304762317e-05*G0_2_1_1_1 - 3.08098720797186e-05*G0_2_1_1_2 - 3.08098720797186e-05*G0_2_1_2_1 - 1.86057328914503e-05*G0_2_1_2_2 - 3.08098720797186e-05*G0_2_2_1_1 - 1.86057328914503e-05*G0_2_2_1_2 - 1.86057328914503e-05*G0_2_2_2_1 + 8.04603979207288e-05*G0_2_2_2_2;
    A[38] = A[122];
    A[143] = A[129];
    A[120] = A[8];
    A[92] = A[36];
    A[179] = -A[170] - 9.20889809778855e-05*G0_0_0_0_0 + 4.88635409270409e-06*G0_0_0_0_1 + 6.08914894629282e-05*G0_0_0_0_2 + 4.8863540927041e-06*G0_0_0_1_0 - 1.69143026285911e-05*G0_0_0_1_1 + 6.08914894629282e-05*G0_0_0_2_0 + 9.94185121169415e-05*G0_0_0_2_2 + 4.8863540927041e-06*G0_0_1_0_0 - 1.69143026285911e-05*G0_0_1_0_1 - 1.69143026285911e-05*G0_0_1_1_0 - 6.57778435556322e-05*G0_0_1_1_1 - 6.76572105143643e-06*G0_0_1_1_2 - 6.76572105143643e-06*G0_0_1_2_1 + 2.49955805511404e-05*G0_0_1_2_2 + 6.08914894629282e-05*G0_0_2_0_0 + 9.94185121169415e-05*G0_0_2_0_2 - 6.76572105143644e-06*G0_0_2_1_1 + 2.49955805511404e-05*G0_0_2_1_2 + 9.94185121169415e-05*G0_0_2_2_0 + 2.49955805511404e-05*G0_0_2_2_1 + 0.000178163987687827*G0_0_2_2_2 + 4.88635409270409e-06*G0_1_0_0_0 - 1.69143026285911e-05*G0_1_0_0_1 - 1.69143026285911e-05*G0_1_0_1_0 - 6.57778435556322e-05*G0_1_0_1_1 - 6.76572105143644e-06*G0_1_0_1_2 - 6.76572105143644e-06*G0_1_0_2_1 + 2.49955805511404e-05*G0_1_0_2_2 - 1.69143026285911e-05*G0_1_1_0_0 - 6.57778435556321e-05*G0_1_1_0_1 - 6.76572105143643e-06*G0_1_1_0_2 - 6.57778435556322e-05*G0_1_1_1_0 + 9.2088980977887e-05*G0_1_1_1_1 - 1.31555687111264e-05*G0_1_1_1_2 - 6.76572105143644e-06*G0_1_1_2_0 - 1.31555687111264e-05*G0_1_1_2_1 - 6.38984765968991e-06*G0_1_1_2_2 - 6.76572105143643e-06*G0_1_2_0_1 + 2.49955805511404e-05*G0_1_2_0_2 - 6.76572105143643e-06*G0_1_2_1_0 - 1.31555687111264e-05*G0_1_2_1_1 - 6.38984765968991e-06*G0_1_2_1_2 + 2.49955805511404e-05*G0_1_2_2_0 - 6.3898476596899e-06*G0_1_2_2_1 + 5.90121225041961e-05*G0_1_2_2_2 + 6.08914894629282e-05*G0_2_0_0_0 + 9.94185121169415e-05*G0_2_0_0_2 - 6.76572105143643e-06*G0_2_0_1_1 + 2.49955805511404e-05*G0_2_0_1_2 + 9.94185121169415e-05*G0_2_0_2_0 + 2.49955805511404e-05*G0_2_0_2_1 + 0.000178163987687827*G0_2_0_2_2 - 6.76572105143644e-06*G0_2_1_0_1 + 2.49955805511404e-05*G0_2_1_0_2 - 6.76572105143644e-06*G0_2_1_1_0 - 1.31555687111264e-05*G0_2_1_1_1 - 6.38984765968992e-06*G0_2_1_1_2 + 2.49955805511404e-05*G0_2_1_2_0 - 6.38984765968991e-06*G0_2_1_2_1 + 5.90121225041961e-05*G0_2_1_2_2 + 9.94185121169415e-05*G0_2_2_0_0 + 2.49955805511404e-05*G0_2_2_0_1 + 0.000178163987687827*G0_2_2_0_2 + 2.49955805511404e-05*G0_2_2_1_0 - 6.3898476596899e-06*G0_2_2_1_1 + 5.90121225041961e-05*G0_2_2_1_2 + 0.000178163987687827*G0_2_2_2_0 + 5.90121225041961e-05*G0_2_2_2_1 + 0.00049427351014661*G0_2_2_2_2;
    A[191] = A[179] + 0.00146590622781124*G0_0_0_0_0 + 0.00013531442102873*G0_0_0_0_1 + 0.000293181245562247*G0_0_0_0_2 + 0.00013531442102873*G0_0_0_1_0 + 2.70628842057458e-05*G0_0_0_1_1 + 2.7062884205746e-05*G0_0_0_1_2 + 0.000293181245562247*G0_0_0_2_0 + 2.7062884205746e-05*G0_0_0_2_1 + 5.86362491124495e-05*G0_0_0_2_2 + 0.00013531442102873*G0_0_1_0_0 + 2.70628842057458e-05*G0_0_1_0_1 + 2.7062884205746e-05*G0_0_1_0_2 + 2.70628842057458e-05*G0_0_1_1_0 + 0.000157866824533517*G0_0_1_1_1 + 4.51048070095762e-06*G0_0_1_1_2 + 2.7062884205746e-05*G0_0_1_2_0 + 4.51048070095762e-06*G0_0_1_2_1 + 0.000293181245562247*G0_0_2_0_0 + 2.7062884205746e-05*G0_0_2_0_1 + 5.86362491124494e-05*G0_0_2_0_2 + 2.7062884205746e-05*G0_0_2_1_0 + 4.51048070095763e-06*G0_0_2_1_1 + 5.86362491124494e-05*G0_0_2_2_0 - 5.86362491124495e-05*G0_0_2_2_2 + 0.00013531442102873*G0_1_0_0_0 + 2.70628842057458e-05*G0_1_0_0_1 + 2.7062884205746e-05*G0_1_0_0_2 + 2.70628842057458e-05*G0_1_0_1_0 + 0.000157866824533517*G0_1_0_1_1 + 4.51048070095762e-06*G0_1_0_1_2 + 2.7062884205746e-05*G0_1_0_2_0 + 4.51048070095763e-06*G0_1_0_2_1 + 2.70628842057458e-05*G0_1_1_0_0 + 0.000157866824533517*G0_1_1_0_1 + 4.51048070095762e-06*G0_1_1_0_2 + 0.000157866824533517*G0_1_1_1_0 + 0.000473600473600549*G0_1_1_1_1 + 4.51048070095763e-06*G0_1_1_2_0 - 4.51048070095775e-06*G0_1_1_2_2 + 2.7062884205746e-05*G0_1_2_0_0 + 4.51048070095762e-06*G0_1_2_0_1 + 4.51048070095762e-06*G0_1_2_1_0 - 4.51048070095776e-06*G0_1_2_1_2 - 4.51048070095776e-06*G0_1_2_2_1 - 2.70628842057461e-05*G0_1_2_2_2 + 0.000293181245562247*G0_2_0_0_0 + 2.7062884205746e-05*G0_2_0_0_1 + 5.86362491124495e-05*G0_2_0_0_2 + 2.7062884205746e-05*G0_2_0_1_0 + 4.51048070095763e-06*G0_2_0_1_1 + 5.86362491124495e-05*G0_2_0_2_0 - 5.86362491124495e-05*G0_2_0_2_2 + 2.7062884205746e-05*G0_2_1_0_0 + 4.51048070095763e-06*G0_2_1_0_1 + 4.51048070095763e-06*G0_2_1_1_0 - 4.51048070095775e-06*G0_2_1_1_2 - 4.51048070095776e-06*G0_2_1_2_1 - 2.70628842057461e-05*G0_2_1_2_2 + 5.86362491124495e-05*G0_2_2_0_0 - 5.86362491124495e-05*G0_2_2_0_2 - 4.51048070095777e-06*G0_2_2_1_1 - 2.70628842057461e-05*G0_2_2_1_2 - 5.86362491124495e-05*G0_2_2_2_0 - 2.70628842057461e-05*G0_2_2_2_1 - 0.000293181245562248*G0_2_2_2_2;
    A[116] = A[139] - 0.000730134063467519*G0_0_0_0_0 - 6.70934004267451e-05*G0_0_0_0_1 + 1.97333530666912e-06*G0_0_0_0_2 - 6.70934004267451e-05*G0_0_0_1_0 + 1.97333530666912e-06*G0_0_0_2_0 + 7.20267386934175e-05*G0_0_0_2_2 - 6.70934004267451e-05*G0_0_1_0_0 + 6.70934004267454e-05*G0_0_1_1_1 + 1.97333530666913e-06*G0_0_2_0_0 + 7.20267386934175e-05*G0_0_2_0_2 + 7.20267386934175e-05*G0_0_2_2_0 + 6.9066735733414e-05*G0_0_2_2_2 - 6.70934004267451e-05*G0_1_0_0_0 + 6.70934004267454e-05*G0_1_0_1_1 + 6.70934004267454e-05*G0_1_1_0_1 + 6.70934004267454e-05*G0_1_1_1_0 + 0.000730134063467523*G0_1_1_1_1 - 1.97333530666886e-06*G0_1_1_1_2 - 1.97333530666886e-06*G0_1_1_2_1 - 7.20267386934176e-05*G0_1_1_2_2 - 1.97333530666886e-06*G0_1_2_1_1 - 7.20267386934176e-05*G0_1_2_1_2 - 7.20267386934176e-05*G0_1_2_2_1 - 6.90667357334141e-05*G0_1_2_2_2 + 1.97333530666913e-06*G0_2_0_0_0 + 7.20267386934175e-05*G0_2_0_0_2 + 7.20267386934175e-05*G0_2_0_2_0 + 6.9066735733414e-05*G0_2_0_2_2 - 1.97333530666886e-06*G0_2_1_1_1 - 7.20267386934176e-05*G0_2_1_1_2 - 7.20267386934176e-05*G0_2_1_2_1 - 6.90667357334141e-05*G0_2_1_2_2 + 7.20267386934175e-05*G0_2_2_0_0 + 6.9066735733414e-05*G0_2_2_0_2 - 7.20267386934176e-05*G0_2_2_1_1 - 6.90667357334141e-05*G0_2_2_1_2 + 6.9066735733414e-05*G0_2_2_2_0 - 6.90667357334141e-05*G0_2_2_2_1;
    A[219] = A[149];
    A[207] = A[193];
    A[73] = A[199];
    A[43] = A[41] + 8.04603979207289e-05*G0_0_0_0_0 - 1.86057328914503e-05*G0_0_0_0_1 - 1.86057328914503e-05*G0_0_0_1_0 - 3.08098720797186e-05*G0_0_0_1_1 - 1.86057328914503e-05*G0_0_1_0_0 - 3.08098720797186e-05*G0_0_1_0_1 - 3.08098720797186e-05*G0_0_1_1_0 - 3.52381304762317e-05*G0_0_1_1_1 - 5.89651383302277e-06*G0_0_1_1_2 - 5.89651383302277e-06*G0_0_1_2_1 - 5.89651383302277e-06*G0_0_2_1_1 - 1.86057328914503e-05*G0_1_0_0_0 - 3.08098720797186e-05*G0_1_0_0_1 - 3.08098720797186e-05*G0_1_0_1_0 - 3.52381304762317e-05*G0_1_0_1_1 - 5.89651383302277e-06*G0_1_0_1_2 - 5.89651383302277e-06*G0_1_0_2_1 - 3.08098720797186e-05*G0_1_1_0_0 - 3.52381304762317e-05*G0_1_1_0_1 - 5.89651383302277e-06*G0_1_1_0_2 - 3.52381304762317e-05*G0_1_1_1_0 - 2.70159000317807e-06*G0_1_1_1_1 - 2.34920869841546e-06*G0_1_1_1_2 - 5.89651383302277e-06*G0_1_1_2_0 - 2.34920869841546e-06*G0_1_1_2_1 - 5.89651383302277e-06*G0_1_2_0_1 - 5.89651383302277e-06*G0_1_2_1_0 - 2.34920869841546e-06*G0_1_2_1_1 - 5.89651383302277e-06*G0_2_0_1_1 - 5.89651383302277e-06*G0_2_1_0_1 - 5.89651383302277e-06*G0_2_1_1_0 - 2.34920869841545e-06*G0_2_1_1_1 - 0.000109355664911238*G0_2_2_2_2;
    A[158] = -A[43] - 0.000649086363372186*G0_0_0_0_0 - 1.46590622781124e-05*G0_0_0_0_1 - 5.65219612838754e-05*G0_0_0_0_2 - 1.46590622781124e-05*G0_0_0_1_0 + 3.29124138648003e-05*G0_0_0_1_1 - 5.65219612838754e-05*G0_0_0_2_0 - 1.46590622781123e-05*G0_0_1_0_0 + 3.29124138648003e-05*G0_0_1_0_1 + 3.29124138648003e-05*G0_0_1_1_0 - 1.40952521904927e-05*G0_0_1_1_1 + 1.9028590457165e-06*G0_0_1_1_2 + 1.9028590457165e-06*G0_0_1_2_1 - 5.65219612838754e-05*G0_0_2_0_0 + 1.9028590457165e-06*G0_0_2_1_1 + 1.98743055885947e-05*G0_0_2_2_2 - 1.46590622781124e-05*G0_1_0_0_0 + 3.29124138648003e-05*G0_1_0_0_1 + 3.29124138648003e-05*G0_1_0_1_0 - 1.40952521904927e-05*G0_1_0_1_1 + 1.9028590457165e-06*G0_1_0_1_2 + 1.9028590457165e-06*G0_1_0_2_1 + 3.29124138648003e-05*G0_1_1_0_0 - 1.40952521904927e-05*G0_1_1_0_1 + 1.9028590457165e-06*G0_1_1_0_2 - 1.40952521904927e-05*G0_1_1_1_0 - 0.000296705058609871*G0_1_1_1_1 - 2.46666913333622e-05*G0_1_1_1_2 + 1.9028590457165e-06*G0_1_1_2_0 - 2.46666913333622e-05*G0_1_1_2_1 + 1.9028590457165e-06*G0_1_2_0_1 + 1.9028590457165e-06*G0_1_2_1_0 - 2.46666913333622e-05*G0_1_2_1_1 + 1.56457299314469e-05*G0_1_2_2_2 - 5.65219612838754e-05*G0_2_0_0_0 + 1.9028590457165e-06*G0_2_0_1_1 + 1.98743055885947e-05*G0_2_0_2_2 + 1.9028590457165e-06*G0_2_1_0_1 + 1.9028590457165e-06*G0_2_1_1_0 - 2.46666913333622e-05*G0_2_1_1_1 + 1.56457299314469e-05*G0_2_1_2_2 + 1.98743055885947e-05*G0_2_2_0_2 + 1.5645729931447e-05*G0_2_2_1_2 + 1.98743055885947e-05*G0_2_2_2_0 + 1.56457299314469e-05*G0_2_2_2_1 - 2.4666691333361e-05*G0_2_2_2_2;
    A[94] = A[158] + 0.000730134063467518*G0_0_0_0_0 - 1.97333530666899e-06*G0_0_0_0_1 + 6.70934004267447e-05*G0_0_0_0_2 - 1.97333530666901e-06*G0_0_0_1_0 - 7.20267386934174e-05*G0_0_0_1_1 + 6.70934004267447e-05*G0_0_0_2_0 - 1.97333530666901e-06*G0_0_1_0_0 - 7.20267386934174e-05*G0_0_1_0_1 - 7.20267386934174e-05*G0_0_1_1_0 - 6.90667357334139e-05*G0_0_1_1_1 + 6.70934004267447e-05*G0_0_2_0_0 - 6.7093400426745e-05*G0_0_2_2_2 - 1.97333530666899e-06*G0_1_0_0_0 - 7.20267386934174e-05*G0_1_0_0_1 - 7.20267386934174e-05*G0_1_0_1_0 - 6.90667357334139e-05*G0_1_0_1_1 - 7.20267386934174e-05*G0_1_1_0_0 - 6.90667357334139e-05*G0_1_1_0_1 - 6.90667357334139e-05*G0_1_1_1_0 + 6.90667357334142e-05*G0_1_1_1_2 + 6.90667357334142e-05*G0_1_1_2_1 + 7.20267386934176e-05*G0_1_1_2_2 + 6.90667357334142e-05*G0_1_2_1_1 + 7.20267386934176e-05*G0_1_2_1_2 + 7.20267386934175e-05*G0_1_2_2_1 + 1.97333530666901e-06*G0_1_2_2_2 + 6.70934004267447e-05*G0_2_0_0_0 - 6.7093400426745e-05*G0_2_0_2_2 + 6.90667357334142e-05*G0_2_1_1_1 + 7.20267386934175e-05*G0_2_1_1_2 + 7.20267386934176e-05*G0_2_1_2_1 + 1.97333530666901e-06*G0_2_1_2_2 - 6.7093400426745e-05*G0_2_2_0_2 + 7.20267386934176e-05*G0_2_2_1_1 + 1.97333530666901e-06*G0_2_2_1_2 - 6.7093400426745e-05*G0_2_2_2_0 + 1.97333530666902e-06*G0_2_2_2_1 - 0.000730134063467519*G0_2_2_2_2;
    A[66] = A[94];
    A[130] = A[158];
    A[146] = A[174];
    A[75] = A[5];
    A[150] = A[10];
    A[183] = A[57];
    A[119] = A[163] - 0.000194514480228799*G0_0_0_0_1 + 0.000194514480228798*G0_0_0_0_2 - 0.000194514480228799*G0_0_0_1_0 - 0.000243565957851714*G0_0_0_1_1 + 0.000194514480228798*G0_0_0_2_0 + 0.000243565957851713*G0_0_0_2_2 - 0.000194514480228799*G0_0_1_0_0 - 0.000243565957851714*G0_0_1_0_1 - 0.000243565957851714*G0_0_1_1_0 - 1.52228723657327e-05*G0_0_1_1_1 + 0.000194514480228798*G0_0_2_0_0 + 0.000243565957851713*G0_0_2_0_2 + 0.000243565957851713*G0_0_2_2_0 + 1.5222872365733e-05*G0_0_2_2_2 - 0.000194514480228799*G0_1_0_0_0 - 0.000243565957851714*G0_1_0_0_1 - 0.000243565957851714*G0_1_0_1_0 - 1.52228723657328e-05*G0_1_0_1_1 - 0.000243565957851714*G0_1_1_0_0 - 1.52228723657327e-05*G0_1_1_0_1 - 1.52228723657327e-05*G0_1_1_1_0 + 0.00209737352594531*G0_1_1_1_1 + 0.000392411820983316*G0_1_1_1_2 + 0.000392411820983316*G0_1_1_2_1 + 0.000392411820983316*G0_1_2_1_1 - 0.000392411820983314*G0_1_2_2_2 + 0.000194514480228798*G0_2_0_0_0 + 0.000243565957851713*G0_2_0_0_2 + 0.000243565957851713*G0_2_0_2_0 + 1.5222872365733e-05*G0_2_0_2_2 + 0.000392411820983316*G0_2_1_1_1 - 0.000392411820983314*G0_2_1_2_2 + 0.000243565957851713*G0_2_2_0_0 + 1.52228723657331e-05*G0_2_2_0_2 - 0.000392411820983314*G0_2_2_1_2 + 1.52228723657331e-05*G0_2_2_2_0 - 0.000392411820983314*G0_2_2_2_1 - 0.0020973735259453*G0_2_2_2_2;
    A[197] = A[43];
    A[19] = A[61];
    A[12] = -A[195] + 0.000167733501066862*G0_0_0_0_0 - 9.86667653334499e-06*G0_0_0_0_1 - 9.86667653334495e-06*G0_0_0_0_2 - 9.866676533345e-06*G0_0_0_1_0 - 9.86667653334495e-06*G0_0_0_2_0 - 9.86667653334499e-06*G0_0_1_0_0 - 1.04304866209646e-05*G0_0_1_1_1 - 4.22857565714804e-07*G0_0_1_1_2 - 4.22857565714803e-07*G0_0_1_2_1 + 4.3695281790527e-06*G0_0_1_2_2 - 9.86667653334496e-06*G0_0_2_0_0 - 4.22857565714801e-07*G0_0_2_1_1 + 4.3695281790527e-06*G0_0_2_1_2 + 4.3695281790527e-06*G0_0_2_2_1 + 1.83238278476404e-05*G0_0_2_2_2 - 9.86667653334499e-06*G0_1_0_0_0 - 1.04304866209646e-05*G0_1_0_1_1 - 4.22857565714799e-07*G0_1_0_1_2 - 4.22857565714796e-07*G0_1_0_2_1 + 4.36952817905271e-06*G0_1_0_2_2 - 1.04304866209646e-05*G0_1_1_0_1 - 4.22857565714801e-07*G0_1_1_0_2 - 1.04304866209646e-05*G0_1_1_1_0 - 0.000184647803695454*G0_1_1_1_1 - 4.17219464838584e-05*G0_1_1_1_2 - 4.22857565714799e-07*G0_1_1_2_0 - 4.17219464838584e-05*G0_1_1_2_1 - 7.1885786171513e-06*G0_1_1_2_2 - 4.22857565714799e-07*G0_1_2_0_1 + 4.36952817905271e-06*G0_1_2_0_2 - 4.22857565714799e-07*G0_1_2_1_0 - 4.17219464838584e-05*G0_1_2_1_1 - 7.18857861715129e-06*G0_1_2_1_2 + 4.36952817905271e-06*G0_1_2_2_0 - 7.18857861715129e-06*G0_1_2_2_1 + 2.25524035047883e-05*G0_1_2_2_2 - 9.86667653334496e-06*G0_2_0_0_0 - 4.22857565714801e-07*G0_2_0_1_1 + 4.3695281790527e-06*G0_2_0_1_2 + 4.3695281790527e-06*G0_2_0_2_1 + 1.83238278476404e-05*G0_2_0_2_2 - 4.22857565714803e-07*G0_2_1_0_1 + 4.36952817905271e-06*G0_2_1_0_2 - 4.22857565714801e-07*G0_2_1_1_0 - 4.17219464838584e-05*G0_2_1_1_1 - 7.18857861715129e-06*G0_2_1_1_2 + 4.36952817905271e-06*G0_2_1_2_0 - 7.18857861715129e-06*G0_2_1_2_1 + 2.25524035047883e-05*G0_2_1_2_2 + 4.3695281790527e-06*G0_2_2_0_1 + 1.83238278476404e-05*G0_2_2_0_2 + 4.36952817905271e-06*G0_2_2_1_0 - 7.1885786171513e-06*G0_2_2_1_1 + 2.25524035047882e-05*G0_2_2_1_2 + 1.83238278476404e-05*G0_2_2_2_0 + 2.25524035047882e-05*G0_2_2_2_1 + 0.000136723946247779*G0_2_2_2_2;
    A[100] = -A[12] - 0.00251106917773627*G0_0_0_0_0 - 0.000300933634267018*G0_0_0_0_1 - 0.000458800458800536*G0_0_0_0_2 - 0.000300933634267018*G0_0_0_1_0 - 5.22933856267278e-05*G0_0_0_1_1 - 5.32800532800623e-05*G0_0_0_1_2 - 0.000458800458800536*G0_0_0_2_0 - 5.32800532800623e-05*G0_0_0_2_1 - 0.000107546774213459*G0_0_0_2_2 - 0.000300933634267018*G0_0_1_0_0 - 5.22933856267278e-05*G0_0_1_0_1 - 5.32800532800623e-05*G0_0_1_0_2 - 5.22933856267278e-05*G0_0_1_1_0 - 1.59276349752566e-05*G0_0_1_1_1 - 6.27238722476923e-06*G0_0_1_1_2 - 5.32800532800623e-05*G0_0_1_2_0 - 6.27238722476923e-06*G0_0_1_2_1 - 4.58095696191012e-06*G0_0_1_2_2 - 0.000458800458800536*G0_0_2_0_0 - 5.32800532800623e-05*G0_0_2_0_1 - 0.000107546774213459*G0_0_2_0_2 - 5.32800532800623e-05*G0_0_2_1_0 - 6.27238722476923e-06*G0_0_2_1_1 - 4.58095696191012e-06*G0_0_2_1_2 - 0.000107546774213459*G0_0_2_2_0 - 4.58095696191012e-06*G0_0_2_2_1 - 5.77905339810194e-06*G0_0_2_2_2 - 0.000300933634267018*G0_1_0_0_0 - 5.22933856267278e-05*G0_1_0_0_1 - 5.32800532800623e-05*G0_1_0_0_2 - 5.22933856267278e-05*G0_1_0_1_0 - 1.59276349752566e-05*G0_1_0_1_1 - 6.27238722476923e-06*G0_1_0_1_2 - 5.32800532800623e-05*G0_1_0_2_0 - 6.27238722476923e-06*G0_1_0_2_1 - 4.58095696191012e-06*G0_1_0_2_2 - 5.22933856267278e-05*G0_1_1_0_0 - 1.59276349752566e-05*G0_1_1_0_1 - 6.27238722476923e-06*G0_1_1_0_2 - 1.59276349752566e-05*G0_1_1_1_0 - 4.01714687429032e-05*G0_1_1_1_1 + 8.45715131429663e-07*G0_1_1_1_2 - 6.27238722476923e-06*G0_1_1_2_0 + 8.45715131429663e-07*G0_1_1_2_1 + 1.33200133200156e-05*G0_1_1_2_2 - 5.32800532800623e-05*G0_1_2_0_0 - 6.27238722476923e-06*G0_1_2_0_1 - 4.58095696191012e-06*G0_1_2_0_2 - 6.27238722476923e-06*G0_1_2_1_0 + 8.45715131429663e-07*G0_1_2_1_1 + 1.33200133200156e-05*G0_1_2_1_2 - 4.58095696191012e-06*G0_1_2_2_0 + 1.33200133200156e-05*G0_1_2_2_1 + 3.4674320388612e-05*G0_1_2_2_2 - 0.000458800458800536*G0_2_0_0_0 - 5.32800532800623e-05*G0_2_0_0_1 - 0.000107546774213459*G0_2_0_0_2 - 5.32800532800623e-05*G0_2_0_1_0 - 6.27238722476923e-06*G0_2_0_1_1 - 4.58095696191012e-06*G0_2_0_1_2 - 0.000107546774213459*G0_2_0_2_0 - 4.58095696191012e-06*G0_2_0_2_1 - 5.77905339810194e-06*G0_2_0_2_2 - 5.32800532800623e-05*G0_2_1_0_0 - 6.27238722476923e-06*G0_2_1_0_1 - 4.58095696191012e-06*G0_2_1_0_2 - 6.27238722476923e-06*G0_2_1_1_0 + 8.45715131429663e-07*G0_2_1_1_1 + 1.33200133200156e-05*G0_2_1_1_2 - 4.58095696191012e-06*G0_2_1_2_0 + 1.33200133200156e-05*G0_2_1_2_1 + 3.4674320388612e-05*G0_2_1_2_2 - 0.000107546774213459*G0_2_2_0_0 - 4.58095696191012e-06*G0_2_2_0_1 - 5.77905339810194e-06*G0_2_2_0_2 - 4.58095696191012e-06*G0_2_2_1_0 + 1.33200133200156e-05*G0_2_2_1_1 + 3.4674320388612e-05*G0_2_2_1_2 - 5.77905339810194e-06*G0_2_2_2_0 + 3.4674320388612e-05*G0_2_2_2_1 + 0.000128971557543008*G0_2_2_2_2;
    A[99] = -A[100] + 0.000924178701956634*G0_0_0_0_0 + 0.000200622422844678*G0_0_0_0_1 + 4.27555983111607e-05*G0_0_0_0_2 + 0.000200622422844678*G0_0_0_1_0 + 5.32800532800622e-05*G0_0_0_1_1 + 1.71022393244644e-05*G0_0_0_1_2 + 4.27555983111606e-05*G0_0_0_2_0 + 1.71022393244644e-05*G0_0_0_2_1 - 1.97333530666902e-06*G0_0_0_2_2 + 0.000200622422844678*G0_0_1_0_0 + 5.32800532800622e-05*G0_0_1_0_1 + 1.71022393244644e-05*G0_0_1_0_2 + 5.32800532800622e-05*G0_0_1_1_0 + 6.10794261588023e-06*G0_0_1_1_1 + 4.74540157079919e-06*G0_0_1_1_2 + 1.71022393244644e-05*G0_0_1_2_0 + 4.74540157079919e-06*G0_0_1_2_1 + 6.43683183365831e-06*G0_0_1_2_2 + 4.27555983111607e-05*G0_0_2_0_0 + 1.71022393244644e-05*G0_0_2_0_1 - 1.97333530666904e-06*G0_0_2_0_2 + 1.71022393244644e-05*G0_0_2_1_0 + 4.74540157079919e-06*G0_0_2_1_1 + 6.43683183365831e-06*G0_0_2_1_2 - 1.97333530666902e-06*G0_0_2_2_0 + 6.43683183365831e-06*G0_0_2_2_1 + 1.62565241930349e-05*G0_0_2_2_2 + 0.000200622422844678*G0_1_0_0_0 + 5.32800532800622e-05*G0_1_0_0_1 + 1.71022393244644e-05*G0_1_0_0_2 + 5.32800532800622e-05*G0_1_0_1_0 + 6.10794261588023e-06*G0_1_0_1_1 + 4.74540157079919e-06*G0_1_0_1_2 + 1.71022393244644e-05*G0_1_0_2_0 + 4.74540157079919e-06*G0_1_0_2_1 + 6.43683183365831e-06*G0_1_0_2_2 + 5.32800532800622e-05*G0_1_1_0_0 + 6.10794261588023e-06*G0_1_1_0_1 + 4.74540157079919e-06*G0_1_1_0_2 + 6.10794261588022e-06*G0_1_1_1_0 - 5.77905339810195e-05*G0_1_1_1_1 - 6.20191096381674e-06*G0_1_1_1_2 + 4.74540157079919e-06*G0_1_1_2_0 - 6.20191096381674e-06*G0_1_1_2_1 + 8.03429374858081e-06*G0_1_1_2_2 + 1.71022393244644e-05*G0_1_2_0_0 + 4.74540157079919e-06*G0_1_2_0_1 + 6.43683183365831e-06*G0_1_2_0_2 + 4.74540157079919e-06*G0_1_2_1_0 - 6.20191096381674e-06*G0_1_2_1_1 + 8.03429374858081e-06*G0_1_2_1_2 + 6.43683183365831e-06*G0_1_2_2_0 + 8.03429374858081e-06*G0_1_2_2_1 + 2.76266942933656e-05*G0_1_2_2_2 + 4.27555983111607e-05*G0_2_0_0_0 + 1.71022393244644e-05*G0_2_0_0_1 - 1.97333530666904e-06*G0_2_0_0_2 + 1.71022393244644e-05*G0_2_0_1_0 + 4.74540157079919e-06*G0_2_0_1_1 + 6.43683183365831e-06*G0_2_0_1_2 - 1.97333530666903e-06*G0_2_0_2_0 + 6.43683183365831e-06*G0_2_0_2_1 + 1.62565241930349e-05*G0_2_0_2_2 + 1.71022393244644e-05*G0_2_1_0_0 + 4.74540157079919e-06*G0_2_1_0_1 + 6.43683183365831e-06*G0_2_1_0_2 + 4.74540157079919e-06*G0_2_1_1_0 - 6.20191096381674e-06*G0_2_1_1_1 + 8.03429374858081e-06*G0_2_1_1_2 + 6.43683183365831e-06*G0_2_1_2_0 + 8.03429374858081e-06*G0_2_1_2_1 + 2.76266942933656e-05*G0_2_1_2_2 - 1.97333530666904e-06*G0_2_2_0_0 + 6.43683183365831e-06*G0_2_2_0_1 + 1.62565241930349e-05*G0_2_2_0_2 + 6.4368318336583e-06*G0_2_2_1_0 + 8.03429374858081e-06*G0_2_2_1_1 + 2.76266942933656e-05*G0_2_2_1_2 + 1.62565241930349e-05*G0_2_2_2_0 + 2.76266942933656e-05*G0_2_2_2_1 + 0.000111352492304892*G0_2_2_2_2;
    A[97] = A[100] - 0.000522933856267278*G0_0_0_0_0 + 5.92000592000692e-05*G0_0_0_0_2 - 1.97333530666896e-06*G0_0_0_1_1 + 1.97333530666903e-06*G0_0_0_1_2 + 5.92000592000692e-05*G0_0_0_2_0 + 1.97333530666904e-06*G0_0_0_2_1 + 1.7760017760021e-05*G0_0_0_2_2 - 1.97333530666894e-06*G0_0_1_0_1 + 1.97333530666904e-06*G0_0_1_0_2 - 1.97333530666896e-06*G0_0_1_1_0 + 2.26933560266931e-05*G0_0_1_1_1 + 1.97333530666902e-06*G0_0_1_2_0 - 2.26933560266931e-05*G0_0_1_2_2 + 5.92000592000692e-05*G0_0_2_0_0 + 1.97333530666903e-06*G0_0_2_0_1 + 1.7760017760021e-05*G0_0_2_0_2 + 1.97333530666904e-06*G0_0_2_1_0 - 2.26933560266931e-05*G0_0_2_1_2 + 1.7760017760021e-05*G0_0_2_2_0 - 2.26933560266931e-05*G0_0_2_2_1 - 0.000181546848213545*G0_0_2_2_2 - 1.97333530666895e-06*G0_1_0_0_1 + 1.97333530666903e-06*G0_1_0_0_2 - 1.97333530666896e-06*G0_1_0_1_0 + 2.26933560266931e-05*G0_1_0_1_1 + 1.97333530666902e-06*G0_1_0_2_0 - 2.26933560266931e-05*G0_1_0_2_2 - 1.97333530666897e-06*G0_1_1_0_0 + 2.26933560266931e-05*G0_1_1_0_1 + 2.26933560266931e-05*G0_1_1_1_0 + 0.000149691578263032*G0_1_1_1_1 + 2.49485963771721e-05*G0_1_1_1_2 + 2.49485963771721e-05*G0_1_1_2_1 - 2.49485963771719e-05*G0_1_1_2_2 + 1.97333530666903e-06*G0_1_2_0_0 - 2.26933560266931e-05*G0_1_2_0_2 + 2.49485963771721e-05*G0_1_2_1_1 - 2.49485963771719e-05*G0_1_2_1_2 - 2.26933560266931e-05*G0_1_2_2_0 - 2.49485963771719e-05*G0_1_2_2_1 - 0.000149691578263032*G0_1_2_2_2 + 5.92000592000693e-05*G0_2_0_0_0 + 1.97333530666904e-06*G0_2_0_0_1 + 1.7760017760021e-05*G0_2_0_0_2 + 1.97333530666904e-06*G0_2_0_1_0 - 2.26933560266931e-05*G0_2_0_1_2 + 1.7760017760021e-05*G0_2_0_2_0 - 2.26933560266931e-05*G0_2_0_2_1 - 0.000181546848213545*G0_2_0_2_2 + 1.97333530666904e-06*G0_2_1_0_0 - 2.26933560266931e-05*G0_2_1_0_2 + 2.49485963771721e-05*G0_2_1_1_1 - 2.49485963771719e-05*G0_2_1_1_2 - 2.26933560266931e-05*G0_2_1_2_0 - 2.49485963771719e-05*G0_2_1_2_1 - 0.000149691578263032*G0_2_1_2_2 + 1.7760017760021e-05*G0_2_2_0_0 - 2.26933560266931e-05*G0_2_2_0_1 - 0.000181546848213545*G0_2_2_0_2 - 2.26933560266931e-05*G0_2_2_1_0 - 2.49485963771719e-05*G0_2_2_1_1 - 0.000149691578263032*G0_2_2_1_2 - 0.000181546848213545*G0_2_2_2_0 - 0.000149691578263032*G0_2_2_2_1 - 0.0012474298188586*G0_2_2_2_2;
    A[111] = A[97];
    A[186] = A[100] + 0.00727174060507516*G0_0_0_0_0 + 0.000917600917601073*G0_0_0_0_1 + 0.00139120139120163*G0_0_0_0_2 + 0.000917600917601073*G0_0_0_1_0 + 0.000159840159840187*G0_0_0_1_1 + 0.000161813495146856*G0_0_0_1_2 + 0.00139120139120163*G0_0_0_2_0 + 0.000161813495146856*G0_0_0_2_1 + 0.00032560032560038*G0_0_0_2_2 + 0.000917600917601073*G0_0_1_0_0 + 0.000159840159840187*G0_0_1_0_1 + 0.000161813495146856*G0_0_1_0_2 + 0.000159840159840187*G0_0_1_1_0 + 2.50895488990769e-05*G0_0_1_1_1 + 7.47048366096116e-06*G0_0_1_1_2 + 0.000161813495146856*G0_0_1_2_0 + 7.47048366096116e-06*G0_0_1_2_1 + 2.39619287238382e-06*G0_0_1_2_2 + 0.00139120139120163*G0_0_2_0_0 + 0.000161813495146856*G0_0_2_0_1 + 0.00032560032560038*G0_0_2_0_2 + 0.000161813495146856*G0_0_2_1_0 + 7.47048366096116e-06*G0_0_2_1_1 + 2.39619287238382e-06*G0_0_2_1_2 + 0.00032560032560038*G0_0_2_2_0 + 2.39619287238382e-06*G0_0_2_2_1 - 5.35619583238714e-06*G0_0_2_2_2 + 0.000917600917601073*G0_1_0_0_0 + 0.000159840159840187*G0_1_0_0_1 + 0.000161813495146856*G0_1_0_0_2 + 0.000159840159840187*G0_1_0_1_0 + 2.50895488990769e-05*G0_1_0_1_1 + 7.47048366096116e-06*G0_1_0_1_2 + 0.000161813495146856*G0_1_0_2_0 + 7.47048366096116e-06*G0_1_0_2_1 + 2.39619287238382e-06*G0_1_0_2_2 + 0.000159840159840187*G0_1_1_0_0 + 2.50895488990769e-05*G0_1_1_0_1 + 7.47048366096116e-06*G0_1_1_0_2 + 2.50895488990769e-05*G0_1_1_1_0 - 4.22857565714844e-06*G0_1_1_1_1 - 5.24343381486328e-05*G0_1_1_1_2 + 7.47048366096116e-06*G0_1_1_2_0 - 5.24343381486328e-05*G0_1_1_2_1 - 7.73829345258047e-05*G0_1_1_2_2 + 0.000161813495146856*G0_1_2_0_0 + 7.47048366096116e-06*G0_1_2_0_1 + 2.39619287238382e-06*G0_1_2_0_2 + 7.47048366096116e-06*G0_1_2_1_0 - 5.24343381486328e-05*G0_1_2_1_1 - 7.73829345258047e-05*G0_1_2_1_2 + 2.39619287238382e-06*G0_1_2_2_0 - 7.73829345258047e-05*G0_1_2_2_1 - 0.00015392015392018*G0_1_2_2_2 + 0.00139120139120163*G0_2_0_0_0 + 0.000161813495146856*G0_2_0_0_1 + 0.00032560032560038*G0_2_0_0_2 + 0.000161813495146856*G0_2_0_1_0 + 7.47048366096116e-06*G0_2_0_1_1 + 2.39619287238382e-06*G0_2_0_1_2 + 0.00032560032560038*G0_2_0_2_0 + 2.39619287238382e-06*G0_2_0_2_1 - 5.35619583238714e-06*G0_2_0_2_2 + 0.000161813495146856*G0_2_1_0_0 + 7.47048366096116e-06*G0_2_1_0_1 + 2.39619287238382e-06*G0_2_1_0_2 + 7.47048366096116e-06*G0_2_1_1_0 - 5.24343381486328e-05*G0_2_1_1_1 - 7.73829345258047e-05*G0_2_1_1_2 + 2.39619287238382e-06*G0_2_1_2_0 - 7.73829345258047e-05*G0_2_1_2_1 - 0.00015392015392018*G0_2_1_2_2 + 0.00032560032560038*G0_2_2_0_0 + 2.39619287238382e-06*G0_2_2_0_1 - 5.35619583238715e-06*G0_2_2_0_2 + 2.39619287238382e-06*G0_2_2_1_0 - 7.73829345258047e-05*G0_2_2_1_1 - 0.00015392015392018*G0_2_2_1_2 - 5.35619583238715e-06*G0_2_2_2_0 - 0.00015392015392018*G0_2_2_2_1 - 0.000511657654514883*G0_2_2_2_2;
    A[164] = A[97] + 0.00341387008053732*G0_0_0_0_0 + 4.08762313524288e-05*G0_0_0_0_1 + 0.000334057476914676*G0_0_0_0_2 + 4.08762313524288e-05*G0_0_0_1_0 - 0.000226087845135502*G0_0_0_1_1 - 8.17524627048572e-06*G0_0_0_1_2 + 0.000334057476914676*G0_0_0_2_0 - 8.17524627048572e-06*G0_0_0_2_1 + 2.93181245562247e-05*G0_0_0_2_2 + 4.08762313524287e-05*G0_0_1_0_0 - 0.000226087845135502*G0_0_1_0_1 - 8.17524627048573e-06*G0_0_1_0_2 - 0.000226087845135502*G0_0_1_1_0 - 0.000229329753139316*G0_0_1_1_1 - 3.98895636990942e-05*G0_0_1_1_2 - 8.17524627048572e-06*G0_0_1_2_0 - 3.98895636990942e-05*G0_0_1_2_1 + 5.63810087619709e-06*G0_0_1_2_2 + 0.000334057476914676*G0_0_2_0_0 - 8.17524627048572e-06*G0_0_2_0_1 + 2.93181245562247e-05*G0_0_2_0_2 - 8.17524627048572e-06*G0_0_2_1_0 - 3.98895636990942e-05*G0_0_2_1_1 + 5.6381008761971e-06*G0_0_2_1_2 + 2.93181245562247e-05*G0_0_2_2_0 + 5.63810087619709e-06*G0_0_2_2_1 + 0.00015251062870113*G0_0_2_2_2 + 4.08762313524287e-05*G0_1_0_0_0 - 0.000226087845135502*G0_1_0_0_1 - 8.17524627048572e-06*G0_1_0_0_2 - 0.000226087845135502*G0_1_0_1_0 - 0.000229329753139316*G0_1_0_1_1 - 3.98895636990942e-05*G0_1_0_1_2 - 8.17524627048572e-06*G0_1_0_2_0 - 3.98895636990942e-05*G0_1_0_2_1 + 5.63810087619709e-06*G0_1_0_2_2 - 0.000226087845135502*G0_1_1_0_0 - 0.000229329753139316*G0_1_1_0_1 - 3.98895636990942e-05*G0_1_1_0_2 - 0.000229329753139316*G0_1_1_1_0 + 0.000133622990765869*G0_1_1_1_1 - 2.66400266400312e-05*G0_1_1_1_2 - 3.98895636990942e-05*G0_1_1_2_0 - 2.66400266400312e-05*G0_1_1_2_1 - 8.45715131429559e-06*G0_1_1_2_2 - 8.17524627048572e-06*G0_1_2_0_0 - 3.98895636990942e-05*G0_1_2_0_1 + 5.6381008761971e-06*G0_1_2_0_2 - 3.98895636990942e-05*G0_1_2_1_0 - 2.66400266400312e-05*G0_1_2_1_1 - 8.45715131429559e-06*G0_1_2_1_2 + 5.63810087619709e-06*G0_1_2_2_0 - 8.45715131429559e-06*G0_1_2_2_1 + 0.000107405821691554*G0_1_2_2_2 + 0.000334057476914676*G0_2_0_0_0 - 8.17524627048572e-06*G0_2_0_0_1 + 2.93181245562247e-05*G0_2_0_0_2 - 8.17524627048572e-06*G0_2_0_1_0 - 3.98895636990942e-05*G0_2_0_1_1 + 5.63810087619711e-06*G0_2_0_1_2 + 2.93181245562247e-05*G0_2_0_2_0 + 5.6381008761971e-06*G0_2_0_2_1 + 0.00015251062870113*G0_2_0_2_2 - 8.17524627048572e-06*G0_2_1_0_0 - 3.98895636990942e-05*G0_2_1_0_1 + 5.6381008761971e-06*G0_2_1_0_2 - 3.98895636990942e-05*G0_2_1_1_0 - 2.66400266400312e-05*G0_2_1_1_1 - 8.45715131429559e-06*G0_2_1_1_2 + 5.63810087619709e-06*G0_2_1_2_0 - 8.45715131429561e-06*G0_2_1_2_1 + 0.000107405821691554*G0_2_1_2_2 + 2.93181245562247e-05*G0_2_2_0_0 + 5.63810087619709e-06*G0_2_2_0_1 + 0.00015251062870113*G0_2_2_0_2 + 5.6381008761971e-06*G0_2_2_1_0 - 8.4571513142956e-06*G0_2_2_1_1 + 0.000107405821691554*G0_2_2_1_2 + 0.00015251062870113*G0_2_2_2_0 + 0.000107405821691554*G0_2_2_2_1 + 0.00119245833531568*G0_2_2_2_2;
    A[113] = A[97] + 0.00205226871893573*G0_0_0_0_0 + 0.000121219168838237*G0_0_0_0_1 + 0.000174781127162109*G0_0_0_0_2 + 0.000121219168838237*G0_0_0_1_0 + 2.25524035047893e-06*G0_0_0_1_1 + 1.07123916647744e-05*G0_0_0_1_2 + 0.000174781127162109*G0_0_0_2_0 + 1.07123916647744e-05*G0_0_0_2_1 + 0.000121219168838237*G0_0_1_0_0 + 2.25524035047892e-06*G0_0_1_0_1 + 1.07123916647744e-05*G0_0_1_0_2 + 2.25524035047892e-06*G0_0_1_1_0 - 8.17524627048567e-06*G0_0_1_1_1 + 1.07123916647744e-05*G0_0_1_2_0 - 1.07123916647744e-05*G0_0_1_2_2 + 0.000174781127162109*G0_0_2_0_0 + 1.07123916647744e-05*G0_0_2_0_1 + 1.07123916647744e-05*G0_0_2_1_0 - 1.07123916647744e-05*G0_0_2_1_2 - 1.07123916647744e-05*G0_0_2_2_1 - 0.000174781127162108*G0_0_2_2_2 + 0.000121219168838237*G0_1_0_0_0 + 2.25524035047892e-06*G0_1_0_0_1 + 1.07123916647744e-05*G0_1_0_0_2 + 2.25524035047892e-06*G0_1_0_1_0 - 8.17524627048567e-06*G0_1_0_1_1 + 1.07123916647744e-05*G0_1_0_2_0 - 1.07123916647744e-05*G0_1_0_2_2 + 2.25524035047893e-06*G0_1_1_0_0 - 8.17524627048567e-06*G0_1_1_0_1 - 8.17524627048567e-06*G0_1_1_1_0 + 8.1752462704857e-06*G0_1_1_1_2 + 8.1752462704857e-06*G0_1_1_2_1 - 2.25524035047884e-06*G0_1_1_2_2 + 1.07123916647744e-05*G0_1_2_0_0 - 1.07123916647744e-05*G0_1_2_0_2 + 8.1752462704857e-06*G0_1_2_1_1 - 2.25524035047884e-06*G0_1_2_1_2 - 1.07123916647744e-05*G0_1_2_2_0 - 2.25524035047884e-06*G0_1_2_2_1 - 0.000121219168838237*G0_1_2_2_2 + 0.000174781127162109*G0_2_0_0_0 + 1.07123916647744e-05*G0_2_0_0_1 + 1.07123916647744e-05*G0_2_0_1_0 - 1.07123916647744e-05*G0_2_0_1_2 - 1.07123916647744e-05*G0_2_0_2_1 - 0.000174781127162108*G0_2_0_2_2 + 1.07123916647744e-05*G0_2_1_0_0 - 1.07123916647744e-05*G0_2_1_0_2 + 8.1752462704857e-06*G0_2_1_1_1 - 2.25524035047884e-06*G0_2_1_1_2 - 1.07123916647744e-05*G0_2_1_2_0 - 2.25524035047884e-06*G0_2_1_2_1 - 0.000121219168838237*G0_2_1_2_2 - 1.07123916647744e-05*G0_2_2_0_1 - 0.000174781127162108*G0_2_2_0_2 - 1.07123916647744e-05*G0_2_2_1_0 - 2.25524035047884e-06*G0_2_2_1_1 - 0.000121219168838237*G0_2_2_1_2 - 0.000174781127162108*G0_2_2_2_0 - 0.000121219168838237*G0_2_2_2_1 - 0.00205226871893573*G0_2_2_2_2;
    A[142] = -A[99] + 0.000924178701956636*G0_0_0_0_0 + 4.27555983111614e-05*G0_0_0_0_1 + 0.000200622422844679*G0_0_0_0_2 + 4.27555983111614e-05*G0_0_0_1_0 - 1.9733353066688e-06*G0_0_0_1_1 + 1.71022393244645e-05*G0_0_0_1_2 + 0.000200622422844679*G0_0_0_2_0 + 1.71022393244645e-05*G0_0_0_2_1 + 5.32800532800624e-05*G0_0_0_2_2 + 4.27555983111614e-05*G0_0_1_0_0 - 1.97333530666881e-06*G0_0_1_0_1 + 1.71022393244645e-05*G0_0_1_0_2 - 1.97333530666881e-06*G0_0_1_1_0 + 1.6256524193035e-05*G0_0_1_1_1 + 6.43683183365834e-06*G0_0_1_1_2 + 1.71022393244645e-05*G0_0_1_2_0 + 6.43683183365834e-06*G0_0_1_2_1 + 4.74540157079924e-06*G0_0_1_2_2 + 0.000200622422844679*G0_0_2_0_0 + 1.71022393244645e-05*G0_0_2_0_1 + 5.32800532800624e-05*G0_0_2_0_2 + 1.71022393244645e-05*G0_0_2_1_0 + 6.43683183365834e-06*G0_0_2_1_1 + 4.74540157079924e-06*G0_0_2_1_2 + 5.32800532800624e-05*G0_0_2_2_0 + 4.74540157079924e-06*G0_0_2_2_1 + 6.10794261588031e-06*G0_0_2_2_2 + 4.27555983111614e-05*G0_1_0_0_0 - 1.97333530666881e-06*G0_1_0_0_1 + 1.71022393244645e-05*G0_1_0_0_2 - 1.97333530666881e-06*G0_1_0_1_0 + 1.6256524193035e-05*G0_1_0_1_1 + 6.43683183365834e-06*G0_1_0_1_2 + 1.71022393244645e-05*G0_1_0_2_0 + 6.43683183365834e-06*G0_1_0_2_1 + 4.74540157079924e-06*G0_1_0_2_2 - 1.9733353066688e-06*G0_1_1_0_0 + 1.6256524193035e-05*G0_1_1_0_1 + 6.43683183365834e-06*G0_1_1_0_2 + 1.6256524193035e-05*G0_1_1_1_0 + 0.000111352492304892*G0_1_1_1_1 + 2.76266942933658e-05*G0_1_1_1_2 + 6.43683183365834e-06*G0_1_1_2_0 + 2.76266942933658e-05*G0_1_1_2_1 + 8.03429374858089e-06*G0_1_1_2_2 + 1.71022393244645e-05*G0_1_2_0_0 + 6.43683183365834e-06*G0_1_2_0_1 + 4.74540157079924e-06*G0_1_2_0_2 + 6.43683183365834e-06*G0_1_2_1_0 + 2.76266942933658e-05*G0_1_2_1_1 + 8.03429374858089e-06*G0_1_2_1_2 + 4.74540157079924e-06*G0_1_2_2_0 + 8.03429374858089e-06*G0_1_2_2_1 - 6.20191096381665e-06*G0_1_2_2_2 + 0.000200622422844679*G0_2_0_0_0 + 1.71022393244645e-05*G0_2_0_0_1 + 5.32800532800624e-05*G0_2_0_0_2 + 1.71022393244645e-05*G0_2_0_1_0 + 6.43683183365834e-06*G0_2_0_1_1 + 4.74540157079924e-06*G0_2_0_1_2 + 5.32800532800624e-05*G0_2_0_2_0 + 4.74540157079924e-06*G0_2_0_2_1 + 6.10794261588031e-06*G0_2_0_2_2 + 1.71022393244645e-05*G0_2_1_0_0 + 6.43683183365834e-06*G0_2_1_0_1 + 4.74540157079924e-06*G0_2_1_0_2 + 6.43683183365834e-06*G0_2_1_1_0 + 2.76266942933658e-05*G0_2_1_1_1 + 8.03429374858089e-06*G0_2_1_1_2 + 4.74540157079924e-06*G0_2_1_2_0 + 8.03429374858089e-06*G0_2_1_2_1 - 6.20191096381665e-06*G0_2_1_2_2 + 5.32800532800624e-05*G0_2_2_0_0 + 4.74540157079924e-06*G0_2_2_0_1 + 6.10794261588031e-06*G0_2_2_0_2 + 4.74540157079924e-06*G0_2_2_1_0 + 8.03429374858089e-06*G0_2_2_1_1 - 6.20191096381664e-06*G0_2_2_1_2 + 6.10794261588031e-06*G0_2_2_2_0 - 6.20191096381665e-06*G0_2_2_2_1 - 5.77905339810194e-05*G0_2_2_2_2;
    A[176] = -A[142] - 0.00212979260598344*G0_0_0_0_0 - 0.000220355775911368*G0_0_0_0_1 - 0.000179009702819256*G0_0_0_0_2 - 0.000220355775911368*G0_0_0_1_0 + 0.000305866972533691*G0_0_0_1_1 - 6.5777843555632e-06*G0_0_0_1_2 - 0.000179009702819256*G0_0_0_2_0 - 6.57778435556321e-06*G0_0_0_2_1 - 6.48381600762644e-06*G0_0_0_2_2 - 0.000220355775911368*G0_0_1_0_0 + 0.00030586697253369*G0_0_1_0_1 - 6.57778435556321e-06*G0_0_1_0_2 + 0.00030586697253369*G0_0_1_1_0 + 0.00143179571751024*G0_0_1_1_1 + 8.66858009715297e-05*G0_0_1_1_2 - 6.57778435556321e-06*G0_0_1_2_0 + 8.66858009715297e-05*G0_0_1_2_1 + 4.74540157079922e-06*G0_0_1_2_2 - 0.000179009702819256*G0_0_2_0_0 - 6.57778435556321e-06*G0_0_2_0_1 - 6.48381600762643e-06*G0_0_2_0_2 - 6.57778435556321e-06*G0_0_2_1_0 + 8.66858009715297e-05*G0_0_2_1_1 + 4.74540157079922e-06*G0_0_2_1_2 - 6.48381600762643e-06*G0_0_2_2_0 + 4.74540157079922e-06*G0_0_2_2_1 - 6.48381600762641e-06*G0_0_2_2_2 - 0.000220355775911368*G0_1_0_0_0 + 0.00030586697253369*G0_1_0_0_1 - 6.57778435556321e-06*G0_1_0_0_2 + 0.00030586697253369*G0_1_0_1_0 + 0.00143179571751024*G0_1_0_1_1 + 8.66858009715297e-05*G0_1_0_1_2 - 6.57778435556321e-06*G0_1_0_2_0 + 8.66858009715297e-05*G0_1_0_2_1 + 4.74540157079922e-06*G0_1_0_2_2 + 0.00030586697253369*G0_1_1_0_0 + 0.00143179571751024*G0_1_1_0_1 + 8.66858009715297e-05*G0_1_1_0_2 + 0.00143179571751024*G0_1_1_1_0 + 0.00739765819131023*G0_1_1_1_1 + 0.000471533169945947*G0_1_1_1_2 + 8.66858009715297e-05*G0_1_1_2_0 + 0.000471533169945947*G0_1_1_2_1 + 4.43060760521152e-05*G0_1_1_2_2 - 6.57778435556321e-06*G0_1_2_0_0 + 8.66858009715297e-05*G0_1_2_0_1 + 4.74540157079922e-06*G0_1_2_0_2 + 8.66858009715297e-05*G0_1_2_1_0 + 0.000471533169945947*G0_1_2_1_1 + 4.43060760521152e-05*G0_1_2_1_2 + 4.74540157079922e-06*G0_1_2_2_0 + 4.43060760521152e-05*G0_1_2_2_1 - 2.66870108139993e-05*G0_1_2_2_2 - 0.000179009702819256*G0_2_0_0_0 - 6.57778435556321e-06*G0_2_0_0_1 - 6.48381600762643e-06*G0_2_0_0_2 - 6.57778435556321e-06*G0_2_0_1_0 + 8.66858009715297e-05*G0_2_0_1_1 + 4.74540157079922e-06*G0_2_0_1_2 - 6.48381600762643e-06*G0_2_0_2_0 + 4.74540157079922e-06*G0_2_0_2_1 - 6.48381600762641e-06*G0_2_0_2_2 - 6.5777843555632e-06*G0_2_1_0_0 + 8.66858009715297e-05*G0_2_1_0_1 + 4.74540157079922e-06*G0_2_1_0_2 + 8.66858009715297e-05*G0_2_1_1_0 + 0.000471533169945947*G0_2_1_1_1 + 4.43060760521152e-05*G0_2_1_1_2 + 4.74540157079922e-06*G0_2_1_2_0 + 4.43060760521152e-05*G0_2_1_2_1 - 2.66870108139993e-05*G0_2_1_2_2 - 6.48381600762642e-06*G0_2_2_0_0 + 4.74540157079922e-06*G0_2_2_0_1 - 6.48381600762641e-06*G0_2_2_0_2 + 4.74540157079922e-06*G0_2_2_1_0 + 4.43060760521152e-05*G0_2_2_1_1 - 2.66870108139993e-05*G0_2_2_1_2 - 6.4838160076264e-06*G0_2_2_2_0 - 2.66870108139993e-05*G0_2_2_2_1 - 0.000122064883969666*G0_2_2_2_2;
    A[175] = -A[176] - 0.000600457743314987*G0_0_0_0_0 + 1.36254104508097e-05*G0_0_0_0_1 - 5.77905339810199e-05*G0_0_0_0_2 + 1.36254104508097e-05*G0_0_0_1_0 + 0.000323626990293711*G0_0_0_1_1 + 6.10794261588012e-06*G0_0_0_1_2 - 5.77905339810199e-05*G0_0_0_2_0 + 6.10794261588012e-06*G0_0_0_2_1 - 6.20191096381675e-06*G0_0_0_2_2 + 1.36254104508097e-05*G0_0_1_0_0 + 0.000323626990293711*G0_0_1_0_1 + 6.10794261588012e-06*G0_0_1_0_2 + 0.000323626990293711*G0_0_1_1_0 + 0.00107546774213459*G0_0_1_1_1 + 5.32800532800621e-05*G0_0_1_1_2 + 6.10794261588012e-06*G0_0_1_2_0 + 5.32800532800621e-05*G0_0_1_2_1 + 4.74540157079919e-06*G0_0_1_2_2 - 5.77905339810199e-05*G0_0_2_0_0 + 6.10794261588012e-06*G0_0_2_0_1 - 6.20191096381676e-06*G0_0_2_0_2 + 6.10794261588012e-06*G0_0_2_1_0 + 5.32800532800621e-05*G0_0_2_1_1 + 4.74540157079918e-06*G0_0_2_1_2 - 6.20191096381676e-06*G0_0_2_2_0 + 4.74540157079919e-06*G0_0_2_2_1 + 8.03429374858085e-06*G0_0_2_2_2 + 1.36254104508097e-05*G0_1_0_0_0 + 0.000323626990293711*G0_1_0_0_1 + 6.10794261588012e-06*G0_1_0_0_2 + 0.000323626990293711*G0_1_0_1_0 + 0.00107546774213459*G0_1_0_1_1 + 5.32800532800621e-05*G0_1_0_1_2 + 6.10794261588012e-06*G0_1_0_2_0 + 5.32800532800622e-05*G0_1_0_2_1 + 4.74540157079919e-06*G0_1_0_2_2 + 0.000323626990293711*G0_1_1_0_0 + 0.00107546774213459*G0_1_1_0_1 + 5.32800532800621e-05*G0_1_1_0_2 + 0.00107546774213459*G0_1_1_1_0 + 0.0040979596535159*G0_1_1_1_1 + 0.000200622422844678*G0_1_1_1_2 + 5.32800532800622e-05*G0_1_1_2_0 + 0.000200622422844678*G0_1_1_2_1 + 1.71022393244643e-05*G0_1_1_2_2 + 6.10794261588012e-06*G0_1_2_0_0 + 5.32800532800621e-05*G0_1_2_0_1 + 4.74540157079919e-06*G0_1_2_0_2 + 5.32800532800621e-05*G0_1_2_1_0 + 0.000200622422844678*G0_1_2_1_1 + 1.71022393244643e-05*G0_1_2_1_2 + 4.74540157079919e-06*G0_1_2_2_0 + 1.71022393244643e-05*G0_1_2_2_1 + 6.4368318336583e-06*G0_1_2_2_2 - 5.77905339810199e-05*G0_2_0_0_0 + 6.10794261588012e-06*G0_2_0_0_1 - 6.20191096381676e-06*G0_2_0_0_2 + 6.10794261588012e-06*G0_2_0_1_0 + 5.32800532800622e-05*G0_2_0_1_1 + 4.74540157079918e-06*G0_2_0_1_2 - 6.20191096381675e-06*G0_2_0_2_0 + 4.74540157079919e-06*G0_2_0_2_1 + 8.03429374858085e-06*G0_2_0_2_2 + 6.10794261588013e-06*G0_2_1_0_0 + 5.32800532800622e-05*G0_2_1_0_1 + 4.74540157079919e-06*G0_2_1_0_2 + 5.32800532800622e-05*G0_2_1_1_0 + 0.000200622422844678*G0_2_1_1_1 + 1.71022393244643e-05*G0_2_1_1_2 + 4.74540157079919e-06*G0_2_1_2_0 + 1.71022393244643e-05*G0_2_1_2_1 + 6.4368318336583e-06*G0_2_1_2_2 - 6.20191096381675e-06*G0_2_2_0_0 + 4.74540157079919e-06*G0_2_2_0_1 + 8.03429374858085e-06*G0_2_2_0_2 + 4.74540157079919e-06*G0_2_2_1_0 + 1.71022393244643e-05*G0_2_2_1_1 + 6.4368318336583e-06*G0_2_2_1_2 + 8.03429374858085e-06*G0_2_2_2_0 + 6.4368318336583e-06*G0_2_2_2_1 + 2.76266942933657e-05*G0_2_2_2_2;
    A[72] = A[175] + 0.00119245833531568*G0_0_0_0_0 + 0.000152510628701131*G0_0_0_0_1 + 0.000107405821691554*G0_0_0_0_2 + 0.000152510628701131*G0_0_0_1_0 + 2.93181245562245e-05*G0_0_0_1_1 + 5.63810087619709e-06*G0_0_0_1_2 + 0.000107405821691554*G0_0_0_2_0 + 5.63810087619709e-06*G0_0_0_2_1 - 8.4571513142956e-06*G0_0_0_2_2 + 0.000152510628701131*G0_0_1_0_0 + 2.93181245562245e-05*G0_0_1_0_1 + 5.63810087619709e-06*G0_0_1_0_2 + 2.93181245562245e-05*G0_0_1_1_0 + 0.000334057476914675*G0_0_1_1_1 - 8.17524627048579e-06*G0_0_1_1_2 + 5.63810087619709e-06*G0_0_1_2_0 - 8.17524627048579e-06*G0_0_1_2_1 - 3.98895636990942e-05*G0_0_1_2_2 + 0.000107405821691554*G0_0_2_0_0 + 5.63810087619709e-06*G0_0_2_0_1 - 8.45715131429559e-06*G0_0_2_0_2 + 5.63810087619709e-06*G0_0_2_1_0 - 8.17524627048579e-06*G0_0_2_1_1 - 3.98895636990942e-05*G0_0_2_1_2 - 8.4571513142956e-06*G0_0_2_2_0 - 3.98895636990942e-05*G0_0_2_2_1 - 2.66400266400311e-05*G0_0_2_2_2 + 0.000152510628701131*G0_1_0_0_0 + 2.93181245562245e-05*G0_1_0_0_1 + 5.63810087619709e-06*G0_1_0_0_2 + 2.93181245562245e-05*G0_1_0_1_0 + 0.000334057476914675*G0_1_0_1_1 - 8.17524627048579e-06*G0_1_0_1_2 + 5.63810087619709e-06*G0_1_0_2_0 - 8.1752462704858e-06*G0_1_0_2_1 - 3.98895636990942e-05*G0_1_0_2_2 + 2.93181245562245e-05*G0_1_1_0_0 + 0.000334057476914675*G0_1_1_0_1 - 8.17524627048579e-06*G0_1_1_0_2 + 0.000334057476914675*G0_1_1_1_0 + 0.00341387008053732*G0_1_1_1_1 + 4.08762313524283e-05*G0_1_1_1_2 - 8.17524627048579e-06*G0_1_1_2_0 + 4.08762313524283e-05*G0_1_1_2_1 - 0.000226087845135502*G0_1_1_2_2 + 5.63810087619709e-06*G0_1_2_0_0 - 8.1752462704858e-06*G0_1_2_0_1 - 3.98895636990942e-05*G0_1_2_0_2 - 8.1752462704858e-06*G0_1_2_1_0 + 4.08762313524283e-05*G0_1_2_1_1 - 0.000226087845135502*G0_1_2_1_2 - 3.98895636990942e-05*G0_1_2_2_0 - 0.000226087845135502*G0_1_2_2_1 - 0.000229329753139316*G0_1_2_2_2 + 0.000107405821691554*G0_2_0_0_0 + 5.63810087619709e-06*G0_2_0_0_1 - 8.45715131429558e-06*G0_2_0_0_2 + 5.63810087619709e-06*G0_2_0_1_0 - 8.17524627048579e-06*G0_2_0_1_1 - 3.98895636990942e-05*G0_2_0_1_2 - 8.4571513142956e-06*G0_2_0_2_0 - 3.98895636990942e-05*G0_2_0_2_1 - 2.66400266400311e-05*G0_2_0_2_2 + 5.63810087619709e-06*G0_2_1_0_0 - 8.17524627048579e-06*G0_2_1_0_1 - 3.98895636990942e-05*G0_2_1_0_2 - 8.1752462704858e-06*G0_2_1_1_0 + 4.08762313524283e-05*G0_2_1_1_1 - 0.000226087845135502*G0_2_1_1_2 - 3.98895636990942e-05*G0_2_1_2_0 - 0.000226087845135502*G0_2_1_2_1 - 0.000229329753139316*G0_2_1_2_2 - 8.4571513142956e-06*G0_2_2_0_0 - 3.98895636990942e-05*G0_2_2_0_1 - 2.66400266400311e-05*G0_2_2_0_2 - 3.98895636990942e-05*G0_2_2_1_0 - 0.000226087845135502*G0_2_2_1_1 - 0.000229329753139316*G0_2_2_1_2 - 2.66400266400311e-05*G0_2_2_2_0 - 0.000229329753139316*G0_2_2_2_1 + 0.00013362299076587*G0_2_2_2_2;
    A[159] = A[175] - 0.00205226871893573*G0_0_0_0_0 - 0.000174781127162109*G0_0_0_0_1 - 0.000121219168838237*G0_0_0_0_2 - 0.000174781127162109*G0_0_0_1_0 - 1.07123916647744e-05*G0_0_0_1_2 - 0.000121219168838237*G0_0_0_2_0 - 1.07123916647744e-05*G0_0_0_2_1 - 2.25524035047884e-06*G0_0_0_2_2 - 0.000174781127162109*G0_0_1_0_0 - 1.07123916647744e-05*G0_0_1_0_2 + 0.000174781127162108*G0_0_1_1_1 + 1.07123916647743e-05*G0_0_1_1_2 - 1.07123916647744e-05*G0_0_1_2_0 + 1.07123916647743e-05*G0_0_1_2_1 - 0.000121219168838237*G0_0_2_0_0 - 1.07123916647745e-05*G0_0_2_0_1 - 2.25524035047884e-06*G0_0_2_0_2 - 1.07123916647744e-05*G0_0_2_1_0 + 1.07123916647743e-05*G0_0_2_1_1 - 2.25524035047883e-06*G0_0_2_2_0 + 8.17524627048571e-06*G0_0_2_2_2 - 0.000174781127162109*G0_1_0_0_0 - 1.07123916647744e-05*G0_1_0_0_2 + 0.000174781127162108*G0_1_0_1_1 + 1.07123916647743e-05*G0_1_0_1_2 - 1.07123916647744e-05*G0_1_0_2_0 + 1.07123916647743e-05*G0_1_0_2_1 + 0.000174781127162108*G0_1_1_0_1 + 1.07123916647743e-05*G0_1_1_0_2 + 0.000174781127162108*G0_1_1_1_0 + 0.00205226871893573*G0_1_1_1_1 + 0.000121219168838237*G0_1_1_1_2 + 1.07123916647743e-05*G0_1_1_2_0 + 0.000121219168838237*G0_1_1_2_1 + 2.2552403504788e-06*G0_1_1_2_2 - 1.07123916647744e-05*G0_1_2_0_0 + 1.07123916647743e-05*G0_1_2_0_1 + 1.07123916647743e-05*G0_1_2_1_0 + 0.000121219168838237*G0_1_2_1_1 + 2.25524035047881e-06*G0_1_2_1_2 + 2.2552403504788e-06*G0_1_2_2_1 - 8.17524627048574e-06*G0_1_2_2_2 - 0.000121219168838237*G0_2_0_0_0 - 1.07123916647745e-05*G0_2_0_0_1 - 2.25524035047884e-06*G0_2_0_0_2 - 1.07123916647744e-05*G0_2_0_1_0 + 1.07123916647743e-05*G0_2_0_1_1 - 2.25524035047882e-06*G0_2_0_2_0 + 8.17524627048571e-06*G0_2_0_2_2 - 1.07123916647745e-05*G0_2_1_0_0 + 1.07123916647743e-05*G0_2_1_0_1 + 1.07123916647743e-05*G0_2_1_1_0 + 0.000121219168838237*G0_2_1_1_1 + 2.2552403504788e-06*G0_2_1_1_2 + 2.2552403504788e-06*G0_2_1_2_1 - 8.17524627048574e-06*G0_2_1_2_2 - 2.25524035047884e-06*G0_2_2_0_0 + 8.17524627048571e-06*G0_2_2_0_2 + 2.25524035047881e-06*G0_2_2_1_1 - 8.17524627048574e-06*G0_2_2_1_2 + 8.17524627048571e-06*G0_2_2_2_0 - 8.17524627048574e-06*G0_2_2_2_1;
    A[202] = A[159] + 0.00341387008053732*G0_0_0_0_0 + 0.000334057476914676*G0_0_0_0_1 + 4.08762313524289e-05*G0_0_0_0_2 + 0.000334057476914676*G0_0_0_1_0 + 2.9318124556225e-05*G0_0_0_1_1 - 8.17524627048563e-06*G0_0_0_1_2 + 4.08762313524289e-05*G0_0_0_2_0 - 8.17524627048562e-06*G0_0_0_2_1 - 0.000226087845135502*G0_0_0_2_2 + 0.000334057476914676*G0_0_1_0_0 + 2.9318124556225e-05*G0_0_1_0_1 - 8.17524627048562e-06*G0_0_1_0_2 + 2.9318124556225e-05*G0_0_1_1_0 + 0.000152510628701131*G0_0_1_1_1 + 5.63810087619733e-06*G0_0_1_1_2 - 8.17524627048562e-06*G0_0_1_2_0 + 5.63810087619733e-06*G0_0_1_2_1 - 3.98895636990941e-05*G0_0_1_2_2 + 4.08762313524289e-05*G0_0_2_0_0 - 8.17524627048561e-06*G0_0_2_0_1 - 0.000226087845135502*G0_0_2_0_2 - 8.17524627048562e-06*G0_0_2_1_0 + 5.63810087619733e-06*G0_0_2_1_1 - 3.98895636990941e-05*G0_0_2_1_2 - 0.000226087845135502*G0_0_2_2_0 - 3.98895636990941e-05*G0_0_2_2_1 - 0.000229329753139315*G0_0_2_2_2 + 0.000334057476914676*G0_1_0_0_0 + 2.9318124556225e-05*G0_1_0_0_1 - 8.17524627048561e-06*G0_1_0_0_2 + 2.9318124556225e-05*G0_1_0_1_0 + 0.000152510628701131*G0_1_0_1_1 + 5.63810087619734e-06*G0_1_0_1_2 - 8.17524627048561e-06*G0_1_0_2_0 + 5.63810087619734e-06*G0_1_0_2_1 - 3.98895636990941e-05*G0_1_0_2_2 + 2.9318124556225e-05*G0_1_1_0_0 + 0.000152510628701131*G0_1_1_0_1 + 5.63810087619733e-06*G0_1_1_0_2 + 0.000152510628701131*G0_1_1_1_0 + 0.00119245833531568*G0_1_1_1_1 + 0.000107405821691555*G0_1_1_1_2 + 5.63810087619733e-06*G0_1_1_2_0 + 0.000107405821691555*G0_1_1_2_1 - 8.45715131429522e-06*G0_1_1_2_2 - 8.17524627048562e-06*G0_1_2_0_0 + 5.63810087619733e-06*G0_1_2_0_1 - 3.98895636990941e-05*G0_1_2_0_2 + 5.63810087619733e-06*G0_1_2_1_0 + 0.000107405821691555*G0_1_2_1_1 - 8.45715131429522e-06*G0_1_2_1_2 - 3.98895636990941e-05*G0_1_2_2_0 - 8.45715131429522e-06*G0_1_2_2_1 - 2.66400266400311e-05*G0_1_2_2_2 + 4.08762313524289e-05*G0_2_0_0_0 - 8.17524627048561e-06*G0_2_0_0_1 - 0.000226087845135502*G0_2_0_0_2 - 8.17524627048562e-06*G0_2_0_1_0 + 5.63810087619734e-06*G0_2_0_1_1 - 3.98895636990941e-05*G0_2_0_1_2 - 0.000226087845135502*G0_2_0_2_0 - 3.98895636990941e-05*G0_2_0_2_1 - 0.000229329753139315*G0_2_0_2_2 - 8.17524627048561e-06*G0_2_1_0_0 + 5.63810087619733e-06*G0_2_1_0_1 - 3.98895636990941e-05*G0_2_1_0_2 + 5.63810087619733e-06*G0_2_1_1_0 + 0.000107405821691555*G0_2_1_1_1 - 8.45715131429522e-06*G0_2_1_1_2 - 3.98895636990941e-05*G0_2_1_2_0 - 8.45715131429523e-06*G0_2_1_2_1 - 2.66400266400311e-05*G0_2_1_2_2 - 0.000226087845135502*G0_2_2_0_0 - 3.98895636990941e-05*G0_2_2_0_1 - 0.000229329753139315*G0_2_2_0_2 - 3.98895636990941e-05*G0_2_2_1_0 - 8.45715131429523e-06*G0_2_2_1_1 - 2.66400266400311e-05*G0_2_2_1_2 - 0.000229329753139315*G0_2_2_2_0 - 2.66400266400311e-05*G0_2_2_2_1 + 0.000133622990765869*G0_2_2_2_2;
    A[144] = -A[159] + 0.0040979596535159*G0_0_0_0_0 + 0.00107546774213459*G0_0_0_0_1 + 0.000200622422844678*G0_0_0_0_2 + 0.00107546774213459*G0_0_0_1_0 + 0.000323626990293712*G0_0_0_1_1 + 5.32800532800622e-05*G0_0_0_1_2 + 0.000200622422844678*G0_0_0_2_0 + 5.32800532800622e-05*G0_0_0_2_1 + 1.71022393244644e-05*G0_0_0_2_2 + 0.00107546774213459*G0_0_1_0_0 + 0.000323626990293712*G0_0_1_0_1 + 5.32800532800622e-05*G0_0_1_0_2 + 0.000323626990293712*G0_0_1_1_0 + 1.36254104508096e-05*G0_0_1_1_1 + 6.10794261588015e-06*G0_0_1_1_2 + 5.32800532800622e-05*G0_0_1_2_0 + 6.10794261588015e-06*G0_0_1_2_1 + 4.74540157079917e-06*G0_0_1_2_2 + 0.000200622422844678*G0_0_2_0_0 + 5.32800532800622e-05*G0_0_2_0_1 + 1.71022393244644e-05*G0_0_2_0_2 + 5.32800532800622e-05*G0_0_2_1_0 + 6.10794261588015e-06*G0_0_2_1_1 + 4.74540157079918e-06*G0_0_2_1_2 + 1.71022393244644e-05*G0_0_2_2_0 + 4.74540157079917e-06*G0_0_2_2_1 + 6.43683183365829e-06*G0_0_2_2_2 + 0.00107546774213459*G0_1_0_0_0 + 0.000323626990293712*G0_1_0_0_1 + 5.32800532800622e-05*G0_1_0_0_2 + 0.000323626990293712*G0_1_0_1_0 + 1.36254104508096e-05*G0_1_0_1_1 + 6.10794261588015e-06*G0_1_0_1_2 + 5.32800532800622e-05*G0_1_0_2_0 + 6.10794261588015e-06*G0_1_0_2_1 + 4.74540157079917e-06*G0_1_0_2_2 + 0.000323626990293711*G0_1_1_0_0 + 1.36254104508096e-05*G0_1_1_0_1 + 6.10794261588015e-06*G0_1_1_0_2 + 1.36254104508096e-05*G0_1_1_1_0 - 0.000600457743314987*G0_1_1_1_1 - 5.779053398102e-05*G0_1_1_1_2 + 6.10794261588015e-06*G0_1_1_2_0 - 5.779053398102e-05*G0_1_1_2_1 - 6.20191096381677e-06*G0_1_1_2_2 + 5.32800532800622e-05*G0_1_2_0_0 + 6.10794261588015e-06*G0_1_2_0_1 + 4.74540157079917e-06*G0_1_2_0_2 + 6.10794261588015e-06*G0_1_2_1_0 - 5.779053398102e-05*G0_1_2_1_1 - 6.20191096381675e-06*G0_1_2_1_2 + 4.74540157079917e-06*G0_1_2_2_0 - 6.20191096381676e-06*G0_1_2_2_1 + 8.0342937485808e-06*G0_1_2_2_2 + 0.000200622422844678*G0_2_0_0_0 + 5.32800532800622e-05*G0_2_0_0_1 + 1.71022393244644e-05*G0_2_0_0_2 + 5.32800532800622e-05*G0_2_0_1_0 + 6.10794261588015e-06*G0_2_0_1_1 + 4.74540157079918e-06*G0_2_0_1_2 + 1.71022393244644e-05*G0_2_0_2_0 + 4.74540157079918e-06*G0_2_0_2_1 + 6.43683183365829e-06*G0_2_0_2_2 + 5.32800532800622e-05*G0_2_1_0_0 + 6.10794261588015e-06*G0_2_1_0_1 + 4.74540157079917e-06*G0_2_1_0_2 + 6.10794261588015e-06*G0_2_1_1_0 - 5.779053398102e-05*G0_2_1_1_1 - 6.20191096381676e-06*G0_2_1_1_2 + 4.74540157079917e-06*G0_2_1_2_0 - 6.20191096381676e-06*G0_2_1_2_1 + 8.0342937485808e-06*G0_2_1_2_2 + 1.71022393244644e-05*G0_2_2_0_0 + 4.74540157079917e-06*G0_2_2_0_1 + 6.43683183365829e-06*G0_2_2_0_2 + 4.74540157079917e-06*G0_2_2_1_0 - 6.20191096381675e-06*G0_2_2_1_1 + 8.03429374858081e-06*G0_2_2_1_2 + 6.43683183365829e-06*G0_2_2_2_0 + 8.0342937485808e-06*G0_2_2_2_1 + 2.76266942933656e-05*G0_2_2_2_2;
    A[169] = A[175] + 0.0012474298188586*G0_0_0_0_0 + 0.000181546848213545*G0_0_0_0_1 + 0.000149691578263032*G0_0_0_0_2 + 0.000181546848213545*G0_0_0_1_0 - 1.77600177600208e-05*G0_0_0_1_1 + 2.26933560266932e-05*G0_0_0_1_2 + 0.000149691578263032*G0_0_0_2_0 + 2.26933560266932e-05*G0_0_0_2_1 + 2.4948596377172e-05*G0_0_0_2_2 + 0.000181546848213545*G0_0_1_0_0 - 1.77600177600208e-05*G0_0_1_0_1 + 2.26933560266932e-05*G0_0_1_0_2 - 1.77600177600208e-05*G0_0_1_1_0 - 5.92000592000689e-05*G0_0_1_1_1 - 1.97333530666894e-06*G0_0_1_1_2 + 2.26933560266932e-05*G0_0_1_2_0 - 1.97333530666894e-06*G0_0_1_2_1 + 0.000149691578263032*G0_0_2_0_0 + 2.26933560266932e-05*G0_0_2_0_1 + 2.4948596377172e-05*G0_0_2_0_2 + 2.26933560266932e-05*G0_0_2_1_0 - 1.97333530666894e-06*G0_0_2_1_1 + 2.4948596377172e-05*G0_0_2_2_0 - 2.4948596377172e-05*G0_0_2_2_2 + 0.000181546848213545*G0_1_0_0_0 - 1.77600177600207e-05*G0_1_0_0_1 + 2.26933560266932e-05*G0_1_0_0_2 - 1.77600177600208e-05*G0_1_0_1_0 - 5.92000592000689e-05*G0_1_0_1_1 - 1.97333530666894e-06*G0_1_0_1_2 + 2.26933560266932e-05*G0_1_0_2_0 - 1.97333530666894e-06*G0_1_0_2_1 - 1.77600177600207e-05*G0_1_1_0_0 - 5.92000592000689e-05*G0_1_1_0_1 - 1.97333530666894e-06*G0_1_1_0_2 - 5.92000592000689e-05*G0_1_1_1_0 + 0.000522933856267281*G0_1_1_1_1 - 1.97333530666894e-06*G0_1_1_2_0 + 1.9733353066691e-06*G0_1_1_2_2 + 2.26933560266932e-05*G0_1_2_0_0 - 1.97333530666894e-06*G0_1_2_0_1 - 1.97333530666893e-06*G0_1_2_1_0 + 1.9733353066691e-06*G0_1_2_1_2 + 1.9733353066691e-06*G0_1_2_2_1 - 2.26933560266931e-05*G0_1_2_2_2 + 0.000149691578263032*G0_2_0_0_0 + 2.26933560266932e-05*G0_2_0_0_1 + 2.4948596377172e-05*G0_2_0_0_2 + 2.26933560266932e-05*G0_2_0_1_0 - 1.97333530666894e-06*G0_2_0_1_1 + 2.4948596377172e-05*G0_2_0_2_0 - 2.4948596377172e-05*G0_2_0_2_2 + 2.26933560266932e-05*G0_2_1_0_0 - 1.97333530666894e-06*G0_2_1_0_1 - 1.97333530666895e-06*G0_2_1_1_0 + 1.97333530666909e-06*G0_2_1_1_2 + 1.97333530666909e-06*G0_2_1_2_1 - 2.26933560266931e-05*G0_2_1_2_2 + 2.4948596377172e-05*G0_2_2_0_0 - 2.4948596377172e-05*G0_2_2_0_2 + 1.9733353066691e-06*G0_2_2_1_1 - 2.26933560266931e-05*G0_2_2_1_2 - 2.4948596377172e-05*G0_2_2_2_0 - 2.26933560266931e-05*G0_2_2_2_1 - 0.000149691578263032*G0_2_2_2_2;
    A[56] = -A[169] + 0.000111352492304892*G0_0_0_0_0 + 1.62565241930348e-05*G0_0_0_0_1 + 2.76266942933655e-05*G0_0_0_0_2 + 1.62565241930348e-05*G0_0_0_1_0 - 1.97333530666891e-06*G0_0_0_1_1 + 6.43683183365831e-06*G0_0_0_1_2 + 2.76266942933655e-05*G0_0_0_2_0 + 6.43683183365831e-06*G0_0_0_2_1 + 8.03429374858081e-06*G0_0_0_2_2 + 1.62565241930348e-05*G0_0_1_0_0 - 1.97333530666892e-06*G0_0_1_0_1 + 6.43683183365831e-06*G0_0_1_0_2 - 1.97333530666892e-06*G0_0_1_1_0 + 4.27555983111614e-05*G0_0_1_1_1 + 1.71022393244644e-05*G0_0_1_1_2 + 6.43683183365831e-06*G0_0_1_2_0 + 1.71022393244644e-05*G0_0_1_2_1 + 4.7454015707992e-06*G0_0_1_2_2 + 2.76266942933655e-05*G0_0_2_0_0 + 6.43683183365831e-06*G0_0_2_0_1 + 8.0342937485808e-06*G0_0_2_0_2 + 6.43683183365831e-06*G0_0_2_1_0 + 1.71022393244644e-05*G0_0_2_1_1 + 4.74540157079919e-06*G0_0_2_1_2 + 8.0342937485808e-06*G0_0_2_2_0 + 4.74540157079919e-06*G0_0_2_2_1 - 6.20191096381676e-06*G0_0_2_2_2 + 1.62565241930348e-05*G0_1_0_0_0 - 1.97333530666891e-06*G0_1_0_0_1 + 6.43683183365831e-06*G0_1_0_0_2 - 1.97333530666891e-06*G0_1_0_1_0 + 4.27555983111615e-05*G0_1_0_1_1 + 1.71022393244644e-05*G0_1_0_1_2 + 6.43683183365831e-06*G0_1_0_2_0 + 1.71022393244645e-05*G0_1_0_2_1 + 4.7454015707992e-06*G0_1_0_2_2 - 1.97333530666891e-06*G0_1_1_0_0 + 4.27555983111614e-05*G0_1_1_0_1 + 1.71022393244644e-05*G0_1_1_0_2 + 4.27555983111615e-05*G0_1_1_1_0 + 0.000924178701956641*G0_1_1_1_1 + 0.000200622422844679*G0_1_1_1_2 + 1.71022393244644e-05*G0_1_1_2_0 + 0.000200622422844679*G0_1_1_2_1 + 5.32800532800624e-05*G0_1_1_2_2 + 6.43683183365831e-06*G0_1_2_0_0 + 1.71022393244644e-05*G0_1_2_0_1 + 4.7454015707992e-06*G0_1_2_0_2 + 1.71022393244645e-05*G0_1_2_1_0 + 0.000200622422844679*G0_1_2_1_1 + 5.32800532800625e-05*G0_1_2_1_2 + 4.74540157079919e-06*G0_1_2_2_0 + 5.32800532800625e-05*G0_1_2_2_1 + 6.10794261588026e-06*G0_1_2_2_2 + 2.76266942933655e-05*G0_2_0_0_0 + 6.43683183365831e-06*G0_2_0_0_1 + 8.0342937485808e-06*G0_2_0_0_2 + 6.43683183365831e-06*G0_2_0_1_0 + 1.71022393244644e-05*G0_2_0_1_1 + 4.74540157079919e-06*G0_2_0_1_2 + 8.0342937485808e-06*G0_2_0_2_0 + 4.74540157079919e-06*G0_2_0_2_1 - 6.20191096381677e-06*G0_2_0_2_2 + 6.43683183365831e-06*G0_2_1_0_0 + 1.71022393244644e-05*G0_2_1_0_1 + 4.7454015707992e-06*G0_2_1_0_2 + 1.71022393244644e-05*G0_2_1_1_0 + 0.000200622422844679*G0_2_1_1_1 + 5.32800532800624e-05*G0_2_1_1_2 + 4.74540157079919e-06*G0_2_1_2_0 + 5.32800532800624e-05*G0_2_1_2_1 + 6.10794261588027e-06*G0_2_1_2_2 + 8.0342937485808e-06*G0_2_2_0_0 + 4.74540157079919e-06*G0_2_2_0_1 - 6.20191096381677e-06*G0_2_2_0_2 + 4.74540157079919e-06*G0_2_2_1_0 + 5.32800532800624e-05*G0_2_2_1_1 + 6.10794261588027e-06*G0_2_2_1_2 - 6.20191096381676e-06*G0_2_2_2_0 + 6.10794261588026e-06*G0_2_2_2_1 - 5.77905339810198e-05*G0_2_2_2_2;
    A[153] = -A[56] - 5.77905339810196e-05*G0_0_0_0_0 + 6.10794261588011e-06*G0_0_0_0_1 - 6.20191096381675e-06*G0_0_0_0_2 + 6.1079426158801e-06*G0_0_0_1_0 + 5.3280053280062e-05*G0_0_0_1_1 + 4.74540157079917e-06*G0_0_0_1_2 - 6.20191096381675e-06*G0_0_0_2_0 + 4.74540157079917e-06*G0_0_0_2_1 + 8.03429374858084e-06*G0_0_0_2_2 + 6.10794261588011e-06*G0_0_1_0_0 + 5.3280053280062e-05*G0_0_1_0_1 + 4.74540157079917e-06*G0_0_1_0_2 + 5.3280053280062e-05*G0_0_1_1_0 + 0.000200622422844678*G0_0_1_1_1 + 1.71022393244643e-05*G0_0_1_1_2 + 4.74540157079918e-06*G0_0_1_2_0 + 1.71022393244643e-05*G0_0_1_2_1 + 6.43683183365831e-06*G0_0_1_2_2 - 6.20191096381675e-06*G0_0_2_0_0 + 4.74540157079917e-06*G0_0_2_0_1 + 8.03429374858083e-06*G0_0_2_0_2 + 4.74540157079917e-06*G0_0_2_1_0 + 1.71022393244643e-05*G0_0_2_1_1 + 6.4368318336583e-06*G0_0_2_1_2 + 8.03429374858083e-06*G0_0_2_2_0 + 6.4368318336583e-06*G0_0_2_2_1 + 2.76266942933656e-05*G0_0_2_2_2 + 6.10794261588011e-06*G0_1_0_0_0 + 5.3280053280062e-05*G0_1_0_0_1 + 4.74540157079917e-06*G0_1_0_0_2 + 5.3280053280062e-05*G0_1_0_1_0 + 0.000200622422844678*G0_1_0_1_1 + 1.71022393244643e-05*G0_1_0_1_2 + 4.74540157079918e-06*G0_1_0_2_0 + 1.71022393244643e-05*G0_1_0_2_1 + 6.43683183365831e-06*G0_1_0_2_2 + 5.3280053280062e-05*G0_1_1_0_0 + 0.000200622422844678*G0_1_1_0_1 + 1.71022393244643e-05*G0_1_1_0_2 + 0.000200622422844678*G0_1_1_1_0 + 0.000924178701956633*G0_1_1_1_1 + 4.27555983111608e-05*G0_1_1_1_2 + 1.71022393244643e-05*G0_1_1_2_0 + 4.27555983111608e-05*G0_1_1_2_1 - 1.97333530666907e-06*G0_1_1_2_2 + 4.74540157079918e-06*G0_1_2_0_0 + 1.71022393244643e-05*G0_1_2_0_1 + 6.43683183365831e-06*G0_1_2_0_2 + 1.71022393244643e-05*G0_1_2_1_0 + 4.27555983111608e-05*G0_1_2_1_1 - 1.97333530666906e-06*G0_1_2_1_2 + 6.4368318336583e-06*G0_1_2_2_0 - 1.97333530666906e-06*G0_1_2_2_1 + 1.62565241930349e-05*G0_1_2_2_2 - 6.20191096381675e-06*G0_2_0_0_0 + 4.74540157079918e-06*G0_2_0_0_1 + 8.03429374858083e-06*G0_2_0_0_2 + 4.74540157079917e-06*G0_2_0_1_0 + 1.71022393244643e-05*G0_2_0_1_1 + 6.4368318336583e-06*G0_2_0_1_2 + 8.03429374858083e-06*G0_2_0_2_0 + 6.4368318336583e-06*G0_2_0_2_1 + 2.76266942933657e-05*G0_2_0_2_2 + 4.74540157079918e-06*G0_2_1_0_0 + 1.71022393244643e-05*G0_2_1_0_1 + 6.43683183365831e-06*G0_2_1_0_2 + 1.71022393244643e-05*G0_2_1_1_0 + 4.27555983111607e-05*G0_2_1_1_1 - 1.97333530666906e-06*G0_2_1_1_2 + 6.4368318336583e-06*G0_2_1_2_0 - 1.97333530666906e-06*G0_2_1_2_1 + 1.62565241930349e-05*G0_2_1_2_2 + 8.03429374858083e-06*G0_2_2_0_0 + 6.4368318336583e-06*G0_2_2_0_1 + 2.76266942933656e-05*G0_2_2_0_2 + 6.4368318336583e-06*G0_2_2_1_0 - 1.97333530666907e-06*G0_2_2_1_1 + 1.62565241930349e-05*G0_2_2_1_2 + 2.76266942933657e-05*G0_2_2_2_0 + 1.62565241930349e-05*G0_2_2_2_1 + 0.000111352492304892*G0_2_2_2_2;
    A[80] = -A[153] - 0.000122064883969666*G0_0_0_0_0 - 6.48381600762663e-06*G0_0_0_0_1 - 2.66870108139994e-05*G0_0_0_0_2 - 6.48381600762663e-06*G0_0_0_1_0 - 6.48381600762666e-06*G0_0_0_1_1 + 4.74540157079918e-06*G0_0_0_1_2 - 2.66870108139994e-05*G0_0_0_2_0 + 4.74540157079918e-06*G0_0_0_2_1 + 4.43060760521152e-05*G0_0_0_2_2 - 6.48381600762663e-06*G0_0_1_0_0 - 6.48381600762667e-06*G0_0_1_0_1 + 4.74540157079917e-06*G0_0_1_0_2 - 6.48381600762668e-06*G0_0_1_1_0 - 0.000179009702819257*G0_0_1_1_1 - 6.5777843555633e-06*G0_0_1_1_2 + 4.74540157079917e-06*G0_0_1_2_0 - 6.5777843555633e-06*G0_0_1_2_1 + 8.66858009715297e-05*G0_0_1_2_2 - 2.66870108139994e-05*G0_0_2_0_0 + 4.74540157079918e-06*G0_0_2_0_1 + 4.43060760521152e-05*G0_0_2_0_2 + 4.74540157079918e-06*G0_0_2_1_0 - 6.5777843555633e-06*G0_0_2_1_1 + 8.66858009715297e-05*G0_0_2_1_2 + 4.43060760521152e-05*G0_0_2_2_0 + 8.66858009715297e-05*G0_0_2_2_1 + 0.000471533169945947*G0_0_2_2_2 - 6.48381600762663e-06*G0_1_0_0_0 - 6.48381600762667e-06*G0_1_0_0_1 + 4.74540157079917e-06*G0_1_0_0_2 - 6.48381600762666e-06*G0_1_0_1_0 - 0.000179009702819257*G0_1_0_1_1 - 6.57778435556329e-06*G0_1_0_1_2 + 4.74540157079917e-06*G0_1_0_2_0 - 6.57778435556329e-06*G0_1_0_2_1 + 8.66858009715297e-05*G0_1_0_2_2 - 6.48381600762668e-06*G0_1_1_0_0 - 0.000179009702819257*G0_1_1_0_1 - 6.57778435556329e-06*G0_1_1_0_2 - 0.000179009702819257*G0_1_1_1_0 - 0.00212979260598344*G0_1_1_1_1 - 0.000220355775911369*G0_1_1_1_2 - 6.57778435556329e-06*G0_1_1_2_0 - 0.000220355775911369*G0_1_1_2_1 + 0.000305866972533691*G0_1_1_2_2 + 4.74540157079918e-06*G0_1_2_0_0 - 6.57778435556328e-06*G0_1_2_0_1 + 8.66858009715297e-05*G0_1_2_0_2 - 6.57778435556329e-06*G0_1_2_1_0 - 0.000220355775911369*G0_1_2_1_1 + 0.000305866972533691*G0_1_2_1_2 + 8.66858009715297e-05*G0_1_2_2_0 + 0.000305866972533691*G0_1_2_2_1 + 0.00143179571751025*G0_1_2_2_2 - 2.66870108139994e-05*G0_2_0_0_0 + 4.74540157079917e-06*G0_2_0_0_1 + 4.43060760521152e-05*G0_2_0_0_2 + 4.74540157079917e-06*G0_2_0_1_0 - 6.57778435556329e-06*G0_2_0_1_1 + 8.66858009715297e-05*G0_2_0_1_2 + 4.43060760521152e-05*G0_2_0_2_0 + 8.66858009715297e-05*G0_2_0_2_1 + 0.000471533169945947*G0_2_0_2_2 + 4.74540157079917e-06*G0_2_1_0_0 - 6.57778435556329e-06*G0_2_1_0_1 + 8.66858009715297e-05*G0_2_1_0_2 - 6.57778435556329e-06*G0_2_1_1_0 - 0.000220355775911369*G0_2_1_1_1 + 0.000305866972533691*G0_2_1_1_2 + 8.66858009715297e-05*G0_2_1_2_0 + 0.000305866972533691*G0_2_1_2_1 + 0.00143179571751025*G0_2_1_2_2 + 4.43060760521152e-05*G0_2_2_0_0 + 8.66858009715297e-05*G0_2_2_0_1 + 0.000471533169945947*G0_2_2_0_2 + 8.66858009715297e-05*G0_2_2_1_0 + 0.000305866972533691*G0_2_2_1_1 + 0.00143179571751025*G0_2_2_1_2 + 0.000471533169945947*G0_2_2_2_0 + 0.00143179571751025*G0_2_2_2_1 + 0.00739765819131023*G0_2_2_2_2;
    A[65] = -A[80] + 2.76266942933655e-05*G0_0_0_0_0 + 8.0342937485808e-06*G0_0_0_0_1 + 6.43683183365829e-06*G0_0_0_0_2 + 8.0342937485808e-06*G0_0_0_1_0 - 6.20191096381676e-06*G0_0_0_1_1 + 4.74540157079919e-06*G0_0_0_1_2 + 6.43683183365829e-06*G0_0_0_2_0 + 4.74540157079919e-06*G0_0_0_2_1 + 1.71022393244644e-05*G0_0_0_2_2 + 8.0342937485808e-06*G0_0_1_0_0 - 6.20191096381677e-06*G0_0_1_0_1 + 4.74540157079919e-06*G0_0_1_0_2 - 6.20191096381677e-06*G0_0_1_1_0 - 5.77905339810198e-05*G0_0_1_1_1 + 6.10794261588015e-06*G0_0_1_1_2 + 4.74540157079918e-06*G0_0_1_2_0 + 6.10794261588015e-06*G0_0_1_2_1 + 5.32800532800621e-05*G0_0_1_2_2 + 6.43683183365829e-06*G0_0_2_0_0 + 4.74540157079919e-06*G0_0_2_0_1 + 1.71022393244644e-05*G0_0_2_0_2 + 4.74540157079919e-06*G0_0_2_1_0 + 6.10794261588015e-06*G0_0_2_1_1 + 5.32800532800621e-05*G0_0_2_1_2 + 1.71022393244644e-05*G0_0_2_2_0 + 5.32800532800621e-05*G0_0_2_2_1 + 0.000200622422844679*G0_0_2_2_2 + 8.0342937485808e-06*G0_1_0_0_0 - 6.20191096381677e-06*G0_1_0_0_1 + 4.74540157079919e-06*G0_1_0_0_2 - 6.20191096381676e-06*G0_1_0_1_0 - 5.77905339810198e-05*G0_1_0_1_1 + 6.10794261588015e-06*G0_1_0_1_2 + 4.74540157079918e-06*G0_1_0_2_0 + 6.10794261588015e-06*G0_1_0_2_1 + 5.32800532800621e-05*G0_1_0_2_2 - 6.20191096381677e-06*G0_1_1_0_0 - 5.77905339810199e-05*G0_1_1_0_1 + 6.10794261588015e-06*G0_1_1_0_2 - 5.77905339810199e-05*G0_1_1_1_0 - 0.000600457743314987*G0_1_1_1_1 + 1.36254104508095e-05*G0_1_1_1_2 + 6.10794261588015e-06*G0_1_1_2_0 + 1.36254104508096e-05*G0_1_1_2_1 + 0.000323626990293712*G0_1_1_2_2 + 4.74540157079919e-06*G0_1_2_0_0 + 6.10794261588015e-06*G0_1_2_0_1 + 5.32800532800621e-05*G0_1_2_0_2 + 6.10794261588015e-06*G0_1_2_1_0 + 1.36254104508096e-05*G0_1_2_1_1 + 0.000323626990293712*G0_1_2_1_2 + 5.32800532800621e-05*G0_1_2_2_0 + 0.000323626990293712*G0_1_2_2_1 + 0.00107546774213459*G0_1_2_2_2 + 6.43683183365829e-06*G0_2_0_0_0 + 4.74540157079918e-06*G0_2_0_0_1 + 1.71022393244644e-05*G0_2_0_0_2 + 4.74540157079918e-06*G0_2_0_1_0 + 6.10794261588015e-06*G0_2_0_1_1 + 5.32800532800621e-05*G0_2_0_1_2 + 1.71022393244644e-05*G0_2_0_2_0 + 5.32800532800621e-05*G0_2_0_2_1 + 0.000200622422844679*G0_2_0_2_2 + 4.74540157079918e-06*G0_2_1_0_0 + 6.10794261588015e-06*G0_2_1_0_1 + 5.32800532800621e-05*G0_2_1_0_2 + 6.10794261588015e-06*G0_2_1_1_0 + 1.36254104508096e-05*G0_2_1_1_1 + 0.000323626990293712*G0_2_1_1_2 + 5.32800532800621e-05*G0_2_1_2_0 + 0.000323626990293712*G0_2_1_2_1 + 0.00107546774213459*G0_2_1_2_2 + 1.71022393244644e-05*G0_2_2_0_0 + 5.32800532800621e-05*G0_2_2_0_1 + 0.000200622422844679*G0_2_2_0_2 + 5.32800532800621e-05*G0_2_2_1_0 + 0.000323626990293712*G0_2_2_1_1 + 0.00107546774213459*G0_2_2_1_2 + 0.000200622422844679*G0_2_2_2_0 + 0.00107546774213459*G0_2_2_2_1 + 0.0040979596535159*G0_2_2_2_2;
    A[110] = A[65] - 0.000149691578263032*G0_0_0_0_0 - 2.49485963771719e-05*G0_0_0_0_1 - 2.26933560266931e-05*G0_0_0_0_2 - 2.49485963771719e-05*G0_0_0_1_0 + 2.4948596377172e-05*G0_0_0_1_1 - 2.26933560266931e-05*G0_0_0_2_0 + 1.97333530666907e-06*G0_0_0_2_2 - 2.49485963771719e-05*G0_0_1_0_0 + 2.4948596377172e-05*G0_0_1_0_1 + 2.4948596377172e-05*G0_0_1_1_0 + 0.000149691578263032*G0_0_1_1_1 + 2.26933560266932e-05*G0_0_1_1_2 + 2.26933560266932e-05*G0_0_1_2_1 - 1.9733353066689e-06*G0_0_1_2_2 - 2.26933560266931e-05*G0_0_2_0_0 + 1.97333530666907e-06*G0_0_2_0_2 + 2.26933560266932e-05*G0_0_2_1_1 - 1.9733353066689e-06*G0_0_2_1_2 + 1.97333530666906e-06*G0_0_2_2_0 - 1.9733353066689e-06*G0_0_2_2_1 - 2.49485963771719e-05*G0_1_0_0_0 + 2.4948596377172e-05*G0_1_0_0_1 + 2.4948596377172e-05*G0_1_0_1_0 + 0.000149691578263032*G0_1_0_1_1 + 2.26933560266932e-05*G0_1_0_1_2 + 2.26933560266932e-05*G0_1_0_2_1 - 1.97333530666889e-06*G0_1_0_2_2 + 2.4948596377172e-05*G0_1_1_0_0 + 0.000149691578263032*G0_1_1_0_1 + 2.26933560266932e-05*G0_1_1_0_2 + 0.000149691578263032*G0_1_1_1_0 + 0.0012474298188586*G0_1_1_1_1 + 0.000181546848213546*G0_1_1_1_2 + 2.26933560266932e-05*G0_1_1_2_0 + 0.000181546848213546*G0_1_1_2_1 - 1.77600177600205e-05*G0_1_1_2_2 + 2.26933560266932e-05*G0_1_2_0_1 - 1.9733353066689e-06*G0_1_2_0_2 + 2.26933560266932e-05*G0_1_2_1_0 + 0.000181546848213546*G0_1_2_1_1 - 1.77600177600205e-05*G0_1_2_1_2 - 1.9733353066689e-06*G0_1_2_2_0 - 1.77600177600204e-05*G0_1_2_2_1 - 5.92000592000682e-05*G0_1_2_2_2 - 2.26933560266931e-05*G0_2_0_0_0 + 1.97333530666906e-06*G0_2_0_0_2 + 2.26933560266932e-05*G0_2_0_1_1 - 1.9733353066689e-06*G0_2_0_1_2 + 1.97333530666905e-06*G0_2_0_2_0 - 1.9733353066689e-06*G0_2_0_2_1 + 2.26933560266932e-05*G0_2_1_0_1 - 1.9733353066689e-06*G0_2_1_0_2 + 2.26933560266932e-05*G0_2_1_1_0 + 0.000181546848213546*G0_2_1_1_1 - 1.77600177600205e-05*G0_2_1_1_2 - 1.9733353066689e-06*G0_2_1_2_0 - 1.77600177600204e-05*G0_2_1_2_1 - 5.92000592000682e-05*G0_2_1_2_2 + 1.97333530666906e-06*G0_2_2_0_0 - 1.97333530666889e-06*G0_2_2_0_1 - 1.9733353066689e-06*G0_2_2_1_0 - 1.77600177600205e-05*G0_2_2_1_1 - 5.92000592000682e-05*G0_2_2_1_2 - 5.92000592000682e-05*G0_2_2_2_1 + 0.000522933856267284*G0_2_2_2_2;
    A[125] = -A[110] - 5.77905339810197e-05*G0_0_0_0_0 - 6.20191096381674e-06*G0_0_0_0_1 + 6.10794261588017e-06*G0_0_0_0_2 - 6.20191096381673e-06*G0_0_0_1_0 + 8.03429374858084e-06*G0_0_0_1_1 + 4.7454015707992e-06*G0_0_0_1_2 + 6.10794261588017e-06*G0_0_0_2_0 + 4.74540157079921e-06*G0_0_0_2_1 + 5.32800532800623e-05*G0_0_0_2_2 - 6.20191096381672e-06*G0_0_1_0_0 + 8.03429374858085e-06*G0_0_1_0_1 + 4.74540157079921e-06*G0_0_1_0_2 + 8.03429374858085e-06*G0_0_1_1_0 + 2.76266942933657e-05*G0_0_1_1_1 + 6.43683183365833e-06*G0_0_1_1_2 + 4.7454015707992e-06*G0_0_1_2_0 + 6.43683183365833e-06*G0_0_1_2_1 + 1.71022393244644e-05*G0_0_1_2_2 + 6.10794261588017e-06*G0_0_2_0_0 + 4.74540157079921e-06*G0_0_2_0_1 + 5.32800532800623e-05*G0_0_2_0_2 + 4.7454015707992e-06*G0_0_2_1_0 + 6.43683183365833e-06*G0_0_2_1_1 + 1.71022393244644e-05*G0_0_2_1_2 + 5.32800532800623e-05*G0_0_2_2_0 + 1.71022393244644e-05*G0_0_2_2_1 + 0.000200622422844679*G0_0_2_2_2 - 6.20191096381673e-06*G0_1_0_0_0 + 8.03429374858084e-06*G0_1_0_0_1 + 4.7454015707992e-06*G0_1_0_0_2 + 8.03429374858085e-06*G0_1_0_1_0 + 2.76266942933656e-05*G0_1_0_1_1 + 6.43683183365833e-06*G0_1_0_1_2 + 4.74540157079921e-06*G0_1_0_2_0 + 6.43683183365833e-06*G0_1_0_2_1 + 1.71022393244645e-05*G0_1_0_2_2 + 8.03429374858085e-06*G0_1_1_0_0 + 2.76266942933656e-05*G0_1_1_0_1 + 6.43683183365833e-06*G0_1_1_0_2 + 2.76266942933656e-05*G0_1_1_1_0 + 0.000111352492304893*G0_1_1_1_1 + 1.6256524193035e-05*G0_1_1_1_2 + 6.43683183365833e-06*G0_1_1_2_0 + 1.6256524193035e-05*G0_1_1_2_1 - 1.97333530666885e-06*G0_1_1_2_2 + 4.7454015707992e-06*G0_1_2_0_0 + 6.43683183365833e-06*G0_1_2_0_1 + 1.71022393244645e-05*G0_1_2_0_2 + 6.43683183365832e-06*G0_1_2_1_0 + 1.6256524193035e-05*G0_1_2_1_1 - 1.97333530666885e-06*G0_1_2_1_2 + 1.71022393244645e-05*G0_1_2_2_0 - 1.97333530666884e-06*G0_1_2_2_1 + 4.27555983111615e-05*G0_1_2_2_2 + 6.10794261588017e-06*G0_2_0_0_0 + 4.74540157079921e-06*G0_2_0_0_1 + 5.32800532800623e-05*G0_2_0_0_2 + 4.7454015707992e-06*G0_2_0_1_0 + 6.43683183365832e-06*G0_2_0_1_1 + 1.71022393244645e-05*G0_2_0_1_2 + 5.32800532800623e-05*G0_2_0_2_0 + 1.71022393244645e-05*G0_2_0_2_1 + 0.000200622422844679*G0_2_0_2_2 + 4.7454015707992e-06*G0_2_1_0_0 + 6.43683183365833e-06*G0_2_1_0_1 + 1.71022393244645e-05*G0_2_1_0_2 + 6.43683183365833e-06*G0_2_1_1_0 + 1.6256524193035e-05*G0_2_1_1_1 - 1.97333530666885e-06*G0_2_1_1_2 + 1.71022393244645e-05*G0_2_1_2_0 - 1.97333530666884e-06*G0_2_1_2_1 + 4.27555983111615e-05*G0_2_1_2_2 + 5.32800532800623e-05*G0_2_2_0_0 + 1.71022393244645e-05*G0_2_2_0_1 + 0.000200622422844679*G0_2_2_0_2 + 1.71022393244645e-05*G0_2_2_1_0 - 1.97333530666884e-06*G0_2_2_1_1 + 4.27555983111615e-05*G0_2_2_1_2 + 0.000200622422844679*G0_2_2_2_0 + 4.27555983111615e-05*G0_2_2_2_1 + 0.000924178701956638*G0_2_2_2_2;
    A[83] = A[125];
    A[89] = A[110] - 4.22857565714801e-06*G0_0_0_0_0 - 5.24343381486327e-05*G0_0_0_0_1 + 2.50895488990768e-05*G0_0_0_0_2 - 5.24343381486327e-05*G0_0_0_1_0 - 7.73829345258047e-05*G0_0_0_1_1 + 7.47048366096105e-06*G0_0_0_1_2 + 2.50895488990768e-05*G0_0_0_2_0 + 7.47048366096104e-06*G0_0_0_2_1 + 0.000159840159840186*G0_0_0_2_2 - 5.24343381486327e-05*G0_0_1_0_0 - 7.73829345258047e-05*G0_0_1_0_1 + 7.47048366096105e-06*G0_0_1_0_2 - 7.73829345258047e-05*G0_0_1_1_0 - 0.00015392015392018*G0_0_1_1_1 + 2.39619287238369e-06*G0_0_1_1_2 + 7.47048366096105e-06*G0_0_1_2_0 + 2.39619287238369e-06*G0_0_1_2_1 + 0.000161813495146855*G0_0_1_2_2 + 2.50895488990768e-05*G0_0_2_0_0 + 7.47048366096105e-06*G0_0_2_0_1 + 0.000159840159840186*G0_0_2_0_2 + 7.47048366096105e-06*G0_0_2_1_0 + 2.39619287238369e-06*G0_0_2_1_1 + 0.000161813495146855*G0_0_2_1_2 + 0.000159840159840186*G0_0_2_2_0 + 0.000161813495146855*G0_0_2_2_1 + 0.00091760091760107*G0_0_2_2_2 - 5.24343381486327e-05*G0_1_0_0_0 - 7.73829345258047e-05*G0_1_0_0_1 + 7.47048366096105e-06*G0_1_0_0_2 - 7.73829345258047e-05*G0_1_0_1_0 - 0.00015392015392018*G0_1_0_1_1 + 2.39619287238369e-06*G0_1_0_1_2 + 7.47048366096105e-06*G0_1_0_2_0 + 2.39619287238369e-06*G0_1_0_2_1 + 0.000161813495146855*G0_1_0_2_2 - 7.73829345258047e-05*G0_1_1_0_0 - 0.00015392015392018*G0_1_1_0_1 + 2.39619287238369e-06*G0_1_1_0_2 - 0.00015392015392018*G0_1_1_1_0 - 0.000511657654514884*G0_1_1_1_1 - 5.3561958323874e-06*G0_1_1_1_2 + 2.39619287238369e-06*G0_1_1_2_0 - 5.35619583238739e-06*G0_1_1_2_1 + 0.00032560032560038*G0_1_1_2_2 + 7.47048366096105e-06*G0_1_2_0_0 + 2.39619287238369e-06*G0_1_2_0_1 + 0.000161813495146855*G0_1_2_0_2 + 2.3961928723837e-06*G0_1_2_1_0 - 5.35619583238737e-06*G0_1_2_1_1 + 0.00032560032560038*G0_1_2_1_2 + 0.000161813495146855*G0_1_2_2_0 + 0.00032560032560038*G0_1_2_2_1 + 0.00139120139120162*G0_1_2_2_2 + 2.50895488990768e-05*G0_2_0_0_0 + 7.47048366096105e-06*G0_2_0_0_1 + 0.000159840159840186*G0_2_0_0_2 + 7.47048366096105e-06*G0_2_0_1_0 + 2.39619287238369e-06*G0_2_0_1_1 + 0.000161813495146855*G0_2_0_1_2 + 0.000159840159840186*G0_2_0_2_0 + 0.000161813495146855*G0_2_0_2_1 + 0.00091760091760107*G0_2_0_2_2 + 7.47048366096105e-06*G0_2_1_0_0 + 2.39619287238369e-06*G0_2_1_0_1 + 0.000161813495146855*G0_2_1_0_2 + 2.3961928723837e-06*G0_2_1_1_0 - 5.35619583238738e-06*G0_2_1_1_1 + 0.00032560032560038*G0_2_1_1_2 + 0.000161813495146855*G0_2_1_2_0 + 0.00032560032560038*G0_2_1_2_1 + 0.00139120139120162*G0_2_1_2_2 + 0.000159840159840186*G0_2_2_0_0 + 0.000161813495146855*G0_2_2_0_1 + 0.00091760091760107*G0_2_2_0_2 + 0.000161813495146855*G0_2_2_1_0 + 0.00032560032560038*G0_2_2_1_1 + 0.00139120139120162*G0_2_2_1_2 + 0.00091760091760107*G0_2_2_2_0 + 0.00139120139120162*G0_2_2_2_1 + 0.00727174060507515*G0_2_2_2_2;
    A[218] = A[89] - 0.000338286052571823*G0_0_0_0_0 - 6.76572105143646e-05*G0_0_0_0_1 - 2.02971631543094e-05*G0_0_0_0_2 - 6.76572105143646e-05*G0_0_0_1_0 - 3.38286052571823e-06*G0_0_0_1_2 - 2.02971631543094e-05*G0_0_0_2_0 - 3.38286052571824e-06*G0_0_0_2_1 + 0.000110506777173462*G0_0_0_2_2 - 6.76572105143646e-05*G0_0_1_0_0 - 3.38286052571823e-06*G0_0_1_0_2 + 6.76572105143648e-05*G0_0_1_1_1 + 3.38286052571824e-06*G0_0_1_1_2 - 3.38286052571823e-06*G0_0_1_2_0 + 3.38286052571824e-06*G0_0_1_2_1 - 2.02971631543094e-05*G0_0_2_0_0 - 3.38286052571824e-06*G0_0_2_0_1 + 0.000110506777173462*G0_0_2_0_2 - 3.38286052571823e-06*G0_0_2_1_0 + 3.38286052571824e-06*G0_0_2_1_1 + 0.000110506777173462*G0_0_2_2_0 + 0.000315733649067035*G0_0_2_2_2 - 6.76572105143646e-05*G0_1_0_0_0 - 3.38286052571822e-06*G0_1_0_0_2 + 6.76572105143648e-05*G0_1_0_1_1 + 3.38286052571825e-06*G0_1_0_1_2 - 3.38286052571823e-06*G0_1_0_2_0 + 3.38286052571825e-06*G0_1_0_2_1 + 6.76572105143648e-05*G0_1_1_0_1 + 3.38286052571824e-06*G0_1_1_0_2 + 6.76572105143648e-05*G0_1_1_1_0 + 0.000338286052571824*G0_1_1_1_1 + 2.02971631543095e-05*G0_1_1_1_2 + 3.38286052571824e-06*G0_1_1_2_0 + 2.02971631543095e-05*G0_1_1_2_1 - 0.000110506777173462*G0_1_1_2_2 - 3.38286052571823e-06*G0_1_2_0_0 + 3.38286052571824e-06*G0_1_2_0_1 + 3.38286052571824e-06*G0_1_2_1_0 + 2.02971631543095e-05*G0_1_2_1_1 - 0.000110506777173462*G0_1_2_1_2 - 0.000110506777173462*G0_1_2_2_1 - 0.000315733649067035*G0_1_2_2_2 - 2.02971631543094e-05*G0_2_0_0_0 - 3.38286052571824e-06*G0_2_0_0_1 + 0.000110506777173462*G0_2_0_0_2 - 3.38286052571823e-06*G0_2_0_1_0 + 3.38286052571824e-06*G0_2_0_1_1 + 0.000110506777173462*G0_2_0_2_0 + 0.000315733649067035*G0_2_0_2_2 - 3.38286052571824e-06*G0_2_1_0_0 + 3.38286052571824e-06*G0_2_1_0_1 + 3.38286052571824e-06*G0_2_1_1_0 + 2.02971631543095e-05*G0_2_1_1_1 - 0.000110506777173462*G0_2_1_1_2 - 0.000110506777173462*G0_2_1_2_1 - 0.000315733649067035*G0_2_1_2_2 + 0.000110506777173462*G0_2_2_0_0 + 0.000315733649067035*G0_2_2_0_2 - 0.000110506777173462*G0_2_2_1_1 - 0.000315733649067035*G0_2_2_1_2 + 0.000315733649067035*G0_2_2_2_0 - 0.000315733649067035*G0_2_2_2_1;
    A[215] = A[89];
    A[198] = A[153] - 4.22857565714828e-06*G0_0_0_0_0 + 2.50895488990768e-05*G0_0_0_0_1 - 5.24343381486326e-05*G0_0_0_0_2 + 2.50895488990768e-05*G0_0_0_1_0 + 0.000159840159840187*G0_0_0_1_1 + 7.47048366096108e-06*G0_0_0_1_2 - 5.24343381486326e-05*G0_0_0_2_0 + 7.47048366096108e-06*G0_0_0_2_1 - 7.73829345258046e-05*G0_0_0_2_2 + 2.50895488990768e-05*G0_0_1_0_0 + 0.000159840159840187*G0_0_1_0_1 + 7.47048366096108e-06*G0_0_1_0_2 + 0.000159840159840187*G0_0_1_1_0 + 0.000917600917601072*G0_0_1_1_1 + 0.000161813495146856*G0_0_1_1_2 + 7.47048366096108e-06*G0_0_1_2_0 + 0.000161813495146856*G0_0_1_2_1 + 2.39619287238375e-06*G0_0_1_2_2 - 5.24343381486326e-05*G0_0_2_0_0 + 7.47048366096109e-06*G0_0_2_0_1 - 7.73829345258046e-05*G0_0_2_0_2 + 7.47048366096108e-06*G0_0_2_1_0 + 0.000161813495146856*G0_0_2_1_1 + 2.39619287238374e-06*G0_0_2_1_2 - 7.73829345258046e-05*G0_0_2_2_0 + 2.39619287238375e-06*G0_0_2_2_1 - 0.00015392015392018*G0_0_2_2_2 + 2.50895488990768e-05*G0_1_0_0_0 + 0.000159840159840187*G0_1_0_0_1 + 7.47048366096108e-06*G0_1_0_0_2 + 0.000159840159840187*G0_1_0_1_0 + 0.000917600917601072*G0_1_0_1_1 + 0.000161813495146856*G0_1_0_1_2 + 7.47048366096109e-06*G0_1_0_2_0 + 0.000161813495146856*G0_1_0_2_1 + 2.39619287238375e-06*G0_1_0_2_2 + 0.000159840159840187*G0_1_1_0_0 + 0.000917600917601072*G0_1_1_0_1 + 0.000161813495146856*G0_1_1_0_2 + 0.000917600917601072*G0_1_1_1_0 + 0.00727174060507517*G0_1_1_1_1 + 0.00139120139120163*G0_1_1_1_2 + 0.000161813495146856*G0_1_1_2_0 + 0.00139120139120163*G0_1_1_2_1 + 0.000325600325600381*G0_1_1_2_2 + 7.47048366096108e-06*G0_1_2_0_0 + 0.000161813495146856*G0_1_2_0_1 + 2.39619287238374e-06*G0_1_2_0_2 + 0.000161813495146856*G0_1_2_1_0 + 0.00139120139120163*G0_1_2_1_1 + 0.000325600325600381*G0_1_2_1_2 + 2.39619287238375e-06*G0_1_2_2_0 + 0.000325600325600381*G0_1_2_2_1 - 5.35619583238698e-06*G0_1_2_2_2 - 5.24343381486326e-05*G0_2_0_0_0 + 7.47048366096108e-06*G0_2_0_0_1 - 7.73829345258046e-05*G0_2_0_0_2 + 7.47048366096108e-06*G0_2_0_1_0 + 0.000161813495146856*G0_2_0_1_1 + 2.39619287238376e-06*G0_2_0_1_2 - 7.73829345258046e-05*G0_2_0_2_0 + 2.39619287238376e-06*G0_2_0_2_1 - 0.00015392015392018*G0_2_0_2_2 + 7.47048366096108e-06*G0_2_1_0_0 + 0.000161813495146856*G0_2_1_0_1 + 2.39619287238374e-06*G0_2_1_0_2 + 0.000161813495146856*G0_2_1_1_0 + 0.00139120139120163*G0_2_1_1_1 + 0.000325600325600381*G0_2_1_1_2 + 2.39619287238375e-06*G0_2_1_2_0 + 0.000325600325600381*G0_2_1_2_1 - 5.35619583238699e-06*G0_2_1_2_2 - 7.73829345258046e-05*G0_2_2_0_0 + 2.39619287238375e-06*G0_2_2_0_1 - 0.00015392015392018*G0_2_2_0_2 + 2.39619287238375e-06*G0_2_2_1_0 + 0.000325600325600381*G0_2_2_1_1 - 5.35619583238702e-06*G0_2_2_1_2 - 0.00015392015392018*G0_2_2_2_0 - 5.35619583238703e-06*G0_2_2_2_1 - 0.000511657654514883*G0_2_2_2_2;
    A[79] = A[65];
    A[71] = A[169];
    A[82] = A[110];
    A[168] = A[56];
    A[184] = A[72];
    A[68] = -A[125] + 0.000111352492304892*G0_0_0_0_0 + 2.76266942933655e-05*G0_0_0_0_1 + 1.62565241930348e-05*G0_0_0_0_2 + 2.76266942933655e-05*G0_0_0_1_0 + 8.0342937485808e-06*G0_0_0_1_1 + 6.4368318336583e-06*G0_0_0_1_2 + 1.62565241930348e-05*G0_0_0_2_0 + 6.4368318336583e-06*G0_0_0_2_1 - 1.97333530666898e-06*G0_0_0_2_2 + 2.76266942933655e-05*G0_0_1_0_0 + 8.0342937485808e-06*G0_0_1_0_1 + 6.4368318336583e-06*G0_0_1_0_2 + 8.03429374858081e-06*G0_0_1_1_0 - 6.20191096381676e-06*G0_0_1_1_1 + 4.74540157079919e-06*G0_0_1_1_2 + 6.4368318336583e-06*G0_0_1_2_0 + 4.74540157079919e-06*G0_0_1_2_1 + 1.71022393244644e-05*G0_0_1_2_2 + 1.62565241930348e-05*G0_0_2_0_0 + 6.4368318336583e-06*G0_0_2_0_1 - 1.97333530666896e-06*G0_0_2_0_2 + 6.4368318336583e-06*G0_0_2_1_0 + 4.74540157079919e-06*G0_0_2_1_1 + 1.71022393244644e-05*G0_0_2_1_2 - 1.97333530666898e-06*G0_0_2_2_0 + 1.71022393244644e-05*G0_0_2_2_1 + 4.2755598311161e-05*G0_0_2_2_2 + 2.76266942933655e-05*G0_1_0_0_0 + 8.0342937485808e-06*G0_1_0_0_1 + 6.4368318336583e-06*G0_1_0_0_2 + 8.03429374858081e-06*G0_1_0_1_0 - 6.20191096381677e-06*G0_1_0_1_1 + 4.74540157079919e-06*G0_1_0_1_2 + 6.4368318336583e-06*G0_1_0_2_0 + 4.74540157079919e-06*G0_1_0_2_1 + 1.71022393244644e-05*G0_1_0_2_2 + 8.0342937485808e-06*G0_1_1_0_0 - 6.20191096381677e-06*G0_1_1_0_1 + 4.74540157079919e-06*G0_1_1_0_2 - 6.20191096381676e-06*G0_1_1_1_0 - 5.77905339810197e-05*G0_1_1_1_1 + 6.10794261588019e-06*G0_1_1_1_2 + 4.74540157079919e-06*G0_1_1_2_0 + 6.10794261588019e-06*G0_1_1_2_1 + 5.32800532800622e-05*G0_1_1_2_2 + 6.4368318336583e-06*G0_1_2_0_0 + 4.74540157079919e-06*G0_1_2_0_1 + 1.71022393244644e-05*G0_1_2_0_2 + 4.74540157079919e-06*G0_1_2_1_0 + 6.10794261588019e-06*G0_1_2_1_1 + 5.32800532800622e-05*G0_1_2_1_2 + 1.71022393244644e-05*G0_1_2_2_0 + 5.32800532800622e-05*G0_1_2_2_1 + 0.000200622422844679*G0_1_2_2_2 + 1.62565241930348e-05*G0_2_0_0_0 + 6.4368318336583e-06*G0_2_0_0_1 - 1.97333530666895e-06*G0_2_0_0_2 + 6.4368318336583e-06*G0_2_0_1_0 + 4.74540157079919e-06*G0_2_0_1_1 + 1.71022393244644e-05*G0_2_0_1_2 - 1.97333530666898e-06*G0_2_0_2_0 + 1.71022393244644e-05*G0_2_0_2_1 + 4.2755598311161e-05*G0_2_0_2_2 + 6.4368318336583e-06*G0_2_1_0_0 + 4.74540157079919e-06*G0_2_1_0_1 + 1.71022393244644e-05*G0_2_1_0_2 + 4.7454015707992e-06*G0_2_1_1_0 + 6.10794261588019e-06*G0_2_1_1_1 + 5.32800532800622e-05*G0_2_1_1_2 + 1.71022393244644e-05*G0_2_1_2_0 + 5.32800532800622e-05*G0_2_1_2_1 + 0.000200622422844679*G0_2_1_2_2 - 1.97333530666894e-06*G0_2_2_0_0 + 1.71022393244644e-05*G0_2_2_0_1 + 4.27555983111611e-05*G0_2_2_0_2 + 1.71022393244644e-05*G0_2_2_1_0 + 5.32800532800622e-05*G0_2_2_1_1 + 0.000200622422844679*G0_2_2_1_2 + 4.27555983111611e-05*G0_2_2_2_0 + 0.000200622422844679*G0_2_2_2_1 + 0.000924178701956634*G0_2_2_2_2;
    A[189] = A[186] + 0.000315733649067035*G0_0_0_0_1 - 0.000315733649067035*G0_0_0_0_2 + 0.000315733649067035*G0_0_0_1_0 + 0.000110506777173462*G0_0_0_1_1 - 0.000315733649067035*G0_0_0_2_0 - 0.000110506777173462*G0_0_0_2_2 + 0.000315733649067035*G0_0_1_0_0 + 0.000110506777173462*G0_0_1_0_1 + 0.000110506777173462*G0_0_1_1_0 - 2.02971631543096e-05*G0_0_1_1_1 - 3.38286052571828e-06*G0_0_1_1_2 - 3.38286052571828e-06*G0_0_1_2_1 + 3.38286052571821e-06*G0_0_1_2_2 - 0.000315733649067035*G0_0_2_0_0 - 0.000110506777173462*G0_0_2_0_2 - 3.38286052571829e-06*G0_0_2_1_1 + 3.38286052571822e-06*G0_0_2_1_2 - 0.000110506777173462*G0_0_2_2_0 + 3.38286052571821e-06*G0_0_2_2_1 + 2.02971631543094e-05*G0_0_2_2_2 + 0.000315733649067035*G0_1_0_0_0 + 0.000110506777173462*G0_1_0_0_1 + 0.000110506777173462*G0_1_0_1_0 - 2.02971631543096e-05*G0_1_0_1_1 - 3.38286052571829e-06*G0_1_0_1_2 - 3.38286052571829e-06*G0_1_0_2_1 + 3.38286052571821e-06*G0_1_0_2_2 + 0.000110506777173462*G0_1_1_0_0 - 2.02971631543096e-05*G0_1_1_0_1 - 3.38286052571829e-06*G0_1_1_0_2 - 2.02971631543096e-05*G0_1_1_1_0 - 0.000338286052571825*G0_1_1_1_1 - 6.76572105143649e-05*G0_1_1_1_2 - 3.3828605257183e-06*G0_1_1_2_0 - 6.76572105143649e-05*G0_1_1_2_1 - 3.3828605257183e-06*G0_1_2_0_1 + 3.38286052571821e-06*G0_1_2_0_2 - 3.3828605257183e-06*G0_1_2_1_0 - 6.76572105143649e-05*G0_1_2_1_1 + 3.3828605257182e-06*G0_1_2_2_0 + 6.76572105143647e-05*G0_1_2_2_2 - 0.000315733649067036*G0_2_0_0_0 - 0.000110506777173462*G0_2_0_0_2 - 3.38286052571829e-06*G0_2_0_1_1 + 3.38286052571821e-06*G0_2_0_1_2 - 0.000110506777173462*G0_2_0_2_0 + 3.3828605257182e-06*G0_2_0_2_1 + 2.02971631543094e-05*G0_2_0_2_2 - 3.38286052571829e-06*G0_2_1_0_1 + 3.3828605257182e-06*G0_2_1_0_2 - 3.38286052571829e-06*G0_2_1_1_0 - 6.76572105143649e-05*G0_2_1_1_1 + 3.38286052571821e-06*G0_2_1_2_0 + 6.76572105143647e-05*G0_2_1_2_2 - 0.000110506777173462*G0_2_2_0_0 + 3.3828605257182e-06*G0_2_2_0_1 + 2.02971631543094e-05*G0_2_2_0_2 + 3.38286052571821e-06*G0_2_2_1_0 + 6.76572105143647e-05*G0_2_2_1_2 + 2.02971631543094e-05*G0_2_2_2_0 + 6.76572105143647e-05*G0_2_2_2_1 + 0.000338286052571824*G0_2_2_2_2;
    A[55] = A[153];
    A[178] = A[198] - 0.000338286052571824*G0_0_0_0_0 - 2.02971631543094e-05*G0_0_0_0_1 - 6.76572105143648e-05*G0_0_0_0_2 - 2.02971631543094e-05*G0_0_0_1_0 + 0.000110506777173462*G0_0_0_1_1 - 3.38286052571826e-06*G0_0_0_1_2 - 6.76572105143648e-05*G0_0_0_2_0 - 3.38286052571825e-06*G0_0_0_2_1 - 2.02971631543094e-05*G0_0_1_0_0 + 0.000110506777173462*G0_0_1_0_1 - 3.38286052571825e-06*G0_0_1_0_2 + 0.000110506777173462*G0_0_1_1_0 + 0.000315733649067035*G0_0_1_1_1 - 3.38286052571825e-06*G0_0_1_2_0 + 3.38286052571821e-06*G0_0_1_2_2 - 6.76572105143647e-05*G0_0_2_0_0 - 3.38286052571826e-06*G0_0_2_0_1 - 3.38286052571826e-06*G0_0_2_1_0 + 3.38286052571822e-06*G0_0_2_1_2 + 3.38286052571821e-06*G0_0_2_2_1 + 6.76572105143645e-05*G0_0_2_2_2 - 2.02971631543094e-05*G0_1_0_0_0 + 0.000110506777173462*G0_1_0_0_1 - 3.38286052571826e-06*G0_1_0_0_2 + 0.000110506777173462*G0_1_0_1_0 + 0.000315733649067035*G0_1_0_1_1 - 3.38286052571826e-06*G0_1_0_2_0 + 3.3828605257182e-06*G0_1_0_2_2 + 0.000110506777173462*G0_1_1_0_0 + 0.000315733649067035*G0_1_1_0_1 + 0.000315733649067035*G0_1_1_1_0 - 0.000315733649067037*G0_1_1_1_2 - 0.000315733649067037*G0_1_1_2_1 - 0.000110506777173463*G0_1_1_2_2 - 3.38286052571826e-06*G0_1_2_0_0 + 3.38286052571822e-06*G0_1_2_0_2 - 0.000315733649067037*G0_1_2_1_1 - 0.000110506777173463*G0_1_2_1_2 + 3.38286052571822e-06*G0_1_2_2_0 - 0.000110506777173463*G0_1_2_2_1 + 2.02971631543092e-05*G0_1_2_2_2 - 6.76572105143648e-05*G0_2_0_0_0 - 3.38286052571826e-06*G0_2_0_0_1 - 3.38286052571826e-06*G0_2_0_1_0 + 3.38286052571821e-06*G0_2_0_1_2 + 3.38286052571821e-06*G0_2_0_2_1 + 6.76572105143646e-05*G0_2_0_2_2 - 3.38286052571826e-06*G0_2_1_0_0 + 3.38286052571822e-06*G0_2_1_0_2 - 0.000315733649067037*G0_2_1_1_1 - 0.000110506777173463*G0_2_1_1_2 + 3.38286052571822e-06*G0_2_1_2_0 - 0.000110506777173463*G0_2_1_2_1 + 2.02971631543093e-05*G0_2_1_2_2 + 3.38286052571822e-06*G0_2_2_0_1 + 6.76572105143645e-05*G0_2_2_0_2 + 3.38286052571822e-06*G0_2_2_1_0 - 0.000110506777173463*G0_2_2_1_1 + 2.02971631543093e-05*G0_2_2_1_2 + 6.76572105143645e-05*G0_2_2_2_0 + 2.02971631543093e-05*G0_2_2_2_1 + 0.000338286052571823*G0_2_2_2_2;
    A[220] = A[164];
    A[54] = A[138];
    A[33] = A[47];
    A[24] = -A[165] + 0.000171022393244644*G0_0_0_0_0 + 1.50349356698585e-06*G0_0_0_0_1 - 1.51523961047796e-05*G0_0_0_0_2 + 1.50349356698585e-06*G0_0_0_1_0 - 1.51523961047796e-05*G0_0_0_2_0 + 1.50349356698584e-06*G0_0_1_0_0 + 1.50349356698597e-06*G0_0_1_1_1 - 1.51523961047796e-05*G0_0_2_0_0 + 1.50349356698585e-06*G0_1_0_0_0 + 1.50349356698596e-06*G0_1_0_1_1 + 1.50349356698596e-06*G0_1_1_0_1 + 1.50349356698595e-06*G0_1_1_1_0 + 0.000171022393244646*G0_1_1_1_1 - 1.51523961047796e-05*G0_1_1_1_2 - 1.51523961047796e-05*G0_1_1_2_1 - 1.51523961047796e-05*G0_1_2_1_1 - 1.51523961047796e-05*G0_2_0_0_0 - 1.51523961047796e-05*G0_2_1_1_1;
    A[127] = A[113];
    A[62] = A[76] + 1.32730291460472e-05*G0_0_0_1_1 + 1.32730291460472e-05*G0_0_1_0_1 + 1.32730291460472e-05*G0_0_1_1_0 + 2.20825617651051e-05*G0_0_1_1_1 - 5.60873576746685e-06*G0_0_2_2_2 + 1.32730291460472e-05*G0_1_0_0_1 + 1.32730291460472e-05*G0_1_0_1_0 + 2.20825617651051e-05*G0_1_0_1_1 + 1.32730291460472e-05*G0_1_1_0_0 + 2.20825617651051e-05*G0_1_1_0_1 + 2.20825617651051e-05*G0_1_1_1_0 - 0.000222704984609785*G0_1_1_1_1 + 5.01556057111692e-06*G0_1_1_1_2 + 5.01556057111692e-06*G0_1_1_2_1 + 5.01556057111692e-06*G0_1_2_1_1 - 4.54924264448151e-05*G0_1_2_2_2 - 5.60873576746685e-06*G0_2_0_2_2 + 5.01556057111693e-06*G0_2_1_1_1 - 4.54924264448151e-05*G0_2_1_2_2 - 5.60873576746685e-06*G0_2_2_0_2 - 4.54924264448151e-05*G0_2_2_1_2 - 5.60873576746686e-06*G0_2_2_2_0 - 4.54924264448151e-05*G0_2_2_2_1 - 0.000767956323512007*G0_2_2_2_2;
    A[44] = A[212];
    A[141] = A[99];
    A[95] = A[123] + 0.000112762017523941*G0_0_0_0_0 + 2.25524035047883e-05*G0_0_0_0_1 + 6.76572105143654e-06*G0_0_0_0_2 + 2.25524035047883e-05*G0_0_0_1_0 + 6.76572105143655e-06*G0_0_0_2_0 - 3.6835592391154e-05*G0_0_0_2_2 + 2.25524035047883e-05*G0_0_1_0_0 - 2.25524035047882e-05*G0_0_1_1_1 + 6.76572105143655e-06*G0_0_2_0_0 - 3.6835592391154e-05*G0_0_2_0_2 - 3.6835592391154e-05*G0_0_2_2_0 - 0.000105244549689012*G0_0_2_2_2 + 2.25524035047883e-05*G0_1_0_0_0 - 2.25524035047882e-05*G0_1_0_1_1 - 2.25524035047882e-05*G0_1_1_0_1 - 2.25524035047882e-05*G0_1_1_1_0 - 0.000112762017523942*G0_1_1_1_1 - 6.76572105143656e-06*G0_1_1_1_2 - 6.76572105143655e-06*G0_1_1_2_1 + 3.68355923911541e-05*G0_1_1_2_2 - 6.76572105143656e-06*G0_1_2_1_1 + 3.68355923911541e-05*G0_1_2_1_2 + 3.68355923911541e-05*G0_1_2_2_1 + 0.000105244549689012*G0_1_2_2_2 + 6.76572105143655e-06*G0_2_0_0_0 - 3.6835592391154e-05*G0_2_0_0_2 - 3.6835592391154e-05*G0_2_0_2_0 - 0.000105244549689012*G0_2_0_2_2 - 6.76572105143656e-06*G0_2_1_1_1 + 3.68355923911541e-05*G0_2_1_1_2 + 3.68355923911541e-05*G0_2_1_2_1 + 0.000105244549689012*G0_2_1_2_2 - 3.6835592391154e-05*G0_2_2_0_0 - 0.000105244549689012*G0_2_2_0_2 + 3.68355923911541e-05*G0_2_2_1_1 + 0.000105244549689012*G0_2_2_1_2 - 0.000105244549689012*G0_2_2_2_0 + 0.000105244549689012*G0_2_2_2_1;
    A[78] = A[50];
    A[172] = A[116];
    A[155] = A[85];
    A[105] = A[7];
    A[98] = A[126];
    A[180] = A[12];
    A[173] = -A[41] + 0.00027544471988921*G0_0_0_0_0 + 2.32101819403445e-05*G0_0_0_0_1 + 2.61232007263796e-05*G0_0_0_0_2 + 2.32101819403445e-05*G0_0_0_1_0 + 2.36095474190749e-06*G0_0_0_1_1 + 2.61232007263796e-05*G0_0_0_2_0 + 1.55635076270023e-05*G0_0_0_2_2 + 2.32101819403445e-05*G0_0_1_0_0 + 2.36095474190749e-06*G0_0_1_0_1 + 2.36095474190749e-06*G0_0_1_1_0 + 3.38286052571812e-06*G0_0_1_1_1 + 2.61232007263796e-05*G0_0_2_0_0 + 1.55635076270023e-05*G0_0_2_0_2 + 1.55635076270023e-05*G0_0_2_2_0 + 5.91060908521326e-05*G0_0_2_2_2 + 2.32101819403445e-05*G0_1_0_0_0 + 2.36095474190749e-06*G0_1_0_0_1 + 2.36095474190749e-06*G0_1_0_1_0 + 3.38286052571812e-06*G0_1_0_1_1 + 2.36095474190749e-06*G0_1_1_0_0 + 3.38286052571812e-06*G0_1_1_0_1 + 3.3828605257181e-06*G0_1_1_1_0 - 5.67333900667338e-05*G0_1_1_1_1 - 3.71174974349644e-06*G0_1_1_1_2 - 3.71174974349644e-06*G0_1_1_2_1 - 3.71174974349643e-06*G0_1_2_1_1 + 2.67339949879678e-05*G0_1_2_2_2 + 2.61232007263797e-05*G0_2_0_0_0 + 1.55635076270023e-05*G0_2_0_0_2 + 1.55635076270023e-05*G0_2_0_2_0 + 5.91060908521326e-05*G0_2_0_2_2 - 3.71174974349643e-06*G0_2_1_1_1 + 2.67339949879678e-05*G0_2_1_2_2 + 1.55635076270023e-05*G0_2_2_0_0 + 5.91060908521326e-05*G0_2_2_0_2 + 2.67339949879678e-05*G0_2_2_1_2 + 5.91060908521326e-05*G0_2_2_2_0 + 2.67339949879678e-05*G0_2_2_2_1 + 0.000265578043355866*G0_2_2_2_2;
    A[118] = A[202];
    A[217] = A[119];
    A[6] = A[90];
    A[22] = A[106];
    A[9] = A[135];
    A[49] = A[65] + 8.17524627048574e-06*G0_0_0_0_1 - 8.17524627048573e-06*G0_0_0_0_2 + 8.17524627048574e-06*G0_0_0_1_0 - 2.2552403504788e-06*G0_0_0_1_1 - 8.17524627048573e-06*G0_0_0_2_0 + 2.25524035047881e-06*G0_0_0_2_2 + 8.17524627048574e-06*G0_0_1_0_0 - 2.2552403504788e-06*G0_0_1_0_1 - 2.2552403504788e-06*G0_0_1_1_0 - 0.000121219168838237*G0_0_1_1_1 - 1.07123916647744e-05*G0_0_1_1_2 - 1.07123916647744e-05*G0_0_1_2_1 + 1.07123916647744e-05*G0_0_1_2_2 - 8.17524627048573e-06*G0_0_2_0_0 + 2.25524035047881e-06*G0_0_2_0_2 - 1.07123916647744e-05*G0_0_2_1_1 + 1.07123916647744e-05*G0_0_2_1_2 + 2.25524035047881e-06*G0_0_2_2_0 + 1.07123916647744e-05*G0_0_2_2_1 + 0.000121219168838237*G0_0_2_2_2 + 8.17524627048574e-06*G0_1_0_0_0 - 2.2552403504788e-06*G0_1_0_0_1 - 2.2552403504788e-06*G0_1_0_1_0 - 0.000121219168838237*G0_1_0_1_1 - 1.07123916647744e-05*G0_1_0_1_2 - 1.07123916647744e-05*G0_1_0_2_1 + 1.07123916647744e-05*G0_1_0_2_2 - 2.2552403504788e-06*G0_1_1_0_0 - 0.000121219168838237*G0_1_1_0_1 - 1.07123916647744e-05*G0_1_1_0_2 - 0.000121219168838237*G0_1_1_1_0 - 0.00205226871893573*G0_1_1_1_1 - 0.000174781127162109*G0_1_1_1_2 - 1.07123916647744e-05*G0_1_1_2_0 - 0.000174781127162109*G0_1_1_2_1 - 1.07123916647744e-05*G0_1_2_0_1 + 1.07123916647744e-05*G0_1_2_0_2 - 1.07123916647744e-05*G0_1_2_1_0 - 0.000174781127162109*G0_1_2_1_1 + 1.07123916647744e-05*G0_1_2_2_0 + 0.000174781127162109*G0_1_2_2_2 - 8.17524627048573e-06*G0_2_0_0_0 + 2.25524035047881e-06*G0_2_0_0_2 - 1.07123916647744e-05*G0_2_0_1_1 + 1.07123916647744e-05*G0_2_0_1_2 + 2.2552403504788e-06*G0_2_0_2_0 + 1.07123916647744e-05*G0_2_0_2_1 + 0.000121219168838237*G0_2_0_2_2 - 1.07123916647744e-05*G0_2_1_0_1 + 1.07123916647744e-05*G0_2_1_0_2 - 1.07123916647744e-05*G0_2_1_1_0 - 0.000174781127162109*G0_2_1_1_1 + 1.07123916647744e-05*G0_2_1_2_0 + 0.000174781127162109*G0_2_1_2_2 + 2.25524035047881e-06*G0_2_2_0_0 + 1.07123916647744e-05*G0_2_2_0_1 + 0.000121219168838237*G0_2_2_0_2 + 1.07123916647744e-05*G0_2_2_1_0 + 0.000174781127162109*G0_2_2_1_2 + 0.000121219168838237*G0_2_2_2_0 + 0.000174781127162109*G0_2_2_2_1 + 0.00205226871893573*G0_2_2_2_2;
    A[34] = A[62];
    A[147] = A[189];
    A[124] = A[68];
    A[84] = -A[5] + 0.000265578043355865*G0_0_0_0_0 + 5.91060908521323e-05*G0_0_0_0_1 + 2.67339949879677e-05*G0_0_0_0_2 + 5.91060908521323e-05*G0_0_0_1_0 + 1.55635076270022e-05*G0_0_0_1_1 + 2.67339949879677e-05*G0_0_0_2_0 + 5.91060908521323e-05*G0_0_1_0_0 + 1.55635076270022e-05*G0_0_1_0_1 + 1.55635076270022e-05*G0_0_1_1_0 + 2.61232007263797e-05*G0_0_1_1_1 + 2.67339949879677e-05*G0_0_2_0_0 - 3.71174974349646e-06*G0_0_2_2_2 + 5.91060908521323e-05*G0_1_0_0_0 + 1.55635076270022e-05*G0_1_0_0_1 + 1.55635076270022e-05*G0_1_0_1_0 + 2.61232007263797e-05*G0_1_0_1_1 + 1.55635076270022e-05*G0_1_1_0_0 + 2.61232007263797e-05*G0_1_1_0_1 + 2.61232007263797e-05*G0_1_1_1_0 + 0.000275444719889211*G0_1_1_1_1 + 2.32101819403446e-05*G0_1_1_1_2 + 2.32101819403446e-05*G0_1_1_2_1 + 2.36095474190749e-06*G0_1_1_2_2 + 2.32101819403446e-05*G0_1_2_1_1 + 2.36095474190748e-06*G0_1_2_1_2 + 2.36095474190749e-06*G0_1_2_2_1 + 3.38286052571811e-06*G0_1_2_2_2 + 2.67339949879677e-05*G0_2_0_0_0 - 3.71174974349646e-06*G0_2_0_2_2 + 2.32101819403446e-05*G0_2_1_1_1 + 2.36095474190748e-06*G0_2_1_1_2 + 2.36095474190749e-06*G0_2_1_2_1 + 3.38286052571811e-06*G0_2_1_2_2 - 3.71174974349646e-06*G0_2_2_0_2 + 2.36095474190749e-06*G0_2_2_1_1 + 3.38286052571811e-06*G0_2_2_1_2 - 3.71174974349645e-06*G0_2_2_2_0 + 3.38286052571811e-06*G0_2_2_2_1 - 5.67333900667334e-05*G0_2_2_2_2;
    A[67] = A[109];
    A[161] = A[175];
    A[136] = A[24];
    A[96] = -A[97] + 0.00409795965351591*G0_0_0_0_0 + 0.000200622422844679*G0_0_0_0_1 + 0.00107546774213459*G0_0_0_0_2 + 0.000200622422844679*G0_0_0_1_0 + 1.71022393244645e-05*G0_0_0_1_1 + 5.32800532800623e-05*G0_0_0_1_2 + 0.00107546774213459*G0_0_0_2_0 + 5.32800532800623e-05*G0_0_0_2_1 + 0.000323626990293712*G0_0_0_2_2 + 0.000200622422844679*G0_0_1_0_0 + 1.71022393244645e-05*G0_0_1_0_1 + 5.32800532800623e-05*G0_0_1_0_2 + 1.71022393244645e-05*G0_0_1_1_0 + 6.43683183365833e-06*G0_0_1_1_1 + 4.74540157079922e-06*G0_0_1_1_2 + 5.32800532800623e-05*G0_0_1_2_0 + 4.74540157079922e-06*G0_0_1_2_1 + 6.10794261588019e-06*G0_0_1_2_2 + 0.00107546774213459*G0_0_2_0_0 + 5.32800532800623e-05*G0_0_2_0_1 + 0.000323626990293712*G0_0_2_0_2 + 5.32800532800623e-05*G0_0_2_1_0 + 4.74540157079922e-06*G0_0_2_1_1 + 6.10794261588019e-06*G0_0_2_1_2 + 0.000323626990293712*G0_0_2_2_0 + 6.10794261588019e-06*G0_0_2_2_1 + 1.36254104508101e-05*G0_0_2_2_2 + 0.000200622422844679*G0_1_0_0_0 + 1.71022393244645e-05*G0_1_0_0_1 + 5.32800532800623e-05*G0_1_0_0_2 + 1.71022393244645e-05*G0_1_0_1_0 + 6.43683183365833e-06*G0_1_0_1_1 + 4.74540157079922e-06*G0_1_0_1_2 + 5.32800532800623e-05*G0_1_0_2_0 + 4.74540157079922e-06*G0_1_0_2_1 + 6.10794261588019e-06*G0_1_0_2_2 + 1.71022393244645e-05*G0_1_1_0_0 + 6.43683183365833e-06*G0_1_1_0_1 + 4.74540157079922e-06*G0_1_1_0_2 + 6.43683183365833e-06*G0_1_1_1_0 + 2.76266942933657e-05*G0_1_1_1_1 + 8.03429374858089e-06*G0_1_1_1_2 + 4.74540157079922e-06*G0_1_1_2_0 + 8.03429374858088e-06*G0_1_1_2_1 - 6.20191096381668e-06*G0_1_1_2_2 + 5.32800532800623e-05*G0_1_2_0_0 + 4.74540157079922e-06*G0_1_2_0_1 + 6.10794261588019e-06*G0_1_2_0_2 + 4.74540157079922e-06*G0_1_2_1_0 + 8.03429374858088e-06*G0_1_2_1_1 - 6.20191096381668e-06*G0_1_2_1_2 + 6.1079426158802e-06*G0_1_2_2_0 - 6.20191096381668e-06*G0_1_2_2_1 - 5.77905339810197e-05*G0_1_2_2_2 + 0.00107546774213459*G0_2_0_0_0 + 5.32800532800623e-05*G0_2_0_0_1 + 0.000323626990293712*G0_2_0_0_2 + 5.32800532800623e-05*G0_2_0_1_0 + 4.74540157079922e-06*G0_2_0_1_1 + 6.10794261588019e-06*G0_2_0_1_2 + 0.000323626990293712*G0_2_0_2_0 + 6.10794261588019e-06*G0_2_0_2_1 + 1.36254104508101e-05*G0_2_0_2_2 + 5.32800532800623e-05*G0_2_1_0_0 + 4.74540157079922e-06*G0_2_1_0_1 + 6.1079426158802e-06*G0_2_1_0_2 + 4.74540157079922e-06*G0_2_1_1_0 + 8.03429374858088e-06*G0_2_1_1_1 - 6.20191096381668e-06*G0_2_1_1_2 + 6.1079426158802e-06*G0_2_1_2_0 - 6.20191096381667e-06*G0_2_1_2_1 - 5.77905339810197e-05*G0_2_1_2_2 + 0.000323626990293712*G0_2_2_0_0 + 6.1079426158802e-06*G0_2_2_0_1 + 1.362541045081e-05*G0_2_2_0_2 + 6.10794261588019e-06*G0_2_2_1_0 - 6.20191096381667e-06*G0_2_2_1_1 - 5.77905339810196e-05*G0_2_2_1_2 + 1.362541045081e-05*G0_2_2_2_0 - 5.77905339810196e-05*G0_2_2_2_1 - 0.000600457743314985*G0_2_2_2_2;
    A[81] = A[95];
    A[167] = A[41];
    A[156] = A[100];
    A[112] = A[160] - 0.000754800754800882*G0_0_0_0_1 + 0.000754800754800883*G0_0_0_0_2 - 0.000754800754800882*G0_0_0_1_0 - 0.000766640766640896*G0_0_0_1_1 + 0.000754800754800883*G0_0_0_2_0 + 0.000766640766640895*G0_0_0_2_2 - 0.000754800754800882*G0_0_1_0_0 - 0.000766640766640896*G0_0_1_0_1 - 0.000766640766640896*G0_0_1_1_0 - 0.00106845535416982*G0_0_1_1_1 - 8.74258017115308e-05*G0_0_1_1_2 - 8.74258017115308e-05*G0_0_1_2_1 + 8.74258017115305e-05*G0_0_1_2_2 + 0.000754800754800883*G0_0_2_0_0 + 0.000766640766640895*G0_0_2_0_2 - 8.74258017115308e-05*G0_0_2_1_1 + 8.74258017115305e-05*G0_0_2_1_2 + 0.000766640766640895*G0_0_2_2_0 + 8.74258017115305e-05*G0_0_2_2_1 + 0.00106845535416982*G0_0_2_2_2 - 0.000754800754800882*G0_1_0_0_0 - 0.000766640766640896*G0_1_0_0_1 - 0.000766640766640896*G0_1_0_1_0 - 0.00106845535416982*G0_1_0_1_1 - 8.74258017115308e-05*G0_1_0_1_2 - 8.74258017115308e-05*G0_1_0_2_1 + 8.74258017115305e-05*G0_1_0_2_2 - 0.000766640766640896*G0_1_1_0_0 - 0.00106845535416982*G0_1_1_0_1 - 8.74258017115308e-05*G0_1_1_0_2 - 0.00106845535416982*G0_1_1_1_0 - 0.00323993466850664*G0_1_1_1_1 - 0.000313654599368938*G0_1_1_1_2 - 8.74258017115308e-05*G0_1_1_2_0 - 0.000313654599368938*G0_1_1_2_1 - 8.74258017115308e-05*G0_1_2_0_1 + 8.74258017115305e-05*G0_1_2_0_2 - 8.74258017115308e-05*G0_1_2_1_0 - 0.000313654599368938*G0_1_2_1_1 + 8.74258017115305e-05*G0_1_2_2_0 + 0.000313654599368937*G0_1_2_2_2 + 0.000754800754800883*G0_2_0_0_0 + 0.000766640766640895*G0_2_0_0_2 - 8.74258017115308e-05*G0_2_0_1_1 + 8.74258017115305e-05*G0_2_0_1_2 + 0.000766640766640895*G0_2_0_2_0 + 8.74258017115305e-05*G0_2_0_2_1 + 0.00106845535416982*G0_2_0_2_2 - 8.74258017115308e-05*G0_2_1_0_1 + 8.74258017115304e-05*G0_2_1_0_2 - 8.74258017115308e-05*G0_2_1_1_0 - 0.000313654599368938*G0_2_1_1_1 + 8.74258017115305e-05*G0_2_1_2_0 + 0.000313654599368937*G0_2_1_2_2 + 0.000766640766640895*G0_2_2_0_0 + 8.74258017115304e-05*G0_2_2_0_1 + 0.00106845535416982*G0_2_2_0_2 + 8.74258017115304e-05*G0_2_2_1_0 + 0.000313654599368937*G0_2_2_1_2 + 0.00106845535416982*G0_2_2_2_0 + 0.000313654599368937*G0_2_2_2_1 + 0.00323993466850663*G0_2_2_2_2;
    A[223] = -A[12] - 7.68191244381851e-05*G0_0_0_0_0 - 0.000319257462114659*G0_0_0_0_1 - 0.000319257462114658*G0_0_0_0_2 - 0.000319257462114659*G0_0_0_1_0 - 0.0003547774976347*G0_0_0_1_1 - 0.000103459151078216*G0_0_0_1_2 - 0.000319257462114658*G0_0_0_2_0 - 0.000103459151078216*G0_0_0_2_1 - 0.0003547774976347*G0_0_0_2_2 - 0.000319257462114659*G0_0_1_0_0 - 0.0003547774976347*G0_0_1_0_1 - 0.000103459151078216*G0_0_1_0_2 - 0.0003547774976347*G0_0_1_1_0 - 0.000552392933345408*G0_0_1_1_1 - 8.95048514096285e-06*G0_0_1_1_2 - 0.000103459151078216*G0_0_1_2_0 - 8.95048514096285e-06*G0_0_1_2_1 - 8.95048514096267e-06*G0_0_1_2_2 - 0.000319257462114658*G0_0_2_0_0 - 0.000103459151078216*G0_0_2_0_1 - 0.0003547774976347*G0_0_2_0_2 - 0.000103459151078216*G0_0_2_1_0 - 8.95048514096282e-06*G0_0_2_1_1 - 8.95048514096267e-06*G0_0_2_1_2 - 0.0003547774976347*G0_0_2_2_0 - 8.95048514096267e-06*G0_0_2_2_1 - 0.000552392933345406*G0_0_2_2_2 - 0.000319257462114659*G0_1_0_0_0 - 0.0003547774976347*G0_1_0_0_1 - 0.000103459151078216*G0_1_0_0_2 - 0.0003547774976347*G0_1_0_1_0 - 0.000552392933345408*G0_1_0_1_1 - 8.95048514096287e-06*G0_1_0_1_2 - 0.000103459151078216*G0_1_0_2_0 - 8.95048514096284e-06*G0_1_0_2_1 - 8.95048514096266e-06*G0_1_0_2_2 - 0.0003547774976347*G0_1_1_0_0 - 0.000552392933345408*G0_1_1_0_1 - 8.95048514096284e-06*G0_1_1_0_2 - 0.000552392933345408*G0_1_1_1_0 - 0.0012960584389158*G0_1_1_1_1 + 0.000151383008525891*G0_1_1_1_2 - 8.95048514096282e-06*G0_1_1_2_0 + 0.000151383008525891*G0_1_1_2_1 + 0.000335114620828963*G0_1_1_2_2 - 0.000103459151078216*G0_1_2_0_0 - 8.95048514096284e-06*G0_1_2_0_1 - 8.95048514096269e-06*G0_1_2_0_2 - 8.95048514096281e-06*G0_1_2_1_0 + 0.000151383008525891*G0_1_2_1_1 + 0.000335114620828963*G0_1_2_1_2 - 8.95048514096269e-06*G0_1_2_2_0 + 0.000335114620828963*G0_1_2_2_1 + 0.000151383008525892*G0_1_2_2_2 - 0.000319257462114658*G0_2_0_0_0 - 0.000103459151078216*G0_2_0_0_1 - 0.0003547774976347*G0_2_0_0_2 - 0.000103459151078216*G0_2_0_1_0 - 8.95048514096282e-06*G0_2_0_1_1 - 8.95048514096267e-06*G0_2_0_1_2 - 0.0003547774976347*G0_2_0_2_0 - 8.95048514096267e-06*G0_2_0_2_1 - 0.000552392933345406*G0_2_0_2_2 - 0.000103459151078216*G0_2_1_0_0 - 8.95048514096283e-06*G0_2_1_0_1 - 8.95048514096268e-06*G0_2_1_0_2 - 8.95048514096283e-06*G0_2_1_1_0 + 0.000151383008525891*G0_2_1_1_1 + 0.000335114620828963*G0_2_1_1_2 - 8.95048514096268e-06*G0_2_1_2_0 + 0.000335114620828963*G0_2_1_2_1 + 0.000151383008525892*G0_2_1_2_2 - 0.0003547774976347*G0_2_2_0_0 - 8.95048514096269e-06*G0_2_2_0_1 - 0.000552392933345406*G0_2_2_0_2 - 8.95048514096269e-06*G0_2_2_1_0 + 0.000335114620828963*G0_2_2_1_1 + 0.000151383008525892*G0_2_2_1_2 - 0.000552392933345406*G0_2_2_2_0 + 0.000151383008525892*G0_2_2_2_1 - 0.0012960584389158*G0_2_2_2_2;
    A[185] = -A[95] + 0.000494273510146608*G0_0_0_0_0 + 0.000178163987687827*G0_0_0_0_1 + 5.90121225041959e-05*G0_0_0_0_2 + 0.000178163987687827*G0_0_0_1_0 + 9.94185121169415e-05*G0_0_0_1_1 + 2.49955805511403e-05*G0_0_0_1_2 + 5.90121225041959e-05*G0_0_0_2_0 + 2.49955805511403e-05*G0_0_0_2_1 - 6.38984765969003e-06*G0_0_0_2_2 + 0.000178163987687827*G0_0_1_0_0 + 9.94185121169415e-05*G0_0_1_0_1 + 2.49955805511403e-05*G0_0_1_0_2 + 9.94185121169415e-05*G0_0_1_1_0 + 6.08914894629282e-05*G0_0_1_1_1 + 2.49955805511403e-05*G0_0_1_2_0 - 6.7657210514365e-06*G0_0_1_2_2 + 5.90121225041959e-05*G0_0_2_0_0 + 2.49955805511403e-05*G0_0_2_0_1 - 6.38984765969003e-06*G0_0_2_0_2 + 2.49955805511403e-05*G0_0_2_1_0 - 6.7657210514365e-06*G0_0_2_1_2 - 6.38984765969003e-06*G0_0_2_2_0 - 6.7657210514365e-06*G0_0_2_2_1 - 1.31555687111266e-05*G0_0_2_2_2 + 0.000178163987687827*G0_1_0_0_0 + 9.94185121169415e-05*G0_1_0_0_1 + 2.49955805511403e-05*G0_1_0_0_2 + 9.94185121169415e-05*G0_1_0_1_0 + 6.08914894629282e-05*G0_1_0_1_1 + 2.49955805511403e-05*G0_1_0_2_0 - 6.7657210514365e-06*G0_1_0_2_2 + 9.94185121169415e-05*G0_1_1_0_0 + 6.08914894629282e-05*G0_1_1_0_1 + 6.08914894629282e-05*G0_1_1_1_0 - 9.2088980977886e-05*G0_1_1_1_1 + 4.88635409270407e-06*G0_1_1_1_2 + 4.88635409270407e-06*G0_1_1_2_1 - 1.69143026285913e-05*G0_1_1_2_2 + 2.49955805511403e-05*G0_1_2_0_0 - 6.7657210514365e-06*G0_1_2_0_2 + 4.88635409270407e-06*G0_1_2_1_1 - 1.69143026285912e-05*G0_1_2_1_2 - 6.7657210514365e-06*G0_1_2_2_0 - 1.69143026285912e-05*G0_1_2_2_1 - 6.57778435556326e-05*G0_1_2_2_2 + 5.90121225041959e-05*G0_2_0_0_0 + 2.49955805511403e-05*G0_2_0_0_1 - 6.38984765969003e-06*G0_2_0_0_2 + 2.49955805511403e-05*G0_2_0_1_0 - 6.7657210514365e-06*G0_2_0_1_2 - 6.38984765969003e-06*G0_2_0_2_0 - 6.7657210514365e-06*G0_2_0_2_1 - 1.31555687111266e-05*G0_2_0_2_2 + 2.49955805511403e-05*G0_2_1_0_0 - 6.7657210514365e-06*G0_2_1_0_2 + 4.88635409270407e-06*G0_2_1_1_1 - 1.69143026285912e-05*G0_2_1_1_2 - 6.7657210514365e-06*G0_2_1_2_0 - 1.69143026285912e-05*G0_2_1_2_1 - 6.57778435556326e-05*G0_2_1_2_2 - 6.38984765969003e-06*G0_2_2_0_0 - 6.7657210514365e-06*G0_2_2_0_1 - 1.31555687111266e-05*G0_2_2_0_2 - 6.7657210514365e-06*G0_2_2_1_0 - 1.69143026285912e-05*G0_2_2_1_1 - 6.57778435556326e-05*G0_2_2_1_2 - 1.31555687111266e-05*G0_2_2_2_0 - 6.57778435556326e-05*G0_2_2_2_1 + 9.20889809778831e-05*G0_2_2_2_2;
    A[88] = A[185] - 0.000293181245562247*G0_0_0_0_0 - 5.86362491124493e-05*G0_0_0_0_1 - 2.70628842057458e-05*G0_0_0_0_2 - 5.86362491124493e-05*G0_0_0_1_0 + 5.86362491124495e-05*G0_0_0_1_1 - 2.70628842057458e-05*G0_0_0_2_0 - 4.51048070095757e-06*G0_0_0_2_2 - 5.86362491124493e-05*G0_0_1_0_0 + 5.86362491124495e-05*G0_0_1_0_1 + 5.86362491124495e-05*G0_0_1_1_0 + 0.000293181245562247*G0_0_1_1_1 + 2.70628842057459e-05*G0_0_1_1_2 + 2.70628842057459e-05*G0_0_1_2_1 + 4.51048070095771e-06*G0_0_1_2_2 - 2.70628842057458e-05*G0_0_2_0_0 - 4.51048070095758e-06*G0_0_2_0_2 + 2.70628842057459e-05*G0_0_2_1_1 + 4.5104807009577e-06*G0_0_2_1_2 - 4.51048070095757e-06*G0_0_2_2_0 + 4.5104807009577e-06*G0_0_2_2_1 - 5.86362491124493e-05*G0_1_0_0_0 + 5.86362491124495e-05*G0_1_0_0_1 + 5.86362491124495e-05*G0_1_0_1_0 + 0.000293181245562247*G0_1_0_1_1 + 2.70628842057459e-05*G0_1_0_1_2 + 2.70628842057459e-05*G0_1_0_2_1 + 4.51048070095771e-06*G0_1_0_2_2 + 5.86362491124495e-05*G0_1_1_0_0 + 0.000293181245562247*G0_1_1_0_1 + 2.70628842057459e-05*G0_1_1_0_2 + 0.000293181245562247*G0_1_1_1_0 + 0.00146590622781124*G0_1_1_1_1 + 0.00013531442102873*G0_1_1_1_2 + 2.70628842057459e-05*G0_1_1_2_0 + 0.00013531442102873*G0_1_1_2_1 + 2.7062884205746e-05*G0_1_1_2_2 + 2.70628842057459e-05*G0_1_2_0_1 + 4.5104807009577e-06*G0_1_2_0_2 + 2.70628842057459e-05*G0_1_2_1_0 + 0.00013531442102873*G0_1_2_1_1 + 2.7062884205746e-05*G0_1_2_1_2 + 4.5104807009577e-06*G0_1_2_2_0 + 2.7062884205746e-05*G0_1_2_2_1 + 0.000157866824533518*G0_1_2_2_2 - 2.70628842057458e-05*G0_2_0_0_0 - 4.51048070095758e-06*G0_2_0_0_2 + 2.70628842057459e-05*G0_2_0_1_1 + 4.5104807009577e-06*G0_2_0_1_2 - 4.51048070095758e-06*G0_2_0_2_0 + 4.5104807009577e-06*G0_2_0_2_1 + 2.70628842057459e-05*G0_2_1_0_1 + 4.5104807009577e-06*G0_2_1_0_2 + 2.70628842057459e-05*G0_2_1_1_0 + 0.00013531442102873*G0_2_1_1_1 + 2.7062884205746e-05*G0_2_1_1_2 + 4.5104807009577e-06*G0_2_1_2_0 + 2.7062884205746e-05*G0_2_1_2_1 + 0.000157866824533518*G0_2_1_2_2 - 4.51048070095758e-06*G0_2_2_0_0 + 4.5104807009577e-06*G0_2_2_0_1 + 4.51048070095771e-06*G0_2_2_1_0 + 2.7062884205746e-05*G0_2_2_1_1 + 0.000157866824533518*G0_2_2_1_2 + 0.000157866824533518*G0_2_2_2_1 + 0.000473600473600556*G0_2_2_2_2;
    A[200] = A[88];
    A[210] = A[14];
    A[203] = A[133];
    A[3] = A[45];
    A[59] = A[213];
    A[17] = A[31];
    A[134] = A[218];
    A[69] = A[139];
    A[48] = -A[49] + 2.76266942933655e-05*G0_0_0_0_0 + 6.43683183365831e-06*G0_0_0_0_1 + 8.0342937485808e-06*G0_0_0_0_2 + 6.43683183365832e-06*G0_0_0_1_0 + 1.71022393244645e-05*G0_0_0_1_1 + 4.74540157079919e-06*G0_0_0_1_2 + 8.0342937485808e-06*G0_0_0_2_0 + 4.74540157079919e-06*G0_0_0_2_1 - 6.20191096381675e-06*G0_0_0_2_2 + 6.43683183365831e-06*G0_0_1_0_0 + 1.71022393244644e-05*G0_0_1_0_1 + 4.74540157079919e-06*G0_0_1_0_2 + 1.71022393244644e-05*G0_0_1_1_0 + 0.000200622422844679*G0_0_1_1_1 + 5.32800532800623e-05*G0_0_1_1_2 + 4.74540157079919e-06*G0_0_1_2_0 + 5.32800532800623e-05*G0_0_1_2_1 + 6.10794261588019e-06*G0_0_1_2_2 + 8.0342937485808e-06*G0_0_2_0_0 + 4.74540157079919e-06*G0_0_2_0_1 - 6.20191096381675e-06*G0_0_2_0_2 + 4.74540157079919e-06*G0_0_2_1_0 + 5.32800532800623e-05*G0_0_2_1_1 + 6.10794261588019e-06*G0_0_2_1_2 - 6.20191096381675e-06*G0_0_2_2_0 + 6.10794261588019e-06*G0_0_2_2_1 - 5.77905339810198e-05*G0_0_2_2_2 + 6.43683183365831e-06*G0_1_0_0_0 + 1.71022393244645e-05*G0_1_0_0_1 + 4.74540157079919e-06*G0_1_0_0_2 + 1.71022393244645e-05*G0_1_0_1_0 + 0.000200622422844679*G0_1_0_1_1 + 5.32800532800623e-05*G0_1_0_1_2 + 4.74540157079919e-06*G0_1_0_2_0 + 5.32800532800623e-05*G0_1_0_2_1 + 6.10794261588019e-06*G0_1_0_2_2 + 1.71022393244644e-05*G0_1_1_0_0 + 0.000200622422844679*G0_1_1_0_1 + 5.32800532800623e-05*G0_1_1_0_2 + 0.000200622422844679*G0_1_1_1_0 + 0.00409795965351591*G0_1_1_1_1 + 0.00107546774213459*G0_1_1_1_2 + 5.32800532800623e-05*G0_1_1_2_0 + 0.00107546774213459*G0_1_1_2_1 + 0.000323626990293712*G0_1_1_2_2 + 4.74540157079919e-06*G0_1_2_0_0 + 5.32800532800623e-05*G0_1_2_0_1 + 6.1079426158802e-06*G0_1_2_0_2 + 5.32800532800623e-05*G0_1_2_1_0 + 0.00107546774213459*G0_1_2_1_1 + 0.000323626990293712*G0_1_2_1_2 + 6.10794261588019e-06*G0_1_2_2_0 + 0.000323626990293712*G0_1_2_2_1 + 1.36254104508099e-05*G0_1_2_2_2 + 8.0342937485808e-06*G0_2_0_0_0 + 4.74540157079919e-06*G0_2_0_0_1 - 6.20191096381675e-06*G0_2_0_0_2 + 4.74540157079919e-06*G0_2_0_1_0 + 5.32800532800623e-05*G0_2_0_1_1 + 6.10794261588019e-06*G0_2_0_1_2 - 6.20191096381675e-06*G0_2_0_2_0 + 6.10794261588019e-06*G0_2_0_2_1 - 5.77905339810198e-05*G0_2_0_2_2 + 4.74540157079919e-06*G0_2_1_0_0 + 5.32800532800623e-05*G0_2_1_0_1 + 6.10794261588019e-06*G0_2_1_0_2 + 5.32800532800623e-05*G0_2_1_1_0 + 0.00107546774213459*G0_2_1_1_1 + 0.000323626990293712*G0_2_1_1_2 + 6.10794261588019e-06*G0_2_1_2_0 + 0.000323626990293712*G0_2_1_2_1 + 1.36254104508099e-05*G0_2_1_2_2 - 6.20191096381675e-06*G0_2_2_0_0 + 6.10794261588019e-06*G0_2_2_0_1 - 5.77905339810198e-05*G0_2_2_0_2 + 6.1079426158802e-06*G0_2_2_1_0 + 0.000323626990293712*G0_2_2_1_1 + 1.36254104508099e-05*G0_2_2_1_2 - 5.77905339810198e-05*G0_2_2_2_0 + 1.36254104508099e-05*G0_2_2_2_1 - 0.000600457743314987*G0_2_2_2_2;
    A[39] = A[137];
    A[121] = A[2] + 2.09887114649056e-05*G0_0_0_0_0 - 1.2209278082296e-05*G0_0_0_2_2 - 1.2209278082296e-05*G0_0_2_0_2 - 1.2209278082296e-05*G0_0_2_2_0 - 4.97415576780739e-05*G0_0_2_2_2 + 2.23615302980394e-06*G0_1_1_1_1 - 2.79482422339612e-05*G0_1_2_2_2 - 1.2209278082296e-05*G0_2_0_0_2 - 1.2209278082296e-05*G0_2_0_2_0 - 4.97415576780739e-05*G0_2_0_2_2 - 2.79482422339612e-05*G0_2_1_2_2 - 1.2209278082296e-05*G0_2_2_0_0 - 4.97415576780739e-05*G0_2_2_0_2 - 2.79482422339612e-05*G0_2_2_1_2 - 4.97415576780739e-05*G0_2_2_2_0 - 2.79482422339612e-05*G0_2_2_2_1 - 0.00021722105055442*G0_2_2_2_2;
    A[211] = A[121] + 8.04603979207289e-05*G0_0_0_0_0 - 1.86057328914503e-05*G0_0_0_0_2 - 1.86057328914503e-05*G0_0_0_2_0 - 3.08098720797185e-05*G0_0_0_2_2 - 5.89651383302275e-06*G0_0_1_2_2 - 1.86057328914503e-05*G0_0_2_0_0 - 3.08098720797185e-05*G0_0_2_0_2 - 5.89651383302275e-06*G0_0_2_1_2 - 3.08098720797185e-05*G0_0_2_2_0 - 5.89651383302275e-06*G0_0_2_2_1 - 3.52381304762316e-05*G0_0_2_2_2 - 5.89651383302275e-06*G0_1_0_2_2 - 0.000109355664911239*G0_1_1_1_1 - 5.89651383302275e-06*G0_1_2_0_2 - 5.89651383302275e-06*G0_1_2_2_0 - 2.34920869841538e-06*G0_1_2_2_2 - 1.86057328914503e-05*G0_2_0_0_0 - 3.08098720797185e-05*G0_2_0_0_2 - 5.89651383302275e-06*G0_2_0_1_2 - 3.08098720797185e-05*G0_2_0_2_0 - 5.89651383302275e-06*G0_2_0_2_1 - 3.52381304762316e-05*G0_2_0_2_2 - 5.89651383302275e-06*G0_2_1_0_2 - 5.89651383302275e-06*G0_2_1_2_0 - 2.34920869841538e-06*G0_2_1_2_2 - 3.08098720797185e-05*G0_2_2_0_0 - 5.89651383302275e-06*G0_2_2_0_1 - 3.52381304762316e-05*G0_2_2_0_2 - 5.89651383302275e-06*G0_2_2_1_0 - 2.34920869841538e-06*G0_2_2_1_2 - 3.52381304762316e-05*G0_2_2_2_0 - 2.34920869841538e-06*G0_2_2_2_1 - 2.70159000317763e-06*G0_2_2_2_2;
    A[157] = A[211] + 0.00144582049343978*G0_0_0_0_0 + 8.57696095791478e-05*G0_0_0_0_1 + 0.000108744870649651*G0_0_0_0_2 + 8.57696095791478e-05*G0_0_0_1_0 - 5.10952891905357e-05*G0_0_0_1_1 + 0.000108744870649651*G0_0_0_2_0 - 5.49714835429218e-06*G0_0_0_2_2 + 8.57696095791479e-05*G0_0_1_0_0 - 5.10952891905357e-05*G0_0_1_0_1 - 5.10952891905357e-05*G0_0_1_1_0 - 7.11105473010354e-05*G0_0_1_1_1 - 1.22276312752524e-05*G0_0_1_1_2 - 1.22276312752524e-05*G0_0_1_2_1 + 1.51523961047793e-06*G0_0_1_2_2 + 0.000108744870649651*G0_0_2_0_0 - 5.49714835429217e-06*G0_0_2_0_2 - 1.22276312752524e-05*G0_0_2_1_1 + 1.51523961047793e-06*G0_0_2_1_2 - 5.49714835429217e-06*G0_0_2_2_0 + 1.51523961047793e-06*G0_0_2_2_1 + 2.54419302038391e-05*G0_0_2_2_2 + 8.57696095791478e-05*G0_1_0_0_0 - 5.10952891905357e-05*G0_1_0_0_1 - 5.10952891905357e-05*G0_1_0_1_0 - 7.11105473010354e-05*G0_1_0_1_1 - 1.22276312752524e-05*G0_1_0_1_2 - 1.22276312752524e-05*G0_1_0_2_1 + 1.51523961047793e-06*G0_1_0_2_2 - 5.10952891905357e-05*G0_1_1_0_0 - 7.11105473010354e-05*G0_1_1_0_1 - 1.22276312752524e-05*G0_1_1_0_2 - 7.11105473010354e-05*G0_1_1_1_0 - 6.69524479048541e-06*G0_1_1_1_1 - 1.22276312752524e-05*G0_1_1_2_0 - 1.22276312752524e-05*G0_1_2_0_1 + 1.51523961047793e-06*G0_1_2_0_2 - 1.22276312752524e-05*G0_1_2_1_0 + 1.51523961047793e-06*G0_1_2_2_0 + 2.50895488990767e-05*G0_1_2_2_2 + 0.000108744870649651*G0_2_0_0_0 - 5.49714835429218e-06*G0_2_0_0_2 - 1.22276312752524e-05*G0_2_0_1_1 + 1.51523961047793e-06*G0_2_0_1_2 - 5.49714835429217e-06*G0_2_0_2_0 + 1.51523961047793e-06*G0_2_0_2_1 + 2.54419302038391e-05*G0_2_0_2_2 - 1.22276312752524e-05*G0_2_1_0_1 + 1.51523961047793e-06*G0_2_1_0_2 - 1.22276312752524e-05*G0_2_1_1_0 + 1.51523961047793e-06*G0_2_1_2_0 + 2.50895488990767e-05*G0_2_1_2_2 - 5.49714835429217e-06*G0_2_2_0_0 + 1.51523961047794e-06*G0_2_2_0_1 + 2.54419302038391e-05*G0_2_2_0_2 + 1.51523961047793e-06*G0_2_2_1_0 + 2.50895488990767e-05*G0_2_2_1_2 + 2.54419302038391e-05*G0_2_2_2_0 + 2.50895488990767e-05*G0_2_2_2_1 + 0.000208962113724053*G0_2_2_2_2;
    A[46] = A[121] + 4.31549637898917e-05*G0_0_0_0_0 - 3.92317852635379e-06*G0_0_0_0_2 - 3.92317852635379e-06*G0_0_0_2_0 + 1.13936621873148e-06*G0_0_0_2_2 + 4.91689380578353e-05*G0_0_1_1_1 - 3.9231785263538e-06*G0_0_2_0_0 + 1.13936621873148e-06*G0_0_2_0_2 + 1.13936621873148e-06*G0_0_2_2_0 + 3.10565389930521e-05*G0_0_2_2_2 + 4.91689380578353e-05*G0_1_0_1_1 + 4.91689380578353e-05*G0_1_1_0_1 + 4.91689380578353e-05*G0_1_1_1_0 + 0.00149891261002398*G0_1_1_1_1 + 9.73512084623362e-05*G0_1_1_1_2 + 9.73512084623362e-05*G0_1_1_2_1 + 9.73512084623362e-05*G0_1_2_1_1 + 6.10794261588013e-06*G0_1_2_2_2 - 3.9231785263538e-06*G0_2_0_0_0 + 1.13936621873148e-06*G0_2_0_0_2 + 1.13936621873148e-06*G0_2_0_2_0 + 3.10565389930521e-05*G0_2_0_2_2 + 9.73512084623362e-05*G0_2_1_1_1 + 6.10794261588013e-06*G0_2_1_2_2 + 1.13936621873148e-06*G0_2_2_0_0 + 3.10565389930521e-05*G0_2_2_0_2 + 6.10794261588013e-06*G0_2_2_1_2 + 3.10565389930521e-05*G0_2_2_2_0 + 6.10794261588014e-06*G0_2_2_2_1 + 0.000180066846733543*G0_2_2_2_2;
    A[18] = A[46];
    A[29] = A[211];
    A[87] = A[185];
    A[64] = A[160] - 0.00323993466850664*G0_0_0_0_0 - 0.00106845535416982*G0_0_0_0_1 - 0.000313654599368938*G0_0_0_0_2 - 0.00106845535416982*G0_0_0_1_0 - 0.000766640766640896*G0_0_0_1_1 - 8.74258017115308e-05*G0_0_0_1_2 - 0.000313654599368938*G0_0_0_2_0 - 8.74258017115308e-05*G0_0_0_2_1 - 0.00106845535416982*G0_0_1_0_0 - 0.000766640766640896*G0_0_1_0_1 - 8.74258017115308e-05*G0_0_1_0_2 - 0.000766640766640896*G0_0_1_1_0 - 0.000754800754800882*G0_0_1_1_1 - 8.74258017115308e-05*G0_0_1_2_0 + 8.74258017115306e-05*G0_0_1_2_2 - 0.000313654599368938*G0_0_2_0_0 - 8.74258017115308e-05*G0_0_2_0_1 - 8.74258017115308e-05*G0_0_2_1_0 + 8.74258017115306e-05*G0_0_2_1_2 + 8.74258017115306e-05*G0_0_2_2_1 + 0.000313654599368937*G0_0_2_2_2 - 0.00106845535416982*G0_1_0_0_0 - 0.000766640766640896*G0_1_0_0_1 - 8.74258017115308e-05*G0_1_0_0_2 - 0.000766640766640896*G0_1_0_1_0 - 0.000754800754800882*G0_1_0_1_1 - 8.74258017115308e-05*G0_1_0_2_0 + 8.74258017115306e-05*G0_1_0_2_2 - 0.000766640766640896*G0_1_1_0_0 - 0.000754800754800882*G0_1_1_0_1 - 0.000754800754800882*G0_1_1_1_0 + 0.000754800754800882*G0_1_1_1_2 + 0.000754800754800882*G0_1_1_2_1 + 0.000766640766640896*G0_1_1_2_2 - 8.74258017115308e-05*G0_1_2_0_0 + 8.74258017115306e-05*G0_1_2_0_2 + 0.000754800754800882*G0_1_2_1_1 + 0.000766640766640896*G0_1_2_1_2 + 8.74258017115306e-05*G0_1_2_2_0 + 0.000766640766640896*G0_1_2_2_1 + 0.00106845535416982*G0_1_2_2_2 - 0.000313654599368938*G0_2_0_0_0 - 8.74258017115308e-05*G0_2_0_0_1 - 8.74258017115308e-05*G0_2_0_1_0 + 8.74258017115306e-05*G0_2_0_1_2 + 8.74258017115306e-05*G0_2_0_2_1 + 0.000313654599368937*G0_2_0_2_2 - 8.74258017115308e-05*G0_2_1_0_0 + 8.74258017115306e-05*G0_2_1_0_2 + 0.000754800754800882*G0_2_1_1_1 + 0.000766640766640896*G0_2_1_1_2 + 8.74258017115306e-05*G0_2_1_2_0 + 0.000766640766640896*G0_2_1_2_1 + 0.00106845535416982*G0_2_1_2_2 + 8.74258017115306e-05*G0_2_2_0_1 + 0.000313654599368937*G0_2_2_0_2 + 8.74258017115306e-05*G0_2_2_1_0 + 0.000766640766640896*G0_2_2_1_1 + 0.00106845535416982*G0_2_2_1_2 + 0.000313654599368937*G0_2_2_2_0 + 0.00106845535416982*G0_2_2_2_1 + 0.00323993466850664*G0_2_2_2_2;
    A[162] = A[214] - 0.00209737352594531*G0_0_0_0_0 + 1.52228723657315e-05*G0_0_0_0_1 - 0.000392411820983316*G0_0_0_0_2 + 1.52228723657316e-05*G0_0_0_1_0 + 0.000243565957851713*G0_0_0_1_1 - 0.000392411820983316*G0_0_0_2_0 + 1.52228723657316e-05*G0_0_1_0_0 + 0.000243565957851713*G0_0_1_0_1 + 0.000243565957851713*G0_0_1_1_0 + 0.000194514480228799*G0_0_1_1_1 - 0.000392411820983316*G0_0_2_0_0 + 0.000392411820983315*G0_0_2_2_2 + 1.52228723657316e-05*G0_1_0_0_0 + 0.000243565957851713*G0_1_0_0_1 + 0.000243565957851713*G0_1_0_1_0 + 0.000194514480228799*G0_1_0_1_1 + 0.000243565957851713*G0_1_1_0_0 + 0.000194514480228799*G0_1_1_0_1 + 0.000194514480228799*G0_1_1_1_0 - 0.000194514480228798*G0_1_1_1_2 - 0.000194514480228798*G0_1_1_2_1 - 0.000243565957851713*G0_1_1_2_2 - 0.000194514480228798*G0_1_2_1_1 - 0.000243565957851713*G0_1_2_1_2 - 0.000243565957851713*G0_1_2_2_1 - 1.52228723657324e-05*G0_1_2_2_2 - 0.000392411820983316*G0_2_0_0_0 + 0.000392411820983315*G0_2_0_2_2 - 0.000194514480228798*G0_2_1_1_1 - 0.000243565957851713*G0_2_1_1_2 - 0.000243565957851713*G0_2_1_2_1 - 1.52228723657324e-05*G0_2_1_2_2 + 0.000392411820983315*G0_2_2_0_2 - 0.000243565957851713*G0_2_2_1_1 - 1.52228723657324e-05*G0_2_2_1_2 + 0.000392411820983315*G0_2_2_2_0 - 1.52228723657323e-05*G0_2_2_2_1 + 0.0020973735259453*G0_2_2_2_2;
    A[93] = A[51];
    A[166] = A[26];
    A[115] = A[157];
    A[224] = A[192] - 0.00866012294583869*G0_0_0_0_0 - 0.00243565957851713*G0_0_0_0_1 - 0.00216503073645967*G0_0_0_0_2 - 0.00243565957851713*G0_0_0_1_0 - 0.00086601229458387*G0_0_0_1_1 - 0.000487131915703427*G0_0_0_1_2 - 0.00216503073645967*G0_0_0_2_0 - 0.000487131915703427*G0_0_0_2_1 - 0.00243565957851713*G0_0_1_0_0 - 0.00086601229458387*G0_0_1_0_1 - 0.000487131915703427*G0_0_1_0_2 - 0.000866012294583869*G0_0_1_1_0 - 0.000270628842057459*G0_0_1_1_1 - 0.000487131915703427*G0_0_1_2_0 + 0.000487131915703425*G0_0_1_2_2 - 0.00216503073645967*G0_0_2_0_0 - 0.000487131915703427*G0_0_2_0_1 - 0.000487131915703427*G0_0_2_1_0 + 0.000487131915703425*G0_0_2_1_2 + 0.000487131915703425*G0_0_2_2_1 + 0.00216503073645967*G0_0_2_2_2 - 0.00243565957851713*G0_1_0_0_0 - 0.00086601229458387*G0_1_0_0_1 - 0.000487131915703427*G0_1_0_0_2 - 0.00086601229458387*G0_1_0_1_0 - 0.000270628842057459*G0_1_0_1_1 - 0.000487131915703427*G0_1_0_2_0 + 0.000487131915703425*G0_1_0_2_2 - 0.00086601229458387*G0_1_1_0_0 - 0.000270628842057459*G0_1_1_0_1 - 0.000270628842057459*G0_1_1_1_0 + 0.000270628842057458*G0_1_1_1_2 + 0.000270628842057459*G0_1_1_2_1 + 0.000866012294583867*G0_1_1_2_2 - 0.000487131915703427*G0_1_2_0_0 + 0.000487131915703425*G0_1_2_0_2 + 0.000270628842057459*G0_1_2_1_1 + 0.000866012294583867*G0_1_2_1_2 + 0.000487131915703426*G0_1_2_2_0 + 0.000866012294583867*G0_1_2_2_1 + 0.00243565957851713*G0_1_2_2_2 - 0.00216503073645967*G0_2_0_0_0 - 0.000487131915703427*G0_2_0_0_1 - 0.000487131915703427*G0_2_0_1_0 + 0.000487131915703425*G0_2_0_1_2 + 0.000487131915703425*G0_2_0_2_1 + 0.00216503073645967*G0_2_0_2_2 - 0.000487131915703427*G0_2_1_0_0 + 0.000487131915703425*G0_2_1_0_2 + 0.000270628842057458*G0_2_1_1_1 + 0.000866012294583867*G0_2_1_1_2 + 0.000487131915703425*G0_2_1_2_0 + 0.000866012294583867*G0_2_1_2_1 + 0.00243565957851713*G0_2_1_2_2 + 0.000487131915703426*G0_2_2_0_1 + 0.00216503073645967*G0_2_2_0_2 + 0.000487131915703425*G0_2_2_1_0 + 0.000866012294583867*G0_2_2_1_1 + 0.00243565957851713*G0_2_2_1_2 + 0.00216503073645967*G0_2_2_2_0 + 0.00243565957851713*G0_2_2_2_1 + 0.00866012294583867*G0_2_2_2_2;
    A[190] = A[162];
    A[206] = A[178];
    A[0] = 0.00166469333136028*G0_0_0_0_0 + 6.73709007042453e-05*G0_0_0_0_1 + 6.73709007042454e-05*G0_0_0_0_2 + 6.73709007042453e-05*G0_0_0_1_0 + 7.29722951945297e-06*G0_0_0_1_1 + 3.64861475972648e-06*G0_0_0_1_2 + 6.73709007042454e-05*G0_0_0_2_0 + 3.64861475972648e-06*G0_0_0_2_1 + 7.29722951945298e-06*G0_0_0_2_2 + 6.73709007042453e-05*G0_0_1_0_0 + 7.29722951945297e-06*G0_0_1_0_1 + 3.64861475972648e-06*G0_0_1_0_2 + 7.29722951945297e-06*G0_0_1_1_0 + 5.47292213958973e-06*G0_0_1_1_1 + 1.82430737986324e-06*G0_0_1_1_2 + 3.64861475972648e-06*G0_0_1_2_0 + 1.82430737986324e-06*G0_0_1_2_1 + 1.82430737986324e-06*G0_0_1_2_2 + 6.73709007042454e-05*G0_0_2_0_0 + 3.64861475972648e-06*G0_0_2_0_1 + 7.29722951945298e-06*G0_0_2_0_2 + 3.64861475972648e-06*G0_0_2_1_0 + 1.82430737986324e-06*G0_0_2_1_1 + 1.82430737986324e-06*G0_0_2_1_2 + 7.29722951945298e-06*G0_0_2_2_0 + 1.82430737986324e-06*G0_0_2_2_1 + 5.47292213958973e-06*G0_0_2_2_2 + 6.73709007042453e-05*G0_1_0_0_0 + 7.29722951945297e-06*G0_1_0_0_1 + 3.64861475972648e-06*G0_1_0_0_2 + 7.29722951945297e-06*G0_1_0_1_0 + 5.47292213958973e-06*G0_1_0_1_1 + 1.82430737986324e-06*G0_1_0_1_2 + 3.64861475972648e-06*G0_1_0_2_0 + 1.82430737986324e-06*G0_1_0_2_1 + 1.82430737986324e-06*G0_1_0_2_2 + 7.29722951945297e-06*G0_1_1_0_0 + 5.47292213958973e-06*G0_1_1_0_1 + 1.82430737986324e-06*G0_1_1_0_2 + 5.47292213958973e-06*G0_1_1_1_0 + 2.69483602816982e-05*G0_1_1_1_1 + 6.73709007042455e-06*G0_1_1_1_2 + 1.82430737986324e-06*G0_1_1_2_0 + 6.73709007042455e-06*G0_1_1_2_1 + 4.49139338028303e-06*G0_1_1_2_2 + 3.64861475972648e-06*G0_1_2_0_0 + 1.82430737986324e-06*G0_1_2_0_1 + 1.82430737986324e-06*G0_1_2_0_2 + 1.82430737986324e-06*G0_1_2_1_0 + 6.73709007042455e-06*G0_1_2_1_1 + 4.49139338028303e-06*G0_1_2_1_2 + 1.82430737986324e-06*G0_1_2_2_0 + 4.49139338028303e-06*G0_1_2_2_1 + 6.73709007042455e-06*G0_1_2_2_2 + 6.73709007042454e-05*G0_2_0_0_0 + 3.64861475972648e-06*G0_2_0_0_1 + 7.29722951945298e-06*G0_2_0_0_2 + 3.64861475972648e-06*G0_2_0_1_0 + 1.82430737986324e-06*G0_2_0_1_1 + 1.82430737986324e-06*G0_2_0_1_2 + 7.29722951945298e-06*G0_2_0_2_0 + 1.82430737986324e-06*G0_2_0_2_1 + 5.47292213958973e-06*G0_2_0_2_2 + 3.64861475972648e-06*G0_2_1_0_0 + 1.82430737986324e-06*G0_2_1_0_1 + 1.82430737986324e-06*G0_2_1_0_2 + 1.82430737986324e-06*G0_2_1_1_0 + 6.73709007042455e-06*G0_2_1_1_1 + 4.49139338028303e-06*G0_2_1_1_2 + 1.82430737986324e-06*G0_2_1_2_0 + 4.49139338028303e-06*G0_2_1_2_1 + 6.73709007042454e-06*G0_2_1_2_2 + 7.29722951945298e-06*G0_2_2_0_0 + 1.82430737986324e-06*G0_2_2_0_1 + 5.47292213958973e-06*G0_2_2_0_2 + 1.82430737986324e-06*G0_2_2_1_0 + 4.49139338028303e-06*G0_2_2_1_1 + 6.73709007042454e-06*G0_2_2_1_2 + 5.47292213958973e-06*G0_2_2_2_0 + 6.73709007042454e-06*G0_2_2_2_1 + 2.69483602816982e-05*G0_2_2_2_2;
    A[58] = A[198];
    A[28] = -A[181] - 0.000184647803695454*G0_0_0_0_0 - 1.04304866209647e-05*G0_0_0_0_1 - 4.17219464838584e-05*G0_0_0_0_2 - 1.04304866209647e-05*G0_0_0_1_0 - 4.22857565714813e-07*G0_0_0_1_2 - 4.17219464838584e-05*G0_0_0_2_0 - 4.22857565714813e-07*G0_0_0_2_1 - 7.18857861715133e-06*G0_0_0_2_2 - 1.04304866209647e-05*G0_0_1_0_0 - 4.22857565714811e-07*G0_0_1_0_2 - 9.86667653334483e-06*G0_0_1_1_1 - 4.22857565714811e-07*G0_0_1_2_0 + 4.36952817905271e-06*G0_0_1_2_2 - 4.17219464838584e-05*G0_0_2_0_0 - 4.22857565714813e-07*G0_0_2_0_1 - 7.18857861715133e-06*G0_0_2_0_2 - 4.22857565714813e-07*G0_0_2_1_0 + 4.36952817905271e-06*G0_0_2_1_2 - 7.18857861715133e-06*G0_0_2_2_0 + 4.36952817905271e-06*G0_0_2_2_1 + 2.25524035047882e-05*G0_0_2_2_2 - 1.04304866209647e-05*G0_1_0_0_0 - 4.22857565714813e-07*G0_1_0_0_2 - 9.86667653334484e-06*G0_1_0_1_1 - 4.22857565714813e-07*G0_1_0_2_0 + 4.36952817905271e-06*G0_1_0_2_2 - 9.86667653334484e-06*G0_1_1_0_1 - 9.86667653334484e-06*G0_1_1_1_0 + 0.000167733501066864*G0_1_1_1_1 - 9.86667653334469e-06*G0_1_1_1_2 - 9.86667653334469e-06*G0_1_1_2_1 - 4.22857565714813e-07*G0_1_2_0_0 + 4.36952817905271e-06*G0_1_2_0_2 - 9.86667653334469e-06*G0_1_2_1_1 + 4.36952817905271e-06*G0_1_2_2_0 + 1.83238278476404e-05*G0_1_2_2_2 - 4.17219464838584e-05*G0_2_0_0_0 - 4.22857565714813e-07*G0_2_0_0_1 - 7.18857861715133e-06*G0_2_0_0_2 - 4.22857565714813e-07*G0_2_0_1_0 + 4.36952817905271e-06*G0_2_0_1_2 - 7.18857861715133e-06*G0_2_0_2_0 + 4.36952817905271e-06*G0_2_0_2_1 + 2.25524035047882e-05*G0_2_0_2_2 - 4.22857565714813e-07*G0_2_1_0_0 + 4.36952817905271e-06*G0_2_1_0_2 - 9.8666765333447e-06*G0_2_1_1_1 + 4.36952817905271e-06*G0_2_1_2_0 + 1.83238278476404e-05*G0_2_1_2_2 - 7.18857861715133e-06*G0_2_2_0_0 + 4.36952817905271e-06*G0_2_2_0_1 + 2.25524035047882e-05*G0_2_2_0_2 + 4.36952817905271e-06*G0_2_2_1_0 + 1.83238278476404e-05*G0_2_2_1_2 + 2.25524035047882e-05*G0_2_2_2_0 + 1.83238278476404e-05*G0_2_2_2_1 + 0.000136723946247779*G0_2_2_2_2;
    A[222] = -A[28] - 0.0012960584389158*G0_0_0_0_0 - 0.000552392933345407*G0_0_0_0_1 + 0.000151383008525891*G0_0_0_0_2 - 0.000552392933345408*G0_0_0_1_0 - 0.0003547774976347*G0_0_0_1_1 - 8.95048514096298e-06*G0_0_0_1_2 + 0.000151383008525891*G0_0_0_2_0 - 8.950485140963e-06*G0_0_0_2_1 + 0.000335114620828962*G0_0_0_2_2 - 0.000552392933345408*G0_0_1_0_0 - 0.0003547774976347*G0_0_1_0_1 - 8.95048514096301e-06*G0_0_1_0_2 - 0.0003547774976347*G0_0_1_1_0 - 0.000319257462114659*G0_0_1_1_1 - 0.000103459151078216*G0_0_1_1_2 - 8.950485140963e-06*G0_0_1_2_0 - 0.000103459151078216*G0_0_1_2_1 - 8.95048514096301e-06*G0_0_1_2_2 + 0.000151383008525891*G0_0_2_0_0 - 8.95048514096299e-06*G0_0_2_0_1 + 0.000335114620828962*G0_0_2_0_2 - 8.95048514096299e-06*G0_0_2_1_0 - 0.000103459151078216*G0_0_2_1_1 - 8.95048514096297e-06*G0_0_2_1_2 + 0.000335114620828962*G0_0_2_2_0 - 8.95048514096297e-06*G0_0_2_2_1 + 0.000151383008525891*G0_0_2_2_2 - 0.000552392933345408*G0_1_0_0_0 - 0.0003547774976347*G0_1_0_0_1 - 8.95048514096301e-06*G0_1_0_0_2 - 0.0003547774976347*G0_1_0_1_0 - 0.000319257462114659*G0_1_0_1_1 - 0.000103459151078216*G0_1_0_1_2 - 8.950485140963e-06*G0_1_0_2_0 - 0.000103459151078216*G0_1_0_2_1 - 8.95048514096301e-06*G0_1_0_2_2 - 0.0003547774976347*G0_1_1_0_0 - 0.000319257462114659*G0_1_1_0_1 - 0.000103459151078216*G0_1_1_0_2 - 0.000319257462114659*G0_1_1_1_0 - 7.68191244381831e-05*G0_1_1_1_1 - 0.000319257462114659*G0_1_1_1_2 - 0.000103459151078216*G0_1_1_2_0 - 0.000319257462114659*G0_1_1_2_1 - 0.0003547774976347*G0_1_1_2_2 - 8.950485140963e-06*G0_1_2_0_0 - 0.000103459151078216*G0_1_2_0_1 - 8.95048514096297e-06*G0_1_2_0_2 - 0.000103459151078216*G0_1_2_1_0 - 0.000319257462114659*G0_1_2_1_1 - 0.0003547774976347*G0_1_2_1_2 - 8.95048514096297e-06*G0_1_2_2_0 - 0.0003547774976347*G0_1_2_2_1 - 0.000552392933345408*G0_1_2_2_2 + 0.000151383008525891*G0_2_0_0_0 - 8.95048514096296e-06*G0_2_0_0_1 + 0.000335114620828962*G0_2_0_0_2 - 8.95048514096298e-06*G0_2_0_1_0 - 0.000103459151078216*G0_2_0_1_1 - 8.95048514096297e-06*G0_2_0_1_2 + 0.000335114620828962*G0_2_0_2_0 - 8.95048514096298e-06*G0_2_0_2_1 + 0.000151383008525891*G0_2_0_2_2 - 8.950485140963e-06*G0_2_1_0_0 - 0.000103459151078216*G0_2_1_0_1 - 8.95048514096297e-06*G0_2_1_0_2 - 0.000103459151078216*G0_2_1_1_0 - 0.000319257462114659*G0_2_1_1_1 - 0.0003547774976347*G0_2_1_1_2 - 8.95048514096297e-06*G0_2_1_2_0 - 0.0003547774976347*G0_2_1_2_1 - 0.000552392933345408*G0_2_1_2_2 + 0.000335114620828962*G0_2_2_0_0 - 8.95048514096298e-06*G0_2_2_0_1 + 0.00015138300852589*G0_2_2_0_2 - 8.95048514096298e-06*G0_2_2_1_0 - 0.0003547774976347*G0_2_2_1_1 - 0.000552392933345408*G0_2_2_1_2 + 0.000151383008525891*G0_2_2_2_0 - 0.000552392933345408*G0_2_2_2_1 - 0.0012960584389158*G0_2_2_2_2;
    A[194] = A[222];
    A[131] = A[173];
    A[74] = A[214];
    A[40] = A[1] + 0.000207780168097663*G0_0_0_0_0 - 9.74627958755107e-06*G0_0_0_0_1 - 9.74627958755107e-06*G0_0_0_1_0 - 2.66246099579478e-05*G0_0_0_1_1 - 9.74627958755107e-06*G0_0_1_0_0 - 2.66246099579478e-05*G0_0_1_0_1 - 2.66246099579478e-05*G0_0_1_1_0 - 9.74627958755108e-06*G0_0_1_1_1 - 9.74627958755108e-06*G0_1_0_0_0 - 2.66246099579478e-05*G0_1_0_0_1 - 2.66246099579478e-05*G0_1_0_1_0 - 9.74627958755108e-06*G0_1_0_1_1 - 2.66246099579478e-05*G0_1_1_0_0 - 9.74627958755108e-06*G0_1_1_0_1 - 9.74627958755108e-06*G0_1_1_1_0 + 0.000207780168097664*G0_1_1_1_1 - 4.36071864643287e-07*G0_2_2_2_2;
    A[145] = A[159];
    A[151] = A[25];
    A[102] = A[186];
    A[177] = A[191];
    A[114] = A[142];
    A[221] = A[179];
    A[196] = A[28];
    A[209] = A[223];
    A[13] = A[195];
    A[53] = A[123];
    A[30] = A[2];
    A[23] = A[121];
    A[128] = -A[113] - 0.000600457743314987*G0_0_0_0_0 - 5.77905339810198e-05*G0_0_0_0_1 + 1.36254104508096e-05*G0_0_0_0_2 - 5.77905339810198e-05*G0_0_0_1_0 - 6.20191096381674e-06*G0_0_0_1_1 + 6.10794261588015e-06*G0_0_0_1_2 + 1.36254104508096e-05*G0_0_0_2_0 + 6.10794261588015e-06*G0_0_0_2_1 + 0.000323626990293711*G0_0_0_2_2 - 5.77905339810198e-05*G0_0_1_0_0 - 6.20191096381674e-06*G0_0_1_0_1 + 6.10794261588015e-06*G0_0_1_0_2 - 6.20191096381674e-06*G0_0_1_1_0 + 8.03429374858084e-06*G0_0_1_1_1 + 4.74540157079921e-06*G0_0_1_1_2 + 6.10794261588016e-06*G0_0_1_2_0 + 4.74540157079921e-06*G0_0_1_2_1 + 5.32800532800623e-05*G0_0_1_2_2 + 1.36254104508096e-05*G0_0_2_0_0 + 6.10794261588015e-06*G0_0_2_0_1 + 0.000323626990293711*G0_0_2_0_2 + 6.10794261588015e-06*G0_0_2_1_0 + 4.74540157079921e-06*G0_0_2_1_1 + 5.32800532800623e-05*G0_0_2_1_2 + 0.000323626990293711*G0_0_2_2_0 + 5.32800532800623e-05*G0_0_2_2_1 + 0.00107546774213459*G0_0_2_2_2 - 5.77905339810198e-05*G0_1_0_0_0 - 6.20191096381674e-06*G0_1_0_0_1 + 6.10794261588015e-06*G0_1_0_0_2 - 6.20191096381674e-06*G0_1_0_1_0 + 8.03429374858084e-06*G0_1_0_1_1 + 4.74540157079921e-06*G0_1_0_1_2 + 6.10794261588016e-06*G0_1_0_2_0 + 4.74540157079921e-06*G0_1_0_2_1 + 5.32800532800623e-05*G0_1_0_2_2 - 6.20191096381674e-06*G0_1_1_0_0 + 8.03429374858084e-06*G0_1_1_0_1 + 4.74540157079921e-06*G0_1_1_0_2 + 8.03429374858084e-06*G0_1_1_1_0 + 2.76266942933657e-05*G0_1_1_1_1 + 6.43683183365833e-06*G0_1_1_1_2 + 4.74540157079921e-06*G0_1_1_2_0 + 6.43683183365833e-06*G0_1_1_2_1 + 1.71022393244645e-05*G0_1_1_2_2 + 6.10794261588015e-06*G0_1_2_0_0 + 4.74540157079921e-06*G0_1_2_0_1 + 5.32800532800623e-05*G0_1_2_0_2 + 4.74540157079921e-06*G0_1_2_1_0 + 6.43683183365832e-06*G0_1_2_1_1 + 1.71022393244645e-05*G0_1_2_1_2 + 5.32800532800623e-05*G0_1_2_2_0 + 1.71022393244645e-05*G0_1_2_2_1 + 0.000200622422844679*G0_1_2_2_2 + 1.36254104508096e-05*G0_2_0_0_0 + 6.10794261588016e-06*G0_2_0_0_1 + 0.000323626990293711*G0_2_0_0_2 + 6.10794261588016e-06*G0_2_0_1_0 + 4.74540157079921e-06*G0_2_0_1_1 + 5.32800532800623e-05*G0_2_0_1_2 + 0.000323626990293711*G0_2_0_2_0 + 5.32800532800623e-05*G0_2_0_2_1 + 0.00107546774213459*G0_2_0_2_2 + 6.10794261588016e-06*G0_2_1_0_0 + 4.74540157079921e-06*G0_2_1_0_1 + 5.32800532800623e-05*G0_2_1_0_2 + 4.74540157079921e-06*G0_2_1_1_0 + 6.43683183365833e-06*G0_2_1_1_1 + 1.71022393244645e-05*G0_2_1_1_2 + 5.32800532800623e-05*G0_2_1_2_0 + 1.71022393244645e-05*G0_2_1_2_1 + 0.000200622422844679*G0_2_1_2_2 + 0.000323626990293711*G0_2_2_0_0 + 5.32800532800623e-05*G0_2_2_0_1 + 0.00107546774213459*G0_2_2_0_2 + 5.32800532800623e-05*G0_2_2_1_0 + 1.71022393244645e-05*G0_2_2_1_1 + 0.000200622422844679*G0_2_2_1_2 + 0.00107546774213459*G0_2_2_2_0 + 0.000200622422844679*G0_2_2_2_1 + 0.0040979596535159*G0_2_2_2_2;
    A[63] = A[49];
    A[140] = A[84];
    A[77] = A[35];
    A[171] = A[101];
    A[152] = A[40];
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class mass_matrix_f4_p1_q4_tensor_form_0: public ufc::form
{
public:

  /// Constructor
  mass_matrix_f4_p1_q4_tensor_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q4_tensor_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(Product(Argument(FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None), 0), Argument(FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None), 1)), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 3), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 2), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 0), Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 1))))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 4;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f4_p1_q4_tensor_finite_element_1();
        break;
      }
    case 1:
      {
        return new mass_matrix_f4_p1_q4_tensor_finite_element_1();
        break;
      }
    case 2:
      {
        return new mass_matrix_f4_p1_q4_tensor_finite_element_0();
        break;
      }
    case 3:
      {
        return new mass_matrix_f4_p1_q4_tensor_finite_element_0();
        break;
      }
    case 4:
      {
        return new mass_matrix_f4_p1_q4_tensor_finite_element_0();
        break;
      }
    case 5:
      {
        return new mass_matrix_f4_p1_q4_tensor_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f4_p1_q4_tensor_dofmap_1();
        break;
      }
    case 1:
      {
        return new mass_matrix_f4_p1_q4_tensor_dofmap_1();
        break;
      }
    case 2:
      {
        return new mass_matrix_f4_p1_q4_tensor_dofmap_0();
        break;
      }
    case 3:
      {
        return new mass_matrix_f4_p1_q4_tensor_dofmap_0();
        break;
      }
    case 4:
      {
        return new mass_matrix_f4_p1_q4_tensor_dofmap_0();
        break;
      }
    case 5:
      {
        return new mass_matrix_f4_p1_q4_tensor_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f4_p1_q4_tensor_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif

// This code conforms with the UFC specification version 2.0.3
// and was automatically generated by FFC version 1.0-beta2.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'ufc'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'tensor'
//   split:                          False
//   swig_binary:                    'swig'
//   swig_path:                      ''

#ifndef __MASS_MATRIX_F3_P2_Q3_TENSOR_H
#define __MASS_MATRIX_F3_P2_Q3_TENSOR_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class mass_matrix_f3_p2_q3_tensor_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  mass_matrix_f3_p2_q3_tensor_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f3_p2_q3_tensor_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[6][6] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[6][6] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 6; t++)
        {
          for (unsigned int u = 0; u < 6; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 6; t++)
          {
            for (unsigned int u = 0; u < 6; u++)
            {
              for (unsigned int tu = 0; tu < 6; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 6; s++)
        {
          for (unsigned int t = 0; t < 6; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mass_matrix_f3_p2_q3_tensor_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class mass_matrix_f3_p2_q3_tensor_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  mass_matrix_f3_p2_q3_tensor_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f3_p2_q3_tensor_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435952, 0.0606091526731326, 0.0349927106111882, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333333, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807677, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930786, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.0909137290096989};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435952, 0.0606091526731326, 0.0349927106111882, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333333, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807677, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930786, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.0909137290096989};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mass_matrix_f3_p2_q3_tensor_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mass_matrix_f3_p2_q3_tensor_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  mass_matrix_f3_p2_q3_tensor_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~mass_matrix_f3_p2_q3_tensor_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + m.num_entities[1];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += m.num_entities[1];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[3][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[4][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[5][1] = 0.5*x[0][1] + 0.5*x[1][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mass_matrix_f3_p2_q3_tensor_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mass_matrix_f3_p2_q3_tensor_dofmap_1: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  mass_matrix_f3_p2_q3_tensor_dofmap_1() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~mass_matrix_f3_p2_q3_tensor_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + 2.0*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 10;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*m.num_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
    offset += m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[3][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[4][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[4][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[5][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[5][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[6][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[6][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[7][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[7][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[8][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[8][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[9][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[9][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mass_matrix_f3_p2_q3_tensor_dofmap_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mass_matrix_f3_p2_q3_tensor_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  mass_matrix_f3_p2_q3_tensor_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f3_p2_q3_tensor_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      9
    // Number of operations (multiply-add pairs) for geometry tensor:    432
    // Number of operations (multiply-add pairs) for tensor contraction: 10827
    // Total number of operations (multiply-add pairs):                  11268
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0_0 = det*w[2][0]*w[0][0]*w[1][0]*(1.0);
    const double G0_0_0_1 = det*w[2][0]*w[0][0]*w[1][1]*(1.0);
    const double G0_0_0_2 = det*w[2][0]*w[0][0]*w[1][2]*(1.0);
    const double G0_0_0_3 = det*w[2][0]*w[0][0]*w[1][3]*(1.0);
    const double G0_0_0_4 = det*w[2][0]*w[0][0]*w[1][4]*(1.0);
    const double G0_0_0_5 = det*w[2][0]*w[0][0]*w[1][5]*(1.0);
    const double G0_0_1_0 = det*w[2][0]*w[0][1]*w[1][0]*(1.0);
    const double G0_0_1_1 = det*w[2][0]*w[0][1]*w[1][1]*(1.0);
    const double G0_0_1_2 = det*w[2][0]*w[0][1]*w[1][2]*(1.0);
    const double G0_0_1_3 = det*w[2][0]*w[0][1]*w[1][3]*(1.0);
    const double G0_0_1_4 = det*w[2][0]*w[0][1]*w[1][4]*(1.0);
    const double G0_0_1_5 = det*w[2][0]*w[0][1]*w[1][5]*(1.0);
    const double G0_0_2_0 = det*w[2][0]*w[0][2]*w[1][0]*(1.0);
    const double G0_0_2_1 = det*w[2][0]*w[0][2]*w[1][1]*(1.0);
    const double G0_0_2_2 = det*w[2][0]*w[0][2]*w[1][2]*(1.0);
    const double G0_0_2_3 = det*w[2][0]*w[0][2]*w[1][3]*(1.0);
    const double G0_0_2_4 = det*w[2][0]*w[0][2]*w[1][4]*(1.0);
    const double G0_0_2_5 = det*w[2][0]*w[0][2]*w[1][5]*(1.0);
    const double G0_0_3_0 = det*w[2][0]*w[0][3]*w[1][0]*(1.0);
    const double G0_0_3_1 = det*w[2][0]*w[0][3]*w[1][1]*(1.0);
    const double G0_0_3_2 = det*w[2][0]*w[0][3]*w[1][2]*(1.0);
    const double G0_0_3_3 = det*w[2][0]*w[0][3]*w[1][3]*(1.0);
    const double G0_0_3_4 = det*w[2][0]*w[0][3]*w[1][4]*(1.0);
    const double G0_0_3_5 = det*w[2][0]*w[0][3]*w[1][5]*(1.0);
    const double G0_0_4_0 = det*w[2][0]*w[0][4]*w[1][0]*(1.0);
    const double G0_0_4_1 = det*w[2][0]*w[0][4]*w[1][1]*(1.0);
    const double G0_0_4_2 = det*w[2][0]*w[0][4]*w[1][2]*(1.0);
    const double G0_0_4_3 = det*w[2][0]*w[0][4]*w[1][3]*(1.0);
    const double G0_0_4_4 = det*w[2][0]*w[0][4]*w[1][4]*(1.0);
    const double G0_0_4_5 = det*w[2][0]*w[0][4]*w[1][5]*(1.0);
    const double G0_0_5_0 = det*w[2][0]*w[0][5]*w[1][0]*(1.0);
    const double G0_0_5_1 = det*w[2][0]*w[0][5]*w[1][1]*(1.0);
    const double G0_0_5_2 = det*w[2][0]*w[0][5]*w[1][2]*(1.0);
    const double G0_0_5_3 = det*w[2][0]*w[0][5]*w[1][3]*(1.0);
    const double G0_0_5_4 = det*w[2][0]*w[0][5]*w[1][4]*(1.0);
    const double G0_0_5_5 = det*w[2][0]*w[0][5]*w[1][5]*(1.0);
    const double G0_1_0_0 = det*w[2][1]*w[0][0]*w[1][0]*(1.0);
    const double G0_1_0_1 = det*w[2][1]*w[0][0]*w[1][1]*(1.0);
    const double G0_1_0_2 = det*w[2][1]*w[0][0]*w[1][2]*(1.0);
    const double G0_1_0_3 = det*w[2][1]*w[0][0]*w[1][3]*(1.0);
    const double G0_1_0_4 = det*w[2][1]*w[0][0]*w[1][4]*(1.0);
    const double G0_1_0_5 = det*w[2][1]*w[0][0]*w[1][5]*(1.0);
    const double G0_1_1_0 = det*w[2][1]*w[0][1]*w[1][0]*(1.0);
    const double G0_1_1_1 = det*w[2][1]*w[0][1]*w[1][1]*(1.0);
    const double G0_1_1_2 = det*w[2][1]*w[0][1]*w[1][2]*(1.0);
    const double G0_1_1_3 = det*w[2][1]*w[0][1]*w[1][3]*(1.0);
    const double G0_1_1_4 = det*w[2][1]*w[0][1]*w[1][4]*(1.0);
    const double G0_1_1_5 = det*w[2][1]*w[0][1]*w[1][5]*(1.0);
    const double G0_1_2_0 = det*w[2][1]*w[0][2]*w[1][0]*(1.0);
    const double G0_1_2_1 = det*w[2][1]*w[0][2]*w[1][1]*(1.0);
    const double G0_1_2_2 = det*w[2][1]*w[0][2]*w[1][2]*(1.0);
    const double G0_1_2_3 = det*w[2][1]*w[0][2]*w[1][3]*(1.0);
    const double G0_1_2_4 = det*w[2][1]*w[0][2]*w[1][4]*(1.0);
    const double G0_1_2_5 = det*w[2][1]*w[0][2]*w[1][5]*(1.0);
    const double G0_1_3_0 = det*w[2][1]*w[0][3]*w[1][0]*(1.0);
    const double G0_1_3_1 = det*w[2][1]*w[0][3]*w[1][1]*(1.0);
    const double G0_1_3_2 = det*w[2][1]*w[0][3]*w[1][2]*(1.0);
    const double G0_1_3_3 = det*w[2][1]*w[0][3]*w[1][3]*(1.0);
    const double G0_1_3_4 = det*w[2][1]*w[0][3]*w[1][4]*(1.0);
    const double G0_1_3_5 = det*w[2][1]*w[0][3]*w[1][5]*(1.0);
    const double G0_1_4_0 = det*w[2][1]*w[0][4]*w[1][0]*(1.0);
    const double G0_1_4_1 = det*w[2][1]*w[0][4]*w[1][1]*(1.0);
    const double G0_1_4_2 = det*w[2][1]*w[0][4]*w[1][2]*(1.0);
    const double G0_1_4_3 = det*w[2][1]*w[0][4]*w[1][3]*(1.0);
    const double G0_1_4_4 = det*w[2][1]*w[0][4]*w[1][4]*(1.0);
    const double G0_1_4_5 = det*w[2][1]*w[0][4]*w[1][5]*(1.0);
    const double G0_1_5_0 = det*w[2][1]*w[0][5]*w[1][0]*(1.0);
    const double G0_1_5_1 = det*w[2][1]*w[0][5]*w[1][1]*(1.0);
    const double G0_1_5_2 = det*w[2][1]*w[0][5]*w[1][2]*(1.0);
    const double G0_1_5_3 = det*w[2][1]*w[0][5]*w[1][3]*(1.0);
    const double G0_1_5_4 = det*w[2][1]*w[0][5]*w[1][4]*(1.0);
    const double G0_1_5_5 = det*w[2][1]*w[0][5]*w[1][5]*(1.0);
    const double G0_2_0_0 = det*w[2][2]*w[0][0]*w[1][0]*(1.0);
    const double G0_2_0_1 = det*w[2][2]*w[0][0]*w[1][1]*(1.0);
    const double G0_2_0_2 = det*w[2][2]*w[0][0]*w[1][2]*(1.0);
    const double G0_2_0_3 = det*w[2][2]*w[0][0]*w[1][3]*(1.0);
    const double G0_2_0_4 = det*w[2][2]*w[0][0]*w[1][4]*(1.0);
    const double G0_2_0_5 = det*w[2][2]*w[0][0]*w[1][5]*(1.0);
    const double G0_2_1_0 = det*w[2][2]*w[0][1]*w[1][0]*(1.0);
    const double G0_2_1_1 = det*w[2][2]*w[0][1]*w[1][1]*(1.0);
    const double G0_2_1_2 = det*w[2][2]*w[0][1]*w[1][2]*(1.0);
    const double G0_2_1_3 = det*w[2][2]*w[0][1]*w[1][3]*(1.0);
    const double G0_2_1_4 = det*w[2][2]*w[0][1]*w[1][4]*(1.0);
    const double G0_2_1_5 = det*w[2][2]*w[0][1]*w[1][5]*(1.0);
    const double G0_2_2_0 = det*w[2][2]*w[0][2]*w[1][0]*(1.0);
    const double G0_2_2_1 = det*w[2][2]*w[0][2]*w[1][1]*(1.0);
    const double G0_2_2_2 = det*w[2][2]*w[0][2]*w[1][2]*(1.0);
    const double G0_2_2_3 = det*w[2][2]*w[0][2]*w[1][3]*(1.0);
    const double G0_2_2_4 = det*w[2][2]*w[0][2]*w[1][4]*(1.0);
    const double G0_2_2_5 = det*w[2][2]*w[0][2]*w[1][5]*(1.0);
    const double G0_2_3_0 = det*w[2][2]*w[0][3]*w[1][0]*(1.0);
    const double G0_2_3_1 = det*w[2][2]*w[0][3]*w[1][1]*(1.0);
    const double G0_2_3_2 = det*w[2][2]*w[0][3]*w[1][2]*(1.0);
    const double G0_2_3_3 = det*w[2][2]*w[0][3]*w[1][3]*(1.0);
    const double G0_2_3_4 = det*w[2][2]*w[0][3]*w[1][4]*(1.0);
    const double G0_2_3_5 = det*w[2][2]*w[0][3]*w[1][5]*(1.0);
    const double G0_2_4_0 = det*w[2][2]*w[0][4]*w[1][0]*(1.0);
    const double G0_2_4_1 = det*w[2][2]*w[0][4]*w[1][1]*(1.0);
    const double G0_2_4_2 = det*w[2][2]*w[0][4]*w[1][2]*(1.0);
    const double G0_2_4_3 = det*w[2][2]*w[0][4]*w[1][3]*(1.0);
    const double G0_2_4_4 = det*w[2][2]*w[0][4]*w[1][4]*(1.0);
    const double G0_2_4_5 = det*w[2][2]*w[0][4]*w[1][5]*(1.0);
    const double G0_2_5_0 = det*w[2][2]*w[0][5]*w[1][0]*(1.0);
    const double G0_2_5_1 = det*w[2][2]*w[0][5]*w[1][1]*(1.0);
    const double G0_2_5_2 = det*w[2][2]*w[0][5]*w[1][2]*(1.0);
    const double G0_2_5_3 = det*w[2][2]*w[0][5]*w[1][3]*(1.0);
    const double G0_2_5_4 = det*w[2][2]*w[0][5]*w[1][4]*(1.0);
    const double G0_2_5_5 = det*w[2][2]*w[0][5]*w[1][5]*(1.0);
    const double G0_3_0_0 = det*w[2][3]*w[0][0]*w[1][0]*(1.0);
    const double G0_3_0_1 = det*w[2][3]*w[0][0]*w[1][1]*(1.0);
    const double G0_3_0_2 = det*w[2][3]*w[0][0]*w[1][2]*(1.0);
    const double G0_3_0_3 = det*w[2][3]*w[0][0]*w[1][3]*(1.0);
    const double G0_3_0_4 = det*w[2][3]*w[0][0]*w[1][4]*(1.0);
    const double G0_3_0_5 = det*w[2][3]*w[0][0]*w[1][5]*(1.0);
    const double G0_3_1_0 = det*w[2][3]*w[0][1]*w[1][0]*(1.0);
    const double G0_3_1_1 = det*w[2][3]*w[0][1]*w[1][1]*(1.0);
    const double G0_3_1_2 = det*w[2][3]*w[0][1]*w[1][2]*(1.0);
    const double G0_3_1_3 = det*w[2][3]*w[0][1]*w[1][3]*(1.0);
    const double G0_3_1_4 = det*w[2][3]*w[0][1]*w[1][4]*(1.0);
    const double G0_3_1_5 = det*w[2][3]*w[0][1]*w[1][5]*(1.0);
    const double G0_3_2_0 = det*w[2][3]*w[0][2]*w[1][0]*(1.0);
    const double G0_3_2_1 = det*w[2][3]*w[0][2]*w[1][1]*(1.0);
    const double G0_3_2_2 = det*w[2][3]*w[0][2]*w[1][2]*(1.0);
    const double G0_3_2_3 = det*w[2][3]*w[0][2]*w[1][3]*(1.0);
    const double G0_3_2_4 = det*w[2][3]*w[0][2]*w[1][4]*(1.0);
    const double G0_3_2_5 = det*w[2][3]*w[0][2]*w[1][5]*(1.0);
    const double G0_3_3_0 = det*w[2][3]*w[0][3]*w[1][0]*(1.0);
    const double G0_3_3_1 = det*w[2][3]*w[0][3]*w[1][1]*(1.0);
    const double G0_3_3_2 = det*w[2][3]*w[0][3]*w[1][2]*(1.0);
    const double G0_3_3_3 = det*w[2][3]*w[0][3]*w[1][3]*(1.0);
    const double G0_3_3_4 = det*w[2][3]*w[0][3]*w[1][4]*(1.0);
    const double G0_3_3_5 = det*w[2][3]*w[0][3]*w[1][5]*(1.0);
    const double G0_3_4_0 = det*w[2][3]*w[0][4]*w[1][0]*(1.0);
    const double G0_3_4_1 = det*w[2][3]*w[0][4]*w[1][1]*(1.0);
    const double G0_3_4_2 = det*w[2][3]*w[0][4]*w[1][2]*(1.0);
    const double G0_3_4_3 = det*w[2][3]*w[0][4]*w[1][3]*(1.0);
    const double G0_3_4_4 = det*w[2][3]*w[0][4]*w[1][4]*(1.0);
    const double G0_3_4_5 = det*w[2][3]*w[0][4]*w[1][5]*(1.0);
    const double G0_3_5_0 = det*w[2][3]*w[0][5]*w[1][0]*(1.0);
    const double G0_3_5_1 = det*w[2][3]*w[0][5]*w[1][1]*(1.0);
    const double G0_3_5_2 = det*w[2][3]*w[0][5]*w[1][2]*(1.0);
    const double G0_3_5_3 = det*w[2][3]*w[0][5]*w[1][3]*(1.0);
    const double G0_3_5_4 = det*w[2][3]*w[0][5]*w[1][4]*(1.0);
    const double G0_3_5_5 = det*w[2][3]*w[0][5]*w[1][5]*(1.0);
    const double G0_4_0_0 = det*w[2][4]*w[0][0]*w[1][0]*(1.0);
    const double G0_4_0_1 = det*w[2][4]*w[0][0]*w[1][1]*(1.0);
    const double G0_4_0_2 = det*w[2][4]*w[0][0]*w[1][2]*(1.0);
    const double G0_4_0_3 = det*w[2][4]*w[0][0]*w[1][3]*(1.0);
    const double G0_4_0_4 = det*w[2][4]*w[0][0]*w[1][4]*(1.0);
    const double G0_4_0_5 = det*w[2][4]*w[0][0]*w[1][5]*(1.0);
    const double G0_4_1_0 = det*w[2][4]*w[0][1]*w[1][0]*(1.0);
    const double G0_4_1_1 = det*w[2][4]*w[0][1]*w[1][1]*(1.0);
    const double G0_4_1_2 = det*w[2][4]*w[0][1]*w[1][2]*(1.0);
    const double G0_4_1_3 = det*w[2][4]*w[0][1]*w[1][3]*(1.0);
    const double G0_4_1_4 = det*w[2][4]*w[0][1]*w[1][4]*(1.0);
    const double G0_4_1_5 = det*w[2][4]*w[0][1]*w[1][5]*(1.0);
    const double G0_4_2_0 = det*w[2][4]*w[0][2]*w[1][0]*(1.0);
    const double G0_4_2_1 = det*w[2][4]*w[0][2]*w[1][1]*(1.0);
    const double G0_4_2_2 = det*w[2][4]*w[0][2]*w[1][2]*(1.0);
    const double G0_4_2_3 = det*w[2][4]*w[0][2]*w[1][3]*(1.0);
    const double G0_4_2_4 = det*w[2][4]*w[0][2]*w[1][4]*(1.0);
    const double G0_4_2_5 = det*w[2][4]*w[0][2]*w[1][5]*(1.0);
    const double G0_4_3_0 = det*w[2][4]*w[0][3]*w[1][0]*(1.0);
    const double G0_4_3_1 = det*w[2][4]*w[0][3]*w[1][1]*(1.0);
    const double G0_4_3_2 = det*w[2][4]*w[0][3]*w[1][2]*(1.0);
    const double G0_4_3_3 = det*w[2][4]*w[0][3]*w[1][3]*(1.0);
    const double G0_4_3_4 = det*w[2][4]*w[0][3]*w[1][4]*(1.0);
    const double G0_4_3_5 = det*w[2][4]*w[0][3]*w[1][5]*(1.0);
    const double G0_4_4_0 = det*w[2][4]*w[0][4]*w[1][0]*(1.0);
    const double G0_4_4_1 = det*w[2][4]*w[0][4]*w[1][1]*(1.0);
    const double G0_4_4_2 = det*w[2][4]*w[0][4]*w[1][2]*(1.0);
    const double G0_4_4_3 = det*w[2][4]*w[0][4]*w[1][3]*(1.0);
    const double G0_4_4_4 = det*w[2][4]*w[0][4]*w[1][4]*(1.0);
    const double G0_4_4_5 = det*w[2][4]*w[0][4]*w[1][5]*(1.0);
    const double G0_4_5_0 = det*w[2][4]*w[0][5]*w[1][0]*(1.0);
    const double G0_4_5_1 = det*w[2][4]*w[0][5]*w[1][1]*(1.0);
    const double G0_4_5_2 = det*w[2][4]*w[0][5]*w[1][2]*(1.0);
    const double G0_4_5_3 = det*w[2][4]*w[0][5]*w[1][3]*(1.0);
    const double G0_4_5_4 = det*w[2][4]*w[0][5]*w[1][4]*(1.0);
    const double G0_4_5_5 = det*w[2][4]*w[0][5]*w[1][5]*(1.0);
    const double G0_5_0_0 = det*w[2][5]*w[0][0]*w[1][0]*(1.0);
    const double G0_5_0_1 = det*w[2][5]*w[0][0]*w[1][1]*(1.0);
    const double G0_5_0_2 = det*w[2][5]*w[0][0]*w[1][2]*(1.0);
    const double G0_5_0_3 = det*w[2][5]*w[0][0]*w[1][3]*(1.0);
    const double G0_5_0_4 = det*w[2][5]*w[0][0]*w[1][4]*(1.0);
    const double G0_5_0_5 = det*w[2][5]*w[0][0]*w[1][5]*(1.0);
    const double G0_5_1_0 = det*w[2][5]*w[0][1]*w[1][0]*(1.0);
    const double G0_5_1_1 = det*w[2][5]*w[0][1]*w[1][1]*(1.0);
    const double G0_5_1_2 = det*w[2][5]*w[0][1]*w[1][2]*(1.0);
    const double G0_5_1_3 = det*w[2][5]*w[0][1]*w[1][3]*(1.0);
    const double G0_5_1_4 = det*w[2][5]*w[0][1]*w[1][4]*(1.0);
    const double G0_5_1_5 = det*w[2][5]*w[0][1]*w[1][5]*(1.0);
    const double G0_5_2_0 = det*w[2][5]*w[0][2]*w[1][0]*(1.0);
    const double G0_5_2_1 = det*w[2][5]*w[0][2]*w[1][1]*(1.0);
    const double G0_5_2_2 = det*w[2][5]*w[0][2]*w[1][2]*(1.0);
    const double G0_5_2_3 = det*w[2][5]*w[0][2]*w[1][3]*(1.0);
    const double G0_5_2_4 = det*w[2][5]*w[0][2]*w[1][4]*(1.0);
    const double G0_5_2_5 = det*w[2][5]*w[0][2]*w[1][5]*(1.0);
    const double G0_5_3_0 = det*w[2][5]*w[0][3]*w[1][0]*(1.0);
    const double G0_5_3_1 = det*w[2][5]*w[0][3]*w[1][1]*(1.0);
    const double G0_5_3_2 = det*w[2][5]*w[0][3]*w[1][2]*(1.0);
    const double G0_5_3_3 = det*w[2][5]*w[0][3]*w[1][3]*(1.0);
    const double G0_5_3_4 = det*w[2][5]*w[0][3]*w[1][4]*(1.0);
    const double G0_5_3_5 = det*w[2][5]*w[0][3]*w[1][5]*(1.0);
    const double G0_5_4_0 = det*w[2][5]*w[0][4]*w[1][0]*(1.0);
    const double G0_5_4_1 = det*w[2][5]*w[0][4]*w[1][1]*(1.0);
    const double G0_5_4_2 = det*w[2][5]*w[0][4]*w[1][2]*(1.0);
    const double G0_5_4_3 = det*w[2][5]*w[0][4]*w[1][3]*(1.0);
    const double G0_5_4_4 = det*w[2][5]*w[0][4]*w[1][4]*(1.0);
    const double G0_5_4_5 = det*w[2][5]*w[0][4]*w[1][5]*(1.0);
    const double G0_5_5_0 = det*w[2][5]*w[0][5]*w[1][0]*(1.0);
    const double G0_5_5_1 = det*w[2][5]*w[0][5]*w[1][1]*(1.0);
    const double G0_5_5_2 = det*w[2][5]*w[0][5]*w[1][2]*(1.0);
    const double G0_5_5_3 = det*w[2][5]*w[0][5]*w[1][3]*(1.0);
    const double G0_5_5_4 = det*w[2][5]*w[0][5]*w[1][4]*(1.0);
    const double G0_5_5_5 = det*w[2][5]*w[0][5]*w[1][5]*(1.0);
    
    // Compute element tensor
    A[73] = -3.37162837162899e-05*G0_0_0_0 - 5.75317539603344e-06*G0_0_0_1 + 1.67243470814928e-05*G0_0_0_2 - 3.90680747823671e-05*G0_0_0_3 - 4.12087912087982e-05*G0_0_0_4 - 6.74325674325791e-05*G0_0_0_5 - 5.75317539603344e-06*G0_0_1_0 + 5.43206793206885e-05*G0_0_1_1 - 1.53863993149733e-05*G0_0_1_2 + 6.58270301127555e-05*G0_0_1_3 + 2.30127015841341e-05*G0_0_1_4 + 7.27843584986565e-05*G0_0_1_5 + 1.67243470814928e-05*G0_0_2_0 - 1.53863993149733e-05*G0_0_2_1 + 1.47174254317134e-06*G0_0_2_2 - 4.33495076352292e-05*G0_0_2_3 - 2.67589553303885e-06*G0_0_2_4 - 1.76609105180563e-05*G0_0_2_5 - 3.90680747823671e-05*G0_0_3_0 + 6.58270301127555e-05*G0_0_3_1 - 4.33495076352292e-05*G0_0_3_2 + 0.000211930926216676*G0_0_3_3 + 3.2110746396466e-05*G0_0_3_4 + 0.000113457970600847*G0_0_3_5 - 4.12087912087982e-05*G0_0_4_0 + 2.3012701584134e-05*G0_0_4_1 - 2.67589553303885e-06*G0_0_4_2 + 3.2110746396466e-05*G0_0_4_3 - 4.92364778079148e-05*G0_0_4_4 - 1.07035821321555e-05*G0_0_4_5 - 6.74325674325791e-05*G0_0_5_0 + 7.27843584986565e-05*G0_0_5_1 - 1.76609105180563e-05*G0_0_5_2 + 0.000113457970600847*G0_0_5_3 - 1.07035821321554e-05*G0_0_5_4 + 5.56586270872073e-05*G0_0_5_5 - 5.75317539603344e-06*G0_1_0_0 + 5.43206793206885e-05*G0_1_0_1 - 1.53863993149733e-05*G0_1_0_2 + 6.58270301127555e-05*G0_1_0_3 + 2.3012701584134e-05*G0_1_0_4 + 7.27843584986565e-05*G0_1_0_5 + 5.43206793206885e-05*G0_1_1_0 - 0.00039335664335671*G0_1_1_1 + 7.11788211788333e-05*G0_1_1_2 - 0.000299700299700351*G0_1_1_3 - 4.12087912087981e-05*G0_1_1_4 - 0.000243506493506535*G0_1_1_5 - 1.53863993149733e-05*G0_1_2_0 + 7.11788211788333e-05*G0_1_2_1 - 2.22099329242224e-05*G0_1_2_2 + 8.08120450977731e-05*G0_1_2_3 - 2.67589553303886e-06*G0_1_2_4 + 4.65605822748758e-05*G0_1_2_5 + 6.58270301127555e-05*G0_1_3_0 - 0.000299700299700351*G0_1_3_1 + 8.08120450977731e-05*G0_1_3_2 - 0.000449550449550526*G0_1_3_3 - 4.92364778079147e-05*G0_1_3_4 - 0.000224775224775263*G0_1_3_5 + 2.3012701584134e-05*G0_1_4_0 - 4.12087912087981e-05*G0_1_4_1 - 2.67589553303886e-06*G0_1_4_2 - 4.92364778079147e-05*G0_1_4_3 + 3.21107463964661e-05*G0_1_4_4 - 1.07035821321553e-05*G0_1_4_5 + 7.27843584986565e-05*G0_1_5_0 - 0.000243506493506535*G0_1_5_1 + 4.65605822748758e-05*G0_1_5_2 - 0.000224775224775263*G0_1_5_3 - 1.07035821321553e-05*G0_1_5_4 - 0.000224775224775262*G0_1_5_5 + 1.67243470814928e-05*G0_2_0_0 - 1.53863993149733e-05*G0_2_0_1 + 1.47174254317134e-06*G0_2_0_2 - 4.33495076352292e-05*G0_2_0_3 - 2.67589553303885e-06*G0_2_0_4 - 1.76609105180563e-05*G0_2_0_5 - 1.53863993149733e-05*G0_2_1_0 + 7.11788211788333e-05*G0_2_1_1 - 2.22099329242224e-05*G0_2_1_2 + 8.08120450977731e-05*G0_2_1_3 - 2.67589553303886e-06*G0_2_1_4 + 4.65605822748758e-05*G0_2_1_5 + 1.47174254317134e-06*G0_2_2_0 - 2.22099329242224e-05*G0_2_2_1 + 3.37162837162895e-05*G0_2_2_2 - 3.53218210361126e-05*G0_2_2_3 - 5.8869701726854e-06*G0_2_2_4 - 3.26459255030739e-05*G0_2_2_5 - 4.33495076352292e-05*G0_2_3_0 + 8.08120450977731e-05*G0_2_3_1 - 3.53218210361127e-05*G0_2_3_2 + 0.00033823319537611*G0_2_3_3 + 9.20508063365362e-05*G0_2_3_4 + 0.000151990866276606*G0_2_3_5 - 2.67589553303885e-06*G0_2_4_0 - 2.67589553303886e-06*G0_2_4_1 - 5.8869701726854e-06*G0_2_4_2 + 9.20508063365362e-05*G0_2_4_3 + 9.20508063365363e-05*G0_2_4_4 + 7.06436420722255e-05*G0_2_4_5 - 1.76609105180563e-05*G0_2_5_0 + 4.65605822748758e-05*G0_2_5_1 - 3.26459255030739e-05*G0_2_5_2 + 0.000151990866276606*G0_2_5_3 + 7.06436420722255e-05*G0_2_5_4 + 0.000122020836306571*G0_2_5_5 - 3.90680747823671e-05*G0_3_0_0 + 6.58270301127555e-05*G0_3_0_1 - 4.33495076352292e-05*G0_3_0_2 + 0.000211930926216676*G0_3_0_3 + 3.2110746396466e-05*G0_3_0_4 + 0.000113457970600847*G0_3_0_5 + 6.58270301127555e-05*G0_3_1_0 - 0.000299700299700351*G0_3_1_1 + 8.08120450977731e-05*G0_3_1_2 - 0.000449550449550526*G0_3_1_3 - 4.92364778079147e-05*G0_3_1_4 - 0.000224775224775263*G0_3_1_5 - 4.33495076352292e-05*G0_3_2_0 + 8.08120450977731e-05*G0_3_2_1 - 3.53218210361127e-05*G0_3_2_2 + 0.00033823319537611*G0_3_2_3 + 9.20508063365362e-05*G0_3_2_4 + 0.000151990866276606*G0_3_2_5 + 0.000211930926216676*G0_3_3_0 - 0.000449550449550526*G0_3_3_1 + 0.00033823319537611*G0_3_3_2 - 0.00196945911231659*G0_3_3_3 - 0.000325388896817523*G0_3_3_4 - 0.000727843584986565*G0_3_3_5 + 3.2110746396466e-05*G0_3_4_0 - 4.92364778079147e-05*G0_3_4_1 + 9.20508063365362e-05*G0_3_4_2 - 0.000325388896817523*G0_3_4_3 - 0.000128442985585864*G0_3_4_4 - 0.000205508776937383*G0_3_4_5 + 0.000113457970600847*G0_3_5_0 - 0.000224775224775263*G0_3_5_1 + 0.000151990866276606*G0_3_5_2 - 0.000727843584986565*G0_3_5_3 - 0.000205508776937383*G0_3_5_4 - 0.000470957613814836*G0_3_5_5 - 4.12087912087982e-05*G0_4_0_0 + 2.3012701584134e-05*G0_4_0_1 - 2.67589553303886e-06*G0_4_0_2 + 3.2110746396466e-05*G0_4_0_3 - 4.92364778079148e-05*G0_4_0_4 - 1.07035821321554e-05*G0_4_0_5 + 2.3012701584134e-05*G0_4_1_0 - 4.12087912087981e-05*G0_4_1_1 - 2.67589553303886e-06*G0_4_1_2 - 4.92364778079147e-05*G0_4_1_3 + 3.21107463964661e-05*G0_4_1_4 - 1.07035821321553e-05*G0_4_1_5 - 2.67589553303885e-06*G0_4_2_0 - 2.67589553303886e-06*G0_4_2_1 - 5.8869701726854e-06*G0_4_2_2 + 9.20508063365362e-05*G0_4_2_3 + 9.20508063365363e-05*G0_4_2_4 + 7.06436420722255e-05*G0_4_2_5 + 3.2110746396466e-05*G0_4_3_0 - 4.92364778079147e-05*G0_4_3_1 + 9.20508063365362e-05*G0_4_3_2 - 0.000325388896817523*G0_4_3_3 - 0.000128442985585864*G0_4_3_4 - 0.000205508776937383*G0_4_3_5 - 4.92364778079148e-05*G0_4_4_0 + 3.21107463964661e-05*G0_4_4_1 + 9.20508063365363e-05*G0_4_4_2 - 0.000128442985585864*G0_4_4_3 - 0.000325388896817523*G0_4_4_4 - 0.000205508776937383*G0_4_4_5 - 1.07035821321554e-05*G0_4_5_0 - 1.07035821321553e-05*G0_4_5_1 + 7.06436420722255e-05*G0_4_5_2 - 0.000205508776937383*G0_4_5_3 - 0.000205508776937383*G0_4_5_4 - 0.000222634508348832*G0_4_5_5 - 6.74325674325791e-05*G0_5_0_0 + 7.27843584986565e-05*G0_5_0_1 - 1.76609105180563e-05*G0_5_0_2 + 0.000113457970600847*G0_5_0_3 - 1.07035821321554e-05*G0_5_0_4 + 5.56586270872074e-05*G0_5_0_5 + 7.27843584986566e-05*G0_5_1_0 - 0.000243506493506535*G0_5_1_1 + 4.65605822748758e-05*G0_5_1_2 - 0.000224775224775263*G0_5_1_3 - 1.07035821321553e-05*G0_5_1_4 - 0.000224775224775262*G0_5_1_5 - 1.76609105180563e-05*G0_5_2_0 + 4.65605822748758e-05*G0_5_2_1 - 3.26459255030739e-05*G0_5_2_2 + 0.000151990866276606*G0_5_2_3 + 7.06436420722255e-05*G0_5_2_4 + 0.000122020836306571*G0_5_2_5 + 0.000113457970600847*G0_5_3_0 - 0.000224775224775263*G0_5_3_1 + 0.000151990866276606*G0_5_3_2 - 0.000727843584986565*G0_5_3_3 - 0.000205508776937383*G0_5_3_4 - 0.000470957613814836*G0_5_3_5 - 1.07035821321555e-05*G0_5_4_0 - 1.07035821321553e-05*G0_5_4_1 + 7.06436420722255e-05*G0_5_4_2 - 0.000205508776937383*G0_5_4_3 - 0.000205508776937383*G0_5_4_4 - 0.000222634508348832*G0_5_4_5 + 5.56586270872073e-05*G0_5_5_0 - 0.000224775224775262*G0_5_5_1 + 0.000122020836306571*G0_5_5_2 - 0.000470957613814836*G0_5_5_3 - 0.000222634508348832*G0_5_5_4 - 0.000428143285286216*G0_5_5_5;
    A[37] = A[73];
    A[11] = 1.17739403453709e-05*G0_0_0_0 + 5.68875568875667e-06*G0_0_0_1 - 2.0085734371452e-06*G0_0_0_2 + 5.41125541125633e-06*G0_0_0_3 + 9.24340210054651e-06*G0_0_0_4 + 1.67887667887696e-05*G0_0_0_5 + 5.68875568875667e-06*G0_0_1_0 - 8.7875087875103e-05*G0_0_1_1 + 5.68875568875666e-06*G0_0_1_2 - 1.89625189625222e-05*G0_0_1_3 - 1.8962518962522e-06*G0_0_1_4 - 3.79250379250444e-05*G0_0_1_5 - 2.0085734371452e-06*G0_0_2_0 + 5.68875568875666e-06*G0_0_2_1 - 2.0085734371452e-06*G0_0_2_2 + 1.6187516187519e-06*G0_0_2_3 - 3.10536024821791e-06*G0_0_2_4 + 1.6187516187519e-06*G0_0_2_5 + 5.41125541125632e-06*G0_0_3_0 - 1.89625189625222e-05*G0_0_3_1 + 1.6187516187519e-06*G0_0_3_2 - 2.10900210900247e-05*G0_0_3_3 - 7.03000703000821e-06*G0_0_3_4 - 1.40600140600164e-05*G0_0_3_5 + 9.24340210054651e-06*G0_0_4_0 - 1.8962518962522e-06*G0_0_4_1 - 3.10536024821791e-06*G0_0_4_2 - 7.03000703000821e-06*G0_0_4_3 - 1.37428708857304e-06*G0_0_4_4 + 5.5500055500065e-07*G0_0_4_5 + 1.67887667887696e-05*G0_0_5_0 - 3.79250379250444e-05*G0_0_5_1 + 1.6187516187519e-06*G0_0_5_2 - 1.40600140600164e-05*G0_0_5_3 + 5.5500055500065e-07*G0_0_5_4 - 2.10900210900247e-05*G0_0_5_5 + 5.68875568875667e-06*G0_1_0_0 - 8.78750878751029e-05*G0_1_0_1 + 5.68875568875666e-06*G0_1_0_2 - 1.89625189625222e-05*G0_1_0_3 - 1.8962518962522e-06*G0_1_0_4 - 3.79250379250444e-05*G0_1_0_5 - 8.78750878751029e-05*G0_1_1_0 + 0.00187798312798345*G0_1_1_1 - 8.78750878751028e-05*G0_1_1_2 + 0.000370462870462934*G0_1_1_3 + 1.89625189625218e-05*G0_1_1_4 + 0.000370462870462934*G0_1_1_5 + 5.68875568875666e-06*G0_1_2_0 - 8.78750878751028e-05*G0_1_2_1 + 5.68875568875666e-06*G0_1_2_2 - 3.79250379250444e-05*G0_1_2_3 - 1.89625189625221e-06*G0_1_2_4 - 1.89625189625222e-05*G0_1_2_5 - 1.89625189625222e-05*G0_1_3_0 + 0.000370462870462934*G0_1_3_1 - 3.79250379250444e-05*G0_1_3_2 + 0.000151700151700178*G0_1_3_3 + 7.58500758500889e-05*G0_1_3_5 - 1.8962518962522e-06*G0_1_4_0 + 1.89625189625218e-05*G0_1_4_1 - 1.89625189625221e-06*G0_1_4_2 - 1.51700151700177e-05*G0_1_4_4 - 3.79250379250444e-05*G0_1_5_0 + 0.000370462870462934*G0_1_5_1 - 1.89625189625222e-05*G0_1_5_2 + 7.58500758500889e-05*G0_1_5_3 + 0.000151700151700178*G0_1_5_5 - 2.0085734371452e-06*G0_2_0_0 + 5.68875568875666e-06*G0_2_0_1 - 2.0085734371452e-06*G0_2_0_2 + 1.6187516187519e-06*G0_2_0_3 - 3.10536024821791e-06*G0_2_0_4 + 1.6187516187519e-06*G0_2_0_5 + 5.68875568875666e-06*G0_2_1_0 - 8.78750878751028e-05*G0_2_1_1 + 5.68875568875666e-06*G0_2_1_2 - 3.79250379250444e-05*G0_2_1_3 - 1.89625189625221e-06*G0_2_1_4 - 1.89625189625222e-05*G0_2_1_5 - 2.0085734371452e-06*G0_2_2_0 + 5.68875568875666e-06*G0_2_2_1 + 1.17739403453709e-05*G0_2_2_2 + 1.67887667887696e-05*G0_2_2_3 + 9.24340210054652e-06*G0_2_2_4 + 5.41125541125633e-06*G0_2_2_5 + 1.6187516187519e-06*G0_2_3_0 - 3.79250379250444e-05*G0_2_3_1 + 1.67887667887696e-05*G0_2_3_2 - 2.10900210900247e-05*G0_2_3_3 + 5.55000555000642e-07*G0_2_3_4 - 1.40600140600165e-05*G0_2_3_5 - 3.10536024821791e-06*G0_2_4_0 - 1.89625189625221e-06*G0_2_4_1 + 9.24340210054652e-06*G0_2_4_2 + 5.55000555000642e-07*G0_2_4_3 - 1.37428708857305e-06*G0_2_4_4 - 7.03000703000822e-06*G0_2_4_5 + 1.6187516187519e-06*G0_2_5_0 - 1.89625189625222e-05*G0_2_5_1 + 5.41125541125633e-06*G0_2_5_2 - 1.40600140600165e-05*G0_2_5_3 - 7.03000703000822e-06*G0_2_5_4 - 2.10900210900247e-05*G0_2_5_5 + 5.41125541125632e-06*G0_3_0_0 - 1.89625189625222e-05*G0_3_0_1 + 1.6187516187519e-06*G0_3_0_2 - 2.10900210900247e-05*G0_3_0_3 - 7.03000703000821e-06*G0_3_0_4 - 1.40600140600164e-05*G0_3_0_5 - 1.89625189625222e-05*G0_3_1_0 + 0.000370462870462934*G0_3_1_1 - 3.79250379250444e-05*G0_3_1_2 + 0.000151700151700178*G0_3_1_3 + 7.58500758500889e-05*G0_3_1_5 + 1.6187516187519e-06*G0_3_2_0 - 3.79250379250444e-05*G0_3_2_1 + 1.67887667887696e-05*G0_3_2_2 - 2.10900210900247e-05*G0_3_2_3 + 5.55000555000643e-07*G0_3_2_4 - 1.40600140600165e-05*G0_3_2_5 - 2.10900210900247e-05*G0_3_3_0 + 0.000151700151700178*G0_3_3_1 - 2.10900210900247e-05*G0_3_3_2 + 0.000210900210900247*G0_3_3_3 + 4.21800421800493e-05*G0_3_3_4 + 7.03000703000823e-05*G0_3_3_5 - 7.03000703000821e-06*G0_3_4_0 + 5.55000555000642e-07*G0_3_4_2 + 4.21800421800493e-05*G0_3_4_3 + 4.44000444000519e-05*G0_3_4_4 + 2.81200281200329e-05*G0_3_4_5 - 1.40600140600164e-05*G0_3_5_0 + 7.58500758500889e-05*G0_3_5_1 - 1.40600140600165e-05*G0_3_5_2 + 7.03000703000823e-05*G0_3_5_3 + 2.81200281200329e-05*G0_3_5_4 + 7.03000703000822e-05*G0_3_5_5 + 9.24340210054651e-06*G0_4_0_0 - 1.8962518962522e-06*G0_4_0_1 - 3.10536024821791e-06*G0_4_0_2 - 7.03000703000821e-06*G0_4_0_3 - 1.37428708857304e-06*G0_4_0_4 + 5.55000555000649e-07*G0_4_0_5 - 1.8962518962522e-06*G0_4_1_0 + 1.89625189625218e-05*G0_4_1_1 - 1.89625189625221e-06*G0_4_1_2 - 1.51700151700177e-05*G0_4_1_4 - 3.10536024821791e-06*G0_4_2_0 - 1.89625189625221e-06*G0_4_2_1 + 9.24340210054652e-06*G0_4_2_2 + 5.55000555000642e-07*G0_4_2_3 - 1.37428708857305e-06*G0_4_2_4 - 7.03000703000822e-06*G0_4_2_5 - 7.03000703000821e-06*G0_4_3_0 + 5.55000555000643e-07*G0_4_3_2 + 4.21800421800493e-05*G0_4_3_3 + 4.44000444000519e-05*G0_4_3_4 + 2.81200281200329e-05*G0_4_3_5 - 1.37428708857304e-06*G0_4_4_0 - 1.51700151700177e-05*G0_4_4_1 - 1.37428708857305e-06*G0_4_4_2 + 4.44000444000519e-05*G0_4_4_3 + 0.000116708688137279*G0_4_4_4 + 4.44000444000519e-05*G0_4_4_5 + 5.55000555000649e-07*G0_4_5_0 - 7.03000703000822e-06*G0_4_5_2 + 2.81200281200329e-05*G0_4_5_3 + 4.44000444000519e-05*G0_4_5_4 + 4.21800421800493e-05*G0_4_5_5 + 1.67887667887696e-05*G0_5_0_0 - 3.79250379250444e-05*G0_5_0_1 + 1.6187516187519e-06*G0_5_0_2 - 1.40600140600164e-05*G0_5_0_3 + 5.55000555000648e-07*G0_5_0_4 - 2.10900210900247e-05*G0_5_0_5 - 3.79250379250444e-05*G0_5_1_0 + 0.000370462870462934*G0_5_1_1 - 1.89625189625222e-05*G0_5_1_2 + 7.58500758500889e-05*G0_5_1_3 + 0.000151700151700178*G0_5_1_5 + 1.6187516187519e-06*G0_5_2_0 - 1.89625189625222e-05*G0_5_2_1 + 5.41125541125633e-06*G0_5_2_2 - 1.40600140600165e-05*G0_5_2_3 - 7.03000703000822e-06*G0_5_2_4 - 2.10900210900247e-05*G0_5_2_5 - 1.40600140600164e-05*G0_5_3_0 + 7.58500758500889e-05*G0_5_3_1 - 1.40600140600165e-05*G0_5_3_2 + 7.03000703000823e-05*G0_5_3_3 + 2.81200281200329e-05*G0_5_3_4 + 7.03000703000822e-05*G0_5_3_5 + 5.55000555000649e-07*G0_5_4_0 - 7.03000703000822e-06*G0_5_4_2 + 2.81200281200329e-05*G0_5_4_3 + 4.44000444000519e-05*G0_5_4_4 + 4.21800421800493e-05*G0_5_4_5 - 2.10900210900247e-05*G0_5_5_0 + 0.000151700151700178*G0_5_5_1 - 2.10900210900247e-05*G0_5_5_2 + 7.03000703000822e-05*G0_5_5_3 + 4.21800421800493e-05*G0_5_5_4 + 0.000210900210900247*G0_5_5_5;
    A[1] = 0.000103368853368871*G0_0_0_0 - 8.69500869501015e-06*G0_0_0_1 - 6.19750619750724e-06*G0_0_0_2 + 2.4050024050028e-06*G0_0_0_3 + 2.77037777037824e-05*G0_0_0_4 + 4.37525437525511e-05*G0_0_0_5 - 8.69500869501015e-06*G0_0_1_0 - 8.69500869501019e-06*G0_0_1_1 + 1.82192146477892e-06*G0_0_1_2 - 2.55035969321727e-06*G0_0_1_3 - 2.55035969321726e-06*G0_0_1_4 - 1.22496551068e-05*G0_0_1_5 - 6.19750619750724e-06*G0_0_2_0 + 1.82192146477892e-06*G0_0_2_1 - 7.84598998884846e-07*G0_0_2_2 - 2.33232376089558e-06*G0_0_2_3 - 5.46411260697067e-06*G0_0_2_4 - 3.27714613428954e-06*G0_0_2_5 + 2.4050024050028e-06*G0_0_3_0 - 2.55035969321727e-06*G0_0_3_1 - 2.33232376089558e-06*G0_0_3_2 + 2.24643081785977e-06*G0_0_3_3 + 2.90714576428912e-07*G0_0_3_4 + 1.74428745857346e-06*G0_0_3_5 + 2.77037777037824e-05*G0_0_4_0 - 2.55035969321726e-06*G0_0_4_1 - 5.46411260697067e-06*G0_0_4_2 + 2.90714576428912e-07*G0_0_4_3 + 1.16550116550136e-05*G0_0_4_4 + 1.16550116550136e-05*G0_0_4_5 + 4.37525437525511e-05*G0_0_5_0 - 1.22496551068e-05*G0_0_5_1 - 3.27714613428954e-06*G0_0_5_2 + 1.74428745857346e-06*G0_0_5_3 + 1.16550116550136e-05*G0_0_5_4 + 2.33100233100272e-05*G0_0_5_5 - 8.69500869501015e-06*G0_1_0_0 - 8.69500869501019e-06*G0_1_0_1 + 1.82192146477892e-06*G0_1_0_2 - 2.55035969321727e-06*G0_1_0_3 - 2.55035969321726e-06*G0_1_0_4 - 1.22496551068e-05*G0_1_0_5 - 8.69500869501019e-06*G0_1_1_0 + 0.000103368853368871*G0_1_1_1 - 6.19750619750726e-06*G0_1_1_2 + 2.77037777037825e-05*G0_1_1_3 + 2.4050024050028e-06*G0_1_1_4 + 4.37525437525512e-05*G0_1_1_5 + 1.82192146477892e-06*G0_1_2_0 - 6.19750619750726e-06*G0_1_2_1 - 7.84598998884842e-07*G0_1_2_2 - 5.46411260697068e-06*G0_1_2_3 - 2.33232376089558e-06*G0_1_2_4 - 3.27714613428955e-06*G0_1_2_5 - 2.55035969321727e-06*G0_1_3_0 + 2.77037777037825e-05*G0_1_3_1 - 5.46411260697068e-06*G0_1_3_2 + 1.16550116550137e-05*G0_1_3_3 + 2.90714576428911e-07*G0_1_3_4 + 1.16550116550136e-05*G0_1_3_5 - 2.55035969321726e-06*G0_1_4_0 + 2.4050024050028e-06*G0_1_4_1 - 2.33232376089558e-06*G0_1_4_2 + 2.90714576428911e-07*G0_1_4_3 + 2.24643081785977e-06*G0_1_4_4 + 1.74428745857346e-06*G0_1_4_5 - 1.22496551068e-05*G0_1_5_0 + 4.37525437525512e-05*G0_1_5_1 - 3.27714613428955e-06*G0_1_5_2 + 1.16550116550136e-05*G0_1_5_3 + 1.74428745857346e-06*G0_1_5_4 + 2.33100233100273e-05*G0_1_5_5 - 6.19750619750724e-06*G0_2_0_0 + 1.82192146477892e-06*G0_2_0_1 - 7.84598998884846e-07*G0_2_0_2 - 2.33232376089558e-06*G0_2_0_3 - 5.46411260697067e-06*G0_2_0_4 - 3.27714613428954e-06*G0_2_0_5 + 1.82192146477892e-06*G0_2_1_0 - 6.19750619750726e-06*G0_2_1_1 - 7.84598998884842e-07*G0_2_1_2 - 5.46411260697068e-06*G0_2_1_3 - 2.33232376089558e-06*G0_2_1_4 - 3.27714613428955e-06*G0_2_1_5 - 7.84598998884846e-07*G0_2_2_0 - 7.84598998884842e-07*G0_2_2_1 + 1.03913943199675e-05*G0_2_2_2 + 6.27018484161447e-06*G0_2_2_3 + 6.27018484161447e-06*G0_2_2_4 + 7.33393590536572e-07*G0_2_2_5 - 2.33232376089558e-06*G0_2_3_0 - 5.46411260697068e-06*G0_2_3_1 + 6.27018484161447e-06*G0_2_3_2 + 1.24478695907288e-05*G0_2_3_3 + 9.32929504358233e-06*G0_2_3_4 + 3.19786034071802e-06*G0_2_3_5 - 5.46411260697067e-06*G0_2_4_0 - 2.33232376089558e-06*G0_2_4_1 + 6.27018484161447e-06*G0_2_4_2 + 9.32929504358233e-06*G0_2_4_3 + 1.24478695907288e-05*G0_2_4_4 + 3.19786034071802e-06*G0_2_4_5 - 3.27714613428954e-06*G0_2_5_0 - 3.27714613428955e-06*G0_2_5_1 + 7.33393590536572e-07*G0_2_5_2 + 3.19786034071802e-06*G0_2_5_3 + 3.19786034071802e-06*G0_2_5_4 - 2.37857380714564e-06*G0_2_5_5 + 2.4050024050028e-06*G0_3_0_0 - 2.55035969321727e-06*G0_3_0_1 - 2.33232376089558e-06*G0_3_0_2 + 2.24643081785977e-06*G0_3_0_3 + 2.90714576428913e-07*G0_3_0_4 + 1.74428745857346e-06*G0_3_0_5 - 2.55035969321727e-06*G0_3_1_0 + 2.77037777037825e-05*G0_3_1_1 - 5.46411260697068e-06*G0_3_1_2 + 1.16550116550137e-05*G0_3_1_3 + 2.90714576428912e-07*G0_3_1_4 + 1.16550116550136e-05*G0_3_1_5 - 2.33232376089558e-06*G0_3_2_0 - 5.46411260697068e-06*G0_3_2_1 + 6.27018484161447e-06*G0_3_2_2 + 1.24478695907288e-05*G0_3_2_3 + 9.32929504358233e-06*G0_3_2_4 + 3.19786034071802e-06*G0_3_2_5 + 2.24643081785977e-06*G0_3_3_0 + 1.16550116550137e-05*G0_3_3_1 + 1.24478695907288e-05*G0_3_3_2 - 3.20314606028946e-05*G0_3_3_3 - 5.07429078857737e-06*G0_3_3_4 - 1.08885823171556e-05*G0_3_3_5 + 2.90714576428913e-07*G0_3_4_0 + 2.90714576428912e-07*G0_3_4_1 + 9.32929504358233e-06*G0_3_4_2 - 5.07429078857737e-06*G0_3_4_3 - 5.07429078857737e-06*G0_3_4_4 - 6.97714983429387e-06*G0_3_4_5 + 1.74428745857346e-06*G0_3_5_0 + 1.16550116550136e-05*G0_3_5_1 + 3.19786034071802e-06*G0_3_5_2 - 1.08885823171556e-05*G0_3_5_3 - 6.97714983429387e-06*G0_3_5_4 + 1.26857269714434e-06*G0_3_5_5 + 2.77037777037824e-05*G0_4_0_0 - 2.55035969321726e-06*G0_4_0_1 - 5.46411260697067e-06*G0_4_0_2 + 2.90714576428912e-07*G0_4_0_3 + 1.16550116550136e-05*G0_4_0_4 + 1.16550116550136e-05*G0_4_0_5 - 2.55035969321726e-06*G0_4_1_0 + 2.4050024050028e-06*G0_4_1_1 - 2.33232376089558e-06*G0_4_1_2 + 2.90714576428911e-07*G0_4_1_3 + 2.24643081785977e-06*G0_4_1_4 + 1.74428745857346e-06*G0_4_1_5 - 5.46411260697067e-06*G0_4_2_0 - 2.33232376089558e-06*G0_4_2_1 + 6.27018484161447e-06*G0_4_2_2 + 9.32929504358233e-06*G0_4_2_3 + 1.24478695907288e-05*G0_4_2_4 + 3.19786034071803e-06*G0_4_2_5 + 2.90714576428912e-07*G0_4_3_0 + 2.90714576428911e-07*G0_4_3_1 + 9.32929504358233e-06*G0_4_3_2 - 5.07429078857736e-06*G0_4_3_3 - 5.07429078857737e-06*G0_4_3_4 - 6.97714983429387e-06*G0_4_3_5 + 1.16550116550136e-05*G0_4_4_0 + 2.24643081785977e-06*G0_4_4_1 + 1.24478695907288e-05*G0_4_4_2 - 5.07429078857737e-06*G0_4_4_3 - 3.20314606028946e-05*G0_4_4_4 - 1.08885823171556e-05*G0_4_4_5 + 1.16550116550136e-05*G0_4_5_0 + 1.74428745857346e-06*G0_4_5_1 + 3.19786034071802e-06*G0_4_5_2 - 6.97714983429387e-06*G0_4_5_3 - 1.08885823171556e-05*G0_4_5_4 + 1.26857269714434e-06*G0_4_5_5 + 4.37525437525511e-05*G0_5_0_0 - 1.22496551068e-05*G0_5_0_1 - 3.27714613428954e-06*G0_5_0_2 + 1.74428745857346e-06*G0_5_0_3 + 1.16550116550136e-05*G0_5_0_4 + 2.33100233100272e-05*G0_5_0_5 - 1.22496551068e-05*G0_5_1_0 + 4.37525437525512e-05*G0_5_1_1 - 3.27714613428955e-06*G0_5_1_2 + 1.16550116550136e-05*G0_5_1_3 + 1.74428745857346e-06*G0_5_1_4 + 2.33100233100273e-05*G0_5_1_5 - 3.27714613428954e-06*G0_5_2_0 - 3.27714613428955e-06*G0_5_2_1 + 7.33393590536572e-07*G0_5_2_2 + 3.19786034071802e-06*G0_5_2_3 + 3.19786034071802e-06*G0_5_2_4 - 2.37857380714564e-06*G0_5_2_5 + 1.74428745857346e-06*G0_5_3_0 + 1.16550116550136e-05*G0_5_3_1 + 3.19786034071802e-06*G0_5_3_2 - 1.08885823171556e-05*G0_5_3_3 - 6.97714983429387e-06*G0_5_3_4 + 1.26857269714435e-06*G0_5_3_5 + 1.16550116550136e-05*G0_5_4_0 + 1.74428745857346e-06*G0_5_4_1 + 3.19786034071802e-06*G0_5_4_2 - 6.97714983429387e-06*G0_5_4_3 - 1.08885823171556e-05*G0_5_4_4 + 1.26857269714434e-06*G0_5_4_5 + 2.33100233100272e-05*G0_5_5_0 + 2.33100233100273e-05*G0_5_5_1 - 2.37857380714564e-06*G0_5_5_2 + 1.26857269714435e-06*G0_5_5_3 + 1.26857269714434e-06*G0_5_5_4 + 8.30915116629543e-05*G0_5_5_5;
    A[7] = -A[1] + 0.00110861360861379*G0_0_0_0 - 0.00011587949087951*G0_0_0_1 - 6.3431938431949e-05*G0_0_0_2 + 1.69737669737697e-05*G0_0_0_3 + 0.00025664150664155*G0_0_0_4 + 0.000501628001628086*G0_0_0_5 - 0.00011587949087951*G0_0_1_0 + 1.75287675287705e-05*G0_0_1_1 + 6.6088012516595e-06*G0_0_1_2 - 1.30160844446581e-06*G0_0_1_3 - 2.87741359169979e-05*G0_0_1_4 - 7.34384662956215e-05*G0_0_1_5 - 6.3431938431949e-05*G0_0_2_0 + 6.6088012516595e-06*G0_0_2_1 + 7.54040932612488e-06*G0_0_2_2 - 8.15982958840239e-06*G0_0_2_3 - 3.16878888307513e-05*G0_0_2_4 - 3.5328428185577e-05*G0_0_2_5 + 1.69737669737697e-05*G0_0_3_0 - 1.3016084444658e-06*G0_0_3_1 - 8.15982958840239e-06*G0_0_3_2 + 4.22064707779065e-05*G0_0_3_3 + 2.36007378864562e-05*G0_0_3_4 + 3.67093224236143e-05*G0_0_3_5 + 0.00025664150664155*G0_0_4_0 - 2.87741359169979e-05*G0_0_4_1 - 3.16878888307513e-05*G0_0_4_2 + 2.36007378864562e-05*G0_0_4_3 + 0.00012820512820515*G0_0_4_4 + 0.00012820512820515*G0_0_4_5 + 0.000501628001628086*G0_0_5_0 - 7.34384662956215e-05*G0_0_5_1 - 3.5328428185577e-05*G0_0_5_2 + 3.67093224236143e-05*G0_0_5_3 + 0.00012820512820515*G0_0_5_4 + 0.000372960372960436*G0_0_5_5 - 0.00011587949087951*G0_1_0_0 + 1.75287675287705e-05*G0_1_0_1 + 6.6088012516595e-06*G0_1_0_2 - 1.30160844446581e-06*G0_1_0_3 - 2.87741359169979e-05*G0_1_0_4 - 7.34384662956215e-05*G0_1_0_5 + 1.75287675287705e-05*G0_1_1_0 + 4.21800421800495e-05*G0_1_1_1 + 4.47634376205866e-07*G0_1_1_2 - 4.64482607339823e-06*G0_1_1_3 - 4.55232598089819e-06*G0_1_1_4 + 4.50607593464818e-06*G0_1_1_5 + 6.6088012516595e-06*G0_1_2_0 + 4.47634376205866e-07*G0_1_2_1 - 8.14331171474161e-07*G0_1_2_2 + 1.55268012410896e-06*G0_1_2_3 - 2.2133950705383e-06*G0_1_2_4 + 1.18267975410853e-06*G0_1_2_5 - 1.30160844446581e-06*G0_1_3_0 - 4.64482607339823e-06*G0_1_3_1 + 1.55268012410896e-06*G0_1_3_2 - 2.14071642643104e-06*G0_1_3_3 + 1.1707868850728e-05*G0_1_3_4 + 2.37857380714581e-07*G0_1_3_5 - 2.87741359169979e-05*G0_1_4_0 - 4.55232598089819e-06*G0_1_4_1 - 2.2133950705383e-06*G0_1_4_2 + 1.1707868850728e-05*G0_1_4_3 + 1.88964474678792e-05*G0_1_4_4 + 6.73929245357929e-06*G0_1_4_5 - 7.34384662956215e-05*G0_1_5_0 + 4.50607593464817e-06*G0_1_5_1 + 1.18267975410853e-06*G0_1_5_2 + 2.37857380714578e-07*G0_1_5_3 + 6.73929245357929e-06*G0_1_5_4 - 3.66300366300428e-05*G0_1_5_5 - 6.3431938431949e-05*G0_2_0_0 + 6.6088012516595e-06*G0_2_0_1 + 7.54040932612488e-06*G0_2_0_2 - 8.15982958840239e-06*G0_2_0_3 - 3.16878888307513e-05*G0_2_0_4 - 3.5328428185577e-05*G0_2_0_5 + 6.6088012516595e-06*G0_2_1_0 + 4.47634376205866e-07*G0_2_1_1 - 8.14331171474161e-07*G0_2_1_2 + 1.55268012410896e-06*G0_2_1_3 - 2.2133950705383e-06*G0_2_1_4 + 1.18267975410852e-06*G0_2_1_5 + 7.54040932612488e-06*G0_2_2_0 - 8.14331171474161e-07*G0_2_2_1 + 7.22491793920484e-06*G0_2_2_2 - 6.4551850266147e-06*G0_2_2_3 - 6.8714354428654e-07*G0_2_2_4 - 7.71054342483044e-06*G0_2_2_5 - 8.15982958840239e-06*G0_2_3_0 + 1.55268012410896e-06*G0_2_3_1 - 6.4551850266147e-06*G0_2_3_2 + 3.81364667079017e-05*G0_2_3_3 + 2.07464493178814e-05*G0_2_3_4 + 3.17407460264657e-05*G0_2_3_5 - 3.16878888307513e-05*G0_2_4_0 - 2.2133950705383e-06*G0_2_4_1 - 6.8714354428654e-07*G0_2_4_2 + 2.07464493178814e-05*G0_2_4_3 + 1.74428745857346e-05*G0_2_4_4 + 1.98478769907375e-05*G0_2_4_5 - 3.5328428185577e-05*G0_2_5_0 + 1.18267975410853e-06*G0_2_5_1 - 7.71054342483044e-06*G0_2_5_2 + 3.17407460264657e-05*G0_2_5_3 + 1.98478769907375e-05*G0_2_5_4 + 4.25764711479069e-05*G0_2_5_5 + 1.69737669737697e-05*G0_3_0_0 - 1.30160844446581e-06*G0_3_0_1 - 8.15982958840239e-06*G0_3_0_2 + 4.22064707779065e-05*G0_3_0_3 + 2.36007378864562e-05*G0_3_0_4 + 3.67093224236143e-05*G0_3_0_5 - 1.30160844446581e-06*G0_3_1_0 - 4.64482607339824e-06*G0_3_1_1 + 1.55268012410896e-06*G0_3_1_2 - 2.14071642643104e-06*G0_3_1_3 + 1.1707868850728e-05*G0_3_1_4 + 2.37857380714581e-07*G0_3_1_5 - 8.15982958840239e-06*G0_3_2_0 + 1.55268012410896e-06*G0_3_2_1 - 6.4551850266147e-06*G0_3_2_2 + 3.81364667079017e-05*G0_3_2_3 + 2.07464493178814e-05*G0_3_2_4 + 3.17407460264657e-05*G0_3_2_5 + 4.22064707779065e-05*G0_3_3_0 - 2.14071642643104e-06*G0_3_3_1 + 3.81364667079017e-05*G0_3_3_2 - 0.000320314606028946*G0_3_3_3 - 0.000107828679257269*G0_3_3_4 - 0.000147894433608744*G0_3_3_5 + 2.36007378864562e-05*G0_3_4_0 + 1.1707868850728e-05*G0_3_4_1 + 2.07464493178814e-05*G0_3_4_2 - 0.000107828679257269*G0_3_4_3 - 8.49943707086708e-05*G0_3_4_4 - 8.68972297543873e-05*G0_3_4_5 + 3.67093224236143e-05*G0_3_5_0 + 2.37857380714581e-07*G0_3_5_1 + 3.17407460264657e-05*G0_3_5_2 - 0.000147894433608744*G0_3_5_3 - 8.68972297543873e-05*G0_3_5_4 - 0.000158571587143043*G0_3_5_5 + 0.00025664150664155*G0_4_0_0 - 2.87741359169979e-05*G0_4_0_1 - 3.16878888307513e-05*G0_4_0_2 + 2.36007378864562e-05*G0_4_0_3 + 0.00012820512820515*G0_4_0_4 + 0.00012820512820515*G0_4_0_5 - 2.87741359169979e-05*G0_4_1_0 - 4.55232598089819e-06*G0_4_1_1 - 2.2133950705383e-06*G0_4_1_2 + 1.1707868850728e-05*G0_4_1_3 + 1.88964474678792e-05*G0_4_1_4 + 6.73929245357929e-06*G0_4_1_5 - 3.16878888307513e-05*G0_4_2_0 - 2.2133950705383e-06*G0_4_2_1 - 6.8714354428654e-07*G0_4_2_2 + 2.07464493178814e-05*G0_4_2_3 + 1.74428745857347e-05*G0_4_2_4 + 1.98478769907375e-05*G0_4_2_5 + 2.36007378864562e-05*G0_4_3_0 + 1.1707868850728e-05*G0_4_3_1 + 2.07464493178814e-05*G0_4_3_2 - 0.000107828679257269*G0_4_3_3 - 8.49943707086708e-05*G0_4_3_4 - 8.68972297543873e-05*G0_4_3_5 + 0.00012820512820515*G0_4_4_0 + 1.88964474678792e-05*G0_4_4_1 + 1.74428745857347e-05*G0_4_4_2 - 8.49943707086708e-05*G0_4_4_3 - 0.000131931560503011*G0_4_4_4 - 7.74886489172335e-05*G0_4_4_5 + 0.00012820512820515*G0_4_5_0 + 6.73929245357929e-06*G0_4_5_1 + 1.98478769907375e-05*G0_4_5_2 - 8.68972297543873e-05*G0_4_5_3 - 7.74886489172335e-05*G0_4_5_4 - 9.86315272029723e-05*G0_4_5_5 + 0.000501628001628086*G0_5_0_0 - 7.34384662956215e-05*G0_5_0_1 - 3.5328428185577e-05*G0_5_0_2 + 3.67093224236143e-05*G0_5_0_3 + 0.00012820512820515*G0_5_0_4 + 0.000372960372960436*G0_5_0_5 - 7.34384662956215e-05*G0_5_1_0 + 4.50607593464816e-06*G0_5_1_1 + 1.18267975410853e-06*G0_5_1_2 + 2.37857380714581e-07*G0_5_1_3 + 6.73929245357929e-06*G0_5_1_4 - 3.66300366300428e-05*G0_5_1_5 - 3.5328428185577e-05*G0_5_2_0 + 1.18267975410852e-06*G0_5_2_1 - 7.71054342483044e-06*G0_5_2_2 + 3.17407460264657e-05*G0_5_2_3 + 1.98478769907375e-05*G0_5_2_4 + 4.25764711479069e-05*G0_5_2_5 + 3.67093224236143e-05*G0_5_3_0 + 2.37857380714581e-07*G0_5_3_1 + 3.17407460264657e-05*G0_5_3_2 - 0.000147894433608744*G0_5_3_3 - 8.68972297543873e-05*G0_5_3_4 - 0.000158571587143043*G0_5_3_5 + 0.00012820512820515*G0_5_4_0 + 6.73929245357929e-06*G0_5_4_1 + 1.98478769907375e-05*G0_5_4_2 - 8.68972297543873e-05*G0_5_4_3 - 7.74886489172335e-05*G0_5_4_4 - 9.86315272029723e-05*G0_5_4_5 + 0.000372960372960436*G0_5_5_0 - 3.66300366300428e-05*G0_5_5_1 + 4.25764711479069e-05*G0_5_5_2 - 0.000158571587143043*G0_5_5_3 - 9.86315272029723e-05*G0_5_5_4 - 0.000316508887937513*G0_5_5_5;
    A[99] = A[73] + 3.37162837162897e-05*G0_0_0_0 - 0.000109845511631245*G0_0_0_1 - 0.000132323034108771*G0_0_0_2 + 0.000674860853432396*G0_0_0_3 + 0.000715534465534586*G0_0_0_4 + 0.000741758241758367*G0_0_0_5 - 0.000109845511631245*G0_0_1_0 - 0.000169919366347966*G0_0_1_1 + 2.98362351933831e-05*G0_0_1_2 + 0.00022316968745544*G0_0_1_3 + 0.000265984015984061*G0_0_1_4 + 4.28143285286215e-06*G0_0_1_5 - 0.000132323034108771*G0_0_2_0 + 2.98362351933831e-05*G0_0_2_1 - 0.000117070429570449*G0_0_2_2 + 0.000332346225203424*G0_0_2_3 + 7.97416868845577e-05*G0_0_2_4 + 0.000306657628086251*G0_0_2_5 + 0.000674860853432396*G0_0_3_0 + 0.00022316968745544*G0_0_3_1 + 0.000332346225203424*G0_0_3_2 - 0.00298629941487135*G0_0_3_3 - 0.00188168973883291*G0_0_3_4 - 0.00196303696303729*G0_0_3_5 + 0.000715534465534586*G0_0_4_0 + 0.000265984015984061*G0_0_4_1 + 7.97416868845577e-05*G0_0_4_2 - 0.00188168973883291*G0_0_4_3 - 0.00149207934922246*G0_0_4_4 - 0.00114528328814062*G0_0_4_5 + 0.000741758241758367*G0_0_5_0 + 4.28143285286218e-06*G0_0_5_1 + 0.000306657628086251*G0_0_5_2 - 0.00196303696303729*G0_0_5_3 - 0.00114528328814062*G0_0_5_4 - 0.00159697445411758*G0_0_5_5 - 0.000109845511631245*G0_1_0_0 - 0.000169919366347966*G0_1_0_1 + 2.9836235193383e-05*G0_1_0_2 + 0.00022316968745544*G0_1_0_3 + 0.000265984015984061*G0_1_0_4 + 4.28143285286218e-06*G0_1_0_5 - 0.000169919366347966*G0_1_1_0 + 0.00039335664335671*G0_1_1_1 - 0.000186777508206111*G0_1_1_2 + 0.000974025974026138*G0_1_1_3 + 0.000677001569858827*G0_1_1_4 + 0.000917832167832322*G0_1_1_5 + 2.98362351933831e-05*G0_1_2_0 - 0.000186777508206111*G0_1_2_1 - 9.33887541030555e-05*G0_1_2_2 - 3.7462537462543e-06*G0_1_2_3 + 0.000291672613101234*G0_1_2_4 + 0.000242436135293319*G0_1_2_5 + 0.00022316968745544*G0_1_3_0 + 0.000974025974026138*G0_1_3_1 - 3.74625374625423e-06*G0_1_3_2 - 0.00109176537747985*G0_1_3_3 - 0.00180034251462853*G0_1_3_4 - 0.000931211645497517*G0_1_3_5 + 0.000265984015984061*G0_1_4_0 + 0.000677001569858827*G0_1_4_1 + 0.000291672613101234*G0_1_4_2 - 0.00180034251462853*G0_1_4_3 - 0.00280647923505114*G0_1_4_4 - 0.00183887541030429*G0_1_4_5 + 4.28143285286215e-06*G0_1_5_0 + 0.000917832167832322*G0_1_5_1 + 0.000242436135293319*G0_1_5_2 - 0.000931211645497517*G0_1_5_3 - 0.00183887541030429*G0_1_5_4 - 0.00131654060225511*G0_1_5_5 - 0.000132323034108771*G0_2_0_0 + 2.9836235193383e-05*G0_2_0_1 - 0.000117070429570449*G0_2_0_2 + 0.000332346225203424*G0_2_0_3 + 7.97416868845577e-05*G0_2_0_4 + 0.000306657628086251*G0_2_0_5 + 2.9836235193383e-05*G0_2_1_0 - 0.000186777508206111*G0_2_1_1 - 9.33887541030555e-05*G0_2_1_2 - 3.7462537462543e-06*G0_2_1_3 + 0.000291672613101234*G0_2_1_4 + 0.000242436135293319*G0_2_1_5 - 0.000117070429570449*G0_2_2_0 - 9.33887541030555e-05*G0_2_2_1 - 3.37162837162896e-05*G0_2_2_2 + 0.000709647495361901*G0_2_2_3 + 0.000680212644498473*G0_2_2_4 + 0.000668438704153103*G0_2_2_5 + 0.000332346225203424*G0_2_3_0 - 3.74625374625425e-06*G0_2_3_1 + 0.000709647495361901*G0_2_3_2 - 0.00187954902240648*G0_2_3_3 - 0.00124803767660932*G0_2_3_4 - 0.00200156985871305*G0_2_3_5 + 7.97416868845577e-05*G0_2_4_0 + 0.000291672613101234*G0_2_4_1 + 0.000680212644498473*G0_2_4_2 - 0.00124803767660932*G0_2_4_3 - 0.00163336663336691*G0_2_4_4 - 0.00192022263450867*G0_2_4_5 + 0.000306657628086251*G0_2_5_0 + 0.000242436135293319*G0_2_5_1 + 0.000668438704153103*G0_2_5_2 - 0.00200156985871305*G0_2_5_3 - 0.00192022263450867*G0_2_5_4 - 0.00289638932496124*G0_2_5_5 + 0.000674860853432396*G0_3_0_0 + 0.00022316968745544*G0_3_0_1 + 0.000332346225203424*G0_3_0_2 - 0.00298629941487135*G0_3_0_3 - 0.00188168973883291*G0_3_0_4 - 0.00196303696303729*G0_3_0_5 + 0.00022316968745544*G0_3_1_0 + 0.000974025974026138*G0_3_1_1 - 3.74625374625432e-06*G0_3_1_2 - 0.00109176537747985*G0_3_1_3 - 0.00180034251462853*G0_3_1_4 - 0.000931211645497517*G0_3_1_5 + 0.000332346225203424*G0_3_2_0 - 3.74625374625432e-06*G0_3_2_1 + 0.000709647495361901*G0_3_2_2 - 0.00187954902240648*G0_3_2_3 - 0.00124803767660932*G0_3_2_4 - 0.00200156985871305*G0_3_2_5 - 0.00298629941487135*G0_3_3_0 - 0.00109176537747985*G0_3_3_1 - 0.00187954902240648*G0_3_3_2 + 0.0173826173826203*G0_3_3_3 + 0.00957328385899976*G0_3_3_4 + 0.0099757385471688*G0_3_3_5 - 0.00188168973883291*G0_3_4_0 - 0.00180034251462853*G0_3_4_1 - 0.00124803767660932*G0_3_4_2 + 0.00957328385899976*G0_3_4_3 + 0.00937633794776811*G0_3_4_4 + 0.00760382474668317*G0_3_4_5 - 0.00196303696303729*G0_3_5_0 - 0.000931211645497517*G0_3_5_1 - 0.00200156985871305*G0_3_5_2 + 0.0099757385471688*G0_3_5_3 + 0.00760382474668317*G0_3_5_4 + 0.00971885257599708*G0_3_5_5 + 0.000715534465534586*G0_4_0_0 + 0.000265984015984061*G0_4_0_1 + 7.97416868845577e-05*G0_4_0_2 - 0.00188168973883291*G0_4_0_3 - 0.00149207934922246*G0_4_0_4 - 0.00114528328814062*G0_4_0_5 + 0.000265984015984061*G0_4_1_0 + 0.000677001569858827*G0_4_1_1 + 0.000291672613101234*G0_4_1_2 - 0.00180034251462853*G0_4_1_3 - 0.00280647923505114*G0_4_1_4 - 0.00183887541030429*G0_4_1_5 + 7.97416868845577e-05*G0_4_2_0 + 0.000291672613101234*G0_4_2_1 + 0.000680212644498473*G0_4_2_2 - 0.00124803767660932*G0_4_2_3 - 0.00163336663336691*G0_4_2_4 - 0.00192022263450867*G0_4_2_5 - 0.00188168973883291*G0_4_3_0 - 0.00180034251462853*G0_4_3_1 - 0.00124803767660932*G0_4_3_2 + 0.00957328385899976*G0_4_3_3 + 0.00937633794776811*G0_4_3_4 + 0.00760382474668318*G0_4_3_5 - 0.00149207934922246*G0_4_4_0 - 0.00280647923505114*G0_4_4_1 - 0.00163336663336691*G0_4_4_2 + 0.00937633794776811*G0_4_4_3 + 0.0157385471671213*G0_4_4_4 + 0.00945340373911962*G0_4_4_5 - 0.00114528328814062*G0_4_5_0 - 0.00183887541030429*G0_4_5_1 - 0.00192022263450867*G0_4_5_2 + 0.00760382474668318*G0_4_5_3 + 0.00945340373911962*G0_4_5_4 + 0.00947052947053107*G0_4_5_5 + 0.000741758241758367*G0_5_0_0 + 4.28143285286218e-06*G0_5_0_1 + 0.000306657628086251*G0_5_0_2 - 0.00196303696303729*G0_5_0_3 - 0.00114528328814062*G0_5_0_4 - 0.00159697445411758*G0_5_0_5 + 4.28143285286215e-06*G0_5_1_0 + 0.000917832167832322*G0_5_1_1 + 0.000242436135293319*G0_5_1_2 - 0.000931211645497517*G0_5_1_3 - 0.00183887541030429*G0_5_1_4 - 0.00131654060225511*G0_5_1_5 + 0.000306657628086251*G0_5_2_0 + 0.000242436135293319*G0_5_2_1 + 0.000668438704153103*G0_5_2_2 - 0.00200156985871305*G0_5_2_3 - 0.00192022263450867*G0_5_2_4 - 0.00289638932496124*G0_5_2_5 - 0.00196303696303729*G0_5_3_0 - 0.000931211645497517*G0_5_3_1 - 0.00200156985871305*G0_5_3_2 + 0.00997573854716881*G0_5_3_3 + 0.00760382474668317*G0_5_3_4 + 0.00971885257599708*G0_5_3_5 - 0.00114528328814062*G0_5_4_0 - 0.00183887541030429*G0_5_4_1 - 0.00192022263450867*G0_5_4_2 + 0.00760382474668318*G0_5_4_3 + 0.00945340373911962*G0_5_4_4 + 0.00947052947053107*G0_5_4_5 - 0.00159697445411758*G0_5_5_0 - 0.00131654060225511*G0_5_5_1 - 0.00289638932496124*G0_5_5_2 + 0.00971885257599708*G0_5_5_3 + 0.00947052947053107*G0_5_5_4 + 0.01584130155559*G0_5_5_5;
    A[21] = 1.03913943199675e-05*G0_0_0_0 - 7.84598998884842e-07*G0_0_0_1 - 7.84598998884843e-07*G0_0_0_2 + 7.3339359053657e-07*G0_0_0_3 + 6.27018484161446e-06*G0_0_0_4 + 6.27018484161446e-06*G0_0_0_5 - 7.84598998884842e-07*G0_0_1_0 - 6.19750619750725e-06*G0_0_1_1 + 1.82192146477891e-06*G0_0_1_2 - 3.27714613428955e-06*G0_0_1_3 - 2.33232376089558e-06*G0_0_1_4 - 5.46411260697067e-06*G0_0_1_5 - 7.84598998884844e-07*G0_0_2_0 + 1.82192146477891e-06*G0_0_2_1 - 6.19750619750724e-06*G0_0_2_2 - 3.27714613428954e-06*G0_0_2_3 - 5.46411260697067e-06*G0_0_2_4 - 2.33232376089558e-06*G0_0_2_5 + 7.3339359053657e-07*G0_0_3_0 - 3.27714613428955e-06*G0_0_3_1 - 3.27714613428954e-06*G0_0_3_2 - 2.37857380714564e-06*G0_0_3_3 + 3.19786034071802e-06*G0_0_3_4 + 3.19786034071803e-06*G0_0_3_5 + 6.27018484161446e-06*G0_0_4_0 - 2.33232376089558e-06*G0_0_4_1 - 5.46411260697067e-06*G0_0_4_2 + 3.19786034071802e-06*G0_0_4_3 + 1.24478695907288e-05*G0_0_4_4 + 9.32929504358233e-06*G0_0_4_5 + 6.27018484161446e-06*G0_0_5_0 - 5.46411260697066e-06*G0_0_5_1 - 2.33232376089558e-06*G0_0_5_2 + 3.19786034071803e-06*G0_0_5_3 + 9.32929504358233e-06*G0_0_5_4 + 1.24478695907288e-05*G0_0_5_5 - 7.84598998884842e-07*G0_1_0_0 - 6.19750619750725e-06*G0_1_0_1 + 1.82192146477891e-06*G0_1_0_2 - 3.27714613428955e-06*G0_1_0_3 - 2.33232376089558e-06*G0_1_0_4 - 5.46411260697067e-06*G0_1_0_5 - 6.19750619750725e-06*G0_1_1_0 + 0.000103368853368871*G0_1_1_1 - 8.69500869501018e-06*G0_1_1_2 + 4.37525437525512e-05*G0_1_1_3 + 2.4050024050028e-06*G0_1_1_4 + 2.77037777037824e-05*G0_1_1_5 + 1.82192146477891e-06*G0_1_2_0 - 8.69500869501018e-06*G0_1_2_1 - 8.69500869501015e-06*G0_1_2_2 - 1.22496551068e-05*G0_1_2_3 - 2.55035969321726e-06*G0_1_2_4 - 2.55035969321727e-06*G0_1_2_5 - 3.27714613428955e-06*G0_1_3_0 + 4.37525437525512e-05*G0_1_3_1 - 1.22496551068e-05*G0_1_3_2 + 2.33100233100273e-05*G0_1_3_3 + 1.74428745857347e-06*G0_1_3_4 + 1.16550116550136e-05*G0_1_3_5 - 2.33232376089558e-06*G0_1_4_0 + 2.4050024050028e-06*G0_1_4_1 - 2.55035969321726e-06*G0_1_4_2 + 1.74428745857347e-06*G0_1_4_3 + 2.24643081785977e-06*G0_1_4_4 + 2.90714576428908e-07*G0_1_4_5 - 5.46411260697067e-06*G0_1_5_0 + 2.77037777037824e-05*G0_1_5_1 - 2.55035969321727e-06*G0_1_5_2 + 1.16550116550136e-05*G0_1_5_3 + 2.90714576428908e-07*G0_1_5_4 + 1.16550116550136e-05*G0_1_5_5 - 7.84598998884844e-07*G0_2_0_0 + 1.82192146477891e-06*G0_2_0_1 - 6.19750619750724e-06*G0_2_0_2 - 3.27714613428954e-06*G0_2_0_3 - 5.46411260697067e-06*G0_2_0_4 - 2.33232376089558e-06*G0_2_0_5 + 1.82192146477891e-06*G0_2_1_0 - 8.69500869501017e-06*G0_2_1_1 - 8.69500869501015e-06*G0_2_1_2 - 1.22496551068e-05*G0_2_1_3 - 2.55035969321726e-06*G0_2_1_4 - 2.55035969321727e-06*G0_2_1_5 - 6.19750619750724e-06*G0_2_2_0 - 8.69500869501015e-06*G0_2_2_1 + 0.000103368853368871*G0_2_2_2 + 4.37525437525511e-05*G0_2_2_3 + 2.77037777037824e-05*G0_2_2_4 + 2.40500240500282e-06*G0_2_2_5 - 3.27714613428954e-06*G0_2_3_0 - 1.22496551068e-05*G0_2_3_1 + 4.37525437525511e-05*G0_2_3_2 + 2.33100233100273e-05*G0_2_3_3 + 1.16550116550136e-05*G0_2_3_4 + 1.74428745857347e-06*G0_2_3_5 - 5.46411260697067e-06*G0_2_4_0 - 2.55035969321726e-06*G0_2_4_1 + 2.77037777037824e-05*G0_2_4_2 + 1.16550116550136e-05*G0_2_4_3 + 1.16550116550136e-05*G0_2_4_4 + 2.90714576428917e-07*G0_2_4_5 - 2.33232376089558e-06*G0_2_5_0 - 2.55035969321727e-06*G0_2_5_1 + 2.40500240500282e-06*G0_2_5_2 + 1.74428745857347e-06*G0_2_5_3 + 2.90714576428917e-07*G0_2_5_4 + 2.24643081785978e-06*G0_2_5_5 + 7.3339359053657e-07*G0_3_0_0 - 3.27714613428955e-06*G0_3_0_1 - 3.27714613428954e-06*G0_3_0_2 - 2.37857380714564e-06*G0_3_0_3 + 3.19786034071802e-06*G0_3_0_4 + 3.19786034071803e-06*G0_3_0_5 - 3.27714613428955e-06*G0_3_1_0 + 4.37525437525512e-05*G0_3_1_1 - 1.22496551068e-05*G0_3_1_2 + 2.33100233100273e-05*G0_3_1_3 + 1.74428745857347e-06*G0_3_1_4 + 1.16550116550136e-05*G0_3_1_5 - 3.27714613428954e-06*G0_3_2_0 - 1.22496551068e-05*G0_3_2_1 + 4.37525437525511e-05*G0_3_2_2 + 2.33100233100273e-05*G0_3_2_3 + 1.16550116550136e-05*G0_3_2_4 + 1.74428745857347e-06*G0_3_2_5 - 2.37857380714564e-06*G0_3_3_0 + 2.33100233100273e-05*G0_3_3_1 + 2.33100233100273e-05*G0_3_3_2 + 8.30915116629544e-05*G0_3_3_3 + 1.26857269714434e-06*G0_3_3_4 + 1.26857269714435e-06*G0_3_3_5 + 3.19786034071802e-06*G0_3_4_0 + 1.74428745857347e-06*G0_3_4_1 + 1.16550116550136e-05*G0_3_4_2 + 1.26857269714434e-06*G0_3_4_3 - 1.08885823171556e-05*G0_3_4_4 - 6.97714983429387e-06*G0_3_4_5 + 3.19786034071803e-06*G0_3_5_0 + 1.16550116550136e-05*G0_3_5_1 + 1.74428745857347e-06*G0_3_5_2 + 1.26857269714435e-06*G0_3_5_3 - 6.97714983429388e-06*G0_3_5_4 - 1.08885823171556e-05*G0_3_5_5 + 6.27018484161446e-06*G0_4_0_0 - 2.33232376089558e-06*G0_4_0_1 - 5.46411260697067e-06*G0_4_0_2 + 3.19786034071802e-06*G0_4_0_3 + 1.24478695907288e-05*G0_4_0_4 + 9.32929504358233e-06*G0_4_0_5 - 2.33232376089558e-06*G0_4_1_0 + 2.4050024050028e-06*G0_4_1_1 - 2.55035969321726e-06*G0_4_1_2 + 1.74428745857347e-06*G0_4_1_3 + 2.24643081785977e-06*G0_4_1_4 + 2.90714576428908e-07*G0_4_1_5 - 5.46411260697067e-06*G0_4_2_0 - 2.55035969321726e-06*G0_4_2_1 + 2.77037777037824e-05*G0_4_2_2 + 1.16550116550136e-05*G0_4_2_3 + 1.16550116550136e-05*G0_4_2_4 + 2.90714576428917e-07*G0_4_2_5 + 3.19786034071802e-06*G0_4_3_0 + 1.74428745857347e-06*G0_4_3_1 + 1.16550116550136e-05*G0_4_3_2 + 1.26857269714434e-06*G0_4_3_3 - 1.08885823171556e-05*G0_4_3_4 - 6.97714983429387e-06*G0_4_3_5 + 1.24478695907288e-05*G0_4_4_0 + 2.24643081785977e-06*G0_4_4_1 + 1.16550116550136e-05*G0_4_4_2 - 1.08885823171556e-05*G0_4_4_3 - 3.20314606028946e-05*G0_4_4_4 - 5.07429078857736e-06*G0_4_4_5 + 9.32929504358233e-06*G0_4_5_0 + 2.90714576428908e-07*G0_4_5_1 + 2.90714576428917e-07*G0_4_5_2 - 6.97714983429387e-06*G0_4_5_3 - 5.07429078857736e-06*G0_4_5_4 - 5.07429078857738e-06*G0_4_5_5 + 6.27018484161446e-06*G0_5_0_0 - 5.46411260697066e-06*G0_5_0_1 - 2.33232376089558e-06*G0_5_0_2 + 3.19786034071803e-06*G0_5_0_3 + 9.32929504358233e-06*G0_5_0_4 + 1.24478695907288e-05*G0_5_0_5 - 5.46411260697067e-06*G0_5_1_0 + 2.77037777037824e-05*G0_5_1_1 - 2.55035969321727e-06*G0_5_1_2 + 1.16550116550136e-05*G0_5_1_3 + 2.90714576428908e-07*G0_5_1_4 + 1.16550116550136e-05*G0_5_1_5 - 2.33232376089558e-06*G0_5_2_0 - 2.55035969321727e-06*G0_5_2_1 + 2.40500240500282e-06*G0_5_2_2 + 1.74428745857347e-06*G0_5_2_3 + 2.90714576428917e-07*G0_5_2_4 + 2.24643081785978e-06*G0_5_2_5 + 3.19786034071803e-06*G0_5_3_0 + 1.16550116550136e-05*G0_5_3_1 + 1.74428745857347e-06*G0_5_3_2 + 1.26857269714435e-06*G0_5_3_3 - 6.97714983429387e-06*G0_5_3_4 - 1.08885823171556e-05*G0_5_3_5 + 9.32929504358233e-06*G0_5_4_0 + 2.90714576428908e-07*G0_5_4_1 + 2.90714576428917e-07*G0_5_4_2 - 6.97714983429387e-06*G0_5_4_3 - 5.07429078857736e-06*G0_5_4_4 - 5.07429078857738e-06*G0_5_4_5 + 1.24478695907288e-05*G0_5_5_0 + 1.16550116550136e-05*G0_5_5_1 + 2.24643081785978e-06*G0_5_5_2 - 1.08885823171556e-05*G0_5_5_3 - 5.07429078857738e-06*G0_5_5_4 - 3.20314606028947e-05*G0_5_5_5;
    A[90] = A[21] + 0.000139458755530208*G0_0_0_0 - 1.66979184836356e-05*G0_0_0_1 - 1.66979184836356e-05*G0_0_0_2 + 3.42316413745043e-05*G0_0_0_3 + 8.11424025709877e-05*G0_0_0_4 + 8.11424025709877e-05*G0_0_0_5 - 1.66979184836356e-05*G0_0_1_0 - 2.0085734371452e-06*G0_0_1_1 + 4.95701388558615e-06*G0_0_1_2 + 7.20179291607986e-06*G0_0_1_3 + 2.3323237608956e-06*G0_0_1_4 - 1.20184048755498e-05*G0_0_1_5 - 1.66979184836356e-05*G0_0_2_0 + 4.95701388558615e-06*G0_0_2_1 - 2.00857343714521e-06*G0_0_2_2 + 7.20179291607987e-06*G0_0_2_3 - 1.20184048755498e-05*G0_0_2_4 + 2.3323237608956e-06*G0_0_2_5 + 3.42316413745043e-05*G0_0_3_0 + 7.20179291607986e-06*G0_0_3_1 + 7.20179291607987e-06*G0_0_3_2 - 0.000160315874601616*G0_0_3_3 - 7.31279302707998e-05*G0_0_3_4 - 7.31279302707998e-05*G0_0_3_5 + 8.11424025709877e-05*G0_0_4_0 + 2.3323237608956e-06*G0_0_4_1 - 1.20184048755498e-05*G0_0_4_2 - 7.31279302707998e-05*G0_0_4_3 - 1.24478695907289e-05*G0_0_4_4 - 9.32929504358239e-06*G0_0_4_5 + 8.11424025709877e-05*G0_0_5_0 - 1.20184048755498e-05*G0_0_5_1 + 2.3323237608956e-06*G0_0_5_2 - 7.31279302707998e-05*G0_0_5_3 - 9.32929504358239e-06*G0_0_5_4 - 1.24478695907288e-05*G0_0_5_5 - 1.66979184836356e-05*G0_1_0_0 - 2.0085734371452e-06*G0_1_0_1 + 4.95701388558615e-06*G0_1_0_2 + 7.20179291607986e-06*G0_1_0_3 + 2.3323237608956e-06*G0_1_0_4 - 1.20184048755498e-05*G0_1_0_5 - 2.0085734371452e-06*G0_1_1_0 - 6.96525696525814e-05*G0_1_1_1 + 7.17866789295482e-06*G0_1_1_2 - 2.3653595082171e-06*G0_1_1_3 - 2.04821633393095e-06*G0_1_1_4 - 4.15589701304058e-06*G0_1_1_5 + 4.95701388558615e-06*G0_1_2_0 + 7.17866789295482e-06*G0_1_2_1 + 7.17866789295482e-06*G0_1_2_2 - 1.91475191475223e-05*G0_1_2_3 - 2.42085956371711e-05*G0_1_2_4 - 2.42085956371711e-05*G0_1_2_5 + 7.20179291607986e-06*G0_1_3_0 - 2.3653595082171e-06*G0_1_3_1 - 1.91475191475223e-05*G0_1_3_2 - 4.18628990057633e-05*G0_1_3_3 - 1.03071531642978e-05*G0_1_3_4 + 3.40136054421825e-05*G0_1_3_5 + 2.3323237608956e-06*G0_1_4_0 - 2.04821633393095e-06*G0_1_4_1 - 2.42085956371711e-05*G0_1_4_2 - 1.03071531642978e-05*G0_1_4_3 + 4.48493305636238e-05*G0_1_4_4 + 5.25136239422042e-05*G0_1_4_5 - 1.20184048755498e-05*G0_1_5_0 - 4.15589701304058e-06*G0_1_5_1 - 2.42085956371711e-05*G0_1_5_2 + 3.40136054421825e-05*G0_1_5_3 + 5.25136239422042e-05*G0_1_5_4 + 0.000105370819656552*G0_1_5_5 - 1.66979184836356e-05*G0_2_0_0 + 4.95701388558615e-06*G0_2_0_1 - 2.00857343714521e-06*G0_2_0_2 + 7.20179291607987e-06*G0_2_0_3 - 1.20184048755498e-05*G0_2_0_4 + 2.3323237608956e-06*G0_2_0_5 + 4.95701388558615e-06*G0_2_1_0 + 7.17866789295482e-06*G0_2_1_1 + 7.17866789295482e-06*G0_2_1_2 - 1.91475191475224e-05*G0_2_1_3 - 2.42085956371711e-05*G0_2_1_4 - 2.42085956371711e-05*G0_2_1_5 - 2.00857343714521e-06*G0_2_2_0 + 7.17866789295482e-06*G0_2_2_1 - 6.96525696525813e-05*G0_2_2_2 - 2.36535950821707e-06*G0_2_2_3 - 4.15589701304056e-06*G0_2_2_4 - 2.04821633393097e-06*G0_2_2_5 + 7.20179291607986e-06*G0_2_3_0 - 1.91475191475223e-05*G0_2_3_1 - 2.36535950821707e-06*G0_2_3_2 - 4.18628990057633e-05*G0_2_3_3 + 3.40136054421825e-05*G0_2_3_4 - 1.03071531642978e-05*G0_2_3_5 - 1.20184048755498e-05*G0_2_4_0 - 2.42085956371711e-05*G0_2_4_1 - 4.15589701304056e-06*G0_2_4_2 + 3.40136054421825e-05*G0_2_4_3 + 0.000105370819656552*G0_2_4_4 + 5.25136239422042e-05*G0_2_4_5 + 2.3323237608956e-06*G0_2_5_0 - 2.42085956371711e-05*G0_2_5_1 - 2.04821633393097e-06*G0_2_5_2 - 1.03071531642978e-05*G0_2_5_3 + 5.25136239422042e-05*G0_2_5_4 + 4.48493305636238e-05*G0_2_5_5 + 3.42316413745043e-05*G0_3_0_0 + 7.20179291607986e-06*G0_3_0_1 + 7.20179291607987e-06*G0_3_0_2 - 0.000160315874601616*G0_3_0_3 - 7.31279302707998e-05*G0_3_0_4 - 7.31279302707998e-05*G0_3_0_5 + 7.20179291607986e-06*G0_3_1_0 - 2.3653595082171e-06*G0_3_1_1 - 1.91475191475223e-05*G0_3_1_2 - 4.18628990057633e-05*G0_3_1_3 - 1.03071531642978e-05*G0_3_1_4 + 3.40136054421825e-05*G0_3_1_5 + 7.20179291607986e-06*G0_3_2_0 - 1.91475191475223e-05*G0_3_2_1 - 2.36535950821707e-06*G0_3_2_2 - 4.18628990057633e-05*G0_3_2_3 + 3.40136054421825e-05*G0_3_2_4 - 1.03071531642978e-05*G0_3_2_5 - 0.000160315874601616*G0_3_3_0 - 4.18628990057633e-05*G0_3_3_1 - 4.18628990057633e-05*G0_3_3_2 + 0.000990120990121157*G0_3_3_3 + 0.000341246055531828*G0_3_3_4 + 0.000341246055531828*G0_3_3_5 - 7.31279302707998e-05*G0_3_4_0 - 1.03071531642978e-05*G0_3_4_1 + 3.40136054421825e-05*G0_3_4_2 + 0.000341246055531828*G0_3_4_3 + 5.6557199414352e-05*G0_3_4_4 + 4.12286126571912e-05*G0_3_4_5 - 7.31279302707998e-05*G0_3_5_0 + 3.40136054421825e-05*G0_3_5_1 - 1.03071531642978e-05*G0_3_5_2 + 0.000341246055531828*G0_3_5_3 + 4.12286126571912e-05*G0_3_5_4 + 5.65571994143521e-05*G0_3_5_5 + 8.11424025709877e-05*G0_4_0_0 + 2.3323237608956e-06*G0_4_0_1 - 1.20184048755498e-05*G0_4_0_2 - 7.31279302707998e-05*G0_4_0_3 - 1.24478695907289e-05*G0_4_0_4 - 9.32929504358238e-06*G0_4_0_5 + 2.3323237608956e-06*G0_4_1_0 - 2.04821633393094e-06*G0_4_1_1 - 2.42085956371711e-05*G0_4_1_2 - 1.03071531642978e-05*G0_4_1_3 + 4.48493305636238e-05*G0_4_1_4 + 5.25136239422042e-05*G0_4_1_5 - 1.20184048755498e-05*G0_4_2_0 - 2.42085956371711e-05*G0_4_2_1 - 4.15589701304056e-06*G0_4_2_2 + 3.40136054421825e-05*G0_4_2_3 + 0.000105370819656552*G0_4_2_4 + 5.25136239422042e-05*G0_4_2_5 - 7.31279302707998e-05*G0_4_3_0 - 1.03071531642978e-05*G0_4_3_1 + 3.40136054421825e-05*G0_4_3_2 + 0.000341246055531828*G0_4_3_3 + 5.6557199414352e-05*G0_4_3_4 + 4.12286126571912e-05*G0_4_3_5 - 1.24478695907289e-05*G0_4_4_0 + 4.48493305636238e-05*G0_4_4_1 + 0.000105370819656552*G0_4_4_2 + 5.6557199414352e-05*G0_4_4_3 - 0.000367568938997572*G0_4_4_4 - 0.000194725909011656*G0_4_4_5 - 9.32929504358238e-06*G0_4_5_0 + 5.25136239422042e-05*G0_4_5_1 + 5.25136239422042e-05*G0_4_5_2 + 4.12286126571912e-05*G0_4_5_3 - 0.000194725909011656*G0_4_5_4 - 0.000194725909011656*G0_4_5_5 + 8.11424025709877e-05*G0_5_0_0 - 1.20184048755498e-05*G0_5_0_1 + 2.3323237608956e-06*G0_5_0_2 - 7.31279302707998e-05*G0_5_0_3 - 9.32929504358239e-06*G0_5_0_4 - 1.24478695907288e-05*G0_5_0_5 - 1.20184048755498e-05*G0_5_1_0 - 4.15589701304058e-06*G0_5_1_1 - 2.42085956371711e-05*G0_5_1_2 + 3.40136054421825e-05*G0_5_1_3 + 5.25136239422042e-05*G0_5_1_4 + 0.000105370819656552*G0_5_1_5 + 2.3323237608956e-06*G0_5_2_0 - 2.42085956371711e-05*G0_5_2_1 - 2.04821633393097e-06*G0_5_2_2 - 1.03071531642978e-05*G0_5_2_3 + 5.25136239422042e-05*G0_5_2_4 + 4.48493305636238e-05*G0_5_2_5 - 7.31279302707998e-05*G0_5_3_0 + 3.40136054421825e-05*G0_5_3_1 - 1.03071531642978e-05*G0_5_3_2 + 0.000341246055531828*G0_5_3_3 + 4.12286126571913e-05*G0_5_3_4 + 5.6557199414352e-05*G0_5_3_5 - 9.32929504358238e-06*G0_5_4_0 + 5.25136239422042e-05*G0_5_4_1 + 5.25136239422042e-05*G0_5_4_2 + 4.12286126571912e-05*G0_5_4_3 - 0.000194725909011656*G0_5_4_4 - 0.000194725909011656*G0_5_4_5 - 1.24478695907289e-05*G0_5_5_0 + 0.000105370819656552*G0_5_5_1 + 4.48493305636238e-05*G0_5_5_2 + 5.6557199414352e-05*G0_5_5_3 - 0.000194725909011656*G0_5_5_4 - 0.000367568938997572*G0_5_5_5;
    A[22] = 1.17739403453709e-05*G0_0_0_0 - 2.0085734371452e-06*G0_0_0_1 + 5.68875568875665e-06*G0_0_0_2 + 5.41125541125632e-06*G0_0_0_3 + 1.67887667887696e-05*G0_0_0_4 + 9.24340210054651e-06*G0_0_0_5 - 2.0085734371452e-06*G0_0_1_0 - 2.0085734371452e-06*G0_0_1_1 + 5.68875568875663e-06*G0_0_1_2 + 1.61875161875189e-06*G0_0_1_3 + 1.61875161875189e-06*G0_0_1_4 - 3.10536024821791e-06*G0_0_1_5 + 5.68875568875665e-06*G0_0_2_0 + 5.68875568875663e-06*G0_0_2_1 - 8.78750878751026e-05*G0_0_2_2 - 1.89625189625221e-05*G0_0_2_3 - 3.79250379250443e-05*G0_0_2_4 - 1.89625189625222e-06*G0_0_2_5 + 5.41125541125632e-06*G0_0_3_0 + 1.61875161875189e-06*G0_0_3_1 - 1.89625189625221e-05*G0_0_3_2 - 2.10900210900246e-05*G0_0_3_3 - 1.40600140600164e-05*G0_0_3_4 - 7.03000703000822e-06*G0_0_3_5 + 1.67887667887696e-05*G0_0_4_0 + 1.61875161875189e-06*G0_0_4_1 - 3.79250379250443e-05*G0_0_4_2 - 1.40600140600164e-05*G0_0_4_3 - 2.10900210900246e-05*G0_0_4_4 + 5.55000555000641e-07*G0_0_4_5 + 9.24340210054651e-06*G0_0_5_0 - 3.10536024821791e-06*G0_0_5_1 - 1.89625189625222e-06*G0_0_5_2 - 7.03000703000822e-06*G0_0_5_3 + 5.55000555000641e-07*G0_0_5_4 - 1.37428708857305e-06*G0_0_5_5 - 2.0085734371452e-06*G0_1_0_0 - 2.0085734371452e-06*G0_1_0_1 + 5.68875568875663e-06*G0_1_0_2 + 1.61875161875189e-06*G0_1_0_3 + 1.61875161875189e-06*G0_1_0_4 - 3.10536024821791e-06*G0_1_0_5 - 2.0085734371452e-06*G0_1_1_0 + 1.17739403453709e-05*G0_1_1_1 + 5.68875568875663e-06*G0_1_1_2 + 1.67887667887696e-05*G0_1_1_3 + 5.41125541125632e-06*G0_1_1_4 + 9.24340210054651e-06*G0_1_1_5 + 5.68875568875663e-06*G0_1_2_0 + 5.68875568875663e-06*G0_1_2_1 - 8.78750878751025e-05*G0_1_2_2 - 3.79250379250443e-05*G0_1_2_3 - 1.89625189625221e-05*G0_1_2_4 - 1.89625189625223e-06*G0_1_2_5 + 1.61875161875189e-06*G0_1_3_0 + 1.67887667887696e-05*G0_1_3_1 - 3.79250379250443e-05*G0_1_3_2 - 2.10900210900246e-05*G0_1_3_3 - 1.40600140600164e-05*G0_1_3_4 + 5.55000555000648e-07*G0_1_3_5 + 1.61875161875189e-06*G0_1_4_0 + 5.41125541125632e-06*G0_1_4_1 - 1.89625189625221e-05*G0_1_4_2 - 1.40600140600164e-05*G0_1_4_3 - 2.10900210900246e-05*G0_1_4_4 - 7.03000703000821e-06*G0_1_4_5 - 3.10536024821791e-06*G0_1_5_0 + 9.24340210054651e-06*G0_1_5_1 - 1.89625189625223e-06*G0_1_5_2 + 5.55000555000648e-07*G0_1_5_3 - 7.03000703000821e-06*G0_1_5_4 - 1.37428708857303e-06*G0_1_5_5 + 5.68875568875665e-06*G0_2_0_0 + 5.68875568875663e-06*G0_2_0_1 - 8.78750878751026e-05*G0_2_0_2 - 1.89625189625221e-05*G0_2_0_3 - 3.79250379250443e-05*G0_2_0_4 - 1.89625189625223e-06*G0_2_0_5 + 5.68875568875663e-06*G0_2_1_0 + 5.68875568875663e-06*G0_2_1_1 - 8.78750878751025e-05*G0_2_1_2 - 3.79250379250443e-05*G0_2_1_3 - 1.89625189625221e-05*G0_2_1_4 - 1.89625189625223e-06*G0_2_1_5 - 8.78750878751026e-05*G0_2_2_0 - 8.78750878751025e-05*G0_2_2_1 + 0.00187798312798344*G0_2_2_2 + 0.000370462870462933*G0_2_2_3 + 0.000370462870462932*G0_2_2_4 + 1.89625189625224e-05*G0_2_2_5 - 1.89625189625221e-05*G0_2_3_0 - 3.79250379250443e-05*G0_2_3_1 + 0.000370462870462933*G0_2_3_2 + 0.000151700151700177*G0_2_3_3 + 7.58500758500885e-05*G0_2_3_4 - 3.79250379250443e-05*G0_2_4_0 - 1.89625189625221e-05*G0_2_4_1 + 0.000370462870462932*G0_2_4_2 + 7.58500758500885e-05*G0_2_4_3 + 0.000151700151700177*G0_2_4_4 - 1.89625189625223e-06*G0_2_5_0 - 1.89625189625223e-06*G0_2_5_1 + 1.89625189625224e-05*G0_2_5_2 - 1.51700151700177e-05*G0_2_5_5 + 5.41125541125632e-06*G0_3_0_0 + 1.61875161875189e-06*G0_3_0_1 - 1.89625189625221e-05*G0_3_0_2 - 2.10900210900246e-05*G0_3_0_3 - 1.40600140600164e-05*G0_3_0_4 - 7.03000703000822e-06*G0_3_0_5 + 1.61875161875189e-06*G0_3_1_0 + 1.67887667887696e-05*G0_3_1_1 - 3.79250379250443e-05*G0_3_1_2 - 2.10900210900246e-05*G0_3_1_3 - 1.40600140600164e-05*G0_3_1_4 + 5.55000555000647e-07*G0_3_1_5 - 1.89625189625221e-05*G0_3_2_0 - 3.79250379250443e-05*G0_3_2_1 + 0.000370462870462933*G0_3_2_2 + 0.000151700151700177*G0_3_2_3 + 7.58500758500885e-05*G0_3_2_4 - 2.10900210900246e-05*G0_3_3_0 - 2.10900210900246e-05*G0_3_3_1 + 0.000151700151700177*G0_3_3_2 + 0.000210900210900247*G0_3_3_3 + 7.03000703000821e-05*G0_3_3_4 + 4.21800421800493e-05*G0_3_3_5 - 1.40600140600164e-05*G0_3_4_0 - 1.40600140600164e-05*G0_3_4_1 + 7.58500758500885e-05*G0_3_4_2 + 7.03000703000821e-05*G0_3_4_3 + 7.03000703000822e-05*G0_3_4_4 + 2.81200281200329e-05*G0_3_4_5 - 7.03000703000822e-06*G0_3_5_0 + 5.55000555000647e-07*G0_3_5_1 + 4.21800421800493e-05*G0_3_5_3 + 2.81200281200329e-05*G0_3_5_4 + 4.44000444000519e-05*G0_3_5_5 + 1.67887667887696e-05*G0_4_0_0 + 1.61875161875189e-06*G0_4_0_1 - 3.79250379250443e-05*G0_4_0_2 - 1.40600140600164e-05*G0_4_0_3 - 2.10900210900246e-05*G0_4_0_4 + 5.55000555000641e-07*G0_4_0_5 + 1.61875161875189e-06*G0_4_1_0 + 5.41125541125632e-06*G0_4_1_1 - 1.89625189625221e-05*G0_4_1_2 - 1.40600140600164e-05*G0_4_1_3 - 2.10900210900246e-05*G0_4_1_4 - 7.03000703000821e-06*G0_4_1_5 - 3.79250379250443e-05*G0_4_2_0 - 1.89625189625221e-05*G0_4_2_1 + 0.000370462870462932*G0_4_2_2 + 7.58500758500885e-05*G0_4_2_3 + 0.000151700151700177*G0_4_2_4 - 1.40600140600164e-05*G0_4_3_0 - 1.40600140600164e-05*G0_4_3_1 + 7.58500758500885e-05*G0_4_3_2 + 7.03000703000821e-05*G0_4_3_3 + 7.03000703000822e-05*G0_4_3_4 + 2.81200281200329e-05*G0_4_3_5 - 2.10900210900246e-05*G0_4_4_0 - 2.10900210900246e-05*G0_4_4_1 + 0.000151700151700177*G0_4_4_2 + 7.03000703000822e-05*G0_4_4_3 + 0.000210900210900246*G0_4_4_4 + 4.21800421800493e-05*G0_4_4_5 + 5.55000555000641e-07*G0_4_5_0 - 7.03000703000821e-06*G0_4_5_1 + 2.81200281200329e-05*G0_4_5_3 + 4.21800421800493e-05*G0_4_5_4 + 4.44000444000519e-05*G0_4_5_5 + 9.24340210054651e-06*G0_5_0_0 - 3.10536024821791e-06*G0_5_0_1 - 1.89625189625223e-06*G0_5_0_2 - 7.03000703000822e-06*G0_5_0_3 + 5.55000555000641e-07*G0_5_0_4 - 1.37428708857305e-06*G0_5_0_5 - 3.10536024821791e-06*G0_5_1_0 + 9.24340210054651e-06*G0_5_1_1 - 1.89625189625223e-06*G0_5_1_2 + 5.55000555000647e-07*G0_5_1_3 - 7.03000703000821e-06*G0_5_1_4 - 1.37428708857303e-06*G0_5_1_5 - 1.89625189625223e-06*G0_5_2_0 - 1.89625189625223e-06*G0_5_2_1 + 1.89625189625224e-05*G0_5_2_2 - 1.51700151700177e-05*G0_5_2_5 - 7.03000703000822e-06*G0_5_3_0 + 5.55000555000648e-07*G0_5_3_1 + 4.21800421800493e-05*G0_5_3_3 + 2.81200281200329e-05*G0_5_3_4 + 4.44000444000519e-05*G0_5_3_5 + 5.55000555000641e-07*G0_5_4_0 - 7.03000703000821e-06*G0_5_4_1 + 2.81200281200329e-05*G0_5_4_3 + 4.21800421800493e-05*G0_5_4_4 + 4.44000444000519e-05*G0_5_4_5 - 1.37428708857305e-06*G0_5_5_0 - 1.37428708857303e-06*G0_5_5_1 - 1.51700151700177e-05*G0_5_5_2 + 4.44000444000519e-05*G0_5_5_3 + 4.44000444000519e-05*G0_5_5_4 + 0.000116708688137279*G0_5_5_5;
    A[10] = A[1];
    A[92] = A[1] - 6.96525696525814e-05*G0_0_0_0 + 7.17866789295481e-06*G0_0_0_1 - 2.00857343714521e-06*G0_0_0_2 - 2.04821633393096e-06*G0_0_0_3 - 4.15589701304056e-06*G0_0_0_4 - 2.36535950821704e-06*G0_0_0_5 + 7.17866789295481e-06*G0_0_1_0 + 7.17866789295485e-06*G0_0_1_1 + 4.95701388558615e-06*G0_0_1_2 - 2.42085956371711e-05*G0_0_1_3 - 2.42085956371712e-05*G0_0_1_4 - 1.91475191475224e-05*G0_0_1_5 - 2.00857343714521e-06*G0_0_2_0 + 4.95701388558615e-06*G0_0_2_1 - 1.66979184836356e-05*G0_0_2_2 + 2.33232376089558e-06*G0_0_2_3 - 1.20184048755498e-05*G0_0_2_4 + 7.20179291607984e-06*G0_0_2_5 - 2.04821633393096e-06*G0_0_3_0 - 2.42085956371711e-05*G0_0_3_1 + 2.33232376089557e-06*G0_0_3_2 + 4.48493305636239e-05*G0_0_3_3 + 5.25136239422042e-05*G0_0_3_4 - 1.03071531642978e-05*G0_0_3_5 - 4.15589701304057e-06*G0_0_4_0 - 2.42085956371712e-05*G0_0_4_1 - 1.20184048755498e-05*G0_0_4_2 + 5.25136239422042e-05*G0_0_4_3 + 0.000105370819656552*G0_0_4_4 + 3.40136054421826e-05*G0_0_4_5 - 2.36535950821705e-06*G0_0_5_0 - 1.91475191475224e-05*G0_0_5_1 + 7.20179291607984e-06*G0_0_5_2 - 1.03071531642978e-05*G0_0_5_3 + 3.40136054421826e-05*G0_0_5_4 - 4.18628990057633e-05*G0_0_5_5 + 7.17866789295481e-06*G0_1_0_0 + 7.17866789295485e-06*G0_1_0_1 + 4.95701388558615e-06*G0_1_0_2 - 2.42085956371711e-05*G0_1_0_3 - 2.42085956371712e-05*G0_1_0_4 - 1.91475191475224e-05*G0_1_0_5 + 7.17866789295485e-06*G0_1_1_0 - 6.96525696525818e-05*G0_1_1_1 - 2.00857343714519e-06*G0_1_1_2 - 4.15589701304065e-06*G0_1_1_3 - 2.04821633393097e-06*G0_1_1_4 - 2.36535950821719e-06*G0_1_1_5 + 4.95701388558615e-06*G0_1_2_0 - 2.00857343714519e-06*G0_1_2_1 - 1.66979184836356e-05*G0_1_2_2 - 1.20184048755498e-05*G0_1_2_3 + 2.33232376089559e-06*G0_1_2_4 + 7.20179291607984e-06*G0_1_2_5 - 2.42085956371711e-05*G0_1_3_0 - 4.15589701304065e-06*G0_1_3_1 - 1.20184048755498e-05*G0_1_3_2 + 0.000105370819656552*G0_1_3_3 + 5.25136239422043e-05*G0_1_3_4 + 3.40136054421826e-05*G0_1_3_5 - 2.42085956371712e-05*G0_1_4_0 - 2.04821633393097e-06*G0_1_4_1 + 2.33232376089559e-06*G0_1_4_2 + 5.25136239422043e-05*G0_1_4_3 + 4.48493305636239e-05*G0_1_4_4 - 1.03071531642977e-05*G0_1_4_5 - 1.91475191475224e-05*G0_1_5_0 - 2.3653595082172e-06*G0_1_5_1 + 7.20179291607984e-06*G0_1_5_2 + 3.40136054421826e-05*G0_1_5_3 - 1.03071531642977e-05*G0_1_5_4 - 4.18628990057632e-05*G0_1_5_5 - 2.00857343714521e-06*G0_2_0_0 + 4.95701388558615e-06*G0_2_0_1 - 1.66979184836356e-05*G0_2_0_2 + 2.33232376089558e-06*G0_2_0_3 - 1.20184048755498e-05*G0_2_0_4 + 7.20179291607984e-06*G0_2_0_5 + 4.95701388558615e-06*G0_2_1_0 - 2.00857343714519e-06*G0_2_1_1 - 1.66979184836356e-05*G0_2_1_2 - 1.20184048755498e-05*G0_2_1_3 + 2.33232376089558e-06*G0_2_1_4 + 7.20179291607984e-06*G0_2_1_5 - 1.66979184836356e-05*G0_2_2_0 - 1.66979184836356e-05*G0_2_2_1 + 0.000139458755530207*G0_2_2_2 + 8.11424025709877e-05*G0_2_2_3 + 8.11424025709877e-05*G0_2_2_4 + 3.42316413745043e-05*G0_2_2_5 + 2.33232376089558e-06*G0_2_3_0 - 1.20184048755498e-05*G0_2_3_1 + 8.11424025709877e-05*G0_2_3_2 - 1.24478695907288e-05*G0_2_3_3 - 9.32929504358231e-06*G0_2_3_4 - 7.31279302707997e-05*G0_2_3_5 - 1.20184048755498e-05*G0_2_4_0 + 2.33232376089558e-06*G0_2_4_1 + 8.11424025709877e-05*G0_2_4_2 - 9.32929504358231e-06*G0_2_4_3 - 1.24478695907288e-05*G0_2_4_4 - 7.31279302707998e-05*G0_2_4_5 + 7.20179291607984e-06*G0_2_5_0 + 7.20179291607985e-06*G0_2_5_1 + 3.42316413745043e-05*G0_2_5_2 - 7.31279302707997e-05*G0_2_5_3 - 7.31279302707998e-05*G0_2_5_4 - 0.000160315874601616*G0_2_5_5 - 2.04821633393096e-06*G0_3_0_0 - 2.42085956371711e-05*G0_3_0_1 + 2.33232376089558e-06*G0_3_0_2 + 4.48493305636239e-05*G0_3_0_3 + 5.25136239422042e-05*G0_3_0_4 - 1.03071531642978e-05*G0_3_0_5 - 2.42085956371711e-05*G0_3_1_0 - 4.15589701304065e-06*G0_3_1_1 - 1.20184048755498e-05*G0_3_1_2 + 0.000105370819656552*G0_3_1_3 + 5.25136239422043e-05*G0_3_1_4 + 3.40136054421826e-05*G0_3_1_5 + 2.33232376089558e-06*G0_3_2_0 - 1.20184048755498e-05*G0_3_2_1 + 8.11424025709877e-05*G0_3_2_2 - 1.24478695907288e-05*G0_3_2_3 - 9.32929504358232e-06*G0_3_2_4 - 7.31279302707997e-05*G0_3_2_5 + 4.48493305636239e-05*G0_3_3_0 + 0.000105370819656552*G0_3_3_1 - 1.24478695907288e-05*G0_3_3_2 - 0.000367568938997573*G0_3_3_3 - 0.000194725909011656*G0_3_3_4 + 5.65571994143517e-05*G0_3_3_5 + 5.25136239422042e-05*G0_3_4_0 + 5.25136239422043e-05*G0_3_4_1 - 9.32929504358231e-06*G0_3_4_2 - 0.000194725909011656*G0_3_4_3 - 0.000194725909011656*G0_3_4_4 + 4.1228612657191e-05*G0_3_4_5 - 1.03071531642978e-05*G0_3_5_0 + 3.40136054421826e-05*G0_3_5_1 - 7.31279302707997e-05*G0_3_5_2 + 5.65571994143517e-05*G0_3_5_3 + 4.1228612657191e-05*G0_3_5_4 + 0.000341246055531827*G0_3_5_5 - 4.15589701304058e-06*G0_4_0_0 - 2.42085956371712e-05*G0_4_0_1 - 1.20184048755498e-05*G0_4_0_2 + 5.25136239422043e-05*G0_4_0_3 + 0.000105370819656552*G0_4_0_4 + 3.40136054421826e-05*G0_4_0_5 - 2.42085956371712e-05*G0_4_1_0 - 2.04821633393097e-06*G0_4_1_1 + 2.33232376089559e-06*G0_4_1_2 + 5.25136239422043e-05*G0_4_1_3 + 4.48493305636239e-05*G0_4_1_4 - 1.03071531642977e-05*G0_4_1_5 - 1.20184048755498e-05*G0_4_2_0 + 2.33232376089558e-06*G0_4_2_1 + 8.11424025709877e-05*G0_4_2_2 - 9.32929504358231e-06*G0_4_2_3 - 1.24478695907288e-05*G0_4_2_4 - 7.31279302707998e-05*G0_4_2_5 + 5.25136239422043e-05*G0_4_3_0 + 5.25136239422043e-05*G0_4_3_1 - 9.32929504358231e-06*G0_4_3_2 - 0.000194725909011656*G0_4_3_3 - 0.000194725909011656*G0_4_3_4 + 4.1228612657191e-05*G0_4_3_5 + 0.000105370819656552*G0_4_4_0 + 4.48493305636239e-05*G0_4_4_1 - 1.24478695907288e-05*G0_4_4_2 - 0.000194725909011656*G0_4_4_3 - 0.000367568938997572*G0_4_4_4 + 5.65571994143518e-05*G0_4_4_5 + 3.40136054421826e-05*G0_4_5_0 - 1.03071531642977e-05*G0_4_5_1 - 7.31279302707998e-05*G0_4_5_2 + 4.1228612657191e-05*G0_4_5_3 + 5.65571994143518e-05*G0_4_5_4 + 0.000341246055531827*G0_4_5_5 - 2.36535950821705e-06*G0_5_0_0 - 1.91475191475224e-05*G0_5_0_1 + 7.20179291607984e-06*G0_5_0_2 - 1.03071531642978e-05*G0_5_0_3 + 3.40136054421826e-05*G0_5_0_4 - 4.18628990057633e-05*G0_5_0_5 - 1.91475191475224e-05*G0_5_1_0 - 2.3653595082172e-06*G0_5_1_1 + 7.20179291607984e-06*G0_5_1_2 + 3.40136054421826e-05*G0_5_1_3 - 1.03071531642977e-05*G0_5_1_4 - 4.18628990057632e-05*G0_5_1_5 + 7.20179291607984e-06*G0_5_2_0 + 7.20179291607985e-06*G0_5_2_1 + 3.42316413745043e-05*G0_5_2_2 - 7.31279302707997e-05*G0_5_2_3 - 7.31279302707998e-05*G0_5_2_4 - 0.000160315874601616*G0_5_2_5 - 1.03071531642978e-05*G0_5_3_0 + 3.40136054421826e-05*G0_5_3_1 - 7.31279302707997e-05*G0_5_3_2 + 5.65571994143517e-05*G0_5_3_3 + 4.1228612657191e-05*G0_5_3_4 + 0.000341246055531827*G0_5_3_5 + 3.40136054421826e-05*G0_5_4_0 - 1.03071531642977e-05*G0_5_4_1 - 7.31279302707998e-05*G0_5_4_2 + 4.1228612657191e-05*G0_5_4_3 + 5.65571994143518e-05*G0_5_4_4 + 0.000341246055531827*G0_5_4_5 - 4.18628990057633e-05*G0_5_5_0 - 4.18628990057632e-05*G0_5_5_1 - 0.000160315874601616*G0_5_5_2 + 0.000341246055531827*G0_5_5_3 + 0.000341246055531827*G0_5_5_4 + 0.000990120990121157*G0_5_5_5;
    A[2] = 0.000103368853368871*G0_0_0_0 - 6.19750619750723e-06*G0_0_0_1 - 8.69500869501017e-06*G0_0_0_2 + 2.40500240500281e-06*G0_0_0_3 + 4.37525437525512e-05*G0_0_0_4 + 2.77037777037823e-05*G0_0_0_5 - 6.19750619750723e-06*G0_0_1_0 - 7.84598998884847e-07*G0_0_1_1 + 1.82192146477891e-06*G0_0_1_2 - 2.33232376089558e-06*G0_0_1_3 - 3.27714613428954e-06*G0_0_1_4 - 5.46411260697066e-06*G0_0_1_5 - 8.69500869501017e-06*G0_0_2_0 + 1.82192146477891e-06*G0_0_2_1 - 8.69500869501015e-06*G0_0_2_2 - 2.55035969321727e-06*G0_0_2_3 - 1.22496551068e-05*G0_0_2_4 - 2.55035969321727e-06*G0_0_2_5 + 2.40500240500281e-06*G0_0_3_0 - 2.33232376089558e-06*G0_0_3_1 - 2.55035969321727e-06*G0_0_3_2 + 2.24643081785977e-06*G0_0_3_3 + 1.74428745857347e-06*G0_0_3_4 + 2.90714576428911e-07*G0_0_3_5 + 4.37525437525512e-05*G0_0_4_0 - 3.27714613428954e-06*G0_0_4_1 - 1.22496551068e-05*G0_0_4_2 + 1.74428745857347e-06*G0_0_4_3 + 2.33100233100273e-05*G0_0_4_4 + 1.16550116550136e-05*G0_0_4_5 + 2.77037777037823e-05*G0_0_5_0 - 5.46411260697066e-06*G0_0_5_1 - 2.55035969321727e-06*G0_0_5_2 + 2.90714576428911e-07*G0_0_5_3 + 1.16550116550136e-05*G0_0_5_4 + 1.16550116550136e-05*G0_0_5_5 - 6.19750619750723e-06*G0_1_0_0 - 7.84598998884847e-07*G0_1_0_1 + 1.82192146477891e-06*G0_1_0_2 - 2.33232376089558e-06*G0_1_0_3 - 3.27714613428954e-06*G0_1_0_4 - 5.46411260697067e-06*G0_1_0_5 - 7.84598998884847e-07*G0_1_1_0 + 1.03913943199675e-05*G0_1_1_1 - 7.84598998884849e-07*G0_1_1_2 + 6.27018484161448e-06*G0_1_1_3 + 7.33393590536569e-07*G0_1_1_4 + 6.27018484161447e-06*G0_1_1_5 + 1.82192146477891e-06*G0_1_2_0 - 7.84598998884849e-07*G0_1_2_1 - 6.19750619750723e-06*G0_1_2_2 - 5.46411260697067e-06*G0_1_2_3 - 3.27714613428954e-06*G0_1_2_4 - 2.33232376089558e-06*G0_1_2_5 - 2.33232376089558e-06*G0_1_3_0 + 6.27018484161448e-06*G0_1_3_1 - 5.46411260697067e-06*G0_1_3_2 + 1.24478695907288e-05*G0_1_3_3 + 3.19786034071803e-06*G0_1_3_4 + 9.32929504358233e-06*G0_1_3_5 - 3.27714613428954e-06*G0_1_4_0 + 7.33393590536569e-07*G0_1_4_1 - 3.27714613428954e-06*G0_1_4_2 + 3.19786034071803e-06*G0_1_4_3 - 2.37857380714563e-06*G0_1_4_4 + 3.19786034071802e-06*G0_1_4_5 - 5.46411260697066e-06*G0_1_5_0 + 6.27018484161447e-06*G0_1_5_1 - 2.33232376089558e-06*G0_1_5_2 + 9.32929504358233e-06*G0_1_5_3 + 3.19786034071802e-06*G0_1_5_4 + 1.24478695907288e-05*G0_1_5_5 - 8.69500869501017e-06*G0_2_0_0 + 1.82192146477891e-06*G0_2_0_1 - 8.69500869501015e-06*G0_2_0_2 - 2.55035969321727e-06*G0_2_0_3 - 1.22496551068e-05*G0_2_0_4 - 2.55035969321727e-06*G0_2_0_5 + 1.82192146477891e-06*G0_2_1_0 - 7.84598998884849e-07*G0_2_1_1 - 6.19750619750723e-06*G0_2_1_2 - 5.46411260697067e-06*G0_2_1_3 - 3.27714613428954e-06*G0_2_1_4 - 2.33232376089558e-06*G0_2_1_5 - 8.69500869501016e-06*G0_2_2_0 - 6.19750619750723e-06*G0_2_2_1 + 0.000103368853368871*G0_2_2_2 + 2.77037777037824e-05*G0_2_2_3 + 4.37525437525511e-05*G0_2_2_4 + 2.40500240500282e-06*G0_2_2_5 - 2.55035969321727e-06*G0_2_3_0 - 5.46411260697067e-06*G0_2_3_1 + 2.77037777037824e-05*G0_2_3_2 + 1.16550116550136e-05*G0_2_3_3 + 1.16550116550136e-05*G0_2_3_4 + 2.90714576428914e-07*G0_2_3_5 - 1.22496551068e-05*G0_2_4_0 - 3.27714613428954e-06*G0_2_4_1 + 4.37525437525511e-05*G0_2_4_2 + 1.16550116550136e-05*G0_2_4_3 + 2.33100233100272e-05*G0_2_4_4 + 1.74428745857347e-06*G0_2_4_5 - 2.55035969321727e-06*G0_2_5_0 - 2.33232376089558e-06*G0_2_5_1 + 2.40500240500282e-06*G0_2_5_2 + 2.90714576428913e-07*G0_2_5_3 + 1.74428745857347e-06*G0_2_5_4 + 2.24643081785977e-06*G0_2_5_5 + 2.40500240500281e-06*G0_3_0_0 - 2.33232376089558e-06*G0_3_0_1 - 2.55035969321727e-06*G0_3_0_2 + 2.24643081785977e-06*G0_3_0_3 + 1.74428745857347e-06*G0_3_0_4 + 2.90714576428912e-07*G0_3_0_5 - 2.33232376089558e-06*G0_3_1_0 + 6.27018484161448e-06*G0_3_1_1 - 5.46411260697067e-06*G0_3_1_2 + 1.24478695907288e-05*G0_3_1_3 + 3.19786034071803e-06*G0_3_1_4 + 9.32929504358233e-06*G0_3_1_5 - 2.55035969321727e-06*G0_3_2_0 - 5.46411260697067e-06*G0_3_2_1 + 2.77037777037824e-05*G0_3_2_2 + 1.16550116550136e-05*G0_3_2_3 + 1.16550116550136e-05*G0_3_2_4 + 2.90714576428914e-07*G0_3_2_5 + 2.24643081785977e-06*G0_3_3_0 + 1.24478695907288e-05*G0_3_3_1 + 1.16550116550136e-05*G0_3_3_2 - 3.20314606028946e-05*G0_3_3_3 - 1.08885823171556e-05*G0_3_3_4 - 5.07429078857737e-06*G0_3_3_5 + 1.74428745857347e-06*G0_3_4_0 + 3.19786034071803e-06*G0_3_4_1 + 1.16550116550136e-05*G0_3_4_2 - 1.08885823171556e-05*G0_3_4_3 + 1.26857269714433e-06*G0_3_4_4 - 6.97714983429387e-06*G0_3_4_5 + 2.90714576428912e-07*G0_3_5_0 + 9.32929504358233e-06*G0_3_5_1 + 2.90714576428913e-07*G0_3_5_2 - 5.07429078857737e-06*G0_3_5_3 - 6.97714983429387e-06*G0_3_5_4 - 5.07429078857736e-06*G0_3_5_5 + 4.37525437525512e-05*G0_4_0_0 - 3.27714613428954e-06*G0_4_0_1 - 1.22496551068e-05*G0_4_0_2 + 1.74428745857347e-06*G0_4_0_3 + 2.33100233100273e-05*G0_4_0_4 + 1.16550116550136e-05*G0_4_0_5 - 3.27714613428954e-06*G0_4_1_0 + 7.33393590536569e-07*G0_4_1_1 - 3.27714613428954e-06*G0_4_1_2 + 3.19786034071803e-06*G0_4_1_3 - 2.37857380714563e-06*G0_4_1_4 + 3.19786034071802e-06*G0_4_1_5 - 1.22496551068e-05*G0_4_2_0 - 3.27714613428954e-06*G0_4_2_1 + 4.37525437525511e-05*G0_4_2_2 + 1.16550116550136e-05*G0_4_2_3 + 2.33100233100272e-05*G0_4_2_4 + 1.74428745857347e-06*G0_4_2_5 + 1.74428745857347e-06*G0_4_3_0 + 3.19786034071803e-06*G0_4_3_1 + 1.16550116550136e-05*G0_4_3_2 - 1.08885823171556e-05*G0_4_3_3 + 1.26857269714433e-06*G0_4_3_4 - 6.97714983429387e-06*G0_4_3_5 + 2.33100233100273e-05*G0_4_4_0 - 2.37857380714563e-06*G0_4_4_1 + 2.33100233100272e-05*G0_4_4_2 + 1.26857269714433e-06*G0_4_4_3 + 8.30915116629543e-05*G0_4_4_4 + 1.26857269714433e-06*G0_4_4_5 + 1.16550116550136e-05*G0_4_5_0 + 3.19786034071802e-06*G0_4_5_1 + 1.74428745857347e-06*G0_4_5_2 - 6.97714983429387e-06*G0_4_5_3 + 1.26857269714433e-06*G0_4_5_4 - 1.08885823171556e-05*G0_4_5_5 + 2.77037777037823e-05*G0_5_0_0 - 5.46411260697066e-06*G0_5_0_1 - 2.55035969321727e-06*G0_5_0_2 + 2.90714576428911e-07*G0_5_0_3 + 1.16550116550136e-05*G0_5_0_4 + 1.16550116550136e-05*G0_5_0_5 - 5.46411260697066e-06*G0_5_1_0 + 6.27018484161447e-06*G0_5_1_1 - 2.33232376089558e-06*G0_5_1_2 + 9.32929504358233e-06*G0_5_1_3 + 3.19786034071802e-06*G0_5_1_4 + 1.24478695907288e-05*G0_5_1_5 - 2.55035969321727e-06*G0_5_2_0 - 2.33232376089558e-06*G0_5_2_1 + 2.40500240500282e-06*G0_5_2_2 + 2.90714576428914e-07*G0_5_2_3 + 1.74428745857347e-06*G0_5_2_4 + 2.24643081785977e-06*G0_5_2_5 + 2.90714576428912e-07*G0_5_3_0 + 9.32929504358233e-06*G0_5_3_1 + 2.90714576428914e-07*G0_5_3_2 - 5.07429078857737e-06*G0_5_3_3 - 6.97714983429387e-06*G0_5_3_4 - 5.07429078857736e-06*G0_5_3_5 + 1.16550116550136e-05*G0_5_4_0 + 3.19786034071802e-06*G0_5_4_1 + 1.74428745857347e-06*G0_5_4_2 - 6.97714983429387e-06*G0_5_4_3 + 1.26857269714433e-06*G0_5_4_4 - 1.08885823171556e-05*G0_5_4_5 + 1.16550116550136e-05*G0_5_5_0 + 1.24478695907288e-05*G0_5_5_1 + 2.24643081785977e-06*G0_5_5_2 - 5.07429078857736e-06*G0_5_5_3 - 1.08885823171556e-05*G0_5_5_4 - 3.20314606028946e-05*G0_5_5_5;
    A[19] = A[2] - 6.96525696525814e-05*G0_0_0_0 - 2.00857343714521e-06*G0_0_0_1 + 7.17866789295483e-06*G0_0_0_2 - 2.04821633393097e-06*G0_0_0_3 - 2.36535950821713e-06*G0_0_0_4 - 4.15589701304058e-06*G0_0_0_5 - 2.00857343714521e-06*G0_0_1_0 - 1.66979184836356e-05*G0_0_1_1 + 4.95701388558615e-06*G0_0_1_2 + 2.33232376089557e-06*G0_0_1_3 + 7.20179291607984e-06*G0_0_1_4 - 1.20184048755498e-05*G0_0_1_5 + 7.17866789295483e-06*G0_0_2_0 + 4.95701388558615e-06*G0_0_2_1 + 7.17866789295482e-06*G0_0_2_2 - 2.42085956371711e-05*G0_0_2_3 - 1.91475191475223e-05*G0_0_2_4 - 2.42085956371712e-05*G0_0_2_5 - 2.04821633393097e-06*G0_0_3_0 + 2.33232376089558e-06*G0_0_3_1 - 2.42085956371711e-05*G0_0_3_2 + 4.48493305636238e-05*G0_0_3_3 - 1.03071531642977e-05*G0_0_3_4 + 5.25136239422043e-05*G0_0_3_5 - 2.36535950821712e-06*G0_0_4_0 + 7.20179291607984e-06*G0_0_4_1 - 1.91475191475223e-05*G0_0_4_2 - 1.03071531642977e-05*G0_0_4_3 - 4.18628990057632e-05*G0_0_4_4 + 3.40136054421826e-05*G0_0_4_5 - 4.15589701304058e-06*G0_0_5_0 - 1.20184048755498e-05*G0_0_5_1 - 2.42085956371712e-05*G0_0_5_2 + 5.25136239422043e-05*G0_0_5_3 + 3.40136054421827e-05*G0_0_5_4 + 0.000105370819656552*G0_0_5_5 - 2.00857343714521e-06*G0_1_0_0 - 1.66979184836356e-05*G0_1_0_1 + 4.95701388558615e-06*G0_1_0_2 + 2.33232376089557e-06*G0_1_0_3 + 7.20179291607984e-06*G0_1_0_4 - 1.20184048755498e-05*G0_1_0_5 - 1.66979184836356e-05*G0_1_1_0 + 0.000139458755530208*G0_1_1_1 - 1.66979184836356e-05*G0_1_1_2 + 8.11424025709878e-05*G0_1_1_3 + 3.42316413745043e-05*G0_1_1_4 + 8.11424025709878e-05*G0_1_1_5 + 4.95701388558615e-06*G0_1_2_0 - 1.66979184836356e-05*G0_1_2_1 - 2.0085734371452e-06*G0_1_2_2 - 1.20184048755498e-05*G0_1_2_3 + 7.20179291607985e-06*G0_1_2_4 + 2.33232376089558e-06*G0_1_2_5 + 2.33232376089557e-06*G0_1_3_0 + 8.11424025709878e-05*G0_1_3_1 - 1.20184048755498e-05*G0_1_3_2 - 1.24478695907287e-05*G0_1_3_3 - 7.31279302707997e-05*G0_1_3_4 - 9.32929504358229e-06*G0_1_3_5 + 7.20179291607984e-06*G0_1_4_0 + 3.42316413745043e-05*G0_1_4_1 + 7.20179291607985e-06*G0_1_4_2 - 7.31279302707997e-05*G0_1_4_3 - 0.000160315874601616*G0_1_4_4 - 7.31279302707997e-05*G0_1_4_5 - 1.20184048755498e-05*G0_1_5_0 + 8.11424025709878e-05*G0_1_5_1 + 2.33232376089558e-06*G0_1_5_2 - 9.3292950435823e-06*G0_1_5_3 - 7.31279302707997e-05*G0_1_5_4 - 1.24478695907288e-05*G0_1_5_5 + 7.17866789295483e-06*G0_2_0_0 + 4.95701388558615e-06*G0_2_0_1 + 7.17866789295482e-06*G0_2_0_2 - 2.42085956371711e-05*G0_2_0_3 - 1.91475191475223e-05*G0_2_0_4 - 2.42085956371712e-05*G0_2_0_5 + 4.95701388558615e-06*G0_2_1_0 - 1.66979184836356e-05*G0_2_1_1 - 2.0085734371452e-06*G0_2_1_2 - 1.20184048755498e-05*G0_2_1_3 + 7.20179291607985e-06*G0_2_1_4 + 2.33232376089558e-06*G0_2_1_5 + 7.17866789295482e-06*G0_2_2_0 - 2.0085734371452e-06*G0_2_2_1 - 6.96525696525813e-05*G0_2_2_2 - 4.15589701304058e-06*G0_2_2_3 - 2.36535950821709e-06*G0_2_2_4 - 2.04821633393099e-06*G0_2_2_5 - 2.42085956371711e-05*G0_2_3_0 - 1.20184048755498e-05*G0_2_3_1 - 4.15589701304058e-06*G0_2_3_2 + 0.000105370819656552*G0_2_3_3 + 3.40136054421826e-05*G0_2_3_4 + 5.25136239422042e-05*G0_2_3_5 - 1.91475191475223e-05*G0_2_4_0 + 7.20179291607985e-06*G0_2_4_1 - 2.3653595082171e-06*G0_2_4_2 + 3.40136054421826e-05*G0_2_4_3 - 4.18628990057633e-05*G0_2_4_4 - 1.03071531642977e-05*G0_2_4_5 - 2.42085956371712e-05*G0_2_5_0 + 2.33232376089557e-06*G0_2_5_1 - 2.04821633393099e-06*G0_2_5_2 + 5.25136239422043e-05*G0_2_5_3 - 1.03071531642977e-05*G0_2_5_4 + 4.4849330563624e-05*G0_2_5_5 - 2.04821633393097e-06*G0_3_0_0 + 2.33232376089558e-06*G0_3_0_1 - 2.42085956371711e-05*G0_3_0_2 + 4.48493305636238e-05*G0_3_0_3 - 1.03071531642977e-05*G0_3_0_4 + 5.25136239422043e-05*G0_3_0_5 + 2.33232376089557e-06*G0_3_1_0 + 8.11424025709878e-05*G0_3_1_1 - 1.20184048755498e-05*G0_3_1_2 - 1.24478695907287e-05*G0_3_1_3 - 7.31279302707997e-05*G0_3_1_4 - 9.32929504358228e-06*G0_3_1_5 - 2.42085956371711e-05*G0_3_2_0 - 1.20184048755498e-05*G0_3_2_1 - 4.15589701304058e-06*G0_3_2_2 + 0.000105370819656552*G0_3_2_3 + 3.40136054421826e-05*G0_3_2_4 + 5.25136239422043e-05*G0_3_2_5 + 4.48493305636238e-05*G0_3_3_0 - 1.24478695907287e-05*G0_3_3_1 + 0.000105370819656552*G0_3_3_2 - 0.000367568938997572*G0_3_3_3 + 5.65571994143518e-05*G0_3_3_4 - 0.000194725909011656*G0_3_3_5 - 1.03071531642977e-05*G0_3_4_0 - 7.31279302707997e-05*G0_3_4_1 + 3.40136054421826e-05*G0_3_4_2 + 5.65571994143517e-05*G0_3_4_3 + 0.000341246055531827*G0_3_4_4 + 4.12286126571909e-05*G0_3_4_5 + 5.25136239422043e-05*G0_3_5_0 - 9.3292950435823e-06*G0_3_5_1 + 5.25136239422043e-05*G0_3_5_2 - 0.000194725909011656*G0_3_5_3 + 4.12286126571909e-05*G0_3_5_4 - 0.000194725909011657*G0_3_5_5 - 2.36535950821712e-06*G0_4_0_0 + 7.20179291607984e-06*G0_4_0_1 - 1.91475191475223e-05*G0_4_0_2 - 1.03071531642977e-05*G0_4_0_3 - 4.18628990057632e-05*G0_4_0_4 + 3.40136054421826e-05*G0_4_0_5 + 7.20179291607984e-06*G0_4_1_0 + 3.42316413745043e-05*G0_4_1_1 + 7.20179291607985e-06*G0_4_1_2 - 7.31279302707997e-05*G0_4_1_3 - 0.000160315874601616*G0_4_1_4 - 7.31279302707997e-05*G0_4_1_5 - 1.91475191475223e-05*G0_4_2_0 + 7.20179291607985e-06*G0_4_2_1 - 2.36535950821708e-06*G0_4_2_2 + 3.40136054421826e-05*G0_4_2_3 - 4.18628990057633e-05*G0_4_2_4 - 1.03071531642977e-05*G0_4_2_5 - 1.03071531642977e-05*G0_4_3_0 - 7.31279302707997e-05*G0_4_3_1 + 3.40136054421826e-05*G0_4_3_2 + 5.65571994143518e-05*G0_4_3_3 + 0.000341246055531827*G0_4_3_4 + 4.12286126571909e-05*G0_4_3_5 - 4.18628990057632e-05*G0_4_4_0 - 0.000160315874601616*G0_4_4_1 - 4.18628990057633e-05*G0_4_4_2 + 0.000341246055531827*G0_4_4_3 + 0.000990120990121157*G0_4_4_4 + 0.000341246055531827*G0_4_4_5 + 3.40136054421826e-05*G0_4_5_0 - 7.31279302707997e-05*G0_4_5_1 - 1.03071531642977e-05*G0_4_5_2 + 4.12286126571909e-05*G0_4_5_3 + 0.000341246055531827*G0_4_5_4 + 5.65571994143515e-05*G0_4_5_5 - 4.15589701304058e-06*G0_5_0_0 - 1.20184048755498e-05*G0_5_0_1 - 2.42085956371712e-05*G0_5_0_2 + 5.25136239422043e-05*G0_5_0_3 + 3.40136054421826e-05*G0_5_0_4 + 0.000105370819656552*G0_5_0_5 - 1.20184048755498e-05*G0_5_1_0 + 8.11424025709878e-05*G0_5_1_1 + 2.33232376089558e-06*G0_5_1_2 - 9.32929504358231e-06*G0_5_1_3 - 7.31279302707997e-05*G0_5_1_4 - 1.24478695907288e-05*G0_5_1_5 - 2.42085956371712e-05*G0_5_2_0 + 2.33232376089557e-06*G0_5_2_1 - 2.04821633393099e-06*G0_5_2_2 + 5.25136239422043e-05*G0_5_2_3 - 1.03071531642977e-05*G0_5_2_4 + 4.4849330563624e-05*G0_5_2_5 + 5.25136239422043e-05*G0_5_3_0 - 9.3292950435823e-06*G0_5_3_1 + 5.25136239422043e-05*G0_5_3_2 - 0.000194725909011656*G0_5_3_3 + 4.12286126571909e-05*G0_5_3_4 - 0.000194725909011657*G0_5_3_5 + 3.40136054421826e-05*G0_5_4_0 - 7.31279302707997e-05*G0_5_4_1 - 1.03071531642977e-05*G0_5_4_2 + 4.12286126571909e-05*G0_5_4_3 + 0.000341246055531827*G0_5_4_4 + 5.65571994143515e-05*G0_5_4_5 + 0.000105370819656552*G0_5_5_0 - 1.24478695907288e-05*G0_5_5_1 + 4.4849330563624e-05*G0_5_5_2 - 0.000194725909011657*G0_5_5_3 + 5.65571994143515e-05*G0_5_5_4 - 0.000367568938997574*G0_5_5_5;
    A[42] = A[7] - 0.00100841123162569*G0_0_0_0 + 0.000107154750011911*G0_0_0_1 + 6.55594405594515e-05*G0_0_0_2 - 2.3012701584134e-05*G0_0_0_3 - 0.000235895057323668*G0_0_0_4 - 0.000470600827743764*G0_0_0_5 + 0.000107154750011911*G0_0_1_0 - 1.95786356500675e-05*G0_0_1_1 + 3.2110746396466e-06*G0_0_1_3 + 2.63427049141379e-05*G0_0_1_4 + 6.82056039199011e-05*G0_0_1_5 + 6.55594405594515e-05*G0_0_2_0 - 6.55594405594516e-05*G0_0_2_2 - 2.62237762237806e-05*G0_0_2_3 + 2.62237762237806e-05*G0_0_2_5 - 2.3012701584134e-05*G0_0_3_0 + 3.2110746396466e-06*G0_0_3_1 - 2.62237762237806e-05*G0_0_3_2 + 4.99500499500585e-06*G0_0_3_3 - 6.66000666000777e-06*G0_0_3_4 - 6.42214927929321e-06*G0_0_3_5 - 0.000235895057323668*G0_0_4_0 + 2.63427049141379e-05*G0_0_4_1 - 6.66000666000777e-06*G0_0_4_3 - 0.00011155511155513*G0_0_4_4 - 0.000105132962275837*G0_0_4_5 - 0.000470600827743764*G0_0_5_0 + 6.82056039199011e-05*G0_0_5_1 + 2.62237762237806e-05*G0_0_5_2 - 6.42214927929321e-06*G0_0_5_3 - 0.000105132962275837*G0_0_5_4 - 0.000323961752533236*G0_0_5_5 + 0.000107154750011911*G0_1_0_0 - 1.95786356500675e-05*G0_1_0_1 + 3.2110746396466e-06*G0_1_0_3 + 2.63427049141379e-05*G0_1_0_4 + 6.82056039199011e-05*G0_1_0_5 - 1.95786356500675e-05*G0_1_1_0 + 1.95786356500675e-05*G0_1_1_2 - 6.89786404072237e-06*G0_1_1_3 + 6.89786404072241e-06*G0_1_1_5 + 1.95786356500675e-05*G0_1_2_1 - 0.000107154750011911*G0_1_2_2 - 6.82056039199011e-05*G0_1_2_3 - 2.63427049141379e-05*G0_1_2_4 - 3.21107463964662e-06*G0_1_2_5 + 3.2110746396466e-06*G0_1_3_0 - 6.89786404072237e-06*G0_1_3_1 - 6.82056039199011e-05*G0_1_3_2 - 4.61443318586254e-05*G0_1_3_3 - 6.4221492792932e-06*G0_1_3_4 + 2.63427049141379e-05*G0_1_4_0 - 2.63427049141379e-05*G0_1_4_2 - 6.4221492792932e-06*G0_1_4_3 + 6.42214927929323e-06*G0_1_4_5 + 6.82056039199011e-05*G0_1_5_0 + 6.89786404072241e-06*G0_1_5_1 - 3.21107463964662e-06*G0_1_5_2 + 6.42214927929322e-06*G0_1_5_4 + 4.61443318586254e-05*G0_1_5_5 + 6.55594405594515e-05*G0_2_0_0 - 6.55594405594516e-05*G0_2_0_2 - 2.62237762237806e-05*G0_2_0_3 + 2.62237762237806e-05*G0_2_0_5 + 1.95786356500675e-05*G0_2_1_1 - 0.000107154750011911*G0_2_1_2 - 6.82056039199011e-05*G0_2_1_3 - 2.63427049141379e-05*G0_2_1_4 - 3.21107463964662e-06*G0_2_1_5 - 6.55594405594516e-05*G0_2_2_0 - 0.000107154750011911*G0_2_2_1 + 0.00100841123162569*G0_2_2_2 + 0.000470600827743764*G0_2_2_3 + 0.000235895057323668*G0_2_2_4 + 2.30127015841342e-05*G0_2_2_5 - 2.62237762237806e-05*G0_2_3_0 - 6.82056039199011e-05*G0_2_3_1 + 0.000470600827743764*G0_2_3_2 + 0.000323961752533236*G0_2_3_3 + 0.000105132962275837*G0_2_3_4 + 6.42214927929329e-06*G0_2_3_5 - 2.63427049141379e-05*G0_2_4_1 + 0.000235895057323668*G0_2_4_2 + 0.000105132962275837*G0_2_4_3 + 0.00011155511155513*G0_2_4_4 + 6.66000666000782e-06*G0_2_4_5 + 2.62237762237806e-05*G0_2_5_0 - 3.21107463964662e-06*G0_2_5_1 + 2.30127015841342e-05*G0_2_5_2 + 6.4221492792933e-06*G0_2_5_3 + 6.66000666000782e-06*G0_2_5_4 - 4.99500499500581e-06*G0_2_5_5 - 2.30127015841339e-05*G0_3_0_0 + 3.2110746396466e-06*G0_3_0_1 - 2.62237762237806e-05*G0_3_0_2 + 4.99500499500584e-06*G0_3_0_3 - 6.66000666000777e-06*G0_3_0_4 - 6.4221492792932e-06*G0_3_0_5 + 3.2110746396466e-06*G0_3_1_0 - 6.89786404072236e-06*G0_3_1_1 - 6.82056039199011e-05*G0_3_1_2 - 4.61443318586254e-05*G0_3_1_3 - 6.4221492792932e-06*G0_3_1_4 - 2.62237762237806e-05*G0_3_2_0 - 6.82056039199011e-05*G0_3_2_1 + 0.000470600827743764*G0_3_2_2 + 0.000323961752533236*G0_3_2_3 + 0.000105132962275837*G0_3_2_4 + 6.42214927929329e-06*G0_3_2_5 + 4.99500499500584e-06*G0_3_3_0 - 4.61443318586254e-05*G0_3_3_1 + 0.000323961752533236*G0_3_3_2 - 0.000111317254174416*G0_3_3_3 + 2.85428856857473e-06*G0_3_3_4 - 2.28343085485981e-05*G0_3_3_5 - 6.66000666000776e-06*G0_3_4_0 - 6.4221492792932e-06*G0_3_4_1 + 0.000105132962275837*G0_3_4_2 + 2.85428856857473e-06*G0_3_4_3 + 1.33200133200155e-05*G0_3_4_4 - 6.42214927929319e-06*G0_3_5_0 + 6.42214927929329e-06*G0_3_5_2 - 2.28343085485981e-05*G0_3_5_3 + 2.28343085485981e-05*G0_3_5_5 - 0.000235895057323668*G0_4_0_0 + 2.63427049141379e-05*G0_4_0_1 - 6.66000666000777e-06*G0_4_0_3 - 0.00011155511155513*G0_4_0_4 - 0.000105132962275837*G0_4_0_5 + 2.63427049141379e-05*G0_4_1_0 - 2.63427049141379e-05*G0_4_1_2 - 6.4221492792932e-06*G0_4_1_3 + 6.42214927929323e-06*G0_4_1_5 - 2.63427049141379e-05*G0_4_2_1 + 0.000235895057323668*G0_4_2_2 + 0.000105132962275837*G0_4_2_3 + 0.00011155511155513*G0_4_2_4 + 6.66000666000782e-06*G0_4_2_5 - 6.66000666000777e-06*G0_4_3_0 - 6.4221492792932e-06*G0_4_3_1 + 0.000105132962275837*G0_4_3_2 + 2.85428856857474e-06*G0_4_3_3 + 1.33200133200156e-05*G0_4_3_4 - 0.00011155511155513*G0_4_4_0 + 0.00011155511155513*G0_4_4_2 + 1.33200133200156e-05*G0_4_4_3 - 1.33200133200156e-05*G0_4_4_5 - 0.000105132962275837*G0_4_5_0 + 6.42214927929323e-06*G0_4_5_1 + 6.66000666000782e-06*G0_4_5_2 - 1.33200133200155e-05*G0_4_5_4 - 2.85428856857492e-06*G0_4_5_5 - 0.000470600827743764*G0_5_0_0 + 6.82056039199011e-05*G0_5_0_1 + 2.62237762237806e-05*G0_5_0_2 - 6.42214927929319e-06*G0_5_0_3 - 0.000105132962275837*G0_5_0_4 - 0.000323961752533236*G0_5_0_5 + 6.82056039199011e-05*G0_5_1_0 + 6.89786404072243e-06*G0_5_1_1 - 3.21107463964663e-06*G0_5_1_2 + 6.42214927929322e-06*G0_5_1_4 + 4.61443318586254e-05*G0_5_1_5 + 2.62237762237806e-05*G0_5_2_0 - 3.21107463964662e-06*G0_5_2_1 + 2.30127015841342e-05*G0_5_2_2 + 6.42214927929329e-06*G0_5_2_3 + 6.66000666000782e-06*G0_5_2_4 - 4.99500499500581e-06*G0_5_2_5 - 6.42214927929319e-06*G0_5_3_0 + 6.42214927929329e-06*G0_5_3_2 - 2.28343085485981e-05*G0_5_3_3 + 2.28343085485981e-05*G0_5_3_5 - 0.000105132962275837*G0_5_4_0 + 6.42214927929323e-06*G0_5_4_1 + 6.66000666000782e-06*G0_5_4_2 - 1.33200133200155e-05*G0_5_4_4 - 2.85428856857492e-06*G0_5_4_5 - 0.000323961752533236*G0_5_5_0 + 4.61443318586254e-05*G0_5_5_1 - 4.99500499500581e-06*G0_5_5_2 + 2.28343085485981e-05*G0_5_5_3 - 2.85428856857493e-06*G0_5_5_4 + 0.000111317254174416*G0_5_5_5;
    A[26] = A[42] - 5.80223348080589e-05*G0_0_0_0 + 6.67487274630244e-06*G0_0_0_1 + 1.78987678987709e-05*G0_0_0_2 + 1.48660862946602e-06*G0_0_0_3 - 3.2289139432002e-05*G0_0_0_4 - 1.96232339089515e-05*G0_0_0_5 + 6.67487274630244e-06*G0_0_1_0 - 6.67487274630244e-06*G0_0_1_1 - 4.34089719804079e-06*G0_0_1_3 + 4.34089719804078e-06*G0_0_1_4 + 1.78987678987709e-05*G0_0_2_0 - 4.99500499500584e-05*G0_0_2_2 + 5.82750582750679e-06*G0_0_2_3 - 3.49650349650409e-05*G0_0_2_4 + 7.07625707625826e-06*G0_0_2_5 + 1.48660862946602e-06*G0_0_3_0 - 4.34089719804079e-06*G0_0_3_1 + 5.82750582750679e-06*G0_0_3_2 - 2.83050283050331e-05*G0_0_3_3 - 1.16550116550136e-05*G0_0_3_4 - 1.71257314114486e-05*G0_0_3_5 - 3.2289139432002e-05*G0_0_4_0 + 4.34089719804078e-06*G0_0_4_1 - 3.49650349650409e-05*G0_0_4_2 - 1.16550116550136e-05*G0_0_4_3 - 6.4935064935076e-05*G0_0_4_4 - 2.28343085485981e-05*G0_0_4_5 - 1.96232339089515e-05*G0_0_5_0 + 7.07625707625826e-06*G0_0_5_2 - 1.71257314114486e-05*G0_0_5_3 - 2.28343085485981e-05*G0_0_5_4 - 3.94843251986175e-05*G0_0_5_5 + 6.67487274630244e-06*G0_1_0_0 - 6.67487274630244e-06*G0_1_0_1 - 4.34089719804079e-06*G0_1_0_3 + 4.34089719804078e-06*G0_1_0_4 - 6.67487274630244e-06*G0_1_1_0 + 5.80223348080589e-05*G0_1_1_1 - 1.78987678987709e-05*G0_1_1_2 + 3.22891394320021e-05*G0_1_1_3 - 1.48660862946603e-06*G0_1_1_4 + 1.96232339089515e-05*G0_1_1_5 - 1.78987678987709e-05*G0_1_2_1 + 4.99500499500584e-05*G0_1_2_2 + 3.49650349650409e-05*G0_1_2_3 - 5.82750582750677e-06*G0_1_2_4 - 7.07625707625826e-06*G0_1_2_5 - 4.34089719804079e-06*G0_1_3_0 + 3.22891394320021e-05*G0_1_3_1 + 3.49650349650409e-05*G0_1_3_2 + 6.4935064935076e-05*G0_1_3_3 + 1.16550116550136e-05*G0_1_3_4 + 2.28343085485981e-05*G0_1_3_5 + 4.34089719804078e-06*G0_1_4_0 - 1.48660862946603e-06*G0_1_4_1 - 5.82750582750677e-06*G0_1_4_2 + 1.16550116550136e-05*G0_1_4_3 + 2.83050283050331e-05*G0_1_4_4 + 1.71257314114486e-05*G0_1_4_5 + 1.96232339089515e-05*G0_1_5_1 - 7.07625707625826e-06*G0_1_5_2 + 2.28343085485981e-05*G0_1_5_3 + 1.71257314114486e-05*G0_1_5_4 + 3.94843251986175e-05*G0_1_5_5 + 1.78987678987709e-05*G0_2_0_0 - 4.99500499500584e-05*G0_2_0_2 + 5.82750582750679e-06*G0_2_0_3 - 3.49650349650409e-05*G0_2_0_4 + 7.07625707625826e-06*G0_2_0_5 - 1.78987678987709e-05*G0_2_1_1 + 4.99500499500584e-05*G0_2_1_2 + 3.49650349650409e-05*G0_2_1_3 - 5.82750582750677e-06*G0_2_1_4 - 7.07625707625826e-06*G0_2_1_5 - 4.99500499500584e-05*G0_2_2_0 + 4.99500499500584e-05*G0_2_2_1 - 0.000228937728937768*G0_2_2_3 + 0.000228937728937768*G0_2_2_4 + 5.82750582750679e-06*G0_2_3_0 + 3.49650349650409e-05*G0_2_3_1 - 0.000228937728937768*G0_2_3_2 - 0.000233100233100273*G0_2_3_3 - 1.16550116550137e-05*G0_2_3_5 - 3.49650349650409e-05*G0_2_4_0 - 5.82750582750677e-06*G0_2_4_1 + 0.000228937728937768*G0_2_4_2 + 0.000233100233100272*G0_2_4_4 + 1.16550116550137e-05*G0_2_4_5 + 7.07625707625826e-06*G0_2_5_0 - 7.07625707625826e-06*G0_2_5_1 - 1.16550116550137e-05*G0_2_5_3 + 1.16550116550137e-05*G0_2_5_4 + 1.48660862946602e-06*G0_3_0_0 - 4.34089719804079e-06*G0_3_0_1 + 5.82750582750678e-06*G0_3_0_2 - 2.83050283050331e-05*G0_3_0_3 - 1.16550116550136e-05*G0_3_0_4 - 1.71257314114486e-05*G0_3_0_5 - 4.34089719804079e-06*G0_3_1_0 + 3.22891394320021e-05*G0_3_1_1 + 3.49650349650409e-05*G0_3_1_2 + 6.4935064935076e-05*G0_3_1_3 + 1.16550116550136e-05*G0_3_1_4 + 2.28343085485981e-05*G0_3_1_5 + 5.82750582750679e-06*G0_3_2_0 + 3.49650349650409e-05*G0_3_2_1 - 0.000228937728937768*G0_3_2_2 - 0.000233100233100273*G0_3_2_3 - 1.16550116550137e-05*G0_3_2_5 - 2.83050283050331e-05*G0_3_3_0 + 6.4935064935076e-05*G0_3_3_1 - 0.000233100233100273*G0_3_3_2 + 0.00029970029970035*G0_3_3_3 + 3.3300033300039e-05*G0_3_3_4 + 7.99200799200934e-05*G0_3_3_5 - 1.16550116550136e-05*G0_3_4_0 + 1.16550116550136e-05*G0_3_4_1 + 3.3300033300039e-05*G0_3_4_3 - 3.33000333000389e-05*G0_3_4_4 - 1.71257314114486e-05*G0_3_5_0 + 2.28343085485981e-05*G0_3_5_1 - 1.16550116550137e-05*G0_3_5_2 + 7.99200799200934e-05*G0_3_5_3 + 3.42514628228972e-05*G0_3_5_5 - 3.2289139432002e-05*G0_4_0_0 + 4.34089719804078e-06*G0_4_0_1 - 3.49650349650409e-05*G0_4_0_2 - 1.16550116550136e-05*G0_4_0_3 - 6.4935064935076e-05*G0_4_0_4 - 2.28343085485981e-05*G0_4_0_5 + 4.34089719804078e-06*G0_4_1_0 - 1.48660862946602e-06*G0_4_1_1 - 5.82750582750678e-06*G0_4_1_2 + 1.16550116550136e-05*G0_4_1_3 + 2.83050283050331e-05*G0_4_1_4 + 1.71257314114486e-05*G0_4_1_5 - 3.49650349650409e-05*G0_4_2_0 - 5.82750582750677e-06*G0_4_2_1 + 0.000228937728937768*G0_4_2_2 + 0.000233100233100272*G0_4_2_4 + 1.16550116550137e-05*G0_4_2_5 - 1.16550116550136e-05*G0_4_3_0 + 1.16550116550136e-05*G0_4_3_1 + 3.33000333000389e-05*G0_4_3_3 - 3.33000333000389e-05*G0_4_3_4 - 6.4935064935076e-05*G0_4_4_0 + 2.83050283050331e-05*G0_4_4_1 + 0.000233100233100272*G0_4_4_2 - 3.3300033300039e-05*G0_4_4_3 - 0.00029970029970035*G0_4_4_4 - 7.99200799200933e-05*G0_4_4_5 - 2.28343085485981e-05*G0_4_5_0 + 1.71257314114486e-05*G0_4_5_1 + 1.16550116550137e-05*G0_4_5_2 - 7.99200799200933e-05*G0_4_5_4 - 3.42514628228972e-05*G0_4_5_5 - 1.96232339089515e-05*G0_5_0_0 + 7.07625707625826e-06*G0_5_0_2 - 1.71257314114486e-05*G0_5_0_3 - 2.28343085485981e-05*G0_5_0_4 - 3.94843251986175e-05*G0_5_0_5 + 1.96232339089515e-05*G0_5_1_1 - 7.07625707625826e-06*G0_5_1_2 + 2.28343085485981e-05*G0_5_1_3 + 1.71257314114486e-05*G0_5_1_4 + 3.94843251986175e-05*G0_5_1_5 + 7.07625707625826e-06*G0_5_2_0 - 7.07625707625826e-06*G0_5_2_1 - 1.16550116550137e-05*G0_5_2_3 + 1.16550116550137e-05*G0_5_2_4 - 1.71257314114486e-05*G0_5_3_0 + 2.28343085485981e-05*G0_5_3_1 - 1.16550116550137e-05*G0_5_3_2 + 7.99200799200934e-05*G0_5_3_3 + 3.42514628228972e-05*G0_5_3_5 - 2.28343085485981e-05*G0_5_4_0 + 1.71257314114486e-05*G0_5_4_1 + 1.16550116550137e-05*G0_5_4_2 - 7.99200799200933e-05*G0_5_4_4 - 3.42514628228972e-05*G0_5_4_5 - 3.94843251986175e-05*G0_5_5_0 + 3.94843251986175e-05*G0_5_5_1 + 3.42514628228972e-05*G0_5_5_3 - 3.42514628228972e-05*G0_5_5_4;
    A[62] = A[26];
    A[70] = A[7];
    A[9] = A[90];
    A[34] = A[73] + 4.85675039246555e-05*G0_0_0_0 - 2.14071642643114e-06*G0_0_0_1 - 2.46182389039573e-05*G0_0_0_2 - 4.28143285286216e-06*G0_0_0_3 + 8.56286570572435e-06*G0_0_0_4 + 3.47866419295053e-05*G0_0_0_5 - 2.14071642643114e-06*G0_0_1_0 + 1.31118881118903e-05*G0_0_1_1 - 1.52526045383214e-05*G0_0_1_2 - 2.62237762237806e-05*G0_0_1_3 - 4.06736121021904e-05*G0_0_1_4 - 2.62237762237807e-05*G0_0_1_5 - 2.46182389039573e-05*G0_0_2_0 - 1.52526045383214e-05*G0_0_2_1 + 6.59608248894074e-05*G0_0_2_2 + 8.2952761524204e-05*G0_0_2_3 + 4.92364778079146e-05*G0_0_2_4 - 4.28143285286216e-06*G0_0_3_0 - 2.62237762237806e-05*G0_0_3_1 + 8.2952761524204e-05*G0_0_3_2 - 5.35179106607768e-05*G0_0_3_3 + 8.99100899101052e-05*G0_0_3_4 + 8.56286570572435e-06*G0_0_3_5 + 8.56286570572435e-06*G0_0_4_0 - 4.06736121021904e-05*G0_0_4_1 + 4.92364778079147e-05*G0_0_4_2 + 8.99100899101052e-05*G0_0_4_3 + 0.000201227344084521*G0_0_4_4 + 8.13472242043809e-05*G0_0_4_5 + 3.47866419295053e-05*G0_0_5_0 - 2.62237762237807e-05*G0_0_5_1 + 8.56286570572435e-06*G0_0_5_3 + 8.13472242043809e-05*G0_0_5_4 + 9.63322391893989e-05*G0_0_5_5 - 2.14071642643114e-06*G0_1_0_0 + 1.31118881118903e-05*G0_1_0_1 - 1.52526045383214e-05*G0_1_0_2 - 2.62237762237806e-05*G0_1_0_3 - 4.06736121021904e-05*G0_1_0_4 - 2.62237762237807e-05*G0_1_0_5 + 1.31118881118903e-05*G0_1_1_0 - 0.000224775224775263*G0_1_1_1 + 1.31118881118904e-05*G0_1_1_2 - 0.000262237762237807*G0_1_1_3 - 2.62237762237806e-05*G0_1_1_4 - 1.52526045383214e-05*G0_1_2_0 + 1.31118881118904e-05*G0_1_2_1 + 0.000106500642214946*G0_1_2_2 + 0.000183566433566465*G0_1_2_3 + 7.54602540316953e-05*G0_1_2_4 + 2.62237762237807e-05*G0_1_2_5 - 2.62237762237806e-05*G0_1_3_0 - 0.000262237762237807*G0_1_3_1 + 0.000183566433566465*G0_1_3_2 + 0.000104895104895123*G0_1_3_4 - 4.06736121021904e-05*G0_1_4_0 - 2.62237762237806e-05*G0_1_4_1 + 7.54602540316953e-05*G0_1_4_2 + 0.000104895104895123*G0_1_4_3 + 8.13472242043808e-05*G0_1_4_4 - 2.62237762237807e-05*G0_1_5_0 + 2.62237762237807e-05*G0_1_5_2 - 2.46182389039573e-05*G0_2_0_0 - 1.52526045383214e-05*G0_2_0_1 + 6.59608248894074e-05*G0_2_0_2 + 8.2952761524204e-05*G0_2_0_3 + 4.92364778079146e-05*G0_2_0_4 - 1.52526045383214e-05*G0_2_1_0 + 1.31118881118904e-05*G0_2_1_1 + 0.000106500642214946*G0_2_1_2 + 0.000183566433566465*G0_2_1_3 + 7.54602540316953e-05*G0_2_1_4 + 2.62237762237807e-05*G0_2_1_5 + 6.59608248894074e-05*G0_2_2_0 + 0.000106500642214946*G0_2_2_1 - 0.000651848151848262*G0_2_2_2 - 0.000526616240902044*G0_2_2_3 - 0.000237619523333849*G0_2_2_4 - 3.4786641929505e-05*G0_2_2_5 + 8.2952761524204e-05*G0_2_3_0 + 0.000183566433566465*G0_2_3_1 - 0.000526616240902044*G0_2_3_2 - 0.000787783644926636*G0_2_3_3 - 0.000316826031111799*G0_2_3_4 - 9.63322391893983e-05*G0_2_3_5 + 4.92364778079146e-05*G0_2_4_0 + 7.54602540316953e-05*G0_2_4_1 - 0.000237619523333849*G0_2_4_2 - 0.000316826031111799*G0_2_4_3 - 0.000316826031111799*G0_2_4_4 - 8.13472242043808e-05*G0_2_4_5 + 2.62237762237807e-05*G0_2_5_1 - 3.4786641929505e-05*G0_2_5_2 - 9.63322391893983e-05*G0_2_5_3 - 8.13472242043808e-05*G0_2_5_4 - 8.56286570572438e-06*G0_2_5_5 - 4.28143285286217e-06*G0_3_0_0 - 2.62237762237806e-05*G0_3_0_1 + 8.2952761524204e-05*G0_3_0_2 - 5.35179106607767e-05*G0_3_0_3 + 8.99100899101052e-05*G0_3_0_4 + 8.56286570572435e-06*G0_3_0_5 - 2.62237762237806e-05*G0_3_1_0 - 0.000262237762237807*G0_3_1_1 + 0.000183566433566465*G0_3_1_2 + 0.000104895104895123*G0_3_1_4 + 8.2952761524204e-05*G0_3_2_0 + 0.000183566433566465*G0_3_2_1 - 0.000526616240902044*G0_3_2_2 - 0.000787783644926636*G0_3_2_3 - 0.000316826031111799*G0_3_2_4 - 9.63322391893983e-05*G0_3_2_5 - 5.35179106607768e-05*G0_3_3_0 - 0.000787783644926635*G0_3_3_2 + 0.0023976023976028*G0_3_3_3 - 0.000102754388468692*G0_3_3_4 + 0.00029970029970035*G0_3_3_5 + 8.99100899101051e-05*G0_3_4_0 + 0.000104895104895123*G0_3_4_1 - 0.000316826031111799*G0_3_4_2 - 0.000102754388468692*G0_3_4_3 - 0.000342514628228972*G0_3_4_4 - 1.71257314114486e-05*G0_3_4_5 + 8.56286570572435e-06*G0_3_5_0 - 9.63322391893983e-05*G0_3_5_2 + 0.00029970029970035*G0_3_5_3 - 1.71257314114487e-05*G0_3_5_4 + 8.56286570572435e-06*G0_4_0_0 - 4.06736121021904e-05*G0_4_0_1 + 4.92364778079146e-05*G0_4_0_2 + 8.99100899101051e-05*G0_4_0_3 + 0.000201227344084521*G0_4_0_4 + 8.13472242043809e-05*G0_4_0_5 - 4.06736121021904e-05*G0_4_1_0 - 2.62237762237806e-05*G0_4_1_1 + 7.54602540316953e-05*G0_4_1_2 + 0.000104895104895123*G0_4_1_3 + 8.13472242043808e-05*G0_4_1_4 + 4.92364778079147e-05*G0_4_2_0 + 7.54602540316953e-05*G0_4_2_1 - 0.000237619523333849*G0_4_2_2 - 0.000316826031111799*G0_4_2_3 - 0.000316826031111799*G0_4_2_4 - 8.13472242043808e-05*G0_4_2_5 + 8.99100899101051e-05*G0_4_3_0 + 0.000104895104895123*G0_4_3_1 - 0.000316826031111799*G0_4_3_2 - 0.000102754388468692*G0_4_3_3 - 0.000342514628228972*G0_4_3_4 - 1.71257314114487e-05*G0_4_3_5 + 0.000201227344084521*G0_4_4_0 + 8.13472242043808e-05*G0_4_4_1 - 0.000316826031111799*G0_4_4_2 - 0.000342514628228972*G0_4_4_3 - 0.000402454688169042*G0_4_4_4 + 8.13472242043809e-05*G0_4_5_0 - 8.13472242043808e-05*G0_4_5_2 - 1.71257314114486e-05*G0_4_5_3 + 1.71257314114488e-05*G0_4_5_5 + 3.47866419295053e-05*G0_5_0_0 - 2.62237762237807e-05*G0_5_0_1 + 8.56286570572438e-06*G0_5_0_3 + 8.13472242043809e-05*G0_5_0_4 + 9.63322391893989e-05*G0_5_0_5 - 2.62237762237808e-05*G0_5_1_0 + 2.62237762237807e-05*G0_5_1_2 + 2.62237762237807e-05*G0_5_2_1 - 3.4786641929505e-05*G0_5_2_2 - 9.63322391893983e-05*G0_5_2_3 - 8.13472242043808e-05*G0_5_2_4 - 8.56286570572438e-06*G0_5_2_5 + 8.56286570572435e-06*G0_5_3_0 - 9.63322391893983e-05*G0_5_3_2 + 0.00029970029970035*G0_5_3_3 - 1.71257314114487e-05*G0_5_3_4 + 8.13472242043809e-05*G0_5_4_0 - 8.13472242043808e-05*G0_5_4_2 - 1.71257314114486e-05*G0_5_4_3 + 1.71257314114488e-05*G0_5_4_5 + 9.63322391893988e-05*G0_5_5_0 - 8.56286570572438e-06*G0_5_5_2 + 1.71257314114487e-05*G0_5_5_4 - 0.000299700299700348*G0_5_5_5;
    A[45] = A[34] - 4.8567503924655e-05*G0_0_0_0 + 2.46182389039573e-05*G0_0_0_1 + 2.14071642643108e-06*G0_0_0_2 + 4.28143285286214e-06*G0_0_0_3 - 3.4786641929505e-05*G0_0_0_4 - 8.56286570572431e-06*G0_0_0_5 + 2.46182389039573e-05*G0_0_1_0 - 6.59608248894075e-05*G0_0_1_1 + 1.52526045383214e-05*G0_0_1_2 - 8.29527615242041e-05*G0_0_1_3 - 4.92364778079147e-05*G0_0_1_5 + 2.14071642643108e-06*G0_0_2_0 + 1.52526045383214e-05*G0_0_2_1 - 1.31118881118903e-05*G0_0_2_2 + 2.62237762237807e-05*G0_0_2_3 + 2.62237762237807e-05*G0_0_2_4 + 4.06736121021904e-05*G0_0_2_5 + 4.28143285286214e-06*G0_0_3_0 - 8.29527615242041e-05*G0_0_3_1 + 2.62237762237807e-05*G0_0_3_2 + 5.35179106607769e-05*G0_0_3_3 - 8.5628657057243e-06*G0_0_3_4 - 8.99100899101051e-05*G0_0_3_5 - 3.4786641929505e-05*G0_0_4_0 + 2.62237762237807e-05*G0_0_4_2 - 8.56286570572433e-06*G0_0_4_3 - 9.63322391893983e-05*G0_0_4_4 - 8.13472242043808e-05*G0_0_4_5 - 8.56286570572431e-06*G0_0_5_0 - 4.92364778079147e-05*G0_0_5_1 + 4.06736121021904e-05*G0_0_5_2 - 8.9910089910105e-05*G0_0_5_3 - 8.13472242043808e-05*G0_0_5_4 - 0.000201227344084521*G0_0_5_5 + 2.46182389039573e-05*G0_1_0_0 - 6.59608248894075e-05*G0_1_0_1 + 1.52526045383214e-05*G0_1_0_2 - 8.29527615242041e-05*G0_1_0_3 - 4.92364778079147e-05*G0_1_0_5 - 6.59608248894075e-05*G0_1_1_0 + 0.000651848151848263*G0_1_1_1 - 0.000106500642214946*G0_1_1_2 + 0.000526616240902045*G0_1_1_3 + 3.47866419295049e-05*G0_1_1_4 + 0.000237619523333849*G0_1_1_5 + 1.52526045383214e-05*G0_1_2_0 - 0.000106500642214946*G0_1_2_1 - 1.31118881118903e-05*G0_1_2_2 - 0.000183566433566465*G0_1_2_3 - 2.62237762237806e-05*G0_1_2_4 - 7.54602540316954e-05*G0_1_2_5 - 8.29527615242041e-05*G0_1_3_0 + 0.000526616240902045*G0_1_3_1 - 0.000183566433566465*G0_1_3_2 + 0.000787783644926636*G0_1_3_3 + 9.63322391893983e-05*G0_1_3_4 + 0.000316826031111799*G0_1_3_5 + 3.47866419295049e-05*G0_1_4_1 - 2.62237762237806e-05*G0_1_4_2 + 9.63322391893983e-05*G0_1_4_3 + 8.5628657057244e-06*G0_1_4_4 + 8.13472242043808e-05*G0_1_4_5 - 4.92364778079147e-05*G0_1_5_0 + 0.000237619523333849*G0_1_5_1 - 7.54602540316954e-05*G0_1_5_2 + 0.000316826031111799*G0_1_5_3 + 8.13472242043808e-05*G0_1_5_4 + 0.000316826031111799*G0_1_5_5 + 2.14071642643108e-06*G0_2_0_0 + 1.52526045383214e-05*G0_2_0_1 - 1.31118881118903e-05*G0_2_0_2 + 2.62237762237807e-05*G0_2_0_3 + 2.62237762237807e-05*G0_2_0_4 + 4.06736121021904e-05*G0_2_0_5 + 1.52526045383214e-05*G0_2_1_0 - 0.000106500642214946*G0_2_1_1 - 1.31118881118903e-05*G0_2_1_2 - 0.000183566433566465*G0_2_1_3 - 2.62237762237806e-05*G0_2_1_4 - 7.54602540316954e-05*G0_2_1_5 - 1.31118881118903e-05*G0_2_2_0 - 1.31118881118903e-05*G0_2_2_1 + 0.000224775224775263*G0_2_2_2 + 0.000262237762237807*G0_2_2_3 + 2.62237762237807e-05*G0_2_2_5 + 2.62237762237807e-05*G0_2_3_0 - 0.000183566433566465*G0_2_3_1 + 0.000262237762237807*G0_2_3_2 - 0.000104895104895123*G0_2_3_5 + 2.62237762237807e-05*G0_2_4_0 - 2.62237762237806e-05*G0_2_4_1 + 4.06736121021904e-05*G0_2_5_0 - 7.54602540316954e-05*G0_2_5_1 + 2.62237762237807e-05*G0_2_5_2 - 0.000104895104895123*G0_2_5_3 - 8.13472242043808e-05*G0_2_5_5 + 4.28143285286214e-06*G0_3_0_0 - 8.29527615242041e-05*G0_3_0_1 + 2.62237762237807e-05*G0_3_0_2 + 5.35179106607768e-05*G0_3_0_3 - 8.56286570572433e-06*G0_3_0_4 - 8.99100899101051e-05*G0_3_0_5 - 8.29527615242041e-05*G0_3_1_0 + 0.000526616240902045*G0_3_1_1 - 0.000183566433566465*G0_3_1_2 + 0.000787783644926636*G0_3_1_3 + 9.63322391893983e-05*G0_3_1_4 + 0.000316826031111799*G0_3_1_5 + 2.62237762237807e-05*G0_3_2_0 - 0.000183566433566465*G0_3_2_1 + 0.000262237762237807*G0_3_2_2 - 0.000104895104895123*G0_3_2_5 + 5.35179106607769e-05*G0_3_3_0 + 0.000787783644926636*G0_3_3_1 - 0.0023976023976028*G0_3_3_3 - 0.00029970029970035*G0_3_3_4 + 0.000102754388468692*G0_3_3_5 - 8.5628657057243e-06*G0_3_4_0 + 9.63322391893983e-05*G0_3_4_1 - 0.00029970029970035*G0_3_4_3 + 1.71257314114484e-05*G0_3_4_5 - 8.99100899101051e-05*G0_3_5_0 + 0.000316826031111799*G0_3_5_1 - 0.000104895104895123*G0_3_5_2 + 0.000102754388468691*G0_3_5_3 + 1.71257314114484e-05*G0_3_5_4 + 0.000342514628228972*G0_3_5_5 - 3.4786641929505e-05*G0_4_0_0 + 2.62237762237807e-05*G0_4_0_2 - 8.5628657057243e-06*G0_4_0_3 - 9.63322391893982e-05*G0_4_0_4 - 8.13472242043808e-05*G0_4_0_5 + 3.47866419295049e-05*G0_4_1_1 - 2.62237762237806e-05*G0_4_1_2 + 9.63322391893983e-05*G0_4_1_3 + 8.5628657057244e-06*G0_4_1_4 + 8.13472242043808e-05*G0_4_1_5 + 2.62237762237807e-05*G0_4_2_0 - 2.62237762237806e-05*G0_4_2_1 - 8.56286570572427e-06*G0_4_3_0 + 9.63322391893983e-05*G0_4_3_1 - 0.00029970029970035*G0_4_3_3 + 1.71257314114485e-05*G0_4_3_5 - 9.63322391893983e-05*G0_4_4_0 + 8.56286570572437e-06*G0_4_4_1 + 0.00029970029970035*G0_4_4_4 - 1.71257314114488e-05*G0_4_4_5 - 8.13472242043808e-05*G0_4_5_0 + 8.13472242043808e-05*G0_4_5_1 + 1.71257314114484e-05*G0_4_5_3 - 1.71257314114488e-05*G0_4_5_4 - 8.56286570572432e-06*G0_5_0_0 - 4.92364778079147e-05*G0_5_0_1 + 4.06736121021904e-05*G0_5_0_2 - 8.99100899101051e-05*G0_5_0_3 - 8.13472242043808e-05*G0_5_0_4 - 0.000201227344084521*G0_5_0_5 - 4.92364778079147e-05*G0_5_1_0 + 0.000237619523333849*G0_5_1_1 - 7.54602540316954e-05*G0_5_1_2 + 0.000316826031111799*G0_5_1_3 + 8.13472242043808e-05*G0_5_1_4 + 0.000316826031111799*G0_5_1_5 + 4.06736121021904e-05*G0_5_2_0 - 7.54602540316954e-05*G0_5_2_1 + 2.62237762237807e-05*G0_5_2_2 - 0.000104895104895123*G0_5_2_3 - 8.13472242043808e-05*G0_5_2_5 - 8.99100899101051e-05*G0_5_3_0 + 0.000316826031111799*G0_5_3_1 - 0.000104895104895123*G0_5_3_2 + 0.000102754388468691*G0_5_3_3 + 1.71257314114485e-05*G0_5_3_4 + 0.000342514628228972*G0_5_3_5 - 8.13472242043808e-05*G0_5_4_0 + 8.13472242043808e-05*G0_5_4_1 + 1.71257314114484e-05*G0_5_4_3 - 1.71257314114488e-05*G0_5_4_4 - 0.000201227344084521*G0_5_5_0 + 0.000316826031111799*G0_5_5_1 - 8.13472242043808e-05*G0_5_5_2 + 0.000342514628228972*G0_5_5_3 + 0.000402454688169042*G0_5_5_5;
    A[36] = A[45] + 6.74325674325789e-05*G0_0_0_0 - 1.52526045383214e-05*G0_0_0_1 - 1.64567575281889e-05*G0_0_0_2 + 6.42214927929325e-06*G0_0_0_3 + 3.21107463964662e-05*G0_0_0_4 + 3.53218210361128e-05*G0_0_0_5 - 1.52526045383214e-05*G0_0_1_0 + 1.52526045383214e-05*G0_0_1_1 + 2.56885971171729e-05*G0_0_1_3 - 2.56885971171729e-05*G0_0_1_4 - 1.64567575281889e-05*G0_0_2_0 + 1.68581418581447e-05*G0_0_2_2 - 1.92664478378797e-05*G0_0_2_3 + 8.02768659911649e-06*G0_0_2_4 - 2.56885971171729e-05*G0_0_2_5 + 6.42214927929325e-06*G0_0_3_0 + 2.56885971171729e-05*G0_0_3_1 - 1.92664478378797e-05*G0_0_3_2 - 8.99100899101051e-05*G0_0_3_3 + 3.85328956757593e-05*G0_0_3_4 + 3.85328956757593e-05*G0_0_3_5 + 3.21107463964662e-05*G0_0_4_0 - 2.56885971171729e-05*G0_0_4_1 + 8.02768659911647e-06*G0_0_4_2 + 3.85328956757593e-05*G0_0_4_3 + 0.000282574568288901*G0_0_4_4 + 0.000102754388468692*G0_0_4_5 + 3.53218210361128e-05*G0_0_5_0 - 2.56885971171729e-05*G0_0_5_2 + 3.85328956757593e-05*G0_0_5_3 + 0.000102754388468692*G0_0_5_4 + 0.000141287284144451*G0_0_5_5 - 1.52526045383214e-05*G0_1_0_0 + 1.52526045383214e-05*G0_1_0_1 + 2.56885971171729e-05*G0_1_0_3 - 2.56885971171729e-05*G0_1_0_4 + 1.52526045383214e-05*G0_1_1_0 - 6.7432567432579e-05*G0_1_1_1 + 1.64567575281889e-05*G0_1_1_2 - 3.21107463964662e-05*G0_1_1_3 - 6.42214927929321e-06*G0_1_1_4 - 3.53218210361127e-05*G0_1_1_5 + 1.64567575281889e-05*G0_1_2_1 - 1.68581418581448e-05*G0_1_2_2 - 8.02768659911652e-06*G0_1_2_3 + 1.92664478378796e-05*G0_1_2_4 + 2.56885971171729e-05*G0_1_2_5 + 2.56885971171729e-05*G0_1_3_0 - 3.21107463964662e-05*G0_1_3_1 - 8.02768659911653e-06*G0_1_3_2 - 0.000282574568288902*G0_1_3_3 - 3.85328956757593e-05*G0_1_3_4 - 0.000102754388468692*G0_1_3_5 - 2.56885971171729e-05*G0_1_4_0 - 6.42214927929321e-06*G0_1_4_1 + 1.92664478378796e-05*G0_1_4_2 - 3.85328956757593e-05*G0_1_4_3 + 8.99100899101049e-05*G0_1_4_4 - 3.85328956757594e-05*G0_1_4_5 - 3.53218210361127e-05*G0_1_5_1 + 2.56885971171729e-05*G0_1_5_2 - 0.000102754388468692*G0_1_5_3 - 3.85328956757594e-05*G0_1_5_4 - 0.000141287284144451*G0_1_5_5 - 1.64567575281889e-05*G0_2_0_0 + 1.68581418581447e-05*G0_2_0_2 - 1.92664478378797e-05*G0_2_0_3 + 8.02768659911647e-06*G0_2_0_4 - 2.56885971171729e-05*G0_2_0_5 + 1.64567575281889e-05*G0_2_1_1 - 1.68581418581448e-05*G0_2_1_2 - 8.02768659911653e-06*G0_2_1_3 + 1.92664478378796e-05*G0_2_1_4 + 2.56885971171729e-05*G0_2_1_5 + 1.68581418581447e-05*G0_2_2_0 - 1.68581418581448e-05*G0_2_2_1 + 5.61938061938159e-05*G0_2_2_3 - 5.61938061938156e-05*G0_2_2_4 - 1.92664478378797e-05*G0_2_3_0 - 8.02768659911656e-06*G0_2_3_1 + 5.61938061938158e-05*G0_2_3_2 + 0.000224775224775262*G0_2_3_3 + 3.85328956757593e-05*G0_2_3_5 + 8.02768659911647e-06*G0_2_4_0 + 1.92664478378796e-05*G0_2_4_1 - 5.61938061938156e-05*G0_2_4_2 - 0.000224775224775262*G0_2_4_4 - 3.85328956757593e-05*G0_2_4_5 - 2.56885971171729e-05*G0_2_5_0 + 2.56885971171729e-05*G0_2_5_1 + 3.85328956757593e-05*G0_2_5_3 - 3.85328956757593e-05*G0_2_5_4 + 6.42214927929325e-06*G0_3_0_0 + 2.56885971171729e-05*G0_3_0_1 - 1.92664478378797e-05*G0_3_0_2 - 8.99100899101052e-05*G0_3_0_3 + 3.85328956757593e-05*G0_3_0_4 + 3.85328956757593e-05*G0_3_0_5 + 2.56885971171729e-05*G0_3_1_0 - 3.21107463964662e-05*G0_3_1_1 - 8.02768659911653e-06*G0_3_1_2 - 0.000282574568288902*G0_3_1_3 - 3.85328956757593e-05*G0_3_1_4 - 0.000102754388468692*G0_3_1_5 - 1.92664478378797e-05*G0_3_2_0 - 8.02768659911652e-06*G0_3_2_1 + 5.61938061938158e-05*G0_3_2_2 + 0.000224775224775262*G0_3_2_3 + 3.85328956757593e-05*G0_3_2_5 - 8.99100899101052e-05*G0_3_3_0 - 0.000282574568288902*G0_3_3_1 + 0.000224775224775262*G0_3_3_2 + 0.00154131582703037*G0_3_3_3 + 0.000256885971171729*G0_3_3_4 + 0.000102754388468692*G0_3_3_5 + 3.85328956757593e-05*G0_3_4_0 - 3.85328956757593e-05*G0_3_4_1 + 0.000256885971171729*G0_3_4_3 - 0.000256885971171729*G0_3_4_4 + 3.85328956757593e-05*G0_3_5_0 - 0.000102754388468692*G0_3_5_1 + 3.85328956757593e-05*G0_3_5_2 + 0.000102754388468692*G0_3_5_3 - 7.70657913515187e-05*G0_3_5_5 + 3.21107463964662e-05*G0_4_0_0 - 2.56885971171729e-05*G0_4_0_1 + 8.02768659911647e-06*G0_4_0_2 + 3.85328956757593e-05*G0_4_0_3 + 0.000282574568288901*G0_4_0_4 + 0.000102754388468692*G0_4_0_5 - 2.56885971171729e-05*G0_4_1_0 - 6.42214927929321e-06*G0_4_1_1 + 1.92664478378796e-05*G0_4_1_2 - 3.85328956757593e-05*G0_4_1_3 + 8.99100899101049e-05*G0_4_1_4 - 3.85328956757594e-05*G0_4_1_5 + 8.02768659911649e-06*G0_4_2_0 + 1.92664478378796e-05*G0_4_2_1 - 5.61938061938156e-05*G0_4_2_2 - 0.000224775224775262*G0_4_2_4 - 3.85328956757593e-05*G0_4_2_5 + 3.85328956757593e-05*G0_4_3_0 - 3.85328956757593e-05*G0_4_3_1 + 0.000256885971171729*G0_4_3_3 - 0.000256885971171729*G0_4_3_4 + 0.000282574568288901*G0_4_4_0 + 8.99100899101049e-05*G0_4_4_1 - 0.000224775224775262*G0_4_4_2 - 0.000256885971171729*G0_4_4_3 - 0.00154131582703037*G0_4_4_4 - 0.000102754388468691*G0_4_4_5 + 0.000102754388468692*G0_4_5_0 - 3.85328956757594e-05*G0_4_5_1 - 3.85328956757593e-05*G0_4_5_2 - 0.000102754388468691*G0_4_5_4 + 7.70657913515186e-05*G0_4_5_5 + 3.53218210361128e-05*G0_5_0_0 - 2.56885971171729e-05*G0_5_0_2 + 3.85328956757593e-05*G0_5_0_3 + 0.000102754388468692*G0_5_0_4 + 0.000141287284144451*G0_5_0_5 - 3.53218210361127e-05*G0_5_1_1 + 2.56885971171729e-05*G0_5_1_2 - 0.000102754388468692*G0_5_1_3 - 3.85328956757594e-05*G0_5_1_4 - 0.000141287284144451*G0_5_1_5 - 2.56885971171729e-05*G0_5_2_0 + 2.56885971171729e-05*G0_5_2_1 + 3.85328956757593e-05*G0_5_2_3 - 3.85328956757593e-05*G0_5_2_4 + 3.85328956757593e-05*G0_5_3_0 - 0.000102754388468692*G0_5_3_1 + 3.85328956757593e-05*G0_5_3_2 + 0.000102754388468692*G0_5_3_3 - 7.70657913515187e-05*G0_5_3_5 + 0.000102754388468692*G0_5_4_0 - 3.85328956757594e-05*G0_5_4_1 - 3.85328956757593e-05*G0_5_4_2 - 0.000102754388468691*G0_5_4_4 + 7.70657913515186e-05*G0_5_4_5 + 0.000141287284144451*G0_5_5_0 - 0.000141287284144451*G0_5_5_1 - 7.70657913515187e-05*G0_5_5_3 + 7.70657913515187e-05*G0_5_5_4;
    A[69] = -A[36] - 0.000134865134865157*G0_0_0_0 + 3.07727986299465e-06*G0_0_0_1 + 4.68281718281797e-05*G0_0_0_2 + 3.15755672898583e-05*G0_0_0_3 - 3.53218210361127e-05*G0_0_0_4 - 0.000118274582560317*G0_0_0_5 + 3.07727986299465e-06*G0_0_1_0 - 1.21753246753267e-05*G0_0_1_1 - 4.95040673612187e-06*G0_0_1_2 + 9.79377765092216e-05*G0_0_1_3 + 0.000123626373626394*G0_0_1_4 + 9.6867418296006e-05*G0_0_1_5 + 4.68281718281797e-05*G0_0_2_0 - 4.95040673612187e-06*G0_0_2_1 - 1.87312687312719e-05*G0_0_2_2 - 4.65605822748758e-05*G0_0_2_3 - 2.83644926502116e-05*G0_0_2_4 - 9.09804481233205e-06*G0_0_2_5 + 3.15755672898583e-05*G0_0_3_0 + 9.79377765092216e-05*G0_0_3_1 - 4.65605822748758e-05*G0_0_3_2 - 0.000263308120451022*G0_0_3_3 - 0.000310403881832506*G0_0_3_4 - 4.49550449550525e-05*G0_0_3_5 - 3.53218210361127e-05*G0_0_4_0 + 0.000123626373626394*G0_0_4_1 - 2.83644926502116e-05*G0_0_4_2 - 0.000310403881832505*G0_0_4_3 - 0.000689310689310806*G0_0_4_4 - 0.000229056657628125*G0_0_4_5 - 0.000118274582560317*G0_0_5_0 + 9.6867418296006e-05*G0_0_5_1 - 9.09804481233205e-06*G0_0_5_2 - 4.49550449550525e-05*G0_0_5_3 - 0.000229056657628125*G0_0_5_4 - 3.63921792493279e-05*G0_0_5_5 + 3.07727986299466e-06*G0_1_0_0 - 1.21753246753267e-05*G0_1_0_1 - 4.95040673612188e-06*G0_1_0_2 + 9.79377765092216e-05*G0_1_0_3 + 0.000123626373626394*G0_1_0_4 + 9.6867418296006e-05*G0_1_0_5 - 1.21753246753267e-05*G0_1_1_0 - 6.74325674325788e-05*G0_1_1_1 + 3.03714142999909e-05*G0_1_1_2 - 3.21107463964663e-06*G0_1_1_3 + 3.79977165691515e-05*G0_1_1_4 - 8.29527615242041e-05*G0_1_1_5 - 4.95040673612188e-06*G0_1_2_0 + 3.03714142999909e-05*G0_1_2_1 - 1.87312687312716e-06*G0_1_2_2 - 2.03368060510951e-05*G0_1_2_3 - 6.58270301127554e-05*G0_1_2_4 - 3.47866419295049e-05*G0_1_2_5 + 9.79377765092216e-05*G0_1_3_0 - 3.21107463964663e-06*G0_1_3_1 - 2.03368060510951e-05*G0_1_3_2 - 0.000406736121021904*G0_1_3_3 - 0.000271870986156746*G0_1_3_4 - 0.000126302269159433*G0_1_3_5 + 0.000123626373626394*G0_1_4_0 + 3.79977165691515e-05*G0_1_4_1 - 6.58270301127554e-05*G0_1_4_2 - 0.000271870986156746*G0_1_4_3 - 0.000353218210361127*G0_1_4_4 - 6.4221492792932e-06*G0_1_4_5 + 9.68674182960061e-05*G0_1_5_0 - 8.2952761524204e-05*G0_1_5_1 - 3.47866419295049e-05*G0_1_5_2 - 0.000126302269159433*G0_1_5_3 - 6.42214927929318e-06*G0_1_5_4 + 0.000104895104895123*G0_1_5_5 + 4.68281718281797e-05*G0_2_0_0 - 4.95040673612187e-06*G0_2_0_1 - 1.87312687312718e-05*G0_2_0_2 - 4.65605822748758e-05*G0_2_0_3 - 2.83644926502116e-05*G0_2_0_4 - 9.09804481233205e-06*G0_2_0_5 - 4.95040673612187e-06*G0_2_1_0 + 3.03714142999909e-05*G0_2_1_1 - 1.87312687312716e-06*G0_2_1_2 - 2.03368060510951e-05*G0_2_1_3 - 6.58270301127555e-05*G0_2_1_4 - 3.47866419295049e-05*G0_2_1_5 - 1.87312687312719e-05*G0_2_2_0 - 1.87312687312717e-06*G0_2_2_1 - 5.61938061938153e-05*G0_2_2_2 - 1.87312687312719e-05*G0_2_2_3 + 3.74625374625438e-05*G0_2_2_4 - 6.36863136863245e-05*G0_2_2_5 - 4.65605822748758e-05*G0_2_3_0 - 2.03368060510952e-05*G0_2_3_1 - 1.8731268731272e-05*G0_2_3_2 + 0.000224775224775262*G0_2_3_3 + 0.000224775224775263*G0_2_3_4 + 0.000220493791922401*G0_2_3_5 - 2.83644926502116e-05*G0_2_4_0 - 6.58270301127555e-05*G0_2_4_1 + 3.74625374625438e-05*G0_2_4_2 + 0.000224775224775263*G0_2_4_3 + 0.000449550449550525*G0_2_4_4 + 0.00025902668759816*G0_2_4_5 - 9.09804481233205e-06*G0_2_5_0 - 3.47866419295049e-05*G0_2_5_1 - 6.36863136863245e-05*G0_2_5_2 + 0.000220493791922401*G0_2_5_3 + 0.00025902668759816*G0_2_5_4 + 0.000455972598829819*G0_2_5_5 + 3.15755672898583e-05*G0_3_0_0 + 9.79377765092216e-05*G0_3_0_1 - 4.65605822748758e-05*G0_3_0_2 - 0.000263308120451022*G0_3_0_3 - 0.000310403881832506*G0_3_0_4 - 4.49550449550525e-05*G0_3_0_5 + 9.79377765092216e-05*G0_3_1_0 - 3.21107463964663e-06*G0_3_1_1 - 2.03368060510951e-05*G0_3_1_2 - 0.000406736121021904*G0_3_1_3 - 0.000271870986156746*G0_3_1_4 - 0.000126302269159433*G0_3_1_5 - 4.65605822748758e-05*G0_3_2_0 - 2.03368060510951e-05*G0_3_2_1 - 1.8731268731272e-05*G0_3_2_2 + 0.000224775224775262*G0_3_2_3 + 0.000224775224775263*G0_3_2_4 + 0.000220493791922401*G0_3_2_5 - 0.000263308120451022*G0_3_3_0 - 0.000406736121021904*G0_3_3_1 + 0.000224775224775262*G0_3_3_2 + 0.00162694448408762*G0_3_3_3 + 0.00107035821321554*G0_3_3_4 + 8.56286570572431e-05*G0_3_3_5 - 0.000310403881832506*G0_3_4_0 - 0.000271870986156746*G0_3_4_1 + 0.000224775224775263*G0_3_4_2 + 0.00107035821321554*G0_3_4_3 + 0.00132724418438726*G0_3_4_4 + 0.000102754388468691*G0_3_4_5 - 4.49550449550525e-05*G0_3_5_0 - 0.000126302269159433*G0_3_5_1 + 0.000220493791922401*G0_3_5_2 + 8.56286570572433e-05*G0_3_5_3 + 0.000102754388468691*G0_3_5_4 - 0.000822035107749533*G0_3_5_5 - 3.53218210361127e-05*G0_4_0_0 + 0.000123626373626394*G0_4_0_1 - 2.83644926502116e-05*G0_4_0_2 - 0.000310403881832506*G0_4_0_3 - 0.000689310689310806*G0_4_0_4 - 0.000229056657628125*G0_4_0_5 + 0.000123626373626394*G0_4_1_0 + 3.79977165691515e-05*G0_4_1_1 - 6.58270301127555e-05*G0_4_1_2 - 0.000271870986156746*G0_4_1_3 - 0.000353218210361127*G0_4_1_4 - 6.4221492792932e-06*G0_4_1_5 - 2.83644926502116e-05*G0_4_2_0 - 6.58270301127554e-05*G0_4_2_1 + 3.74625374625438e-05*G0_4_2_2 + 0.000224775224775263*G0_4_2_3 + 0.000449550449550525*G0_4_2_4 + 0.00025902668759816*G0_4_2_5 - 0.000310403881832506*G0_4_3_0 - 0.000271870986156746*G0_4_3_1 + 0.000224775224775263*G0_4_3_2 + 0.00107035821321554*G0_4_3_3 + 0.00132724418438726*G0_4_3_4 + 0.000102754388468691*G0_4_3_5 - 0.000689310689310806*G0_4_4_0 - 0.000353218210361127*G0_4_4_1 + 0.000449550449550525*G0_4_4_2 + 0.00132724418438726*G0_4_4_3 + 0.00316826031111799*G0_4_4_4 + 0.000188383045525934*G0_4_4_5 - 0.000229056657628125*G0_4_5_0 - 6.42214927929316e-06*G0_4_5_1 + 0.00025902668759816*G0_4_5_2 + 0.000102754388468691*G0_4_5_3 + 0.000188383045525934*G0_4_5_4 - 0.000899100899101051*G0_4_5_5 - 0.000118274582560317*G0_5_0_0 + 9.6867418296006e-05*G0_5_0_1 - 9.09804481233206e-06*G0_5_0_2 - 4.49550449550525e-05*G0_5_0_3 - 0.000229056657628125*G0_5_0_4 - 3.63921792493279e-05*G0_5_0_5 + 9.6867418296006e-05*G0_5_1_0 - 8.2952761524204e-05*G0_5_1_1 - 3.47866419295049e-05*G0_5_1_2 - 0.000126302269159433*G0_5_1_3 - 6.42214927929317e-06*G0_5_1_4 + 0.000104895104895123*G0_5_1_5 - 9.09804481233205e-06*G0_5_2_0 - 3.47866419295049e-05*G0_5_2_1 - 6.36863136863245e-05*G0_5_2_2 + 0.000220493791922401*G0_5_2_3 + 0.00025902668759816*G0_5_2_4 + 0.000455972598829819*G0_5_2_5 - 4.49550449550525e-05*G0_5_3_0 - 0.000126302269159433*G0_5_3_1 + 0.000220493791922401*G0_5_3_2 + 8.56286570572431e-05*G0_5_3_3 + 0.000102754388468691*G0_5_3_4 - 0.000822035107749533*G0_5_3_5 - 0.000229056657628125*G0_5_4_0 - 6.42214927929316e-06*G0_5_4_1 + 0.00025902668759816*G0_5_4_2 + 0.000102754388468691*G0_5_4_3 + 0.000188383045525934*G0_5_4_4 - 0.000899100899101052*G0_5_4_5 - 3.63921792493279e-05*G0_5_5_0 + 0.000104895104895123*G0_5_5_1 + 0.000455972598829819*G0_5_5_2 - 0.000822035107749533*G0_5_5_3 - 0.000899100899101052*G0_5_5_4 - 0.00289424860853481*G0_5_5_5;
    A[89] = A[69] + 6.74325674325788e-05*G0_0_0_1 - 6.74325674325788e-05*G0_0_0_2 - 0.000112387612387631*G0_0_0_4 + 0.000112387612387632*G0_0_0_5 + 6.74325674325788e-05*G0_0_1_0 - 6.10104181532855e-05*G0_0_1_1 - 0.00020871985157703*G0_0_1_3 - 0.000173398030540917*G0_0_1_4 - 0.00020871985157703*G0_0_1_5 - 6.74325674325788e-05*G0_0_2_0 + 6.10104181532855e-05*G0_0_2_2 + 0.00020871985157703*G0_0_2_3 + 0.000208719851577029*G0_0_2_4 + 0.000173398030540917*G0_0_2_5 - 0.00020871985157703*G0_0_3_1 + 0.00020871985157703*G0_0_3_2 + 0.000346796061081833*G0_0_3_4 - 0.000346796061081834*G0_0_3_5 - 0.000112387612387631*G0_0_4_0 - 0.000173398030540917*G0_0_4_1 + 0.000208719851577029*G0_0_4_2 + 0.000346796061081833*G0_0_4_3 + 0.00089910089910105*G0_0_4_4 + 0.000112387612387632*G0_0_5_0 - 0.00020871985157703*G0_0_5_1 + 0.000173398030540917*G0_0_5_2 - 0.000346796061081834*G0_0_5_3 - 0.000899100899101052*G0_0_5_5 + 6.74325674325788e-05*G0_1_0_0 - 6.10104181532856e-05*G0_1_0_1 - 0.00020871985157703*G0_1_0_3 - 0.000173398030540917*G0_1_0_4 - 0.00020871985157703*G0_1_0_5 - 6.10104181532856e-05*G0_1_1_0 + 0.000370879120879184*G0_1_1_1 - 9.231839588984e-05*G0_1_1_2 + 0.00016055373198233*G0_1_1_3 - 9.95433138290449e-05*G0_1_1_4 + 0.0003789068074783*G0_1_1_5 - 9.231839588984e-05*G0_1_2_1 + 9.23183958898399e-05*G0_1_2_2 + 7.38547167118719e-05*G0_1_2_4 - 7.3854716711872e-05*G0_1_2_5 - 0.00020871985157703*G0_1_3_0 + 0.00016055373198233*G0_1_3_1 + 0.000911945197659637*G0_1_3_3 + 0.000616526330812149*G0_1_3_4 + 0.000565149136577803*G0_1_3_5 - 0.000173398030540917*G0_1_4_0 - 9.95433138290449e-05*G0_1_4_1 + 7.38547167118719e-05*G0_1_4_2 + 0.000616526330812149*G0_1_4_3 + 0.000989010989011155*G0_1_4_4 + 0.000346796061081834*G0_1_4_5 - 0.00020871985157703*G0_1_5_0 + 0.0003789068074783*G0_1_5_1 - 7.3854716711872e-05*G0_1_5_2 + 0.000565149136577803*G0_1_5_3 + 0.000346796061081834*G0_1_5_4 + 0.000744969316398013*G0_1_5_5 - 6.74325674325788e-05*G0_2_0_0 + 6.10104181532855e-05*G0_2_0_2 + 0.00020871985157703*G0_2_0_3 + 0.000208719851577029*G0_2_0_4 + 0.000173398030540917*G0_2_0_5 - 9.231839588984e-05*G0_2_1_1 + 9.23183958898399e-05*G0_2_1_2 + 7.38547167118719e-05*G0_2_1_4 - 7.3854716711872e-05*G0_2_1_5 + 6.10104181532855e-05*G0_2_2_0 + 9.23183958898399e-05*G0_2_2_1 - 0.000370879120879183*G0_2_2_2 - 0.00016055373198233*G0_2_2_3 - 0.0003789068074783*G0_2_2_4 + 9.95433138290451e-05*G0_2_2_5 + 0.00020871985157703*G0_2_3_0 - 0.00016055373198233*G0_2_3_2 - 0.000911945197659637*G0_2_3_3 - 0.000565149136577803*G0_2_3_4 - 0.000616526330812149*G0_2_3_5 + 0.000208719851577029*G0_2_4_0 + 7.38547167118719e-05*G0_2_4_1 - 0.0003789068074783*G0_2_4_2 - 0.000565149136577803*G0_2_4_3 - 0.000744969316398012*G0_2_4_4 - 0.000346796061081834*G0_2_4_5 + 0.000173398030540917*G0_2_5_0 - 7.3854716711872e-05*G0_2_5_1 + 9.95433138290451e-05*G0_2_5_2 - 0.000616526330812149*G0_2_5_3 - 0.000346796061081834*G0_2_5_4 - 0.000989010989011157*G0_2_5_5 - 0.00020871985157703*G0_3_0_1 + 0.00020871985157703*G0_3_0_2 + 0.000346796061081834*G0_3_0_4 - 0.000346796061081834*G0_3_0_5 - 0.00020871985157703*G0_3_1_0 + 0.00016055373198233*G0_3_1_1 + 0.000911945197659637*G0_3_1_3 + 0.000616526330812149*G0_3_1_4 + 0.000565149136577803*G0_3_1_5 + 0.00020871985157703*G0_3_2_0 - 0.00016055373198233*G0_3_2_2 - 0.000911945197659637*G0_3_2_3 - 0.000565149136577803*G0_3_2_4 - 0.000616526330812149*G0_3_2_5 + 0.000911945197659637*G0_3_3_1 - 0.000911945197659637*G0_3_3_2 - 0.0012330526616243*G0_3_3_4 + 0.0012330526616243*G0_3_3_5 + 0.000346796061081834*G0_3_4_0 + 0.000616526330812149*G0_3_4_1 - 0.000565149136577803*G0_3_4_2 - 0.0012330526616243*G0_3_4_3 - 0.00267161410018598*G0_3_4_4 - 0.000346796061081834*G0_3_5_0 + 0.000565149136577803*G0_3_5_1 - 0.000616526330812149*G0_3_5_2 + 0.0012330526616243*G0_3_5_3 + 0.00267161410018598*G0_3_5_5 - 0.000112387612387631*G0_4_0_0 - 0.000173398030540917*G0_4_0_1 + 0.000208719851577029*G0_4_0_2 + 0.000346796061081834*G0_4_0_3 + 0.00089910089910105*G0_4_0_4 - 0.000173398030540917*G0_4_1_0 - 9.95433138290449e-05*G0_4_1_1 + 7.38547167118719e-05*G0_4_1_2 + 0.000616526330812149*G0_4_1_3 + 0.000989010989011155*G0_4_1_4 + 0.000346796061081834*G0_4_1_5 + 0.000208719851577029*G0_4_2_0 + 7.38547167118719e-05*G0_4_2_1 - 0.0003789068074783*G0_4_2_2 - 0.000565149136577803*G0_4_2_3 - 0.000744969316398012*G0_4_2_4 - 0.000346796061081834*G0_4_2_5 + 0.000346796061081834*G0_4_3_0 + 0.000616526330812149*G0_4_3_1 - 0.000565149136577803*G0_4_3_2 - 0.0012330526616243*G0_4_3_3 - 0.00267161410018598*G0_4_3_4 + 0.00089910089910105*G0_4_4_0 + 0.000989010989011155*G0_4_4_1 - 0.000744969316398012*G0_4_4_2 - 0.00267161410018598*G0_4_4_3 - 0.00770657913515186*G0_4_4_4 - 0.00128442985585864*G0_4_4_5 + 0.000346796061081834*G0_4_5_1 - 0.000346796061081834*G0_4_5_2 - 0.00128442985585864*G0_4_5_4 + 0.00128442985585865*G0_4_5_5 + 0.000112387612387632*G0_5_0_0 - 0.00020871985157703*G0_5_0_1 + 0.000173398030540917*G0_5_0_2 - 0.000346796061081834*G0_5_0_3 - 0.000899100899101051*G0_5_0_5 - 0.00020871985157703*G0_5_1_0 + 0.0003789068074783*G0_5_1_1 - 7.3854716711872e-05*G0_5_1_2 + 0.000565149136577803*G0_5_1_3 + 0.000346796061081834*G0_5_1_4 + 0.000744969316398013*G0_5_1_5 + 0.000173398030540917*G0_5_2_0 - 7.3854716711872e-05*G0_5_2_1 + 9.95433138290451e-05*G0_5_2_2 - 0.000616526330812149*G0_5_2_3 - 0.000346796061081834*G0_5_2_4 - 0.000989010989011157*G0_5_2_5 - 0.000346796061081834*G0_5_3_0 + 0.000565149136577803*G0_5_3_1 - 0.000616526330812149*G0_5_3_2 + 0.0012330526616243*G0_5_3_3 + 0.00267161410018598*G0_5_3_5 + 0.000346796061081834*G0_5_4_1 - 0.000346796061081834*G0_5_4_2 - 0.00128442985585864*G0_5_4_4 + 0.00128442985585865*G0_5_4_5 - 0.000899100899101051*G0_5_5_0 + 0.000744969316398013*G0_5_5_1 - 0.000989010989011157*G0_5_5_2 + 0.00267161410018598*G0_5_5_3 + 0.00128442985585865*G0_5_5_4 + 0.00770657913515187*G0_5_5_5;
    A[93] = A[89] + 0.000134865134865157*G0_0_0_0 - 3.29135150563777e-05*G0_0_0_1 - 3.05052090766427e-05*G0_0_0_2 + 1.28442985585863e-05*G0_0_0_3 + 7.06436420722253e-05*G0_0_0_4 + 6.42214927929319e-05*G0_0_0_5 - 3.29135150563777e-05*G0_0_1_0 + 3.37162837162894e-05*G0_0_1_1 - 3.85328956757593e-05*G0_0_1_3 - 5.13771942343458e-05*G0_0_1_4 + 1.60553731982331e-05*G0_0_1_5 - 3.05052090766427e-05*G0_0_2_0 + 3.05052090766428e-05*G0_0_2_2 + 5.13771942343456e-05*G0_0_2_3 - 5.13771942343458e-05*G0_0_2_5 + 1.28442985585863e-05*G0_0_3_0 - 3.85328956757593e-05*G0_0_3_1 + 5.13771942343456e-05*G0_0_3_2 - 0.000179820179820209*G0_0_3_3 + 7.70657913515191e-05*G0_0_3_4 + 7.70657913515192e-05*G0_0_3_5 + 7.06436420722253e-05*G0_0_4_0 - 5.13771942343458e-05*G0_0_4_1 + 7.70657913515191e-05*G0_0_4_3 + 0.000282574568288902*G0_0_4_4 + 0.000205508776937383*G0_0_4_5 + 6.42214927929319e-05*G0_0_5_0 + 1.60553731982331e-05*G0_0_5_1 - 5.13771942343458e-05*G0_0_5_2 + 7.70657913515192e-05*G0_0_5_3 + 0.000205508776937383*G0_0_5_4 + 0.000565149136577804*G0_0_5_5 - 3.29135150563777e-05*G0_1_0_0 + 3.37162837162894e-05*G0_1_0_1 - 3.85328956757593e-05*G0_1_0_3 - 5.13771942343458e-05*G0_1_0_4 + 1.60553731982331e-05*G0_1_0_5 + 3.37162837162894e-05*G0_1_1_0 - 3.37162837162895e-05*G0_1_1_2 + 0.000112387612387632*G0_1_1_3 - 0.000112387612387631*G0_1_1_5 - 3.37162837162894e-05*G0_1_2_1 + 3.29135150563778e-05*G0_1_2_2 - 1.60553731982331e-05*G0_1_2_3 + 5.13771942343457e-05*G0_1_2_4 + 3.85328956757593e-05*G0_1_2_5 - 3.85328956757593e-05*G0_1_3_0 + 0.000112387612387632*G0_1_3_1 - 1.60553731982332e-05*G0_1_3_2 + 0.000449550449550526*G0_1_3_3 + 7.70657913515189e-05*G0_1_3_4 - 5.13771942343458e-05*G0_1_4_0 + 5.13771942343457e-05*G0_1_4_2 + 7.70657913515189e-05*G0_1_4_3 - 7.70657913515184e-05*G0_1_4_5 + 1.60553731982331e-05*G0_1_5_0 - 0.000112387612387631*G0_1_5_1 + 3.85328956757593e-05*G0_1_5_2 - 7.70657913515184e-05*G0_1_5_4 - 0.000449550449550525*G0_1_5_5 - 3.05052090766427e-05*G0_2_0_0 + 3.05052090766428e-05*G0_2_0_2 + 5.13771942343456e-05*G0_2_0_3 - 5.13771942343458e-05*G0_2_0_5 - 3.37162837162894e-05*G0_2_1_1 + 3.29135150563778e-05*G0_2_1_2 - 1.60553731982331e-05*G0_2_1_3 + 5.13771942343457e-05*G0_2_1_4 + 3.85328956757593e-05*G0_2_1_5 + 3.05052090766428e-05*G0_2_2_0 + 3.29135150563778e-05*G0_2_2_1 - 0.000134865134865158*G0_2_2_2 - 6.42214927929323e-05*G0_2_2_3 - 7.06436420722255e-05*G0_2_2_4 - 1.28442985585866e-05*G0_2_2_5 + 5.13771942343456e-05*G0_2_3_0 - 1.60553731982331e-05*G0_2_3_1 - 6.42214927929323e-05*G0_2_3_2 - 0.000565149136577803*G0_2_3_3 - 0.000205508776937383*G0_2_3_4 - 7.7065791351518e-05*G0_2_3_5 + 5.13771942343457e-05*G0_2_4_1 - 7.06436420722255e-05*G0_2_4_2 - 0.000205508776937383*G0_2_4_3 - 0.000282574568288901*G0_2_4_4 - 7.70657913515182e-05*G0_2_4_5 - 5.13771942343458e-05*G0_2_5_0 + 3.85328956757593e-05*G0_2_5_1 - 1.28442985585866e-05*G0_2_5_2 - 7.7065791351518e-05*G0_2_5_3 - 7.70657913515183e-05*G0_2_5_4 + 0.000179820179820211*G0_2_5_5 + 1.28442985585863e-05*G0_3_0_0 - 3.85328956757593e-05*G0_3_0_1 + 5.13771942343456e-05*G0_3_0_2 - 0.000179820179820209*G0_3_0_3 + 7.70657913515191e-05*G0_3_0_4 + 7.70657913515191e-05*G0_3_0_5 - 3.85328956757593e-05*G0_3_1_0 + 0.000112387612387632*G0_3_1_1 - 1.60553731982331e-05*G0_3_1_2 + 0.000449550449550526*G0_3_1_3 + 7.70657913515189e-05*G0_3_1_4 + 5.13771942343456e-05*G0_3_2_0 - 1.60553731982331e-05*G0_3_2_1 - 6.42214927929323e-05*G0_3_2_2 - 0.000565149136577803*G0_3_2_3 - 0.000205508776937383*G0_3_2_4 - 7.7065791351518e-05*G0_3_2_5 - 0.000179820179820209*G0_3_3_0 + 0.000449550449550526*G0_3_3_1 - 0.000565149136577803*G0_3_3_2 + 0.00308263165406074*G0_3_3_3 + 0.000205508776937381*G0_3_3_4 + 0.000513771942343456*G0_3_3_5 + 7.70657913515191e-05*G0_3_4_0 + 7.70657913515189e-05*G0_3_4_1 - 0.000205508776937383*G0_3_4_2 + 0.000205508776937381*G0_3_4_3 - 0.000154131582703039*G0_3_4_4 + 7.70657913515192e-05*G0_3_5_0 - 7.7065791351518e-05*G0_3_5_2 + 0.000513771942343456*G0_3_5_3 - 0.000513771942343461*G0_3_5_5 + 7.06436420722253e-05*G0_4_0_0 - 5.13771942343458e-05*G0_4_0_1 + 7.70657913515191e-05*G0_4_0_3 + 0.000282574568288902*G0_4_0_4 + 0.000205508776937383*G0_4_0_5 - 5.13771942343458e-05*G0_4_1_0 + 5.13771942343457e-05*G0_4_1_2 + 7.70657913515189e-05*G0_4_1_3 - 7.70657913515184e-05*G0_4_1_5 + 5.13771942343457e-05*G0_4_2_1 - 7.06436420722255e-05*G0_4_2_2 - 0.000205508776937383*G0_4_2_3 - 0.000282574568288901*G0_4_2_4 - 7.70657913515183e-05*G0_4_2_5 + 7.70657913515191e-05*G0_4_3_0 + 7.7065791351519e-05*G0_4_3_1 - 0.000205508776937383*G0_4_3_2 + 0.000205508776937381*G0_4_3_3 - 0.000154131582703039*G0_4_3_4 + 0.000282574568288902*G0_4_4_0 - 0.000282574568288901*G0_4_4_2 - 0.000154131582703039*G0_4_4_3 + 0.000154131582703036*G0_4_4_5 + 0.000205508776937383*G0_4_5_0 - 7.70657913515184e-05*G0_4_5_1 - 7.70657913515182e-05*G0_4_5_2 + 0.000154131582703036*G0_4_5_4 - 0.000205508776937385*G0_4_5_5 + 6.42214927929319e-05*G0_5_0_0 + 1.60553731982331e-05*G0_5_0_1 - 5.13771942343458e-05*G0_5_0_2 + 7.70657913515192e-05*G0_5_0_3 + 0.000205508776937383*G0_5_0_4 + 0.000565149136577804*G0_5_0_5 + 1.60553731982331e-05*G0_5_1_0 - 0.000112387612387631*G0_5_1_1 + 3.85328956757593e-05*G0_5_1_2 - 7.70657913515184e-05*G0_5_1_4 - 0.000449550449550525*G0_5_1_5 - 5.13771942343458e-05*G0_5_2_0 + 3.85328956757593e-05*G0_5_2_1 - 1.28442985585866e-05*G0_5_2_2 - 7.7065791351518e-05*G0_5_2_3 - 7.70657913515183e-05*G0_5_2_4 + 0.000179820179820211*G0_5_2_5 + 7.70657913515192e-05*G0_5_3_0 - 7.70657913515179e-05*G0_5_3_2 + 0.000513771942343455*G0_5_3_3 - 0.000513771942343461*G0_5_3_5 + 0.000205508776937383*G0_5_4_0 - 7.70657913515184e-05*G0_5_4_1 - 7.70657913515182e-05*G0_5_4_2 + 0.000154131582703036*G0_5_4_4 - 0.000205508776937385*G0_5_4_5 + 0.000565149136577804*G0_5_5_0 - 0.000449550449550525*G0_5_5_1 + 0.000179820179820211*G0_5_5_2 - 0.000513771942343461*G0_5_5_3 - 0.000205508776937385*G0_5_5_4 - 0.00308263165406075*G0_5_5_5;
    A[94] = A[69] + 0.000134865134865158*G0_0_0_0 - 3.05052090766428e-05*G0_0_0_1 - 3.29135150563777e-05*G0_0_0_2 + 1.28442985585865e-05*G0_0_0_3 + 6.42214927929322e-05*G0_0_0_4 + 7.06436420722254e-05*G0_0_0_5 - 3.05052090766428e-05*G0_0_1_0 + 3.05052090766428e-05*G0_0_1_1 + 5.13771942343457e-05*G0_0_1_3 - 5.13771942343458e-05*G0_0_1_4 - 3.29135150563777e-05*G0_0_2_0 + 3.37162837162894e-05*G0_0_2_2 - 3.85328956757593e-05*G0_0_2_3 + 1.60553731982329e-05*G0_0_2_4 - 5.13771942343458e-05*G0_0_2_5 + 1.28442985585865e-05*G0_0_3_0 + 5.13771942343457e-05*G0_0_3_1 - 3.85328956757593e-05*G0_0_3_2 - 0.00017982017982021*G0_0_3_3 + 7.70657913515185e-05*G0_0_3_4 + 7.70657913515187e-05*G0_0_3_5 + 6.42214927929322e-05*G0_0_4_0 - 5.13771942343458e-05*G0_0_4_1 + 1.6055373198233e-05*G0_0_4_2 + 7.70657913515185e-05*G0_0_4_3 + 0.000565149136577803*G0_0_4_4 + 0.000205508776937383*G0_0_4_5 + 7.06436420722254e-05*G0_0_5_0 - 5.13771942343458e-05*G0_0_5_2 + 7.70657913515187e-05*G0_0_5_3 + 0.000205508776937383*G0_0_5_4 + 0.000282574568288902*G0_0_5_5 - 3.05052090766428e-05*G0_1_0_0 + 3.05052090766428e-05*G0_1_0_1 + 5.13771942343457e-05*G0_1_0_3 - 5.13771942343458e-05*G0_1_0_4 + 3.05052090766428e-05*G0_1_1_0 - 0.000134865134865158*G0_1_1_1 + 3.29135150563778e-05*G0_1_1_2 - 6.42214927929323e-05*G0_1_1_3 - 1.28442985585864e-05*G0_1_1_4 - 7.06436420722254e-05*G0_1_1_5 + 3.29135150563777e-05*G0_1_2_1 - 3.37162837162894e-05*G0_1_2_2 - 1.60553731982329e-05*G0_1_2_3 + 3.85328956757593e-05*G0_1_2_4 + 5.13771942343458e-05*G0_1_2_5 + 5.13771942343457e-05*G0_1_3_0 - 6.42214927929323e-05*G0_1_3_1 - 1.60553731982329e-05*G0_1_3_2 - 0.000565149136577803*G0_1_3_3 - 7.70657913515188e-05*G0_1_3_4 - 0.000205508776937383*G0_1_3_5 - 5.13771942343458e-05*G0_1_4_0 - 1.28442985585864e-05*G0_1_4_1 + 3.85328956757593e-05*G0_1_4_2 - 7.70657913515187e-05*G0_1_4_3 + 0.00017982017982021*G0_1_4_4 - 7.70657913515187e-05*G0_1_4_5 - 7.06436420722254e-05*G0_1_5_1 + 5.13771942343458e-05*G0_1_5_2 - 0.000205508776937383*G0_1_5_3 - 7.70657913515187e-05*G0_1_5_4 - 0.000282574568288902*G0_1_5_5 - 3.29135150563777e-05*G0_2_0_0 + 3.37162837162894e-05*G0_2_0_2 - 3.85328956757593e-05*G0_2_0_3 + 1.60553731982329e-05*G0_2_0_4 - 5.13771942343458e-05*G0_2_0_5 + 3.29135150563778e-05*G0_2_1_1 - 3.37162837162894e-05*G0_2_1_2 - 1.60553731982329e-05*G0_2_1_3 + 3.85328956757593e-05*G0_2_1_4 + 5.13771942343458e-05*G0_2_1_5 + 3.37162837162894e-05*G0_2_2_0 - 3.37162837162894e-05*G0_2_2_1 + 0.000112387612387631*G0_2_2_3 - 0.000112387612387631*G0_2_2_4 - 3.85328956757593e-05*G0_2_3_0 - 1.6055373198233e-05*G0_2_3_1 + 0.000112387612387631*G0_2_3_2 + 0.000449550449550525*G0_2_3_3 + 7.70657913515186e-05*G0_2_3_5 + 1.60553731982329e-05*G0_2_4_0 + 3.85328956757593e-05*G0_2_4_1 - 0.000112387612387631*G0_2_4_2 - 0.000449550449550525*G0_2_4_4 - 7.70657913515187e-05*G0_2_4_5 - 5.13771942343458e-05*G0_2_5_0 + 5.13771942343458e-05*G0_2_5_1 + 7.70657913515185e-05*G0_2_5_3 - 7.70657913515187e-05*G0_2_5_4 + 1.28442985585864e-05*G0_3_0_0 + 5.13771942343457e-05*G0_3_0_1 - 3.85328956757593e-05*G0_3_0_2 - 0.00017982017982021*G0_3_0_3 + 7.70657913515185e-05*G0_3_0_4 + 7.70657913515187e-05*G0_3_0_5 + 5.13771942343457e-05*G0_3_1_0 - 6.42214927929323e-05*G0_3_1_1 - 1.6055373198233e-05*G0_3_1_2 - 0.000565149136577803*G0_3_1_3 - 7.70657913515187e-05*G0_3_1_4 - 0.000205508776937383*G0_3_1_5 - 3.85328956757593e-05*G0_3_2_0 - 1.6055373198233e-05*G0_3_2_1 + 0.000112387612387631*G0_3_2_2 + 0.000449550449550525*G0_3_2_3 + 7.70657913515186e-05*G0_3_2_5 - 0.00017982017982021*G0_3_3_0 - 0.000565149136577803*G0_3_3_1 + 0.000449550449550525*G0_3_3_2 + 0.00308263165406074*G0_3_3_3 + 0.000513771942343456*G0_3_3_4 + 0.000205508776937383*G0_3_3_5 + 7.70657913515185e-05*G0_3_4_0 - 7.70657913515187e-05*G0_3_4_1 + 0.000513771942343457*G0_3_4_3 - 0.000513771942343457*G0_3_4_4 + 7.70657913515187e-05*G0_3_5_0 - 0.000205508776937383*G0_3_5_1 + 7.70657913515186e-05*G0_3_5_2 + 0.000205508776937383*G0_3_5_3 - 0.000154131582703037*G0_3_5_5 + 6.42214927929322e-05*G0_4_0_0 - 5.13771942343458e-05*G0_4_0_1 + 1.60553731982329e-05*G0_4_0_2 + 7.70657913515185e-05*G0_4_0_3 + 0.000565149136577803*G0_4_0_4 + 0.000205508776937383*G0_4_0_5 - 5.13771942343458e-05*G0_4_1_0 - 1.28442985585864e-05*G0_4_1_1 + 3.85328956757593e-05*G0_4_1_2 - 7.70657913515187e-05*G0_4_1_3 + 0.00017982017982021*G0_4_1_4 - 7.70657913515187e-05*G0_4_1_5 + 1.60553731982329e-05*G0_4_2_0 + 3.85328956757593e-05*G0_4_2_1 - 0.000112387612387631*G0_4_2_2 - 0.000449550449550525*G0_4_2_4 - 7.70657913515186e-05*G0_4_2_5 + 7.70657913515185e-05*G0_4_3_0 - 7.70657913515187e-05*G0_4_3_1 + 0.000513771942343457*G0_4_3_3 - 0.000513771942343456*G0_4_3_4 + 0.000565149136577803*G0_4_4_0 + 0.00017982017982021*G0_4_4_1 - 0.000449550449550525*G0_4_4_2 - 0.000513771942343456*G0_4_4_3 - 0.00308263165406074*G0_4_4_4 - 0.000205508776937383*G0_4_4_5 + 0.000205508776937383*G0_4_5_0 - 7.70657913515187e-05*G0_4_5_1 - 7.70657913515187e-05*G0_4_5_2 - 0.000205508776937383*G0_4_5_4 + 0.000154131582703037*G0_4_5_5 + 7.06436420722254e-05*G0_5_0_0 - 5.13771942343458e-05*G0_5_0_2 + 7.70657913515187e-05*G0_5_0_3 + 0.000205508776937383*G0_5_0_4 + 0.000282574568288902*G0_5_0_5 - 7.06436420722254e-05*G0_5_1_1 + 5.13771942343458e-05*G0_5_1_2 - 0.000205508776937383*G0_5_1_3 - 7.70657913515187e-05*G0_5_1_4 - 0.000282574568288902*G0_5_1_5 - 5.13771942343458e-05*G0_5_2_0 + 5.13771942343458e-05*G0_5_2_1 + 7.70657913515186e-05*G0_5_2_3 - 7.70657913515187e-05*G0_5_2_4 + 7.70657913515187e-05*G0_5_3_0 - 0.000205508776937383*G0_5_3_1 + 7.70657913515186e-05*G0_5_3_2 + 0.000205508776937383*G0_5_3_3 - 0.000154131582703037*G0_5_3_5 + 0.000205508776937383*G0_5_4_0 - 7.70657913515187e-05*G0_5_4_1 - 7.70657913515187e-05*G0_5_4_2 - 0.000205508776937382*G0_5_4_4 + 0.000154131582703037*G0_5_4_5 + 0.000282574568288902*G0_5_5_0 - 0.000282574568288902*G0_5_5_1 - 0.000154131582703037*G0_5_5_3 + 0.000154131582703037*G0_5_5_4;
    A[97] = A[89] + 0.000505744255744341*G0_0_0_0 - 0.000158948194662507*G0_0_0_1 - 5.77993435136389e-05*G0_0_0_2 - 8.66990152704586e-05*G0_0_0_3 + 0.000337162837162894*G0_0_0_4 + 0.000337162837162894*G0_0_0_5 - 0.000158948194662507*G0_0_1_0 + 0.000158948194662507*G0_0_1_1 + 8.66990152704584e-05*G0_0_1_3 - 8.66990152704585e-05*G0_0_1_4 - 5.77993435136389e-05*G0_0_2_0 + 6.50242614528439e-05*G0_0_2_2 - 0.000173398030540917*G0_0_2_3 - 0.000192664478378796*G0_0_2_4 - 0.000298629941487135*G0_0_2_5 - 8.66990152704586e-05*G0_0_3_0 + 8.66990152704584e-05*G0_0_3_1 - 0.000173398030540917*G0_0_3_2 + 0.000809190809190946*G0_0_3_3 + 0.000346796061081834*G0_0_3_4 + 0.000770657913515187*G0_0_3_5 + 0.000337162837162894*G0_0_4_0 - 8.66990152704585e-05*G0_0_4_1 - 0.000192664478378796*G0_0_4_2 + 0.000346796061081834*G0_0_4_3 + 0.00057799343513639*G0_0_4_4 + 0.000770657913515187*G0_0_4_5 + 0.000337162837162894*G0_0_5_0 - 0.000298629941487135*G0_0_5_2 + 0.000770657913515187*G0_0_5_3 + 0.000770657913515187*G0_0_5_4 + 0.00192664478378797*G0_0_5_5 - 0.000158948194662507*G0_1_0_0 + 0.000158948194662507*G0_1_0_1 + 8.66990152704584e-05*G0_1_0_3 - 8.66990152704585e-05*G0_1_0_4 + 0.000158948194662507*G0_1_1_0 - 0.000505744255744341*G0_1_1_1 + 5.7799343513639e-05*G0_1_1_2 - 0.000337162837162894*G0_1_1_3 + 8.66990152704584e-05*G0_1_1_4 - 0.000337162837162894*G0_1_1_5 + 5.7799343513639e-05*G0_1_2_1 - 6.50242614528438e-05*G0_1_2_2 + 0.000192664478378797*G0_1_2_3 + 0.000173398030540917*G0_1_2_4 + 0.000298629941487135*G0_1_2_5 + 8.66990152704584e-05*G0_1_3_0 - 0.000337162837162894*G0_1_3_1 + 0.000192664478378797*G0_1_3_2 - 0.000577993435136389*G0_1_3_3 - 0.000346796061081833*G0_1_3_4 - 0.000770657913515186*G0_1_3_5 - 8.66990152704585e-05*G0_1_4_0 + 8.66990152704584e-05*G0_1_4_1 + 0.000173398030540917*G0_1_4_2 - 0.000346796061081833*G0_1_4_3 - 0.000809190809190945*G0_1_4_4 - 0.000770657913515186*G0_1_4_5 - 0.000337162837162894*G0_1_5_1 + 0.000298629941487135*G0_1_5_2 - 0.000770657913515186*G0_1_5_3 - 0.000770657913515186*G0_1_5_4 - 0.00192664478378797*G0_1_5_5 - 5.77993435136389e-05*G0_2_0_0 + 6.50242614528439e-05*G0_2_0_2 - 0.000173398030540917*G0_2_0_3 - 0.000192664478378796*G0_2_0_4 - 0.000298629941487135*G0_2_0_5 + 5.7799343513639e-05*G0_2_1_1 - 6.50242614528438e-05*G0_2_1_2 + 0.000192664478378797*G0_2_1_3 + 0.000173398030540917*G0_2_1_4 + 0.000298629941487135*G0_2_1_5 + 6.50242614528439e-05*G0_2_2_0 - 6.50242614528438e-05*G0_2_2_1 - 0.000105965463108338*G0_2_2_3 + 0.000105965463108338*G0_2_2_4 - 0.000173398030540917*G0_2_3_0 + 0.000192664478378797*G0_2_3_1 - 0.000105965463108338*G0_2_3_2 + 0.000616526330812149*G0_2_3_3 + 0.000346796061081834*G0_2_3_5 - 0.000192664478378796*G0_2_4_0 + 0.000173398030540917*G0_2_4_1 + 0.000105965463108338*G0_2_4_2 - 0.000616526330812149*G0_2_4_4 - 0.000346796061081834*G0_2_4_5 - 0.000298629941487135*G0_2_5_0 + 0.000298629941487135*G0_2_5_1 + 0.000346796061081834*G0_2_5_3 - 0.000346796061081834*G0_2_5_4 - 8.66990152704586e-05*G0_3_0_0 + 8.66990152704584e-05*G0_3_0_1 - 0.000173398030540917*G0_3_0_2 + 0.000809190809190946*G0_3_0_3 + 0.000346796061081834*G0_3_0_4 + 0.000770657913515187*G0_3_0_5 + 8.66990152704584e-05*G0_3_1_0 - 0.000337162837162894*G0_3_1_1 + 0.000192664478378797*G0_3_1_2 - 0.000577993435136389*G0_3_1_3 - 0.000346796061081833*G0_3_1_4 - 0.000770657913515186*G0_3_1_5 - 0.000173398030540917*G0_3_2_0 + 0.000192664478378797*G0_3_2_1 - 0.000105965463108338*G0_3_2_2 + 0.000616526330812149*G0_3_2_3 + 0.000346796061081834*G0_3_2_5 + 0.000809190809190946*G0_3_3_0 - 0.000577993435136389*G0_3_3_1 + 0.000616526330812149*G0_3_3_2 - 0.00462394748109112*G0_3_3_3 - 0.000924789496218226*G0_3_3_4 - 0.00231197374054556*G0_3_3_5 + 0.000346796061081834*G0_3_4_0 - 0.000346796061081833*G0_3_4_1 - 0.000924789496218226*G0_3_4_3 + 0.000924789496218222*G0_3_4_4 + 0.000770657913515187*G0_3_5_0 - 0.000770657913515186*G0_3_5_1 + 0.000346796061081834*G0_3_5_2 - 0.00231197374054556*G0_3_5_3 - 0.00154131582703038*G0_3_5_5 + 0.000337162837162894*G0_4_0_0 - 8.66990152704585e-05*G0_4_0_1 - 0.000192664478378796*G0_4_0_2 + 0.000346796061081834*G0_4_0_3 + 0.00057799343513639*G0_4_0_4 + 0.000770657913515187*G0_4_0_5 - 8.66990152704585e-05*G0_4_1_0 + 8.66990152704584e-05*G0_4_1_1 + 0.000173398030540917*G0_4_1_2 - 0.000346796061081833*G0_4_1_3 - 0.000809190809190945*G0_4_1_4 - 0.000770657913515186*G0_4_1_5 - 0.000192664478378796*G0_4_2_0 + 0.000173398030540917*G0_4_2_1 + 0.000105965463108338*G0_4_2_2 - 0.000616526330812149*G0_4_2_4 - 0.000346796061081834*G0_4_2_5 + 0.000346796061081834*G0_4_3_0 - 0.000346796061081833*G0_4_3_1 - 0.000924789496218226*G0_4_3_3 + 0.000924789496218222*G0_4_3_4 + 0.00057799343513639*G0_4_4_0 - 0.000809190809190945*G0_4_4_1 - 0.000616526330812149*G0_4_4_2 + 0.000924789496218222*G0_4_4_3 + 0.00462394748109111*G0_4_4_4 + 0.00231197374054556*G0_4_4_5 + 0.000770657913515187*G0_4_5_0 - 0.000770657913515186*G0_4_5_1 - 0.000346796061081834*G0_4_5_2 + 0.00231197374054556*G0_4_5_4 + 0.00154131582703037*G0_4_5_5 + 0.000337162837162894*G0_5_0_0 - 0.000298629941487135*G0_5_0_2 + 0.000770657913515187*G0_5_0_3 + 0.000770657913515187*G0_5_0_4 + 0.00192664478378797*G0_5_0_5 - 0.000337162837162894*G0_5_1_1 + 0.000298629941487135*G0_5_1_2 - 0.000770657913515186*G0_5_1_3 - 0.000770657913515186*G0_5_1_4 - 0.00192664478378796*G0_5_1_5 - 0.000298629941487135*G0_5_2_0 + 0.000298629941487135*G0_5_2_1 + 0.000346796061081834*G0_5_2_3 - 0.000346796061081834*G0_5_2_4 + 0.000770657913515187*G0_5_3_0 - 0.000770657913515186*G0_5_3_1 + 0.000346796061081834*G0_5_3_2 - 0.00231197374054556*G0_5_3_3 - 0.00154131582703038*G0_5_3_5 + 0.000770657913515187*G0_5_4_0 - 0.000770657913515186*G0_5_4_1 - 0.000346796061081834*G0_5_4_2 + 0.00231197374054556*G0_5_4_4 + 0.00154131582703037*G0_5_4_5 + 0.00192664478378797*G0_5_5_0 - 0.00192664478378796*G0_5_5_1 - 0.00154131582703038*G0_5_5_3 + 0.00154131582703037*G0_5_5_4;
    A[55] = A[97] + 0.00123626373626395*G0_0_0_0 - 5.61938061938156e-05*G0_0_0_1 - 0.000258491508491552*G0_0_0_2 + 0.000146103896103921*G0_0_0_3 + 0.00140484515484539*G0_0_0_4 + 0.00020604395604399*G0_0_0_5 - 5.61938061938156e-05*G0_0_1_0 - 4.36170971885331e-05*G0_0_1_1 + 3.83991008991074e-05*G0_0_1_2 - 3.21107463964655e-06*G0_0_1_3 - 9.04452690167127e-05*G0_0_1_4 - 3.21107463964651e-06*G0_0_1_5 - 0.000258491508491552*G0_0_2_0 + 3.83991008991074e-05*G0_0_2_1 + 1.36470672184981e-05*G0_0_2_2 - 4.28143285286214e-06*G0_0_2_3 - 0.000461324389895896*G0_0_2_4 - 2.19423433709184e-05*G0_0_2_5 + 0.000146103896103921*G0_0_3_0 - 3.21107463964655e-06*G0_0_3_1 - 4.28143285286214e-06*G0_0_3_2 - 0.000509490509490596*G0_0_3_3 - 0.000111317254174416*G0_0_3_4 - 0.000248323105466005*G0_0_3_5 + 0.00140484515484539*G0_0_4_0 - 9.04452690167127e-05*G0_0_4_1 - 0.000461324389895896*G0_0_4_2 - 0.000111317254174416*G0_0_4_3 + 0.00224775224775262*G0_0_4_4 + 0.000224775224775262*G0_0_4_5 + 0.00020604395604399*G0_0_5_0 - 3.21107463964651e-06*G0_0_5_1 - 2.19423433709184e-05*G0_0_5_2 - 0.000248323105466005*G0_0_5_3 + 0.000224775224775262*G0_0_5_4 - 0.000449550449550525*G0_0_5_5 - 5.61938061938156e-05*G0_1_0_0 - 4.36170971885331e-05*G0_1_0_1 + 3.83991008991074e-05*G0_1_0_2 - 3.21107463964655e-06*G0_1_0_3 - 9.04452690167127e-05*G0_1_0_4 - 3.21107463964649e-06*G0_1_0_5 - 4.36170971885331e-05*G0_1_1_0 + 0.000150920508063391*G0_1_1_1 - 1.3914656771802e-05*G0_1_1_2 + 0.000158413015555899*G0_1_1_3 + 4.17439703154059e-05*G0_1_1_4 + 7.17140002854411e-05*G0_1_1_5 + 3.83991008991074e-05*G0_1_2_0 - 1.3914656771802e-05*G0_1_2_1 - 2.24775224775263e-05*G0_1_2_2 - 0.000105965463108338*G0_1_2_3 - 2.14071642643108e-05*G0_1_2_4 - 0.000105965463108338*G0_1_2_5 - 3.21107463964655e-06*G0_1_3_0 + 0.000158413015555899*G0_1_3_1 - 0.000105965463108338*G0_1_3_2 + 4.28143285286176e-06*G0_1_3_3 - 7.70657913515189e-05*G0_1_3_4 + 0.000218353075495969*G0_1_3_5 - 9.04452690167127e-05*G0_1_4_0 + 4.17439703154059e-05*G0_1_4_1 - 2.14071642643108e-05*G0_1_4_2 - 7.70657913515189e-05*G0_1_4_3 - 0.00041958041958049*G0_1_4_4 + 0.000128442985585864*G0_1_4_5 - 3.21107463964651e-06*G0_1_5_0 + 7.1714000285441e-05*G0_1_5_1 - 0.000105965463108338*G0_1_5_2 + 0.000218353075495969*G0_1_5_3 + 0.000128442985585864*G0_1_5_4 + 0.000762095047809461*G0_1_5_5 - 0.000258491508491552*G0_2_0_0 + 3.83991008991074e-05*G0_2_0_1 + 1.3647067218498e-05*G0_2_0_2 - 4.28143285286216e-06*G0_2_0_3 - 0.000461324389895896*G0_2_0_4 - 2.19423433709184e-05*G0_2_0_5 + 3.83991008991074e-05*G0_2_1_0 - 1.3914656771802e-05*G0_2_1_1 - 2.24775224775263e-05*G0_2_1_2 - 0.000105965463108338*G0_2_1_3 - 2.14071642643108e-05*G0_2_1_4 - 0.000105965463108338*G0_2_1_5 + 1.3647067218498e-05*G0_2_2_0 - 2.24775224775263e-05*G0_2_2_1 + 0.000258491508491552*G0_2_2_2 + 0.000191594120165581*G0_2_2_3 + 0.000385328956757593*G0_2_2_4 + 2.56885971171729e-05*G0_2_2_5 - 4.28143285286216e-06*G0_2_3_0 - 0.000105965463108338*G0_2_3_1 + 0.000191594120165581*G0_2_3_2 - 8.99100899101052e-05*G0_2_3_3 + 5.13771942343456e-05*G0_2_3_4 - 4.28143285286216e-05*G0_2_3_5 - 0.000461324389895896*G0_2_4_0 - 2.14071642643108e-05*G0_2_4_1 + 0.000385328956757593*G0_2_4_2 + 5.13771942343456e-05*G0_2_4_3 - 0.000822035107749532*G0_2_4_4 - 8.56286570572422e-06*G0_2_4_5 - 2.19423433709184e-05*G0_2_5_0 - 0.000105965463108338*G0_2_5_1 + 2.56885971171729e-05*G0_2_5_2 - 4.28143285286216e-05*G0_2_5_3 - 8.56286570572427e-06*G0_2_5_4 + 0.00029970029970035*G0_2_5_5 + 0.000146103896103921*G0_3_0_0 - 3.21107463964655e-06*G0_3_0_1 - 4.28143285286215e-06*G0_3_0_2 - 0.000509490509490596*G0_3_0_3 - 0.000111317254174416*G0_3_0_4 - 0.000248323105466005*G0_3_0_5 - 3.21107463964655e-06*G0_3_1_0 + 0.000158413015555899*G0_3_1_1 - 0.000105965463108338*G0_3_1_2 + 4.28143285286178e-06*G0_3_1_3 - 7.70657913515189e-05*G0_3_1_4 + 0.000218353075495969*G0_3_1_5 - 4.28143285286215e-06*G0_3_2_0 - 0.000105965463108338*G0_3_2_1 + 0.000191594120165581*G0_3_2_2 - 8.99100899101052e-05*G0_3_2_3 + 5.13771942343456e-05*G0_3_2_4 - 4.28143285286216e-05*G0_3_2_5 - 0.000509490509490596*G0_3_3_0 + 4.28143285286178e-06*G0_3_3_1 - 8.99100899101052e-05*G0_3_3_2 + 0.0033823319537611*G0_3_3_3 + 0.00117311260168423*G0_3_3_4 + 0.00110460967603843*G0_3_3_5 - 0.000111317254174416*G0_3_4_0 - 7.70657913515188e-05*G0_3_4_1 + 5.13771942343456e-05*G0_3_4_2 + 0.00117311260168423*G0_3_4_3 + 0.00106179534750981*G0_3_4_4 + 0.000239760239760281*G0_3_4_5 - 0.000248323105466005*G0_3_5_0 + 0.000218353075495969*G0_3_5_1 - 4.28143285286216e-05*G0_3_5_2 + 0.00110460967603843*G0_3_5_3 + 0.000239760239760281*G0_3_5_4 - 0.000102754388468691*G0_3_5_5 + 0.00140484515484539*G0_4_0_0 - 9.04452690167127e-05*G0_4_0_1 - 0.000461324389895896*G0_4_0_2 - 0.000111317254174416*G0_4_0_3 + 0.00224775224775262*G0_4_0_4 + 0.000224775224775262*G0_4_0_5 - 9.04452690167127e-05*G0_4_1_0 + 4.17439703154059e-05*G0_4_1_1 - 2.14071642643108e-05*G0_4_1_2 - 7.70657913515189e-05*G0_4_1_3 - 0.00041958041958049*G0_4_1_4 + 0.000128442985585864*G0_4_1_5 - 0.000461324389895896*G0_4_2_0 - 2.14071642643108e-05*G0_4_2_1 + 0.000385328956757593*G0_4_2_2 + 5.13771942343456e-05*G0_4_2_3 - 0.000822035107749531*G0_4_2_4 - 8.56286570572427e-06*G0_4_2_5 - 0.000111317254174416*G0_4_3_0 - 7.70657913515189e-05*G0_4_3_1 + 5.13771942343456e-05*G0_4_3_2 + 0.00117311260168423*G0_4_3_3 + 0.00106179534750981*G0_4_3_4 + 0.000239760239760281*G0_4_3_5 + 0.00224775224775262*G0_4_4_0 - 0.00041958041958049*G0_4_4_1 - 0.000822035107749531*G0_4_4_2 + 0.00106179534750981*G0_4_4_3 + 0.00993292421864018*G0_4_4_4 + 0.000856286570572428*G0_4_4_5 + 0.000224775224775262*G0_4_5_0 + 0.000128442985585864*G0_4_5_1 - 8.56286570572417e-06*G0_4_5_2 + 0.000239760239760281*G0_4_5_3 + 0.000856286570572428*G0_4_5_4 - 0.000856286570572429*G0_4_5_5 + 0.00020604395604399*G0_5_0_0 - 3.21107463964651e-06*G0_5_0_1 - 2.19423433709184e-05*G0_5_0_2 - 0.000248323105466005*G0_5_0_3 + 0.000224775224775262*G0_5_0_4 - 0.000449550449550525*G0_5_0_5 - 3.21107463964651e-06*G0_5_1_0 + 7.1714000285441e-05*G0_5_1_1 - 0.000105965463108338*G0_5_1_2 + 0.000218353075495969*G0_5_1_3 + 0.000128442985585864*G0_5_1_4 + 0.000762095047809461*G0_5_1_5 - 2.19423433709184e-05*G0_5_2_0 - 0.000105965463108338*G0_5_2_1 + 2.56885971171729e-05*G0_5_2_2 - 4.28143285286216e-05*G0_5_2_3 - 8.56286570572417e-06*G0_5_2_4 + 0.00029970029970035*G0_5_2_5 - 0.000248323105466005*G0_5_3_0 + 0.000218353075495969*G0_5_3_1 - 4.28143285286216e-05*G0_5_3_2 + 0.00110460967603843*G0_5_3_3 + 0.000239760239760281*G0_5_3_4 - 0.000102754388468691*G0_5_3_5 + 0.000224775224775262*G0_5_4_0 + 0.000128442985585864*G0_5_4_1 - 8.56286570572422e-06*G0_5_4_2 + 0.000239760239760281*G0_5_4_3 + 0.000856286570572429*G0_5_4_4 - 0.000856286570572429*G0_5_4_5 - 0.000449550449550525*G0_5_5_0 + 0.000762095047809461*G0_5_5_1 + 0.00029970029970035*G0_5_5_2 - 0.000102754388468691*G0_5_5_3 - 0.00085628657057243*G0_5_5_4 - 0.00393891822463317*G0_5_5_5;
    A[75] = A[55] - 0.000786713286713422*G0_0_0_0 + 2.06043956043993e-05*G0_0_0_1 + 0.000189185814185846*G0_0_0_2 - 4.12087912087983e-05*G0_0_0_3 - 0.00108641358641377*G0_0_0_4 + 2.06043956043992e-05*G0_0_1_0 + 2.54210075638686e-06*G0_0_1_1 - 1.80622948480122e-05*G0_0_1_2 - 1.07035821321553e-05*G0_0_1_3 + 7.11788211788332e-05*G0_0_1_4 - 4.12087912087982e-05*G0_0_1_5 + 0.000189185814185846*G0_0_2_0 - 1.80622948480122e-05*G0_0_2_1 - 2.18085485942666e-05*G0_0_2_2 + 4.17439703154059e-05*G0_0_2_3 + 0.000400849150849219*G0_0_2_4 + 4.12087912087981e-05*G0_0_2_5 - 4.12087912087983e-05*G0_0_3_0 - 1.07035821321553e-05*G0_0_3_1 + 4.17439703154059e-05*G0_0_3_2 + 2.14071642643107e-05*G0_0_3_3 - 5.99400599400703e-05*G0_0_3_4 - 0.00108641358641377*G0_0_4_0 + 7.11788211788332e-05*G0_0_4_1 + 0.000400849150849219*G0_0_4_2 - 5.99400599400703e-05*G0_0_4_3 - 0.00202297702297736*G0_0_4_4 - 0.000224775224775263*G0_0_4_5 - 4.12087912087982e-05*G0_0_5_1 + 4.12087912087981e-05*G0_0_5_2 - 0.000224775224775263*G0_0_5_4 + 0.000224775224775262*G0_0_5_5 + 2.06043956043992e-05*G0_1_0_0 + 2.54210075638686e-06*G0_1_0_1 - 1.80622948480122e-05*G0_1_0_2 - 1.07035821321553e-05*G0_1_0_3 + 7.11788211788332e-05*G0_1_0_4 - 4.12087912087982e-05*G0_1_0_5 + 2.54210075638686e-06*G0_1_1_0 + 1.76609105180566e-05*G0_1_1_1 - 5.88697017268544e-06*G0_1_1_2 + 1.07035821321561e-06*G0_1_1_3 - 3.42514628228972e-05*G0_1_1_4 + 3.10403881832507e-05*G0_1_1_5 - 1.80622948480122e-05*G0_1_2_0 - 5.88697017268544e-06*G0_1_2_1 + 3.31811046096816e-05*G0_1_2_2 + 1.17739403453709e-05*G0_1_2_3 - 3.31811046096816e-05*G0_1_2_4 - 1.07035821321554e-05*G0_1_3_0 + 1.0703582132156e-06*G0_1_3_1 + 1.17739403453709e-05*G0_1_3_2 + 8.13472242043809e-05*G0_1_3_3 + 8.9910089910105e-05*G0_1_3_4 + 2.14071642643109e-05*G0_1_3_5 + 7.11788211788332e-05*G0_1_4_0 - 3.42514628228972e-05*G0_1_4_1 - 3.31811046096816e-05*G0_1_4_2 + 8.9910089910105e-05*G0_1_4_3 + 0.000470957613814835*G0_1_4_4 + 6.85029256457943e-05*G0_1_4_5 - 4.12087912087982e-05*G0_1_5_0 + 3.10403881832507e-05*G0_1_5_1 + 2.14071642643109e-05*G0_1_5_3 + 6.85029256457943e-05*G0_1_5_4 - 0.000128442985585864*G0_1_5_5 + 0.000189185814185846*G0_2_0_0 - 1.80622948480122e-05*G0_2_0_1 - 2.18085485942666e-05*G0_2_0_2 + 4.1743970315406e-05*G0_2_0_3 + 0.000400849150849219*G0_2_0_4 + 4.12087912087981e-05*G0_2_0_5 - 1.80622948480122e-05*G0_2_1_0 - 5.88697017268544e-06*G0_2_1_1 + 3.31811046096816e-05*G0_2_1_2 + 1.17739403453709e-05*G0_2_1_3 - 3.31811046096816e-05*G0_2_1_4 - 2.18085485942666e-05*G0_2_2_0 + 3.31811046096816e-05*G0_2_2_1 - 0.000224775224775263*G0_2_2_2 - 0.000102754388468692*G0_2_2_3 - 0.000346796061081834*G0_2_2_4 - 3.10403881832506e-05*G0_2_2_5 + 4.1743970315406e-05*G0_2_3_0 + 1.17739403453709e-05*G0_2_3_1 - 0.000102754388468692*G0_2_3_2 - 0.000107035821321554*G0_2_3_3 - 1.71257314114484e-05*G0_2_3_4 - 2.14071642643108e-05*G0_2_3_5 + 0.000400849150849219*G0_2_4_0 - 3.31811046096816e-05*G0_2_4_1 - 0.000346796061081834*G0_2_4_2 - 1.71257314114484e-05*G0_2_4_3 + 0.000890538033395326*G0_2_4_4 + 0.000128442985585864*G0_2_4_5 + 4.12087912087981e-05*G0_2_5_0 - 3.10403881832506e-05*G0_2_5_2 - 2.14071642643108e-05*G0_2_5_3 + 0.000128442985585864*G0_2_5_4 - 6.85029256457943e-05*G0_2_5_5 - 4.12087912087983e-05*G0_3_0_0 - 1.07035821321553e-05*G0_3_0_1 + 4.1743970315406e-05*G0_3_0_2 + 2.14071642643107e-05*G0_3_0_3 - 5.99400599400703e-05*G0_3_0_4 - 1.07035821321553e-05*G0_3_1_0 + 1.0703582132156e-06*G0_3_1_1 + 1.17739403453709e-05*G0_3_1_2 + 8.13472242043809e-05*G0_3_1_3 + 8.9910089910105e-05*G0_3_1_4 + 2.14071642643109e-05*G0_3_1_5 + 4.1743970315406e-05*G0_3_2_0 + 1.17739403453709e-05*G0_3_2_1 - 0.000102754388468692*G0_3_2_2 - 0.000107035821321554*G0_3_2_3 - 1.71257314114484e-05*G0_3_2_4 - 2.14071642643108e-05*G0_3_2_5 + 2.14071642643107e-05*G0_3_3_0 + 8.13472242043809e-05*G0_3_3_1 - 0.000107035821321554*G0_3_3_2 - 0.000162694448408762*G0_3_3_3 - 0.000222634508348832*G0_3_3_4 - 5.99400599400703e-05*G0_3_4_0 + 8.9910089910105e-05*G0_3_4_1 - 1.71257314114484e-05*G0_3_4_2 - 0.000222634508348832*G0_3_4_3 - 0.000822035107749533*G0_3_4_4 - 0.000137005851291589*G0_3_4_5 + 2.14071642643109e-05*G0_3_5_1 - 2.14071642643108e-05*G0_3_5_2 - 0.000137005851291589*G0_3_5_4 + 0.000137005851291589*G0_3_5_5 - 0.00108641358641377*G0_4_0_0 + 7.11788211788332e-05*G0_4_0_1 + 0.000400849150849219*G0_4_0_2 - 5.99400599400703e-05*G0_4_0_3 - 0.00202297702297736*G0_4_0_4 - 0.000224775224775263*G0_4_0_5 + 7.11788211788332e-05*G0_4_1_0 - 3.42514628228971e-05*G0_4_1_1 - 3.31811046096816e-05*G0_4_1_2 + 8.9910089910105e-05*G0_4_1_3 + 0.000470957613814835*G0_4_1_4 + 6.85029256457944e-05*G0_4_1_5 + 0.000400849150849219*G0_4_2_0 - 3.31811046096816e-05*G0_4_2_1 - 0.000346796061081834*G0_4_2_2 - 1.71257314114484e-05*G0_4_2_3 + 0.000890538033395326*G0_4_2_4 + 0.000128442985585864*G0_4_2_5 - 5.99400599400703e-05*G0_4_3_0 + 8.9910089910105e-05*G0_4_3_1 - 1.71257314114484e-05*G0_4_3_2 - 0.000222634508348832*G0_4_3_3 - 0.000822035107749533*G0_4_3_4 - 0.000137005851291589*G0_4_3_5 - 0.00202297702297736*G0_4_4_0 + 0.000470957613814835*G0_4_4_1 + 0.000890538033395326*G0_4_4_2 - 0.000822035107749533*G0_4_4_3 - 0.00959040959041121*G0_4_4_4 - 0.0011988011988014*G0_4_4_5 - 0.000224775224775263*G0_4_5_0 + 6.85029256457943e-05*G0_4_5_1 + 0.000128442985585864*G0_4_5_2 - 0.000137005851291589*G0_4_5_3 - 0.0011988011988014*G0_4_5_4 - 4.12087912087981e-05*G0_5_0_1 + 4.12087912087981e-05*G0_5_0_2 - 0.000224775224775263*G0_5_0_4 + 0.000224775224775262*G0_5_0_5 - 4.12087912087982e-05*G0_5_1_0 + 3.10403881832507e-05*G0_5_1_1 + 2.14071642643109e-05*G0_5_1_3 + 6.85029256457943e-05*G0_5_1_4 - 0.000128442985585864*G0_5_1_5 + 4.12087912087981e-05*G0_5_2_0 - 3.10403881832506e-05*G0_5_2_2 - 2.14071642643108e-05*G0_5_2_3 + 0.000128442985585864*G0_5_2_4 - 6.85029256457944e-05*G0_5_2_5 + 2.14071642643109e-05*G0_5_3_1 - 2.14071642643108e-05*G0_5_3_2 - 0.000137005851291589*G0_5_3_4 + 0.000137005851291588*G0_5_3_5 - 0.000224775224775263*G0_5_4_0 + 6.85029256457943e-05*G0_5_4_1 + 0.000128442985585864*G0_5_4_2 - 0.000137005851291589*G0_5_4_3 - 0.0011988011988014*G0_5_4_4 + 0.000224775224775262*G0_5_5_0 - 0.000128442985585864*G0_5_5_1 - 6.85029256457944e-05*G0_5_5_2 + 0.000137005851291589*G0_5_5_3 + 0.0011988011988014*G0_5_5_5;
    A[64] = A[75] - 0.000786713286713418*G0_0_0_0 + 0.000107303410874857*G0_0_0_1 + 0.000153462608819777*G0_0_0_2 - 1.07035821321553e-05*G0_0_0_3 - 0.000440452404738193*G0_0_0_4 - 0.000496111031825401*G0_0_0_5 + 0.000107303410874857*G0_0_1_0 - 4.61591979449199e-05*G0_0_1_1 + 8.13472242043807e-05*G0_0_1_3 + 0.000173398030540917*G0_0_1_4 + 0.000158948194662507*G0_0_1_5 + 0.000153462608819777*G0_0_2_0 - 0.000153462608819777*G0_0_2_2 - 9.2050806336536e-05*G0_0_2_3 + 9.20508063365361e-05*G0_0_2_5 - 1.07035821321553e-05*G0_0_3_0 + 8.13472242043807e-05*G0_0_3_1 - 9.2050806336536e-05*G0_0_3_2 - 0.000269730269730315*G0_0_3_3 - 0.000325388896817523*G0_0_3_4 - 0.000162694448408762*G0_0_3_5 - 0.000440452404738193*G0_0_4_0 + 0.000173398030540917*G0_0_4_1 - 0.000325388896817523*G0_0_4_3 - 0.0010682174967891*G0_0_4_4 - 0.000530897673754906*G0_0_4_5 - 0.000496111031825401*G0_0_5_0 + 0.000158948194662507*G0_0_5_1 + 9.20508063365361e-05*G0_0_5_2 - 0.000162694448408762*G0_0_5_3 - 0.000530897673754906*G0_0_5_4 - 0.000717140002854409*G0_0_5_5 + 0.000107303410874857*G0_1_0_0 - 4.61591979449199e-05*G0_1_0_1 + 8.13472242043807e-05*G0_1_0_3 + 0.000173398030540917*G0_1_0_4 + 0.000158948194662507*G0_1_0_5 - 4.61591979449199e-05*G0_1_1_0 + 4.615919794492e-05*G0_1_1_2 + 5.56586270872079e-05*G0_1_1_3 - 5.5658627087208e-05*G0_1_1_5 + 4.615919794492e-05*G0_1_2_1 - 0.000107303410874857*G0_1_2_2 - 0.000158948194662507*G0_1_2_3 - 0.000173398030540917*G0_1_2_4 - 8.13472242043808e-05*G0_1_2_5 + 8.13472242043807e-05*G0_1_3_0 + 5.56586270872078e-05*G0_1_3_1 - 0.000158948194662507*G0_1_3_2 - 0.000351077493934696*G0_1_3_3 - 0.000162694448408761*G0_1_3_4 + 0.000173398030540917*G0_1_4_0 - 0.000173398030540917*G0_1_4_2 - 0.000162694448408761*G0_1_4_3 + 0.000162694448408762*G0_1_4_5 + 0.000158948194662507*G0_1_5_0 - 5.5658627087208e-05*G0_1_5_1 - 8.13472242043808e-05*G0_1_5_2 + 0.000162694448408762*G0_1_5_4 + 0.000351077493934696*G0_1_5_5 + 0.000153462608819777*G0_2_0_0 - 0.000153462608819777*G0_2_0_2 - 9.2050806336536e-05*G0_2_0_3 + 9.20508063365361e-05*G0_2_0_5 + 4.615919794492e-05*G0_2_1_1 - 0.000107303410874857*G0_2_1_2 - 0.000158948194662507*G0_2_1_3 - 0.000173398030540917*G0_2_1_4 - 8.13472242043808e-05*G0_2_1_5 - 0.000153462608819777*G0_2_2_0 - 0.000107303410874857*G0_2_2_1 + 0.000786713286713418*G0_2_2_2 + 0.000496111031825401*G0_2_2_3 + 0.000440452404738193*G0_2_2_4 + 1.07035821321554e-05*G0_2_2_5 - 9.2050806336536e-05*G0_2_3_0 - 0.000158948194662507*G0_2_3_1 + 0.000496111031825401*G0_2_3_2 + 0.000717140002854409*G0_2_3_3 + 0.000530897673754906*G0_2_3_4 + 0.000162694448408762*G0_2_3_5 - 0.000173398030540917*G0_2_4_1 + 0.000440452404738193*G0_2_4_2 + 0.000530897673754906*G0_2_4_3 + 0.0010682174967891*G0_2_4_4 + 0.000325388896817523*G0_2_4_5 + 9.20508063365361e-05*G0_2_5_0 - 8.13472242043808e-05*G0_2_5_1 + 1.07035821321554e-05*G0_2_5_2 + 0.000162694448408762*G0_2_5_3 + 0.000325388896817523*G0_2_5_4 + 0.000269730269730315*G0_2_5_5 - 1.07035821321553e-05*G0_3_0_0 + 8.13472242043807e-05*G0_3_0_1 - 9.2050806336536e-05*G0_3_0_2 - 0.000269730269730315*G0_3_0_3 - 0.000325388896817523*G0_3_0_4 - 0.000162694448408762*G0_3_0_5 + 8.13472242043807e-05*G0_3_1_0 + 5.56586270872079e-05*G0_3_1_1 - 0.000158948194662507*G0_3_1_2 - 0.000351077493934696*G0_3_1_3 - 0.000162694448408761*G0_3_1_4 - 9.2050806336536e-05*G0_3_2_0 - 0.000158948194662507*G0_3_2_1 + 0.000496111031825401*G0_3_2_2 + 0.000717140002854409*G0_3_2_3 + 0.000530897673754906*G0_3_2_4 + 0.000162694448408762*G0_3_2_5 - 0.000269730269730315*G0_3_3_0 - 0.000351077493934696*G0_3_3_1 + 0.000717140002854409*G0_3_3_2 + 0.00174682460396776*G0_3_3_3 + 0.000864849436278153*G0_3_3_4 + 0.000214071642643108*G0_3_3_5 - 0.000325388896817523*G0_3_4_0 - 0.000162694448408761*G0_3_4_1 + 0.000530897673754906*G0_3_4_2 + 0.000864849436278153*G0_3_4_3 + 0.000650777793635046*G0_3_4_4 - 0.000162694448408762*G0_3_5_0 + 0.000162694448408762*G0_3_5_2 + 0.000214071642643108*G0_3_5_3 - 0.000214071642643107*G0_3_5_5 - 0.000440452404738193*G0_4_0_0 + 0.000173398030540917*G0_4_0_1 - 0.000325388896817523*G0_4_0_3 - 0.0010682174967891*G0_4_0_4 - 0.000530897673754906*G0_4_0_5 + 0.000173398030540917*G0_4_1_0 - 0.000173398030540917*G0_4_1_2 - 0.000162694448408761*G0_4_1_3 + 0.000162694448408761*G0_4_1_5 - 0.000173398030540917*G0_4_2_1 + 0.000440452404738193*G0_4_2_2 + 0.000530897673754906*G0_4_2_3 + 0.0010682174967891*G0_4_2_4 + 0.000325388896817523*G0_4_2_5 - 0.000325388896817523*G0_4_3_0 - 0.000162694448408761*G0_4_3_1 + 0.000530897673754906*G0_4_3_2 + 0.000864849436278153*G0_4_3_3 + 0.000650777793635046*G0_4_3_4 - 0.0010682174967891*G0_4_4_0 + 0.0010682174967891*G0_4_4_2 + 0.000650777793635046*G0_4_4_3 - 0.000650777793635045*G0_4_4_5 - 0.000530897673754906*G0_4_5_0 + 0.000162694448408762*G0_4_5_1 + 0.000325388896817523*G0_4_5_2 - 0.000650777793635045*G0_4_5_4 - 0.000864849436278153*G0_4_5_5 - 0.000496111031825401*G0_5_0_0 + 0.000158948194662507*G0_5_0_1 + 9.20508063365361e-05*G0_5_0_2 - 0.000162694448408762*G0_5_0_3 - 0.000530897673754906*G0_5_0_4 - 0.000717140002854409*G0_5_0_5 + 0.000158948194662507*G0_5_1_0 - 5.5658627087208e-05*G0_5_1_1 - 8.13472242043808e-05*G0_5_1_2 + 0.000162694448408762*G0_5_1_4 + 0.000351077493934696*G0_5_1_5 + 9.20508063365361e-05*G0_5_2_0 - 8.13472242043807e-05*G0_5_2_1 + 1.07035821321554e-05*G0_5_2_2 + 0.000162694448408762*G0_5_2_3 + 0.000325388896817523*G0_5_2_4 + 0.000269730269730315*G0_5_2_5 - 0.000162694448408762*G0_5_3_0 + 0.000162694448408762*G0_5_3_2 + 0.000214071642643108*G0_5_3_3 - 0.000214071642643107*G0_5_3_5 - 0.000530897673754906*G0_5_4_0 + 0.000162694448408762*G0_5_4_1 + 0.000325388896817523*G0_5_4_2 - 0.000650777793635045*G0_5_4_4 - 0.000864849436278153*G0_5_4_5 - 0.000717140002854409*G0_5_5_0 + 0.000351077493934696*G0_5_5_1 + 0.000269730269730315*G0_5_5_2 - 0.000214071642643107*G0_5_5_3 - 0.000864849436278153*G0_5_5_4 - 0.00174682460396775*G0_5_5_5;
    A[54] = A[45];
    A[83] = A[75] - 0.000786713286713418*G0_0_0_0 + 0.000153462608819777*G0_0_0_1 + 0.000107303410874857*G0_0_0_2 - 1.07035821321554e-05*G0_0_0_3 - 0.000496111031825401*G0_0_0_4 - 0.000440452404738193*G0_0_0_5 + 0.000153462608819777*G0_0_1_0 - 0.000153462608819777*G0_0_1_1 - 9.20508063365361e-05*G0_0_1_3 + 9.2050806336536e-05*G0_0_1_4 + 0.000107303410874857*G0_0_2_0 - 4.615919794492e-05*G0_0_2_2 + 8.13472242043808e-05*G0_0_2_3 + 0.000158948194662507*G0_0_2_4 + 0.000173398030540917*G0_0_2_5 - 1.07035821321554e-05*G0_0_3_0 - 9.20508063365361e-05*G0_0_3_1 + 8.13472242043808e-05*G0_0_3_2 - 0.000269730269730315*G0_0_3_3 - 0.000162694448408761*G0_0_3_4 - 0.000325388896817523*G0_0_3_5 - 0.000496111031825401*G0_0_4_0 + 9.2050806336536e-05*G0_0_4_1 + 0.000158948194662507*G0_0_4_2 - 0.000162694448408761*G0_0_4_3 - 0.000717140002854409*G0_0_4_4 - 0.000530897673754906*G0_0_4_5 - 0.000440452404738193*G0_0_5_0 + 0.000173398030540917*G0_0_5_2 - 0.000325388896817523*G0_0_5_3 - 0.000530897673754906*G0_0_5_4 - 0.0010682174967891*G0_0_5_5 + 0.000153462608819777*G0_1_0_0 - 0.000153462608819778*G0_1_0_1 - 9.20508063365361e-05*G0_1_0_3 + 9.2050806336536e-05*G0_1_0_4 - 0.000153462608819778*G0_1_1_0 + 0.00078671328671342*G0_1_1_1 - 0.000107303410874858*G0_1_1_2 + 0.000496111031825401*G0_1_1_3 + 1.07035821321553e-05*G0_1_1_4 + 0.000440452404738193*G0_1_1_5 - 0.000107303410874858*G0_1_2_1 + 4.61591979449201e-05*G0_1_2_2 - 0.000158948194662507*G0_1_2_3 - 8.13472242043807e-05*G0_1_2_4 - 0.000173398030540917*G0_1_2_5 - 9.20508063365361e-05*G0_1_3_0 + 0.000496111031825401*G0_1_3_1 - 0.000158948194662507*G0_1_3_2 + 0.00071714000285441*G0_1_3_3 + 0.000162694448408762*G0_1_3_4 + 0.000530897673754906*G0_1_3_5 + 9.2050806336536e-05*G0_1_4_0 + 1.07035821321553e-05*G0_1_4_1 - 8.13472242043807e-05*G0_1_4_2 + 0.000162694448408762*G0_1_4_3 + 0.000269730269730315*G0_1_4_4 + 0.000325388896817523*G0_1_4_5 + 0.000440452404738193*G0_1_5_1 - 0.000173398030540917*G0_1_5_2 + 0.000530897673754906*G0_1_5_3 + 0.000325388896817523*G0_1_5_4 + 0.0010682174967891*G0_1_5_5 + 0.000107303410874857*G0_2_0_0 - 4.615919794492e-05*G0_2_0_2 + 8.13472242043808e-05*G0_2_0_3 + 0.000158948194662507*G0_2_0_4 + 0.000173398030540917*G0_2_0_5 - 0.000107303410874858*G0_2_1_1 + 4.61591979449201e-05*G0_2_1_2 - 0.000158948194662507*G0_2_1_3 - 8.13472242043807e-05*G0_2_1_4 - 0.000173398030540917*G0_2_1_5 - 4.615919794492e-05*G0_2_2_0 + 4.61591979449201e-05*G0_2_2_1 + 5.56586270872078e-05*G0_2_2_3 - 5.56586270872081e-05*G0_2_2_4 + 8.13472242043808e-05*G0_2_3_0 - 0.000158948194662507*G0_2_3_1 + 5.56586270872078e-05*G0_2_3_2 - 0.000351077493934696*G0_2_3_3 - 0.000162694448408762*G0_2_3_5 + 0.000158948194662507*G0_2_4_0 - 8.13472242043807e-05*G0_2_4_1 - 5.56586270872081e-05*G0_2_4_2 + 0.000351077493934696*G0_2_4_4 + 0.000162694448408761*G0_2_4_5 + 0.000173398030540917*G0_2_5_0 - 0.000173398030540917*G0_2_5_1 - 0.000162694448408762*G0_2_5_3 + 0.000162694448408761*G0_2_5_4 - 1.07035821321554e-05*G0_3_0_0 - 9.20508063365361e-05*G0_3_0_1 + 8.13472242043808e-05*G0_3_0_2 - 0.000269730269730315*G0_3_0_3 - 0.000162694448408761*G0_3_0_4 - 0.000325388896817523*G0_3_0_5 - 9.20508063365361e-05*G0_3_1_0 + 0.000496111031825401*G0_3_1_1 - 0.000158948194662507*G0_3_1_2 + 0.00071714000285441*G0_3_1_3 + 0.000162694448408762*G0_3_1_4 + 0.000530897673754906*G0_3_1_5 + 8.13472242043808e-05*G0_3_2_0 - 0.000158948194662507*G0_3_2_1 + 5.56586270872078e-05*G0_3_2_2 - 0.000351077493934696*G0_3_2_3 - 0.000162694448408761*G0_3_2_5 - 0.000269730269730315*G0_3_3_0 + 0.00071714000285441*G0_3_3_1 - 0.000351077493934696*G0_3_3_2 + 0.00174682460396776*G0_3_3_3 + 0.000214071642643107*G0_3_3_4 + 0.000864849436278154*G0_3_3_5 - 0.000162694448408761*G0_3_4_0 + 0.000162694448408762*G0_3_4_1 + 0.000214071642643107*G0_3_4_3 - 0.000214071642643108*G0_3_4_4 - 0.000325388896817523*G0_3_5_0 + 0.000530897673754906*G0_3_5_1 - 0.000162694448408761*G0_3_5_2 + 0.000864849436278154*G0_3_5_3 + 0.000650777793635046*G0_3_5_5 - 0.000496111031825401*G0_4_0_0 + 9.2050806336536e-05*G0_4_0_1 + 0.000158948194662507*G0_4_0_2 - 0.000162694448408761*G0_4_0_3 - 0.000717140002854409*G0_4_0_4 - 0.000530897673754906*G0_4_0_5 + 9.2050806336536e-05*G0_4_1_0 + 1.07035821321553e-05*G0_4_1_1 - 8.13472242043807e-05*G0_4_1_2 + 0.000162694448408762*G0_4_1_3 + 0.000269730269730315*G0_4_1_4 + 0.000325388896817523*G0_4_1_5 + 0.000158948194662507*G0_4_2_0 - 8.13472242043807e-05*G0_4_2_1 - 5.56586270872081e-05*G0_4_2_2 + 0.000351077493934695*G0_4_2_4 + 0.000162694448408761*G0_4_2_5 - 0.000162694448408761*G0_4_3_0 + 0.000162694448408762*G0_4_3_1 + 0.000214071642643107*G0_4_3_3 - 0.000214071642643108*G0_4_3_4 - 0.000717140002854409*G0_4_4_0 + 0.000269730269730315*G0_4_4_1 + 0.000351077493934696*G0_4_4_2 - 0.000214071642643108*G0_4_4_3 - 0.00174682460396775*G0_4_4_4 - 0.000864849436278153*G0_4_4_5 - 0.000530897673754906*G0_4_5_0 + 0.000325388896817523*G0_4_5_1 + 0.000162694448408761*G0_4_5_2 - 0.000864849436278153*G0_4_5_4 - 0.000650777793635046*G0_4_5_5 - 0.000440452404738193*G0_5_0_0 + 0.000173398030540917*G0_5_0_2 - 0.000325388896817523*G0_5_0_3 - 0.000530897673754906*G0_5_0_4 - 0.0010682174967891*G0_5_0_5 + 0.000440452404738193*G0_5_1_1 - 0.000173398030540917*G0_5_1_2 + 0.000530897673754906*G0_5_1_3 + 0.000325388896817523*G0_5_1_4 + 0.0010682174967891*G0_5_1_5 + 0.000173398030540917*G0_5_2_0 - 0.000173398030540917*G0_5_2_1 - 0.000162694448408762*G0_5_2_3 + 0.000162694448408761*G0_5_2_4 - 0.000325388896817523*G0_5_3_0 + 0.000530897673754906*G0_5_3_1 - 0.000162694448408762*G0_5_3_2 + 0.000864849436278154*G0_5_3_3 + 0.000650777793635046*G0_5_3_5 - 0.000530897673754906*G0_5_4_0 + 0.000325388896817523*G0_5_4_1 + 0.000162694448408761*G0_5_4_2 - 0.000864849436278153*G0_5_4_4 - 0.000650777793635046*G0_5_4_5 - 0.0010682174967891*G0_5_5_0 + 0.0010682174967891*G0_5_5_1 + 0.000650777793635046*G0_5_5_3 - 0.000650777793635046*G0_5_5_4;
    A[46] = A[64];
    A[57] = A[75];
    A[98] = A[89];
    A[39] = A[93];
    A[96] = A[69];
    A[65] = A[36] - 0.000651848151848262*G0_0_0_0 + 6.59608248894074e-05*G0_0_0_1 + 0.000106500642214946*G0_0_0_2 - 3.4786641929505e-05*G0_0_0_3 - 0.000526616240902045*G0_0_0_4 - 0.000237619523333849*G0_0_0_5 + 6.59608248894074e-05*G0_0_1_0 - 2.46182389039573e-05*G0_0_1_1 - 1.52526045383214e-05*G0_0_1_2 + 8.29527615242041e-05*G0_0_1_4 + 4.92364778079146e-05*G0_0_1_5 + 0.000106500642214946*G0_0_2_0 - 1.52526045383214e-05*G0_0_2_1 + 1.31118881118904e-05*G0_0_2_2 + 2.62237762237807e-05*G0_0_2_3 + 0.000183566433566465*G0_0_2_4 + 7.54602540316953e-05*G0_0_2_5 - 3.4786641929505e-05*G0_0_3_0 + 2.62237762237807e-05*G0_0_3_2 - 8.56286570572422e-06*G0_0_3_3 - 9.63322391893983e-05*G0_0_3_4 - 8.13472242043808e-05*G0_0_3_5 - 0.000526616240902045*G0_0_4_0 + 8.29527615242041e-05*G0_0_4_1 + 0.000183566433566465*G0_0_4_2 - 9.63322391893983e-05*G0_0_4_3 - 0.000787783644926635*G0_0_4_4 - 0.000316826031111799*G0_0_4_5 - 0.000237619523333849*G0_0_5_0 + 4.92364778079147e-05*G0_0_5_1 + 7.54602540316953e-05*G0_0_5_2 - 8.13472242043808e-05*G0_0_5_3 - 0.000316826031111799*G0_0_5_4 - 0.000316826031111799*G0_0_5_5 + 6.59608248894074e-05*G0_1_0_0 - 2.46182389039573e-05*G0_1_0_1 - 1.52526045383214e-05*G0_1_0_2 + 8.29527615242041e-05*G0_1_0_4 + 4.92364778079146e-05*G0_1_0_5 - 2.46182389039573e-05*G0_1_1_0 + 4.8567503924655e-05*G0_1_1_1 - 2.14071642643108e-06*G0_1_1_2 + 3.47866419295049e-05*G0_1_1_3 - 4.28143285286221e-06*G0_1_1_4 + 8.56286570572429e-06*G0_1_1_5 - 1.52526045383214e-05*G0_1_2_0 - 2.14071642643108e-06*G0_1_2_1 + 1.31118881118903e-05*G0_1_2_2 - 2.62237762237806e-05*G0_1_2_3 - 2.62237762237807e-05*G0_1_2_4 - 4.06736121021904e-05*G0_1_2_5 + 3.47866419295049e-05*G0_1_3_1 - 2.62237762237806e-05*G0_1_3_2 + 9.63322391893983e-05*G0_1_3_3 + 8.56286570572441e-06*G0_1_3_4 + 8.13472242043808e-05*G0_1_3_5 + 8.29527615242041e-05*G0_1_4_0 - 4.28143285286221e-06*G0_1_4_1 - 2.62237762237807e-05*G0_1_4_2 + 8.5628657057244e-06*G0_1_4_3 - 5.35179106607764e-05*G0_1_4_4 + 8.99100899101052e-05*G0_1_4_5 + 4.92364778079146e-05*G0_1_5_0 + 8.56286570572429e-06*G0_1_5_1 - 4.06736121021904e-05*G0_1_5_2 + 8.13472242043808e-05*G0_1_5_3 + 8.99100899101052e-05*G0_1_5_4 + 0.000201227344084521*G0_1_5_5 + 0.000106500642214946*G0_2_0_0 - 1.52526045383214e-05*G0_2_0_1 + 1.31118881118904e-05*G0_2_0_2 + 2.62237762237807e-05*G0_2_0_3 + 0.000183566433566465*G0_2_0_4 + 7.54602540316954e-05*G0_2_0_5 - 1.52526045383214e-05*G0_2_1_0 - 2.14071642643108e-06*G0_2_1_1 + 1.31118881118903e-05*G0_2_1_2 - 2.62237762237806e-05*G0_2_1_3 - 2.62237762237807e-05*G0_2_1_4 - 4.06736121021904e-05*G0_2_1_5 + 1.31118881118904e-05*G0_2_2_0 + 1.31118881118903e-05*G0_2_2_1 - 0.000224775224775263*G0_2_2_2 - 0.000262237762237807*G0_2_2_4 - 2.62237762237807e-05*G0_2_2_5 + 2.62237762237807e-05*G0_2_3_0 - 2.62237762237806e-05*G0_2_3_1 + 0.000183566433566465*G0_2_4_0 - 2.62237762237807e-05*G0_2_4_1 - 0.000262237762237807*G0_2_4_2 + 0.000104895104895123*G0_2_4_5 + 7.54602540316953e-05*G0_2_5_0 - 4.06736121021904e-05*G0_2_5_1 - 2.62237762237807e-05*G0_2_5_2 + 0.000104895104895123*G0_2_5_4 + 8.13472242043808e-05*G0_2_5_5 - 3.4786641929505e-05*G0_3_0_0 + 2.62237762237807e-05*G0_3_0_2 - 8.56286570572419e-06*G0_3_0_3 - 9.63322391893983e-05*G0_3_0_4 - 8.13472242043808e-05*G0_3_0_5 + 3.4786641929505e-05*G0_3_1_1 - 2.62237762237806e-05*G0_3_1_2 + 9.63322391893983e-05*G0_3_1_3 + 8.56286570572441e-06*G0_3_1_4 + 8.13472242043808e-05*G0_3_1_5 + 2.62237762237807e-05*G0_3_2_0 - 2.62237762237807e-05*G0_3_2_1 - 8.56286570572419e-06*G0_3_3_0 + 9.63322391893982e-05*G0_3_3_1 - 0.000299700299700352*G0_3_3_3 + 1.71257314114483e-05*G0_3_3_5 - 9.63322391893983e-05*G0_3_4_0 + 8.56286570572441e-06*G0_3_4_1 + 0.00029970029970035*G0_3_4_4 - 1.71257314114488e-05*G0_3_4_5 - 8.13472242043808e-05*G0_3_5_0 + 8.13472242043808e-05*G0_3_5_1 + 1.71257314114483e-05*G0_3_5_3 - 1.71257314114488e-05*G0_3_5_4 - 0.000526616240902045*G0_4_0_0 + 8.29527615242041e-05*G0_4_0_1 + 0.000183566433566465*G0_4_0_2 - 9.63322391893983e-05*G0_4_0_3 - 0.000787783644926635*G0_4_0_4 - 0.000316826031111799*G0_4_0_5 + 8.29527615242041e-05*G0_4_1_0 - 4.28143285286221e-06*G0_4_1_1 - 2.62237762237807e-05*G0_4_1_2 + 8.56286570572441e-06*G0_4_1_3 - 5.35179106607764e-05*G0_4_1_4 + 8.99100899101052e-05*G0_4_1_5 + 0.000183566433566465*G0_4_2_0 - 2.62237762237807e-05*G0_4_2_1 - 0.000262237762237807*G0_4_2_2 + 0.000104895104895123*G0_4_2_5 - 9.63322391893983e-05*G0_4_3_0 + 8.5628657057244e-06*G0_4_3_1 + 0.00029970029970035*G0_4_3_4 - 1.71257314114488e-05*G0_4_3_5 - 0.000787783644926635*G0_4_4_0 - 5.35179106607764e-05*G0_4_4_1 + 0.00029970029970035*G0_4_4_3 + 0.0023976023976028*G0_4_4_4 - 0.000102754388468692*G0_4_4_5 - 0.000316826031111799*G0_4_5_0 + 8.99100899101052e-05*G0_4_5_1 + 0.000104895104895123*G0_4_5_2 - 1.71257314114488e-05*G0_4_5_3 - 0.000102754388468692*G0_4_5_4 - 0.000342514628228972*G0_4_5_5 - 0.000237619523333849*G0_5_0_0 + 4.92364778079147e-05*G0_5_0_1 + 7.54602540316954e-05*G0_5_0_2 - 8.13472242043808e-05*G0_5_0_3 - 0.000316826031111799*G0_5_0_4 - 0.000316826031111799*G0_5_0_5 + 4.92364778079147e-05*G0_5_1_0 + 8.56286570572429e-06*G0_5_1_1 - 4.06736121021904e-05*G0_5_1_2 + 8.13472242043808e-05*G0_5_1_3 + 8.99100899101052e-05*G0_5_1_4 + 0.000201227344084521*G0_5_1_5 + 7.54602540316953e-05*G0_5_2_0 - 4.06736121021904e-05*G0_5_2_1 - 2.62237762237807e-05*G0_5_2_2 + 0.000104895104895123*G0_5_2_4 + 8.13472242043808e-05*G0_5_2_5 - 8.13472242043808e-05*G0_5_3_0 + 8.13472242043808e-05*G0_5_3_1 + 1.71257314114483e-05*G0_5_3_3 - 1.71257314114488e-05*G0_5_3_4 - 0.000316826031111799*G0_5_4_0 + 8.99100899101052e-05*G0_5_4_1 + 0.000104895104895123*G0_5_4_2 - 1.71257314114488e-05*G0_5_4_3 - 0.000102754388468692*G0_5_4_4 - 0.000342514628228972*G0_5_4_5 - 0.000316826031111799*G0_5_5_0 + 0.000201227344084521*G0_5_5_1 + 8.13472242043808e-05*G0_5_5_2 - 0.000342514628228972*G0_5_5_4 - 0.000402454688169042*G0_5_5_5;
    A[85] = A[65] + 0.000224775224775264*G0_0_0_0 - 1.31118881118904e-05*G0_0_0_1 - 1.31118881118905e-05*G0_0_0_2 + 2.62237762237807e-05*G0_0_0_3 + 0.000262237762237807*G0_0_0_4 - 1.31118881118904e-05*G0_0_1_0 + 2.14071642643117e-06*G0_0_1_1 + 1.52526045383214e-05*G0_0_1_2 + 4.06736121021904e-05*G0_0_1_3 + 2.62237762237806e-05*G0_0_1_4 + 2.62237762237807e-05*G0_0_1_5 - 1.31118881118905e-05*G0_0_2_0 + 1.52526045383214e-05*G0_0_2_1 - 0.000106500642214946*G0_0_2_2 - 7.54602540316953e-05*G0_0_2_3 - 0.000183566433566465*G0_0_2_4 - 2.62237762237807e-05*G0_0_2_5 + 2.62237762237807e-05*G0_0_3_0 + 4.06736121021904e-05*G0_0_3_1 - 7.54602540316953e-05*G0_0_3_2 - 8.13472242043808e-05*G0_0_3_3 - 0.000104895104895123*G0_0_3_4 + 0.000262237762237807*G0_0_4_0 + 2.62237762237806e-05*G0_0_4_1 - 0.000183566433566465*G0_0_4_2 - 0.000104895104895123*G0_0_4_3 + 2.62237762237807e-05*G0_0_5_1 - 2.62237762237807e-05*G0_0_5_2 - 1.31118881118904e-05*G0_1_0_0 + 2.14071642643117e-06*G0_1_0_1 + 1.52526045383214e-05*G0_1_0_2 + 4.06736121021904e-05*G0_1_0_3 + 2.62237762237806e-05*G0_1_0_4 + 2.62237762237807e-05*G0_1_0_5 + 2.14071642643116e-06*G0_1_1_0 - 4.85675039246556e-05*G0_1_1_1 + 2.46182389039574e-05*G0_1_1_2 - 8.56286570572439e-06*G0_1_1_3 + 4.28143285286221e-06*G0_1_1_4 - 3.47866419295053e-05*G0_1_1_5 + 1.52526045383214e-05*G0_1_2_0 + 2.46182389039574e-05*G0_1_2_1 - 6.59608248894073e-05*G0_1_2_2 - 4.92364778079146e-05*G0_1_2_3 - 8.2952761524204e-05*G0_1_2_4 + 4.06736121021904e-05*G0_1_3_0 - 8.5628657057244e-06*G0_1_3_1 - 4.92364778079146e-05*G0_1_3_2 - 0.000201227344084521*G0_1_3_3 - 8.99100899101052e-05*G0_1_3_4 - 8.13472242043809e-05*G0_1_3_5 + 2.62237762237806e-05*G0_1_4_0 + 4.28143285286221e-06*G0_1_4_1 - 8.2952761524204e-05*G0_1_4_2 - 8.99100899101051e-05*G0_1_4_3 + 5.35179106607763e-05*G0_1_4_4 - 8.56286570572454e-06*G0_1_4_5 + 2.62237762237807e-05*G0_1_5_0 - 3.47866419295053e-05*G0_1_5_1 - 8.13472242043809e-05*G0_1_5_3 - 8.56286570572454e-06*G0_1_5_4 - 9.63322391893989e-05*G0_1_5_5 - 1.31118881118905e-05*G0_2_0_0 + 1.52526045383214e-05*G0_2_0_1 - 0.000106500642214946*G0_2_0_2 - 7.54602540316953e-05*G0_2_0_3 - 0.000183566433566465*G0_2_0_4 - 2.62237762237807e-05*G0_2_0_5 + 1.52526045383214e-05*G0_2_1_0 + 2.46182389039573e-05*G0_2_1_1 - 6.59608248894073e-05*G0_2_1_2 - 4.92364778079146e-05*G0_2_1_3 - 8.2952761524204e-05*G0_2_1_4 - 0.000106500642214946*G0_2_2_0 - 6.59608248894073e-05*G0_2_2_1 + 0.000651848151848262*G0_2_2_2 + 0.000237619523333849*G0_2_2_3 + 0.000526616240902044*G0_2_2_4 + 3.4786641929505e-05*G0_2_2_5 - 7.54602540316953e-05*G0_2_3_0 - 4.92364778079146e-05*G0_2_3_1 + 0.000237619523333849*G0_2_3_2 + 0.000316826031111799*G0_2_3_3 + 0.000316826031111799*G0_2_3_4 + 8.13472242043808e-05*G0_2_3_5 - 0.000183566433566465*G0_2_4_0 - 8.2952761524204e-05*G0_2_4_1 + 0.000526616240902044*G0_2_4_2 + 0.000316826031111799*G0_2_4_3 + 0.000787783644926635*G0_2_4_4 + 9.63322391893982e-05*G0_2_4_5 - 2.62237762237807e-05*G0_2_5_0 + 3.4786641929505e-05*G0_2_5_2 + 8.13472242043808e-05*G0_2_5_3 + 9.63322391893982e-05*G0_2_5_4 + 8.56286570572426e-06*G0_2_5_5 + 2.62237762237807e-05*G0_3_0_0 + 4.06736121021904e-05*G0_3_0_1 - 7.54602540316953e-05*G0_3_0_2 - 8.13472242043808e-05*G0_3_0_3 - 0.000104895104895123*G0_3_0_4 + 4.06736121021904e-05*G0_3_1_0 - 8.5628657057244e-06*G0_3_1_1 - 4.92364778079146e-05*G0_3_1_2 - 0.000201227344084521*G0_3_1_3 - 8.99100899101052e-05*G0_3_1_4 - 8.13472242043809e-05*G0_3_1_5 - 7.54602540316953e-05*G0_3_2_0 - 4.92364778079146e-05*G0_3_2_1 + 0.000237619523333849*G0_3_2_2 + 0.000316826031111799*G0_3_2_3 + 0.000316826031111799*G0_3_2_4 + 8.13472242043808e-05*G0_3_2_5 - 8.13472242043808e-05*G0_3_3_0 - 0.000201227344084521*G0_3_3_1 + 0.000316826031111799*G0_3_3_2 + 0.000402454688169042*G0_3_3_3 + 0.000342514628228972*G0_3_3_4 - 0.000104895104895123*G0_3_4_0 - 8.99100899101052e-05*G0_3_4_1 + 0.000316826031111799*G0_3_4_2 + 0.000342514628228972*G0_3_4_3 + 0.000102754388468692*G0_3_4_4 + 1.7125731411449e-05*G0_3_4_5 - 8.13472242043809e-05*G0_3_5_1 + 8.13472242043808e-05*G0_3_5_2 + 1.7125731411449e-05*G0_3_5_4 - 1.71257314114487e-05*G0_3_5_5 + 0.000262237762237807*G0_4_0_0 + 2.62237762237806e-05*G0_4_0_1 - 0.000183566433566465*G0_4_0_2 - 0.000104895104895123*G0_4_0_3 + 2.62237762237806e-05*G0_4_1_0 + 4.28143285286221e-06*G0_4_1_1 - 8.2952761524204e-05*G0_4_1_2 - 8.99100899101052e-05*G0_4_1_3 + 5.35179106607762e-05*G0_4_1_4 - 8.56286570572454e-06*G0_4_1_5 - 0.000183566433566465*G0_4_2_0 - 8.2952761524204e-05*G0_4_2_1 + 0.000526616240902044*G0_4_2_2 + 0.000316826031111799*G0_4_2_3 + 0.000787783644926635*G0_4_2_4 + 9.63322391893982e-05*G0_4_2_5 - 0.000104895104895123*G0_4_3_0 - 8.99100899101052e-05*G0_4_3_1 + 0.000316826031111799*G0_4_3_2 + 0.000342514628228972*G0_4_3_3 + 0.000102754388468692*G0_4_3_4 + 1.7125731411449e-05*G0_4_3_5 + 5.35179106607763e-05*G0_4_4_1 + 0.000787783644926635*G0_4_4_2 + 0.000102754388468692*G0_4_4_3 - 0.0023976023976028*G0_4_4_4 - 0.000299700299700349*G0_4_4_5 - 8.56286570572454e-06*G0_4_5_1 + 9.63322391893982e-05*G0_4_5_2 + 1.7125731411449e-05*G0_4_5_3 - 0.000299700299700349*G0_4_5_4 + 2.62237762237807e-05*G0_5_0_1 - 2.62237762237807e-05*G0_5_0_2 + 2.62237762237807e-05*G0_5_1_0 - 3.47866419295053e-05*G0_5_1_1 - 8.13472242043809e-05*G0_5_1_3 - 8.56286570572454e-06*G0_5_1_4 - 9.63322391893989e-05*G0_5_1_5 - 2.62237762237807e-05*G0_5_2_0 + 3.4786641929505e-05*G0_5_2_2 + 8.13472242043808e-05*G0_5_2_3 + 9.63322391893982e-05*G0_5_2_4 + 8.56286570572425e-06*G0_5_2_5 - 8.13472242043809e-05*G0_5_3_1 + 8.13472242043808e-05*G0_5_3_2 + 1.7125731411449e-05*G0_5_3_4 - 1.71257314114487e-05*G0_5_3_5 - 8.56286570572454e-06*G0_5_4_1 + 9.63322391893982e-05*G0_5_4_2 + 1.7125731411449e-05*G0_5_4_3 - 0.000299700299700349*G0_5_4_4 - 9.63322391893989e-05*G0_5_5_1 + 8.56286570572425e-06*G0_5_5_2 - 1.71257314114487e-05*G0_5_5_3 + 0.000299700299700349*G0_5_5_5;
    A[58] = A[85];
    A[67] = A[85] + 1.68581418581448e-05*G0_0_0_1 - 1.68581418581446e-05*G0_0_0_2 + 5.61938061938154e-05*G0_0_0_4 - 5.61938061938157e-05*G0_0_0_5 + 1.68581418581448e-05*G0_0_1_0 - 1.64567575281889e-05*G0_0_1_1 - 2.56885971171729e-05*G0_0_1_3 - 1.92664478378796e-05*G0_0_1_4 + 8.0276865991164e-06*G0_0_1_5 - 1.68581418581446e-05*G0_0_2_0 + 1.64567575281889e-05*G0_0_2_2 + 2.56885971171729e-05*G0_0_2_3 - 8.02768659911633e-06*G0_0_2_4 + 1.92664478378797e-05*G0_0_2_5 - 2.56885971171729e-05*G0_0_3_1 + 2.56885971171729e-05*G0_0_3_2 + 3.85328956757594e-05*G0_0_3_4 - 3.85328956757594e-05*G0_0_3_5 + 5.61938061938154e-05*G0_0_4_0 - 1.92664478378796e-05*G0_0_4_1 - 8.02768659911634e-06*G0_0_4_2 + 3.85328956757594e-05*G0_0_4_3 + 0.000224775224775263*G0_0_4_4 - 5.61938061938157e-05*G0_0_5_0 + 8.02768659911641e-06*G0_0_5_1 + 1.92664478378797e-05*G0_0_5_2 - 3.85328956757594e-05*G0_0_5_3 - 0.000224775224775263*G0_0_5_5 + 1.68581418581448e-05*G0_1_0_0 - 1.64567575281889e-05*G0_1_0_1 - 2.56885971171729e-05*G0_1_0_3 - 1.92664478378796e-05*G0_1_0_4 + 8.0276865991164e-06*G0_1_0_5 - 1.64567575281889e-05*G0_1_1_0 + 6.74325674325794e-05*G0_1_1_1 - 1.52526045383214e-05*G0_1_1_2 + 3.53218210361128e-05*G0_1_1_3 + 6.42214927929318e-06*G0_1_1_4 + 3.21107463964665e-05*G0_1_1_5 - 1.52526045383214e-05*G0_1_2_1 + 1.52526045383214e-05*G0_1_2_2 + 2.56885971171729e-05*G0_1_2_4 - 2.56885971171729e-05*G0_1_2_5 - 2.56885971171729e-05*G0_1_3_0 + 3.53218210361128e-05*G0_1_3_1 + 0.000141287284144451*G0_1_3_3 + 3.85328956757594e-05*G0_1_3_4 + 0.000102754388468692*G0_1_3_5 - 1.92664478378796e-05*G0_1_4_0 + 6.42214927929318e-06*G0_1_4_1 + 2.56885971171729e-05*G0_1_4_2 + 3.85328956757594e-05*G0_1_4_3 - 8.99100899101046e-05*G0_1_4_4 + 3.85328956757595e-05*G0_1_4_5 + 8.02768659911638e-06*G0_1_5_0 + 3.21107463964665e-05*G0_1_5_1 - 2.56885971171729e-05*G0_1_5_2 + 0.000102754388468692*G0_1_5_3 + 3.85328956757595e-05*G0_1_5_4 + 0.000282574568288902*G0_1_5_5 - 1.68581418581446e-05*G0_2_0_0 + 1.64567575281889e-05*G0_2_0_2 + 2.56885971171729e-05*G0_2_0_3 - 8.02768659911632e-06*G0_2_0_4 + 1.92664478378797e-05*G0_2_0_5 - 1.52526045383214e-05*G0_2_1_1 + 1.52526045383214e-05*G0_2_1_2 + 2.56885971171729e-05*G0_2_1_4 - 2.56885971171729e-05*G0_2_1_5 + 1.64567575281889e-05*G0_2_2_0 + 1.52526045383214e-05*G0_2_2_1 - 6.7432567432579e-05*G0_2_2_2 - 3.53218210361128e-05*G0_2_2_3 - 3.21107463964664e-05*G0_2_2_4 - 6.42214927929327e-06*G0_2_2_5 + 2.56885971171729e-05*G0_2_3_0 - 3.53218210361128e-05*G0_2_3_2 - 0.000141287284144451*G0_2_3_3 - 0.000102754388468692*G0_2_3_4 - 3.85328956757593e-05*G0_2_3_5 - 8.02768659911632e-06*G0_2_4_0 + 2.56885971171729e-05*G0_2_4_1 - 3.21107463964663e-05*G0_2_4_2 - 0.000102754388468692*G0_2_4_3 - 0.000282574568288902*G0_2_4_4 - 3.85328956757592e-05*G0_2_4_5 + 1.92664478378797e-05*G0_2_5_0 - 2.56885971171729e-05*G0_2_5_1 - 6.42214927929326e-06*G0_2_5_2 - 3.85328956757594e-05*G0_2_5_3 - 3.85328956757592e-05*G0_2_5_4 + 8.9910089910105e-05*G0_2_5_5 - 2.56885971171729e-05*G0_3_0_1 + 2.56885971171729e-05*G0_3_0_2 + 3.85328956757594e-05*G0_3_0_4 - 3.85328956757594e-05*G0_3_0_5 - 2.56885971171729e-05*G0_3_1_0 + 3.53218210361128e-05*G0_3_1_1 + 0.000141287284144451*G0_3_1_3 + 3.85328956757594e-05*G0_3_1_4 + 0.000102754388468692*G0_3_1_5 + 2.56885971171729e-05*G0_3_2_0 - 3.53218210361128e-05*G0_3_2_2 - 0.000141287284144451*G0_3_2_3 - 0.000102754388468692*G0_3_2_4 - 3.85328956757593e-05*G0_3_2_5 + 0.000141287284144451*G0_3_3_1 - 0.000141287284144451*G0_3_3_2 - 7.70657913515189e-05*G0_3_3_4 + 7.70657913515186e-05*G0_3_3_5 + 3.85328956757594e-05*G0_3_4_0 + 3.85328956757594e-05*G0_3_4_1 - 0.000102754388468692*G0_3_4_2 - 7.70657913515189e-05*G0_3_4_3 + 0.000102754388468691*G0_3_4_4 - 3.85328956757594e-05*G0_3_5_0 + 0.000102754388468692*G0_3_5_1 - 3.85328956757593e-05*G0_3_5_2 + 7.70657913515186e-05*G0_3_5_3 - 0.000102754388468691*G0_3_5_5 + 5.61938061938153e-05*G0_4_0_0 - 1.92664478378796e-05*G0_4_0_1 - 8.02768659911632e-06*G0_4_0_2 + 3.85328956757594e-05*G0_4_0_3 + 0.000224775224775263*G0_4_0_4 - 1.92664478378796e-05*G0_4_1_0 + 6.42214927929318e-06*G0_4_1_1 + 2.56885971171729e-05*G0_4_1_2 + 3.85328956757594e-05*G0_4_1_3 - 8.99100899101046e-05*G0_4_1_4 + 3.85328956757596e-05*G0_4_1_5 - 8.02768659911632e-06*G0_4_2_0 + 2.56885971171729e-05*G0_4_2_1 - 3.21107463964663e-05*G0_4_2_2 - 0.000102754388468692*G0_4_2_3 - 0.000282574568288902*G0_4_2_4 - 3.85328956757592e-05*G0_4_2_5 + 3.85328956757594e-05*G0_4_3_0 + 3.85328956757594e-05*G0_4_3_1 - 0.000102754388468692*G0_4_3_2 - 7.70657913515189e-05*G0_4_3_3 + 0.000102754388468691*G0_4_3_4 + 0.000224775224775263*G0_4_4_0 - 8.99100899101046e-05*G0_4_4_1 - 0.000282574568288902*G0_4_4_2 + 0.000102754388468691*G0_4_4_3 + 0.00154131582703037*G0_4_4_4 + 0.000256885971171728*G0_4_4_5 + 3.85328956757595e-05*G0_4_5_1 - 3.85328956757592e-05*G0_4_5_2 + 0.000256885971171728*G0_4_5_4 - 0.000256885971171729*G0_4_5_5 - 5.61938061938158e-05*G0_5_0_0 + 8.02768659911641e-06*G0_5_0_1 + 1.92664478378797e-05*G0_5_0_2 - 3.85328956757594e-05*G0_5_0_3 - 0.000224775224775263*G0_5_0_5 + 8.02768659911641e-06*G0_5_1_0 + 3.21107463964665e-05*G0_5_1_1 - 2.56885971171729e-05*G0_5_1_2 + 0.000102754388468692*G0_5_1_3 + 3.85328956757595e-05*G0_5_1_4 + 0.000282574568288902*G0_5_1_5 + 1.92664478378797e-05*G0_5_2_0 - 2.56885971171729e-05*G0_5_2_1 - 6.42214927929327e-06*G0_5_2_2 - 3.85328956757593e-05*G0_5_2_3 - 3.85328956757592e-05*G0_5_2_4 + 8.9910089910105e-05*G0_5_2_5 - 3.85328956757594e-05*G0_5_3_0 + 0.000102754388468692*G0_5_3_1 - 3.85328956757593e-05*G0_5_3_2 + 7.70657913515186e-05*G0_5_3_3 - 0.000102754388468691*G0_5_3_5 + 3.85328956757595e-05*G0_5_4_1 - 3.85328956757592e-05*G0_5_4_2 + 0.000256885971171728*G0_5_4_4 - 0.000256885971171729*G0_5_4_5 - 0.000224775224775263*G0_5_5_0 + 0.000282574568288902*G0_5_5_1 + 8.9910089910105e-05*G0_5_5_2 - 0.000102754388468691*G0_5_5_3 - 0.000256885971171729*G0_5_5_4 - 0.00154131582703037*G0_5_5_5;
    A[76] = A[67];
    A[78] = A[67] - 0.000224775224775262*G0_0_0_0 + 1.31118881118902e-05*G0_0_0_1 + 1.31118881118903e-05*G0_0_0_2 - 2.62237762237806e-05*G0_0_0_3 - 0.000262237762237806*G0_0_0_5 + 1.31118881118903e-05*G0_0_1_0 + 0.000106500642214946*G0_0_1_1 - 1.52526045383214e-05*G0_0_1_2 + 7.54602540316953e-05*G0_0_1_3 + 2.62237762237806e-05*G0_0_1_4 + 0.000183566433566464*G0_0_1_5 + 1.31118881118903e-05*G0_0_2_0 - 1.52526045383214e-05*G0_0_2_1 - 2.14071642643112e-06*G0_0_2_2 - 4.06736121021904e-05*G0_0_2_3 - 2.62237762237808e-05*G0_0_2_4 - 2.62237762237807e-05*G0_0_2_5 - 2.62237762237806e-05*G0_0_3_0 + 7.54602540316953e-05*G0_0_3_1 - 4.06736121021904e-05*G0_0_3_2 + 8.13472242043807e-05*G0_0_3_3 + 0.000104895104895123*G0_0_3_5 + 2.62237762237806e-05*G0_0_4_1 - 2.62237762237808e-05*G0_0_4_2 - 0.000262237762237806*G0_0_5_0 + 0.000183566433566464*G0_0_5_1 - 2.62237762237807e-05*G0_0_5_2 + 0.000104895104895123*G0_0_5_3 + 1.31118881118902e-05*G0_1_0_0 + 0.000106500642214946*G0_1_0_1 - 1.52526045383214e-05*G0_1_0_2 + 7.54602540316953e-05*G0_1_0_3 + 2.62237762237806e-05*G0_1_0_4 + 0.000183566433566464*G0_1_0_5 + 0.000106500642214946*G0_1_1_0 - 0.000651848151848262*G0_1_1_1 + 6.59608248894074e-05*G0_1_1_2 - 0.000237619523333849*G0_1_1_3 - 3.47866419295048e-05*G0_1_1_4 - 0.000526616240902044*G0_1_1_5 - 1.52526045383214e-05*G0_1_2_0 + 6.59608248894074e-05*G0_1_2_1 - 2.46182389039574e-05*G0_1_2_2 + 4.92364778079147e-05*G0_1_2_3 + 8.29527615242041e-05*G0_1_2_5 + 7.54602540316953e-05*G0_1_3_0 - 0.000237619523333849*G0_1_3_1 + 4.92364778079147e-05*G0_1_3_2 - 0.000316826031111799*G0_1_3_3 - 8.13472242043808e-05*G0_1_3_4 - 0.000316826031111799*G0_1_3_5 + 2.62237762237806e-05*G0_1_4_0 - 3.47866419295048e-05*G0_1_4_1 - 8.13472242043808e-05*G0_1_4_3 - 8.56286570572463e-06*G0_1_4_4 - 9.63322391893983e-05*G0_1_4_5 + 0.000183566433566464*G0_1_5_0 - 0.000526616240902044*G0_1_5_1 + 8.29527615242041e-05*G0_1_5_2 - 0.000316826031111799*G0_1_5_3 - 9.63322391893983e-05*G0_1_5_4 - 0.000787783644926635*G0_1_5_5 + 1.31118881118903e-05*G0_2_0_0 - 1.52526045383214e-05*G0_2_0_1 - 2.14071642643112e-06*G0_2_0_2 - 4.06736121021904e-05*G0_2_0_3 - 2.62237762237808e-05*G0_2_0_4 - 2.62237762237807e-05*G0_2_0_5 - 1.52526045383214e-05*G0_2_1_0 + 6.59608248894074e-05*G0_2_1_1 - 2.46182389039574e-05*G0_2_1_2 + 4.92364778079147e-05*G0_2_1_3 + 8.29527615242041e-05*G0_2_1_5 - 2.14071642643113e-06*G0_2_2_0 - 2.46182389039574e-05*G0_2_2_1 + 4.85675039246553e-05*G0_2_2_2 + 8.56286570572439e-06*G0_2_2_3 + 3.47866419295053e-05*G0_2_2_4 - 4.28143285286209e-06*G0_2_2_5 - 4.06736121021904e-05*G0_2_3_0 + 4.92364778079147e-05*G0_2_3_1 + 8.56286570572439e-06*G0_2_3_2 + 0.000201227344084521*G0_2_3_3 + 8.13472242043809e-05*G0_2_3_4 + 8.99100899101051e-05*G0_2_3_5 - 2.62237762237808e-05*G0_2_4_0 + 3.47866419295052e-05*G0_2_4_2 + 8.13472242043809e-05*G0_2_4_3 + 9.63322391893987e-05*G0_2_4_4 + 8.56286570572419e-06*G0_2_4_5 - 2.62237762237807e-05*G0_2_5_0 + 8.29527615242041e-05*G0_2_5_1 - 4.28143285286209e-06*G0_2_5_2 + 8.99100899101051e-05*G0_2_5_3 + 8.56286570572423e-06*G0_2_5_4 - 5.35179106607768e-05*G0_2_5_5 - 2.62237762237806e-05*G0_3_0_0 + 7.54602540316953e-05*G0_3_0_1 - 4.06736121021904e-05*G0_3_0_2 + 8.13472242043807e-05*G0_3_0_3 + 0.000104895104895123*G0_3_0_5 + 7.54602540316953e-05*G0_3_1_0 - 0.000237619523333849*G0_3_1_1 + 4.92364778079147e-05*G0_3_1_2 - 0.000316826031111799*G0_3_1_3 - 8.13472242043808e-05*G0_3_1_4 - 0.000316826031111799*G0_3_1_5 - 4.06736121021904e-05*G0_3_2_0 + 4.92364778079147e-05*G0_3_2_1 + 8.56286570572438e-06*G0_3_2_2 + 0.000201227344084521*G0_3_2_3 + 8.13472242043809e-05*G0_3_2_4 + 8.99100899101051e-05*G0_3_2_5 + 8.13472242043807e-05*G0_3_3_0 - 0.000316826031111799*G0_3_3_1 + 0.000201227344084521*G0_3_3_2 - 0.000402454688169042*G0_3_3_3 - 0.000342514628228972*G0_3_3_5 - 8.13472242043808e-05*G0_3_4_1 + 8.13472242043809e-05*G0_3_4_2 + 1.71257314114493e-05*G0_3_4_4 - 1.71257314114484e-05*G0_3_4_5 + 0.000104895104895123*G0_3_5_0 - 0.000316826031111799*G0_3_5_1 + 8.99100899101051e-05*G0_3_5_2 - 0.000342514628228972*G0_3_5_3 - 1.71257314114484e-05*G0_3_5_4 - 0.000102754388468691*G0_3_5_5 + 2.62237762237806e-05*G0_4_0_1 - 2.62237762237808e-05*G0_4_0_2 + 2.62237762237806e-05*G0_4_1_0 - 3.47866419295048e-05*G0_4_1_1 - 8.13472242043808e-05*G0_4_1_3 - 8.56286570572467e-06*G0_4_1_4 - 9.63322391893984e-05*G0_4_1_5 - 2.62237762237808e-05*G0_4_2_0 + 3.47866419295052e-05*G0_4_2_2 + 8.13472242043809e-05*G0_4_2_3 + 9.63322391893987e-05*G0_4_2_4 + 8.56286570572419e-06*G0_4_2_5 - 8.13472242043809e-05*G0_4_3_1 + 8.13472242043809e-05*G0_4_3_2 + 1.71257314114493e-05*G0_4_3_4 - 1.71257314114484e-05*G0_4_3_5 - 8.56286570572463e-06*G0_4_4_1 + 9.63322391893987e-05*G0_4_4_2 + 1.71257314114493e-05*G0_4_4_3 - 0.000299700299700347*G0_4_4_4 - 9.63322391893983e-05*G0_4_5_1 + 8.56286570572422e-06*G0_4_5_2 - 1.71257314114484e-05*G0_4_5_3 + 0.000299700299700351*G0_4_5_5 - 0.000262237762237806*G0_5_0_0 + 0.000183566433566464*G0_5_0_1 - 2.62237762237807e-05*G0_5_0_2 + 0.000104895104895123*G0_5_0_3 + 0.000183566433566464*G0_5_1_0 - 0.000526616240902044*G0_5_1_1 + 8.29527615242041e-05*G0_5_1_2 - 0.000316826031111799*G0_5_1_3 - 9.63322391893984e-05*G0_5_1_4 - 0.000787783644926635*G0_5_1_5 - 2.62237762237807e-05*G0_5_2_0 + 8.29527615242041e-05*G0_5_2_1 - 4.28143285286208e-06*G0_5_2_2 + 8.99100899101051e-05*G0_5_2_3 + 8.56286570572422e-06*G0_5_2_4 - 5.35179106607768e-05*G0_5_2_5 + 0.000104895104895123*G0_5_3_0 - 0.000316826031111799*G0_5_3_1 + 8.99100899101051e-05*G0_5_3_2 - 0.000342514628228972*G0_5_3_3 - 1.71257314114484e-05*G0_5_3_4 - 0.000102754388468691*G0_5_3_5 - 9.63322391893983e-05*G0_5_4_1 + 8.56286570572422e-06*G0_5_4_2 - 1.71257314114484e-05*G0_5_4_3 + 0.000299700299700351*G0_5_4_5 - 0.000787783644926635*G0_5_5_1 - 5.35179106607768e-05*G0_5_5_2 - 0.000102754388468691*G0_5_5_3 + 0.000299700299700351*G0_5_5_4 + 0.0023976023976028*G0_5_5_5;
    A[48] = A[78] + 0.000651848151848261*G0_0_0_0 - 0.000106500642214946*G0_0_0_1 - 6.59608248894073e-05*G0_0_0_2 + 3.47866419295049e-05*G0_0_0_3 + 0.000237619523333849*G0_0_0_4 + 0.000526616240902044*G0_0_0_5 - 0.000106500642214946*G0_0_1_0 - 1.31118881118905e-05*G0_0_1_1 + 1.52526045383214e-05*G0_0_1_2 - 2.62237762237806e-05*G0_0_1_3 - 7.54602540316953e-05*G0_0_1_4 - 0.000183566433566464*G0_0_1_5 - 6.59608248894073e-05*G0_0_2_0 + 1.52526045383214e-05*G0_0_2_1 + 2.46182389039573e-05*G0_0_2_2 - 4.92364778079147e-05*G0_0_2_4 - 8.2952761524204e-05*G0_0_2_5 + 3.47866419295049e-05*G0_0_3_0 - 2.62237762237806e-05*G0_0_3_1 + 8.56286570572419e-06*G0_0_3_3 + 8.13472242043807e-05*G0_0_3_4 + 9.63322391893982e-05*G0_0_3_5 + 0.000237619523333849*G0_0_4_0 - 7.54602540316953e-05*G0_0_4_1 - 4.92364778079147e-05*G0_0_4_2 + 8.13472242043807e-05*G0_0_4_3 + 0.000316826031111798*G0_0_4_4 + 0.000316826031111799*G0_0_4_5 + 0.000526616240902044*G0_0_5_0 - 0.000183566433566464*G0_0_5_1 - 8.2952761524204e-05*G0_0_5_2 + 9.63322391893982e-05*G0_0_5_3 + 0.000316826031111799*G0_0_5_4 + 0.000787783644926634*G0_0_5_5 - 0.000106500642214946*G0_1_0_0 - 1.31118881118905e-05*G0_1_0_1 + 1.52526045383214e-05*G0_1_0_2 - 2.62237762237806e-05*G0_1_0_3 - 7.54602540316953e-05*G0_1_0_4 - 0.000183566433566464*G0_1_0_5 - 1.31118881118905e-05*G0_1_1_0 + 0.000224775224775263*G0_1_1_1 - 1.31118881118903e-05*G0_1_1_2 + 2.62237762237806e-05*G0_1_1_4 + 0.000262237762237807*G0_1_1_5 + 1.52526045383214e-05*G0_1_2_0 - 1.31118881118903e-05*G0_1_2_1 + 2.14071642643103e-06*G0_1_2_2 + 2.62237762237806e-05*G0_1_2_3 + 4.06736121021904e-05*G0_1_2_4 + 2.62237762237806e-05*G0_1_2_5 - 2.62237762237806e-05*G0_1_3_0 + 2.62237762237806e-05*G0_1_3_2 - 7.54602540316952e-05*G0_1_4_0 + 2.62237762237806e-05*G0_1_4_1 + 4.06736121021904e-05*G0_1_4_2 - 8.13472242043808e-05*G0_1_4_4 - 0.000104895104895123*G0_1_4_5 - 0.000183566433566464*G0_1_5_0 + 0.000262237762237807*G0_1_5_1 + 2.62237762237806e-05*G0_1_5_2 - 0.000104895104895123*G0_1_5_4 - 6.59608248894073e-05*G0_2_0_0 + 1.52526045383214e-05*G0_2_0_1 + 2.46182389039573e-05*G0_2_0_2 - 4.92364778079147e-05*G0_2_0_4 - 8.2952761524204e-05*G0_2_0_5 + 1.52526045383214e-05*G0_2_1_0 - 1.31118881118903e-05*G0_2_1_1 + 2.14071642643103e-06*G0_2_1_2 + 2.62237762237806e-05*G0_2_1_3 + 4.06736121021904e-05*G0_2_1_4 + 2.62237762237806e-05*G0_2_1_5 + 2.46182389039573e-05*G0_2_2_0 + 2.14071642643102e-06*G0_2_2_1 - 4.85675039246547e-05*G0_2_2_2 - 3.47866419295047e-05*G0_2_2_3 - 8.56286570572419e-06*G0_2_2_4 + 4.28143285286212e-06*G0_2_2_5 + 2.62237762237806e-05*G0_2_3_1 - 3.47866419295048e-05*G0_2_3_2 - 9.6332239189398e-05*G0_2_3_3 - 8.13472242043807e-05*G0_2_3_4 - 8.56286570572421e-06*G0_2_3_5 - 4.92364778079147e-05*G0_2_4_0 + 4.06736121021904e-05*G0_2_4_1 - 8.56286570572417e-06*G0_2_4_2 - 8.13472242043807e-05*G0_2_4_3 - 0.000201227344084521*G0_2_4_4 - 8.9910089910105e-05*G0_2_4_5 - 8.2952761524204e-05*G0_2_5_0 + 2.62237762237806e-05*G0_2_5_1 + 4.28143285286212e-06*G0_2_5_2 - 8.56286570572419e-06*G0_2_5_3 - 8.9910089910105e-05*G0_2_5_4 + 5.35179106607771e-05*G0_2_5_5 + 3.47866419295049e-05*G0_3_0_0 - 2.62237762237806e-05*G0_3_0_1 + 8.56286570572419e-06*G0_3_0_3 + 8.13472242043807e-05*G0_3_0_4 + 9.63322391893983e-05*G0_3_0_5 - 2.62237762237806e-05*G0_3_1_0 + 2.62237762237806e-05*G0_3_1_2 + 2.62237762237806e-05*G0_3_2_1 - 3.47866419295047e-05*G0_3_2_2 - 9.6332239189398e-05*G0_3_2_3 - 8.13472242043807e-05*G0_3_2_4 - 8.56286570572422e-06*G0_3_2_5 + 8.56286570572419e-06*G0_3_3_0 - 9.6332239189398e-05*G0_3_3_2 + 0.000299700299700351*G0_3_3_3 - 1.71257314114482e-05*G0_3_3_4 + 8.13472242043807e-05*G0_3_4_0 - 8.13472242043807e-05*G0_3_4_2 - 1.71257314114483e-05*G0_3_4_3 + 1.71257314114485e-05*G0_3_4_5 + 9.63322391893982e-05*G0_3_5_0 - 8.56286570572422e-06*G0_3_5_2 + 1.71257314114485e-05*G0_3_5_4 - 0.000299700299700351*G0_3_5_5 + 0.000237619523333849*G0_4_0_0 - 7.54602540316952e-05*G0_4_0_1 - 4.92364778079147e-05*G0_4_0_2 + 8.13472242043807e-05*G0_4_0_3 + 0.000316826031111798*G0_4_0_4 + 0.000316826031111799*G0_4_0_5 - 7.54602540316952e-05*G0_4_1_0 + 2.62237762237806e-05*G0_4_1_1 + 4.06736121021904e-05*G0_4_1_2 - 8.13472242043807e-05*G0_4_1_4 - 0.000104895104895123*G0_4_1_5 - 4.92364778079147e-05*G0_4_2_0 + 4.06736121021904e-05*G0_4_2_1 - 8.56286570572419e-06*G0_4_2_2 - 8.13472242043807e-05*G0_4_2_3 - 0.000201227344084521*G0_4_2_4 - 8.9910089910105e-05*G0_4_2_5 + 8.13472242043807e-05*G0_4_3_0 - 8.13472242043807e-05*G0_4_3_2 - 1.71257314114482e-05*G0_4_3_3 + 1.71257314114485e-05*G0_4_3_5 + 0.000316826031111798*G0_4_4_0 - 8.13472242043808e-05*G0_4_4_1 - 0.000201227344084521*G0_4_4_2 + 0.000402454688169042*G0_4_4_4 + 0.000342514628228971*G0_4_4_5 + 0.000316826031111799*G0_4_5_0 - 0.000104895104895123*G0_4_5_1 - 8.9910089910105e-05*G0_4_5_2 + 1.71257314114485e-05*G0_4_5_3 + 0.000342514628228971*G0_4_5_4 + 0.000102754388468691*G0_4_5_5 + 0.000526616240902044*G0_5_0_0 - 0.000183566433566464*G0_5_0_1 - 8.2952761524204e-05*G0_5_0_2 + 9.63322391893983e-05*G0_5_0_3 + 0.000316826031111799*G0_5_0_4 + 0.000787783644926634*G0_5_0_5 - 0.000183566433566464*G0_5_1_0 + 0.000262237762237807*G0_5_1_1 + 2.62237762237806e-05*G0_5_1_2 - 0.000104895104895123*G0_5_1_4 - 8.2952761524204e-05*G0_5_2_0 + 2.62237762237806e-05*G0_5_2_1 + 4.28143285286212e-06*G0_5_2_2 - 8.56286570572421e-06*G0_5_2_3 - 8.9910089910105e-05*G0_5_2_4 + 5.35179106607771e-05*G0_5_2_5 + 9.63322391893982e-05*G0_5_3_0 - 8.56286570572423e-06*G0_5_3_2 + 1.71257314114485e-05*G0_5_3_4 - 0.000299700299700351*G0_5_3_5 + 0.000316826031111799*G0_5_4_0 - 0.000104895104895123*G0_5_4_1 - 8.9910089910105e-05*G0_5_4_2 + 1.71257314114485e-05*G0_5_4_3 + 0.000342514628228971*G0_5_4_4 + 0.000102754388468691*G0_5_4_5 + 0.000787783644926634*G0_5_5_0 + 5.35179106607771e-05*G0_5_5_2 - 0.000299700299700351*G0_5_5_3 + 0.000102754388468691*G0_5_5_4 - 0.0023976023976028*G0_5_5_5;
    A[87] = A[78];
    A[24] = A[42];
    A[84] = A[48];
    A[59] = A[69] + 0.00050574425574434*G0_0_0_0 - 5.77993435136389e-05*G0_0_0_1 - 0.000158948194662507*G0_0_0_2 - 8.66990152704585e-05*G0_0_0_3 + 0.000337162837162894*G0_0_0_4 + 0.000337162837162894*G0_0_0_5 - 5.77993435136389e-05*G0_0_1_0 + 6.50242614528439e-05*G0_0_1_1 - 0.000173398030540917*G0_0_1_3 - 0.000298629941487135*G0_0_1_4 - 0.000192664478378797*G0_0_1_5 - 0.000158948194662507*G0_0_2_0 + 0.000158948194662507*G0_0_2_2 + 8.66990152704583e-05*G0_0_2_3 - 8.66990152704585e-05*G0_0_2_5 - 8.66990152704585e-05*G0_0_3_0 - 0.000173398030540917*G0_0_3_1 + 8.66990152704583e-05*G0_0_3_2 + 0.000809190809190946*G0_0_3_3 + 0.000770657913515187*G0_0_3_4 + 0.000346796061081834*G0_0_3_5 + 0.000337162837162894*G0_0_4_0 - 0.000298629941487135*G0_0_4_1 + 0.000770657913515187*G0_0_4_3 + 0.00192664478378797*G0_0_4_4 + 0.000770657913515187*G0_0_4_5 + 0.000337162837162894*G0_0_5_0 - 0.000192664478378797*G0_0_5_1 - 8.66990152704585e-05*G0_0_5_2 + 0.000346796061081834*G0_0_5_3 + 0.000770657913515187*G0_0_5_4 + 0.00057799343513639*G0_0_5_5 - 5.77993435136389e-05*G0_1_0_0 + 6.50242614528439e-05*G0_1_0_1 - 0.000173398030540917*G0_1_0_3 - 0.000298629941487135*G0_1_0_4 - 0.000192664478378797*G0_1_0_5 + 6.50242614528439e-05*G0_1_1_0 - 6.50242614528438e-05*G0_1_1_2 - 0.000105965463108338*G0_1_1_3 + 0.000105965463108338*G0_1_1_5 - 6.50242614528438e-05*G0_1_2_1 + 5.77993435136389e-05*G0_1_2_2 + 0.000192664478378796*G0_1_2_3 + 0.000298629941487134*G0_1_2_4 + 0.000173398030540917*G0_1_2_5 - 0.000173398030540917*G0_1_3_0 - 0.000105965463108338*G0_1_3_1 + 0.000192664478378796*G0_1_3_2 + 0.000616526330812149*G0_1_3_3 + 0.000346796061081834*G0_1_3_4 - 0.000298629941487135*G0_1_4_0 + 0.000298629941487134*G0_1_4_2 + 0.000346796061081834*G0_1_4_3 - 0.000346796061081834*G0_1_4_5 - 0.000192664478378797*G0_1_5_0 + 0.000105965463108338*G0_1_5_1 + 0.000173398030540917*G0_1_5_2 - 0.000346796061081834*G0_1_5_4 - 0.000616526330812149*G0_1_5_5 - 0.000158948194662507*G0_2_0_0 + 0.000158948194662507*G0_2_0_2 + 8.66990152704583e-05*G0_2_0_3 - 8.66990152704585e-05*G0_2_0_5 - 6.50242614528438e-05*G0_2_1_1 + 5.77993435136389e-05*G0_2_1_2 + 0.000192664478378796*G0_2_1_3 + 0.000298629941487134*G0_2_1_4 + 0.000173398030540917*G0_2_1_5 + 0.000158948194662507*G0_2_2_0 + 5.77993435136389e-05*G0_2_2_1 - 0.000505744255744341*G0_2_2_2 - 0.000337162837162894*G0_2_2_3 - 0.000337162837162894*G0_2_2_4 + 8.66990152704585e-05*G0_2_2_5 + 8.66990152704583e-05*G0_2_3_0 + 0.000192664478378796*G0_2_3_1 - 0.000337162837162894*G0_2_3_2 - 0.000577993435136389*G0_2_3_3 - 0.000770657913515186*G0_2_3_4 - 0.000346796061081834*G0_2_3_5 + 0.000298629941487134*G0_2_4_1 - 0.000337162837162894*G0_2_4_2 - 0.000770657913515186*G0_2_4_3 - 0.00192664478378796*G0_2_4_4 - 0.000770657913515186*G0_2_4_5 - 8.66990152704585e-05*G0_2_5_0 + 0.000173398030540917*G0_2_5_1 + 8.66990152704584e-05*G0_2_5_2 - 0.000346796061081834*G0_2_5_3 - 0.000770657913515186*G0_2_5_4 - 0.000809190809190946*G0_2_5_5 - 8.66990152704585e-05*G0_3_0_0 - 0.000173398030540917*G0_3_0_1 + 8.66990152704583e-05*G0_3_0_2 + 0.000809190809190946*G0_3_0_3 + 0.000770657913515187*G0_3_0_4 + 0.000346796061081834*G0_3_0_5 - 0.000173398030540917*G0_3_1_0 - 0.000105965463108338*G0_3_1_1 + 0.000192664478378796*G0_3_1_2 + 0.000616526330812149*G0_3_1_3 + 0.000346796061081834*G0_3_1_4 + 8.66990152704583e-05*G0_3_2_0 + 0.000192664478378796*G0_3_2_1 - 0.000337162837162894*G0_3_2_2 - 0.000577993435136389*G0_3_2_3 - 0.000770657913515186*G0_3_2_4 - 0.000346796061081834*G0_3_2_5 + 0.000809190809190946*G0_3_3_0 + 0.000616526330812149*G0_3_3_1 - 0.000577993435136389*G0_3_3_2 - 0.00462394748109112*G0_3_3_3 - 0.00231197374054556*G0_3_3_4 - 0.000924789496218225*G0_3_3_5 + 0.000770657913515187*G0_3_4_0 + 0.000346796061081834*G0_3_4_1 - 0.000770657913515186*G0_3_4_2 - 0.00231197374054556*G0_3_4_3 - 0.00154131582703037*G0_3_4_4 + 0.000346796061081834*G0_3_5_0 - 0.000346796061081834*G0_3_5_2 - 0.000924789496218225*G0_3_5_3 + 0.000924789496218223*G0_3_5_5 + 0.000337162837162894*G0_4_0_0 - 0.000298629941487135*G0_4_0_1 + 0.000770657913515187*G0_4_0_3 + 0.00192664478378797*G0_4_0_4 + 0.000770657913515187*G0_4_0_5 - 0.000298629941487135*G0_4_1_0 + 0.000298629941487134*G0_4_1_2 + 0.000346796061081834*G0_4_1_3 - 0.000346796061081834*G0_4_1_5 + 0.000298629941487134*G0_4_2_1 - 0.000337162837162894*G0_4_2_2 - 0.000770657913515186*G0_4_2_3 - 0.00192664478378796*G0_4_2_4 - 0.000770657913515186*G0_4_2_5 + 0.000770657913515187*G0_4_3_0 + 0.000346796061081834*G0_4_3_1 - 0.000770657913515186*G0_4_3_2 - 0.00231197374054556*G0_4_3_3 - 0.00154131582703037*G0_4_3_4 + 0.00192664478378797*G0_4_4_0 - 0.00192664478378796*G0_4_4_2 - 0.00154131582703037*G0_4_4_3 + 0.00154131582703037*G0_4_4_5 + 0.000770657913515187*G0_4_5_0 - 0.000346796061081834*G0_4_5_1 - 0.000770657913515186*G0_4_5_2 + 0.00154131582703037*G0_4_5_4 + 0.00231197374054556*G0_4_5_5 + 0.000337162837162894*G0_5_0_0 - 0.000192664478378797*G0_5_0_1 - 8.66990152704585e-05*G0_5_0_2 + 0.000346796061081834*G0_5_0_3 + 0.000770657913515186*G0_5_0_4 + 0.00057799343513639*G0_5_0_5 - 0.000192664478378797*G0_5_1_0 + 0.000105965463108338*G0_5_1_1 + 0.000173398030540917*G0_5_1_2 - 0.000346796061081834*G0_5_1_4 - 0.000616526330812149*G0_5_1_5 - 8.66990152704585e-05*G0_5_2_0 + 0.000173398030540917*G0_5_2_1 + 8.66990152704584e-05*G0_5_2_2 - 0.000346796061081834*G0_5_2_3 - 0.000770657913515186*G0_5_2_4 - 0.000809190809190946*G0_5_2_5 + 0.000346796061081834*G0_5_3_0 - 0.000346796061081834*G0_5_3_2 - 0.000924789496218225*G0_5_3_3 + 0.000924789496218223*G0_5_3_5 + 0.000770657913515186*G0_5_4_0 - 0.000346796061081834*G0_5_4_1 - 0.000770657913515186*G0_5_4_2 + 0.00154131582703037*G0_5_4_4 + 0.00231197374054556*G0_5_4_5 + 0.00057799343513639*G0_5_5_0 - 0.000616526330812149*G0_5_5_1 - 0.000809190809190946*G0_5_5_2 + 0.000924789496218223*G0_5_5_3 + 0.00231197374054556*G0_5_5_4 + 0.00462394748109112*G0_5_5_5;
    A[91] = A[19];
    A[66] = A[64] + 0.000224775224775263*G0_0_0_0 - 3.31811046096816e-05*G0_0_0_1 + 2.18085485942665e-05*G0_0_0_2 + 3.10403881832505e-05*G0_0_0_3 + 0.000346796061081834*G0_0_0_4 + 0.000102754388468691*G0_0_0_5 - 3.31811046096816e-05*G0_0_1_0 + 5.88697017268545e-06*G0_0_1_1 + 1.80622948480121e-05*G0_0_1_2 + 3.31811046096816e-05*G0_0_1_4 - 1.17739403453709e-05*G0_0_1_5 + 2.18085485942665e-05*G0_0_2_0 + 1.80622948480122e-05*G0_0_2_1 - 0.000189185814185846*G0_0_2_2 - 4.12087912087982e-05*G0_0_2_3 - 0.000400849150849218*G0_0_2_4 - 4.17439703154059e-05*G0_0_2_5 + 3.10403881832505e-05*G0_0_3_0 - 4.12087912087982e-05*G0_0_3_2 + 6.85029256457946e-05*G0_0_3_3 - 0.000128442985585864*G0_0_3_4 + 2.14071642643108e-05*G0_0_3_5 + 0.000346796061081834*G0_0_4_0 + 3.31811046096816e-05*G0_0_4_1 - 0.000400849150849218*G0_0_4_2 - 0.000128442985585864*G0_0_4_3 - 0.000890538033395325*G0_0_4_4 + 1.71257314114487e-05*G0_0_4_5 + 0.000102754388468691*G0_0_5_0 - 1.17739403453709e-05*G0_0_5_1 - 4.17439703154059e-05*G0_0_5_2 + 2.14071642643108e-05*G0_0_5_3 + 1.71257314114486e-05*G0_0_5_4 + 0.000107035821321554*G0_0_5_5 - 3.31811046096816e-05*G0_1_0_0 + 5.88697017268545e-06*G0_1_0_1 + 1.80622948480121e-05*G0_1_0_2 + 3.31811046096816e-05*G0_1_0_4 - 1.17739403453709e-05*G0_1_0_5 + 5.88697017268545e-06*G0_1_1_0 - 1.76609105180564e-05*G0_1_1_1 - 2.54210075638691e-06*G0_1_1_2 - 3.10403881832506e-05*G0_1_1_3 + 3.42514628228971e-05*G0_1_1_4 - 1.07035821321555e-06*G0_1_1_5 + 1.80622948480121e-05*G0_1_2_0 - 2.54210075638691e-06*G0_1_2_1 - 2.06043956043989e-05*G0_1_2_2 + 4.12087912087982e-05*G0_1_2_3 - 7.1178821178833e-05*G0_1_2_4 + 1.07035821321554e-05*G0_1_2_5 - 3.10403881832506e-05*G0_1_3_1 + 4.12087912087982e-05*G0_1_3_2 + 0.000128442985585864*G0_1_3_3 - 6.85029256457944e-05*G0_1_3_4 - 2.14071642643108e-05*G0_1_3_5 + 3.31811046096816e-05*G0_1_4_0 + 3.42514628228971e-05*G0_1_4_1 - 7.1178821178833e-05*G0_1_4_2 - 6.85029256457944e-05*G0_1_4_3 - 0.000470957613814836*G0_1_4_4 - 8.9910089910105e-05*G0_1_4_5 - 1.17739403453709e-05*G0_1_5_0 - 1.07035821321555e-06*G0_1_5_1 + 1.07035821321554e-05*G0_1_5_2 - 2.14071642643108e-05*G0_1_5_3 - 8.9910089910105e-05*G0_1_5_4 - 8.13472242043807e-05*G0_1_5_5 + 2.18085485942665e-05*G0_2_0_0 + 1.80622948480121e-05*G0_2_0_1 - 0.000189185814185846*G0_2_0_2 - 4.12087912087982e-05*G0_2_0_3 - 0.000400849150849218*G0_2_0_4 - 4.17439703154059e-05*G0_2_0_5 + 1.80622948480121e-05*G0_2_1_0 - 2.54210075638691e-06*G0_2_1_1 - 2.06043956043989e-05*G0_2_1_2 + 4.12087912087982e-05*G0_2_1_3 - 7.11788211788329e-05*G0_2_1_4 + 1.07035821321554e-05*G0_2_1_5 - 0.000189185814185846*G0_2_2_0 - 2.06043956043989e-05*G0_2_2_1 + 0.00078671328671342*G0_2_2_2 + 0.00108641358641377*G0_2_2_4 + 4.12087912087983e-05*G0_2_2_5 - 4.12087912087982e-05*G0_2_3_0 + 4.12087912087982e-05*G0_2_3_1 - 0.000224775224775263*G0_2_3_3 + 0.000224775224775262*G0_2_3_4 - 0.000400849150849218*G0_2_4_0 - 7.11788211788329e-05*G0_2_4_1 + 0.00108641358641377*G0_2_4_2 + 0.000224775224775262*G0_2_4_3 + 0.00202297702297736*G0_2_4_4 + 5.99400599400699e-05*G0_2_4_5 - 4.17439703154059e-05*G0_2_5_0 + 1.07035821321554e-05*G0_2_5_1 + 4.12087912087983e-05*G0_2_5_2 + 5.99400599400699e-05*G0_2_5_4 - 2.14071642643108e-05*G0_2_5_5 + 3.10403881832505e-05*G0_3_0_0 - 4.12087912087982e-05*G0_3_0_2 + 6.85029256457946e-05*G0_3_0_3 - 0.000128442985585864*G0_3_0_4 + 2.14071642643108e-05*G0_3_0_5 - 3.10403881832506e-05*G0_3_1_1 + 4.12087912087982e-05*G0_3_1_2 + 0.000128442985585865*G0_3_1_3 - 6.85029256457944e-05*G0_3_1_4 - 2.14071642643108e-05*G0_3_1_5 - 4.12087912087982e-05*G0_3_2_0 + 4.12087912087982e-05*G0_3_2_1 - 0.000224775224775263*G0_3_2_3 + 0.000224775224775262*G0_3_2_4 + 6.85029256457946e-05*G0_3_3_0 + 0.000128442985585865*G0_3_3_1 - 0.000224775224775263*G0_3_3_2 - 0.0011988011988014*G0_3_3_3 - 0.000137005851291589*G0_3_3_5 - 0.000128442985585864*G0_3_4_0 - 6.85029256457944e-05*G0_3_4_1 + 0.000224775224775262*G0_3_4_2 + 0.0011988011988014*G0_3_4_4 + 0.000137005851291589*G0_3_4_5 + 2.14071642643108e-05*G0_3_5_0 - 2.14071642643107e-05*G0_3_5_1 - 0.000137005851291589*G0_3_5_3 + 0.000137005851291589*G0_3_5_4 + 0.000346796061081834*G0_4_0_0 + 3.31811046096816e-05*G0_4_0_1 - 0.000400849150849218*G0_4_0_2 - 0.000128442985585864*G0_4_0_3 - 0.000890538033395325*G0_4_0_4 + 1.71257314114486e-05*G0_4_0_5 + 3.31811046096816e-05*G0_4_1_0 + 3.42514628228971e-05*G0_4_1_1 - 7.11788211788329e-05*G0_4_1_2 - 6.85029256457944e-05*G0_4_1_3 - 0.000470957613814836*G0_4_1_4 - 8.9910089910105e-05*G0_4_1_5 - 0.000400849150849218*G0_4_2_0 - 7.11788211788329e-05*G0_4_2_1 + 0.00108641358641377*G0_4_2_2 + 0.000224775224775262*G0_4_2_3 + 0.00202297702297736*G0_4_2_4 + 5.99400599400699e-05*G0_4_2_5 - 0.000128442985585864*G0_4_3_0 - 6.85029256457944e-05*G0_4_3_1 + 0.000224775224775262*G0_4_3_2 + 0.0011988011988014*G0_4_3_4 + 0.000137005851291589*G0_4_3_5 - 0.000890538033395326*G0_4_4_0 - 0.000470957613814836*G0_4_4_1 + 0.00202297702297736*G0_4_4_2 + 0.0011988011988014*G0_4_4_3 + 0.00959040959041121*G0_4_4_4 + 0.000822035107749532*G0_4_4_5 + 1.71257314114486e-05*G0_4_5_0 - 8.9910089910105e-05*G0_4_5_1 + 5.99400599400699e-05*G0_4_5_2 + 0.000137005851291589*G0_4_5_3 + 0.000822035107749532*G0_4_5_4 + 0.000222634508348832*G0_4_5_5 + 0.000102754388468691*G0_5_0_0 - 1.17739403453709e-05*G0_5_0_1 - 4.17439703154059e-05*G0_5_0_2 + 2.14071642643108e-05*G0_5_0_3 + 1.71257314114486e-05*G0_5_0_4 + 0.000107035821321554*G0_5_0_5 - 1.17739403453709e-05*G0_5_1_0 - 1.07035821321553e-06*G0_5_1_1 + 1.07035821321554e-05*G0_5_1_2 - 2.14071642643108e-05*G0_5_1_3 - 8.9910089910105e-05*G0_5_1_4 - 8.13472242043807e-05*G0_5_1_5 - 4.17439703154059e-05*G0_5_2_0 + 1.07035821321554e-05*G0_5_2_1 + 4.12087912087983e-05*G0_5_2_2 + 5.99400599400699e-05*G0_5_2_4 - 2.14071642643108e-05*G0_5_2_5 + 2.14071642643108e-05*G0_5_3_0 - 2.14071642643108e-05*G0_5_3_1 - 0.000137005851291589*G0_5_3_3 + 0.000137005851291589*G0_5_3_4 + 1.71257314114486e-05*G0_5_4_0 - 8.9910089910105e-05*G0_5_4_1 + 5.99400599400699e-05*G0_5_4_2 + 0.000137005851291589*G0_5_4_3 + 0.000822035107749532*G0_5_4_4 + 0.000222634508348832*G0_5_4_5 + 0.000107035821321554*G0_5_5_0 - 8.13472242043807e-05*G0_5_5_1 - 2.14071642643108e-05*G0_5_5_2 + 0.000222634508348832*G0_5_5_4 + 0.000162694448408762*G0_5_5_5;
    A[56] = A[65];
    A[77] = A[55] - 0.000168581418581447*G0_0_0_1 + 0.000168581418581447*G0_0_0_2 - 0.00108641358641377*G0_0_0_4 + 0.00108641358641377*G0_0_0_5 - 0.000168581418581447*G0_0_1_0 + 2.43506493506533e-05*G0_0_1_1 - 5.24475524475612e-05*G0_0_1_3 + 2.99700299700351e-05*G0_0_1_4 - 0.000442057942058016*G0_0_1_5 + 0.000168581418581447*G0_0_2_0 - 2.43506493506535e-05*G0_0_2_2 + 5.24475524475613e-05*G0_0_2_3 + 0.000442057942058017*G0_0_2_4 - 2.9970029970035e-05*G0_0_2_5 - 5.24475524475612e-05*G0_0_3_1 + 5.24475524475613e-05*G0_0_3_2 - 5.99400599400704e-05*G0_0_3_4 + 5.994005994007e-05*G0_0_3_5 - 0.00108641358641377*G0_0_4_0 + 2.9970029970035e-05*G0_0_4_1 + 0.000442057942058017*G0_0_4_2 - 5.99400599400704e-05*G0_0_4_3 - 0.00224775224775262*G0_0_4_4 + 0.00108641358641377*G0_0_5_0 - 0.000442057942058016*G0_0_5_1 - 2.9970029970035e-05*G0_0_5_2 + 5.994005994007e-05*G0_0_5_3 + 0.00224775224775263*G0_0_5_5 - 0.000168581418581447*G0_1_0_0 + 2.43506493506533e-05*G0_1_0_1 - 5.24475524475612e-05*G0_1_0_3 + 2.99700299700351e-05*G0_1_0_4 - 0.000442057942058016*G0_1_0_5 + 2.43506493506533e-05*G0_1_1_0 + 0.000242436135293319*G0_1_1_1 - 3.90680747823671e-05*G0_1_1_2 + 0.000103824746681907*G0_1_1_3 - 3.21107463964667e-06*G0_1_1_4 + 0.000377836449265084*G0_1_1_5 - 3.90680747823671e-05*G0_1_2_1 + 3.90680747823671e-05*G0_1_2_2 - 3.31811046096816e-05*G0_1_2_4 + 3.31811046096815e-05*G0_1_2_5 - 5.24475524475612e-05*G0_1_3_0 + 0.000103824746681907*G0_1_3_1 + 0.000188383045525935*G0_1_3_3 + 0.000111317254174416*G0_1_3_4 + 3.85328956757596e-05*G0_1_3_5 + 2.99700299700351e-05*G0_1_4_0 - 3.21107463964667e-06*G0_1_4_1 - 3.31811046096816e-05*G0_1_4_2 + 0.000111317254174416*G0_1_4_3 + 0.00053946053946063*G0_1_4_4 - 5.99400599400699e-05*G0_1_4_5 - 0.000442057942058016*G0_1_5_0 + 0.000377836449265084*G0_1_5_1 + 3.31811046096815e-05*G0_1_5_2 + 3.85328956757596e-05*G0_1_5_3 - 5.99400599400699e-05*G0_1_5_4 - 0.00101898101898119*G0_1_5_5 + 0.000168581418581447*G0_2_0_0 - 2.43506493506535e-05*G0_2_0_2 + 5.24475524475613e-05*G0_2_0_3 + 0.000442057942058017*G0_2_0_4 - 2.9970029970035e-05*G0_2_0_5 - 3.90680747823671e-05*G0_2_1_1 + 3.90680747823671e-05*G0_2_1_2 - 3.31811046096816e-05*G0_2_1_4 + 3.31811046096815e-05*G0_2_1_5 - 2.43506493506534e-05*G0_2_2_0 + 3.90680747823671e-05*G0_2_2_1 - 0.000242436135293319*G0_2_2_2 - 0.000103824746681907*G0_2_2_3 - 0.000377836449265085*G0_2_2_4 + 3.21107463964658e-06*G0_2_2_5 + 5.24475524475613e-05*G0_2_3_0 - 0.000103824746681907*G0_2_3_2 - 0.000188383045525935*G0_2_3_3 - 3.85328956757592e-05*G0_2_3_4 - 0.000111317254174416*G0_2_3_5 + 0.000442057942058017*G0_2_4_0 - 3.31811046096816e-05*G0_2_4_1 - 0.000377836449265085*G0_2_4_2 - 3.85328956757592e-05*G0_2_4_3 + 0.00101898101898119*G0_2_4_4 + 5.99400599400701e-05*G0_2_4_5 - 2.99700299700349e-05*G0_2_5_0 + 3.31811046096815e-05*G0_2_5_1 + 3.21107463964655e-06*G0_2_5_2 - 0.000111317254174416*G0_2_5_3 + 5.99400599400701e-05*G0_2_5_4 - 0.00053946053946063*G0_2_5_5 - 5.24475524475612e-05*G0_3_0_1 + 5.24475524475613e-05*G0_3_0_2 - 5.99400599400704e-05*G0_3_0_4 + 5.994005994007e-05*G0_3_0_5 - 5.24475524475612e-05*G0_3_1_0 + 0.000103824746681907*G0_3_1_1 + 0.000188383045525935*G0_3_1_3 + 0.000111317254174416*G0_3_1_4 + 3.85328956757596e-05*G0_3_1_5 + 5.24475524475613e-05*G0_3_2_0 - 0.000103824746681907*G0_3_2_2 - 0.000188383045525935*G0_3_2_3 - 3.85328956757592e-05*G0_3_2_4 - 0.000111317254174416*G0_3_2_5 + 0.000188383045525935*G0_3_3_1 - 0.000188383045525935*G0_3_3_2 - 0.000222634508348832*G0_3_3_4 + 0.000222634508348832*G0_3_3_5 - 5.99400599400704e-05*G0_3_4_0 + 0.000111317254174416*G0_3_4_1 - 3.85328956757592e-05*G0_3_4_2 - 0.000222634508348832*G0_3_4_3 - 0.000959040959041122*G0_3_4_4 + 5.994005994007e-05*G0_3_5_0 + 3.85328956757596e-05*G0_3_5_1 - 0.000111317254174416*G0_3_5_2 + 0.000222634508348832*G0_3_5_3 + 0.00095904095904112*G0_3_5_5 - 0.00108641358641377*G0_4_0_0 + 2.9970029970035e-05*G0_4_0_1 + 0.000442057942058017*G0_4_0_2 - 5.99400599400704e-05*G0_4_0_3 - 0.00224775224775262*G0_4_0_4 + 2.99700299700351e-05*G0_4_1_0 - 3.21107463964666e-06*G0_4_1_1 - 3.31811046096816e-05*G0_4_1_2 + 0.000111317254174416*G0_4_1_3 + 0.00053946053946063*G0_4_1_4 - 5.99400599400699e-05*G0_4_1_5 + 0.000442057942058017*G0_4_2_0 - 3.31811046096816e-05*G0_4_2_1 - 0.000377836449265085*G0_4_2_2 - 3.85328956757591e-05*G0_4_2_3 + 0.00101898101898119*G0_4_2_4 + 5.99400599400701e-05*G0_4_2_5 - 5.99400599400704e-05*G0_4_3_0 + 0.000111317254174416*G0_4_3_1 - 3.85328956757592e-05*G0_4_3_2 - 0.000222634508348832*G0_4_3_3 - 0.000959040959041122*G0_4_3_4 - 0.00224775224775262*G0_4_4_0 + 0.00053946053946063*G0_4_4_1 + 0.00101898101898119*G0_4_4_2 - 0.000959040959041122*G0_4_4_3 - 0.0107892107892126*G0_4_4_4 - 0.0011988011988014*G0_4_4_5 - 5.99400599400699e-05*G0_4_5_1 + 5.994005994007e-05*G0_4_5_2 - 0.0011988011988014*G0_4_5_4 + 0.0011988011988014*G0_4_5_5 + 0.00108641358641377*G0_5_0_0 - 0.000442057942058016*G0_5_0_1 - 2.99700299700349e-05*G0_5_0_2 + 5.994005994007e-05*G0_5_0_3 + 0.00224775224775263*G0_5_0_5 - 0.000442057942058016*G0_5_1_0 + 0.000377836449265084*G0_5_1_1 + 3.31811046096815e-05*G0_5_1_2 + 3.85328956757596e-05*G0_5_1_3 - 5.99400599400699e-05*G0_5_1_4 - 0.00101898101898119*G0_5_1_5 - 2.99700299700349e-05*G0_5_2_0 + 3.31811046096815e-05*G0_5_2_1 + 3.21107463964653e-06*G0_5_2_2 - 0.000111317254174416*G0_5_2_3 + 5.99400599400699e-05*G0_5_2_4 - 0.00053946053946063*G0_5_2_5 + 5.994005994007e-05*G0_5_3_0 + 3.85328956757596e-05*G0_5_3_1 - 0.000111317254174416*G0_5_3_2 + 0.000222634508348832*G0_5_3_3 + 0.00095904095904112*G0_5_3_5 - 5.99400599400699e-05*G0_5_4_1 + 5.994005994007e-05*G0_5_4_2 - 0.0011988011988014*G0_5_4_4 + 0.0011988011988014*G0_5_4_5 + 0.00224775224775263*G0_5_5_0 - 0.00101898101898119*G0_5_5_1 - 0.00053946053946063*G0_5_5_2 + 0.00095904095904112*G0_5_5_3 + 0.0011988011988014*G0_5_5_4 + 0.0107892107892126*G0_5_5_5;
    A[12] = A[21];
    A[49] = A[94];
    A[33] = A[83] - 1.76609105180565e-05*G0_0_0_0 - 2.54210075638687e-06*G0_0_0_1 + 5.88697017268547e-06*G0_0_0_2 + 3.42514628228971e-05*G0_0_0_3 - 1.07035821321557e-06*G0_0_0_4 - 3.10403881832507e-05*G0_0_0_5 - 2.54210075638687e-06*G0_0_1_0 - 2.06043956043991e-05*G0_0_1_1 + 1.80622948480122e-05*G0_0_1_2 - 7.11788211788334e-05*G0_0_1_3 + 1.07035821321554e-05*G0_0_1_4 + 4.12087912087981e-05*G0_0_1_5 + 5.88697017268547e-06*G0_0_2_0 + 1.80622948480122e-05*G0_0_2_1 - 3.31811046096816e-05*G0_0_2_2 + 3.31811046096816e-05*G0_0_2_3 - 1.17739403453709e-05*G0_0_2_4 + 3.42514628228971e-05*G0_0_3_0 - 7.11788211788334e-05*G0_0_3_1 + 3.31811046096816e-05*G0_0_3_2 - 0.000470957613814836*G0_0_3_3 - 8.9910089910105e-05*G0_0_3_4 - 6.85029256457942e-05*G0_0_3_5 - 1.07035821321557e-06*G0_0_4_0 + 1.07035821321553e-05*G0_0_4_1 - 1.17739403453709e-05*G0_0_4_2 - 8.9910089910105e-05*G0_0_4_3 - 8.13472242043808e-05*G0_0_4_4 - 2.14071642643107e-05*G0_0_4_5 - 3.10403881832507e-05*G0_0_5_0 + 4.12087912087981e-05*G0_0_5_1 - 6.85029256457942e-05*G0_0_5_3 - 2.14071642643108e-05*G0_0_5_4 + 0.000128442985585864*G0_0_5_5 - 2.54210075638687e-06*G0_1_0_0 - 2.06043956043991e-05*G0_1_0_1 + 1.80622948480122e-05*G0_1_0_2 - 7.11788211788334e-05*G0_1_0_3 + 1.07035821321554e-05*G0_1_0_4 + 4.12087912087981e-05*G0_1_0_5 - 2.06043956043991e-05*G0_1_1_0 + 0.000786713286713421*G0_1_1_1 - 0.000189185814185847*G0_1_1_2 + 0.00108641358641377*G0_1_1_3 + 4.12087912087983e-05*G0_1_1_4 + 1.80622948480122e-05*G0_1_2_0 - 0.000189185814185847*G0_1_2_1 + 2.18085485942667e-05*G0_1_2_2 - 0.000400849150849219*G0_1_2_3 - 4.17439703154059e-05*G0_1_2_4 - 4.12087912087983e-05*G0_1_2_5 - 7.11788211788334e-05*G0_1_3_0 + 0.00108641358641377*G0_1_3_1 - 0.000400849150849219*G0_1_3_2 + 0.00202297702297737*G0_1_3_3 + 5.99400599400702e-05*G0_1_3_4 + 0.000224775224775263*G0_1_3_5 + 1.07035821321554e-05*G0_1_4_0 + 4.12087912087983e-05*G0_1_4_1 - 4.1743970315406e-05*G0_1_4_2 + 5.99400599400702e-05*G0_1_4_3 - 2.14071642643108e-05*G0_1_4_4 + 4.12087912087981e-05*G0_1_5_0 - 4.12087912087983e-05*G0_1_5_2 + 0.000224775224775263*G0_1_5_3 - 0.000224775224775262*G0_1_5_5 + 5.88697017268547e-06*G0_2_0_0 + 1.80622948480122e-05*G0_2_0_1 - 3.31811046096816e-05*G0_2_0_2 + 3.31811046096816e-05*G0_2_0_3 - 1.17739403453709e-05*G0_2_0_4 + 1.80622948480122e-05*G0_2_1_0 - 0.000189185814185847*G0_2_1_1 + 2.18085485942667e-05*G0_2_1_2 - 0.000400849150849219*G0_2_1_3 - 4.1743970315406e-05*G0_2_1_4 - 4.12087912087983e-05*G0_2_1_5 - 3.31811046096816e-05*G0_2_2_0 + 2.18085485942667e-05*G0_2_2_1 + 0.000224775224775263*G0_2_2_2 + 0.000346796061081834*G0_2_2_3 + 0.000102754388468692*G0_2_2_4 + 3.10403881832506e-05*G0_2_2_5 + 3.31811046096817e-05*G0_2_3_0 - 0.000400849150849219*G0_2_3_1 + 0.000346796061081834*G0_2_3_2 - 0.000890538033395328*G0_2_3_3 + 1.71257314114486e-05*G0_2_3_4 - 0.000128442985585864*G0_2_3_5 - 1.17739403453709e-05*G0_2_4_0 - 4.1743970315406e-05*G0_2_4_1 + 0.000102754388468692*G0_2_4_2 + 1.71257314114486e-05*G0_2_4_3 + 0.000107035821321554*G0_2_4_4 + 2.14071642643108e-05*G0_2_4_5 - 4.12087912087983e-05*G0_2_5_1 + 3.10403881832506e-05*G0_2_5_2 - 0.000128442985585864*G0_2_5_3 + 2.14071642643108e-05*G0_2_5_4 + 6.85029256457945e-05*G0_2_5_5 + 3.42514628228971e-05*G0_3_0_0 - 7.11788211788334e-05*G0_3_0_1 + 3.31811046096816e-05*G0_3_0_2 - 0.000470957613814836*G0_3_0_3 - 8.9910089910105e-05*G0_3_0_4 - 6.85029256457942e-05*G0_3_0_5 - 7.11788211788334e-05*G0_3_1_0 + 0.00108641358641377*G0_3_1_1 - 0.000400849150849219*G0_3_1_2 + 0.00202297702297737*G0_3_1_3 + 5.99400599400702e-05*G0_3_1_4 + 0.000224775224775263*G0_3_1_5 + 3.31811046096816e-05*G0_3_2_0 - 0.000400849150849219*G0_3_2_1 + 0.000346796061081834*G0_3_2_2 - 0.000890538033395327*G0_3_2_3 + 1.71257314114486e-05*G0_3_2_4 - 0.000128442985585864*G0_3_2_5 - 0.000470957613814836*G0_3_3_0 + 0.00202297702297737*G0_3_3_1 - 0.000890538033395328*G0_3_3_2 + 0.00959040959041121*G0_3_3_3 + 0.000822035107749532*G0_3_3_4 + 0.0011988011988014*G0_3_3_5 - 8.9910089910105e-05*G0_3_4_0 + 5.99400599400702e-05*G0_3_4_1 + 1.71257314114486e-05*G0_3_4_2 + 0.000822035107749532*G0_3_4_3 + 0.000222634508348832*G0_3_4_4 + 0.000137005851291588*G0_3_4_5 - 6.85029256457942e-05*G0_3_5_0 + 0.000224775224775263*G0_3_5_1 - 0.000128442985585864*G0_3_5_2 + 0.0011988011988014*G0_3_5_3 + 0.000137005851291588*G0_3_5_4 - 1.07035821321558e-06*G0_4_0_0 + 1.07035821321554e-05*G0_4_0_1 - 1.17739403453709e-05*G0_4_0_2 - 8.9910089910105e-05*G0_4_0_3 - 8.13472242043808e-05*G0_4_0_4 - 2.14071642643108e-05*G0_4_0_5 + 1.07035821321553e-05*G0_4_1_0 + 4.12087912087983e-05*G0_4_1_1 - 4.1743970315406e-05*G0_4_1_2 + 5.99400599400702e-05*G0_4_1_3 - 2.14071642643107e-05*G0_4_1_4 - 1.17739403453709e-05*G0_4_2_0 - 4.1743970315406e-05*G0_4_2_1 + 0.000102754388468692*G0_4_2_2 + 1.71257314114486e-05*G0_4_2_3 + 0.000107035821321554*G0_4_2_4 + 2.14071642643108e-05*G0_4_2_5 - 8.9910089910105e-05*G0_4_3_0 + 5.99400599400702e-05*G0_4_3_1 + 1.71257314114486e-05*G0_4_3_2 + 0.000822035107749532*G0_4_3_3 + 0.000222634508348832*G0_4_3_4 + 0.000137005851291588*G0_4_3_5 - 8.13472242043808e-05*G0_4_4_0 - 2.14071642643108e-05*G0_4_4_1 + 0.000107035821321554*G0_4_4_2 + 0.000222634508348832*G0_4_4_3 + 0.000162694448408762*G0_4_4_4 - 2.14071642643108e-05*G0_4_5_0 + 2.14071642643108e-05*G0_4_5_2 + 0.000137005851291588*G0_4_5_3 - 0.000137005851291589*G0_4_5_5 - 3.10403881832507e-05*G0_5_0_0 + 4.12087912087981e-05*G0_5_0_1 - 6.85029256457942e-05*G0_5_0_3 - 2.14071642643108e-05*G0_5_0_4 + 0.000128442985585864*G0_5_0_5 + 4.12087912087981e-05*G0_5_1_0 - 4.12087912087983e-05*G0_5_1_2 + 0.000224775224775263*G0_5_1_3 - 0.000224775224775262*G0_5_1_5 - 4.12087912087983e-05*G0_5_2_1 + 3.10403881832506e-05*G0_5_2_2 - 0.000128442985585864*G0_5_2_3 + 2.14071642643108e-05*G0_5_2_4 + 6.85029256457944e-05*G0_5_2_5 - 6.85029256457942e-05*G0_5_3_0 + 0.000224775224775263*G0_5_3_1 - 0.000128442985585864*G0_5_3_2 + 0.0011988011988014*G0_5_3_3 + 0.000137005851291588*G0_5_3_4 - 2.14071642643108e-05*G0_5_4_0 + 2.14071642643108e-05*G0_5_4_2 + 0.000137005851291588*G0_5_4_3 - 0.000137005851291589*G0_5_4_5 + 0.000128442985585864*G0_5_5_0 - 0.000224775224775262*G0_5_5_1 + 6.85029256457944e-05*G0_5_5_2 - 0.000137005851291589*G0_5_5_4 - 0.0011988011988014*G0_5_5_5;
    A[29] = A[92];
    A[81] = A[26] + 1.95786356500675e-05*G0_0_0_1 - 1.95786356500675e-05*G0_0_0_2 + 6.8978640407224e-06*G0_0_0_4 - 6.89786404072234e-06*G0_0_0_5 + 1.95786356500675e-05*G0_0_1_0 - 0.000107154750011911*G0_0_1_1 - 2.63427049141379e-05*G0_0_1_3 - 3.21107463964658e-06*G0_0_1_4 - 6.82056039199012e-05*G0_0_1_5 - 1.95786356500675e-05*G0_0_2_0 + 0.000107154750011911*G0_0_2_2 + 2.63427049141379e-05*G0_0_2_3 + 6.82056039199011e-05*G0_0_2_4 + 3.21107463964661e-06*G0_0_2_5 - 2.63427049141379e-05*G0_0_3_1 + 2.63427049141379e-05*G0_0_3_2 + 6.42214927929322e-06*G0_0_3_4 - 6.42214927929319e-06*G0_0_3_5 + 6.89786404072239e-06*G0_0_4_0 - 3.21107463964658e-06*G0_0_4_1 + 6.82056039199011e-05*G0_0_4_2 + 6.42214927929322e-06*G0_0_4_3 + 4.61443318586255e-05*G0_0_4_4 - 6.89786404072235e-06*G0_0_5_0 - 6.82056039199012e-05*G0_0_5_1 + 3.21107463964661e-06*G0_0_5_2 - 6.42214927929319e-06*G0_0_5_3 - 4.61443318586252e-05*G0_0_5_5 + 1.95786356500675e-05*G0_1_0_0 - 0.000107154750011911*G0_1_0_1 - 2.63427049141379e-05*G0_1_0_3 - 3.21107463964658e-06*G0_1_0_4 - 6.82056039199012e-05*G0_1_0_5 - 0.000107154750011911*G0_1_1_0 + 0.00100841123162569*G0_1_1_1 - 6.55594405594517e-05*G0_1_1_2 + 0.000235895057323669*G0_1_1_3 + 2.30127015841339e-05*G0_1_1_4 + 0.000470600827743765*G0_1_1_5 - 6.55594405594517e-05*G0_1_2_1 + 6.55594405594515e-05*G0_1_2_2 + 2.62237762237806e-05*G0_1_2_4 - 2.62237762237807e-05*G0_1_2_5 - 2.63427049141379e-05*G0_1_3_0 + 0.000235895057323669*G0_1_3_1 + 0.000111555111555131*G0_1_3_3 + 6.66000666000771e-06*G0_1_3_4 + 0.000105132962275837*G0_1_3_5 - 3.21107463964658e-06*G0_1_4_0 + 2.30127015841339e-05*G0_1_4_1 + 2.62237762237806e-05*G0_1_4_2 + 6.66000666000771e-06*G0_1_4_3 - 4.99500499500595e-06*G0_1_4_4 + 6.42214927929314e-06*G0_1_4_5 - 6.82056039199012e-05*G0_1_5_0 + 0.000470600827743765*G0_1_5_1 - 2.62237762237807e-05*G0_1_5_2 + 0.000105132962275837*G0_1_5_3 + 6.42214927929314e-06*G0_1_5_4 + 0.000323961752533236*G0_1_5_5 - 1.95786356500675e-05*G0_2_0_0 + 0.000107154750011911*G0_2_0_2 + 2.63427049141379e-05*G0_2_0_3 + 6.82056039199011e-05*G0_2_0_4 + 3.21107463964661e-06*G0_2_0_5 - 6.55594405594517e-05*G0_2_1_1 + 6.55594405594515e-05*G0_2_1_2 + 2.62237762237806e-05*G0_2_1_4 - 2.62237762237807e-05*G0_2_1_5 + 0.000107154750011911*G0_2_2_0 + 6.55594405594515e-05*G0_2_2_1 - 0.00100841123162569*G0_2_2_2 - 0.000235895057323668*G0_2_2_3 - 0.000470600827743764*G0_2_2_4 - 2.30127015841342e-05*G0_2_2_5 + 2.63427049141379e-05*G0_2_3_0 - 0.000235895057323668*G0_2_3_2 - 0.00011155511155513*G0_2_3_3 - 0.000105132962275837*G0_2_3_4 - 6.66000666000781e-06*G0_2_3_5 + 6.82056039199011e-05*G0_2_4_0 + 2.62237762237806e-05*G0_2_4_1 - 0.000470600827743764*G0_2_4_2 - 0.000105132962275837*G0_2_4_3 - 0.000323961752533236*G0_2_4_4 - 6.42214927929328e-06*G0_2_4_5 + 3.21107463964661e-06*G0_2_5_0 - 2.62237762237807e-05*G0_2_5_1 - 2.30127015841342e-05*G0_2_5_2 - 6.66000666000781e-06*G0_2_5_3 - 6.42214927929328e-06*G0_2_5_4 + 4.99500499500585e-06*G0_2_5_5 - 2.63427049141379e-05*G0_3_0_1 + 2.63427049141379e-05*G0_3_0_2 + 6.42214927929322e-06*G0_3_0_4 - 6.42214927929319e-06*G0_3_0_5 - 2.63427049141379e-05*G0_3_1_0 + 0.000235895057323669*G0_3_1_1 + 0.000111555111555131*G0_3_1_3 + 6.66000666000771e-06*G0_3_1_4 + 0.000105132962275837*G0_3_1_5 + 2.63427049141379e-05*G0_3_2_0 - 0.000235895057323668*G0_3_2_2 - 0.00011155511155513*G0_3_2_3 - 0.000105132962275837*G0_3_2_4 - 6.66000666000781e-06*G0_3_2_5 + 0.000111555111555131*G0_3_3_1 - 0.00011155511155513*G0_3_3_2 - 1.33200133200155e-05*G0_3_3_4 + 1.33200133200155e-05*G0_3_3_5 + 6.42214927929322e-06*G0_3_4_0 + 6.66000666000771e-06*G0_3_4_1 - 0.000105132962275837*G0_3_4_2 - 1.33200133200155e-05*G0_3_4_3 - 2.85428856857462e-06*G0_3_4_4 - 6.42214927929319e-06*G0_3_5_0 + 0.000105132962275837*G0_3_5_1 - 6.6600066600078e-06*G0_3_5_2 + 1.33200133200155e-05*G0_3_5_3 + 2.85428856857458e-06*G0_3_5_5 + 6.89786404072239e-06*G0_4_0_0 - 3.21107463964658e-06*G0_4_0_1 + 6.82056039199011e-05*G0_4_0_2 + 6.42214927929322e-06*G0_4_0_3 + 4.61443318586255e-05*G0_4_0_4 - 3.21107463964658e-06*G0_4_1_0 + 2.30127015841339e-05*G0_4_1_1 + 2.62237762237806e-05*G0_4_1_2 + 6.66000666000771e-06*G0_4_1_3 - 4.99500499500595e-06*G0_4_1_4 + 6.42214927929313e-06*G0_4_1_5 + 6.82056039199011e-05*G0_4_2_0 + 2.62237762237806e-05*G0_4_2_1 - 0.000470600827743764*G0_4_2_2 - 0.000105132962275837*G0_4_2_3 - 0.000323961752533236*G0_4_2_4 - 6.42214927929328e-06*G0_4_2_5 + 6.42214927929322e-06*G0_4_3_0 + 6.66000666000771e-06*G0_4_3_1 - 0.000105132962275837*G0_4_3_2 - 1.33200133200155e-05*G0_4_3_3 - 2.8542885685746e-06*G0_4_3_4 + 4.61443318586255e-05*G0_4_4_0 - 4.99500499500594e-06*G0_4_4_1 - 0.000323961752533236*G0_4_4_2 - 2.8542885685746e-06*G0_4_4_3 + 0.000111317254174416*G0_4_4_4 + 2.2834308548598e-05*G0_4_4_5 + 6.42214927929313e-06*G0_4_5_1 - 6.42214927929328e-06*G0_4_5_2 + 2.28343085485981e-05*G0_4_5_4 - 2.28343085485982e-05*G0_4_5_5 - 6.89786404072235e-06*G0_5_0_0 - 6.82056039199012e-05*G0_5_0_1 + 3.21107463964661e-06*G0_5_0_2 - 6.42214927929319e-06*G0_5_0_3 - 4.61443318586252e-05*G0_5_0_5 - 6.82056039199012e-05*G0_5_1_0 + 0.000470600827743765*G0_5_1_1 - 2.62237762237807e-05*G0_5_1_2 + 0.000105132962275837*G0_5_1_3 + 6.42214927929314e-06*G0_5_1_4 + 0.000323961752533236*G0_5_1_5 + 3.21107463964661e-06*G0_5_2_0 - 2.62237762237807e-05*G0_5_2_1 - 2.30127015841342e-05*G0_5_2_2 - 6.66000666000781e-06*G0_5_2_3 - 6.42214927929328e-06*G0_5_2_4 + 4.99500499500584e-06*G0_5_2_5 - 6.42214927929319e-06*G0_5_3_0 + 0.000105132962275837*G0_5_3_1 - 6.66000666000781e-06*G0_5_3_2 + 1.33200133200155e-05*G0_5_3_3 + 2.85428856857456e-06*G0_5_3_5 + 6.42214927929313e-06*G0_5_4_1 - 6.42214927929328e-06*G0_5_4_2 + 2.2834308548598e-05*G0_5_4_4 - 2.28343085485982e-05*G0_5_4_5 - 4.61443318586252e-05*G0_5_5_0 + 0.000323961752533236*G0_5_5_1 + 4.99500499500584e-06*G0_5_5_2 + 2.85428856857459e-06*G0_5_5_3 - 2.28343085485982e-05*G0_5_5_4 - 0.000111317254174416*G0_5_5_5;
    A[31] = A[81] + 5.80223348080587e-05*G0_0_0_0 - 1.78987678987709e-05*G0_0_0_1 - 6.67487274630243e-06*G0_0_0_2 - 1.48660862946602e-06*G0_0_0_3 + 1.96232339089515e-05*G0_0_0_4 + 3.2289139432002e-05*G0_0_0_5 - 1.78987678987709e-05*G0_0_1_0 + 4.99500499500584e-05*G0_0_1_1 - 5.82750582750684e-06*G0_0_1_3 - 7.07625707625828e-06*G0_0_1_4 + 3.49650349650409e-05*G0_0_1_5 - 6.67487274630243e-06*G0_0_2_0 + 6.67487274630244e-06*G0_0_2_2 + 4.34089719804081e-06*G0_0_2_3 - 4.34089719804076e-06*G0_0_2_5 - 1.48660862946602e-06*G0_0_3_0 - 5.82750582750683e-06*G0_0_3_1 + 4.34089719804081e-06*G0_0_3_2 + 2.8305028305033e-05*G0_0_3_3 + 1.71257314114486e-05*G0_0_3_4 + 1.16550116550136e-05*G0_0_3_5 + 1.96232339089515e-05*G0_0_4_0 - 7.07625707625828e-06*G0_0_4_1 + 1.71257314114486e-05*G0_0_4_3 + 3.94843251986175e-05*G0_0_4_4 + 2.28343085485981e-05*G0_0_4_5 + 3.2289139432002e-05*G0_0_5_0 + 3.49650349650409e-05*G0_0_5_1 - 4.34089719804076e-06*G0_0_5_2 + 1.16550116550136e-05*G0_0_5_3 + 2.28343085485981e-05*G0_0_5_4 + 6.49350649350757e-05*G0_0_5_5 - 1.78987678987709e-05*G0_1_0_0 + 4.99500499500584e-05*G0_1_0_1 - 5.82750582750684e-06*G0_1_0_3 - 7.07625707625828e-06*G0_1_0_4 + 3.49650349650409e-05*G0_1_0_5 + 4.99500499500584e-05*G0_1_1_0 - 4.99500499500584e-05*G0_1_1_2 + 0.000228937728937768*G0_1_1_3 - 0.000228937728937768*G0_1_1_5 - 4.99500499500584e-05*G0_1_2_1 + 1.78987678987709e-05*G0_1_2_2 - 3.4965034965041e-05*G0_1_2_3 + 7.07625707625826e-06*G0_1_2_4 + 5.82750582750677e-06*G0_1_2_5 - 5.82750582750683e-06*G0_1_3_0 + 0.000228937728937768*G0_1_3_1 - 3.4965034965041e-05*G0_1_3_2 + 0.000233100233100273*G0_1_3_3 + 1.16550116550137e-05*G0_1_3_4 - 7.07625707625828e-06*G0_1_4_0 + 7.07625707625826e-06*G0_1_4_2 + 1.16550116550137e-05*G0_1_4_3 - 1.16550116550135e-05*G0_1_4_5 + 3.49650349650409e-05*G0_1_5_0 - 0.000228937728937767*G0_1_5_1 + 5.82750582750676e-06*G0_1_5_2 - 1.16550116550135e-05*G0_1_5_4 - 0.000233100233100272*G0_1_5_5 - 6.67487274630243e-06*G0_2_0_0 + 6.67487274630244e-06*G0_2_0_2 + 4.34089719804081e-06*G0_2_0_3 - 4.34089719804076e-06*G0_2_0_5 - 4.99500499500584e-05*G0_2_1_1 + 1.78987678987709e-05*G0_2_1_2 - 3.4965034965041e-05*G0_2_1_3 + 7.07625707625826e-06*G0_2_1_4 + 5.82750582750677e-06*G0_2_1_5 + 6.67487274630244e-06*G0_2_2_0 + 1.78987678987709e-05*G0_2_2_1 - 5.80223348080589e-05*G0_2_2_2 - 3.2289139432002e-05*G0_2_2_3 - 1.96232339089515e-05*G0_2_2_4 + 1.48660862946604e-06*G0_2_2_5 + 4.34089719804081e-06*G0_2_3_0 - 3.4965034965041e-05*G0_2_3_1 - 3.2289139432002e-05*G0_2_3_2 - 6.49350649350761e-05*G0_2_3_3 - 2.28343085485981e-05*G0_2_3_4 - 1.16550116550137e-05*G0_2_3_5 + 7.07625707625826e-06*G0_2_4_1 - 1.96232339089515e-05*G0_2_4_2 - 2.28343085485981e-05*G0_2_4_3 - 3.94843251986176e-05*G0_2_4_4 - 1.71257314114486e-05*G0_2_4_5 - 4.34089719804076e-06*G0_2_5_0 + 5.82750582750676e-06*G0_2_5_1 + 1.48660862946604e-06*G0_2_5_2 - 1.16550116550137e-05*G0_2_5_3 - 1.71257314114486e-05*G0_2_5_4 - 2.83050283050331e-05*G0_2_5_5 - 1.48660862946602e-06*G0_3_0_0 - 5.82750582750683e-06*G0_3_0_1 + 4.34089719804081e-06*G0_3_0_2 + 2.8305028305033e-05*G0_3_0_3 + 1.71257314114486e-05*G0_3_0_4 + 1.16550116550136e-05*G0_3_0_5 - 5.82750582750683e-06*G0_3_1_0 + 0.000228937728937768*G0_3_1_1 - 3.4965034965041e-05*G0_3_1_2 + 0.000233100233100273*G0_3_1_3 + 1.16550116550137e-05*G0_3_1_4 + 4.34089719804081e-06*G0_3_2_0 - 3.4965034965041e-05*G0_3_2_1 - 3.2289139432002e-05*G0_3_2_2 - 6.49350649350761e-05*G0_3_2_3 - 2.28343085485981e-05*G0_3_2_4 - 1.16550116550137e-05*G0_3_2_5 + 2.8305028305033e-05*G0_3_3_0 + 0.000233100233100273*G0_3_3_1 - 6.49350649350761e-05*G0_3_3_2 - 0.000299700299700349*G0_3_3_3 - 7.99200799200933e-05*G0_3_3_4 - 3.33000333000386e-05*G0_3_3_5 + 1.71257314114486e-05*G0_3_4_0 + 1.16550116550137e-05*G0_3_4_1 - 2.28343085485981e-05*G0_3_4_2 - 7.99200799200933e-05*G0_3_4_3 - 3.42514628228972e-05*G0_3_4_4 + 1.16550116550136e-05*G0_3_5_0 - 1.16550116550137e-05*G0_3_5_2 - 3.33000333000385e-05*G0_3_5_3 + 3.33000333000392e-05*G0_3_5_5 + 1.96232339089515e-05*G0_4_0_0 - 7.07625707625828e-06*G0_4_0_1 + 1.71257314114486e-05*G0_4_0_3 + 3.94843251986175e-05*G0_4_0_4 + 2.28343085485981e-05*G0_4_0_5 - 7.07625707625828e-06*G0_4_1_0 + 7.07625707625826e-06*G0_4_1_2 + 1.16550116550137e-05*G0_4_1_3 - 1.16550116550135e-05*G0_4_1_5 + 7.07625707625826e-06*G0_4_2_1 - 1.96232339089515e-05*G0_4_2_2 - 2.28343085485981e-05*G0_4_2_3 - 3.94843251986176e-05*G0_4_2_4 - 1.71257314114486e-05*G0_4_2_5 + 1.71257314114486e-05*G0_4_3_0 + 1.16550116550137e-05*G0_4_3_1 - 2.28343085485981e-05*G0_4_3_2 - 7.99200799200933e-05*G0_4_3_3 - 3.42514628228972e-05*G0_4_3_4 + 3.94843251986175e-05*G0_4_4_0 - 3.94843251986176e-05*G0_4_4_2 - 3.42514628228972e-05*G0_4_4_3 + 3.42514628228971e-05*G0_4_4_5 + 2.28343085485981e-05*G0_4_5_0 - 1.16550116550135e-05*G0_4_5_1 - 1.71257314114486e-05*G0_4_5_2 + 3.42514628228971e-05*G0_4_5_4 + 7.99200799200935e-05*G0_4_5_5 + 3.2289139432002e-05*G0_5_0_0 + 3.49650349650409e-05*G0_5_0_1 - 4.34089719804076e-06*G0_5_0_2 + 1.16550116550136e-05*G0_5_0_3 + 2.28343085485981e-05*G0_5_0_4 + 6.49350649350757e-05*G0_5_0_5 + 3.49650349650409e-05*G0_5_1_0 - 0.000228937728937768*G0_5_1_1 + 5.82750582750677e-06*G0_5_1_2 - 1.16550116550135e-05*G0_5_1_4 - 0.000233100233100272*G0_5_1_5 - 4.34089719804076e-06*G0_5_2_0 + 5.82750582750677e-06*G0_5_2_1 + 1.48660862946604e-06*G0_5_2_2 - 1.16550116550137e-05*G0_5_2_3 - 1.71257314114486e-05*G0_5_2_4 - 2.83050283050331e-05*G0_5_2_5 + 1.16550116550136e-05*G0_5_3_0 - 1.16550116550137e-05*G0_5_3_2 - 3.33000333000385e-05*G0_5_3_3 + 3.33000333000392e-05*G0_5_3_5 + 2.28343085485981e-05*G0_5_4_0 - 1.16550116550135e-05*G0_5_4_1 - 1.71257314114486e-05*G0_5_4_2 + 3.42514628228971e-05*G0_5_4_4 + 7.99200799200935e-05*G0_5_4_5 + 6.49350649350757e-05*G0_5_5_0 - 0.000233100233100272*G0_5_5_1 - 2.83050283050331e-05*G0_5_5_2 + 3.33000333000392e-05*G0_5_5_3 + 7.99200799200935e-05*G0_5_5_4 + 0.000299700299700351*G0_5_5_5;
    A[5] = A[31] + 0.00100841123162569*G0_0_0_0 - 6.55594405594516e-05*G0_0_0_1 - 0.000107154750011911*G0_0_0_2 + 2.3012701584134e-05*G0_0_0_3 + 0.000470600827743765*G0_0_0_4 + 0.000235895057323668*G0_0_0_5 - 6.55594405594516e-05*G0_0_1_0 + 6.55594405594517e-05*G0_0_1_1 + 2.62237762237807e-05*G0_0_1_3 - 2.62237762237806e-05*G0_0_1_4 - 0.000107154750011911*G0_0_2_0 + 1.95786356500676e-05*G0_0_2_2 - 3.21107463964663e-06*G0_0_2_3 - 6.82056039199012e-05*G0_0_2_4 - 2.63427049141379e-05*G0_0_2_5 + 2.3012701584134e-05*G0_0_3_0 + 2.62237762237807e-05*G0_0_3_1 - 3.21107463964663e-06*G0_0_3_2 - 4.99500499500569e-06*G0_0_3_3 + 6.42214927929329e-06*G0_0_3_4 + 6.66000666000781e-06*G0_0_3_5 + 0.000470600827743765*G0_0_4_0 - 2.62237762237806e-05*G0_0_4_1 - 6.82056039199012e-05*G0_0_4_2 + 6.42214927929329e-06*G0_0_4_3 + 0.000323961752533236*G0_0_4_4 + 0.000105132962275837*G0_0_4_5 + 0.000235895057323668*G0_0_5_0 - 2.63427049141379e-05*G0_0_5_2 + 6.66000666000781e-06*G0_0_5_3 + 0.000105132962275837*G0_0_5_4 + 0.00011155511155513*G0_0_5_5 - 6.55594405594516e-05*G0_1_0_0 + 6.55594405594517e-05*G0_1_0_1 + 2.62237762237807e-05*G0_1_0_3 - 2.62237762237806e-05*G0_1_0_4 + 6.55594405594517e-05*G0_1_1_0 - 0.00100841123162569*G0_1_1_1 + 0.000107154750011911*G0_1_1_2 - 0.000470600827743765*G0_1_1_3 - 2.3012701584134e-05*G0_1_1_4 - 0.000235895057323669*G0_1_1_5 + 0.000107154750011911*G0_1_2_1 - 1.95786356500676e-05*G0_1_2_2 + 6.82056039199013e-05*G0_1_2_3 + 3.21107463964662e-06*G0_1_2_4 + 2.6342704914138e-05*G0_1_2_5 + 2.62237762237807e-05*G0_1_3_0 - 0.000470600827743765*G0_1_3_1 + 6.82056039199013e-05*G0_1_3_2 - 0.000323961752533237*G0_1_3_3 - 6.42214927929323e-06*G0_1_3_4 - 0.000105132962275837*G0_1_3_5 - 2.62237762237806e-05*G0_1_4_0 - 2.3012701584134e-05*G0_1_4_1 + 3.21107463964662e-06*G0_1_4_2 - 6.42214927929323e-06*G0_1_4_3 + 4.99500499500579e-06*G0_1_4_4 - 6.66000666000777e-06*G0_1_4_5 - 0.000235895057323669*G0_1_5_1 + 2.6342704914138e-05*G0_1_5_2 - 0.000105132962275837*G0_1_5_3 - 6.66000666000776e-06*G0_1_5_4 - 0.00011155511155513*G0_1_5_5 - 0.000107154750011911*G0_2_0_0 + 1.95786356500676e-05*G0_2_0_2 - 3.21107463964663e-06*G0_2_0_3 - 6.82056039199012e-05*G0_2_0_4 - 2.63427049141379e-05*G0_2_0_5 + 0.000107154750011911*G0_2_1_1 - 1.95786356500676e-05*G0_2_1_2 + 6.82056039199013e-05*G0_2_1_3 + 3.21107463964662e-06*G0_2_1_4 + 2.6342704914138e-05*G0_2_1_5 + 1.95786356500676e-05*G0_2_2_0 - 1.95786356500676e-05*G0_2_2_1 + 6.89786404072234e-06*G0_2_2_3 - 6.89786404072237e-06*G0_2_2_4 - 3.21107463964663e-06*G0_2_3_0 + 6.82056039199013e-05*G0_2_3_1 + 6.89786404072236e-06*G0_2_3_2 + 4.61443318586256e-05*G0_2_3_3 + 6.42214927929328e-06*G0_2_3_5 - 6.82056039199013e-05*G0_2_4_0 + 3.21107463964661e-06*G0_2_4_1 - 6.89786404072237e-06*G0_2_4_2 - 4.61443318586255e-05*G0_2_4_4 - 6.42214927929323e-06*G0_2_4_5 - 2.63427049141379e-05*G0_2_5_0 + 2.6342704914138e-05*G0_2_5_1 + 6.42214927929328e-06*G0_2_5_3 - 6.42214927929324e-06*G0_2_5_4 + 2.3012701584134e-05*G0_3_0_0 + 2.62237762237807e-05*G0_3_0_1 - 3.21107463964663e-06*G0_3_0_2 - 4.99500499500569e-06*G0_3_0_3 + 6.42214927929329e-06*G0_3_0_4 + 6.6600066600078e-06*G0_3_0_5 + 2.62237762237807e-05*G0_3_1_0 - 0.000470600827743765*G0_3_1_1 + 6.82056039199013e-05*G0_3_1_2 - 0.000323961752533237*G0_3_1_3 - 6.42214927929323e-06*G0_3_1_4 - 0.000105132962275837*G0_3_1_5 - 3.21107463964663e-06*G0_3_2_0 + 6.82056039199013e-05*G0_3_2_1 + 6.89786404072236e-06*G0_3_2_2 + 4.61443318586256e-05*G0_3_2_3 + 6.42214927929328e-06*G0_3_2_5 - 4.99500499500569e-06*G0_3_3_0 - 0.000323961752533236*G0_3_3_1 + 4.61443318586256e-05*G0_3_3_2 + 0.000111317254174414*G0_3_3_3 + 2.2834308548598e-05*G0_3_3_4 - 2.85428856857513e-06*G0_3_3_5 + 6.42214927929329e-06*G0_3_4_0 - 6.42214927929323e-06*G0_3_4_1 + 2.2834308548598e-05*G0_3_4_3 - 2.28343085485981e-05*G0_3_4_4 + 6.6600066600078e-06*G0_3_5_0 - 0.000105132962275837*G0_3_5_1 + 6.42214927929328e-06*G0_3_5_2 - 2.85428856857516e-06*G0_3_5_3 - 1.33200133200156e-05*G0_3_5_5 + 0.000470600827743765*G0_4_0_0 - 2.62237762237806e-05*G0_4_0_1 - 6.82056039199012e-05*G0_4_0_2 + 6.42214927929329e-06*G0_4_0_3 + 0.000323961752533236*G0_4_0_4 + 0.000105132962275837*G0_4_0_5 - 2.62237762237806e-05*G0_4_1_0 - 2.3012701584134e-05*G0_4_1_1 + 3.21107463964661e-06*G0_4_1_2 - 6.42214927929323e-06*G0_4_1_3 + 4.99500499500579e-06*G0_4_1_4 - 6.66000666000776e-06*G0_4_1_5 - 6.82056039199013e-05*G0_4_2_0 + 3.21107463964662e-06*G0_4_2_1 - 6.89786404072237e-06*G0_4_2_2 - 4.61443318586255e-05*G0_4_2_4 - 6.42214927929323e-06*G0_4_2_5 + 6.42214927929329e-06*G0_4_3_0 - 6.42214927929323e-06*G0_4_3_1 + 2.2834308548598e-05*G0_4_3_3 - 2.28343085485981e-05*G0_4_3_4 + 0.000323961752533236*G0_4_4_0 + 4.99500499500579e-06*G0_4_4_1 - 4.61443318586255e-05*G0_4_4_2 - 2.28343085485981e-05*G0_4_4_3 - 0.000111317254174415*G0_4_4_4 + 2.85428856857485e-06*G0_4_4_5 + 0.000105132962275837*G0_4_5_0 - 6.66000666000776e-06*G0_4_5_1 - 6.42214927929323e-06*G0_4_5_2 + 2.85428856857485e-06*G0_4_5_4 + 1.33200133200156e-05*G0_4_5_5 + 0.000235895057323668*G0_5_0_0 - 2.63427049141379e-05*G0_5_0_2 + 6.66000666000781e-06*G0_5_0_3 + 0.000105132962275837*G0_5_0_4 + 0.00011155511155513*G0_5_0_5 - 0.000235895057323669*G0_5_1_1 + 2.6342704914138e-05*G0_5_1_2 - 0.000105132962275837*G0_5_1_3 - 6.66000666000776e-06*G0_5_1_4 - 0.00011155511155513*G0_5_1_5 - 2.63427049141379e-05*G0_5_2_0 + 2.6342704914138e-05*G0_5_2_1 + 6.42214927929328e-06*G0_5_2_3 - 6.42214927929323e-06*G0_5_2_4 + 6.6600066600078e-06*G0_5_3_0 - 0.000105132962275837*G0_5_3_1 + 6.42214927929328e-06*G0_5_3_2 - 2.85428856857516e-06*G0_5_3_3 - 1.33200133200157e-05*G0_5_3_5 + 0.000105132962275837*G0_5_4_0 - 6.66000666000776e-06*G0_5_4_1 - 6.42214927929323e-06*G0_5_4_2 + 2.85428856857482e-06*G0_5_4_4 + 1.33200133200156e-05*G0_5_4_5 + 0.00011155511155513*G0_5_5_0 - 0.00011155511155513*G0_5_5_1 - 1.33200133200157e-05*G0_5_5_3 + 1.33200133200156e-05*G0_5_5_4;
    A[13] = A[31];
    A[50] = A[5];
    A[44] = A[66] - 0.000242436135293319*G0_0_0_0 + 3.90680747823671e-05*G0_0_0_1 - 2.43506493506534e-05*G0_0_0_2 + 3.21107463964655e-06*G0_0_0_3 - 0.000377836449265085*G0_0_0_4 - 0.000103824746681907*G0_0_0_5 + 3.90680747823671e-05*G0_0_1_0 - 3.90680747823671e-05*G0_0_1_1 + 3.31811046096815e-05*G0_0_1_3 - 3.31811046096816e-05*G0_0_1_4 - 2.43506493506534e-05*G0_0_2_0 + 0.000168581418581447*G0_0_2_2 - 2.99700299700348e-05*G0_0_2_3 + 0.000442057942058017*G0_0_2_4 + 5.24475524475613e-05*G0_0_2_5 + 3.21107463964656e-06*G0_0_3_0 + 3.31811046096816e-05*G0_0_3_1 - 2.99700299700348e-05*G0_0_3_2 - 0.00053946053946063*G0_0_3_3 + 5.994005994007e-05*G0_0_3_4 - 0.000111317254174416*G0_0_3_5 - 0.000377836449265085*G0_0_4_0 - 3.31811046096816e-05*G0_0_4_1 + 0.000442057942058017*G0_0_4_2 + 5.994005994007e-05*G0_0_4_3 + 0.00101898101898119*G0_0_4_4 - 3.85328956757595e-05*G0_0_4_5 - 0.000103824746681907*G0_0_5_0 + 5.24475524475613e-05*G0_0_5_2 - 0.000111317254174416*G0_0_5_3 - 3.85328956757594e-05*G0_0_5_4 - 0.000188383045525934*G0_0_5_5 + 3.90680747823671e-05*G0_1_0_0 - 3.90680747823671e-05*G0_1_0_1 + 3.31811046096815e-05*G0_1_0_3 - 3.31811046096816e-05*G0_1_0_4 - 3.90680747823671e-05*G0_1_1_0 + 0.000242436135293319*G0_1_1_1 + 2.43506493506534e-05*G0_1_1_2 + 0.000377836449265084*G0_1_1_3 - 3.2110746396466e-06*G0_1_1_4 + 0.000103824746681907*G0_1_1_5 + 2.43506493506534e-05*G0_1_2_1 - 0.000168581418581447*G0_1_2_2 - 0.000442057942058016*G0_1_2_3 + 2.99700299700349e-05*G0_1_2_4 - 5.24475524475613e-05*G0_1_2_5 + 3.31811046096815e-05*G0_1_3_0 + 0.000377836449265084*G0_1_3_1 - 0.000442057942058016*G0_1_3_2 - 0.00101898101898119*G0_1_3_3 - 5.99400599400698e-05*G0_1_3_4 + 3.85328956757594e-05*G0_1_3_5 - 3.31811046096816e-05*G0_1_4_0 - 3.2110746396466e-06*G0_1_4_1 + 2.99700299700348e-05*G0_1_4_2 - 5.99400599400698e-05*G0_1_4_3 + 0.00053946053946063*G0_1_4_4 + 0.000111317254174416*G0_1_4_5 + 0.000103824746681907*G0_1_5_1 - 5.24475524475613e-05*G0_1_5_2 + 3.85328956757594e-05*G0_1_5_3 + 0.000111317254174416*G0_1_5_4 + 0.000188383045525934*G0_1_5_5 - 2.43506493506534e-05*G0_2_0_0 + 0.000168581418581447*G0_2_0_2 - 2.99700299700348e-05*G0_2_0_3 + 0.000442057942058017*G0_2_0_4 + 5.24475524475613e-05*G0_2_0_5 + 2.43506493506534e-05*G0_2_1_1 - 0.000168581418581447*G0_2_1_2 - 0.000442057942058016*G0_2_1_3 + 2.99700299700349e-05*G0_2_1_4 - 5.24475524475613e-05*G0_2_1_5 + 0.000168581418581447*G0_2_2_0 - 0.000168581418581447*G0_2_2_1 + 0.00108641358641377*G0_2_2_3 - 0.00108641358641377*G0_2_2_4 - 2.99700299700348e-05*G0_2_3_0 - 0.000442057942058016*G0_2_3_1 + 0.00108641358641377*G0_2_3_2 + 0.00224775224775263*G0_2_3_3 + 5.994005994007e-05*G0_2_3_5 + 0.000442057942058017*G0_2_4_0 + 2.99700299700349e-05*G0_2_4_1 - 0.00108641358641377*G0_2_4_2 - 0.00224775224775263*G0_2_4_4 - 5.99400599400699e-05*G0_2_4_5 + 5.24475524475613e-05*G0_2_5_0 - 5.24475524475613e-05*G0_2_5_1 + 5.99400599400701e-05*G0_2_5_3 - 5.99400599400699e-05*G0_2_5_4 + 3.21107463964655e-06*G0_3_0_0 + 3.31811046096815e-05*G0_3_0_1 - 2.99700299700348e-05*G0_3_0_2 - 0.00053946053946063*G0_3_0_3 + 5.99400599400699e-05*G0_3_0_4 - 0.000111317254174416*G0_3_0_5 + 3.31811046096815e-05*G0_3_1_0 + 0.000377836449265084*G0_3_1_1 - 0.000442057942058016*G0_3_1_2 - 0.00101898101898119*G0_3_1_3 - 5.99400599400698e-05*G0_3_1_4 + 3.85328956757594e-05*G0_3_1_5 - 2.99700299700348e-05*G0_3_2_0 - 0.000442057942058016*G0_3_2_1 + 0.00108641358641377*G0_3_2_2 + 0.00224775224775263*G0_3_2_3 + 5.994005994007e-05*G0_3_2_5 - 0.00053946053946063*G0_3_3_0 - 0.00101898101898119*G0_3_3_1 + 0.00224775224775263*G0_3_3_2 + 0.0107892107892126*G0_3_3_3 + 0.0011988011988014*G0_3_3_4 + 0.000959040959041121*G0_3_3_5 + 5.99400599400699e-05*G0_3_4_0 - 5.99400599400698e-05*G0_3_4_1 + 0.0011988011988014*G0_3_4_3 - 0.0011988011988014*G0_3_4_4 - 0.000111317254174416*G0_3_5_0 + 3.85328956757594e-05*G0_3_5_1 + 5.994005994007e-05*G0_3_5_2 + 0.000959040959041121*G0_3_5_3 + 0.000222634508348832*G0_3_5_5 - 0.000377836449265085*G0_4_0_0 - 3.31811046096816e-05*G0_4_0_1 + 0.000442057942058017*G0_4_0_2 + 5.99400599400699e-05*G0_4_0_3 + 0.00101898101898119*G0_4_0_4 - 3.85328956757594e-05*G0_4_0_5 - 3.31811046096816e-05*G0_4_1_0 - 3.21107463964662e-06*G0_4_1_1 + 2.99700299700348e-05*G0_4_1_2 - 5.99400599400698e-05*G0_4_1_3 + 0.00053946053946063*G0_4_1_4 + 0.000111317254174416*G0_4_1_5 + 0.000442057942058017*G0_4_2_0 + 2.99700299700348e-05*G0_4_2_1 - 0.00108641358641377*G0_4_2_2 - 0.00224775224775263*G0_4_2_4 - 5.99400599400699e-05*G0_4_2_5 + 5.99400599400699e-05*G0_4_3_0 - 5.99400599400698e-05*G0_4_3_1 + 0.0011988011988014*G0_4_3_3 - 0.0011988011988014*G0_4_3_4 + 0.00101898101898119*G0_4_4_0 + 0.00053946053946063*G0_4_4_1 - 0.00224775224775263*G0_4_4_2 - 0.0011988011988014*G0_4_4_3 - 0.0107892107892126*G0_4_4_4 - 0.000959040959041121*G0_4_4_5 - 3.85328956757594e-05*G0_4_5_0 + 0.000111317254174416*G0_4_5_1 - 5.99400599400699e-05*G0_4_5_2 - 0.000959040959041121*G0_4_5_4 - 0.000222634508348832*G0_4_5_5 - 0.000103824746681907*G0_5_0_0 + 5.24475524475613e-05*G0_5_0_2 - 0.000111317254174416*G0_5_0_3 - 3.85328956757594e-05*G0_5_0_4 - 0.000188383045525934*G0_5_0_5 + 0.000103824746681907*G0_5_1_1 - 5.24475524475613e-05*G0_5_1_2 + 3.85328956757594e-05*G0_5_1_3 + 0.000111317254174416*G0_5_1_4 + 0.000188383045525934*G0_5_1_5 + 5.24475524475613e-05*G0_5_2_0 - 5.24475524475613e-05*G0_5_2_1 + 5.99400599400701e-05*G0_5_2_3 - 5.99400599400699e-05*G0_5_2_4 - 0.000111317254174416*G0_5_3_0 + 3.85328956757594e-05*G0_5_3_1 + 5.99400599400701e-05*G0_5_3_2 + 0.000959040959041121*G0_5_3_3 + 0.000222634508348832*G0_5_3_5 - 3.85328956757595e-05*G0_5_4_0 + 0.000111317254174416*G0_5_4_1 - 5.99400599400699e-05*G0_5_4_2 - 0.000959040959041121*G0_5_4_4 - 0.000222634508348832*G0_5_4_5 - 0.000188383045525934*G0_5_5_0 + 0.000188383045525934*G0_5_5_1 + 0.000222634508348832*G0_5_5_3 - 0.000222634508348832*G0_5_5_4;
    A[63] = A[36];
    A[0] = 0.00187798312798345*G0_0_0_0 - 8.78750878751026e-05*G0_0_0_1 - 8.78750878751028e-05*G0_0_0_2 + 1.8962518962522e-05*G0_0_0_3 + 0.000370462870462934*G0_0_0_4 + 0.000370462870462933*G0_0_0_5 - 8.78750878751026e-05*G0_0_1_0 + 5.68875568875663e-06*G0_0_1_1 + 5.68875568875664e-06*G0_0_1_2 - 1.89625189625221e-06*G0_0_1_3 - 1.89625189625222e-05*G0_0_1_4 - 3.79250379250443e-05*G0_0_1_5 - 8.78750878751028e-05*G0_0_2_0 + 5.68875568875664e-06*G0_0_2_1 + 5.68875568875666e-06*G0_0_2_2 - 1.89625189625221e-06*G0_0_2_3 - 3.79250379250444e-05*G0_0_2_4 - 1.89625189625222e-05*G0_0_2_5 + 1.8962518962522e-05*G0_0_3_0 - 1.89625189625221e-06*G0_0_3_1 - 1.89625189625221e-06*G0_0_3_2 - 1.51700151700177e-05*G0_0_3_3 + 0.000370462870462934*G0_0_4_0 - 1.89625189625222e-05*G0_0_4_1 - 3.79250379250444e-05*G0_0_4_2 + 0.000151700151700178*G0_0_4_4 + 7.58500758500887e-05*G0_0_4_5 + 0.000370462870462933*G0_0_5_0 - 3.79250379250443e-05*G0_0_5_1 - 1.89625189625222e-05*G0_0_5_2 + 7.58500758500887e-05*G0_0_5_4 + 0.000151700151700177*G0_0_5_5 - 8.78750878751026e-05*G0_1_0_0 + 5.68875568875663e-06*G0_1_0_1 + 5.68875568875664e-06*G0_1_0_2 - 1.89625189625221e-06*G0_1_0_3 - 1.89625189625222e-05*G0_1_0_4 - 3.79250379250443e-05*G0_1_0_5 + 5.68875568875663e-06*G0_1_1_0 + 1.17739403453709e-05*G0_1_1_1 - 2.00857343714521e-06*G0_1_1_2 + 9.24340210054652e-06*G0_1_1_3 + 5.41125541125632e-06*G0_1_1_4 + 1.67887667887696e-05*G0_1_1_5 + 5.68875568875664e-06*G0_1_2_0 - 2.00857343714521e-06*G0_1_2_1 - 2.0085734371452e-06*G0_1_2_2 - 3.10536024821792e-06*G0_1_2_3 + 1.61875161875189e-06*G0_1_2_4 + 1.61875161875189e-06*G0_1_2_5 - 1.89625189625221e-06*G0_1_3_0 + 9.24340210054652e-06*G0_1_3_1 - 3.10536024821792e-06*G0_1_3_2 - 1.37428708857303e-06*G0_1_3_3 - 7.03000703000822e-06*G0_1_3_4 + 5.55000555000655e-07*G0_1_3_5 - 1.89625189625222e-05*G0_1_4_0 + 5.41125541125632e-06*G0_1_4_1 + 1.61875161875189e-06*G0_1_4_2 - 7.03000703000822e-06*G0_1_4_3 - 2.10900210900246e-05*G0_1_4_4 - 1.40600140600164e-05*G0_1_4_5 - 3.79250379250443e-05*G0_1_5_0 + 1.67887667887696e-05*G0_1_5_1 + 1.61875161875189e-06*G0_1_5_2 + 5.55000555000655e-07*G0_1_5_3 - 1.40600140600164e-05*G0_1_5_4 - 2.10900210900246e-05*G0_1_5_5 - 8.78750878751028e-05*G0_2_0_0 + 5.68875568875664e-06*G0_2_0_1 + 5.68875568875666e-06*G0_2_0_2 - 1.89625189625221e-06*G0_2_0_3 - 3.79250379250444e-05*G0_2_0_4 - 1.89625189625222e-05*G0_2_0_5 + 5.68875568875664e-06*G0_2_1_0 - 2.00857343714521e-06*G0_2_1_1 - 2.0085734371452e-06*G0_2_1_2 - 3.10536024821792e-06*G0_2_1_3 + 1.61875161875189e-06*G0_2_1_4 + 1.61875161875189e-06*G0_2_1_5 + 5.68875568875666e-06*G0_2_2_0 - 2.0085734371452e-06*G0_2_2_1 + 1.17739403453709e-05*G0_2_2_2 + 9.24340210054652e-06*G0_2_2_3 + 1.67887667887696e-05*G0_2_2_4 + 5.41125541125633e-06*G0_2_2_5 - 1.89625189625221e-06*G0_2_3_0 - 3.10536024821792e-06*G0_2_3_1 + 9.24340210054652e-06*G0_2_3_2 - 1.37428708857305e-06*G0_2_3_3 + 5.5500055500064e-07*G0_2_3_4 - 7.03000703000822e-06*G0_2_3_5 - 3.79250379250444e-05*G0_2_4_0 + 1.61875161875189e-06*G0_2_4_1 + 1.67887667887696e-05*G0_2_4_2 + 5.5500055500064e-07*G0_2_4_3 - 2.10900210900247e-05*G0_2_4_4 - 1.40600140600164e-05*G0_2_4_5 - 1.89625189625222e-05*G0_2_5_0 + 1.61875161875189e-06*G0_2_5_1 + 5.41125541125633e-06*G0_2_5_2 - 7.03000703000822e-06*G0_2_5_3 - 1.40600140600164e-05*G0_2_5_4 - 2.10900210900246e-05*G0_2_5_5 + 1.8962518962522e-05*G0_3_0_0 - 1.89625189625221e-06*G0_3_0_1 - 1.89625189625221e-06*G0_3_0_2 - 1.51700151700177e-05*G0_3_0_3 - 1.89625189625221e-06*G0_3_1_0 + 9.24340210054652e-06*G0_3_1_1 - 3.10536024821792e-06*G0_3_1_2 - 1.37428708857303e-06*G0_3_1_3 - 7.03000703000822e-06*G0_3_1_4 + 5.55000555000655e-07*G0_3_1_5 - 1.89625189625221e-06*G0_3_2_0 - 3.10536024821792e-06*G0_3_2_1 + 9.24340210054652e-06*G0_3_2_2 - 1.37428708857305e-06*G0_3_2_3 + 5.5500055500064e-07*G0_3_2_4 - 7.03000703000822e-06*G0_3_2_5 - 1.51700151700177e-05*G0_3_3_0 - 1.37428708857303e-06*G0_3_3_1 - 1.37428708857305e-06*G0_3_3_2 + 0.000116708688137279*G0_3_3_3 + 4.44000444000519e-05*G0_3_3_4 + 4.44000444000519e-05*G0_3_3_5 - 7.03000703000822e-06*G0_3_4_1 + 5.5500055500064e-07*G0_3_4_2 + 4.44000444000519e-05*G0_3_4_3 + 4.21800421800493e-05*G0_3_4_4 + 2.81200281200329e-05*G0_3_4_5 + 5.55000555000655e-07*G0_3_5_1 - 7.03000703000822e-06*G0_3_5_2 + 4.44000444000519e-05*G0_3_5_3 + 2.81200281200329e-05*G0_3_5_4 + 4.21800421800493e-05*G0_3_5_5 + 0.000370462870462934*G0_4_0_0 - 1.89625189625222e-05*G0_4_0_1 - 3.79250379250444e-05*G0_4_0_2 + 0.000151700151700178*G0_4_0_4 + 7.58500758500886e-05*G0_4_0_5 - 1.89625189625222e-05*G0_4_1_0 + 5.41125541125632e-06*G0_4_1_1 + 1.61875161875189e-06*G0_4_1_2 - 7.03000703000822e-06*G0_4_1_3 - 2.10900210900246e-05*G0_4_1_4 - 1.40600140600164e-05*G0_4_1_5 - 3.79250379250444e-05*G0_4_2_0 + 1.61875161875189e-06*G0_4_2_1 + 1.67887667887696e-05*G0_4_2_2 + 5.55000555000639e-07*G0_4_2_3 - 2.10900210900247e-05*G0_4_2_4 - 1.40600140600164e-05*G0_4_2_5 - 7.03000703000822e-06*G0_4_3_1 + 5.55000555000639e-07*G0_4_3_2 + 4.44000444000519e-05*G0_4_3_3 + 4.21800421800493e-05*G0_4_3_4 + 2.81200281200329e-05*G0_4_3_5 + 0.000151700151700178*G0_4_4_0 - 2.10900210900246e-05*G0_4_4_1 - 2.10900210900247e-05*G0_4_4_2 + 4.21800421800493e-05*G0_4_4_3 + 0.000210900210900247*G0_4_4_4 + 7.03000703000821e-05*G0_4_4_5 + 7.58500758500887e-05*G0_4_5_0 - 1.40600140600164e-05*G0_4_5_1 - 1.40600140600164e-05*G0_4_5_2 + 2.81200281200329e-05*G0_4_5_3 + 7.03000703000821e-05*G0_4_5_4 + 7.03000703000822e-05*G0_4_5_5 + 0.000370462870462933*G0_5_0_0 - 3.79250379250443e-05*G0_5_0_1 - 1.89625189625222e-05*G0_5_0_2 + 7.58500758500887e-05*G0_5_0_4 + 0.000151700151700177*G0_5_0_5 - 3.79250379250443e-05*G0_5_1_0 + 1.67887667887696e-05*G0_5_1_1 + 1.61875161875189e-06*G0_5_1_2 + 5.55000555000655e-07*G0_5_1_3 - 1.40600140600164e-05*G0_5_1_4 - 2.10900210900246e-05*G0_5_1_5 - 1.89625189625222e-05*G0_5_2_0 + 1.61875161875189e-06*G0_5_2_1 + 5.41125541125633e-06*G0_5_2_2 - 7.03000703000822e-06*G0_5_2_3 - 1.40600140600164e-05*G0_5_2_4 - 2.10900210900246e-05*G0_5_2_5 + 5.55000555000655e-07*G0_5_3_1 - 7.03000703000822e-06*G0_5_3_2 + 4.44000444000519e-05*G0_5_3_3 + 2.81200281200329e-05*G0_5_3_4 + 4.21800421800493e-05*G0_5_3_5 + 7.58500758500887e-05*G0_5_4_0 - 1.40600140600164e-05*G0_5_4_1 - 1.40600140600164e-05*G0_5_4_2 + 2.81200281200329e-05*G0_5_4_3 + 7.03000703000821e-05*G0_5_4_4 + 7.03000703000822e-05*G0_5_4_5 + 0.000151700151700177*G0_5_5_0 - 2.10900210900246e-05*G0_5_5_1 - 2.10900210900246e-05*G0_5_5_2 + 4.21800421800493e-05*G0_5_5_3 + 7.03000703000822e-05*G0_5_5_4 + 0.000210900210900247*G0_5_5_5;
    A[25] = A[0] - 0.00173874736374766*G0_0_0_0 + 7.35590467733448e-05*G0_0_0_1 + 5.70130927273881e-05*G0_0_0_2 - 9.68608111465401e-06*G0_0_0_3 - 0.000263070263070308*G0_0_0_4 - 0.000314685314685368*G0_0_0_5 + 7.35590467733449e-05*G0_0_1_0 - 1.57084978513575e-06*G0_0_1_1 - 5.54009482581003e-06*G0_0_1_2 + 1.83678755107357e-06*G0_0_1_3 + 2.90714576428912e-06*G0_0_1_4 + 2.62105619248521e-05*G0_0_1_5 + 5.70130927273881e-05*G0_0_2_0 - 5.54009482581003e-06*G0_0_2_1 + 4.57181707181784e-05*G0_0_2_2 + 1.06375106375124e-05*G0_0_2_3 + 3.79250379250444e-05*G0_0_2_4 + 5.76143433286388e-06*G0_0_2_5 - 9.68608111465401e-06*G0_0_3_0 + 1.83678755107357e-06*G0_0_3_1 + 1.06375106375124e-05*G0_0_3_2 + 8.27215112929538e-06*G0_0_3_3 + 1.35578707007301e-05*G0_0_3_4 + 7.84929356358063e-06*G0_0_3_5 - 0.000263070263070308*G0_0_4_0 + 2.90714576428912e-06*G0_0_4_1 + 3.79250379250444e-05*G0_0_4_2 + 1.35578707007301e-05*G0_0_4_3 + 9.56715242429653e-06*G0_0_4_4 - 1.7337160194306e-05*G0_0_4_5 - 0.000314685314685368*G0_0_5_0 + 2.62105619248521e-05*G0_0_5_1 + 5.76143433286388e-06*G0_0_5_2 + 7.84929356358063e-06*G0_0_5_3 - 1.7337160194306e-05*G0_0_5_4 - 9.19979491408218e-05*G0_0_5_5 + 7.35590467733449e-05*G0_1_0_0 - 1.57084978513575e-06*G0_1_0_1 - 5.54009482581003e-06*G0_1_0_2 + 1.83678755107357e-06*G0_1_0_3 + 2.90714576428912e-06*G0_1_0_4 + 2.62105619248521e-05*G0_1_0_5 - 1.57084978513575e-06*G0_1_1_0 - 1.82852861424322e-05*G0_1_1_1 - 1.7971446542878e-06*G0_1_1_2 - 1.15625115625135e-05*G0_1_1_3 - 4.75714761429116e-07*G0_1_1_4 - 1.18532261389425e-05*G0_1_1_5 - 5.54009482581004e-06*G0_1_2_0 - 1.7971446542878e-06*G0_1_2_1 + 2.8440474869051e-05*G0_1_2_2 + 2.05878777307383e-05*G0_1_2_3 + 1.87775187775219e-05*G0_1_2_4 + 8.07393664536658e-06*G0_1_2_5 + 1.83678755107357e-06*G0_1_3_0 - 1.15625115625135e-05*G0_1_3_1 + 2.05878777307383e-05*G0_1_3_2 - 1.7178588607163e-05*G0_1_3_3 - 2.72214557928892e-06*G0_1_3_4 - 1.98214483928803e-05*G0_1_3_5 + 2.90714576428912e-06*G0_1_4_0 - 4.75714761429117e-07*G0_1_4_1 + 1.87775187775219e-05*G0_1_4_2 - 2.72214557928892e-06*G0_1_4_3 + 7.53215038929443e-06*G0_1_4_4 - 1.51964437678749e-05*G0_1_4_5 + 2.62105619248521e-05*G0_1_5_0 - 1.18532261389425e-05*G0_1_5_1 + 8.07393664536658e-06*G0_1_5_2 - 1.98214483928803e-05*G0_1_5_3 - 1.51964437678749e-05*G0_1_5_4 - 2.52921681493153e-05*G0_1_5_5 + 5.70130927273881e-05*G0_2_0_0 - 5.54009482581003e-06*G0_2_0_1 + 4.57181707181784e-05*G0_2_0_2 + 1.06375106375124e-05*G0_2_0_3 + 3.79250379250444e-05*G0_2_0_4 + 5.76143433286388e-06*G0_2_0_5 - 5.54009482581004e-06*G0_2_1_0 - 1.7971446542878e-06*G0_2_1_1 + 2.84404748690511e-05*G0_2_1_2 + 2.05878777307383e-05*G0_2_1_3 + 1.87775187775219e-05*G0_2_1_4 + 8.07393664536658e-06*G0_2_1_5 + 4.57181707181784e-05*G0_2_2_0 + 2.84404748690511e-05*G0_2_2_1 - 0.000476933780505289*G0_2_2_2 - 0.00012371226656943*G0_2_2_3 - 0.000202020202020236*G0_2_2_4 - 8.32500832500979e-06*G0_2_2_5 + 1.06375106375124e-05*G0_2_3_0 + 2.05878777307383e-05*G0_2_3_1 - 0.00012371226656943*G0_2_3_2 - 5.69007711864951e-05*G0_2_3_3 - 5.88300588300688e-05*G0_2_3_4 - 4.62500462500542e-06*G0_2_3_5 + 3.79250379250444e-05*G0_2_4_0 + 1.87775187775219e-05*G0_2_4_1 - 0.000202020202020236*G0_2_4_2 - 5.88300588300688e-05*G0_2_4_3 - 0.00015373515373518*G0_2_4_4 - 2.09050209050245e-05*G0_2_4_5 + 5.76143433286388e-06*G0_2_5_0 + 8.07393664536658e-06*G0_2_5_1 - 8.32500832500979e-06*G0_2_5_2 - 4.62500462500542e-06*G0_2_5_3 - 2.09050209050245e-05*G0_2_5_4 - 1.24478695907288e-05*G0_2_5_5 - 9.68608111465401e-06*G0_3_0_0 + 1.83678755107358e-06*G0_3_0_1 + 1.06375106375124e-05*G0_3_0_2 + 8.27215112929538e-06*G0_3_0_3 + 1.35578707007301e-05*G0_3_0_4 + 7.84929356358063e-06*G0_3_0_5 + 1.83678755107357e-06*G0_3_1_0 - 1.15625115625135e-05*G0_3_1_1 + 2.05878777307383e-05*G0_3_1_2 - 1.7178588607163e-05*G0_3_1_3 - 2.72214557928892e-06*G0_3_1_4 - 1.98214483928803e-05*G0_3_1_5 + 1.06375106375124e-05*G0_3_2_0 + 2.05878777307383e-05*G0_3_2_1 - 0.00012371226656943*G0_3_2_2 - 5.69007711864951e-05*G0_3_2_3 - 5.88300588300688e-05*G0_3_2_4 - 4.62500462500542e-06*G0_3_2_5 + 8.27215112929538e-06*G0_3_3_0 - 1.7178588607163e-05*G0_3_3_1 - 5.69007711864951e-05*G0_3_3_2 - 1.68085882371625e-05*G0_3_3_3 - 1.11000111000129e-05*G0_3_3_4 - 7.29429300857995e-06*G0_3_3_5 + 1.35578707007301e-05*G0_3_4_0 - 2.72214557928892e-06*G0_3_4_1 - 5.88300588300688e-05*G0_3_4_2 - 1.11000111000129e-05*G0_3_4_3 - 4.21800421800492e-05*G0_3_4_4 + 1.46943004085886e-05*G0_3_4_5 + 7.84929356358063e-06*G0_3_5_0 - 1.98214483928803e-05*G0_3_5_1 - 4.62500462500542e-06*G0_3_5_2 - 7.29429300857995e-06*G0_3_5_3 + 1.46943004085886e-05*G0_3_5_4 + 9.19715205429644e-06*G0_3_5_5 - 0.000263070263070308*G0_4_0_0 + 2.90714576428912e-06*G0_4_0_1 + 3.79250379250444e-05*G0_4_0_2 + 1.35578707007301e-05*G0_4_0_3 + 9.56715242429656e-06*G0_4_0_4 - 1.7337160194306e-05*G0_4_0_5 + 2.90714576428912e-06*G0_4_1_0 - 4.75714761429116e-07*G0_4_1_1 + 1.87775187775219e-05*G0_4_1_2 - 2.72214557928892e-06*G0_4_1_3 + 7.53215038929443e-06*G0_4_1_4 - 1.51964437678749e-05*G0_4_1_5 + 3.79250379250444e-05*G0_4_2_0 + 1.87775187775219e-05*G0_4_2_1 - 0.000202020202020236*G0_4_2_2 - 5.88300588300687e-05*G0_4_2_3 - 0.00015373515373518*G0_4_2_4 - 2.09050209050245e-05*G0_4_2_5 + 1.35578707007301e-05*G0_4_3_0 - 2.72214557928892e-06*G0_4_3_1 - 5.88300588300687e-05*G0_4_3_2 - 1.11000111000129e-05*G0_4_3_3 - 4.21800421800492e-05*G0_4_3_4 + 1.46943004085886e-05*G0_4_3_5 + 9.56715242429653e-06*G0_4_4_0 + 7.53215038929443e-06*G0_4_4_1 - 0.00015373515373518*G0_4_4_2 - 4.21800421800492e-05*G0_4_4_3 - 0.00041070041070048*G0_4_4_4 + 2.67457410314599e-05*G0_4_4_5 - 1.7337160194306e-05*G0_4_5_0 - 1.51964437678749e-05*G0_4_5_1 - 2.09050209050245e-05*G0_4_5_2 + 1.46943004085886e-05*G0_4_5_3 + 2.674574103146e-05*G0_4_5_4 + 5.52886267172074e-05*G0_4_5_5 - 0.000314685314685368*G0_5_0_0 + 2.62105619248521e-05*G0_5_0_1 + 5.76143433286388e-06*G0_5_0_2 + 7.84929356358063e-06*G0_5_0_3 - 1.7337160194306e-05*G0_5_0_4 - 9.19979491408218e-05*G0_5_0_5 + 2.62105619248521e-05*G0_5_1_0 - 1.18532261389425e-05*G0_5_1_1 + 8.07393664536658e-06*G0_5_1_2 - 1.98214483928803e-05*G0_5_1_3 - 1.51964437678749e-05*G0_5_1_4 - 2.52921681493153e-05*G0_5_1_5 + 5.76143433286388e-06*G0_5_2_0 + 8.07393664536658e-06*G0_5_2_1 - 8.32500832500979e-06*G0_5_2_2 - 4.62500462500542e-06*G0_5_2_3 - 2.09050209050245e-05*G0_5_2_4 - 1.24478695907288e-05*G0_5_2_5 + 7.84929356358063e-06*G0_5_3_0 - 1.98214483928803e-05*G0_5_3_1 - 4.62500462500542e-06*G0_5_3_2 - 7.29429300857995e-06*G0_5_3_3 + 1.46943004085886e-05*G0_5_3_4 + 9.19715205429644e-06*G0_5_3_5 - 1.7337160194306e-05*G0_5_4_0 - 1.51964437678749e-05*G0_5_4_1 - 2.09050209050244e-05*G0_5_4_2 + 1.46943004085886e-05*G0_5_4_3 + 2.67457410314599e-05*G0_5_4_4 + 5.52886267172074e-05*G0_5_4_5 - 9.19979491408218e-05*G0_5_5_0 - 2.52921681493153e-05*G0_5_5_1 - 1.24478695907288e-05*G0_5_5_2 + 9.19715205429644e-06*G0_5_5_3 + 5.52886267172074e-05*G0_5_5_4 + 3.17143174285799e-07*G0_5_5_5;
    A[60] = -A[25] - 0.000325924075924131*G0_0_0_0 + 1.21158603301481e-05*G0_0_0_1 + 2.05449312592204e-05*G0_0_0_2 + 6.3626849341146e-06*G0_0_0_3 - 7.78388278388412e-05*G0_0_0_4 - 5.86913086913185e-05*G0_0_0_5 + 1.21158603301481e-05*G0_0_1_0 + 3.12187812187868e-07*G0_0_1_1 + 2.97321725893207e-07*G0_0_1_2 + 9.63322391893983e-06*G0_0_1_3 + 4.34089719804078e-06*G0_0_1_4 + 5.76804148232817e-06*G0_0_1_5 + 2.05449312592204e-05*G0_0_2_0 + 2.97321725893207e-07*G0_0_2_1 + 2.05449312592205e-05*G0_0_2_2 - 4.45982588839806e-06*G0_0_2_3 - 4.45982588839807e-06*G0_0_2_5 + 6.3626849341146e-06*G0_0_3_0 + 9.63322391893983e-06*G0_0_3_1 - 4.45982588839806e-06*G0_0_3_2 - 4.04357547214759e-05*G0_0_3_3 - 2.14071642643107e-05*G0_0_3_4 - 3.80571809143302e-06*G0_0_3_5 - 7.78388278388412e-05*G0_0_4_0 + 4.34089719804079e-06*G0_0_4_1 - 2.14071642643107e-05*G0_0_4_3 - 1.35578707007304e-05*G0_0_4_4 + 2.37857380714573e-07*G0_0_4_5 - 5.86913086913185e-05*G0_0_5_0 + 5.76804148232817e-06*G0_0_5_1 - 4.45982588839807e-06*G0_0_5_2 - 3.80571809143302e-06*G0_0_5_3 + 2.37857380714566e-07*G0_0_5_4 + 1.42714428428736e-06*G0_0_5_5 + 1.21158603301481e-05*G0_1_0_0 + 3.12187812187867e-07*G0_1_0_1 + 2.97321725893207e-07*G0_1_0_2 + 9.63322391893984e-06*G0_1_0_3 + 4.34089719804078e-06*G0_1_0_4 + 5.76804148232817e-06*G0_1_0_5 + 3.12187812187866e-07*G0_1_1_0 - 1.30226915941224e-05*G0_1_1_1 + 3.12187812187868e-07*G0_1_1_2 + 2.61643118786019e-06*G0_1_1_3 + 9.8710812996544e-06*G0_1_1_4 + 2.61643118786019e-06*G0_1_1_5 + 2.97321725893206e-07*G0_1_2_0 + 3.12187812187867e-07*G0_1_2_1 + 1.21158603301481e-05*G0_1_2_2 + 5.76804148232817e-06*G0_1_2_3 + 4.3408971980408e-06*G0_1_2_4 + 9.63322391893983e-06*G0_1_2_5 + 9.63322391893984e-06*G0_1_3_0 + 2.6164311878602e-06*G0_1_3_1 + 5.76804148232817e-06*G0_1_3_2 - 6.49350649350759e-05*G0_1_3_3 - 3.90086104371885e-05*G0_1_3_4 - 3.85328956757593e-05*G0_1_3_5 + 4.34089719804078e-06*G0_1_4_0 + 9.8710812996544e-06*G0_1_4_1 + 4.3408971980408e-06*G0_1_4_2 - 3.90086104371885e-05*G0_1_4_3 - 2.71157414014603e-05*G0_1_4_4 - 3.90086104371885e-05*G0_1_4_5 + 5.76804148232817e-06*G0_1_5_0 + 2.61643118786019e-06*G0_1_5_1 + 9.63322391893983e-06*G0_1_5_2 - 3.85328956757593e-05*G0_1_5_3 - 3.90086104371885e-05*G0_1_5_4 - 6.49350649350759e-05*G0_1_5_5 + 2.05449312592204e-05*G0_2_0_0 + 2.97321725893207e-07*G0_2_0_1 + 2.05449312592205e-05*G0_2_0_2 - 4.45982588839806e-06*G0_2_0_3 - 4.45982588839807e-06*G0_2_0_5 + 2.97321725893207e-07*G0_2_1_0 + 3.12187812187868e-07*G0_2_1_1 + 1.21158603301481e-05*G0_2_1_2 + 5.76804148232818e-06*G0_2_1_3 + 4.3408971980408e-06*G0_2_1_4 + 9.63322391893983e-06*G0_2_1_5 + 2.05449312592205e-05*G0_2_2_0 + 1.21158603301481e-05*G0_2_2_1 - 0.000325924075924131*G0_2_2_2 - 5.86913086913186e-05*G0_2_2_3 - 7.78388278388409e-05*G0_2_2_4 + 6.36268493411453e-06*G0_2_2_5 - 4.45982588839806e-06*G0_2_3_0 + 5.76804148232818e-06*G0_2_3_1 - 5.86913086913186e-05*G0_2_3_2 + 1.42714428428732e-06*G0_2_3_3 + 2.37857380714532e-07*G0_2_3_4 - 3.80571809143304e-06*G0_2_3_5 + 4.3408971980408e-06*G0_2_4_1 - 7.78388278388409e-05*G0_2_4_2 + 2.37857380714532e-07*G0_2_4_3 - 1.35578707007301e-05*G0_2_4_4 - 2.14071642643108e-05*G0_2_4_5 - 4.45982588839806e-06*G0_2_5_0 + 9.63322391893983e-06*G0_2_5_1 + 6.36268493411453e-06*G0_2_5_2 - 3.80571809143304e-06*G0_2_5_3 - 2.14071642643108e-05*G0_2_5_4 - 4.04357547214758e-05*G0_2_5_5 + 6.3626849341146e-06*G0_3_0_0 + 9.63322391893983e-06*G0_3_0_1 - 4.45982588839806e-06*G0_3_0_2 - 4.04357547214759e-05*G0_3_0_3 - 2.14071642643107e-05*G0_3_0_4 - 3.80571809143303e-06*G0_3_0_5 + 9.63322391893983e-06*G0_3_1_0 + 2.6164311878602e-06*G0_3_1_1 + 5.76804148232817e-06*G0_3_1_2 - 6.49350649350759e-05*G0_3_1_3 - 3.90086104371885e-05*G0_3_1_4 - 3.85328956757593e-05*G0_3_1_5 - 4.45982588839806e-06*G0_3_2_0 + 5.76804148232818e-06*G0_3_2_1 - 5.86913086913186e-05*G0_3_2_2 + 1.42714428428732e-06*G0_3_2_3 + 2.37857380714532e-07*G0_3_2_4 - 3.80571809143304e-06*G0_3_2_5 - 4.04357547214759e-05*G0_3_3_0 - 6.49350649350759e-05*G0_3_3_1 + 1.42714428428732e-06*G0_3_3_2 + 0.00031111745397465*G0_3_3_3 + 0.000158888730317329*G0_3_3_4 + 8.84829456258178e-05*G0_3_3_5 - 2.14071642643107e-05*G0_3_4_0 - 3.90086104371885e-05*G0_3_4_1 + 2.37857380714532e-07*G0_3_4_2 + 0.000158888730317329*G0_3_4_3 + 9.70458113315421e-05*G0_3_4_4 + 8.5628657057243e-05*G0_3_4_5 - 3.80571809143303e-06*G0_3_5_0 - 3.85328956757593e-05*G0_3_5_1 - 3.80571809143304e-06*G0_3_5_2 + 8.84829456258178e-05*G0_3_5_3 + 8.5628657057243e-05*G0_3_5_4 + 8.84829456258177e-05*G0_3_5_5 - 7.78388278388412e-05*G0_4_0_0 + 4.34089719804078e-06*G0_4_0_1 - 2.14071642643107e-05*G0_4_0_3 - 1.35578707007304e-05*G0_4_0_4 + 2.37857380714566e-07*G0_4_0_5 + 4.34089719804078e-06*G0_4_1_0 + 9.8710812996544e-06*G0_4_1_1 + 4.3408971980408e-06*G0_4_1_2 - 3.90086104371885e-05*G0_4_1_3 - 2.71157414014604e-05*G0_4_1_4 - 3.90086104371885e-05*G0_4_1_5 + 4.3408971980408e-06*G0_4_2_1 - 7.78388278388409e-05*G0_4_2_2 + 2.37857380714532e-07*G0_4_2_3 - 1.35578707007301e-05*G0_4_2_4 - 2.14071642643108e-05*G0_4_2_5 - 2.14071642643107e-05*G0_4_3_0 - 3.90086104371885e-05*G0_4_3_1 + 2.37857380714532e-07*G0_4_3_2 + 0.000158888730317329*G0_4_3_3 + 9.70458113315421e-05*G0_4_3_4 + 8.5628657057243e-05*G0_4_3_5 - 1.35578707007304e-05*G0_4_4_0 - 2.71157414014604e-05*G0_4_4_1 - 1.35578707007301e-05*G0_4_4_2 + 9.70458113315421e-05*G0_4_4_3 - 0.000399600399600466*G0_4_4_4 + 9.70458113315421e-05*G0_4_4_5 + 2.37857380714566e-07*G0_4_5_0 - 3.90086104371885e-05*G0_4_5_1 - 2.14071642643108e-05*G0_4_5_2 + 8.5628657057243e-05*G0_4_5_3 + 9.70458113315422e-05*G0_4_5_4 + 0.000158888730317329*G0_4_5_5 - 5.86913086913185e-05*G0_5_0_0 + 5.76804148232818e-06*G0_5_0_1 - 4.45982588839806e-06*G0_5_0_2 - 3.80571809143302e-06*G0_5_0_3 + 2.37857380714539e-07*G0_5_0_4 + 1.42714428428736e-06*G0_5_0_5 + 5.76804148232817e-06*G0_5_1_0 + 2.61643118786019e-06*G0_5_1_1 + 9.63322391893983e-06*G0_5_1_2 - 3.85328956757593e-05*G0_5_1_3 - 3.90086104371885e-05*G0_5_1_4 - 6.49350649350759e-05*G0_5_1_5 - 4.45982588839807e-06*G0_5_2_0 + 9.63322391893983e-06*G0_5_2_1 + 6.36268493411453e-06*G0_5_2_2 - 3.80571809143304e-06*G0_5_2_3 - 2.14071642643108e-05*G0_5_2_4 - 4.04357547214758e-05*G0_5_2_5 - 3.80571809143303e-06*G0_5_3_0 - 3.85328956757593e-05*G0_5_3_1 - 3.80571809143304e-06*G0_5_3_2 + 8.84829456258178e-05*G0_5_3_3 + 8.5628657057243e-05*G0_5_3_4 + 8.84829456258177e-05*G0_5_3_5 + 2.37857380714553e-07*G0_5_4_0 - 3.90086104371885e-05*G0_5_4_1 - 2.14071642643107e-05*G0_5_4_2 + 8.5628657057243e-05*G0_5_4_3 + 9.70458113315422e-05*G0_5_4_4 + 0.000158888730317329*G0_5_4_5 + 1.42714428428736e-06*G0_5_5_0 - 6.49350649350759e-05*G0_5_5_1 - 4.04357547214758e-05*G0_5_5_2 + 8.84829456258177e-05*G0_5_5_3 + 0.000158888730317329*G0_5_5_4 + 0.000311117453974649*G0_5_5_5;
    A[16] = A[60] + 0.000417707292707364*G0_0_0_0 - 2.23883259597583e-05*G0_0_0_1 - 3.94694591123229e-05*G0_0_0_2 + 7.84929356358059e-06*G0_0_0_3 + 0.000171614100185558*G0_0_0_4 + 9.10399124684992e-05*G0_0_0_5 - 2.23883259597583e-05*G0_0_1_0 + 2.76509205080679e-06*G0_0_1_1 + 1.59067123352864e-06*G0_0_1_2 - 2.14071642643107e-06*G0_0_1_4 - 5.53018410161361e-06*G0_0_1_5 - 3.9469459112323e-05*G0_0_2_0 + 1.59067123352864e-06*G0_0_2_1 + 1.16698777413083e-05*G0_0_2_2 + 1.48660862946602e-06*G0_0_2_3 - 1.58769801626971e-05*G0_0_2_4 - 4.04357547214757e-06*G0_0_2_5 + 7.84929356358059e-06*G0_0_3_0 + 1.48660862946602e-06*G0_0_3_2 + 4.28143285286217e-06*G0_0_3_3 - 1.1417154274299e-05*G0_0_3_4 - 7.61143618286605e-06*G0_0_3_5 + 0.000171614100185558*G0_0_4_0 - 2.14071642643107e-06*G0_0_4_1 - 1.58769801626971e-05*G0_0_4_2 - 1.1417154274299e-05*G0_0_4_3 + 4.56686170971965e-05*G0_0_4_4 + 1.23685837971573e-05*G0_0_4_5 + 9.10399124684991e-05*G0_0_5_0 - 5.53018410161361e-06*G0_0_5_1 - 4.04357547214757e-06*G0_0_5_2 - 7.61143618286605e-06*G0_0_5_3 + 1.23685837971573e-05*G0_0_5_4 + 1.11792968935845e-05*G0_0_5_5 - 2.23883259597583e-05*G0_1_0_0 + 2.76509205080679e-06*G0_1_0_1 + 1.59067123352864e-06*G0_1_0_2 - 2.14071642643107e-06*G0_1_0_4 - 5.53018410161361e-06*G0_1_0_5 + 2.76509205080679e-06*G0_1_1_0 - 1.84636791779679e-05*G0_1_1_1 + 2.33397554826166e-06*G0_1_1_2 - 7.84929356358062e-06*G0_1_1_3 + 2.14071642643107e-06*G0_1_1_4 - 9.33590219304659e-06*G0_1_1_5 + 1.59067123352864e-06*G0_1_2_0 + 2.33397554826166e-06*G0_1_2_1 + 7.43304314733012e-07*G0_1_2_2 - 1.48660862946602e-06*G0_1_2_3 - 2.08125208125243e-06*G0_1_2_4 - 3.80571809143302e-06*G0_1_2_5 - 7.84929356358063e-06*G0_1_3_1 - 1.48660862946602e-06*G0_1_3_2 + 1.14171542742991e-05*G0_1_3_3 - 4.28143285286214e-06*G0_1_3_4 + 7.61143618286604e-06*G0_1_3_5 - 2.14071642643107e-06*G0_1_4_0 + 2.14071642643107e-06*G0_1_4_1 - 2.08125208125243e-06*G0_1_4_2 - 4.28143285286215e-06*G0_1_4_3 - 4.56686170971962e-05*G0_1_4_4 + 3.33000333000391e-06*G0_1_4_5 - 5.53018410161361e-06*G0_1_5_0 - 9.33590219304659e-06*G0_1_5_1 - 3.80571809143302e-06*G0_1_5_2 + 7.61143618286604e-06*G0_1_5_3 + 3.33000333000391e-06*G0_1_5_4 + 1.8552875695736e-05*G0_1_5_5 - 3.9469459112323e-05*G0_2_0_0 + 1.59067123352864e-06*G0_2_0_1 + 1.16698777413083e-05*G0_2_0_2 + 1.48660862946602e-06*G0_2_0_3 - 1.58769801626971e-05*G0_2_0_4 - 4.04357547214757e-06*G0_2_0_5 + 1.59067123352864e-06*G0_2_1_0 + 2.33397554826166e-06*G0_2_1_1 + 7.43304314733011e-07*G0_2_1_2 - 1.48660862946602e-06*G0_2_1_3 - 2.08125208125243e-06*G0_2_1_4 - 3.80571809143302e-06*G0_2_1_5 + 1.16698777413083e-05*G0_2_2_0 + 7.43304314733012e-07*G0_2_2_1 - 4.43306693306768e-05*G0_2_2_2 - 3.28837828837885e-05*G0_2_2_4 - 1.48660862946603e-06*G0_2_2_5 + 1.48660862946602e-06*G0_2_3_0 - 1.48660862946602e-06*G0_2_3_1 - 1.1892869035728e-06*G0_2_3_3 + 1.18928690357279e-06*G0_2_3_4 - 1.58769801626971e-05*G0_2_4_0 - 2.08125208125243e-06*G0_2_4_1 - 3.28837828837885e-05*G0_2_4_2 + 1.18928690357279e-06*G0_2_4_3 - 2.78293135436042e-05*G0_2_4_4 + 7.1357214214369e-06*G0_2_4_5 - 4.04357547214757e-06*G0_2_5_0 - 3.80571809143302e-06*G0_2_5_1 - 1.48660862946603e-06*G0_2_5_2 + 7.1357214214369e-06*G0_2_5_4 + 7.61143618286602e-06*G0_2_5_5 + 7.84929356358059e-06*G0_3_0_0 + 1.48660862946602e-06*G0_3_0_2 + 4.28143285286217e-06*G0_3_0_3 - 1.1417154274299e-05*G0_3_0_4 - 7.61143618286605e-06*G0_3_0_5 - 7.84929356358062e-06*G0_3_1_1 - 1.48660862946602e-06*G0_3_1_2 + 1.1417154274299e-05*G0_3_1_3 - 4.28143285286213e-06*G0_3_1_4 + 7.61143618286604e-06*G0_3_1_5 + 1.48660862946602e-06*G0_3_2_0 - 1.48660862946602e-06*G0_3_2_1 - 1.1892869035728e-06*G0_3_2_3 + 1.18928690357279e-06*G0_3_2_4 + 4.28143285286217e-06*G0_3_3_0 + 1.1417154274299e-05*G0_3_3_1 - 1.18928690357281e-06*G0_3_3_2 - 0.000114171542742991*G0_3_3_3 - 8.56286570572435e-06*G0_3_3_5 - 1.1417154274299e-05*G0_3_4_0 - 4.28143285286214e-06*G0_3_4_1 + 1.1892869035728e-06*G0_3_4_2 + 0.00011417154274299*G0_3_4_4 + 8.56286570572427e-06*G0_3_4_5 - 7.61143618286605e-06*G0_3_5_0 + 7.61143618286604e-06*G0_3_5_1 - 8.56286570572437e-06*G0_3_5_3 + 8.56286570572428e-06*G0_3_5_4 + 0.000171614100185558*G0_4_0_0 - 2.14071642643107e-06*G0_4_0_1 - 1.58769801626971e-05*G0_4_0_2 - 1.1417154274299e-05*G0_4_0_3 + 4.56686170971965e-05*G0_4_0_4 + 1.23685837971573e-05*G0_4_0_5 - 2.14071642643107e-06*G0_4_1_0 + 2.14071642643107e-06*G0_4_1_1 - 2.08125208125243e-06*G0_4_1_2 - 4.28143285286215e-06*G0_4_1_3 - 4.56686170971962e-05*G0_4_1_4 + 3.33000333000391e-06*G0_4_1_5 - 1.58769801626971e-05*G0_4_2_0 - 2.08125208125243e-06*G0_4_2_1 - 3.28837828837885e-05*G0_4_2_2 + 1.18928690357279e-06*G0_4_2_3 - 2.78293135436042e-05*G0_4_2_4 + 7.13572142143689e-06*G0_4_2_5 - 1.1417154274299e-05*G0_4_3_0 - 4.28143285286215e-06*G0_4_3_1 + 1.1892869035728e-06*G0_4_3_2 + 0.00011417154274299*G0_4_3_4 + 8.56286570572427e-06*G0_4_3_5 + 4.56686170971966e-05*G0_4_4_0 - 4.56686170971962e-05*G0_4_4_1 - 2.78293135436042e-05*G0_4_4_2 + 0.000114171542742991*G0_4_4_3 + 0.000810617953475233*G0_4_4_4 + 7.70657913515186e-05*G0_4_4_5 + 1.23685837971573e-05*G0_4_5_0 + 3.33000333000391e-06*G0_4_5_1 + 7.1357214214369e-06*G0_4_5_2 + 8.56286570572427e-06*G0_4_5_3 + 7.70657913515186e-05*G0_4_5_4 - 2.18828790257398e-05*G0_4_5_5 + 9.10399124684992e-05*G0_5_0_0 - 5.53018410161361e-06*G0_5_0_1 - 4.04357547214757e-06*G0_5_0_2 - 7.61143618286605e-06*G0_5_0_3 + 1.23685837971573e-05*G0_5_0_4 + 1.11792968935845e-05*G0_5_0_5 - 5.53018410161361e-06*G0_5_1_0 - 9.33590219304659e-06*G0_5_1_1 - 3.80571809143302e-06*G0_5_1_2 + 7.61143618286604e-06*G0_5_1_3 + 3.33000333000391e-06*G0_5_1_4 + 1.8552875695736e-05*G0_5_1_5 - 4.04357547214757e-06*G0_5_2_0 - 3.80571809143302e-06*G0_5_2_1 - 1.48660862946603e-06*G0_5_2_2 + 7.1357214214369e-06*G0_5_2_4 + 7.61143618286602e-06*G0_5_2_5 - 7.61143618286605e-06*G0_5_3_0 + 7.61143618286604e-06*G0_5_3_1 - 8.56286570572435e-06*G0_5_3_3 + 8.56286570572429e-06*G0_5_3_4 + 1.23685837971573e-05*G0_5_4_0 + 3.33000333000391e-06*G0_5_4_1 + 7.13572142143689e-06*G0_5_4_2 + 8.56286570572427e-06*G0_5_4_3 + 7.70657913515185e-05*G0_5_4_4 - 2.18828790257398e-05*G0_5_4_5 + 1.11792968935845e-05*G0_5_5_0 + 1.8552875695736e-05*G0_5_5_1 + 7.61143618286602e-06*G0_5_5_2 - 2.18828790257398e-05*G0_5_5_4 - 3.71057513914716e-05*G0_5_5_5;
    A[40] = A[16] + 2.24775224775263e-05*G0_0_0_0 - 5.0842015127738e-06*G0_0_0_1 - 5.48558584272962e-06*G0_0_0_2 + 2.14071642643107e-06*G0_0_0_3 + 1.07035821321553e-05*G0_0_0_4 + 1.17739403453709e-05*G0_0_0_5 - 5.0842015127738e-06*G0_0_1_0 + 5.08420151277381e-06*G0_0_1_1 + 8.5628657057243e-06*G0_0_1_3 - 8.56286570572428e-06*G0_0_1_4 - 5.48558584272962e-06*G0_0_2_0 + 5.61938061938157e-06*G0_0_2_2 - 6.42214927929322e-06*G0_0_2_3 + 2.67589553303883e-06*G0_0_2_4 - 8.5628657057243e-06*G0_0_2_5 + 2.14071642643107e-06*G0_0_3_0 + 8.5628657057243e-06*G0_0_3_1 - 6.42214927929322e-06*G0_0_3_2 - 2.9970029970035e-05*G0_0_3_3 + 1.28442985585864e-05*G0_0_3_4 + 1.28442985585865e-05*G0_0_3_5 + 1.07035821321553e-05*G0_0_4_0 - 8.56286570572429e-06*G0_0_4_1 + 2.67589553303883e-06*G0_0_4_2 + 1.28442985585864e-05*G0_0_4_3 + 9.41915227629672e-05*G0_0_4_4 + 3.42514628228972e-05*G0_0_4_5 + 1.17739403453709e-05*G0_0_5_0 - 8.5628657057243e-06*G0_0_5_2 + 1.28442985585865e-05*G0_0_5_3 + 3.42514628228972e-05*G0_0_5_4 + 4.70957613814836e-05*G0_0_5_5 - 5.0842015127738e-06*G0_1_0_0 + 5.08420151277381e-06*G0_1_0_1 + 8.56286570572429e-06*G0_1_0_3 - 8.56286570572428e-06*G0_1_0_4 + 5.08420151277381e-06*G0_1_1_0 - 2.24775224775264e-05*G0_1_1_1 + 5.48558584272963e-06*G0_1_1_2 - 1.07035821321554e-05*G0_1_1_3 - 2.14071642643107e-06*G0_1_1_4 - 1.1773940345371e-05*G0_1_1_5 + 5.48558584272963e-06*G0_1_2_1 - 5.61938061938158e-06*G0_1_2_2 - 2.67589553303883e-06*G0_1_2_3 + 6.42214927929322e-06*G0_1_2_4 + 8.56286570572429e-06*G0_1_2_5 + 8.5628657057243e-06*G0_1_3_0 - 1.07035821321554e-05*G0_1_3_1 - 2.67589553303883e-06*G0_1_3_2 - 9.41915227629673e-05*G0_1_3_3 - 1.28442985585864e-05*G0_1_3_4 - 3.42514628228972e-05*G0_1_3_5 - 8.56286570572428e-06*G0_1_4_0 - 2.14071642643107e-06*G0_1_4_1 + 6.42214927929322e-06*G0_1_4_2 - 1.28442985585864e-05*G0_1_4_3 + 2.9970029970035e-05*G0_1_4_4 - 1.28442985585864e-05*G0_1_4_5 - 1.17739403453709e-05*G0_1_5_1 + 8.56286570572429e-06*G0_1_5_2 - 3.42514628228972e-05*G0_1_5_3 - 1.28442985585864e-05*G0_1_5_4 - 4.70957613814836e-05*G0_1_5_5 - 5.48558584272962e-06*G0_2_0_0 + 5.61938061938157e-06*G0_2_0_2 - 6.42214927929322e-06*G0_2_0_3 + 2.67589553303883e-06*G0_2_0_4 - 8.5628657057243e-06*G0_2_0_5 + 5.48558584272963e-06*G0_2_1_1 - 5.61938061938158e-06*G0_2_1_2 - 2.67589553303883e-06*G0_2_1_3 + 6.42214927929321e-06*G0_2_1_4 + 8.56286570572429e-06*G0_2_1_5 + 5.61938061938157e-06*G0_2_2_0 - 5.61938061938157e-06*G0_2_2_1 + 1.87312687312719e-05*G0_2_2_3 - 1.87312687312719e-05*G0_2_2_4 - 6.42214927929322e-06*G0_2_3_0 - 2.67589553303883e-06*G0_2_3_1 + 1.87312687312719e-05*G0_2_3_2 + 7.49250749250876e-05*G0_2_3_3 + 1.28442985585864e-05*G0_2_3_5 + 2.67589553303883e-06*G0_2_4_0 + 6.42214927929322e-06*G0_2_4_1 - 1.87312687312719e-05*G0_2_4_2 - 7.49250749250874e-05*G0_2_4_4 - 1.28442985585864e-05*G0_2_4_5 - 8.5628657057243e-06*G0_2_5_0 + 8.56286570572429e-06*G0_2_5_1 + 1.28442985585864e-05*G0_2_5_3 - 1.28442985585864e-05*G0_2_5_4 + 2.14071642643107e-06*G0_3_0_0 + 8.5628657057243e-06*G0_3_0_1 - 6.42214927929322e-06*G0_3_0_2 - 2.9970029970035e-05*G0_3_0_3 + 1.28442985585864e-05*G0_3_0_4 + 1.28442985585865e-05*G0_3_0_5 + 8.5628657057243e-06*G0_3_1_0 - 1.07035821321554e-05*G0_3_1_1 - 2.67589553303883e-06*G0_3_1_2 - 9.41915227629673e-05*G0_3_1_3 - 1.28442985585864e-05*G0_3_1_4 - 3.42514628228972e-05*G0_3_1_5 - 6.42214927929322e-06*G0_3_2_0 - 2.67589553303883e-06*G0_3_2_1 + 1.87312687312719e-05*G0_3_2_2 + 7.49250749250876e-05*G0_3_2_3 + 1.28442985585864e-05*G0_3_2_5 - 2.9970029970035e-05*G0_3_3_0 - 9.41915227629673e-05*G0_3_3_1 + 7.49250749250875e-05*G0_3_3_2 + 0.000513771942343458*G0_3_3_3 + 8.5628657057243e-05*G0_3_3_4 + 3.42514628228972e-05*G0_3_3_5 + 1.28442985585864e-05*G0_3_4_0 - 1.28442985585864e-05*G0_3_4_1 + 8.5628657057243e-05*G0_3_4_3 - 8.56286570572429e-05*G0_3_4_4 + 1.28442985585865e-05*G0_3_5_0 - 3.42514628228972e-05*G0_3_5_1 + 1.28442985585864e-05*G0_3_5_2 + 3.42514628228972e-05*G0_3_5_3 - 2.56885971171729e-05*G0_3_5_5 + 1.07035821321553e-05*G0_4_0_0 - 8.56286570572429e-06*G0_4_0_1 + 2.67589553303883e-06*G0_4_0_2 + 1.28442985585864e-05*G0_4_0_3 + 9.41915227629672e-05*G0_4_0_4 + 3.42514628228972e-05*G0_4_0_5 - 8.56286570572429e-06*G0_4_1_0 - 2.14071642643107e-06*G0_4_1_1 + 6.42214927929322e-06*G0_4_1_2 - 1.28442985585864e-05*G0_4_1_3 + 2.9970029970035e-05*G0_4_1_4 - 1.28442985585864e-05*G0_4_1_5 + 2.67589553303883e-06*G0_4_2_0 + 6.42214927929322e-06*G0_4_2_1 - 1.87312687312719e-05*G0_4_2_2 - 7.49250749250874e-05*G0_4_2_4 - 1.28442985585864e-05*G0_4_2_5 + 1.28442985585864e-05*G0_4_3_0 - 1.28442985585864e-05*G0_4_3_1 + 8.5628657057243e-05*G0_4_3_3 - 8.56286570572429e-05*G0_4_3_4 + 9.41915227629672e-05*G0_4_4_0 + 2.9970029970035e-05*G0_4_4_1 - 7.49250749250874e-05*G0_4_4_2 - 8.56286570572429e-05*G0_4_4_3 - 0.000513771942343457*G0_4_4_4 - 3.42514628228972e-05*G0_4_4_5 + 3.42514628228972e-05*G0_4_5_0 - 1.28442985585864e-05*G0_4_5_1 - 1.28442985585864e-05*G0_4_5_2 - 3.42514628228972e-05*G0_4_5_4 + 2.56885971171728e-05*G0_4_5_5 + 1.17739403453709e-05*G0_5_0_0 - 8.5628657057243e-06*G0_5_0_2 + 1.28442985585865e-05*G0_5_0_3 + 3.42514628228972e-05*G0_5_0_4 + 4.70957613814836e-05*G0_5_0_5 - 1.1773940345371e-05*G0_5_1_1 + 8.56286570572429e-06*G0_5_1_2 - 3.42514628228972e-05*G0_5_1_3 - 1.28442985585864e-05*G0_5_1_4 - 4.70957613814836e-05*G0_5_1_5 - 8.5628657057243e-06*G0_5_2_0 + 8.56286570572429e-06*G0_5_2_1 + 1.28442985585864e-05*G0_5_2_3 - 1.28442985585864e-05*G0_5_2_4 + 1.28442985585865e-05*G0_5_3_0 - 3.42514628228972e-05*G0_5_3_1 + 1.28442985585864e-05*G0_5_3_2 + 3.42514628228972e-05*G0_5_3_3 - 2.56885971171729e-05*G0_5_3_5 + 3.42514628228972e-05*G0_5_4_0 - 1.28442985585864e-05*G0_5_4_1 - 1.28442985585864e-05*G0_5_4_2 - 3.42514628228972e-05*G0_5_4_4 + 2.56885971171728e-05*G0_5_4_5 + 4.70957613814836e-05*G0_5_5_0 - 4.70957613814836e-05*G0_5_5_1 - 2.56885971171729e-05*G0_5_5_3 + 2.56885971171728e-05*G0_5_5_4;
    A[4] = A[40];
    A[51] = A[25] - 4.43306693306769e-05*G0_0_0_0 + 7.43304314733006e-07*G0_0_0_1 + 1.16698777413083e-05*G0_0_0_2 - 1.48660862946604e-06*G0_0_0_3 - 3.28837828837886e-05*G0_0_0_4 + 7.43304314733009e-07*G0_0_1_0 + 2.33397554826171e-06*G0_0_1_1 + 1.59067123352864e-06*G0_0_1_2 - 3.80571809143302e-06*G0_0_1_3 - 2.08125208125244e-06*G0_0_1_4 - 1.48660862946599e-06*G0_0_1_5 + 1.16698777413083e-05*G0_0_2_0 + 1.59067123352864e-06*G0_0_2_1 - 3.94694591123229e-05*G0_0_2_2 - 4.04357547214758e-06*G0_0_2_3 - 1.58769801626971e-05*G0_0_2_4 + 1.48660862946603e-06*G0_0_2_5 - 1.48660862946604e-06*G0_0_3_0 - 3.80571809143302e-06*G0_0_3_1 - 4.04357547214758e-06*G0_0_3_2 + 7.61143618286606e-06*G0_0_3_3 + 7.13572142143693e-06*G0_0_3_4 - 3.28837828837886e-05*G0_0_4_0 - 2.08125208125244e-06*G0_0_4_1 - 1.58769801626971e-05*G0_0_4_2 + 7.13572142143693e-06*G0_0_4_3 - 2.78293135436041e-05*G0_0_4_4 + 1.1892869035728e-06*G0_0_4_5 - 1.486608629466e-06*G0_0_5_1 + 1.48660862946602e-06*G0_0_5_2 + 1.1892869035728e-06*G0_0_5_4 - 1.18928690357279e-06*G0_0_5_5 + 7.43304314733009e-07*G0_1_0_0 + 2.33397554826171e-06*G0_1_0_1 + 1.59067123352864e-06*G0_1_0_2 - 3.80571809143302e-06*G0_1_0_3 - 2.08125208125244e-06*G0_1_0_4 - 1.486608629466e-06*G0_1_0_5 + 2.33397554826171e-06*G0_1_1_0 - 1.84636791779689e-05*G0_1_1_1 + 2.76509205080683e-06*G0_1_1_2 - 9.33590219304675e-06*G0_1_1_3 + 2.14071642643105e-06*G0_1_1_4 - 7.84929356358082e-06*G0_1_1_5 + 1.59067123352864e-06*G0_1_2_0 + 2.76509205080683e-06*G0_1_2_1 - 2.23883259597583e-05*G0_1_2_2 - 5.53018410161359e-06*G0_1_2_3 - 2.14071642643108e-06*G0_1_2_4 - 3.80571809143302e-06*G0_1_3_0 - 9.33590219304675e-06*G0_1_3_1 - 5.53018410161358e-06*G0_1_3_2 + 1.8552875695736e-05*G0_1_3_3 + 3.33000333000393e-06*G0_1_3_4 + 7.61143618286602e-06*G0_1_3_5 - 2.08125208125244e-06*G0_1_4_0 + 2.14071642643105e-06*G0_1_4_1 - 2.14071642643108e-06*G0_1_4_2 + 3.33000333000393e-06*G0_1_4_3 - 4.56686170971961e-05*G0_1_4_4 - 4.28143285286212e-06*G0_1_4_5 - 1.48660862946599e-06*G0_1_5_0 - 7.84929356358082e-06*G0_1_5_1 + 7.61143618286602e-06*G0_1_5_3 - 4.28143285286211e-06*G0_1_5_4 + 1.1417154274299e-05*G0_1_5_5 + 1.16698777413083e-05*G0_2_0_0 + 1.59067123352864e-06*G0_2_0_1 - 3.94694591123229e-05*G0_2_0_2 - 4.04357547214758e-06*G0_2_0_3 - 1.58769801626971e-05*G0_2_0_4 + 1.48660862946603e-06*G0_2_0_5 + 1.59067123352864e-06*G0_2_1_0 + 2.76509205080683e-06*G0_2_1_1 - 2.23883259597583e-05*G0_2_1_2 - 5.53018410161359e-06*G0_2_1_3 - 2.14071642643108e-06*G0_2_1_4 - 3.94694591123229e-05*G0_2_2_0 - 2.23883259597583e-05*G0_2_2_1 + 0.000417707292707363*G0_2_2_2 + 9.10399124684993e-05*G0_2_2_3 + 0.000171614100185558*G0_2_2_4 + 7.84929356358066e-06*G0_2_2_5 - 4.04357547214758e-06*G0_2_3_0 - 5.53018410161359e-06*G0_2_3_1 + 9.10399124684993e-05*G0_2_3_2 + 1.11792968935845e-05*G0_2_3_3 + 1.23685837971573e-05*G0_2_3_4 - 7.61143618286603e-06*G0_2_3_5 - 1.58769801626971e-05*G0_2_4_0 - 2.14071642643108e-06*G0_2_4_1 + 0.000171614100185558*G0_2_4_2 + 1.23685837971573e-05*G0_2_4_3 + 4.56686170971962e-05*G0_2_4_4 - 1.1417154274299e-05*G0_2_4_5 + 1.48660862946602e-06*G0_2_5_0 + 7.84929356358066e-06*G0_2_5_2 - 7.61143618286603e-06*G0_2_5_3 - 1.1417154274299e-05*G0_2_5_4 + 4.28143285286214e-06*G0_2_5_5 - 1.48660862946604e-06*G0_3_0_0 - 3.80571809143302e-06*G0_3_0_1 - 4.04357547214758e-06*G0_3_0_2 + 7.61143618286606e-06*G0_3_0_3 + 7.13572142143693e-06*G0_3_0_4 - 3.80571809143302e-06*G0_3_1_0 - 9.33590219304675e-06*G0_3_1_1 - 5.53018410161358e-06*G0_3_1_2 + 1.8552875695736e-05*G0_3_1_3 + 3.33000333000392e-06*G0_3_1_4 + 7.61143618286602e-06*G0_3_1_5 - 4.04357547214758e-06*G0_3_2_0 - 5.53018410161359e-06*G0_3_2_1 + 9.10399124684993e-05*G0_3_2_2 + 1.11792968935845e-05*G0_3_2_3 + 1.23685837971573e-05*G0_3_2_4 - 7.61143618286603e-06*G0_3_2_5 + 7.61143618286607e-06*G0_3_3_0 + 1.8552875695736e-05*G0_3_3_1 + 1.11792968935845e-05*G0_3_3_2 - 3.71057513914721e-05*G0_3_3_3 - 2.188287902574e-05*G0_3_3_4 + 7.13572142143693e-06*G0_3_4_0 + 3.33000333000392e-06*G0_3_4_1 + 1.23685837971573e-05*G0_3_4_2 - 2.188287902574e-05*G0_3_4_3 + 7.70657913515185e-05*G0_3_4_4 + 8.56286570572423e-06*G0_3_4_5 + 7.61143618286602e-06*G0_3_5_1 - 7.61143618286603e-06*G0_3_5_2 + 8.56286570572423e-06*G0_3_5_4 - 8.56286570572429e-06*G0_3_5_5 - 3.28837828837886e-05*G0_4_0_0 - 2.08125208125244e-06*G0_4_0_1 - 1.58769801626971e-05*G0_4_0_2 + 7.13572142143693e-06*G0_4_0_3 - 2.78293135436041e-05*G0_4_0_4 + 1.1892869035728e-06*G0_4_0_5 - 2.08125208125244e-06*G0_4_1_0 + 2.14071642643105e-06*G0_4_1_1 - 2.14071642643108e-06*G0_4_1_2 + 3.33000333000393e-06*G0_4_1_3 - 4.56686170971961e-05*G0_4_1_4 - 4.28143285286211e-06*G0_4_1_5 - 1.58769801626971e-05*G0_4_2_0 - 2.14071642643108e-06*G0_4_2_1 + 0.000171614100185558*G0_4_2_2 + 1.23685837971573e-05*G0_4_2_3 + 4.56686170971962e-05*G0_4_2_4 - 1.1417154274299e-05*G0_4_2_5 + 7.13572142143693e-06*G0_4_3_0 + 3.33000333000393e-06*G0_4_3_1 + 1.23685837971573e-05*G0_4_3_2 - 2.188287902574e-05*G0_4_3_3 + 7.70657913515185e-05*G0_4_3_4 + 8.56286570572423e-06*G0_4_3_5 - 2.78293135436041e-05*G0_4_4_0 - 4.56686170971961e-05*G0_4_4_1 + 4.56686170971963e-05*G0_4_4_2 + 7.70657913515185e-05*G0_4_4_3 + 0.000810617953475232*G0_4_4_4 + 0.00011417154274299*G0_4_4_5 + 1.1892869035728e-06*G0_4_5_0 - 4.28143285286211e-06*G0_4_5_1 - 1.1417154274299e-05*G0_4_5_2 + 8.56286570572423e-06*G0_4_5_3 + 0.00011417154274299*G0_4_5_4 - 1.486608629466e-06*G0_5_0_1 + 1.48660862946602e-06*G0_5_0_2 + 1.18928690357281e-06*G0_5_0_4 - 1.1892869035728e-06*G0_5_0_5 - 1.486608629466e-06*G0_5_1_0 - 7.84929356358082e-06*G0_5_1_1 + 7.61143618286602e-06*G0_5_1_3 - 4.28143285286211e-06*G0_5_1_4 + 1.1417154274299e-05*G0_5_1_5 + 1.48660862946602e-06*G0_5_2_0 + 7.84929356358066e-06*G0_5_2_2 - 7.61143618286603e-06*G0_5_2_3 - 1.1417154274299e-05*G0_5_2_4 + 4.28143285286213e-06*G0_5_2_5 + 7.61143618286602e-06*G0_5_3_1 - 7.61143618286603e-06*G0_5_3_2 + 8.56286570572423e-06*G0_5_3_4 - 8.56286570572429e-06*G0_5_3_5 + 1.18928690357281e-06*G0_5_4_0 - 4.28143285286212e-06*G0_5_4_1 - 1.1417154274299e-05*G0_5_4_2 + 8.56286570572423e-06*G0_5_4_3 + 0.00011417154274299*G0_5_4_4 - 1.18928690357279e-06*G0_5_5_0 + 1.1417154274299e-05*G0_5_5_1 + 4.28143285286213e-06*G0_5_5_2 - 8.56286570572429e-06*G0_5_5_3 - 0.00011417154274299*G0_5_5_5;
    A[15] = A[51];
    A[86] = A[25] + 5.74425574425668e-05*G0_0_0_0 - 1.64567575281888e-05*G0_0_0_1 + 8.91965177680538e-08*G0_0_0_2 - 1.51634080205534e-05*G0_0_0_3 - 1.37362637362663e-05*G0_0_0_4 + 3.78787878787942e-05*G0_0_0_5 - 1.64567575281888e-05*G0_0_1_0 + 1.94299747871209e-05*G0_0_1_1 - 2.82455639598543e-07*G0_0_1_2 - 2.61643118786019e-06*G0_0_1_3 - 2.40830597973495e-05*G0_0_1_4 + 1.01089386803689e-06*G0_0_1_5 + 8.91965177680606e-08*G0_0_2_0 - 2.82455639598541e-07*G0_0_2_1 - 2.78590457161934e-05*G0_0_2_2 - 1.14171542742991e-05*G0_0_2_3 - 1.07035821321555e-05*G0_0_2_4 - 2.69373483659244e-05*G0_0_2_5 - 1.51634080205534e-05*G0_0_3_0 - 2.61643118786019e-06*G0_0_3_1 - 1.14171542742991e-05*G0_0_3_2 + 7.75415061129478e-05*G0_0_3_3 + 7.8492935635806e-05*G0_0_3_4 + 8.42015127729555e-05*G0_0_3_5 - 1.37362637362663e-05*G0_0_4_0 - 2.40830597973495e-05*G0_0_4_1 - 1.07035821321555e-05*G0_0_4_2 + 7.8492935635806e-05*G0_0_4_3 + 0.00012772941344372*G0_0_4_4 + 0.000102040816326548*G0_0_4_5 + 3.78787878787942e-05*G0_0_5_0 + 1.01089386803689e-06*G0_0_5_1 - 2.69373483659244e-05*G0_0_5_2 + 8.42015127729555e-05*G0_0_5_3 + 0.000102040816326548*G0_0_5_4 + 0.000229294515008839*G0_0_5_5 - 1.64567575281888e-05*G0_1_0_0 + 1.94299747871209e-05*G0_1_0_1 - 2.82455639598543e-07*G0_1_0_2 - 2.61643118786019e-06*G0_1_0_3 - 2.40830597973495e-05*G0_1_0_4 + 1.01089386803689e-06*G0_1_0_5 + 1.94299747871209e-05*G0_1_1_0 - 4.40630797773728e-05*G0_1_1_1 + 7.68576661433934e-06*G0_1_1_2 - 3.88896817468311e-05*G0_1_1_3 - 1.83150183150214e-05*G0_1_1_4 - 6.11293468436427e-05*G0_1_1_5 - 2.82455639598543e-07*G0_1_2_0 + 7.68576661433934e-06*G0_1_2_1 - 2.25518529089996e-05*G0_1_2_2 + 5.53018410161359e-06*G0_1_2_3 + 6.89786404072232e-06*G0_1_2_4 + 1.76014461728777e-05*G0_1_2_5 - 2.61643118786019e-06*G0_1_3_0 - 3.88896817468311e-05*G0_1_3_1 + 5.5301841016136e-06*G0_1_3_2 + 7.84929356358055e-06*G0_1_3_3 + 4.18628990057631e-05*G0_1_3_4 - 2.9970029970035e-05*G0_1_3_5 - 2.40830597973495e-05*G0_1_4_0 - 1.83150183150214e-05*G0_1_4_1 + 6.89786404072232e-06*G0_1_4_2 + 4.18628990057632e-05*G0_1_4_3 + 8.42015127729554e-05*G0_1_4_4 + 1.42714428428737e-06*G0_1_4_5 + 1.01089386803689e-06*G0_1_5_0 - 6.11293468436427e-05*G0_1_5_1 + 1.76014461728777e-05*G0_1_5_2 - 2.9970029970035e-05*G0_1_5_3 + 1.42714428428737e-06*G0_1_5_4 - 0.000129156557728008*G0_1_5_5 + 8.91965177680538e-08*G0_2_0_0 - 2.82455639598542e-07*G0_2_0_1 - 2.78590457161934e-05*G0_2_0_2 - 1.14171542742991e-05*G0_2_0_3 - 1.07035821321555e-05*G0_2_0_4 - 2.69373483659243e-05*G0_2_0_5 - 2.82455639598542e-07*G0_2_1_0 + 7.68576661433934e-06*G0_2_1_1 - 2.25518529089996e-05*G0_2_1_2 + 5.53018410161359e-06*G0_2_1_3 + 6.89786404072232e-06*G0_2_1_4 + 1.76014461728777e-05*G0_2_1_5 - 2.78590457161934e-05*G0_2_2_0 - 2.25518529089996e-05*G0_2_2_1 + 0.000414585414585484*G0_2_2_2 + 7.32600732600858e-05*G0_2_2_3 + 0.000129037629037651*G0_2_2_4 - 1.04657247514407e-05*G0_2_2_5 - 1.14171542742991e-05*G0_2_3_0 + 5.53018410161359e-06*G0_2_3_1 + 7.32600732600858e-05*G0_2_3_2 + 4.75714761429129e-05*G0_2_3_3 + 9.03858046715359e-06*G0_2_3_4 + 4.37657580514798e-05*G0_2_3_5 - 1.07035821321554e-05*G0_2_4_0 + 6.89786404072231e-06*G0_2_4_1 + 0.000129037629037651*G0_2_4_2 + 9.03858046715359e-06*G0_2_4_3 - 7.13572142143102e-07*G0_2_4_4 + 7.13572142143702e-06*G0_2_4_5 - 2.69373483659244e-05*G0_2_5_0 + 1.76014461728777e-05*G0_2_5_1 - 1.04657247514407e-05*G0_2_5_2 + 4.37657580514798e-05*G0_2_5_3 + 7.13572142143702e-06*G0_2_5_4 + 0.000104181532752979*G0_2_5_5 - 1.51634080205534e-05*G0_3_0_0 - 2.61643118786019e-06*G0_3_0_1 - 1.14171542742991e-05*G0_3_0_2 + 7.75415061129478e-05*G0_3_0_3 + 7.8492935635806e-05*G0_3_0_4 + 8.42015127729556e-05*G0_3_0_5 - 2.61643118786019e-06*G0_3_1_0 - 3.88896817468311e-05*G0_3_1_1 + 5.5301841016136e-06*G0_3_1_2 + 7.84929356358054e-06*G0_3_1_3 + 4.18628990057631e-05*G0_3_1_4 - 2.9970029970035e-05*G0_3_1_5 - 1.14171542742991e-05*G0_3_2_0 + 5.53018410161359e-06*G0_3_2_1 + 7.32600732600858e-05*G0_3_2_2 + 4.75714761429129e-05*G0_3_2_3 + 9.03858046715359e-06*G0_3_2_4 + 4.37657580514798e-05*G0_3_2_5 + 7.75415061129477e-05*G0_3_3_0 + 7.84929356358055e-06*G0_3_3_1 + 4.75714761429129e-05*G0_3_3_2 - 0.000322534608248948*G0_3_3_3 - 0.000238808810237422*G0_3_3_4 - 0.000242614528328855*G0_3_3_5 + 7.8492935635806e-05*G0_3_4_0 + 4.18628990057632e-05*G0_3_4_1 + 9.03858046715358e-06*G0_3_4_2 - 0.000238808810237422*G0_3_4_3 - 0.000325388896817523*G0_3_4_4 - 0.000171257314114486*G0_3_4_5 + 8.42015127729555e-05*G0_3_5_0 - 2.9970029970035e-05*G0_3_5_1 + 4.37657580514798e-05*G0_3_5_2 - 0.000242614528328855*G0_3_5_3 - 0.000171257314114486*G0_3_5_4 - 0.000376766091051869*G0_3_5_5 - 1.37362637362663e-05*G0_4_0_0 - 2.40830597973495e-05*G0_4_0_1 - 1.07035821321555e-05*G0_4_0_2 + 7.8492935635806e-05*G0_4_0_3 + 0.00012772941344372*G0_4_0_4 + 0.000102040816326548*G0_4_0_5 - 2.40830597973495e-05*G0_4_1_0 - 1.83150183150214e-05*G0_4_1_1 + 6.89786404072232e-06*G0_4_1_2 + 4.18628990057632e-05*G0_4_1_3 + 8.42015127729554e-05*G0_4_1_4 + 1.42714428428736e-06*G0_4_1_5 - 1.07035821321554e-05*G0_4_2_0 + 6.89786404072232e-06*G0_4_2_1 + 0.000129037629037651*G0_4_2_2 + 9.03858046715358e-06*G0_4_2_3 - 7.13572142143102e-07*G0_4_2_4 + 7.13572142143701e-06*G0_4_2_5 + 7.8492935635806e-05*G0_4_3_0 + 4.18628990057631e-05*G0_4_3_1 + 9.03858046715358e-06*G0_4_3_2 - 0.000238808810237422*G0_4_3_3 - 0.000325388896817523*G0_4_3_4 - 0.000171257314114486*G0_4_3_5 + 0.00012772941344372*G0_4_4_0 + 8.42015127729554e-05*G0_4_4_1 - 7.13572142143075e-07*G0_4_4_2 - 0.000325388896817523*G0_4_4_3 - 0.000742115027829437*G0_4_4_4 - 0.000182674468388785*G0_4_4_5 + 0.000102040816326548*G0_4_5_0 + 1.42714428428736e-06*G0_4_5_1 + 7.13572142143701e-06*G0_4_5_2 - 0.000171257314114486*G0_4_5_3 - 0.000182674468388785*G0_4_5_4 - 0.000211217354074533*G0_4_5_5 + 3.78787878787942e-05*G0_5_0_0 + 1.01089386803688e-06*G0_5_0_1 - 2.69373483659244e-05*G0_5_0_2 + 8.42015127729555e-05*G0_5_0_3 + 0.000102040816326548*G0_5_0_4 + 0.000229294515008839*G0_5_0_5 + 1.01089386803689e-06*G0_5_1_0 - 6.11293468436427e-05*G0_5_1_1 + 1.76014461728777e-05*G0_5_1_2 - 2.9970029970035e-05*G0_5_1_3 + 1.42714428428737e-06*G0_5_1_4 - 0.000129156557728008*G0_5_1_5 - 2.69373483659244e-05*G0_5_2_0 + 1.76014461728777e-05*G0_5_2_1 - 1.04657247514407e-05*G0_5_2_2 + 4.37657580514798e-05*G0_5_2_3 + 7.135721421437e-06*G0_5_2_4 + 0.000104181532752979*G0_5_2_5 + 8.42015127729555e-05*G0_5_3_0 - 2.9970029970035e-05*G0_5_3_1 + 4.37657580514798e-05*G0_5_3_2 - 0.000242614528328855*G0_5_3_3 - 0.000171257314114486*G0_5_3_4 - 0.000376766091051869*G0_5_3_5 + 0.000102040816326548*G0_5_4_0 + 1.42714428428737e-06*G0_5_4_1 + 7.135721421437e-06*G0_5_4_2 - 0.000171257314114486*G0_5_4_3 - 0.000182674468388785*G0_5_4_4 - 0.000211217354074533*G0_5_4_5 + 0.000229294515008839*G0_5_5_0 - 0.000129156557728008*G0_5_5_1 + 0.000104181532752979*G0_5_5_2 - 0.000376766091051869*G0_5_5_3 - 0.000211217354074533*G0_5_5_4 - 0.00115313258170421*G0_5_5_5;
    A[41] = A[40] + 1.84636791779679e-05*G0_0_0_0 - 2.76509205080679e-06*G0_0_0_1 - 2.33397554826166e-06*G0_0_0_2 - 2.14071642643107e-06*G0_0_0_3 + 7.84929356358061e-06*G0_0_0_4 + 9.3359021930466e-06*G0_0_0_5 - 2.76509205080679e-06*G0_0_1_0 + 2.23883259597583e-05*G0_0_1_1 - 1.59067123352865e-06*G0_0_1_2 + 2.14071642643108e-06*G0_0_1_3 + 5.53018410161361e-06*G0_0_1_5 - 2.33397554826166e-06*G0_0_2_0 - 1.59067123352865e-06*G0_0_2_1 - 7.43304314733009e-07*G0_0_2_2 + 2.08125208125243e-06*G0_0_2_3 + 1.48660862946602e-06*G0_0_2_4 + 3.80571809143303e-06*G0_0_2_5 - 2.14071642643107e-06*G0_0_3_0 + 2.14071642643108e-06*G0_0_3_1 + 2.08125208125243e-06*G0_0_3_2 + 4.56686170971962e-05*G0_0_3_3 + 4.28143285286216e-06*G0_0_3_4 - 3.3300033300039e-06*G0_0_3_5 + 7.84929356358061e-06*G0_0_4_0 + 1.48660862946602e-06*G0_0_4_2 + 4.28143285286216e-06*G0_0_4_3 - 1.1417154274299e-05*G0_0_4_4 - 7.61143618286606e-06*G0_0_4_5 + 9.33590219304659e-06*G0_0_5_0 + 5.53018410161361e-06*G0_0_5_1 + 3.80571809143303e-06*G0_0_5_2 - 3.3300033300039e-06*G0_0_5_3 - 7.61143618286606e-06*G0_0_5_4 - 1.8552875695736e-05*G0_0_5_5 - 2.76509205080679e-06*G0_1_0_0 + 2.23883259597583e-05*G0_1_0_1 - 1.59067123352865e-06*G0_1_0_2 + 2.14071642643108e-06*G0_1_0_3 + 5.53018410161361e-06*G0_1_0_5 + 2.23883259597583e-05*G0_1_1_0 - 0.000417707292707363*G0_1_1_1 + 3.9469459112323e-05*G0_1_1_2 - 0.000171614100185558*G0_1_1_3 - 7.84929356358056e-06*G0_1_1_4 - 9.10399124684994e-05*G0_1_1_5 - 1.59067123352865e-06*G0_1_2_0 + 3.9469459112323e-05*G0_1_2_1 - 1.16698777413083e-05*G0_1_2_2 + 1.58769801626971e-05*G0_1_2_3 - 1.48660862946602e-06*G0_1_2_4 + 4.0435754721476e-06*G0_1_2_5 + 2.14071642643108e-06*G0_1_3_0 - 0.000171614100185558*G0_1_3_1 + 1.58769801626971e-05*G0_1_3_2 - 4.56686170971964e-05*G0_1_3_3 + 1.14171542742991e-05*G0_1_3_4 - 1.23685837971574e-05*G0_1_3_5 - 7.84929356358056e-06*G0_1_4_1 - 1.48660862946602e-06*G0_1_4_2 + 1.14171542742991e-05*G0_1_4_3 - 4.28143285286215e-06*G0_1_4_4 + 7.61143618286605e-06*G0_1_4_5 + 5.53018410161361e-06*G0_1_5_0 - 9.10399124684994e-05*G0_1_5_1 + 4.0435754721476e-06*G0_1_5_2 - 1.23685837971574e-05*G0_1_5_3 + 7.61143618286604e-06*G0_1_5_4 - 1.11792968935845e-05*G0_1_5_5 - 2.33397554826166e-06*G0_2_0_0 - 1.59067123352865e-06*G0_2_0_1 - 7.43304314733009e-07*G0_2_0_2 + 2.08125208125243e-06*G0_2_0_3 + 1.48660862946602e-06*G0_2_0_4 + 3.80571809143303e-06*G0_2_0_5 - 1.59067123352865e-06*G0_2_1_0 + 3.9469459112323e-05*G0_2_1_1 - 1.16698777413083e-05*G0_2_1_2 + 1.58769801626971e-05*G0_2_1_3 - 1.48660862946602e-06*G0_2_1_4 + 4.0435754721476e-06*G0_2_1_5 - 7.43304314733009e-07*G0_2_2_0 - 1.16698777413083e-05*G0_2_2_1 + 4.43306693306769e-05*G0_2_2_2 + 3.28837828837885e-05*G0_2_2_3 + 1.48660862946603e-06*G0_2_2_5 + 2.08125208125243e-06*G0_2_3_0 + 1.58769801626971e-05*G0_2_3_1 + 3.28837828837885e-05*G0_2_3_2 + 2.78293135436041e-05*G0_2_3_3 - 1.18928690357282e-06*G0_2_3_4 - 7.1357214214369e-06*G0_2_3_5 + 1.48660862946602e-06*G0_2_4_0 - 1.48660862946602e-06*G0_2_4_1 - 1.18928690357282e-06*G0_2_4_3 + 1.1892869035728e-06*G0_2_4_4 + 3.80571809143303e-06*G0_2_5_0 + 4.0435754721476e-06*G0_2_5_1 + 1.48660862946603e-06*G0_2_5_2 - 7.1357214214369e-06*G0_2_5_3 - 7.61143618286607e-06*G0_2_5_5 - 2.14071642643107e-06*G0_3_0_0 + 2.14071642643108e-06*G0_3_0_1 + 2.08125208125243e-06*G0_3_0_2 + 4.56686170971962e-05*G0_3_0_3 + 4.28143285286216e-06*G0_3_0_4 - 3.3300033300039e-06*G0_3_0_5 + 2.14071642643108e-06*G0_3_1_0 - 0.000171614100185558*G0_3_1_1 + 1.58769801626972e-05*G0_3_1_2 - 4.56686170971965e-05*G0_3_1_3 + 1.14171542742991e-05*G0_3_1_4 - 1.23685837971574e-05*G0_3_1_5 + 2.08125208125243e-06*G0_3_2_0 + 1.58769801626972e-05*G0_3_2_1 + 3.28837828837885e-05*G0_3_2_2 + 2.78293135436041e-05*G0_3_2_3 - 1.18928690357282e-06*G0_3_2_4 - 7.1357214214369e-06*G0_3_2_5 + 4.56686170971962e-05*G0_3_3_0 - 4.56686170971965e-05*G0_3_3_1 + 2.78293135436041e-05*G0_3_3_2 - 0.000810617953475233*G0_3_3_3 - 0.000114171542742991*G0_3_3_4 - 7.70657913515187e-05*G0_3_3_5 + 4.28143285286216e-06*G0_3_4_0 + 1.14171542742991e-05*G0_3_4_1 - 1.18928690357282e-06*G0_3_4_2 - 0.000114171542742991*G0_3_4_3 - 8.56286570572429e-06*G0_3_4_5 - 3.3300033300039e-06*G0_3_5_0 - 1.23685837971574e-05*G0_3_5_1 - 7.1357214214369e-06*G0_3_5_2 - 7.70657913515187e-05*G0_3_5_3 - 8.5628657057243e-06*G0_3_5_4 + 2.18828790257399e-05*G0_3_5_5 + 7.84929356358061e-06*G0_4_0_0 + 1.48660862946602e-06*G0_4_0_2 + 4.28143285286216e-06*G0_4_0_3 - 1.1417154274299e-05*G0_4_0_4 - 7.61143618286605e-06*G0_4_0_5 - 7.84929356358056e-06*G0_4_1_1 - 1.48660862946602e-06*G0_4_1_2 + 1.14171542742991e-05*G0_4_1_3 - 4.28143285286215e-06*G0_4_1_4 + 7.61143618286605e-06*G0_4_1_5 + 1.48660862946602e-06*G0_4_2_0 - 1.48660862946602e-06*G0_4_2_1 - 1.18928690357282e-06*G0_4_2_3 + 1.18928690357279e-06*G0_4_2_4 + 4.28143285286216e-06*G0_4_3_0 + 1.14171542742991e-05*G0_4_3_1 - 1.18928690357282e-06*G0_4_3_2 - 0.000114171542742991*G0_4_3_3 - 8.56286570572431e-06*G0_4_3_5 - 1.1417154274299e-05*G0_4_4_0 - 4.28143285286215e-06*G0_4_4_1 + 1.1892869035728e-06*G0_4_4_2 + 0.000114171542742991*G0_4_4_4 + 8.56286570572431e-06*G0_4_4_5 - 7.61143618286605e-06*G0_4_5_0 + 7.61143618286604e-06*G0_4_5_1 - 8.56286570572431e-06*G0_4_5_3 + 8.56286570572431e-06*G0_4_5_4 + 9.33590219304659e-06*G0_5_0_0 + 5.53018410161361e-06*G0_5_0_1 + 3.80571809143303e-06*G0_5_0_2 - 3.3300033300039e-06*G0_5_0_3 - 7.61143618286605e-06*G0_5_0_4 - 1.8552875695736e-05*G0_5_0_5 + 5.53018410161361e-06*G0_5_1_0 - 9.10399124684994e-05*G0_5_1_1 + 4.0435754721476e-06*G0_5_1_2 - 1.23685837971574e-05*G0_5_1_3 + 7.61143618286604e-06*G0_5_1_4 - 1.11792968935845e-05*G0_5_1_5 + 3.80571809143303e-06*G0_5_2_0 + 4.0435754721476e-06*G0_5_2_1 + 1.48660862946603e-06*G0_5_2_2 - 7.1357214214369e-06*G0_5_2_3 - 7.61143618286607e-06*G0_5_2_5 - 3.3300033300039e-06*G0_5_3_0 - 1.23685837971574e-05*G0_5_3_1 - 7.1357214214369e-06*G0_5_3_2 - 7.70657913515187e-05*G0_5_3_3 - 8.56286570572431e-06*G0_5_3_4 + 2.18828790257399e-05*G0_5_3_5 - 7.61143618286605e-06*G0_5_4_0 + 7.61143618286605e-06*G0_5_4_1 - 8.56286570572429e-06*G0_5_4_3 + 8.56286570572432e-06*G0_5_4_4 - 1.8552875695736e-05*G0_5_5_0 - 1.11792968935845e-05*G0_5_5_1 - 7.61143618286607e-06*G0_5_5_2 + 2.18828790257399e-05*G0_5_5_3 + 3.71057513914722e-05*G0_5_5_5;
    A[32] = -A[41] - 1.30226915941224e-05*G0_0_0_0 + 3.12187812187862e-07*G0_0_0_1 + 3.12187812187867e-07*G0_0_0_2 + 9.87108129965439e-06*G0_0_0_3 + 2.6164311878602e-06*G0_0_0_4 + 2.61643118786021e-06*G0_0_0_5 + 3.12187812187862e-07*G0_0_1_0 + 1.21158603301481e-05*G0_0_1_1 + 2.97321725893203e-07*G0_0_1_2 + 4.3408971980408e-06*G0_0_1_3 + 9.63322391893983e-06*G0_0_1_4 + 5.76804148232818e-06*G0_0_1_5 + 3.12187812187866e-07*G0_0_2_0 + 2.97321725893203e-07*G0_0_2_1 + 1.21158603301481e-05*G0_0_2_2 + 4.34089719804079e-06*G0_0_2_3 + 5.76804148232818e-06*G0_0_2_4 + 9.63322391893984e-06*G0_0_2_5 + 9.87108129965439e-06*G0_0_3_0 + 4.3408971980408e-06*G0_0_3_1 + 4.34089719804079e-06*G0_0_3_2 - 2.71157414014603e-05*G0_0_3_3 - 3.90086104371884e-05*G0_0_3_4 - 3.90086104371885e-05*G0_0_3_5 + 2.61643118786019e-06*G0_0_4_0 + 9.63322391893983e-06*G0_0_4_1 + 5.76804148232818e-06*G0_0_4_2 - 3.90086104371884e-05*G0_0_4_3 - 6.49350649350759e-05*G0_0_4_4 - 3.85328956757593e-05*G0_0_4_5 + 2.6164311878602e-06*G0_0_5_0 + 5.76804148232819e-06*G0_0_5_1 + 9.63322391893984e-06*G0_0_5_2 - 3.90086104371885e-05*G0_0_5_3 - 3.85328956757594e-05*G0_0_5_4 - 6.49350649350759e-05*G0_0_5_5 + 3.12187812187862e-07*G0_1_0_0 + 1.21158603301481e-05*G0_1_0_1 + 2.97321725893203e-07*G0_1_0_2 + 4.3408971980408e-06*G0_1_0_3 + 9.63322391893983e-06*G0_1_0_4 + 5.76804148232818e-06*G0_1_0_5 + 1.21158603301481e-05*G0_1_1_0 - 0.000325924075924131*G0_1_1_1 + 2.05449312592205e-05*G0_1_1_2 - 7.7838827838841e-05*G0_1_1_3 + 6.36268493411462e-06*G0_1_1_4 - 5.86913086913187e-05*G0_1_1_5 + 2.97321725893203e-07*G0_1_2_0 + 2.05449312592205e-05*G0_1_2_1 + 2.05449312592204e-05*G0_1_2_2 - 4.45982588839807e-06*G0_1_2_4 - 4.45982588839805e-06*G0_1_2_5 + 4.3408971980408e-06*G0_1_3_0 - 7.7838827838841e-05*G0_1_3_1 - 1.35578707007302e-05*G0_1_3_3 - 2.14071642643107e-05*G0_1_3_4 + 2.37857380714498e-07*G0_1_3_5 + 9.63322391893983e-06*G0_1_4_0 + 6.36268493411462e-06*G0_1_4_1 - 4.45982588839807e-06*G0_1_4_2 - 2.14071642643107e-05*G0_1_4_3 - 4.04357547214758e-05*G0_1_4_4 - 3.80571809143301e-06*G0_1_4_5 + 5.76804148232819e-06*G0_1_5_0 - 5.86913086913187e-05*G0_1_5_1 - 4.45982588839805e-06*G0_1_5_2 + 2.37857380714492e-07*G0_1_5_3 - 3.80571809143301e-06*G0_1_5_4 + 1.42714428428734e-06*G0_1_5_5 + 3.12187812187866e-07*G0_2_0_0 + 2.97321725893203e-07*G0_2_0_1 + 1.21158603301481e-05*G0_2_0_2 + 4.34089719804079e-06*G0_2_0_3 + 5.76804148232818e-06*G0_2_0_4 + 9.63322391893984e-06*G0_2_0_5 + 2.97321725893203e-07*G0_2_1_0 + 2.05449312592205e-05*G0_2_1_1 + 2.05449312592204e-05*G0_2_1_2 - 4.45982588839807e-06*G0_2_1_4 - 4.45982588839805e-06*G0_2_1_5 + 1.21158603301481e-05*G0_2_2_0 + 2.05449312592204e-05*G0_2_2_1 - 0.00032592407592413*G0_2_2_2 - 7.78388278388409e-05*G0_2_2_3 - 5.86913086913185e-05*G0_2_2_4 + 6.36268493411453e-06*G0_2_2_5 + 4.34089719804079e-06*G0_2_3_0 - 7.78388278388409e-05*G0_2_3_2 - 1.35578707007301e-05*G0_2_3_3 + 2.37857380714546e-07*G0_2_3_4 - 2.14071642643108e-05*G0_2_3_5 + 5.76804148232818e-06*G0_2_4_0 - 4.45982588839807e-06*G0_2_4_1 - 5.86913086913185e-05*G0_2_4_2 + 2.37857380714553e-07*G0_2_4_3 + 1.42714428428737e-06*G0_2_4_4 - 3.80571809143304e-06*G0_2_4_5 + 9.63322391893984e-06*G0_2_5_0 - 4.45982588839805e-06*G0_2_5_1 + 6.36268493411453e-06*G0_2_5_2 - 2.14071642643108e-05*G0_2_5_3 - 3.80571809143304e-06*G0_2_5_4 - 4.04357547214759e-05*G0_2_5_5 + 9.87108129965439e-06*G0_3_0_0 + 4.3408971980408e-06*G0_3_0_1 + 4.3408971980408e-06*G0_3_0_2 - 2.71157414014603e-05*G0_3_0_3 - 3.90086104371884e-05*G0_3_0_4 - 3.90086104371885e-05*G0_3_0_5 + 4.3408971980408e-06*G0_3_1_0 - 7.7838827838841e-05*G0_3_1_1 - 1.35578707007302e-05*G0_3_1_3 - 2.14071642643107e-05*G0_3_1_4 + 2.37857380714492e-07*G0_3_1_5 + 4.34089719804079e-06*G0_3_2_0 - 7.78388278388408e-05*G0_3_2_2 - 1.35578707007301e-05*G0_3_2_3 + 2.37857380714553e-07*G0_3_2_4 - 2.14071642643108e-05*G0_3_2_5 - 2.71157414014603e-05*G0_3_3_0 - 1.35578707007302e-05*G0_3_3_1 - 1.35578707007301e-05*G0_3_3_2 - 0.000399600399600467*G0_3_3_3 + 9.70458113315419e-05*G0_3_3_4 + 9.70458113315419e-05*G0_3_3_5 - 3.90086104371884e-05*G0_3_4_0 - 2.14071642643107e-05*G0_3_4_1 + 2.37857380714553e-07*G0_3_4_2 + 9.70458113315419e-05*G0_3_4_3 + 0.000158888730317329*G0_3_4_4 + 8.56286570572429e-05*G0_3_4_5 - 3.90086104371885e-05*G0_3_5_0 + 2.37857380714478e-07*G0_3_5_1 - 2.14071642643108e-05*G0_3_5_2 + 9.70458113315419e-05*G0_3_5_3 + 8.56286570572429e-05*G0_3_5_4 + 0.000158888730317329*G0_3_5_5 + 2.61643118786019e-06*G0_4_0_0 + 9.63322391893983e-06*G0_4_0_1 + 5.76804148232818e-06*G0_4_0_2 - 3.90086104371884e-05*G0_4_0_3 - 6.49350649350759e-05*G0_4_0_4 - 3.85328956757593e-05*G0_4_0_5 + 9.63322391893983e-06*G0_4_1_0 + 6.36268493411462e-06*G0_4_1_1 - 4.45982588839807e-06*G0_4_1_2 - 2.14071642643107e-05*G0_4_1_3 - 4.04357547214758e-05*G0_4_1_4 - 3.80571809143301e-06*G0_4_1_5 + 5.76804148232818e-06*G0_4_2_0 - 4.45982588839807e-06*G0_4_2_1 - 5.86913086913185e-05*G0_4_2_2 + 2.37857380714553e-07*G0_4_2_3 + 1.42714428428737e-06*G0_4_2_4 - 3.80571809143304e-06*G0_4_2_5 - 3.90086104371884e-05*G0_4_3_0 - 2.14071642643107e-05*G0_4_3_1 + 2.37857380714553e-07*G0_4_3_2 + 9.70458113315419e-05*G0_4_3_3 + 0.000158888730317328*G0_4_3_4 + 8.56286570572429e-05*G0_4_3_5 - 6.49350649350759e-05*G0_4_4_0 - 4.04357547214758e-05*G0_4_4_1 + 1.42714428428737e-06*G0_4_4_2 + 0.000158888730317328*G0_4_4_3 + 0.000311117453974649*G0_4_4_4 + 8.84829456258177e-05*G0_4_4_5 - 3.85328956757593e-05*G0_4_5_0 - 3.80571809143301e-06*G0_4_5_1 - 3.80571809143304e-06*G0_4_5_2 + 8.5628657057243e-05*G0_4_5_3 + 8.84829456258177e-05*G0_4_5_4 + 8.84829456258177e-05*G0_4_5_5 + 2.6164311878602e-06*G0_5_0_0 + 5.76804148232818e-06*G0_5_0_1 + 9.63322391893984e-06*G0_5_0_2 - 3.90086104371885e-05*G0_5_0_3 - 3.85328956757593e-05*G0_5_0_4 - 6.49350649350759e-05*G0_5_0_5 + 5.76804148232818e-06*G0_5_1_0 - 5.86913086913187e-05*G0_5_1_1 - 4.45982588839805e-06*G0_5_1_2 + 2.37857380714505e-07*G0_5_1_3 - 3.80571809143301e-06*G0_5_1_4 + 1.42714428428736e-06*G0_5_1_5 + 9.63322391893984e-06*G0_5_2_0 - 4.45982588839805e-06*G0_5_2_1 + 6.36268493411453e-06*G0_5_2_2 - 2.14071642643108e-05*G0_5_2_3 - 3.80571809143304e-06*G0_5_2_4 - 4.04357547214759e-05*G0_5_2_5 - 3.90086104371885e-05*G0_5_3_0 + 2.37857380714492e-07*G0_5_3_1 - 2.14071642643108e-05*G0_5_3_2 + 9.7045811331542e-05*G0_5_3_3 + 8.56286570572429e-05*G0_5_3_4 + 0.000158888730317329*G0_5_3_5 - 3.85328956757593e-05*G0_5_4_0 - 3.80571809143301e-06*G0_5_4_1 - 3.80571809143304e-06*G0_5_4_2 + 8.5628657057243e-05*G0_5_4_3 + 8.84829456258177e-05*G0_5_4_4 + 8.84829456258178e-05*G0_5_4_5 - 6.49350649350759e-05*G0_5_5_0 + 1.42714428428734e-06*G0_5_5_1 - 4.04357547214759e-05*G0_5_5_2 + 0.000158888730317329*G0_5_5_3 + 8.84829456258178e-05*G0_5_5_4 + 0.00031111745397465*G0_5_5_5;
    A[35] = A[60] + 0.000414585414585485*G0_0_0_0 - 2.25518529089995e-05*G0_0_0_1 - 2.78590457161933e-05*G0_0_0_2 - 1.04657247514408e-05*G0_0_0_3 + 0.000129037629037651*G0_0_0_4 + 7.32600732600855e-05*G0_0_0_5 - 2.25518529089995e-05*G0_0_1_0 + 7.68576661433935e-06*G0_0_1_1 - 2.8245563959855e-07*G0_0_1_2 + 1.76014461728777e-05*G0_0_1_3 + 6.89786404072237e-06*G0_0_1_4 + 5.53018410161365e-06*G0_0_1_5 - 2.78590457161933e-05*G0_0_2_0 - 2.8245563959855e-07*G0_0_2_1 + 8.91965177679793e-08*G0_0_2_2 - 2.69373483659243e-05*G0_0_2_3 - 1.07035821321554e-05*G0_0_2_4 - 1.14171542742991e-05*G0_0_2_5 - 1.04657247514408e-05*G0_0_3_0 + 1.76014461728777e-05*G0_0_3_1 - 2.69373483659243e-05*G0_0_3_2 + 0.000104181532752979*G0_0_3_3 + 7.13572142143686e-06*G0_0_3_4 + 4.37657580514797e-05*G0_0_3_5 + 0.000129037629037651*G0_0_4_0 + 6.89786404072236e-06*G0_0_4_1 - 1.07035821321554e-05*G0_0_4_2 + 7.13572142143686e-06*G0_0_4_3 - 7.13572142143482e-07*G0_0_4_4 + 9.03858046715333e-06*G0_0_4_5 + 7.32600732600854e-05*G0_0_5_0 + 5.53018410161365e-06*G0_0_5_1 - 1.14171542742991e-05*G0_0_5_2 + 4.37657580514797e-05*G0_0_5_3 + 9.03858046715334e-06*G0_0_5_4 + 4.75714761429127e-05*G0_0_5_5 - 2.25518529089995e-05*G0_1_0_0 + 7.68576661433935e-06*G0_1_0_1 - 2.8245563959855e-07*G0_1_0_2 + 1.76014461728777e-05*G0_1_0_3 + 6.89786404072237e-06*G0_1_0_4 + 5.53018410161364e-06*G0_1_0_5 + 7.68576661433935e-06*G0_1_1_0 - 4.40630797773732e-05*G0_1_1_1 + 1.94299747871209e-05*G0_1_1_2 - 6.1129346843643e-05*G0_1_1_3 - 1.83150183150214e-05*G0_1_1_4 - 3.88896817468313e-05*G0_1_1_5 - 2.8245563959855e-07*G0_1_2_0 + 1.94299747871209e-05*G0_1_2_1 - 1.64567575281889e-05*G0_1_2_2 + 1.0108938680369e-06*G0_1_2_3 - 2.40830597973496e-05*G0_1_2_4 - 2.61643118786021e-06*G0_1_2_5 + 1.76014461728777e-05*G0_1_3_0 - 6.1129346843643e-05*G0_1_3_1 + 1.0108938680369e-06*G0_1_3_2 - 0.000129156557728008*G0_1_3_3 + 1.42714428428735e-06*G0_1_3_4 - 2.99700299700351e-05*G0_1_3_5 + 6.89786404072237e-06*G0_1_4_0 - 1.83150183150214e-05*G0_1_4_1 - 2.40830597973496e-05*G0_1_4_2 + 1.42714428428735e-06*G0_1_4_3 + 8.42015127729555e-05*G0_1_4_4 + 4.18628990057632e-05*G0_1_4_5 + 5.53018410161364e-06*G0_1_5_0 - 3.88896817468313e-05*G0_1_5_1 - 2.61643118786021e-06*G0_1_5_2 - 2.99700299700351e-05*G0_1_5_3 + 4.18628990057632e-05*G0_1_5_4 + 7.84929356358056e-06*G0_1_5_5 - 2.78590457161933e-05*G0_2_0_0 - 2.82455639598549e-07*G0_2_0_1 + 8.91965177679793e-08*G0_2_0_2 - 2.69373483659243e-05*G0_2_0_3 - 1.07035821321554e-05*G0_2_0_4 - 1.14171542742991e-05*G0_2_0_5 - 2.8245563959855e-07*G0_2_1_0 + 1.94299747871209e-05*G0_2_1_1 - 1.64567575281889e-05*G0_2_1_2 + 1.0108938680369e-06*G0_2_1_3 - 2.40830597973496e-05*G0_2_1_4 - 2.61643118786021e-06*G0_2_1_5 + 8.91965177679725e-08*G0_2_2_0 - 1.64567575281889e-05*G0_2_2_1 + 5.7442557442567e-05*G0_2_2_2 + 3.78787878787943e-05*G0_2_2_3 - 1.37362637362661e-05*G0_2_2_4 - 1.51634080205534e-05*G0_2_2_5 - 2.69373483659243e-05*G0_2_3_0 + 1.0108938680369e-06*G0_2_3_1 + 3.78787878787943e-05*G0_2_3_2 + 0.00022929451500884*G0_2_3_3 + 0.000102040816326548*G0_2_3_4 + 8.42015127729555e-05*G0_2_3_5 - 1.07035821321554e-05*G0_2_4_0 - 2.40830597973496e-05*G0_2_4_1 - 1.37362637362661e-05*G0_2_4_2 + 0.000102040816326548*G0_2_4_3 + 0.000127729413443721*G0_2_4_4 + 7.8492935635806e-05*G0_2_4_5 - 1.14171542742991e-05*G0_2_5_0 - 2.61643118786021e-06*G0_2_5_1 - 1.51634080205534e-05*G0_2_5_2 + 8.42015127729555e-05*G0_2_5_3 + 7.84929356358061e-05*G0_2_5_4 + 7.75415061129479e-05*G0_2_5_5 - 1.04657247514408e-05*G0_3_0_0 + 1.76014461728777e-05*G0_3_0_1 - 2.69373483659243e-05*G0_3_0_2 + 0.000104181532752979*G0_3_0_3 + 7.13572142143686e-06*G0_3_0_4 + 4.37657580514797e-05*G0_3_0_5 + 1.76014461728777e-05*G0_3_1_0 - 6.1129346843643e-05*G0_3_1_1 + 1.01089386803691e-06*G0_3_1_2 - 0.000129156557728008*G0_3_1_3 + 1.42714428428735e-06*G0_3_1_4 - 2.99700299700351e-05*G0_3_1_5 - 2.69373483659243e-05*G0_3_2_0 + 1.0108938680369e-06*G0_3_2_1 + 3.78787878787943e-05*G0_3_2_2 + 0.00022929451500884*G0_3_2_3 + 0.000102040816326548*G0_3_2_4 + 8.42015127729555e-05*G0_3_2_5 + 0.000104181532752979*G0_3_3_0 - 0.000129156557728008*G0_3_3_1 + 0.00022929451500884*G0_3_3_2 - 0.0011531325817042*G0_3_3_3 - 0.000211217354074532*G0_3_3_4 - 0.000376766091051869*G0_3_3_5 + 7.13572142143686e-06*G0_3_4_0 + 1.42714428428734e-06*G0_3_4_1 + 0.000102040816326548*G0_3_4_2 - 0.000211217354074532*G0_3_4_3 - 0.000182674468388785*G0_3_4_4 - 0.000171257314114486*G0_3_4_5 + 4.37657580514797e-05*G0_3_5_0 - 2.99700299700351e-05*G0_3_5_1 + 8.42015127729555e-05*G0_3_5_2 - 0.000376766091051869*G0_3_5_3 - 0.000171257314114486*G0_3_5_4 - 0.000242614528328855*G0_3_5_5 + 0.000129037629037651*G0_4_0_0 + 6.89786404072237e-06*G0_4_0_1 - 1.07035821321554e-05*G0_4_0_2 + 7.13572142143686e-06*G0_4_0_3 - 7.13572142143509e-07*G0_4_0_4 + 9.03858046715334e-06*G0_4_0_5 + 6.89786404072238e-06*G0_4_1_0 - 1.83150183150214e-05*G0_4_1_1 - 2.40830597973496e-05*G0_4_1_2 + 1.42714428428734e-06*G0_4_1_3 + 8.42015127729555e-05*G0_4_1_4 + 4.18628990057632e-05*G0_4_1_5 - 1.07035821321554e-05*G0_4_2_0 - 2.40830597973496e-05*G0_4_2_1 - 1.37362637362661e-05*G0_4_2_2 + 0.000102040816326548*G0_4_2_3 + 0.000127729413443721*G0_4_2_4 + 7.8492935635806e-05*G0_4_2_5 + 7.13572142143686e-06*G0_4_3_0 + 1.42714428428734e-06*G0_4_3_1 + 0.000102040816326548*G0_4_3_2 - 0.000211217354074532*G0_4_3_3 - 0.000182674468388785*G0_4_3_4 - 0.000171257314114486*G0_4_3_5 - 7.13572142143482e-07*G0_4_4_0 + 8.42015127729555e-05*G0_4_4_1 + 0.000127729413443721*G0_4_4_2 - 0.000182674468388785*G0_4_4_3 - 0.000742115027829438*G0_4_4_4 - 0.000325388896817523*G0_4_4_5 + 9.03858046715334e-06*G0_4_5_0 + 4.18628990057632e-05*G0_4_5_1 + 7.8492935635806e-05*G0_4_5_2 - 0.000171257314114486*G0_4_5_3 - 0.000325388896817523*G0_4_5_4 - 0.000238808810237422*G0_4_5_5 + 7.32600732600854e-05*G0_5_0_0 + 5.53018410161364e-06*G0_5_0_1 - 1.14171542742991e-05*G0_5_0_2 + 4.37657580514797e-05*G0_5_0_3 + 9.03858046715335e-06*G0_5_0_4 + 4.75714761429127e-05*G0_5_0_5 + 5.53018410161364e-06*G0_5_1_0 - 3.88896817468313e-05*G0_5_1_1 - 2.61643118786021e-06*G0_5_1_2 - 2.99700299700351e-05*G0_5_1_3 + 4.18628990057632e-05*G0_5_1_4 + 7.84929356358056e-06*G0_5_1_5 - 1.14171542742991e-05*G0_5_2_0 - 2.61643118786021e-06*G0_5_2_1 - 1.51634080205534e-05*G0_5_2_2 + 8.42015127729555e-05*G0_5_2_3 + 7.84929356358061e-05*G0_5_2_4 + 7.75415061129479e-05*G0_5_2_5 + 4.37657580514797e-05*G0_5_3_0 - 2.99700299700351e-05*G0_5_3_1 + 8.42015127729555e-05*G0_5_3_2 - 0.000376766091051869*G0_5_3_3 - 0.000171257314114486*G0_5_3_4 - 0.000242614528328855*G0_5_3_5 + 9.03858046715334e-06*G0_5_4_0 + 4.18628990057632e-05*G0_5_4_1 + 7.8492935635806e-05*G0_5_4_2 - 0.000171257314114486*G0_5_4_3 - 0.000325388896817523*G0_5_4_4 - 0.000238808810237422*G0_5_4_5 + 4.75714761429127e-05*G0_5_5_0 + 7.84929356358056e-06*G0_5_5_1 + 7.75415061129478e-05*G0_5_5_2 - 0.000242614528328855*G0_5_5_3 - 0.000238808810237422*G0_5_5_4 - 0.000322534608248949*G0_5_5_5;
    A[61] = A[16];
    A[74] = A[32] - 4.40630797773727e-05*G0_0_0_0 + 1.94299747871209e-05*G0_0_0_1 + 7.68576661433933e-06*G0_0_0_2 - 1.83150183150214e-05*G0_0_0_3 - 3.88896817468312e-05*G0_0_0_4 - 6.11293468436427e-05*G0_0_0_5 + 1.94299747871209e-05*G0_0_1_0 - 1.64567575281889e-05*G0_0_1_1 - 2.82455639598553e-07*G0_0_1_2 - 2.40830597973496e-05*G0_0_1_3 - 2.61643118786022e-06*G0_0_1_4 + 1.01089386803685e-06*G0_0_1_5 + 7.68576661433933e-06*G0_0_2_0 - 2.82455639598553e-07*G0_0_2_1 - 2.25518529089995e-05*G0_0_2_2 + 6.89786404072237e-06*G0_0_2_3 + 5.53018410161365e-06*G0_0_2_4 + 1.76014461728777e-05*G0_0_2_5 - 1.83150183150214e-05*G0_0_3_0 - 2.40830597973496e-05*G0_0_3_1 + 6.89786404072237e-06*G0_0_3_2 + 8.42015127729556e-05*G0_0_3_3 + 4.18628990057633e-05*G0_0_3_4 + 1.42714428428742e-06*G0_0_3_5 - 3.88896817468312e-05*G0_0_4_0 - 2.61643118786022e-06*G0_0_4_1 + 5.53018410161365e-06*G0_0_4_2 + 4.18628990057633e-05*G0_0_4_3 + 7.84929356358068e-06*G0_0_4_4 - 2.9970029970035e-05*G0_0_4_5 - 6.11293468436427e-05*G0_0_5_0 + 1.01089386803685e-06*G0_0_5_1 + 1.76014461728777e-05*G0_0_5_2 + 1.42714428428742e-06*G0_0_5_3 - 2.9970029970035e-05*G0_0_5_4 - 0.000129156557728008*G0_0_5_5 + 1.94299747871209e-05*G0_1_0_0 - 1.64567575281889e-05*G0_1_0_1 - 2.82455639598553e-07*G0_1_0_2 - 2.40830597973496e-05*G0_1_0_3 - 2.61643118786022e-06*G0_1_0_4 + 1.01089386803685e-06*G0_1_0_5 - 1.64567575281889e-05*G0_1_1_0 + 5.74425574425672e-05*G0_1_1_1 + 8.91965177679521e-08*G0_1_1_2 - 1.37362637362661e-05*G0_1_1_3 - 1.51634080205535e-05*G0_1_1_4 + 3.78787878787942e-05*G0_1_1_5 - 2.82455639598554e-07*G0_1_2_0 + 8.91965177679589e-08*G0_1_2_1 - 2.78590457161932e-05*G0_1_2_2 - 1.07035821321553e-05*G0_1_2_3 - 1.1417154274299e-05*G0_1_2_4 - 2.69373483659243e-05*G0_1_2_5 - 2.40830597973496e-05*G0_1_3_0 - 1.37362637362661e-05*G0_1_3_1 - 1.07035821321553e-05*G0_1_3_2 + 0.000127729413443721*G0_1_3_3 + 7.84929356358061e-05*G0_1_3_4 + 0.000102040816326548*G0_1_3_5 - 2.61643118786022e-06*G0_1_4_0 - 1.51634080205535e-05*G0_1_4_1 - 1.1417154274299e-05*G0_1_4_2 + 7.84929356358061e-05*G0_1_4_3 + 7.75415061129479e-05*G0_1_4_4 + 8.42015127729556e-05*G0_1_4_5 + 1.01089386803685e-06*G0_1_5_0 + 3.78787878787942e-05*G0_1_5_1 - 2.69373483659243e-05*G0_1_5_2 + 0.000102040816326548*G0_1_5_3 + 8.42015127729555e-05*G0_1_5_4 + 0.000229294515008839*G0_1_5_5 + 7.68576661433933e-06*G0_2_0_0 - 2.82455639598553e-07*G0_2_0_1 - 2.25518529089995e-05*G0_2_0_2 + 6.89786404072238e-06*G0_2_0_3 + 5.53018410161365e-06*G0_2_0_4 + 1.76014461728777e-05*G0_2_0_5 - 2.82455639598553e-07*G0_2_1_0 + 8.91965177679589e-08*G0_2_1_1 - 2.78590457161932e-05*G0_2_1_2 - 1.07035821321553e-05*G0_2_1_3 - 1.1417154274299e-05*G0_2_1_4 - 2.69373483659243e-05*G0_2_1_5 - 2.25518529089995e-05*G0_2_2_0 - 2.78590457161932e-05*G0_2_2_1 + 0.000414585414585484*G0_2_2_2 + 0.000129037629037651*G0_2_2_3 + 7.32600732600853e-05*G0_2_2_4 - 1.04657247514408e-05*G0_2_2_5 + 6.89786404072238e-06*G0_2_3_0 - 1.07035821321553e-05*G0_2_3_1 + 0.000129037629037651*G0_2_3_2 - 7.1357214214378e-07*G0_2_3_3 + 9.03858046715331e-06*G0_2_3_4 + 7.13572142143692e-06*G0_2_3_5 + 5.53018410161365e-06*G0_2_4_0 - 1.1417154274299e-05*G0_2_4_1 + 7.32600732600853e-05*G0_2_4_2 + 9.03858046715331e-06*G0_2_4_3 + 4.75714761429126e-05*G0_2_4_4 + 4.37657580514797e-05*G0_2_4_5 + 1.76014461728777e-05*G0_2_5_0 - 2.69373483659243e-05*G0_2_5_1 - 1.04657247514408e-05*G0_2_5_2 + 7.13572142143692e-06*G0_2_5_3 + 4.37657580514797e-05*G0_2_5_4 + 0.000104181532752979*G0_2_5_5 - 1.83150183150214e-05*G0_3_0_0 - 2.40830597973496e-05*G0_3_0_1 + 6.89786404072237e-06*G0_3_0_2 + 8.42015127729556e-05*G0_3_0_3 + 4.18628990057633e-05*G0_3_0_4 + 1.42714428428742e-06*G0_3_0_5 - 2.40830597973496e-05*G0_3_1_0 - 1.37362637362661e-05*G0_3_1_1 - 1.07035821321553e-05*G0_3_1_2 + 0.000127729413443721*G0_3_1_3 + 7.84929356358061e-05*G0_3_1_4 + 0.000102040816326548*G0_3_1_5 + 6.89786404072237e-06*G0_3_2_0 - 1.07035821321553e-05*G0_3_2_1 + 0.000129037629037651*G0_3_2_2 - 7.1357214214378e-07*G0_3_2_3 + 9.03858046715331e-06*G0_3_2_4 + 7.13572142143692e-06*G0_3_2_5 + 8.42015127729556e-05*G0_3_3_0 + 0.000127729413443721*G0_3_3_1 - 7.13572142143753e-07*G0_3_3_2 - 0.00074211502782944*G0_3_3_3 - 0.000325388896817523*G0_3_3_4 - 0.000182674468388785*G0_3_3_5 + 4.18628990057633e-05*G0_3_4_0 + 7.84929356358061e-05*G0_3_4_1 + 9.03858046715331e-06*G0_3_4_2 - 0.000325388896817523*G0_3_4_3 - 0.000238808810237422*G0_3_4_4 - 0.000171257314114486*G0_3_4_5 + 1.42714428428743e-06*G0_3_5_0 + 0.000102040816326548*G0_3_5_1 + 7.13572142143692e-06*G0_3_5_2 - 0.000182674468388785*G0_3_5_3 - 0.000171257314114486*G0_3_5_4 - 0.000211217354074533*G0_3_5_5 - 3.88896817468312e-05*G0_4_0_0 - 2.61643118786022e-06*G0_4_0_1 + 5.53018410161365e-06*G0_4_0_2 + 4.18628990057633e-05*G0_4_0_3 + 7.84929356358067e-06*G0_4_0_4 - 2.9970029970035e-05*G0_4_0_5 - 2.61643118786022e-06*G0_4_1_0 - 1.51634080205535e-05*G0_4_1_1 - 1.1417154274299e-05*G0_4_1_2 + 7.84929356358061e-05*G0_4_1_3 + 7.75415061129479e-05*G0_4_1_4 + 8.42015127729556e-05*G0_4_1_5 + 5.53018410161365e-06*G0_4_2_0 - 1.1417154274299e-05*G0_4_2_1 + 7.32600732600853e-05*G0_4_2_2 + 9.03858046715331e-06*G0_4_2_3 + 4.75714761429126e-05*G0_4_2_4 + 4.37657580514797e-05*G0_4_2_5 + 4.18628990057633e-05*G0_4_3_0 + 7.84929356358061e-05*G0_4_3_1 + 9.03858046715331e-06*G0_4_3_2 - 0.000325388896817523*G0_4_3_3 - 0.000238808810237422*G0_4_3_4 - 0.000171257314114486*G0_4_3_5 + 7.84929356358068e-06*G0_4_4_0 + 7.75415061129479e-05*G0_4_4_1 + 4.75714761429126e-05*G0_4_4_2 - 0.000238808810237422*G0_4_4_3 - 0.000322534608248949*G0_4_4_4 - 0.000242614528328855*G0_4_4_5 - 2.9970029970035e-05*G0_4_5_0 + 8.42015127729556e-05*G0_4_5_1 + 4.37657580514797e-05*G0_4_5_2 - 0.000171257314114486*G0_4_5_3 - 0.000242614528328855*G0_4_5_4 - 0.000376766091051869*G0_4_5_5 - 6.11293468436427e-05*G0_5_0_0 + 1.01089386803685e-06*G0_5_0_1 + 1.76014461728777e-05*G0_5_0_2 + 1.42714428428743e-06*G0_5_0_3 - 2.9970029970035e-05*G0_5_0_4 - 0.000129156557728008*G0_5_0_5 + 1.01089386803685e-06*G0_5_1_0 + 3.78787878787942e-05*G0_5_1_1 - 2.69373483659243e-05*G0_5_1_2 + 0.000102040816326548*G0_5_1_3 + 8.42015127729555e-05*G0_5_1_4 + 0.000229294515008839*G0_5_1_5 + 1.76014461728777e-05*G0_5_2_0 - 2.69373483659243e-05*G0_5_2_1 - 1.04657247514408e-05*G0_5_2_2 + 7.13572142143693e-06*G0_5_2_3 + 4.37657580514797e-05*G0_5_2_4 + 0.000104181532752979*G0_5_2_5 + 1.42714428428743e-06*G0_5_3_0 + 0.000102040816326548*G0_5_3_1 + 7.13572142143692e-06*G0_5_3_2 - 0.000182674468388785*G0_5_3_3 - 0.000171257314114486*G0_5_3_4 - 0.000211217354074533*G0_5_3_5 - 2.9970029970035e-05*G0_5_4_0 + 8.42015127729555e-05*G0_5_4_1 + 4.37657580514797e-05*G0_5_4_2 - 0.000171257314114486*G0_5_4_3 - 0.000242614528328855*G0_5_4_4 - 0.000376766091051869*G0_5_4_5 - 0.000129156557728008*G0_5_5_0 + 0.000229294515008839*G0_5_5_1 + 0.000104181532752979*G0_5_5_2 - 0.000211217354074533*G0_5_5_3 - 0.000376766091051869*G0_5_5_4 - 0.0011531325817042*G0_5_5_5;
    A[30] = A[32] - 1.84636791779687e-05*G0_0_0_0 + 2.33397554826169e-06*G0_0_0_1 + 2.76509205080682e-06*G0_0_0_2 + 2.14071642643106e-06*G0_0_0_3 - 9.33590219304672e-06*G0_0_0_4 - 7.84929356358077e-06*G0_0_0_5 + 2.33397554826169e-06*G0_0_1_0 + 7.43304314733001e-07*G0_0_1_1 + 1.59067123352864e-06*G0_0_1_2 - 2.08125208125245e-06*G0_0_1_3 - 3.80571809143302e-06*G0_0_1_4 - 1.48660862946602e-06*G0_0_1_5 + 2.76509205080682e-06*G0_0_2_0 + 1.59067123352864e-06*G0_0_2_1 - 2.23883259597583e-05*G0_0_2_2 - 2.14071642643106e-06*G0_0_2_3 - 5.5301841016136e-06*G0_0_2_4 + 2.14071642643106e-06*G0_0_3_0 - 2.08125208125244e-06*G0_0_3_1 - 2.14071642643106e-06*G0_0_3_2 - 4.56686170971962e-05*G0_0_3_3 + 3.33000333000391e-06*G0_0_3_4 - 4.28143285286213e-06*G0_0_3_5 - 9.33590219304672e-06*G0_0_4_0 - 3.80571809143302e-06*G0_0_4_1 - 5.5301841016136e-06*G0_0_4_2 + 3.33000333000391e-06*G0_0_4_3 + 1.8552875695736e-05*G0_0_4_4 + 7.61143618286603e-06*G0_0_4_5 - 7.84929356358077e-06*G0_0_5_0 - 1.48660862946602e-06*G0_0_5_1 - 4.28143285286214e-06*G0_0_5_3 + 7.61143618286603e-06*G0_0_5_4 + 1.1417154274299e-05*G0_0_5_5 + 2.3339755482617e-06*G0_1_0_0 + 7.43304314733001e-07*G0_1_0_1 + 1.59067123352864e-06*G0_1_0_2 - 2.08125208125245e-06*G0_1_0_3 - 3.80571809143302e-06*G0_1_0_4 - 1.48660862946602e-06*G0_1_0_5 + 7.43304314733002e-07*G0_1_1_0 - 4.43306693306767e-05*G0_1_1_1 + 1.16698777413083e-05*G0_1_1_2 - 3.28837828837885e-05*G0_1_1_3 - 1.48660862946602e-06*G0_1_1_4 + 1.59067123352864e-06*G0_1_2_0 + 1.16698777413083e-05*G0_1_2_1 - 3.94694591123229e-05*G0_1_2_2 - 1.58769801626971e-05*G0_1_2_3 - 4.04357547214757e-06*G0_1_2_4 + 1.48660862946602e-06*G0_1_2_5 - 2.08125208125245e-06*G0_1_3_0 - 3.28837828837885e-05*G0_1_3_1 - 1.58769801626971e-05*G0_1_3_2 - 2.78293135436039e-05*G0_1_3_3 + 7.13572142143693e-06*G0_1_3_4 + 1.18928690357282e-06*G0_1_3_5 - 3.80571809143302e-06*G0_1_4_0 - 1.48660862946603e-06*G0_1_4_1 - 4.04357547214757e-06*G0_1_4_2 + 7.13572142143693e-06*G0_1_4_3 + 7.61143618286605e-06*G0_1_4_4 - 1.48660862946602e-06*G0_1_5_0 + 1.48660862946601e-06*G0_1_5_2 + 1.18928690357283e-06*G0_1_5_3 - 1.18928690357278e-06*G0_1_5_5 + 2.76509205080682e-06*G0_2_0_0 + 1.59067123352864e-06*G0_2_0_1 - 2.23883259597583e-05*G0_2_0_2 - 2.14071642643106e-06*G0_2_0_3 - 5.5301841016136e-06*G0_2_0_4 + 1.59067123352864e-06*G0_2_1_0 + 1.16698777413083e-05*G0_2_1_1 - 3.94694591123229e-05*G0_2_1_2 - 1.58769801626971e-05*G0_2_1_3 - 4.04357547214757e-06*G0_2_1_4 + 1.48660862946602e-06*G0_2_1_5 - 2.23883259597583e-05*G0_2_2_0 - 3.94694591123229e-05*G0_2_2_1 + 0.000417707292707363*G0_2_2_2 + 0.000171614100185558*G0_2_2_3 + 9.10399124684991e-05*G0_2_2_4 + 7.84929356358065e-06*G0_2_2_5 - 2.14071642643106e-06*G0_2_3_0 - 1.58769801626971e-05*G0_2_3_1 + 0.000171614100185558*G0_2_3_2 + 4.56686170971963e-05*G0_2_3_3 + 1.23685837971573e-05*G0_2_3_4 - 1.1417154274299e-05*G0_2_3_5 - 5.5301841016136e-06*G0_2_4_0 - 4.04357547214757e-06*G0_2_4_1 + 9.10399124684991e-05*G0_2_4_2 + 1.23685837971573e-05*G0_2_4_3 + 1.11792968935845e-05*G0_2_4_4 - 7.61143618286605e-06*G0_2_4_5 + 1.48660862946602e-06*G0_2_5_1 + 7.84929356358066e-06*G0_2_5_2 - 1.1417154274299e-05*G0_2_5_3 - 7.61143618286605e-06*G0_2_5_4 + 4.28143285286213e-06*G0_2_5_5 + 2.14071642643106e-06*G0_3_0_0 - 2.08125208125244e-06*G0_3_0_1 - 2.14071642643107e-06*G0_3_0_2 - 4.56686170971962e-05*G0_3_0_3 + 3.33000333000391e-06*G0_3_0_4 - 4.28143285286214e-06*G0_3_0_5 - 2.08125208125244e-06*G0_3_1_0 - 3.28837828837885e-05*G0_3_1_1 - 1.58769801626971e-05*G0_3_1_2 - 2.78293135436039e-05*G0_3_1_3 + 7.13572142143693e-06*G0_3_1_4 + 1.18928690357282e-06*G0_3_1_5 - 2.14071642643106e-06*G0_3_2_0 - 1.58769801626971e-05*G0_3_2_1 + 0.000171614100185558*G0_3_2_2 + 4.56686170971963e-05*G0_3_2_3 + 1.23685837971573e-05*G0_3_2_4 - 1.1417154274299e-05*G0_3_2_5 - 4.56686170971962e-05*G0_3_3_0 - 2.78293135436039e-05*G0_3_3_1 + 4.56686170971963e-05*G0_3_3_2 + 0.000810617953475234*G0_3_3_3 + 7.70657913515186e-05*G0_3_3_4 + 0.000114171542742991*G0_3_3_5 + 3.33000333000391e-06*G0_3_4_0 + 7.13572142143693e-06*G0_3_4_1 + 1.23685837971573e-05*G0_3_4_2 + 7.70657913515186e-05*G0_3_4_3 - 2.18828790257399e-05*G0_3_4_4 + 8.56286570572428e-06*G0_3_4_5 - 4.28143285286213e-06*G0_3_5_0 + 1.18928690357282e-06*G0_3_5_1 - 1.1417154274299e-05*G0_3_5_2 + 0.000114171542742991*G0_3_5_3 + 8.56286570572429e-06*G0_3_5_4 - 9.33590219304672e-06*G0_4_0_0 - 3.80571809143302e-06*G0_4_0_1 - 5.5301841016136e-06*G0_4_0_2 + 3.33000333000391e-06*G0_4_0_3 + 1.8552875695736e-05*G0_4_0_4 + 7.61143618286602e-06*G0_4_0_5 - 3.80571809143302e-06*G0_4_1_0 - 1.48660862946603e-06*G0_4_1_1 - 4.04357547214757e-06*G0_4_1_2 + 7.13572142143693e-06*G0_4_1_3 + 7.61143618286605e-06*G0_4_1_4 - 5.5301841016136e-06*G0_4_2_0 - 4.04357547214757e-06*G0_4_2_1 + 9.10399124684991e-05*G0_4_2_2 + 1.23685837971573e-05*G0_4_2_3 + 1.11792968935845e-05*G0_4_2_4 - 7.61143618286605e-06*G0_4_2_5 + 3.33000333000391e-06*G0_4_3_0 + 7.13572142143693e-06*G0_4_3_1 + 1.23685837971573e-05*G0_4_3_2 + 7.70657913515186e-05*G0_4_3_3 - 2.18828790257399e-05*G0_4_3_4 + 8.56286570572428e-06*G0_4_3_5 + 1.8552875695736e-05*G0_4_4_0 + 7.61143618286605e-06*G0_4_4_1 + 1.11792968935845e-05*G0_4_4_2 - 2.18828790257399e-05*G0_4_4_3 - 3.71057513914719e-05*G0_4_4_4 + 7.61143618286602e-06*G0_4_5_0 - 7.61143618286605e-06*G0_4_5_2 + 8.56286570572427e-06*G0_4_5_3 - 8.56286570572425e-06*G0_4_5_5 - 7.84929356358077e-06*G0_5_0_0 - 1.48660862946602e-06*G0_5_0_1 - 4.28143285286213e-06*G0_5_0_3 + 7.61143618286602e-06*G0_5_0_4 + 1.1417154274299e-05*G0_5_0_5 - 1.48660862946602e-06*G0_5_1_0 + 1.48660862946602e-06*G0_5_1_2 + 1.18928690357282e-06*G0_5_1_3 - 1.18928690357278e-06*G0_5_1_5 + 1.48660862946602e-06*G0_5_2_1 + 7.84929356358065e-06*G0_5_2_2 - 1.1417154274299e-05*G0_5_2_3 - 7.61143618286605e-06*G0_5_2_4 + 4.28143285286213e-06*G0_5_2_5 - 4.28143285286213e-06*G0_5_3_0 + 1.18928690357282e-06*G0_5_3_1 - 1.1417154274299e-05*G0_5_3_2 + 0.000114171542742991*G0_5_3_3 + 8.56286570572429e-06*G0_5_3_4 + 7.61143618286602e-06*G0_5_4_0 - 7.61143618286605e-06*G0_5_4_2 + 8.56286570572428e-06*G0_5_4_3 - 8.56286570572427e-06*G0_5_4_5 + 1.1417154274299e-05*G0_5_5_0 - 1.18928690357279e-06*G0_5_5_1 + 4.28143285286213e-06*G0_5_5_2 - 8.56286570572427e-06*G0_5_5_4 - 0.000114171542742991*G0_5_5_5;
    A[82] = A[30] - 2.24775224775254e-05*G0_0_0_0 + 5.48558584272956e-06*G0_0_0_1 + 5.08420151277377e-06*G0_0_0_2 - 2.14071642643106e-06*G0_0_0_3 - 1.17739403453708e-05*G0_0_0_4 - 1.07035821321551e-05*G0_0_0_5 + 5.48558584272956e-06*G0_0_1_0 - 5.61938061938153e-06*G0_0_1_1 + 6.42214927929324e-06*G0_0_1_3 + 8.56286570572428e-06*G0_0_1_4 - 2.67589553303885e-06*G0_0_1_5 + 5.08420151277377e-06*G0_0_2_0 - 5.08420151277382e-06*G0_0_2_2 - 8.56286570572429e-06*G0_0_2_3 + 8.56286570572428e-06*G0_0_2_5 - 2.14071642643106e-06*G0_0_3_0 + 6.42214927929324e-06*G0_0_3_1 - 8.56286570572429e-06*G0_0_3_2 + 2.9970029970035e-05*G0_0_3_3 - 1.28442985585864e-05*G0_0_3_4 - 1.28442985585865e-05*G0_0_3_5 - 1.17739403453708e-05*G0_0_4_0 + 8.56286570572428e-06*G0_0_4_1 - 1.28442985585864e-05*G0_0_4_3 - 4.70957613814836e-05*G0_0_4_4 - 3.42514628228971e-05*G0_0_4_5 - 1.07035821321551e-05*G0_0_5_0 - 2.67589553303885e-06*G0_0_5_1 + 8.56286570572428e-06*G0_0_5_2 - 1.28442985585865e-05*G0_0_5_3 - 3.42514628228971e-05*G0_0_5_4 - 9.41915227629671e-05*G0_0_5_5 + 5.48558584272956e-06*G0_1_0_0 - 5.61938061938154e-06*G0_1_0_1 + 6.42214927929324e-06*G0_1_0_3 + 8.56286570572428e-06*G0_1_0_4 - 2.67589553303884e-06*G0_1_0_5 - 5.61938061938154e-06*G0_1_1_0 + 5.6193806193816e-06*G0_1_1_2 - 1.8731268731272e-05*G0_1_1_3 + 1.87312687312718e-05*G0_1_1_5 + 5.61938061938159e-06*G0_1_2_1 - 5.48558584272965e-06*G0_1_2_2 + 2.67589553303887e-06*G0_1_2_3 - 8.56286570572429e-06*G0_1_2_4 - 6.4221492792932e-06*G0_1_2_5 + 6.42214927929324e-06*G0_1_3_0 - 1.8731268731272e-05*G0_1_3_1 + 2.67589553303887e-06*G0_1_3_2 - 7.49250749250878e-05*G0_1_3_3 - 1.28442985585864e-05*G0_1_3_4 + 8.56286570572428e-06*G0_1_4_0 - 8.56286570572429e-06*G0_1_4_2 - 1.28442985585864e-05*G0_1_4_3 + 1.28442985585864e-05*G0_1_4_5 - 2.67589553303884e-06*G0_1_5_0 + 1.87312687312718e-05*G0_1_5_1 - 6.4221492792932e-06*G0_1_5_2 + 1.28442985585864e-05*G0_1_5_4 + 7.49250749250874e-05*G0_1_5_5 + 5.08420151277377e-06*G0_2_0_0 - 5.08420151277381e-06*G0_2_0_2 - 8.56286570572429e-06*G0_2_0_3 + 8.56286570572428e-06*G0_2_0_5 + 5.6193806193816e-06*G0_2_1_1 - 5.48558584272964e-06*G0_2_1_2 + 2.67589553303887e-06*G0_2_1_3 - 8.56286570572429e-06*G0_2_1_4 - 6.4221492792932e-06*G0_2_1_5 - 5.08420151277382e-06*G0_2_2_0 - 5.48558584272964e-06*G0_2_2_1 + 2.24775224775265e-05*G0_2_2_2 + 1.07035821321554e-05*G0_2_2_3 + 1.1773940345371e-05*G0_2_2_4 + 2.14071642643108e-06*G0_2_2_5 - 8.5628657057243e-06*G0_2_3_0 + 2.67589553303887e-06*G0_2_3_1 + 1.07035821321554e-05*G0_2_3_2 + 9.41915227629673e-05*G0_2_3_3 + 3.42514628228972e-05*G0_2_3_4 + 1.28442985585864e-05*G0_2_3_5 - 8.56286570572429e-06*G0_2_4_1 + 1.1773940345371e-05*G0_2_4_2 + 3.42514628228972e-05*G0_2_4_3 + 4.70957613814836e-05*G0_2_4_4 + 1.28442985585864e-05*G0_2_4_5 + 8.56286570572428e-06*G0_2_5_0 - 6.4221492792932e-06*G0_2_5_1 + 2.14071642643108e-06*G0_2_5_2 + 1.28442985585864e-05*G0_2_5_3 + 1.28442985585864e-05*G0_2_5_4 - 2.9970029970035e-05*G0_2_5_5 - 2.14071642643106e-06*G0_3_0_0 + 6.42214927929324e-06*G0_3_0_1 - 8.56286570572429e-06*G0_3_0_2 + 2.9970029970035e-05*G0_3_0_3 - 1.28442985585864e-05*G0_3_0_4 - 1.28442985585865e-05*G0_3_0_5 + 6.42214927929324e-06*G0_3_1_0 - 1.8731268731272e-05*G0_3_1_1 + 2.67589553303887e-06*G0_3_1_2 - 7.49250749250877e-05*G0_3_1_3 - 1.28442985585864e-05*G0_3_1_4 - 8.56286570572429e-06*G0_3_2_0 + 2.67589553303887e-06*G0_3_2_1 + 1.07035821321554e-05*G0_3_2_2 + 9.41915227629673e-05*G0_3_2_3 + 3.42514628228972e-05*G0_3_2_4 + 1.28442985585864e-05*G0_3_2_5 + 2.9970029970035e-05*G0_3_3_0 - 7.49250749250878e-05*G0_3_3_1 + 9.41915227629673e-05*G0_3_3_2 - 0.000513771942343458*G0_3_3_3 - 3.42514628228972e-05*G0_3_3_4 - 8.56286570572428e-05*G0_3_3_5 - 1.28442985585864e-05*G0_3_4_0 - 1.28442985585864e-05*G0_3_4_1 + 3.42514628228972e-05*G0_3_4_2 - 3.42514628228972e-05*G0_3_4_3 + 2.56885971171729e-05*G0_3_4_4 - 1.28442985585865e-05*G0_3_5_0 + 1.28442985585864e-05*G0_3_5_2 - 8.56286570572428e-05*G0_3_5_3 + 8.56286570572431e-05*G0_3_5_5 - 1.17739403453708e-05*G0_4_0_0 + 8.56286570572429e-06*G0_4_0_1 - 1.28442985585864e-05*G0_4_0_3 - 4.70957613814836e-05*G0_4_0_4 - 3.42514628228971e-05*G0_4_0_5 + 8.56286570572428e-06*G0_4_1_0 - 8.56286570572429e-06*G0_4_1_2 - 1.28442985585864e-05*G0_4_1_3 + 1.28442985585864e-05*G0_4_1_5 - 8.56286570572429e-06*G0_4_2_1 + 1.1773940345371e-05*G0_4_2_2 + 3.42514628228972e-05*G0_4_2_3 + 4.70957613814836e-05*G0_4_2_4 + 1.28442985585864e-05*G0_4_2_5 - 1.28442985585864e-05*G0_4_3_0 - 1.28442985585864e-05*G0_4_3_1 + 3.42514628228972e-05*G0_4_3_2 - 3.42514628228972e-05*G0_4_3_3 + 2.56885971171729e-05*G0_4_3_4 - 4.70957613814836e-05*G0_4_4_0 + 4.70957613814836e-05*G0_4_4_2 + 2.56885971171729e-05*G0_4_4_3 - 2.56885971171729e-05*G0_4_4_5 - 3.42514628228971e-05*G0_4_5_0 + 1.28442985585864e-05*G0_4_5_1 + 1.28442985585864e-05*G0_4_5_2 - 2.56885971171728e-05*G0_4_5_4 + 3.42514628228972e-05*G0_4_5_5 - 1.07035821321551e-05*G0_5_0_0 - 2.67589553303884e-06*G0_5_0_1 + 8.56286570572428e-06*G0_5_0_2 - 1.28442985585865e-05*G0_5_0_3 - 3.42514628228971e-05*G0_5_0_4 - 9.41915227629671e-05*G0_5_0_5 - 2.67589553303884e-06*G0_5_1_0 + 1.87312687312718e-05*G0_5_1_1 - 6.4221492792932e-06*G0_5_1_2 + 1.28442985585864e-05*G0_5_1_4 + 7.49250749250873e-05*G0_5_1_5 + 8.56286570572428e-06*G0_5_2_0 - 6.42214927929321e-06*G0_5_2_1 + 2.14071642643108e-06*G0_5_2_2 + 1.28442985585864e-05*G0_5_2_3 + 1.28442985585864e-05*G0_5_2_4 - 2.9970029970035e-05*G0_5_2_5 - 1.28442985585865e-05*G0_5_3_0 + 1.28442985585864e-05*G0_5_3_2 - 8.56286570572428e-05*G0_5_3_3 + 8.56286570572431e-05*G0_5_3_5 - 3.42514628228971e-05*G0_5_4_0 + 1.28442985585864e-05*G0_5_4_1 + 1.28442985585864e-05*G0_5_4_2 - 2.56885971171729e-05*G0_5_4_4 + 3.42514628228972e-05*G0_5_4_5 - 9.41915227629671e-05*G0_5_5_0 + 7.49250749250874e-05*G0_5_5_1 - 2.9970029970035e-05*G0_5_5_2 + 8.56286570572431e-05*G0_5_5_3 + 3.42514628228972e-05*G0_5_5_4 + 0.000513771942343458*G0_5_5_5;
    A[8] = A[82] - 0.000417707292707363*G0_0_0_0 + 3.94694591123229e-05*G0_0_0_1 + 2.23883259597583e-05*G0_0_0_2 - 7.84929356358055e-06*G0_0_0_3 - 9.10399124684992e-05*G0_0_0_4 - 0.000171614100185558*G0_0_0_5 + 3.94694591123229e-05*G0_0_1_0 - 1.16698777413083e-05*G0_0_1_1 - 1.59067123352864e-06*G0_0_1_2 - 1.48660862946604e-06*G0_0_1_3 + 4.04357547214758e-06*G0_0_1_4 + 1.58769801626971e-05*G0_0_1_5 + 2.23883259597583e-05*G0_0_2_0 - 1.59067123352864e-06*G0_0_2_1 - 2.76509205080679e-06*G0_0_2_2 + 5.53018410161361e-06*G0_0_2_4 + 2.14071642643107e-06*G0_0_2_5 - 7.84929356358055e-06*G0_0_3_0 - 1.48660862946604e-06*G0_0_3_1 - 4.28143285286217e-06*G0_0_3_3 + 7.61143618286602e-06*G0_0_3_4 + 1.14171542742991e-05*G0_0_3_5 - 9.10399124684992e-05*G0_0_4_0 + 4.04357547214758e-06*G0_0_4_1 + 5.53018410161361e-06*G0_0_4_2 + 7.61143618286602e-06*G0_0_4_3 - 1.11792968935845e-05*G0_0_4_4 - 1.23685837971573e-05*G0_0_4_5 - 0.000171614100185558*G0_0_5_0 + 1.58769801626971e-05*G0_0_5_1 + 2.14071642643107e-06*G0_0_5_2 + 1.14171542742991e-05*G0_0_5_3 - 1.23685837971573e-05*G0_0_5_4 - 4.56686170971962e-05*G0_0_5_5 + 3.94694591123229e-05*G0_1_0_0 - 1.16698777413083e-05*G0_1_0_1 - 1.59067123352864e-06*G0_1_0_2 - 1.48660862946604e-06*G0_1_0_3 + 4.04357547214758e-06*G0_1_0_4 + 1.58769801626971e-05*G0_1_0_5 - 1.16698777413083e-05*G0_1_1_0 + 4.43306693306771e-05*G0_1_1_1 - 7.43304314733018e-07*G0_1_1_2 + 1.48660862946602e-06*G0_1_1_4 + 3.28837828837886e-05*G0_1_1_5 - 1.59067123352864e-06*G0_1_2_0 - 7.43304314733016e-07*G0_1_2_1 - 2.33397554826164e-06*G0_1_2_2 + 1.48660862946603e-06*G0_1_2_3 + 3.80571809143302e-06*G0_1_2_4 + 2.08125208125242e-06*G0_1_2_5 - 1.48660862946604e-06*G0_1_3_0 + 1.48660862946602e-06*G0_1_3_2 + 1.18928690357282e-06*G0_1_3_3 - 1.18928690357278e-06*G0_1_3_5 + 4.04357547214758e-06*G0_1_4_0 + 1.48660862946602e-06*G0_1_4_1 + 3.80571809143302e-06*G0_1_4_2 - 7.61143618286605e-06*G0_1_4_4 - 7.1357214214369e-06*G0_1_4_5 + 1.58769801626971e-05*G0_1_5_0 + 3.28837828837886e-05*G0_1_5_1 + 2.08125208125242e-06*G0_1_5_2 - 1.1892869035728e-06*G0_1_5_3 - 7.1357214214369e-06*G0_1_5_4 + 2.78293135436042e-05*G0_1_5_5 + 2.23883259597583e-05*G0_2_0_0 - 1.59067123352864e-06*G0_2_0_1 - 2.76509205080679e-06*G0_2_0_2 + 5.53018410161361e-06*G0_2_0_4 + 2.14071642643107e-06*G0_2_0_5 - 1.59067123352864e-06*G0_2_1_0 - 7.43304314733016e-07*G0_2_1_1 - 2.33397554826164e-06*G0_2_1_2 + 1.48660862946603e-06*G0_2_1_3 + 3.80571809143302e-06*G0_2_1_4 + 2.08125208125243e-06*G0_2_1_5 - 2.76509205080678e-06*G0_2_2_0 - 2.33397554826164e-06*G0_2_2_1 + 1.84636791779677e-05*G0_2_2_2 + 7.84929356358055e-06*G0_2_2_3 + 9.33590219304656e-06*G0_2_2_4 - 2.14071642643108e-06*G0_2_2_5 + 1.48660862946603e-06*G0_2_3_1 + 7.84929356358054e-06*G0_2_3_2 - 1.14171542742991e-05*G0_2_3_3 - 7.61143618286605e-06*G0_2_3_4 + 4.28143285286215e-06*G0_2_3_5 + 5.53018410161361e-06*G0_2_4_0 + 3.80571809143302e-06*G0_2_4_1 + 9.33590219304656e-06*G0_2_4_2 - 7.61143618286605e-06*G0_2_4_3 - 1.8552875695736e-05*G0_2_4_4 - 3.33000333000388e-06*G0_2_4_5 + 2.14071642643107e-06*G0_2_5_0 + 2.08125208125242e-06*G0_2_5_1 - 2.14071642643108e-06*G0_2_5_2 + 4.28143285286215e-06*G0_2_5_3 - 3.33000333000388e-06*G0_2_5_4 + 4.56686170971962e-05*G0_2_5_5 - 7.84929356358055e-06*G0_3_0_0 - 1.48660862946604e-06*G0_3_0_1 - 4.28143285286217e-06*G0_3_0_3 + 7.61143618286603e-06*G0_3_0_4 + 1.14171542742991e-05*G0_3_0_5 - 1.48660862946604e-06*G0_3_1_0 + 1.48660862946602e-06*G0_3_1_2 + 1.18928690357282e-06*G0_3_1_3 - 1.1892869035728e-06*G0_3_1_5 + 1.48660862946603e-06*G0_3_2_1 + 7.84929356358054e-06*G0_3_2_2 - 1.14171542742991e-05*G0_3_2_3 - 7.61143618286605e-06*G0_3_2_4 + 4.28143285286215e-06*G0_3_2_5 - 4.28143285286217e-06*G0_3_3_0 + 1.18928690357282e-06*G0_3_3_1 - 1.14171542742991e-05*G0_3_3_2 + 0.000114171542742991*G0_3_3_3 + 8.56286570572438e-06*G0_3_3_4 + 7.61143618286602e-06*G0_3_4_0 - 7.61143618286605e-06*G0_3_4_2 + 8.56286570572438e-06*G0_3_4_3 - 8.56286570572429e-06*G0_3_4_5 + 1.14171542742991e-05*G0_3_5_0 - 1.18928690357278e-06*G0_3_5_1 + 4.28143285286215e-06*G0_3_5_2 - 8.56286570572429e-06*G0_3_5_4 - 0.000114171542742991*G0_3_5_5 - 9.10399124684992e-05*G0_4_0_0 + 4.04357547214758e-06*G0_4_0_1 + 5.53018410161361e-06*G0_4_0_2 + 7.61143618286602e-06*G0_4_0_3 - 1.11792968935845e-05*G0_4_0_4 - 1.23685837971573e-05*G0_4_0_5 + 4.04357547214758e-06*G0_4_1_0 + 1.48660862946602e-06*G0_4_1_1 + 3.80571809143302e-06*G0_4_1_2 - 7.61143618286605e-06*G0_4_1_4 - 7.1357214214369e-06*G0_4_1_5 + 5.53018410161361e-06*G0_4_2_0 + 3.80571809143302e-06*G0_4_2_1 + 9.33590219304656e-06*G0_4_2_2 - 7.61143618286606e-06*G0_4_2_3 - 1.8552875695736e-05*G0_4_2_4 - 3.33000333000389e-06*G0_4_2_5 + 7.61143618286602e-06*G0_4_3_0 - 7.61143618286605e-06*G0_4_3_2 + 8.56286570572438e-06*G0_4_3_3 - 8.56286570572429e-06*G0_4_3_5 - 1.11792968935844e-05*G0_4_4_0 - 7.61143618286605e-06*G0_4_4_1 - 1.8552875695736e-05*G0_4_4_2 + 3.7105751391472e-05*G0_4_4_4 + 2.18828790257399e-05*G0_4_4_5 - 1.23685837971573e-05*G0_4_5_0 - 7.1357214214369e-06*G0_4_5_1 - 3.33000333000388e-06*G0_4_5_2 - 8.56286570572428e-06*G0_4_5_3 + 2.18828790257399e-05*G0_4_5_4 - 7.70657913515187e-05*G0_4_5_5 - 0.000171614100185558*G0_5_0_0 + 1.58769801626971e-05*G0_5_0_1 + 2.14071642643107e-06*G0_5_0_2 + 1.14171542742991e-05*G0_5_0_3 - 1.23685837971573e-05*G0_5_0_4 - 4.56686170971961e-05*G0_5_0_5 + 1.58769801626971e-05*G0_5_1_0 + 3.28837828837886e-05*G0_5_1_1 + 2.08125208125242e-06*G0_5_1_2 - 1.1892869035728e-06*G0_5_1_3 - 7.1357214214369e-06*G0_5_1_4 + 2.78293135436042e-05*G0_5_1_5 + 2.14071642643107e-06*G0_5_2_0 + 2.08125208125243e-06*G0_5_2_1 - 2.14071642643108e-06*G0_5_2_2 + 4.28143285286215e-06*G0_5_2_3 - 3.33000333000389e-06*G0_5_2_4 + 4.56686170971962e-05*G0_5_2_5 + 1.14171542742991e-05*G0_5_3_0 - 1.1892869035728e-06*G0_5_3_1 + 4.28143285286215e-06*G0_5_3_2 - 8.56286570572429e-06*G0_5_3_4 - 0.000114171542742991*G0_5_3_5 - 1.23685837971573e-05*G0_5_4_0 - 7.13572142143691e-06*G0_5_4_1 - 3.33000333000388e-06*G0_5_4_2 - 8.56286570572429e-06*G0_5_4_3 + 2.18828790257399e-05*G0_5_4_4 - 7.70657913515187e-05*G0_5_4_5 - 4.56686170971961e-05*G0_5_5_0 + 2.78293135436042e-05*G0_5_5_1 + 4.56686170971962e-05*G0_5_5_2 - 0.000114171542742991*G0_5_5_3 - 7.70657913515187e-05*G0_5_5_4 - 0.000810617953475234*G0_5_5_5;
    A[71] = -A[8] - 0.000325924075924131*G0_0_0_0 + 2.05449312592204e-05*G0_0_0_1 + 1.21158603301481e-05*G0_0_0_2 + 6.36268493411462e-06*G0_0_0_3 - 5.86913086913186e-05*G0_0_0_4 - 7.78388278388409e-05*G0_0_0_5 + 2.05449312592204e-05*G0_0_1_0 + 2.05449312592205e-05*G0_0_1_1 + 2.97321725893203e-07*G0_0_1_2 - 4.45982588839806e-06*G0_0_1_3 - 4.45982588839807e-06*G0_0_1_4 + 1.21158603301481e-05*G0_0_2_0 + 2.97321725893203e-07*G0_0_2_1 + 3.12187812187865e-07*G0_0_2_2 + 9.63322391893983e-06*G0_0_2_3 + 5.76804148232817e-06*G0_0_2_4 + 4.3408971980408e-06*G0_0_2_5 + 6.36268493411462e-06*G0_0_3_0 - 4.45982588839806e-06*G0_0_3_1 + 9.63322391893983e-06*G0_0_3_2 - 4.04357547214758e-05*G0_0_3_3 - 3.80571809143302e-06*G0_0_3_4 - 2.14071642643107e-05*G0_0_3_5 - 5.86913086913186e-05*G0_0_4_0 - 4.45982588839807e-06*G0_0_4_1 + 5.76804148232818e-06*G0_0_4_2 - 3.80571809143302e-06*G0_0_4_3 + 1.4271442842874e-06*G0_0_4_4 + 2.37857380714526e-07*G0_0_4_5 - 7.7838827838841e-05*G0_0_5_0 + 4.3408971980408e-06*G0_0_5_2 - 2.14071642643107e-05*G0_0_5_3 + 2.37857380714526e-07*G0_0_5_4 - 1.35578707007303e-05*G0_0_5_5 + 2.05449312592204e-05*G0_1_0_0 + 2.05449312592205e-05*G0_1_0_1 + 2.97321725893203e-07*G0_1_0_2 - 4.45982588839806e-06*G0_1_0_3 - 4.45982588839807e-06*G0_1_0_4 + 2.05449312592205e-05*G0_1_1_0 - 0.000325924075924132*G0_1_1_1 + 1.21158603301481e-05*G0_1_1_2 - 5.86913086913188e-05*G0_1_1_3 + 6.36268493411462e-06*G0_1_1_4 - 7.78388278388412e-05*G0_1_1_5 + 2.97321725893201e-07*G0_1_2_0 + 1.21158603301482e-05*G0_1_2_1 + 3.12187812187858e-07*G0_1_2_2 + 5.7680414823282e-06*G0_1_2_3 + 9.63322391893983e-06*G0_1_2_4 + 4.3408971980408e-06*G0_1_2_5 - 4.45982588839806e-06*G0_1_3_0 - 5.86913086913188e-05*G0_1_3_1 + 5.7680414823282e-06*G0_1_3_2 + 1.42714428428728e-06*G0_1_3_3 - 3.80571809143301e-06*G0_1_3_4 + 2.37857380714505e-07*G0_1_3_5 - 4.45982588839807e-06*G0_1_4_0 + 6.36268493411462e-06*G0_1_4_1 + 9.63322391893983e-06*G0_1_4_2 - 3.80571809143302e-06*G0_1_4_3 - 4.04357547214758e-05*G0_1_4_4 - 2.14071642643107e-05*G0_1_4_5 - 7.78388278388413e-05*G0_1_5_1 + 4.3408971980408e-06*G0_1_5_2 + 2.37857380714492e-07*G0_1_5_3 - 2.14071642643107e-05*G0_1_5_4 - 1.35578707007301e-05*G0_1_5_5 + 1.21158603301481e-05*G0_2_0_0 + 2.97321725893203e-07*G0_2_0_1 + 3.12187812187865e-07*G0_2_0_2 + 9.63322391893983e-06*G0_2_0_3 + 5.76804148232817e-06*G0_2_0_4 + 4.3408971980408e-06*G0_2_0_5 + 2.97321725893202e-07*G0_2_1_0 + 1.21158603301482e-05*G0_2_1_1 + 3.12187812187858e-07*G0_2_1_2 + 5.7680414823282e-06*G0_2_1_3 + 9.63322391893983e-06*G0_2_1_4 + 4.3408971980408e-06*G0_2_1_5 + 3.12187812187865e-07*G0_2_2_0 + 3.12187812187858e-07*G0_2_2_1 - 1.30226915941224e-05*G0_2_2_2 + 2.61643118786019e-06*G0_2_2_3 + 2.61643118786021e-06*G0_2_2_4 + 9.87108129965439e-06*G0_2_2_5 + 9.63322391893983e-06*G0_2_3_0 + 5.7680414823282e-06*G0_2_3_1 + 2.61643118786019e-06*G0_2_3_2 - 6.49350649350759e-05*G0_2_3_3 - 3.85328956757593e-05*G0_2_3_4 - 3.90086104371885e-05*G0_2_3_5 + 5.76804148232817e-06*G0_2_4_0 + 9.63322391893983e-06*G0_2_4_1 + 2.61643118786021e-06*G0_2_4_2 - 3.85328956757593e-05*G0_2_4_3 - 6.49350649350759e-05*G0_2_4_4 - 3.90086104371885e-05*G0_2_4_5 + 4.3408971980408e-06*G0_2_5_0 + 4.3408971980408e-06*G0_2_5_1 + 9.87108129965439e-06*G0_2_5_2 - 3.90086104371885e-05*G0_2_5_3 - 3.90086104371885e-05*G0_2_5_4 - 2.71157414014602e-05*G0_2_5_5 + 6.36268493411462e-06*G0_3_0_0 - 4.45982588839806e-06*G0_3_0_1 + 9.63322391893983e-06*G0_3_0_2 - 4.04357547214758e-05*G0_3_0_3 - 3.80571809143302e-06*G0_3_0_4 - 2.14071642643107e-05*G0_3_0_5 - 4.45982588839806e-06*G0_3_1_0 - 5.86913086913188e-05*G0_3_1_1 + 5.7680414823282e-06*G0_3_1_2 + 1.42714428428728e-06*G0_3_1_3 - 3.80571809143301e-06*G0_3_1_4 + 2.37857380714492e-07*G0_3_1_5 + 9.63322391893983e-06*G0_3_2_0 + 5.7680414823282e-06*G0_3_2_1 + 2.61643118786019e-06*G0_3_2_2 - 6.49350649350759e-05*G0_3_2_3 - 3.85328956757593e-05*G0_3_2_4 - 3.90086104371885e-05*G0_3_2_5 - 4.04357547214758e-05*G0_3_3_0 + 1.42714428428728e-06*G0_3_3_1 - 6.49350649350759e-05*G0_3_3_2 + 0.000311117453974649*G0_3_3_3 + 8.84829456258177e-05*G0_3_3_4 + 0.000158888730317329*G0_3_3_5 - 3.80571809143302e-06*G0_3_4_0 - 3.80571809143302e-06*G0_3_4_1 - 3.85328956757593e-05*G0_3_4_2 + 8.84829456258177e-05*G0_3_4_3 + 8.84829456258176e-05*G0_3_4_4 + 8.56286570572429e-05*G0_3_4_5 - 2.14071642643107e-05*G0_3_5_0 + 2.37857380714505e-07*G0_3_5_1 - 3.90086104371885e-05*G0_3_5_2 + 0.000158888730317329*G0_3_5_3 + 8.5628657057243e-05*G0_3_5_4 + 9.70458113315419e-05*G0_3_5_5 - 5.86913086913186e-05*G0_4_0_0 - 4.45982588839807e-06*G0_4_0_1 + 5.76804148232817e-06*G0_4_0_2 - 3.80571809143302e-06*G0_4_0_3 + 1.42714428428741e-06*G0_4_0_4 + 2.37857380714546e-07*G0_4_0_5 - 4.45982588839807e-06*G0_4_1_0 + 6.36268493411462e-06*G0_4_1_1 + 9.63322391893983e-06*G0_4_1_2 - 3.80571809143302e-06*G0_4_1_3 - 4.04357547214758e-05*G0_4_1_4 - 2.14071642643107e-05*G0_4_1_5 + 5.76804148232817e-06*G0_4_2_0 + 9.63322391893983e-06*G0_4_2_1 + 2.61643118786021e-06*G0_4_2_2 - 3.85328956757593e-05*G0_4_2_3 - 6.49350649350759e-05*G0_4_2_4 - 3.90086104371885e-05*G0_4_2_5 - 3.80571809143302e-06*G0_4_3_0 - 3.80571809143302e-06*G0_4_3_1 - 3.85328956757593e-05*G0_4_3_2 + 8.84829456258177e-05*G0_4_3_3 + 8.84829456258177e-05*G0_4_3_4 + 8.5628657057243e-05*G0_4_3_5 + 1.42714428428742e-06*G0_4_4_0 - 4.04357547214758e-05*G0_4_4_1 - 6.49350649350759e-05*G0_4_4_2 + 8.84829456258176e-05*G0_4_4_3 + 0.000311117453974649*G0_4_4_4 + 0.000158888730317329*G0_4_4_5 + 2.37857380714539e-07*G0_4_5_0 - 2.14071642643107e-05*G0_4_5_1 - 3.90086104371885e-05*G0_4_5_2 + 8.5628657057243e-05*G0_4_5_3 + 0.000158888730317329*G0_4_5_4 + 9.7045811331542e-05*G0_4_5_5 - 7.78388278388409e-05*G0_5_0_0 + 4.3408971980408e-06*G0_5_0_2 - 2.14071642643107e-05*G0_5_0_3 + 2.37857380714532e-07*G0_5_0_4 - 1.35578707007302e-05*G0_5_0_5 - 7.78388278388412e-05*G0_5_1_1 + 4.3408971980408e-06*G0_5_1_2 + 2.37857380714492e-07*G0_5_1_3 - 2.14071642643107e-05*G0_5_1_4 - 1.355787070073e-05*G0_5_1_5 + 4.3408971980408e-06*G0_5_2_0 + 4.34089719804081e-06*G0_5_2_1 + 9.87108129965439e-06*G0_5_2_2 - 3.90086104371885e-05*G0_5_2_3 - 3.90086104371885e-05*G0_5_2_4 - 2.71157414014603e-05*G0_5_2_5 - 2.14071642643107e-05*G0_5_3_0 + 2.37857380714492e-07*G0_5_3_1 - 3.90086104371885e-05*G0_5_3_2 + 0.000158888730317329*G0_5_3_3 + 8.5628657057243e-05*G0_5_3_4 + 9.70458113315419e-05*G0_5_3_5 + 2.37857380714553e-07*G0_5_4_0 - 2.14071642643107e-05*G0_5_4_1 - 3.90086104371885e-05*G0_5_4_2 + 8.5628657057243e-05*G0_5_4_3 + 0.000158888730317329*G0_5_4_4 + 9.70458113315419e-05*G0_5_4_5 - 1.35578707007302e-05*G0_5_5_0 - 1.355787070073e-05*G0_5_5_1 - 2.71157414014603e-05*G0_5_5_2 + 9.70458113315419e-05*G0_5_5_3 + 9.70458113315419e-05*G0_5_5_4 - 0.000399600399600468*G0_5_5_5;
    A[72] = A[71] - 4.43306693306768e-05*G0_0_0_0 + 1.16698777413083e-05*G0_0_0_1 + 7.43304314733001e-07*G0_0_0_2 - 1.48660862946602e-06*G0_0_0_3 - 3.28837828837884e-05*G0_0_0_5 + 1.16698777413083e-05*G0_0_1_0 - 3.9469459112323e-05*G0_0_1_1 + 1.59067123352865e-06*G0_0_1_2 - 4.04357547214759e-06*G0_0_1_3 + 1.48660862946604e-06*G0_0_1_4 - 1.58769801626972e-05*G0_0_1_5 + 7.43304314732996e-07*G0_0_2_0 + 1.59067123352865e-06*G0_0_2_1 + 2.33397554826168e-06*G0_0_2_2 - 3.80571809143301e-06*G0_0_2_3 - 1.48660862946602e-06*G0_0_2_4 - 2.08125208125244e-06*G0_0_2_5 - 1.48660862946602e-06*G0_0_3_0 - 4.04357547214759e-06*G0_0_3_1 - 3.80571809143301e-06*G0_0_3_2 + 7.61143618286602e-06*G0_0_3_3 + 7.1357214214369e-06*G0_0_3_5 + 1.48660862946604e-06*G0_0_4_1 - 1.48660862946602e-06*G0_0_4_2 - 1.18928690357283e-06*G0_0_4_4 + 1.18928690357282e-06*G0_0_4_5 - 3.28837828837884e-05*G0_0_5_0 - 1.58769801626972e-05*G0_0_5_1 - 2.08125208125244e-06*G0_0_5_2 + 7.13572142143691e-06*G0_0_5_3 + 1.18928690357282e-06*G0_0_5_4 - 2.7829313543604e-05*G0_0_5_5 + 1.16698777413083e-05*G0_1_0_0 - 3.9469459112323e-05*G0_1_0_1 + 1.59067123352865e-06*G0_1_0_2 - 4.04357547214759e-06*G0_1_0_3 + 1.48660862946604e-06*G0_1_0_4 - 1.58769801626972e-05*G0_1_0_5 - 3.9469459112323e-05*G0_1_1_0 + 0.000417707292707364*G0_1_1_1 - 2.23883259597584e-05*G0_1_1_2 + 9.10399124684995e-05*G0_1_1_3 + 7.84929356358054e-06*G0_1_1_4 + 0.000171614100185558*G0_1_1_5 + 1.59067123352865e-06*G0_1_2_0 - 2.23883259597584e-05*G0_1_2_1 + 2.76509205080682e-06*G0_1_2_2 - 5.53018410161363e-06*G0_1_2_3 - 2.1407164264311e-06*G0_1_2_5 - 4.04357547214759e-06*G0_1_3_0 + 9.10399124684995e-05*G0_1_3_1 - 5.53018410161363e-06*G0_1_3_2 + 1.11792968935846e-05*G0_1_3_3 - 7.61143618286606e-06*G0_1_3_4 + 1.23685837971574e-05*G0_1_3_5 + 1.48660862946604e-06*G0_1_4_0 + 7.84929356358054e-06*G0_1_4_1 - 7.61143618286606e-06*G0_1_4_3 + 4.2814328528621e-06*G0_1_4_4 - 1.14171542742991e-05*G0_1_4_5 - 1.58769801626972e-05*G0_1_5_0 + 0.000171614100185558*G0_1_5_1 - 2.1407164264311e-06*G0_1_5_2 + 1.23685837971574e-05*G0_1_5_3 - 1.14171542742991e-05*G0_1_5_4 + 4.56686170971964e-05*G0_1_5_5 + 7.43304314732996e-07*G0_2_0_0 + 1.59067123352865e-06*G0_2_0_1 + 2.33397554826168e-06*G0_2_0_2 - 3.80571809143301e-06*G0_2_0_3 - 1.48660862946602e-06*G0_2_0_4 - 2.08125208125244e-06*G0_2_0_5 + 1.59067123352865e-06*G0_2_1_0 - 2.23883259597584e-05*G0_2_1_1 + 2.76509205080682e-06*G0_2_1_2 - 5.53018410161363e-06*G0_2_1_3 - 2.1407164264311e-06*G0_2_1_5 + 2.33397554826168e-06*G0_2_2_0 + 2.76509205080682e-06*G0_2_2_1 - 1.84636791779683e-05*G0_2_2_2 - 9.33590219304668e-06*G0_2_2_3 - 7.84929356358069e-06*G0_2_2_4 + 2.14071642643106e-06*G0_2_2_5 - 3.80571809143301e-06*G0_2_3_0 - 5.53018410161363e-06*G0_2_3_1 - 9.33590219304668e-06*G0_2_3_2 + 1.85528756957359e-05*G0_2_3_3 + 7.61143618286603e-06*G0_2_3_4 + 3.33000333000389e-06*G0_2_3_5 - 1.48660862946602e-06*G0_2_4_0 - 7.84929356358069e-06*G0_2_4_2 + 7.61143618286603e-06*G0_2_4_3 + 1.1417154274299e-05*G0_2_4_4 - 4.28143285286213e-06*G0_2_4_5 - 2.08125208125244e-06*G0_2_5_0 - 2.1407164264311e-06*G0_2_5_1 + 2.14071642643106e-06*G0_2_5_2 + 3.33000333000389e-06*G0_2_5_3 - 4.28143285286213e-06*G0_2_5_4 - 4.56686170971962e-05*G0_2_5_5 - 1.48660862946602e-06*G0_3_0_0 - 4.04357547214759e-06*G0_3_0_1 - 3.80571809143301e-06*G0_3_0_2 + 7.61143618286602e-06*G0_3_0_3 + 7.1357214214369e-06*G0_3_0_5 - 4.04357547214759e-06*G0_3_1_0 + 9.10399124684995e-05*G0_3_1_1 - 5.53018410161363e-06*G0_3_1_2 + 1.11792968935846e-05*G0_3_1_3 - 7.61143618286606e-06*G0_3_1_4 + 1.23685837971574e-05*G0_3_1_5 - 3.80571809143301e-06*G0_3_2_0 - 5.53018410161363e-06*G0_3_2_1 - 9.33590219304668e-06*G0_3_2_2 + 1.85528756957359e-05*G0_3_2_3 + 7.61143618286603e-06*G0_3_2_4 + 3.33000333000389e-06*G0_3_2_5 + 7.61143618286602e-06*G0_3_3_0 + 1.11792968935846e-05*G0_3_3_1 + 1.85528756957359e-05*G0_3_3_2 - 3.71057513914717e-05*G0_3_3_3 - 2.18828790257398e-05*G0_3_3_5 - 7.61143618286606e-06*G0_3_4_1 + 7.61143618286603e-06*G0_3_4_2 - 8.56286570572419e-06*G0_3_4_4 + 8.56286570572432e-06*G0_3_4_5 + 7.13572142143691e-06*G0_3_5_0 + 1.23685837971574e-05*G0_3_5_1 + 3.33000333000389e-06*G0_3_5_2 - 2.18828790257398e-05*G0_3_5_3 + 8.56286570572429e-06*G0_3_5_4 + 7.70657913515186e-05*G0_3_5_5 + 1.48660862946604e-06*G0_4_0_1 - 1.48660862946602e-06*G0_4_0_2 - 1.18928690357283e-06*G0_4_0_4 + 1.1892869035728e-06*G0_4_0_5 + 1.48660862946604e-06*G0_4_1_0 + 7.84929356358054e-06*G0_4_1_1 - 7.61143618286606e-06*G0_4_1_3 + 4.2814328528621e-06*G0_4_1_4 - 1.14171542742991e-05*G0_4_1_5 - 1.48660862946602e-06*G0_4_2_0 - 7.84929356358069e-06*G0_4_2_2 + 7.61143618286603e-06*G0_4_2_3 + 1.1417154274299e-05*G0_4_2_4 - 4.28143285286213e-06*G0_4_2_5 - 7.61143618286606e-06*G0_4_3_1 + 7.61143618286603e-06*G0_4_3_2 - 8.56286570572419e-06*G0_4_3_4 + 8.56286570572431e-06*G0_4_3_5 - 1.18928690357283e-06*G0_4_4_0 + 4.2814328528621e-06*G0_4_4_1 + 1.1417154274299e-05*G0_4_4_2 - 8.56286570572419e-06*G0_4_4_3 - 0.00011417154274299*G0_4_4_4 + 1.1892869035728e-06*G0_4_5_0 - 1.14171542742991e-05*G0_4_5_1 - 4.28143285286213e-06*G0_4_5_2 + 8.56286570572429e-06*G0_4_5_3 + 0.00011417154274299*G0_4_5_5 - 3.28837828837884e-05*G0_5_0_0 - 1.58769801626972e-05*G0_5_0_1 - 2.08125208125244e-06*G0_5_0_2 + 7.13572142143691e-06*G0_5_0_3 + 1.18928690357282e-06*G0_5_0_4 - 2.7829313543604e-05*G0_5_0_5 - 1.58769801626972e-05*G0_5_1_0 + 0.000171614100185558*G0_5_1_1 - 2.1407164264311e-06*G0_5_1_2 + 1.23685837971574e-05*G0_5_1_3 - 1.14171542742991e-05*G0_5_1_4 + 4.56686170971963e-05*G0_5_1_5 - 2.08125208125244e-06*G0_5_2_0 - 2.1407164264311e-06*G0_5_2_1 + 2.14071642643106e-06*G0_5_2_2 + 3.33000333000388e-06*G0_5_2_3 - 4.28143285286214e-06*G0_5_2_4 - 4.56686170971962e-05*G0_5_2_5 + 7.13572142143691e-06*G0_5_3_0 + 1.23685837971574e-05*G0_5_3_1 + 3.33000333000389e-06*G0_5_3_2 - 2.18828790257398e-05*G0_5_3_3 + 8.56286570572431e-06*G0_5_3_4 + 7.70657913515186e-05*G0_5_3_5 + 1.1892869035728e-06*G0_5_4_0 - 1.14171542742991e-05*G0_5_4_1 - 4.28143285286213e-06*G0_5_4_2 + 8.56286570572431e-06*G0_5_4_3 + 0.00011417154274299*G0_5_4_5 - 2.7829313543604e-05*G0_5_5_0 + 4.56686170971963e-05*G0_5_5_1 - 4.56686170971962e-05*G0_5_5_2 + 7.70657913515186e-05*G0_5_5_3 + 0.000114171542742991*G0_5_5_4 + 0.000810617953475233*G0_5_5_5;
    A[27] = A[72];
    A[28] = A[82];
    A[80] = A[8];
    A[14] = A[41];
    A[23] = A[32];
    A[53] = A[35];
    A[68] = A[86];
    A[6] = A[60];
    A[17] = A[71];
    A[47] = A[74];
    A[3] = A[30];
    A[79] = A[97];
    A[38] = A[83];
    A[20] = A[2];
    A[18] = A[81];
    A[88] = A[33] + 0.000242436135293319*G0_0_0_0 + 2.43506493506536e-05*G0_0_0_1 - 3.9068074782367e-05*G0_0_0_2 - 3.21107463964655e-06*G0_0_0_3 + 0.000103824746681907*G0_0_0_4 + 0.000377836449265084*G0_0_0_5 + 2.43506493506536e-05*G0_0_1_0 - 0.000168581418581447*G0_0_1_1 + 2.99700299700352e-05*G0_0_1_3 - 5.24475524475612e-05*G0_0_1_4 - 0.000442057942058017*G0_0_1_5 - 3.9068074782367e-05*G0_0_2_0 + 3.90680747823671e-05*G0_0_2_2 - 3.31811046096816e-05*G0_0_2_3 + 3.31811046096817e-05*G0_0_2_5 - 3.21107463964655e-06*G0_0_3_0 + 2.99700299700352e-05*G0_0_3_1 - 3.31811046096816e-05*G0_0_3_2 + 0.000539460539460631*G0_0_3_3 + 0.000111317254174416*G0_0_3_4 - 5.99400599400703e-05*G0_0_3_5 + 0.000103824746681907*G0_0_4_0 - 5.24475524475612e-05*G0_0_4_1 + 0.000111317254174416*G0_0_4_3 + 0.000188383045525934*G0_0_4_4 + 3.85328956757592e-05*G0_0_4_5 + 0.000377836449265084*G0_0_5_0 - 0.000442057942058017*G0_0_5_1 + 3.31811046096817e-05*G0_0_5_2 - 5.99400599400703e-05*G0_0_5_3 + 3.85328956757592e-05*G0_0_5_4 - 0.00101898101898119*G0_0_5_5 + 2.43506493506536e-05*G0_1_0_0 - 0.000168581418581447*G0_1_0_1 + 2.99700299700352e-05*G0_1_0_3 - 5.24475524475612e-05*G0_1_0_4 - 0.000442057942058017*G0_1_0_5 - 0.000168581418581447*G0_1_1_0 + 0.000168581418581448*G0_1_1_2 - 0.00108641358641377*G0_1_1_3 + 0.00108641358641377*G0_1_1_5 + 0.000168581418581448*G0_1_2_1 - 2.43506493506536e-05*G0_1_2_2 + 0.000442057942058017*G0_1_2_3 + 5.24475524475613e-05*G0_1_2_4 - 2.99700299700349e-05*G0_1_2_5 + 2.99700299700352e-05*G0_1_3_0 - 0.00108641358641377*G0_1_3_1 + 0.000442057942058017*G0_1_3_2 - 0.00224775224775263*G0_1_3_3 - 5.99400599400702e-05*G0_1_3_4 - 5.24475524475612e-05*G0_1_4_0 + 5.24475524475613e-05*G0_1_4_2 - 5.99400599400702e-05*G0_1_4_3 + 5.99400599400699e-05*G0_1_4_5 - 0.000442057942058017*G0_1_5_0 + 0.00108641358641377*G0_1_5_1 - 2.99700299700349e-05*G0_1_5_2 + 5.99400599400699e-05*G0_1_5_4 + 0.00224775224775263*G0_1_5_5 - 3.9068074782367e-05*G0_2_0_0 + 3.90680747823671e-05*G0_2_0_2 - 3.31811046096816e-05*G0_2_0_3 + 3.31811046096817e-05*G0_2_0_5 + 0.000168581418581448*G0_2_1_1 - 2.43506493506536e-05*G0_2_1_2 + 0.000442057942058017*G0_2_1_3 + 5.24475524475613e-05*G0_2_1_4 - 2.99700299700349e-05*G0_2_1_5 + 3.90680747823671e-05*G0_2_2_0 - 2.43506493506536e-05*G0_2_2_1 - 0.000242436135293319*G0_2_2_2 - 0.000377836449265085*G0_2_2_3 - 0.000103824746681907*G0_2_2_4 + 3.21107463964666e-06*G0_2_2_5 - 3.31811046096817e-05*G0_2_3_0 + 0.000442057942058017*G0_2_3_1 - 0.000377836449265085*G0_2_3_2 + 0.00101898101898119*G0_2_3_3 - 3.85328956757593e-05*G0_2_3_4 + 5.99400599400699e-05*G0_2_3_5 + 5.24475524475613e-05*G0_2_4_1 - 0.000103824746681907*G0_2_4_2 - 3.85328956757594e-05*G0_2_4_3 - 0.000188383045525934*G0_2_4_4 - 0.000111317254174416*G0_2_4_5 + 3.31811046096817e-05*G0_2_5_0 - 2.99700299700349e-05*G0_2_5_1 + 3.21107463964666e-06*G0_2_5_2 + 5.99400599400699e-05*G0_2_5_3 - 0.000111317254174416*G0_2_5_4 - 0.000539460539460631*G0_2_5_5 - 3.21107463964653e-06*G0_3_0_0 + 2.99700299700352e-05*G0_3_0_1 - 3.31811046096816e-05*G0_3_0_2 + 0.000539460539460631*G0_3_0_3 + 0.000111317254174416*G0_3_0_4 - 5.99400599400704e-05*G0_3_0_5 + 2.99700299700352e-05*G0_3_1_0 - 0.00108641358641377*G0_3_1_1 + 0.000442057942058017*G0_3_1_2 - 0.00224775224775263*G0_3_1_3 - 5.99400599400702e-05*G0_3_1_4 - 3.31811046096816e-05*G0_3_2_0 + 0.000442057942058017*G0_3_2_1 - 0.000377836449265085*G0_3_2_2 + 0.00101898101898119*G0_3_2_3 - 3.85328956757594e-05*G0_3_2_4 + 5.99400599400698e-05*G0_3_2_5 + 0.000539460539460631*G0_3_3_0 - 0.00224775224775263*G0_3_3_1 + 0.00101898101898119*G0_3_3_2 - 0.0107892107892126*G0_3_3_3 - 0.000959040959041121*G0_3_3_4 - 0.0011988011988014*G0_3_3_5 + 0.000111317254174416*G0_3_4_0 - 5.99400599400702e-05*G0_3_4_1 - 3.85328956757594e-05*G0_3_4_2 - 0.000959040959041121*G0_3_4_3 - 0.000222634508348832*G0_3_4_4 - 5.99400599400704e-05*G0_3_5_0 + 5.99400599400698e-05*G0_3_5_2 - 0.0011988011988014*G0_3_5_3 + 0.0011988011988014*G0_3_5_5 + 0.000103824746681907*G0_4_0_0 - 5.24475524475612e-05*G0_4_0_1 + 0.000111317254174416*G0_4_0_3 + 0.000188383045525934*G0_4_0_4 + 3.85328956757592e-05*G0_4_0_5 - 5.24475524475612e-05*G0_4_1_0 + 5.24475524475613e-05*G0_4_1_2 - 5.99400599400702e-05*G0_4_1_3 + 5.99400599400698e-05*G0_4_1_5 + 5.24475524475613e-05*G0_4_2_1 - 0.000103824746681907*G0_4_2_2 - 3.85328956757593e-05*G0_4_2_3 - 0.000188383045525934*G0_4_2_4 - 0.000111317254174416*G0_4_2_5 + 0.000111317254174416*G0_4_3_0 - 5.99400599400702e-05*G0_4_3_1 - 3.85328956757593e-05*G0_4_3_2 - 0.000959040959041121*G0_4_3_3 - 0.000222634508348832*G0_4_3_4 + 0.000188383045525934*G0_4_4_0 - 0.000188383045525934*G0_4_4_2 - 0.000222634508348832*G0_4_4_3 + 0.000222634508348831*G0_4_4_5 + 3.85328956757592e-05*G0_4_5_0 + 5.99400599400699e-05*G0_4_5_1 - 0.000111317254174416*G0_4_5_2 + 0.000222634508348831*G0_4_5_4 + 0.00095904095904112*G0_4_5_5 + 0.000377836449265084*G0_5_0_0 - 0.000442057942058017*G0_5_0_1 + 3.31811046096817e-05*G0_5_0_2 - 5.99400599400703e-05*G0_5_0_3 + 3.85328956757592e-05*G0_5_0_4 - 0.00101898101898119*G0_5_0_5 - 0.000442057942058017*G0_5_1_0 + 0.00108641358641377*G0_5_1_1 - 2.99700299700349e-05*G0_5_1_2 + 5.99400599400699e-05*G0_5_1_4 + 0.00224775224775263*G0_5_1_5 + 3.31811046096817e-05*G0_5_2_0 - 2.99700299700349e-05*G0_5_2_1 + 3.21107463964667e-06*G0_5_2_2 + 5.99400599400699e-05*G0_5_2_3 - 0.000111317254174416*G0_5_2_4 - 0.000539460539460631*G0_5_2_5 - 5.99400599400703e-05*G0_5_3_0 + 5.99400599400698e-05*G0_5_3_2 - 0.0011988011988014*G0_5_3_3 + 0.0011988011988014*G0_5_3_5 + 3.85328956757592e-05*G0_5_4_0 + 5.99400599400699e-05*G0_5_4_1 - 0.000111317254174416*G0_5_4_2 + 0.000222634508348831*G0_5_4_4 + 0.00095904095904112*G0_5_4_5 - 0.00101898101898119*G0_5_5_0 + 0.00224775224775263*G0_5_5_1 - 0.000539460539460631*G0_5_5_2 + 0.0011988011988014*G0_5_5_3 + 0.00095904095904112*G0_5_5_4 + 0.0107892107892126*G0_5_5_5;
    A[43] = A[34];
    A[95] = A[59];
    A[52] = A[25];
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class mass_matrix_f3_p2_q3_tensor_form_0: public ufc::form
{
public:

  /// Constructor
  mass_matrix_f3_p2_q3_tensor_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f3_p2_q3_tensor_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(Product(Argument(FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None), 0), Argument(FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None), 1)), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None), 2), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None), 0), Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 2, None), 1)))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 3;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f3_p2_q3_tensor_finite_element_1();
        break;
      }
    case 1:
      {
        return new mass_matrix_f3_p2_q3_tensor_finite_element_1();
        break;
      }
    case 2:
      {
        return new mass_matrix_f3_p2_q3_tensor_finite_element_0();
        break;
      }
    case 3:
      {
        return new mass_matrix_f3_p2_q3_tensor_finite_element_0();
        break;
      }
    case 4:
      {
        return new mass_matrix_f3_p2_q3_tensor_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f3_p2_q3_tensor_dofmap_1();
        break;
      }
    case 1:
      {
        return new mass_matrix_f3_p2_q3_tensor_dofmap_1();
        break;
      }
    case 2:
      {
        return new mass_matrix_f3_p2_q3_tensor_dofmap_0();
        break;
      }
    case 3:
      {
        return new mass_matrix_f3_p2_q3_tensor_dofmap_0();
        break;
      }
    case 4:
      {
        return new mass_matrix_f3_p2_q3_tensor_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f3_p2_q3_tensor_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif

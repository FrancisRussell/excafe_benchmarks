// This code conforms with the UFC specification version 2.0.3
// and was automatically generated by FFC version 1.0-beta2.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'ufc'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'tensor'
//   split:                          False
//   swig_binary:                    'swig'
//   swig_path:                      ''

#ifndef __MASS_MATRIX_F4_P1_Q3_TENSOR_H
#define __MASS_MATRIX_F4_P1_Q3_TENSOR_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class mass_matrix_f4_p1_q3_tensor_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  mass_matrix_f4_p1_q3_tensor_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q3_tensor_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mass_matrix_f4_p1_q3_tensor_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class mass_matrix_f4_p1_q3_tensor_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  mass_matrix_f4_p1_q3_tensor_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q3_tensor_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435952, 0.0606091526731326, 0.0349927106111882, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333333, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807677, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930786, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.0909137290096989};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435952, 0.0606091526731326, 0.0349927106111882, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333333, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807677, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930786, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.0909137290096989};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mass_matrix_f4_p1_q3_tensor_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mass_matrix_f4_p1_q3_tensor_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  mass_matrix_f4_p1_q3_tensor_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q3_tensor_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 3;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mass_matrix_f4_p1_q3_tensor_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mass_matrix_f4_p1_q3_tensor_dofmap_1: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  mass_matrix_f4_p1_q3_tensor_dofmap_1() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q3_tensor_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + 2.0*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 10;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*m.num_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
    offset += m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[3][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[4][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[4][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[5][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[5][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[6][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[6][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[7][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[7][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[8][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[8][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[9][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[9][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mass_matrix_f4_p1_q3_tensor_dofmap_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mass_matrix_f4_p1_q3_tensor_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  mass_matrix_f4_p1_q3_tensor_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q3_tensor_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      9
    // Number of operations (multiply-add pairs) for geometry tensor:    202
    // Number of operations (multiply-add pairs) for tensor contraction: 2985
    // Total number of operations (multiply-add pairs):                  3196
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0_0_0 = det*w[3][0]*w[2][0]*w[0][0]*w[1][0]*(1.0);
    const double G0_0_0_0_1 = det*w[3][0]*w[2][0]*w[0][0]*w[1][1]*(1.0);
    const double G0_0_0_0_2 = det*w[3][0]*w[2][0]*w[0][0]*w[1][2]*(1.0);
    const double G0_0_0_1_0 = det*w[3][0]*w[2][0]*w[0][1]*w[1][0]*(1.0);
    const double G0_0_0_1_1 = det*w[3][0]*w[2][0]*w[0][1]*w[1][1]*(1.0);
    const double G0_0_0_1_2 = det*w[3][0]*w[2][0]*w[0][1]*w[1][2]*(1.0);
    const double G0_0_0_2_0 = det*w[3][0]*w[2][0]*w[0][2]*w[1][0]*(1.0);
    const double G0_0_0_2_1 = det*w[3][0]*w[2][0]*w[0][2]*w[1][1]*(1.0);
    const double G0_0_0_2_2 = det*w[3][0]*w[2][0]*w[0][2]*w[1][2]*(1.0);
    const double G0_0_1_0_0 = det*w[3][0]*w[2][1]*w[0][0]*w[1][0]*(1.0);
    const double G0_0_1_0_1 = det*w[3][0]*w[2][1]*w[0][0]*w[1][1]*(1.0);
    const double G0_0_1_0_2 = det*w[3][0]*w[2][1]*w[0][0]*w[1][2]*(1.0);
    const double G0_0_1_1_0 = det*w[3][0]*w[2][1]*w[0][1]*w[1][0]*(1.0);
    const double G0_0_1_1_1 = det*w[3][0]*w[2][1]*w[0][1]*w[1][1]*(1.0);
    const double G0_0_1_1_2 = det*w[3][0]*w[2][1]*w[0][1]*w[1][2]*(1.0);
    const double G0_0_1_2_0 = det*w[3][0]*w[2][1]*w[0][2]*w[1][0]*(1.0);
    const double G0_0_1_2_1 = det*w[3][0]*w[2][1]*w[0][2]*w[1][1]*(1.0);
    const double G0_0_1_2_2 = det*w[3][0]*w[2][1]*w[0][2]*w[1][2]*(1.0);
    const double G0_0_2_0_0 = det*w[3][0]*w[2][2]*w[0][0]*w[1][0]*(1.0);
    const double G0_0_2_0_1 = det*w[3][0]*w[2][2]*w[0][0]*w[1][1]*(1.0);
    const double G0_0_2_0_2 = det*w[3][0]*w[2][2]*w[0][0]*w[1][2]*(1.0);
    const double G0_0_2_1_0 = det*w[3][0]*w[2][2]*w[0][1]*w[1][0]*(1.0);
    const double G0_0_2_1_1 = det*w[3][0]*w[2][2]*w[0][1]*w[1][1]*(1.0);
    const double G0_0_2_1_2 = det*w[3][0]*w[2][2]*w[0][1]*w[1][2]*(1.0);
    const double G0_0_2_2_0 = det*w[3][0]*w[2][2]*w[0][2]*w[1][0]*(1.0);
    const double G0_0_2_2_1 = det*w[3][0]*w[2][2]*w[0][2]*w[1][1]*(1.0);
    const double G0_0_2_2_2 = det*w[3][0]*w[2][2]*w[0][2]*w[1][2]*(1.0);
    const double G0_1_0_0_0 = det*w[3][1]*w[2][0]*w[0][0]*w[1][0]*(1.0);
    const double G0_1_0_0_1 = det*w[3][1]*w[2][0]*w[0][0]*w[1][1]*(1.0);
    const double G0_1_0_0_2 = det*w[3][1]*w[2][0]*w[0][0]*w[1][2]*(1.0);
    const double G0_1_0_1_0 = det*w[3][1]*w[2][0]*w[0][1]*w[1][0]*(1.0);
    const double G0_1_0_1_1 = det*w[3][1]*w[2][0]*w[0][1]*w[1][1]*(1.0);
    const double G0_1_0_1_2 = det*w[3][1]*w[2][0]*w[0][1]*w[1][2]*(1.0);
    const double G0_1_0_2_0 = det*w[3][1]*w[2][0]*w[0][2]*w[1][0]*(1.0);
    const double G0_1_0_2_1 = det*w[3][1]*w[2][0]*w[0][2]*w[1][1]*(1.0);
    const double G0_1_0_2_2 = det*w[3][1]*w[2][0]*w[0][2]*w[1][2]*(1.0);
    const double G0_1_1_0_0 = det*w[3][1]*w[2][1]*w[0][0]*w[1][0]*(1.0);
    const double G0_1_1_0_1 = det*w[3][1]*w[2][1]*w[0][0]*w[1][1]*(1.0);
    const double G0_1_1_0_2 = det*w[3][1]*w[2][1]*w[0][0]*w[1][2]*(1.0);
    const double G0_1_1_1_0 = det*w[3][1]*w[2][1]*w[0][1]*w[1][0]*(1.0);
    const double G0_1_1_1_1 = det*w[3][1]*w[2][1]*w[0][1]*w[1][1]*(1.0);
    const double G0_1_1_1_2 = det*w[3][1]*w[2][1]*w[0][1]*w[1][2]*(1.0);
    const double G0_1_1_2_0 = det*w[3][1]*w[2][1]*w[0][2]*w[1][0]*(1.0);
    const double G0_1_1_2_1 = det*w[3][1]*w[2][1]*w[0][2]*w[1][1]*(1.0);
    const double G0_1_1_2_2 = det*w[3][1]*w[2][1]*w[0][2]*w[1][2]*(1.0);
    const double G0_1_2_0_0 = det*w[3][1]*w[2][2]*w[0][0]*w[1][0]*(1.0);
    const double G0_1_2_0_1 = det*w[3][1]*w[2][2]*w[0][0]*w[1][1]*(1.0);
    const double G0_1_2_0_2 = det*w[3][1]*w[2][2]*w[0][0]*w[1][2]*(1.0);
    const double G0_1_2_1_0 = det*w[3][1]*w[2][2]*w[0][1]*w[1][0]*(1.0);
    const double G0_1_2_1_1 = det*w[3][1]*w[2][2]*w[0][1]*w[1][1]*(1.0);
    const double G0_1_2_1_2 = det*w[3][1]*w[2][2]*w[0][1]*w[1][2]*(1.0);
    const double G0_1_2_2_0 = det*w[3][1]*w[2][2]*w[0][2]*w[1][0]*(1.0);
    const double G0_1_2_2_1 = det*w[3][1]*w[2][2]*w[0][2]*w[1][1]*(1.0);
    const double G0_1_2_2_2 = det*w[3][1]*w[2][2]*w[0][2]*w[1][2]*(1.0);
    const double G0_2_0_0_0 = det*w[3][2]*w[2][0]*w[0][0]*w[1][0]*(1.0);
    const double G0_2_0_0_1 = det*w[3][2]*w[2][0]*w[0][0]*w[1][1]*(1.0);
    const double G0_2_0_0_2 = det*w[3][2]*w[2][0]*w[0][0]*w[1][2]*(1.0);
    const double G0_2_0_1_0 = det*w[3][2]*w[2][0]*w[0][1]*w[1][0]*(1.0);
    const double G0_2_0_1_1 = det*w[3][2]*w[2][0]*w[0][1]*w[1][1]*(1.0);
    const double G0_2_0_1_2 = det*w[3][2]*w[2][0]*w[0][1]*w[1][2]*(1.0);
    const double G0_2_0_2_0 = det*w[3][2]*w[2][0]*w[0][2]*w[1][0]*(1.0);
    const double G0_2_0_2_1 = det*w[3][2]*w[2][0]*w[0][2]*w[1][1]*(1.0);
    const double G0_2_0_2_2 = det*w[3][2]*w[2][0]*w[0][2]*w[1][2]*(1.0);
    const double G0_2_1_0_0 = det*w[3][2]*w[2][1]*w[0][0]*w[1][0]*(1.0);
    const double G0_2_1_0_1 = det*w[3][2]*w[2][1]*w[0][0]*w[1][1]*(1.0);
    const double G0_2_1_0_2 = det*w[3][2]*w[2][1]*w[0][0]*w[1][2]*(1.0);
    const double G0_2_1_1_0 = det*w[3][2]*w[2][1]*w[0][1]*w[1][0]*(1.0);
    const double G0_2_1_1_1 = det*w[3][2]*w[2][1]*w[0][1]*w[1][1]*(1.0);
    const double G0_2_1_1_2 = det*w[3][2]*w[2][1]*w[0][1]*w[1][2]*(1.0);
    const double G0_2_1_2_0 = det*w[3][2]*w[2][1]*w[0][2]*w[1][0]*(1.0);
    const double G0_2_1_2_1 = det*w[3][2]*w[2][1]*w[0][2]*w[1][1]*(1.0);
    const double G0_2_1_2_2 = det*w[3][2]*w[2][1]*w[0][2]*w[1][2]*(1.0);
    const double G0_2_2_0_0 = det*w[3][2]*w[2][2]*w[0][0]*w[1][0]*(1.0);
    const double G0_2_2_0_1 = det*w[3][2]*w[2][2]*w[0][0]*w[1][1]*(1.0);
    const double G0_2_2_0_2 = det*w[3][2]*w[2][2]*w[0][0]*w[1][2]*(1.0);
    const double G0_2_2_1_0 = det*w[3][2]*w[2][2]*w[0][1]*w[1][0]*(1.0);
    const double G0_2_2_1_1 = det*w[3][2]*w[2][2]*w[0][1]*w[1][1]*(1.0);
    const double G0_2_2_1_2 = det*w[3][2]*w[2][2]*w[0][1]*w[1][2]*(1.0);
    const double G0_2_2_2_0 = det*w[3][2]*w[2][2]*w[0][2]*w[1][0]*(1.0);
    const double G0_2_2_2_1 = det*w[3][2]*w[2][2]*w[0][2]*w[1][1]*(1.0);
    const double G0_2_2_2_2 = det*w[3][2]*w[2][2]*w[0][2]*w[1][2]*(1.0);
    
    // Compute element tensor
    A[73] = -0.000304383116883128*G0_0_0_0_0 - 7.30519480519508e-05*G0_0_0_0_1 - 8.52272727272757e-05*G0_0_0_0_2 - 7.30519480519508e-05*G0_0_0_1_0 - 7.30519480519507e-05*G0_0_0_1_1 - 3.65259740259753e-05*G0_0_0_1_2 - 8.52272727272757e-05*G0_0_0_2_0 - 3.65259740259753e-05*G0_0_0_2_1 - 3.65259740259752e-05*G0_0_0_2_2 - 7.30519480519508e-05*G0_0_1_0_0 - 7.30519480519507e-05*G0_0_1_0_1 - 3.65259740259753e-05*G0_0_1_0_2 - 7.30519480519507e-05*G0_0_1_1_0 - 0.000304383116883128*G0_0_1_1_1 - 8.52272727272757e-05*G0_0_1_1_2 - 3.65259740259753e-05*G0_0_1_2_0 - 8.52272727272757e-05*G0_0_1_2_1 - 3.65259740259752e-05*G0_0_1_2_2 - 8.52272727272757e-05*G0_0_2_0_0 - 3.65259740259753e-05*G0_0_2_0_1 - 3.65259740259752e-05*G0_0_2_0_2 - 3.65259740259753e-05*G0_0_2_1_0 - 8.52272727272757e-05*G0_0_2_1_1 - 3.65259740259752e-05*G0_0_2_1_2 - 3.65259740259752e-05*G0_0_2_2_0 - 3.65259740259752e-05*G0_0_2_2_1 - 1.21753246753249e-05*G0_0_2_2_2 - 7.30519480519508e-05*G0_1_0_0_0 - 7.30519480519507e-05*G0_1_0_0_1 - 3.65259740259753e-05*G0_1_0_0_2 - 7.30519480519507e-05*G0_1_0_1_0 - 0.000304383116883128*G0_1_0_1_1 - 8.52272727272757e-05*G0_1_0_1_2 - 3.65259740259753e-05*G0_1_0_2_0 - 8.52272727272757e-05*G0_1_0_2_1 - 3.65259740259752e-05*G0_1_0_2_2 - 7.30519480519507e-05*G0_1_1_0_0 - 0.000304383116883128*G0_1_1_0_1 - 8.52272727272757e-05*G0_1_1_0_2 - 0.000304383116883128*G0_1_1_1_0 - 0.00200892857142865*G0_1_1_1_1 - 0.000487012987013005*G0_1_1_1_2 - 8.52272727272757e-05*G0_1_1_2_0 - 0.000487012987013005*G0_1_1_2_1 - 0.000182629870129876*G0_1_1_2_2 - 3.65259740259753e-05*G0_1_2_0_0 - 8.52272727272757e-05*G0_1_2_0_1 - 3.65259740259752e-05*G0_1_2_0_2 - 8.52272727272757e-05*G0_1_2_1_0 - 0.000487012987013005*G0_1_2_1_1 - 0.000182629870129876*G0_1_2_1_2 - 3.65259740259752e-05*G0_1_2_2_0 - 0.000182629870129876*G0_1_2_2_1 - 7.30519480519504e-05*G0_1_2_2_2 - 8.52272727272757e-05*G0_2_0_0_0 - 3.65259740259753e-05*G0_2_0_0_1 - 3.65259740259752e-05*G0_2_0_0_2 - 3.65259740259753e-05*G0_2_0_1_0 - 8.52272727272757e-05*G0_2_0_1_1 - 3.65259740259752e-05*G0_2_0_1_2 - 3.65259740259752e-05*G0_2_0_2_0 - 3.65259740259752e-05*G0_2_0_2_1 - 1.21753246753249e-05*G0_2_0_2_2 - 3.65259740259753e-05*G0_2_1_0_0 - 8.52272727272757e-05*G0_2_1_0_1 - 3.65259740259752e-05*G0_2_1_0_2 - 8.52272727272757e-05*G0_2_1_1_0 - 0.000487012987013005*G0_2_1_1_1 - 0.000182629870129876*G0_2_1_1_2 - 3.65259740259752e-05*G0_2_1_2_0 - 0.000182629870129876*G0_2_1_2_1 - 7.30519480519505e-05*G0_2_1_2_2 - 3.65259740259752e-05*G0_2_2_0_0 - 3.65259740259752e-05*G0_2_2_0_1 - 1.21753246753249e-05*G0_2_2_0_2 - 3.65259740259752e-05*G0_2_2_1_0 - 0.000182629870129876*G0_2_2_1_1 - 7.30519480519505e-05*G0_2_2_1_2 - 1.21753246753249e-05*G0_2_2_2_0 - 7.30519480519504e-05*G0_2_2_2_1 + 6.08766233766262e-05*G0_2_2_2_2;
    A[69] = -0.00109577922077926*G0_0_0_0_0 - 0.000365259740259753*G0_0_0_0_1 - 0.000365259740259753*G0_0_0_1_0 - 0.000219155844155852*G0_0_0_1_1 + 0.000438311688311703*G0_0_0_2_2 - 0.000365259740259753*G0_0_1_0_0 - 0.000219155844155852*G0_0_1_0_1 - 0.000219155844155852*G0_0_1_1_0 - 0.000219155844155852*G0_0_1_1_1 + 0.000219155844155852*G0_0_1_2_2 + 0.000438311688311703*G0_0_2_0_2 + 0.000219155844155852*G0_0_2_1_2 + 0.000438311688311703*G0_0_2_2_0 + 0.000219155844155852*G0_0_2_2_1 + 0.00109577922077926*G0_0_2_2_2 - 0.000365259740259753*G0_1_0_0_0 - 0.000219155844155852*G0_1_0_0_1 - 0.000219155844155852*G0_1_0_1_0 - 0.000219155844155852*G0_1_0_1_1 + 0.000219155844155852*G0_1_0_2_2 - 0.000219155844155852*G0_1_1_0_0 - 0.000219155844155852*G0_1_1_0_1 - 0.000219155844155852*G0_1_1_1_0 - 0.000365259740259753*G0_1_1_1_1 + 0.000219155844155852*G0_1_1_2_2 + 0.000219155844155852*G0_1_2_0_2 + 0.000219155844155852*G0_1_2_1_2 + 0.000219155844155852*G0_1_2_2_0 + 0.000219155844155852*G0_1_2_2_1 + 0.000730519480519505*G0_1_2_2_2 + 0.000438311688311703*G0_2_0_0_2 + 0.000219155844155852*G0_2_0_1_2 + 0.000438311688311703*G0_2_0_2_0 + 0.000219155844155852*G0_2_0_2_1 + 0.00109577922077926*G0_2_0_2_2 + 0.000219155844155852*G0_2_1_0_2 + 0.000219155844155852*G0_2_1_1_2 + 0.000219155844155852*G0_2_1_2_0 + 0.000219155844155852*G0_2_1_2_1 + 0.000730519480519505*G0_2_1_2_2 + 0.000438311688311703*G0_2_2_0_0 + 0.000219155844155852*G0_2_2_0_1 + 0.00109577922077926*G0_2_2_0_2 + 0.000219155844155852*G0_2_2_1_0 + 0.000219155844155852*G0_2_2_1_1 + 0.000730519480519505*G0_2_2_1_2 + 0.00109577922077926*G0_2_2_2_0 + 0.000730519480519505*G0_2_2_2_1 + 0.00328733766233778*G0_2_2_2_2;
    A[7] = 0.0021509740259741*G0_0_0_0_0 + 0.000189393939393946*G0_0_0_0_1 + 9.46969696969728e-05*G0_0_0_0_2 + 0.000189393939393946*G0_0_0_1_0 - 2.02922077922084e-05*G0_0_0_1_1 - 6.76406926406951e-06*G0_0_0_1_2 + 9.46969696969728e-05*G0_0_0_2_0 - 6.7640692640695e-06*G0_0_0_2_1 - 6.76406926406951e-06*G0_0_0_2_2 + 0.000189393939393946*G0_0_1_0_0 - 2.02922077922084e-05*G0_0_1_0_1 - 6.7640692640695e-06*G0_0_1_0_2 - 2.02922077922085e-05*G0_0_1_1_0 - 8.1168831168834e-05*G0_0_1_1_1 - 2.02922077922085e-05*G0_0_1_1_2 - 6.76406926406951e-06*G0_0_1_2_0 - 2.02922077922085e-05*G0_0_1_2_1 - 1.3528138528139e-05*G0_0_1_2_2 + 9.46969696969728e-05*G0_0_2_0_0 - 6.7640692640695e-06*G0_0_2_0_1 - 6.76406926406951e-06*G0_0_2_0_2 - 6.7640692640695e-06*G0_0_2_1_0 - 2.02922077922085e-05*G0_0_2_1_1 - 1.3528138528139e-05*G0_0_2_1_2 - 6.7640692640695e-06*G0_0_2_2_0 - 1.3528138528139e-05*G0_0_2_2_1 - 2.02922077922085e-05*G0_0_2_2_2 + 0.000189393939393946*G0_1_0_0_0 - 2.02922077922085e-05*G0_1_0_0_1 - 6.76406926406951e-06*G0_1_0_0_2 - 2.02922077922085e-05*G0_1_0_1_0 - 8.1168831168834e-05*G0_1_0_1_1 - 2.02922077922085e-05*G0_1_0_1_2 - 6.76406926406951e-06*G0_1_0_2_0 - 2.02922077922085e-05*G0_1_0_2_1 - 1.3528138528139e-05*G0_1_0_2_2 - 2.02922077922085e-05*G0_1_1_0_0 - 8.1168831168834e-05*G0_1_1_0_1 - 2.02922077922085e-05*G0_1_1_0_2 - 8.1168831168834e-05*G0_1_1_1_0 - 0.000297619047619059*G0_1_1_1_1 - 5.95238095238117e-05*G0_1_1_1_2 - 2.02922077922085e-05*G0_1_1_2_0 - 5.95238095238117e-05*G0_1_1_2_1 - 2.97619047619058e-05*G0_1_1_2_2 - 6.76406926406951e-06*G0_1_2_0_0 - 2.02922077922085e-05*G0_1_2_0_1 - 1.3528138528139e-05*G0_1_2_0_2 - 2.02922077922085e-05*G0_1_2_1_0 - 5.95238095238117e-05*G0_1_2_1_1 - 2.97619047619058e-05*G0_1_2_1_2 - 1.3528138528139e-05*G0_1_2_2_0 - 2.97619047619058e-05*G0_1_2_2_1 - 2.97619047619058e-05*G0_1_2_2_2 + 9.46969696969728e-05*G0_2_0_0_0 - 6.76406926406951e-06*G0_2_0_0_1 - 6.76406926406951e-06*G0_2_0_0_2 - 6.7640692640695e-06*G0_2_0_1_0 - 2.02922077922085e-05*G0_2_0_1_1 - 1.3528138528139e-05*G0_2_0_1_2 - 6.76406926406951e-06*G0_2_0_2_0 - 1.3528138528139e-05*G0_2_0_2_1 - 2.02922077922085e-05*G0_2_0_2_2 - 6.76406926406951e-06*G0_2_1_0_0 - 2.02922077922085e-05*G0_2_1_0_1 - 1.3528138528139e-05*G0_2_1_0_2 - 2.02922077922085e-05*G0_2_1_1_0 - 5.95238095238117e-05*G0_2_1_1_1 - 2.97619047619058e-05*G0_2_1_1_2 - 1.3528138528139e-05*G0_2_1_2_0 - 2.97619047619058e-05*G0_2_1_2_1 - 2.97619047619058e-05*G0_2_1_2_2 - 6.7640692640695e-06*G0_2_2_0_0 - 1.3528138528139e-05*G0_2_2_0_1 - 2.02922077922085e-05*G0_2_2_0_2 - 1.3528138528139e-05*G0_2_2_1_0 - 2.97619047619058e-05*G0_2_2_1_1 - 2.97619047619058e-05*G0_2_2_1_2 - 2.02922077922085e-05*G0_2_2_2_0 - 2.97619047619058e-05*G0_2_2_2_1 - 5.95238095238117e-05*G0_2_2_2_2;
    A[37] = A[73];
    A[25] = 0.000554653679653698*G0_0_0_0_0 + 7.84632034632061e-05*G0_0_0_0_1 + 8.92857142857173e-05*G0_0_0_0_2 + 7.84632034632061e-05*G0_0_0_1_0 + 2.29978354978363e-05*G0_0_0_1_1 + 1.62337662337668e-05*G0_0_0_1_2 + 8.92857142857173e-05*G0_0_0_2_0 + 1.62337662337668e-05*G0_0_0_2_1 - 8.11688311688337e-06*G0_0_0_2_2 + 7.84632034632061e-05*G0_0_1_0_0 + 2.29978354978363e-05*G0_0_1_0_1 + 1.62337662337668e-05*G0_0_1_0_2 + 2.29978354978363e-05*G0_0_1_1_0 + 6.76406926406946e-06*G0_0_1_1_1 + 6.76406926406949e-06*G0_0_1_1_2 + 1.62337662337668e-05*G0_0_1_2_0 + 6.76406926406948e-06*G0_0_1_2_1 + 1.35281385281388e-06*G0_0_1_2_2 + 8.92857142857173e-05*G0_0_2_0_0 + 1.62337662337668e-05*G0_0_2_0_1 - 8.11688311688337e-06*G0_0_2_0_2 + 1.62337662337668e-05*G0_0_2_1_0 + 6.76406926406948e-06*G0_0_2_1_1 + 1.35281385281388e-06*G0_0_2_1_2 - 8.11688311688336e-06*G0_0_2_2_0 + 1.35281385281388e-06*G0_0_2_2_1 - 0.000114989177489181*G0_0_2_2_2 + 7.84632034632061e-05*G0_1_0_0_0 + 2.29978354978363e-05*G0_1_0_0_1 + 1.62337662337668e-05*G0_1_0_0_2 + 2.29978354978363e-05*G0_1_0_1_0 + 6.76406926406947e-06*G0_1_0_1_1 + 6.76406926406948e-06*G0_1_0_1_2 + 1.62337662337668e-05*G0_1_0_2_0 + 6.76406926406949e-06*G0_1_0_2_1 + 1.35281385281388e-06*G0_1_0_2_2 + 2.29978354978363e-05*G0_1_1_0_0 + 6.76406926406947e-06*G0_1_1_0_1 + 6.76406926406949e-06*G0_1_1_0_2 + 6.76406926406947e-06*G0_1_1_1_0 - 1.89393939393947e-05*G0_1_1_1_1 + 4.05844155844168e-06*G0_1_1_1_2 + 6.76406926406949e-06*G0_1_1_2_0 + 4.05844155844168e-06*G0_1_1_2_1 + 5.41125541125558e-06*G0_1_1_2_2 + 1.62337662337668e-05*G0_1_2_0_0 + 6.76406926406948e-06*G0_1_2_0_1 + 1.35281385281388e-06*G0_1_2_0_2 + 6.76406926406948e-06*G0_1_2_1_0 + 4.05844155844168e-06*G0_1_2_1_1 + 5.41125541125557e-06*G0_1_2_1_2 + 1.35281385281388e-06*G0_1_2_2_0 + 5.41125541125557e-06*G0_1_2_2_1 - 4.73484848484866e-05*G0_1_2_2_2 + 8.92857142857173e-05*G0_2_0_0_0 + 1.62337662337668e-05*G0_2_0_0_1 - 8.11688311688337e-06*G0_2_0_0_2 + 1.62337662337668e-05*G0_2_0_1_0 + 6.76406926406948e-06*G0_2_0_1_1 + 1.35281385281388e-06*G0_2_0_1_2 - 8.11688311688337e-06*G0_2_0_2_0 + 1.35281385281388e-06*G0_2_0_2_1 - 0.000114989177489181*G0_2_0_2_2 + 1.62337662337668e-05*G0_2_1_0_0 + 6.76406926406948e-06*G0_2_1_0_1 + 1.35281385281388e-06*G0_2_1_0_2 + 6.76406926406949e-06*G0_2_1_1_0 + 4.05844155844168e-06*G0_2_1_1_1 + 5.41125541125557e-06*G0_2_1_1_2 + 1.35281385281388e-06*G0_2_1_2_0 + 5.41125541125557e-06*G0_2_1_2_1 - 4.73484848484866e-05*G0_2_1_2_2 - 8.11688311688337e-06*G0_2_2_0_0 + 1.35281385281388e-06*G0_2_2_0_1 - 0.000114989177489181*G0_2_2_0_2 + 1.35281385281388e-06*G0_2_2_1_0 + 5.41125541125557e-06*G0_2_2_1_1 - 4.73484848484866e-05*G0_2_2_1_2 - 0.000114989177489181*G0_2_2_2_0 - 4.73484848484866e-05*G0_2_2_2_1 - 0.00101461038961043*G0_2_2_2_2;
    A[85] = A[73] - 0.00170454545454551*G0_0_0_0_0 - 0.000231331168831176*G0_0_0_0_1 - 0.000401785714285727*G0_0_0_0_2 - 0.000231331168831176*G0_0_0_1_0 - 4.87012987013003e-05*G0_0_0_1_2 - 0.000401785714285727*G0_0_0_2_0 - 4.87012987013003e-05*G0_0_0_2_1 - 0.000146103896103901*G0_0_0_2_2 - 0.000231331168831176*G0_0_1_0_0 - 4.87012987013003e-05*G0_0_1_0_2 + 0.000231331168831177*G0_0_1_1_1 + 4.87012987013004e-05*G0_0_1_1_2 - 4.87012987013003e-05*G0_0_1_2_0 + 4.87012987013004e-05*G0_0_1_2_1 - 0.000401785714285727*G0_0_2_0_0 - 4.87012987013003e-05*G0_0_2_0_1 - 0.000146103896103901*G0_0_2_0_2 - 4.87012987013003e-05*G0_0_2_1_0 + 4.87012987013004e-05*G0_0_2_1_1 - 0.000146103896103901*G0_0_2_2_0 - 6.08766233766254e-05*G0_0_2_2_2 - 0.000231331168831176*G0_1_0_0_0 - 4.87012987013003e-05*G0_1_0_0_2 + 0.000231331168831177*G0_1_0_1_1 + 4.87012987013004e-05*G0_1_0_1_2 - 4.87012987013003e-05*G0_1_0_2_0 + 4.87012987013004e-05*G0_1_0_2_1 + 0.000231331168831177*G0_1_1_0_1 + 4.87012987013004e-05*G0_1_1_0_2 + 0.000231331168831177*G0_1_1_1_0 + 0.00170454545454552*G0_1_1_1_1 + 0.000401785714285729*G0_1_1_1_2 + 4.87012987013004e-05*G0_1_1_2_0 + 0.000401785714285729*G0_1_1_2_1 + 0.000146103896103901*G0_1_1_2_2 - 4.87012987013003e-05*G0_1_2_0_0 + 4.87012987013004e-05*G0_1_2_0_1 + 4.87012987013004e-05*G0_1_2_1_0 + 0.000401785714285729*G0_1_2_1_1 + 0.000146103896103901*G0_1_2_1_2 + 0.000146103896103901*G0_1_2_2_1 + 6.08766233766253e-05*G0_1_2_2_2 - 0.000401785714285727*G0_2_0_0_0 - 4.87012987013003e-05*G0_2_0_0_1 - 0.000146103896103901*G0_2_0_0_2 - 4.87012987013003e-05*G0_2_0_1_0 + 4.87012987013004e-05*G0_2_0_1_1 - 0.000146103896103901*G0_2_0_2_0 - 6.08766233766254e-05*G0_2_0_2_2 - 4.87012987013003e-05*G0_2_1_0_0 + 4.87012987013004e-05*G0_2_1_0_1 + 4.87012987013004e-05*G0_2_1_1_0 + 0.000401785714285729*G0_2_1_1_1 + 0.000146103896103901*G0_2_1_1_2 + 0.000146103896103901*G0_2_1_2_1 + 6.08766233766253e-05*G0_2_1_2_2 - 0.000146103896103901*G0_2_2_0_0 - 6.08766233766254e-05*G0_2_2_0_2 + 0.000146103896103901*G0_2_2_1_1 + 6.08766233766253e-05*G0_2_2_1_2 - 6.08766233766254e-05*G0_2_2_2_0 + 6.08766233766253e-05*G0_2_2_2_1;
    A[58] = A[85];
    A[67] = A[85] - 0.000182629870129877*G0_0_0_0_1 + 0.000182629870129875*G0_0_0_0_2 - 0.000182629870129877*G0_0_0_1_0 - 0.000109577922077926*G0_0_0_1_1 + 0.000182629870129875*G0_0_0_2_0 + 0.000109577922077925*G0_0_0_2_2 - 0.000182629870129877*G0_0_1_0_0 - 0.000109577922077926*G0_0_1_0_1 - 0.000109577922077926*G0_0_1_1_0 + 0.000182629870129875*G0_0_2_0_0 + 0.000109577922077925*G0_0_2_0_2 + 0.000109577922077925*G0_0_2_2_0 - 0.000182629870129877*G0_1_0_0_0 - 0.000109577922077926*G0_1_0_0_1 - 0.000109577922077926*G0_1_0_1_0 - 0.000109577922077926*G0_1_1_0_0 + 0.000365259740259755*G0_1_1_1_1 + 7.30519480519508e-05*G0_1_1_1_2 + 7.30519480519508e-05*G0_1_1_2_1 + 7.30519480519508e-05*G0_1_2_1_1 - 7.30519480519508e-05*G0_1_2_2_2 + 0.000182629870129875*G0_2_0_0_0 + 0.000109577922077925*G0_2_0_0_2 + 0.000109577922077925*G0_2_0_2_0 + 7.30519480519508e-05*G0_2_1_1_1 - 7.30519480519508e-05*G0_2_1_2_2 + 0.000109577922077925*G0_2_2_0_0 - 7.30519480519508e-05*G0_2_2_1_2 - 7.30519480519508e-05*G0_2_2_2_1 - 0.000365259740259755*G0_2_2_2_2;
    A[76] = A[67];
    A[11] = -A[7] + 0.00222132034632042*G0_0_0_0_0 + 0.000209686147186155*G0_0_0_0_1 + 0.000112283549783553*G0_0_0_0_2 + 0.000209686147186155*G0_0_0_1_0 + 6.7640692640696e-06*G0_0_0_1_1 + 0.000112283549783553*G0_0_0_2_0 + 4.96031746031761e-06*G0_0_0_2_2 + 0.000209686147186155*G0_0_1_0_0 + 6.7640692640696e-06*G0_0_1_0_1 + 6.7640692640696e-06*G0_0_1_1_0 + 9.46969696969735e-05*G0_0_1_1_1 - 6.76406926406948e-06*G0_0_1_1_2 - 6.76406926406948e-06*G0_0_1_2_1 - 6.7640692640695e-06*G0_0_1_2_2 + 0.000112283549783553*G0_0_2_0_0 + 4.96031746031761e-06*G0_0_2_0_2 - 6.76406926406948e-06*G0_0_2_1_1 - 6.7640692640695e-06*G0_0_2_1_2 + 4.96031746031761e-06*G0_0_2_2_0 - 6.7640692640695e-06*G0_0_2_2_1 - 2.70562770562781e-06*G0_0_2_2_2 + 0.000209686147186155*G0_1_0_0_0 + 6.76406926406958e-06*G0_1_0_0_1 + 6.76406926406958e-06*G0_1_0_1_0 + 9.46969696969735e-05*G0_1_0_1_1 - 6.76406926406948e-06*G0_1_0_1_2 - 6.76406926406948e-06*G0_1_0_2_1 - 6.7640692640695e-06*G0_1_0_2_2 + 6.76406926406958e-06*G0_1_1_0_0 + 9.46969696969735e-05*G0_1_1_0_1 - 6.76406926406948e-06*G0_1_1_0_2 + 9.46969696969735e-05*G0_1_1_1_0 + 0.00278679653679663*G0_1_1_1_1 + 0.000116341991341995*G0_1_1_1_2 - 6.76406926406948e-06*G0_1_1_2_0 + 0.000116341991341995*G0_1_1_2_1 - 2.70562770562784e-06*G0_1_1_2_2 - 6.76406926406949e-06*G0_1_2_0_1 - 6.7640692640695e-06*G0_1_2_0_2 - 6.76406926406949e-06*G0_1_2_1_0 + 0.000116341991341995*G0_1_2_1_1 - 2.70562770562784e-06*G0_1_2_1_2 - 6.7640692640695e-06*G0_1_2_2_0 - 2.70562770562784e-06*G0_1_2_2_1 - 9.46969696969731e-06*G0_1_2_2_2 + 0.000112283549783553*G0_2_0_0_0 + 4.96031746031761e-06*G0_2_0_0_2 - 6.76406926406948e-06*G0_2_0_1_1 - 6.7640692640695e-06*G0_2_0_1_2 + 4.96031746031761e-06*G0_2_0_2_0 - 6.7640692640695e-06*G0_2_0_2_1 - 2.70562770562781e-06*G0_2_0_2_2 - 6.76406926406949e-06*G0_2_1_0_1 - 6.7640692640695e-06*G0_2_1_0_2 - 6.76406926406949e-06*G0_2_1_1_0 + 0.000116341991341995*G0_2_1_1_1 - 2.70562770562783e-06*G0_2_1_1_2 - 6.76406926406949e-06*G0_2_1_2_0 - 2.70562770562784e-06*G0_2_1_2_1 - 9.46969696969731e-06*G0_2_1_2_2 + 4.96031746031761e-06*G0_2_2_0_0 - 6.7640692640695e-06*G0_2_2_0_1 - 2.70562770562781e-06*G0_2_2_0_2 - 6.7640692640695e-06*G0_2_2_1_0 - 2.70562770562784e-06*G0_2_2_1_1 - 9.46969696969731e-06*G0_2_2_1_2 - 2.70562770562781e-06*G0_2_2_2_0 - 9.46969696969731e-06*G0_2_2_2_1 + 1.08225108225111e-05*G0_2_2_2_2;
    A[32] = -1.89393939393947e-05*G0_0_0_0_0 + 6.76406926406946e-06*G0_0_0_0_1 + 4.05844155844167e-06*G0_0_0_0_2 + 6.76406926406946e-06*G0_0_0_1_0 + 2.29978354978363e-05*G0_0_0_1_1 + 6.76406926406948e-06*G0_0_0_1_2 + 4.05844155844167e-06*G0_0_0_2_0 + 6.76406926406948e-06*G0_0_0_2_1 + 5.41125541125557e-06*G0_0_0_2_2 + 6.76406926406946e-06*G0_0_1_0_0 + 2.29978354978363e-05*G0_0_1_0_1 + 6.76406926406948e-06*G0_0_1_0_2 + 2.29978354978363e-05*G0_0_1_1_0 + 7.84632034632062e-05*G0_0_1_1_1 + 1.62337662337668e-05*G0_0_1_1_2 + 6.76406926406948e-06*G0_0_1_2_0 + 1.62337662337668e-05*G0_0_1_2_1 + 1.35281385281388e-06*G0_0_1_2_2 + 4.05844155844167e-06*G0_0_2_0_0 + 6.76406926406948e-06*G0_0_2_0_1 + 5.41125541125557e-06*G0_0_2_0_2 + 6.76406926406948e-06*G0_0_2_1_0 + 1.62337662337668e-05*G0_0_2_1_1 + 1.35281385281388e-06*G0_0_2_1_2 + 5.41125541125557e-06*G0_0_2_2_0 + 1.35281385281388e-06*G0_0_2_2_1 - 4.73484848484865e-05*G0_0_2_2_2 + 6.76406926406946e-06*G0_1_0_0_0 + 2.29978354978363e-05*G0_1_0_0_1 + 6.76406926406948e-06*G0_1_0_0_2 + 2.29978354978363e-05*G0_1_0_1_0 + 7.84632034632062e-05*G0_1_0_1_1 + 1.62337662337668e-05*G0_1_0_1_2 + 6.76406926406948e-06*G0_1_0_2_0 + 1.62337662337668e-05*G0_1_0_2_1 + 1.35281385281388e-06*G0_1_0_2_2 + 2.29978354978363e-05*G0_1_1_0_0 + 7.84632034632062e-05*G0_1_1_0_1 + 1.62337662337668e-05*G0_1_1_0_2 + 7.84632034632062e-05*G0_1_1_1_0 + 0.0005546536796537*G0_1_1_1_1 + 8.92857142857174e-05*G0_1_1_1_2 + 1.62337662337668e-05*G0_1_1_2_0 + 8.92857142857174e-05*G0_1_1_2_1 - 8.11688311688343e-06*G0_1_1_2_2 + 6.76406926406948e-06*G0_1_2_0_0 + 1.62337662337668e-05*G0_1_2_0_1 + 1.35281385281388e-06*G0_1_2_0_2 + 1.62337662337668e-05*G0_1_2_1_0 + 8.92857142857174e-05*G0_1_2_1_1 - 8.11688311688342e-06*G0_1_2_1_2 + 1.35281385281388e-06*G0_1_2_2_0 - 8.11688311688342e-06*G0_1_2_2_1 - 0.000114989177489182*G0_1_2_2_2 + 4.05844155844167e-06*G0_2_0_0_0 + 6.76406926406948e-06*G0_2_0_0_1 + 5.41125541125557e-06*G0_2_0_0_2 + 6.76406926406948e-06*G0_2_0_1_0 + 1.62337662337668e-05*G0_2_0_1_1 + 1.35281385281388e-06*G0_2_0_1_2 + 5.41125541125557e-06*G0_2_0_2_0 + 1.35281385281388e-06*G0_2_0_2_1 - 4.73484848484865e-05*G0_2_0_2_2 + 6.76406926406948e-06*G0_2_1_0_0 + 1.62337662337668e-05*G0_2_1_0_1 + 1.35281385281388e-06*G0_2_1_0_2 + 1.62337662337668e-05*G0_2_1_1_0 + 8.92857142857174e-05*G0_2_1_1_1 - 8.11688311688343e-06*G0_2_1_1_2 + 1.35281385281388e-06*G0_2_1_2_0 - 8.11688311688343e-06*G0_2_1_2_1 - 0.000114989177489182*G0_2_1_2_2 + 5.41125541125557e-06*G0_2_2_0_0 + 1.35281385281388e-06*G0_2_2_0_1 - 4.73484848484865e-05*G0_2_2_0_2 + 1.35281385281388e-06*G0_2_2_1_0 - 8.11688311688342e-06*G0_2_2_1_1 - 0.000114989177489182*G0_2_2_1_2 - 4.73484848484865e-05*G0_2_2_2_0 - 0.000114989177489182*G0_2_2_2_1 - 0.00101461038961042*G0_2_2_2_2;
    A[45] = A[73] - 1.21753246753248e-05*G0_0_0_0_1 + 1.21753246753251e-05*G0_0_0_0_2 - 1.21753246753248e-05*G0_0_0_1_0 + 3.65259740259755e-05*G0_0_0_1_1 + 1.21753246753251e-05*G0_0_0_2_0 - 3.65259740259754e-05*G0_0_0_2_2 - 1.21753246753248e-05*G0_0_1_0_0 + 3.65259740259755e-05*G0_0_1_0_1 + 3.65259740259755e-05*G0_0_1_1_0 + 0.000292207792207803*G0_0_1_1_1 + 4.87012987013004e-05*G0_0_1_1_2 + 4.87012987013004e-05*G0_0_1_2_1 - 4.87012987013004e-05*G0_0_1_2_2 + 1.21753246753251e-05*G0_0_2_0_0 - 3.65259740259754e-05*G0_0_2_0_2 + 4.87012987013004e-05*G0_0_2_1_1 - 4.87012987013004e-05*G0_0_2_1_2 - 3.65259740259754e-05*G0_0_2_2_0 - 4.87012987013004e-05*G0_0_2_2_1 - 0.000292207792207803*G0_0_2_2_2 - 1.21753246753248e-05*G0_1_0_0_0 + 3.65259740259755e-05*G0_1_0_0_1 + 3.65259740259755e-05*G0_1_0_1_0 + 0.000292207792207803*G0_1_0_1_1 + 4.87012987013004e-05*G0_1_0_1_2 + 4.87012987013004e-05*G0_1_0_2_1 - 4.87012987013004e-05*G0_1_0_2_2 + 3.65259740259755e-05*G0_1_1_0_0 + 0.000292207792207803*G0_1_1_0_1 + 4.87012987013004e-05*G0_1_1_0_2 + 0.000292207792207803*G0_1_1_1_0 + 0.00206980519480527*G0_1_1_1_1 + 0.000413961038961054*G0_1_1_1_2 + 4.87012987013004e-05*G0_1_1_2_0 + 0.000413961038961054*G0_1_1_2_1 + 4.87012987013004e-05*G0_1_2_0_1 - 4.87012987013004e-05*G0_1_2_0_2 + 4.87012987013004e-05*G0_1_2_1_0 + 0.000413961038961054*G0_1_2_1_1 - 4.87012987013004e-05*G0_1_2_2_0 - 0.000413961038961054*G0_1_2_2_2 + 1.21753246753251e-05*G0_2_0_0_0 - 3.65259740259754e-05*G0_2_0_0_2 + 4.87012987013004e-05*G0_2_0_1_1 - 4.87012987013004e-05*G0_2_0_1_2 - 3.65259740259754e-05*G0_2_0_2_0 - 4.87012987013004e-05*G0_2_0_2_1 - 0.000292207792207803*G0_2_0_2_2 + 4.87012987013004e-05*G0_2_1_0_1 - 4.87012987013004e-05*G0_2_1_0_2 + 4.87012987013004e-05*G0_2_1_1_0 + 0.000413961038961054*G0_2_1_1_1 - 4.87012987013004e-05*G0_2_1_2_0 - 0.000413961038961054*G0_2_1_2_2 - 3.65259740259754e-05*G0_2_2_0_0 - 4.87012987013004e-05*G0_2_2_0_1 - 0.000292207792207802*G0_2_2_0_2 - 4.87012987013004e-05*G0_2_2_1_0 - 0.000413961038961054*G0_2_2_1_2 - 0.000292207792207803*G0_2_2_2_0 - 0.000413961038961054*G0_2_2_2_1 - 0.00206980519480527*G0_2_2_2_2;
    A[93] = -0.000365259740259753*G0_0_0_0_0 - 0.000219155844155852*G0_0_0_0_2 + 0.000219155844155851*G0_0_0_1_1 - 0.000219155844155852*G0_0_0_2_0 - 0.000219155844155852*G0_0_0_2_2 + 0.000219155844155851*G0_0_1_0_1 + 0.000219155844155851*G0_0_1_1_0 + 0.000730519480519505*G0_0_1_1_1 + 0.000219155844155851*G0_0_1_1_2 + 0.000219155844155851*G0_0_1_2_1 - 0.000219155844155852*G0_0_2_0_0 - 0.000219155844155852*G0_0_2_0_2 + 0.000219155844155851*G0_0_2_1_1 - 0.000219155844155852*G0_0_2_2_0 - 0.000365259740259753*G0_0_2_2_2 + 0.000219155844155851*G0_1_0_0_1 + 0.000219155844155851*G0_1_0_1_0 + 0.000730519480519505*G0_1_0_1_1 + 0.000219155844155851*G0_1_0_1_2 + 0.000219155844155851*G0_1_0_2_1 + 0.000219155844155851*G0_1_1_0_0 + 0.000730519480519505*G0_1_1_0_1 + 0.000219155844155851*G0_1_1_0_2 + 0.000730519480519505*G0_1_1_1_0 + 0.00328733766233778*G0_1_1_1_1 + 0.00109577922077926*G0_1_1_1_2 + 0.000219155844155851*G0_1_1_2_0 + 0.00109577922077926*G0_1_1_2_1 + 0.000438311688311703*G0_1_1_2_2 + 0.000219155844155851*G0_1_2_0_1 + 0.000219155844155851*G0_1_2_1_0 + 0.00109577922077926*G0_1_2_1_1 + 0.000438311688311703*G0_1_2_1_2 + 0.000438311688311703*G0_1_2_2_1 - 0.000219155844155852*G0_2_0_0_0 - 0.000219155844155852*G0_2_0_0_2 + 0.000219155844155851*G0_2_0_1_1 - 0.000219155844155852*G0_2_0_2_0 - 0.000365259740259753*G0_2_0_2_2 + 0.000219155844155851*G0_2_1_0_1 + 0.000219155844155851*G0_2_1_1_0 + 0.00109577922077926*G0_2_1_1_1 + 0.000438311688311703*G0_2_1_1_2 + 0.000438311688311703*G0_2_1_2_1 - 0.000219155844155852*G0_2_2_0_0 - 0.000365259740259753*G0_2_2_0_2 + 0.000438311688311703*G0_2_2_1_1 - 0.000365259740259753*G0_2_2_2_0 - 0.00109577922077926*G0_2_2_2_2;
    A[60] = -0.00101461038961042*G0_0_0_0_0 - 4.73484848484865e-05*G0_0_0_0_1 - 0.000114989177489181*G0_0_0_0_2 - 4.73484848484865e-05*G0_0_0_1_0 + 5.41125541125559e-06*G0_0_0_1_1 + 1.3528138528139e-06*G0_0_0_1_2 - 0.000114989177489181*G0_0_0_2_0 + 1.35281385281391e-06*G0_0_0_2_1 - 8.1168831168833e-06*G0_0_0_2_2 - 4.73484848484865e-05*G0_0_1_0_0 + 5.41125541125559e-06*G0_0_1_0_1 + 1.3528138528139e-06*G0_0_1_0_2 + 5.41125541125559e-06*G0_0_1_1_0 + 4.05844155844169e-06*G0_0_1_1_1 + 6.76406926406949e-06*G0_0_1_1_2 + 1.3528138528139e-06*G0_0_1_2_0 + 6.76406926406949e-06*G0_0_1_2_1 + 1.62337662337668e-05*G0_0_1_2_2 - 0.000114989177489181*G0_0_2_0_0 + 1.35281385281391e-06*G0_0_2_0_1 - 8.11688311688331e-06*G0_0_2_0_2 + 1.35281385281391e-06*G0_0_2_1_0 + 6.76406926406949e-06*G0_0_2_1_1 + 1.62337662337668e-05*G0_0_2_1_2 - 8.11688311688331e-06*G0_0_2_2_0 + 1.62337662337668e-05*G0_0_2_2_1 + 8.92857142857175e-05*G0_0_2_2_2 - 4.73484848484865e-05*G0_1_0_0_0 + 5.41125541125559e-06*G0_1_0_0_1 + 1.3528138528139e-06*G0_1_0_0_2 + 5.41125541125559e-06*G0_1_0_1_0 + 4.05844155844169e-06*G0_1_0_1_1 + 6.76406926406949e-06*G0_1_0_1_2 + 1.3528138528139e-06*G0_1_0_2_0 + 6.76406926406949e-06*G0_1_0_2_1 + 1.62337662337668e-05*G0_1_0_2_2 + 5.41125541125559e-06*G0_1_1_0_0 + 4.05844155844169e-06*G0_1_1_0_1 + 6.76406926406949e-06*G0_1_1_0_2 + 4.05844155844169e-06*G0_1_1_1_0 - 1.89393939393947e-05*G0_1_1_1_1 + 6.76406926406949e-06*G0_1_1_1_2 + 6.76406926406949e-06*G0_1_1_2_0 + 6.76406926406949e-06*G0_1_1_2_1 + 2.29978354978363e-05*G0_1_1_2_2 + 1.3528138528139e-06*G0_1_2_0_0 + 6.76406926406949e-06*G0_1_2_0_1 + 1.62337662337668e-05*G0_1_2_0_2 + 6.76406926406949e-06*G0_1_2_1_0 + 6.76406926406949e-06*G0_1_2_1_1 + 2.29978354978363e-05*G0_1_2_1_2 + 1.62337662337668e-05*G0_1_2_2_0 + 2.29978354978363e-05*G0_1_2_2_1 + 7.84632034632062e-05*G0_1_2_2_2 - 0.000114989177489181*G0_2_0_0_0 + 1.35281385281391e-06*G0_2_0_0_1 - 8.11688311688331e-06*G0_2_0_0_2 + 1.35281385281391e-06*G0_2_0_1_0 + 6.76406926406949e-06*G0_2_0_1_1 + 1.62337662337668e-05*G0_2_0_1_2 - 8.11688311688331e-06*G0_2_0_2_0 + 1.62337662337668e-05*G0_2_0_2_1 + 8.92857142857175e-05*G0_2_0_2_2 + 1.3528138528139e-06*G0_2_1_0_0 + 6.76406926406949e-06*G0_2_1_0_1 + 1.62337662337668e-05*G0_2_1_0_2 + 6.76406926406949e-06*G0_2_1_1_0 + 6.76406926406949e-06*G0_2_1_1_1 + 2.29978354978363e-05*G0_2_1_1_2 + 1.62337662337668e-05*G0_2_1_2_0 + 2.29978354978363e-05*G0_2_1_2_1 + 7.84632034632062e-05*G0_2_1_2_2 - 8.11688311688332e-06*G0_2_2_0_0 + 1.62337662337668e-05*G0_2_2_0_1 + 8.92857142857175e-05*G0_2_2_0_2 + 1.62337662337668e-05*G0_2_2_1_0 + 2.29978354978363e-05*G0_2_2_1_1 + 7.84632034632062e-05*G0_2_2_1_2 + 8.92857142857175e-05*G0_2_2_2_0 + 7.84632034632063e-05*G0_2_2_2_1 + 0.000554653679653699*G0_2_2_2_2;
    A[16] = A[60] + 0.000845508658008687*G0_0_0_0_0 + 2.84090909090919e-05*G0_0_0_0_1 + 0.000116341991341995*G0_0_0_0_2 + 2.84090909090919e-05*G0_0_0_1_0 + 0.000116341991341995*G0_0_0_2_0 + 6.08766233766254e-05*G0_0_0_2_2 + 2.84090909090919e-05*G0_0_1_0_0 + 6.76406926406948e-06*G0_0_1_2_2 + 0.000116341991341995*G0_0_2_0_0 + 6.08766233766254e-05*G0_0_2_0_2 + 6.76406926406948e-06*G0_0_2_1_2 + 6.08766233766254e-05*G0_0_2_2_0 + 6.76406926406948e-06*G0_0_2_2_1 + 5.00541125541141e-05*G0_0_2_2_2 + 2.8409090909092e-05*G0_1_0_0_0 + 6.76406926406948e-06*G0_1_0_2_2 - 2.84090909090923e-05*G0_1_1_1_1 - 6.76406926406951e-06*G0_1_1_2_2 + 6.76406926406948e-06*G0_1_2_0_2 - 6.76406926406951e-06*G0_1_2_1_2 + 6.76406926406949e-06*G0_1_2_2_0 - 6.76406926406951e-06*G0_1_2_2_1 + 0.000116341991341995*G0_2_0_0_0 + 6.08766233766254e-05*G0_2_0_0_2 + 6.76406926406948e-06*G0_2_0_1_2 + 6.08766233766254e-05*G0_2_0_2_0 + 6.76406926406948e-06*G0_2_0_2_1 + 5.00541125541141e-05*G0_2_0_2_2 + 6.76406926406948e-06*G0_2_1_0_2 - 6.76406926406951e-06*G0_2_1_1_2 + 6.76406926406949e-06*G0_2_1_2_0 - 6.76406926406951e-06*G0_2_1_2_1 + 6.08766233766254e-05*G0_2_2_0_0 + 6.76406926406948e-06*G0_2_2_0_1 + 5.00541125541141e-05*G0_2_2_0_2 + 6.76406926406948e-06*G0_2_2_1_0 - 6.76406926406951e-06*G0_2_2_1_1 + 5.00541125541141e-05*G0_2_2_2_0 - 3.38203463203477e-05*G0_2_2_2_2;
    A[40] = A[16] + 0.000121753246753251*G0_0_0_0_0 + 2.43506493506502e-05*G0_0_0_0_1 + 2.43506493506502e-05*G0_0_0_1_0 - 3.65259740259753e-05*G0_0_0_2_2 + 2.43506493506502e-05*G0_0_1_0_0 - 2.43506493506502e-05*G0_0_1_1_1 - 3.65259740259753e-05*G0_0_2_0_2 - 3.65259740259753e-05*G0_0_2_2_0 - 6.08766233766254e-05*G0_0_2_2_2 + 2.43506493506502e-05*G0_1_0_0_0 - 2.43506493506502e-05*G0_1_0_1_1 - 2.43506493506502e-05*G0_1_1_0_1 - 2.43506493506502e-05*G0_1_1_1_0 - 0.000121753246753251*G0_1_1_1_1 + 3.65259740259753e-05*G0_1_1_2_2 + 3.65259740259753e-05*G0_1_2_1_2 + 3.65259740259753e-05*G0_1_2_2_1 + 6.08766233766255e-05*G0_1_2_2_2 - 3.65259740259753e-05*G0_2_0_0_2 - 3.65259740259753e-05*G0_2_0_2_0 - 6.08766233766254e-05*G0_2_0_2_2 + 3.65259740259753e-05*G0_2_1_1_2 + 3.65259740259753e-05*G0_2_1_2_1 + 6.08766233766255e-05*G0_2_1_2_2 - 3.65259740259753e-05*G0_2_2_0_0 - 6.08766233766254e-05*G0_2_2_0_2 + 3.65259740259753e-05*G0_2_2_1_1 + 6.08766233766254e-05*G0_2_2_1_2 - 6.08766233766254e-05*G0_2_2_2_0 + 6.08766233766255e-05*G0_2_2_2_1;
    A[4] = A[40];
    A[1] = 0.000223214285714293*G0_0_0_0_0 + 2.43506493506502e-05*G0_0_0_0_1 + 9.46969696969727e-06*G0_0_0_0_2 + 2.43506493506502e-05*G0_0_0_1_0 + 8.11688311688341e-06*G0_0_0_1_1 + 9.46969696969727e-06*G0_0_0_2_0 - 1.3528138528139e-06*G0_0_0_2_2 + 2.43506493506502e-05*G0_0_1_0_0 + 8.11688311688341e-06*G0_0_1_0_1 + 8.11688311688341e-06*G0_0_1_1_0 + 2.43506493506503e-05*G0_0_1_1_1 + 9.46969696969727e-06*G0_0_2_0_0 - 1.3528138528139e-06*G0_0_2_0_2 - 1.3528138528139e-06*G0_0_2_2_0 + 4.05844155844171e-06*G0_0_2_2_2 + 2.43506493506502e-05*G0_1_0_0_0 + 8.11688311688341e-06*G0_1_0_0_1 + 8.11688311688341e-06*G0_1_0_1_0 + 2.43506493506503e-05*G0_1_0_1_1 + 8.11688311688341e-06*G0_1_1_0_0 + 2.43506493506503e-05*G0_1_1_0_1 + 2.43506493506503e-05*G0_1_1_1_0 + 0.000223214285714294*G0_1_1_1_1 + 9.46969696969734e-06*G0_1_1_1_2 + 9.46969696969734e-06*G0_1_1_2_1 - 1.35281385281389e-06*G0_1_1_2_2 + 9.46969696969734e-06*G0_1_2_1_1 - 1.35281385281389e-06*G0_1_2_1_2 - 1.35281385281389e-06*G0_1_2_2_1 + 4.05844155844171e-06*G0_1_2_2_2 + 9.46969696969727e-06*G0_2_0_0_0 - 1.3528138528139e-06*G0_2_0_0_2 - 1.3528138528139e-06*G0_2_0_2_0 + 4.05844155844171e-06*G0_2_0_2_2 + 9.46969696969734e-06*G0_2_1_1_1 - 1.35281385281389e-06*G0_2_1_1_2 - 1.35281385281389e-06*G0_2_1_2_1 + 4.05844155844171e-06*G0_2_1_2_2 - 1.3528138528139e-06*G0_2_2_0_0 + 4.05844155844171e-06*G0_2_2_0_2 - 1.35281385281389e-06*G0_2_2_1_1 + 4.05844155844171e-06*G0_2_2_1_2 + 4.05844155844171e-06*G0_2_2_2_0 + 4.05844155844171e-06*G0_2_2_2_1 + 4.19372294372309e-05*G0_2_2_2_2;
    A[99] = 0.00438311688311703*G0_0_0_0_0 + 0.00219155844155852*G0_0_0_0_1 + 0.00219155844155852*G0_0_0_0_2 + 0.00219155844155852*G0_0_0_1_0 + 0.00175324675324681*G0_0_0_1_1 + 0.00131493506493511*G0_0_0_1_2 + 0.00219155844155852*G0_0_0_2_0 + 0.00131493506493511*G0_0_0_2_1 + 0.00175324675324681*G0_0_0_2_2 + 0.00219155844155852*G0_0_1_0_0 + 0.00175324675324681*G0_0_1_0_1 + 0.00131493506493511*G0_0_1_0_2 + 0.00175324675324681*G0_0_1_1_0 + 0.00219155844155852*G0_0_1_1_1 + 0.00131493506493511*G0_0_1_1_2 + 0.00131493506493511*G0_0_1_2_0 + 0.00131493506493511*G0_0_1_2_1 + 0.00131493506493511*G0_0_1_2_2 + 0.00219155844155852*G0_0_2_0_0 + 0.00131493506493511*G0_0_2_0_1 + 0.00175324675324681*G0_0_2_0_2 + 0.00131493506493511*G0_0_2_1_0 + 0.00131493506493511*G0_0_2_1_1 + 0.00131493506493511*G0_0_2_1_2 + 0.00175324675324681*G0_0_2_2_0 + 0.00131493506493511*G0_0_2_2_1 + 0.00219155844155851*G0_0_2_2_2 + 0.00219155844155852*G0_1_0_0_0 + 0.00175324675324681*G0_1_0_0_1 + 0.00131493506493511*G0_1_0_0_2 + 0.00175324675324681*G0_1_0_1_0 + 0.00219155844155852*G0_1_0_1_1 + 0.00131493506493511*G0_1_0_1_2 + 0.00131493506493511*G0_1_0_2_0 + 0.00131493506493511*G0_1_0_2_1 + 0.00131493506493511*G0_1_0_2_2 + 0.00175324675324681*G0_1_1_0_0 + 0.00219155844155852*G0_1_1_0_1 + 0.00131493506493511*G0_1_1_0_2 + 0.00219155844155852*G0_1_1_1_0 + 0.00438311688311703*G0_1_1_1_1 + 0.00219155844155852*G0_1_1_1_2 + 0.00131493506493511*G0_1_1_2_0 + 0.00219155844155852*G0_1_1_2_1 + 0.00175324675324681*G0_1_1_2_2 + 0.00131493506493511*G0_1_2_0_0 + 0.00131493506493511*G0_1_2_0_1 + 0.00131493506493511*G0_1_2_0_2 + 0.00131493506493511*G0_1_2_1_0 + 0.00219155844155852*G0_1_2_1_1 + 0.00175324675324681*G0_1_2_1_2 + 0.00131493506493511*G0_1_2_2_0 + 0.00175324675324681*G0_1_2_2_1 + 0.00219155844155851*G0_1_2_2_2 + 0.00219155844155852*G0_2_0_0_0 + 0.00131493506493511*G0_2_0_0_1 + 0.00175324675324681*G0_2_0_0_2 + 0.00131493506493511*G0_2_0_1_0 + 0.00131493506493511*G0_2_0_1_1 + 0.00131493506493511*G0_2_0_1_2 + 0.00175324675324681*G0_2_0_2_0 + 0.00131493506493511*G0_2_0_2_1 + 0.00219155844155851*G0_2_0_2_2 + 0.00131493506493511*G0_2_1_0_0 + 0.00131493506493511*G0_2_1_0_1 + 0.00131493506493511*G0_2_1_0_2 + 0.00131493506493511*G0_2_1_1_0 + 0.00219155844155852*G0_2_1_1_1 + 0.00175324675324681*G0_2_1_1_2 + 0.00131493506493511*G0_2_1_2_0 + 0.00175324675324681*G0_2_1_2_1 + 0.00219155844155851*G0_2_1_2_2 + 0.00175324675324681*G0_2_2_0_0 + 0.00131493506493511*G0_2_2_0_1 + 0.00219155844155851*G0_2_2_0_2 + 0.00131493506493511*G0_2_2_1_0 + 0.00175324675324681*G0_2_2_1_1 + 0.00219155844155851*G0_2_2_1_2 + 0.00219155844155851*G0_2_2_2_0 + 0.00219155844155851*G0_2_2_2_1 + 0.00438311688311703*G0_2_2_2_2;
    A[78] = A[73] - 0.00206980519480526*G0_0_0_0_0 - 0.000292207792207802*G0_0_0_0_1 - 0.000219155844155851*G0_0_0_0_2 - 0.000292207792207802*G0_0_0_1_0 - 3.65259740259752e-05*G0_0_0_1_2 - 0.000219155844155851*G0_0_0_2_0 - 3.65259740259752e-05*G0_0_0_2_1 - 4.87012987013003e-05*G0_0_0_2_2 - 0.000292207792207802*G0_0_1_0_0 - 3.65259740259752e-05*G0_0_1_0_2 - 6.08766233766254e-05*G0_0_1_1_1 + 1.21753246753251e-05*G0_0_1_1_2 - 3.65259740259752e-05*G0_0_1_2_0 + 1.21753246753251e-05*G0_0_1_2_1 - 0.000219155844155851*G0_0_2_0_0 - 3.65259740259752e-05*G0_0_2_0_1 - 4.87012987013003e-05*G0_0_2_0_2 - 3.65259740259752e-05*G0_0_2_1_0 + 1.21753246753251e-05*G0_0_2_1_1 - 4.87012987013003e-05*G0_0_2_2_0 - 2.43506493506503e-05*G0_0_2_2_2 - 0.000292207792207802*G0_1_0_0_0 - 3.65259740259752e-05*G0_1_0_0_2 - 6.08766233766255e-05*G0_1_0_1_1 + 1.21753246753251e-05*G0_1_0_1_2 - 3.65259740259752e-05*G0_1_0_2_0 + 1.21753246753251e-05*G0_1_0_2_1 - 6.08766233766255e-05*G0_1_1_0_1 + 1.21753246753251e-05*G0_1_1_0_2 - 6.08766233766255e-05*G0_1_1_1_0 - 0.000365259740259753*G0_1_1_1_1 + 0.000182629870129877*G0_1_1_1_2 + 1.21753246753251e-05*G0_1_1_2_0 + 0.000182629870129877*G0_1_1_2_1 + 9.74025974026008e-05*G0_1_1_2_2 - 3.65259740259753e-05*G0_1_2_0_0 + 1.21753246753251e-05*G0_1_2_0_1 + 1.21753246753251e-05*G0_1_2_1_0 + 0.000182629870129877*G0_1_2_1_1 + 9.74025974026008e-05*G0_1_2_1_2 + 9.74025974026008e-05*G0_1_2_2_1 + 3.65259740259752e-05*G0_1_2_2_2 - 0.000219155844155851*G0_2_0_0_0 - 3.65259740259752e-05*G0_2_0_0_1 - 4.87012987013003e-05*G0_2_0_0_2 - 3.65259740259753e-05*G0_2_0_1_0 + 1.21753246753251e-05*G0_2_0_1_1 - 4.87012987013003e-05*G0_2_0_2_0 - 2.43506493506503e-05*G0_2_0_2_2 - 3.65259740259753e-05*G0_2_1_0_0 + 1.21753246753251e-05*G0_2_1_0_1 + 1.21753246753251e-05*G0_2_1_1_0 + 0.000182629870129877*G0_2_1_1_1 + 9.74025974026008e-05*G0_2_1_1_2 + 9.74025974026008e-05*G0_2_1_2_1 + 3.65259740259752e-05*G0_2_1_2_2 - 4.87012987013003e-05*G0_2_2_0_0 - 2.43506493506503e-05*G0_2_2_0_2 + 9.74025974026008e-05*G0_2_2_1_1 + 3.65259740259752e-05*G0_2_2_1_2 - 2.43506493506503e-05*G0_2_2_2_0 + 3.65259740259752e-05*G0_2_2_2_1 - 7.30519480519512e-05*G0_2_2_2_2;
    A[21] = 4.19372294372309e-05*G0_0_0_0_0 + 4.0584415584417e-06*G0_0_0_0_1 + 4.0584415584417e-06*G0_0_0_0_2 + 4.0584415584417e-06*G0_0_0_1_0 - 1.35281385281389e-06*G0_0_0_1_1 + 4.0584415584417e-06*G0_0_0_2_0 - 1.35281385281389e-06*G0_0_0_2_2 + 4.0584415584417e-06*G0_0_1_0_0 - 1.35281385281389e-06*G0_0_1_0_1 - 1.35281385281389e-06*G0_0_1_1_0 + 9.46969696969734e-06*G0_0_1_1_1 + 4.0584415584417e-06*G0_0_2_0_0 - 1.35281385281389e-06*G0_0_2_0_2 - 1.35281385281389e-06*G0_0_2_2_0 + 9.46969696969732e-06*G0_0_2_2_2 + 4.0584415584417e-06*G0_1_0_0_0 - 1.35281385281389e-06*G0_1_0_0_1 - 1.35281385281389e-06*G0_1_0_1_0 + 9.46969696969735e-06*G0_1_0_1_1 - 1.35281385281389e-06*G0_1_1_0_0 + 9.46969696969734e-06*G0_1_1_0_1 + 9.46969696969734e-06*G0_1_1_1_0 + 0.000223214285714294*G0_1_1_1_1 + 2.43506493506502e-05*G0_1_1_1_2 + 2.43506493506502e-05*G0_1_1_2_1 + 8.11688311688341e-06*G0_1_1_2_2 + 2.43506493506502e-05*G0_1_2_1_1 + 8.11688311688341e-06*G0_1_2_1_2 + 8.11688311688341e-06*G0_1_2_2_1 + 2.43506493506502e-05*G0_1_2_2_2 + 4.0584415584417e-06*G0_2_0_0_0 - 1.35281385281389e-06*G0_2_0_0_2 - 1.35281385281389e-06*G0_2_0_2_0 + 9.46969696969732e-06*G0_2_0_2_2 + 2.43506493506502e-05*G0_2_1_1_1 + 8.11688311688341e-06*G0_2_1_1_2 + 8.11688311688341e-06*G0_2_1_2_1 + 2.43506493506502e-05*G0_2_1_2_2 - 1.35281385281389e-06*G0_2_2_0_0 + 9.46969696969732e-06*G0_2_2_0_2 + 8.11688311688341e-06*G0_2_2_1_1 + 2.43506493506502e-05*G0_2_2_1_2 + 9.46969696969731e-06*G0_2_2_2_0 + 2.43506493506502e-05*G0_2_2_2_1 + 0.000223214285714293*G0_2_2_2_2;
    A[89] = A[93] - 0.000730519480519505*G0_0_0_0_0 - 0.000146103896103901*G0_0_0_0_2 + 0.000219155844155852*G0_0_0_1_1 - 0.000146103896103901*G0_0_0_2_0 + 0.000219155844155852*G0_0_1_0_1 + 0.000219155844155852*G0_0_1_1_0 + 0.000365259740259753*G0_0_1_1_1 - 0.000146103896103901*G0_0_2_0_0 + 0.000146103896103901*G0_0_2_2_2 + 0.000219155844155852*G0_1_0_0_1 + 0.000219155844155852*G0_1_0_1_0 + 0.000365259740259753*G0_1_0_1_1 + 0.000219155844155852*G0_1_1_0_0 + 0.000365259740259753*G0_1_1_0_1 + 0.000365259740259753*G0_1_1_1_0 - 0.000365259740259753*G0_1_1_1_2 - 0.000365259740259753*G0_1_1_2_1 - 0.000219155844155851*G0_1_1_2_2 - 0.000365259740259753*G0_1_2_1_1 - 0.000219155844155851*G0_1_2_1_2 - 0.000219155844155851*G0_1_2_2_1 - 0.000146103896103901*G0_2_0_0_0 + 0.000146103896103902*G0_2_0_2_2 - 0.000365259740259753*G0_2_1_1_1 - 0.000219155844155851*G0_2_1_1_2 - 0.000219155844155851*G0_2_1_2_1 + 0.000146103896103902*G0_2_2_0_2 - 0.000219155844155851*G0_2_2_1_1 + 0.000146103896103902*G0_2_2_2_0 + 0.000730519480519507*G0_2_2_2_2;
    A[94] = A[69] + 0.000730519480519506*G0_0_0_0_0 + 0.000146103896103901*G0_0_0_0_1 + 0.000146103896103901*G0_0_0_1_0 - 0.000219155844155852*G0_0_0_2_2 + 0.000146103896103901*G0_0_1_0_0 - 0.000146103896103901*G0_0_1_1_1 - 0.000219155844155852*G0_0_2_0_2 - 0.000219155844155852*G0_0_2_2_0 - 0.000365259740259754*G0_0_2_2_2 + 0.000146103896103901*G0_1_0_0_0 - 0.000146103896103901*G0_1_0_1_1 - 0.000146103896103901*G0_1_1_0_1 - 0.000146103896103901*G0_1_1_1_0 - 0.000730519480519507*G0_1_1_1_1 + 0.000219155844155852*G0_1_1_2_2 + 0.000219155844155852*G0_1_2_1_2 + 0.000219155844155852*G0_1_2_2_1 + 0.000365259740259753*G0_1_2_2_2 - 0.000219155844155852*G0_2_0_0_2 - 0.000219155844155852*G0_2_0_2_0 - 0.000365259740259753*G0_2_0_2_2 + 0.000219155844155852*G0_2_1_1_2 + 0.000219155844155852*G0_2_1_2_1 + 0.000365259740259753*G0_2_1_2_2 - 0.000219155844155852*G0_2_2_0_0 - 0.000365259740259753*G0_2_2_0_2 + 0.000219155844155852*G0_2_2_1_1 + 0.000365259740259753*G0_2_2_1_2 - 0.000365259740259754*G0_2_2_2_0 + 0.000365259740259753*G0_2_2_2_1;
    A[51] = A[25] - 3.38203463203475e-05*G0_0_0_0_0 + 5.00541125541141e-05*G0_0_0_0_2 - 6.76406926406947e-06*G0_0_0_1_1 + 6.76406926406947e-06*G0_0_0_1_2 + 5.00541125541141e-05*G0_0_0_2_0 + 6.76406926406948e-06*G0_0_0_2_1 + 6.08766233766253e-05*G0_0_0_2_2 - 6.76406926406947e-06*G0_0_1_0_1 + 6.76406926406947e-06*G0_0_1_0_2 - 6.76406926406947e-06*G0_0_1_1_0 + 6.76406926406947e-06*G0_0_1_2_0 + 5.00541125541141e-05*G0_0_2_0_0 + 6.76406926406948e-06*G0_0_2_0_1 + 6.08766233766253e-05*G0_0_2_0_2 + 6.76406926406947e-06*G0_0_2_1_0 + 6.08766233766253e-05*G0_0_2_2_0 + 0.000116341991341995*G0_0_2_2_2 - 6.76406926406948e-06*G0_1_0_0_1 + 6.76406926406947e-06*G0_1_0_0_2 - 6.76406926406947e-06*G0_1_0_1_0 + 6.76406926406948e-06*G0_1_0_2_0 - 6.76406926406948e-06*G0_1_1_0_0 - 2.84090909090925e-05*G0_1_1_1_1 + 6.76406926406948e-06*G0_1_2_0_0 + 2.8409090909092e-05*G0_1_2_2_2 + 5.00541125541142e-05*G0_2_0_0_0 + 6.76406926406948e-06*G0_2_0_0_1 + 6.08766233766253e-05*G0_2_0_0_2 + 6.76406926406947e-06*G0_2_0_1_0 + 6.08766233766253e-05*G0_2_0_2_0 + 0.000116341991341995*G0_2_0_2_2 + 6.76406926406948e-06*G0_2_1_0_0 + 2.8409090909092e-05*G0_2_1_2_2 + 6.08766233766253e-05*G0_2_2_0_0 + 0.000116341991341995*G0_2_2_0_2 + 2.8409090909092e-05*G0_2_2_1_2 + 0.000116341991341995*G0_2_2_2_0 + 2.8409090909092e-05*G0_2_2_2_1 + 0.000845508658008688*G0_2_2_2_2;
    A[72] = A[51] + 6.08766233766255e-05*G0_0_0_0_1 - 6.08766233766253e-05*G0_0_0_0_2 + 6.08766233766255e-05*G0_0_0_1_0 + 3.65259740259753e-05*G0_0_0_1_1 - 6.08766233766253e-05*G0_0_0_2_0 - 3.65259740259752e-05*G0_0_0_2_2 + 6.08766233766255e-05*G0_0_1_0_0 + 3.65259740259753e-05*G0_0_1_0_1 + 3.65259740259753e-05*G0_0_1_1_0 - 6.08766233766254e-05*G0_0_2_0_0 - 3.65259740259752e-05*G0_0_2_0_2 - 3.65259740259752e-05*G0_0_2_2_0 + 6.08766233766255e-05*G0_1_0_0_0 + 3.65259740259753e-05*G0_1_0_0_1 + 3.65259740259753e-05*G0_1_0_1_0 + 3.65259740259753e-05*G0_1_1_0_0 - 0.000121753246753251*G0_1_1_1_1 - 2.43506493506502e-05*G0_1_1_1_2 - 2.43506493506502e-05*G0_1_1_2_1 - 2.43506493506502e-05*G0_1_2_1_1 + 2.43506493506502e-05*G0_1_2_2_2 - 6.08766233766253e-05*G0_2_0_0_0 - 3.65259740259752e-05*G0_2_0_0_2 - 3.65259740259752e-05*G0_2_0_2_0 - 2.43506493506502e-05*G0_2_1_1_1 + 2.43506493506502e-05*G0_2_1_2_2 - 3.65259740259752e-05*G0_2_2_0_0 + 2.43506493506502e-05*G0_2_2_1_2 + 2.43506493506502e-05*G0_2_2_2_1 + 0.00012175324675325*G0_2_2_2_2;
    A[15] = A[51];
    A[36] = A[45] + 0.000365259740259753*G0_0_0_0_0 + 7.30519480519507e-05*G0_0_0_0_1 + 7.30519480519507e-05*G0_0_0_1_0 - 0.000109577922077926*G0_0_0_2_2 + 7.30519480519507e-05*G0_0_1_0_0 - 7.30519480519507e-05*G0_0_1_1_1 - 0.000109577922077926*G0_0_2_0_2 - 0.000109577922077926*G0_0_2_2_0 - 0.000182629870129876*G0_0_2_2_2 + 7.30519480519507e-05*G0_1_0_0_0 - 7.30519480519507e-05*G0_1_0_1_1 - 7.30519480519507e-05*G0_1_1_0_1 - 7.30519480519507e-05*G0_1_1_1_0 - 0.000365259740259754*G0_1_1_1_1 + 0.000109577922077926*G0_1_1_2_2 + 0.000109577922077926*G0_1_2_1_2 + 0.000109577922077926*G0_1_2_2_1 + 0.000182629870129877*G0_1_2_2_2 - 0.000109577922077926*G0_2_0_0_2 - 0.000109577922077926*G0_2_0_2_0 - 0.000182629870129876*G0_2_0_2_2 + 0.000109577922077926*G0_2_1_1_2 + 0.000109577922077926*G0_2_1_2_1 + 0.000182629870129877*G0_2_1_2_2 - 0.000109577922077926*G0_2_2_0_0 - 0.000182629870129876*G0_2_2_0_2 + 0.000109577922077926*G0_2_2_1_1 + 0.000182629870129877*G0_2_2_1_2 - 0.000182629870129876*G0_2_2_2_0 + 0.000182629870129877*G0_2_2_2_1;
    A[86] = A[85] + 0.00273944805194814*G0_0_0_0_0 + 0.000365259740259753*G0_0_0_0_1 + 0.000547889610389628*G0_0_0_0_2 + 0.000365259740259753*G0_0_0_1_0 + 7.30519480519505e-05*G0_0_0_1_2 + 0.000547889610389628*G0_0_0_2_0 + 7.30519480519505e-05*G0_0_0_2_1 + 0.000109577922077926*G0_0_0_2_2 + 0.000365259740259753*G0_0_1_0_0 + 7.30519480519505e-05*G0_0_1_0_2 - 0.000109577922077926*G0_0_1_1_1 + 7.30519480519505e-05*G0_0_1_2_0 + 0.000547889610389628*G0_0_2_0_0 + 7.30519480519505e-05*G0_0_2_0_1 + 0.000109577922077926*G0_0_2_0_2 + 7.30519480519505e-05*G0_0_2_1_0 + 0.000109577922077926*G0_0_2_2_0 - 0.000109577922077926*G0_0_2_2_2 + 0.000365259740259753*G0_1_0_0_0 + 7.30519480519505e-05*G0_1_0_0_2 - 0.000109577922077926*G0_1_0_1_1 + 7.30519480519505e-05*G0_1_0_2_0 - 0.000109577922077926*G0_1_1_0_1 - 0.000109577922077926*G0_1_1_1_0 - 0.000182629870129876*G0_1_1_1_1 + 7.30519480519505e-05*G0_1_2_0_0 - 7.30519480519504e-05*G0_1_2_2_2 + 0.000547889610389628*G0_2_0_0_0 + 7.30519480519505e-05*G0_2_0_0_1 + 0.000109577922077926*G0_2_0_0_2 + 7.30519480519505e-05*G0_2_0_1_0 + 0.000109577922077926*G0_2_0_2_0 - 0.000109577922077926*G0_2_0_2_2 + 7.30519480519505e-05*G0_2_1_0_0 - 7.30519480519504e-05*G0_2_1_2_2 + 0.000109577922077926*G0_2_2_0_0 - 0.000109577922077926*G0_2_2_0_2 - 7.30519480519504e-05*G0_2_2_1_2 - 0.000109577922077926*G0_2_2_2_0 - 7.30519480519504e-05*G0_2_2_2_1 - 0.000547889610389628*G0_2_2_2_2;
    A[41] = A[40] + 2.8409090909092e-05*G0_0_0_0_0 + 6.76406926406949e-06*G0_0_0_2_2 - 2.8409090909092e-05*G0_0_1_1_1 - 6.76406926406948e-06*G0_0_1_2_2 + 6.76406926406949e-06*G0_0_2_0_2 - 6.76406926406948e-06*G0_0_2_1_2 + 6.76406926406949e-06*G0_0_2_2_0 - 6.76406926406948e-06*G0_0_2_2_1 - 2.8409090909092e-05*G0_1_0_1_1 - 6.76406926406948e-06*G0_1_0_2_2 - 2.8409090909092e-05*G0_1_1_0_1 - 2.8409090909092e-05*G0_1_1_1_0 - 0.000845508658008687*G0_1_1_1_1 - 0.000116341991341995*G0_1_1_1_2 - 0.000116341991341995*G0_1_1_2_1 - 6.08766233766255e-05*G0_1_1_2_2 - 6.76406926406948e-06*G0_1_2_0_2 - 0.000116341991341995*G0_1_2_1_1 - 6.08766233766255e-05*G0_1_2_1_2 - 6.76406926406948e-06*G0_1_2_2_0 - 6.08766233766255e-05*G0_1_2_2_1 - 5.00541125541142e-05*G0_1_2_2_2 + 6.7640692640695e-06*G0_2_0_0_2 - 6.76406926406948e-06*G0_2_0_1_2 + 6.76406926406949e-06*G0_2_0_2_0 - 6.76406926406948e-06*G0_2_0_2_1 - 6.76406926406948e-06*G0_2_1_0_2 - 0.000116341991341995*G0_2_1_1_1 - 6.08766233766255e-05*G0_2_1_1_2 - 6.76406926406948e-06*G0_2_1_2_0 - 6.08766233766255e-05*G0_2_1_2_1 - 5.00541125541142e-05*G0_2_1_2_2 + 6.76406926406949e-06*G0_2_2_0_0 - 6.76406926406948e-06*G0_2_2_0_1 - 6.76406926406948e-06*G0_2_2_1_0 - 6.08766233766255e-05*G0_2_2_1_1 - 5.00541125541142e-05*G0_2_2_1_2 - 5.00541125541142e-05*G0_2_2_2_1 + 3.38203463203476e-05*G0_2_2_2_2;
    A[97] = 0.00328733766233777*G0_0_0_0_0 + 0.00109577922077926*G0_0_0_0_1 + 0.000730519480519505*G0_0_0_0_2 + 0.00109577922077926*G0_0_0_1_0 + 0.000438311688311703*G0_0_0_1_1 + 0.000219155844155852*G0_0_0_1_2 + 0.000730519480519505*G0_0_0_2_0 + 0.000219155844155852*G0_0_0_2_1 + 0.000219155844155851*G0_0_0_2_2 + 0.00109577922077926*G0_0_1_0_0 + 0.000438311688311703*G0_0_1_0_1 + 0.000219155844155852*G0_0_1_0_2 + 0.000438311688311703*G0_0_1_1_0 + 0.000219155844155852*G0_0_1_2_0 + 0.000730519480519505*G0_0_2_0_0 + 0.000219155844155852*G0_0_2_0_1 + 0.000219155844155851*G0_0_2_0_2 + 0.000219155844155852*G0_0_2_1_0 + 0.000219155844155851*G0_0_2_2_0 + 0.00109577922077926*G0_1_0_0_0 + 0.000438311688311703*G0_1_0_0_1 + 0.000219155844155852*G0_1_0_0_2 + 0.000438311688311703*G0_1_0_1_0 + 0.000219155844155852*G0_1_0_2_0 + 0.000438311688311703*G0_1_1_0_0 - 0.00109577922077926*G0_1_1_1_1 - 0.000365259740259753*G0_1_1_1_2 - 0.000365259740259753*G0_1_1_2_1 - 0.000219155844155852*G0_1_1_2_2 + 0.000219155844155852*G0_1_2_0_0 - 0.000365259740259753*G0_1_2_1_1 - 0.000219155844155852*G0_1_2_1_2 - 0.000219155844155852*G0_1_2_2_1 - 0.000219155844155852*G0_1_2_2_2 + 0.000730519480519505*G0_2_0_0_0 + 0.000219155844155852*G0_2_0_0_1 + 0.000219155844155851*G0_2_0_0_2 + 0.000219155844155852*G0_2_0_1_0 + 0.000219155844155851*G0_2_0_2_0 + 0.000219155844155852*G0_2_1_0_0 - 0.000365259740259753*G0_2_1_1_1 - 0.000219155844155852*G0_2_1_1_2 - 0.000219155844155852*G0_2_1_2_1 - 0.000219155844155852*G0_2_1_2_2 + 0.000219155844155851*G0_2_2_0_0 - 0.000219155844155852*G0_2_2_1_1 - 0.000219155844155852*G0_2_2_1_2 - 0.000219155844155852*G0_2_2_2_1 - 0.000365259740259753*G0_2_2_2_2;
    A[64] = -A[78] - 0.00213068181818189*G0_0_0_0_0 - 0.000267857142857152*G0_0_0_0_1 - 0.000158279220779226*G0_0_0_0_2 - 0.000267857142857152*G0_0_0_1_0 - 0.000158279220779226*G0_0_0_2_0 + 0.000170454545454551*G0_0_0_2_2 - 0.000267857142857152*G0_0_1_0_0 - 0.000267857142857152*G0_0_1_1_1 + 0.000133928571428576*G0_0_1_2_2 - 0.000158279220779226*G0_0_2_0_0 + 0.000170454545454551*G0_0_2_0_2 + 0.000133928571428576*G0_0_2_1_2 + 0.000170454545454551*G0_0_2_2_0 + 0.000133928571428576*G0_0_2_2_1 + 0.000754870129870156*G0_0_2_2_2 - 0.000267857142857152*G0_1_0_0_0 - 0.000267857142857153*G0_1_0_1_1 + 0.000133928571428576*G0_1_0_2_2 - 0.000267857142857153*G0_1_1_0_1 - 0.000267857142857153*G0_1_1_1_0 - 0.0021306818181819*G0_1_1_1_1 - 0.000158279220779227*G0_1_1_1_2 - 0.000158279220779227*G0_1_1_2_1 + 0.000170454545454551*G0_1_1_2_2 + 0.000133928571428576*G0_1_2_0_2 - 0.000158279220779227*G0_1_2_1_1 + 0.000170454545454551*G0_1_2_1_2 + 0.000133928571428576*G0_1_2_2_0 + 0.000170454545454551*G0_1_2_2_1 + 0.000754870129870156*G0_1_2_2_2 - 0.000158279220779226*G0_2_0_0_0 + 0.000170454545454551*G0_2_0_0_2 + 0.000133928571428576*G0_2_0_1_2 + 0.000170454545454551*G0_2_0_2_0 + 0.000133928571428576*G0_2_0_2_1 + 0.000754870129870156*G0_2_0_2_2 + 0.000133928571428576*G0_2_1_0_2 - 0.000158279220779227*G0_2_1_1_1 + 0.000170454545454551*G0_2_1_1_2 + 0.000133928571428576*G0_2_1_2_0 + 0.000170454545454551*G0_2_1_2_1 + 0.000754870129870157*G0_2_1_2_2 + 0.000170454545454551*G0_2_2_0_0 + 0.000133928571428576*G0_2_2_0_1 + 0.000754870129870156*G0_2_2_0_2 + 0.000133928571428576*G0_2_2_1_0 + 0.000170454545454551*G0_2_2_1_1 + 0.000754870129870156*G0_2_2_1_2 + 0.000754870129870156*G0_2_2_2_0 + 0.000754870129870156*G0_2_2_2_1 + 0.00400568181818196*G0_2_2_2_2;
    A[75] = A[64] + 0.00377435064935077*G0_0_0_0_0 + 0.00069399350649353*G0_0_0_0_1 + 0.000645292207792229*G0_0_0_0_2 + 0.00069399350649353*G0_0_0_1_0 + 0.000182629870129876*G0_0_0_1_1 + 9.74025974026005e-05*G0_0_0_1_2 + 0.000645292207792229*G0_0_0_2_0 + 9.74025974026005e-05*G0_0_0_2_1 + 0.00069399350649353*G0_0_1_0_0 + 0.000182629870129876*G0_0_1_0_1 + 9.74025974026005e-05*G0_0_1_0_2 + 0.000182629870129876*G0_0_1_1_0 + 4.87012987013004e-05*G0_0_1_1_1 + 9.74025974026005e-05*G0_0_1_2_0 - 9.74025974026007e-05*G0_0_1_2_2 + 0.000645292207792229*G0_0_2_0_0 + 9.74025974026005e-05*G0_0_2_0_1 + 9.74025974026005e-05*G0_0_2_1_0 - 9.74025974026008e-05*G0_0_2_1_2 - 9.74025974026007e-05*G0_0_2_2_1 - 0.00064529220779223*G0_0_2_2_2 + 0.00069399350649353*G0_1_0_0_0 + 0.000182629870129876*G0_1_0_0_1 + 9.74025974026005e-05*G0_1_0_0_2 + 0.000182629870129876*G0_1_0_1_0 + 4.87012987013004e-05*G0_1_0_1_1 + 9.74025974026005e-05*G0_1_0_2_0 - 9.74025974026008e-05*G0_1_0_2_2 + 0.000182629870129876*G0_1_1_0_0 + 4.87012987013004e-05*G0_1_1_0_1 + 4.87012987013004e-05*G0_1_1_1_0 - 4.87012987013004e-05*G0_1_1_1_2 - 4.87012987013005e-05*G0_1_1_2_1 - 0.000182629870129877*G0_1_1_2_2 + 9.74025974026005e-05*G0_1_2_0_0 - 9.74025974026008e-05*G0_1_2_0_2 - 4.87012987013005e-05*G0_1_2_1_1 - 0.000182629870129877*G0_1_2_1_2 - 9.74025974026008e-05*G0_1_2_2_0 - 0.000182629870129877*G0_1_2_2_1 - 0.000693993506493531*G0_1_2_2_2 + 0.000645292207792229*G0_2_0_0_0 + 9.74025974026005e-05*G0_2_0_0_1 + 9.74025974026005e-05*G0_2_0_1_0 - 9.74025974026008e-05*G0_2_0_1_2 - 9.74025974026007e-05*G0_2_0_2_1 - 0.00064529220779223*G0_2_0_2_2 + 9.74025974026005e-05*G0_2_1_0_0 - 9.74025974026007e-05*G0_2_1_0_2 - 4.87012987013004e-05*G0_2_1_1_1 - 0.000182629870129877*G0_2_1_1_2 - 9.74025974026008e-05*G0_2_1_2_0 - 0.000182629870129877*G0_2_1_2_1 - 0.000693993506493531*G0_2_1_2_2 - 9.74025974026008e-05*G0_2_2_0_1 - 0.00064529220779223*G0_2_2_0_2 - 9.74025974026008e-05*G0_2_2_1_0 - 0.000182629870129877*G0_2_2_1_1 - 0.000693993506493531*G0_2_2_1_2 - 0.00064529220779223*G0_2_2_2_0 - 0.000693993506493531*G0_2_2_2_1 - 0.00377435064935078*G0_2_2_2_2;
    A[55] = A[75] + 0.00401785714285728*G0_0_0_0_0 + 0.00158279220779226*G0_0_0_0_2 - 8.52272727272759e-05*G0_0_0_1_1 + 8.52272727272755e-05*G0_0_0_1_2 + 0.00158279220779226*G0_0_0_2_0 + 8.52272727272755e-05*G0_0_0_2_1 + 0.00076704545454548*G0_0_0_2_2 - 8.52272727272758e-05*G0_0_1_0_1 + 8.52272727272755e-05*G0_0_1_0_2 - 8.52272727272758e-05*G0_0_1_1_0 - 7.30519480519506e-05*G0_0_1_1_1 + 8.52272727272755e-05*G0_0_1_2_0 + 7.30519480519504e-05*G0_0_1_2_2 + 0.00158279220779226*G0_0_2_0_0 + 8.52272727272755e-05*G0_0_2_0_1 + 0.00076704545454548*G0_0_2_0_2 + 8.52272727272755e-05*G0_0_2_1_0 + 7.30519480519504e-05*G0_0_2_1_2 + 0.00076704545454548*G0_0_2_2_0 + 7.30519480519504e-05*G0_0_2_2_1 + 0.000584415584415604*G0_0_2_2_2 - 8.52272727272758e-05*G0_1_0_0_1 + 8.52272727272755e-05*G0_1_0_0_2 - 8.52272727272758e-05*G0_1_0_1_0 - 7.30519480519506e-05*G0_1_0_1_1 + 8.52272727272755e-05*G0_1_0_2_0 + 7.30519480519505e-05*G0_1_0_2_2 - 8.52272727272758e-05*G0_1_1_0_0 - 7.30519480519506e-05*G0_1_1_0_1 - 7.30519480519506e-05*G0_1_1_1_0 - 0.000146103896103902*G0_1_1_1_1 - 2.43506493506502e-05*G0_1_1_1_2 - 2.43506493506502e-05*G0_1_1_2_1 + 2.43506493506502e-05*G0_1_1_2_2 + 8.52272727272756e-05*G0_1_2_0_0 + 7.30519480519505e-05*G0_1_2_0_2 - 2.43506493506502e-05*G0_1_2_1_1 + 2.43506493506502e-05*G0_1_2_1_2 + 7.30519480519505e-05*G0_1_2_2_0 + 2.43506493506502e-05*G0_1_2_2_1 + 0.000146103896103901*G0_1_2_2_2 + 0.00158279220779226*G0_2_0_0_0 + 8.52272727272755e-05*G0_2_0_0_1 + 0.00076704545454548*G0_2_0_0_2 + 8.52272727272755e-05*G0_2_0_1_0 + 7.30519480519505e-05*G0_2_0_1_2 + 0.00076704545454548*G0_2_0_2_0 + 7.30519480519505e-05*G0_2_0_2_1 + 0.000584415584415604*G0_2_0_2_2 + 8.52272727272756e-05*G0_2_1_0_0 + 7.30519480519505e-05*G0_2_1_0_2 - 2.43506493506502e-05*G0_2_1_1_1 + 2.43506493506502e-05*G0_2_1_1_2 + 7.30519480519505e-05*G0_2_1_2_0 + 2.43506493506502e-05*G0_2_1_2_1 + 0.000146103896103901*G0_2_1_2_2 + 0.00076704545454548*G0_2_2_0_0 + 7.30519480519505e-05*G0_2_2_0_1 + 0.000584415584415604*G0_2_2_0_2 + 7.30519480519505e-05*G0_2_2_1_0 + 2.43506493506502e-05*G0_2_2_1_1 + 0.000146103896103901*G0_2_2_1_2 + 0.000584415584415604*G0_2_2_2_0 + 0.000146103896103901*G0_2_2_2_1 + 0.00121753246753251*G0_2_2_2_2;
    A[54] = A[45];
    A[71] = A[72] + 3.38203463203475e-05*G0_0_0_0_0 - 5.00541125541143e-05*G0_0_0_0_1 - 5.00541125541143e-05*G0_0_0_1_0 - 6.08766233766255e-05*G0_0_0_1_1 - 6.76406926406949e-06*G0_0_0_1_2 - 6.7640692640695e-06*G0_0_0_2_1 + 6.76406926406947e-06*G0_0_0_2_2 - 5.00541125541143e-05*G0_0_1_0_0 - 6.08766233766255e-05*G0_0_1_0_1 - 6.76406926406949e-06*G0_0_1_0_2 - 6.08766233766255e-05*G0_0_1_1_0 - 0.000116341991341996*G0_0_1_1_1 - 6.7640692640695e-06*G0_0_1_2_0 - 6.7640692640695e-06*G0_0_2_0_1 + 6.76406926406946e-06*G0_0_2_0_2 - 6.7640692640695e-06*G0_0_2_1_0 + 6.76406926406946e-06*G0_0_2_2_0 - 5.00541125541143e-05*G0_1_0_0_0 - 6.08766233766255e-05*G0_1_0_0_1 - 6.76406926406949e-06*G0_1_0_0_2 - 6.08766233766255e-05*G0_1_0_1_0 - 0.000116341991341996*G0_1_0_1_1 - 6.7640692640695e-06*G0_1_0_2_0 - 6.08766233766255e-05*G0_1_1_0_0 - 0.000116341991341996*G0_1_1_0_1 - 0.000116341991341996*G0_1_1_1_0 - 0.000845508658008691*G0_1_1_1_1 - 2.84090909090921e-05*G0_1_1_1_2 - 2.84090909090921e-05*G0_1_1_2_1 - 6.7640692640695e-06*G0_1_2_0_0 - 2.8409090909092e-05*G0_1_2_1_1 - 6.7640692640695e-06*G0_2_0_0_1 + 6.76406926406946e-06*G0_2_0_0_2 - 6.7640692640695e-06*G0_2_0_1_0 + 6.76406926406946e-06*G0_2_0_2_0 - 6.7640692640695e-06*G0_2_1_0_0 - 2.8409090909092e-05*G0_2_1_1_1 + 6.76406926406946e-06*G0_2_2_0_0 + 2.84090909090926e-05*G0_2_2_2_2;
    A[10] = A[1];
    A[35] = A[45] - 0.000182629870129876*G0_0_0_0_0 - 0.000109577922077926*G0_0_0_0_2 - 0.000109577922077926*G0_0_0_2_0 - 7.30519480519508e-05*G0_0_1_1_1 + 7.30519480519506e-05*G0_0_1_2_2 - 0.000109577922077926*G0_0_2_0_0 + 7.30519480519506e-05*G0_0_2_1_2 + 7.30519480519506e-05*G0_0_2_2_1 + 0.000365259740259753*G0_0_2_2_2 - 7.30519480519508e-05*G0_1_0_1_1 + 7.30519480519506e-05*G0_1_0_2_2 - 7.30519480519508e-05*G0_1_1_0_1 - 7.30519480519508e-05*G0_1_1_1_0 - 0.000547889610389631*G0_1_1_1_1 - 0.000109577922077926*G0_1_1_1_2 - 0.000109577922077926*G0_1_1_2_1 + 0.000109577922077926*G0_1_1_2_2 + 7.30519480519506e-05*G0_1_2_0_2 - 0.000109577922077926*G0_1_2_1_1 + 0.000109577922077926*G0_1_2_1_2 + 7.30519480519506e-05*G0_1_2_2_0 + 0.000109577922077926*G0_1_2_2_1 + 0.00054788961038963*G0_1_2_2_2 - 0.000109577922077926*G0_2_0_0_0 + 7.30519480519506e-05*G0_2_0_1_2 + 7.30519480519506e-05*G0_2_0_2_1 + 0.000365259740259753*G0_2_0_2_2 + 7.30519480519506e-05*G0_2_1_0_2 - 0.000109577922077926*G0_2_1_1_1 + 0.000109577922077926*G0_2_1_1_2 + 7.30519480519506e-05*G0_2_1_2_0 + 0.000109577922077926*G0_2_1_2_1 + 0.00054788961038963*G0_2_1_2_2 + 7.30519480519506e-05*G0_2_2_0_1 + 0.000365259740259753*G0_2_2_0_2 + 7.30519480519506e-05*G0_2_2_1_0 + 0.000109577922077926*G0_2_2_1_1 + 0.00054788961038963*G0_2_2_1_2 + 0.000365259740259753*G0_2_2_2_0 + 0.00054788961038963*G0_2_2_2_1 + 0.00273944805194815*G0_2_2_2_2;
    A[27] = A[72];
    A[83] = A[64] + 4.87012987013003e-05*G0_0_0_0_1 - 4.87012987013004e-05*G0_0_0_0_2 + 4.87012987013003e-05*G0_0_0_1_0 + 0.000182629870129876*G0_0_0_1_1 - 4.87012987013004e-05*G0_0_0_2_0 - 0.000182629870129876*G0_0_0_2_2 + 4.87012987013003e-05*G0_0_1_0_0 + 0.000182629870129876*G0_0_1_0_1 + 0.000182629870129876*G0_0_1_1_0 + 0.000693993506493531*G0_0_1_1_1 + 9.74025974026007e-05*G0_0_1_1_2 + 9.74025974026007e-05*G0_0_1_2_1 - 9.74025974026007e-05*G0_0_1_2_2 - 4.87012987013004e-05*G0_0_2_0_0 - 0.000182629870129876*G0_0_2_0_2 + 9.74025974026007e-05*G0_0_2_1_1 - 9.74025974026008e-05*G0_0_2_1_2 - 0.000182629870129876*G0_0_2_2_0 - 9.74025974026007e-05*G0_0_2_2_1 - 0.00069399350649353*G0_0_2_2_2 + 4.87012987013003e-05*G0_1_0_0_0 + 0.000182629870129876*G0_1_0_0_1 + 0.000182629870129876*G0_1_0_1_0 + 0.000693993506493531*G0_1_0_1_1 + 9.74025974026007e-05*G0_1_0_1_2 + 9.74025974026007e-05*G0_1_0_2_1 - 9.74025974026008e-05*G0_1_0_2_2 + 0.000182629870129876*G0_1_1_0_0 + 0.000693993506493531*G0_1_1_0_1 + 9.74025974026007e-05*G0_1_1_0_2 + 0.000693993506493531*G0_1_1_1_0 + 0.00377435064935079*G0_1_1_1_1 + 0.000645292207792231*G0_1_1_1_2 + 9.74025974026007e-05*G0_1_1_2_0 + 0.000645292207792231*G0_1_1_2_1 + 9.74025974026007e-05*G0_1_2_0_1 - 9.74025974026008e-05*G0_1_2_0_2 + 9.74025974026007e-05*G0_1_2_1_0 + 0.000645292207792231*G0_1_2_1_1 - 9.74025974026008e-05*G0_1_2_2_0 - 0.000645292207792231*G0_1_2_2_2 - 4.87012987013004e-05*G0_2_0_0_0 - 0.000182629870129876*G0_2_0_0_2 + 9.74025974026007e-05*G0_2_0_1_1 - 9.74025974026008e-05*G0_2_0_1_2 - 0.000182629870129876*G0_2_0_2_0 - 9.74025974026007e-05*G0_2_0_2_1 - 0.00069399350649353*G0_2_0_2_2 + 9.74025974026007e-05*G0_2_1_0_1 - 9.74025974026007e-05*G0_2_1_0_2 + 9.74025974026007e-05*G0_2_1_1_0 + 0.000645292207792231*G0_2_1_1_1 - 9.74025974026008e-05*G0_2_1_2_0 - 0.000645292207792231*G0_2_1_2_2 - 0.000182629870129876*G0_2_2_0_0 - 9.74025974026008e-05*G0_2_2_0_1 - 0.00069399350649353*G0_2_2_0_2 - 9.74025974026008e-05*G0_2_2_1_0 - 0.00064529220779223*G0_2_2_1_2 - 0.00069399350649353*G0_2_2_2_0 - 0.000645292207792231*G0_2_2_2_1 - 0.00377435064935078*G0_2_2_2_2;
    A[46] = A[64];
    A[61] = A[16];
    A[57] = A[75];
    A[74] = A[73] - 0.000182629870129876*G0_0_0_0_0 - 0.000109577922077926*G0_0_0_0_1 - 0.000109577922077926*G0_0_0_1_0 - 0.000109577922077926*G0_0_1_0_0 + 0.000365259740259754*G0_0_1_1_1 + 7.30519480519506e-05*G0_0_1_1_2 + 7.30519480519506e-05*G0_0_1_2_1 + 7.30519480519506e-05*G0_0_2_1_1 - 7.30519480519509e-05*G0_0_2_2_2 - 0.000109577922077925*G0_1_0_0_0 + 0.000365259740259754*G0_1_0_1_1 + 7.30519480519506e-05*G0_1_0_1_2 + 7.30519480519506e-05*G0_1_0_2_1 + 0.000365259740259754*G0_1_1_0_1 + 7.30519480519506e-05*G0_1_1_0_2 + 0.000365259740259754*G0_1_1_1_0 + 0.00273944805194815*G0_1_1_1_1 + 0.00054788961038963*G0_1_1_1_2 + 7.30519480519506e-05*G0_1_1_2_0 + 0.00054788961038963*G0_1_1_2_1 + 0.000109577922077926*G0_1_1_2_2 + 7.30519480519506e-05*G0_1_2_0_1 + 7.30519480519506e-05*G0_1_2_1_0 + 0.00054788961038963*G0_1_2_1_1 + 0.000109577922077926*G0_1_2_1_2 + 0.000109577922077926*G0_1_2_2_1 - 0.000109577922077926*G0_1_2_2_2 + 7.30519480519506e-05*G0_2_0_1_1 - 7.30519480519509e-05*G0_2_0_2_2 + 7.30519480519506e-05*G0_2_1_0_1 + 7.30519480519506e-05*G0_2_1_1_0 + 0.00054788961038963*G0_2_1_1_1 + 0.000109577922077926*G0_2_1_1_2 + 0.000109577922077926*G0_2_1_2_1 - 0.000109577922077926*G0_2_1_2_2 - 7.30519480519509e-05*G0_2_2_0_2 + 0.000109577922077926*G0_2_2_1_1 - 0.000109577922077926*G0_2_2_1_2 - 7.30519480519509e-05*G0_2_2_2_0 - 0.000109577922077926*G0_2_2_2_1 - 0.000547889610389631*G0_2_2_2_2;
    A[2] = 0.000223214285714293*G0_0_0_0_0 + 9.46969696969731e-06*G0_0_0_0_1 + 2.43506493506501e-05*G0_0_0_0_2 + 9.46969696969731e-06*G0_0_0_1_0 - 1.3528138528139e-06*G0_0_0_1_1 + 2.43506493506501e-05*G0_0_0_2_0 + 8.11688311688339e-06*G0_0_0_2_2 + 9.46969696969731e-06*G0_0_1_0_0 - 1.3528138528139e-06*G0_0_1_0_1 - 1.3528138528139e-06*G0_0_1_1_0 + 4.05844155844171e-06*G0_0_1_1_1 + 2.43506493506501e-05*G0_0_2_0_0 + 8.11688311688339e-06*G0_0_2_0_2 + 8.11688311688339e-06*G0_0_2_2_0 + 2.43506493506502e-05*G0_0_2_2_2 + 9.46969696969731e-06*G0_1_0_0_0 - 1.3528138528139e-06*G0_1_0_0_1 - 1.3528138528139e-06*G0_1_0_1_0 + 4.05844155844171e-06*G0_1_0_1_1 - 1.35281385281389e-06*G0_1_1_0_0 + 4.05844155844171e-06*G0_1_1_0_1 + 4.05844155844171e-06*G0_1_1_1_0 + 4.1937229437231e-05*G0_1_1_1_1 + 4.05844155844171e-06*G0_1_1_1_2 + 4.05844155844171e-06*G0_1_1_2_1 - 1.35281385281389e-06*G0_1_1_2_2 + 4.05844155844171e-06*G0_1_2_1_1 - 1.35281385281389e-06*G0_1_2_1_2 - 1.35281385281389e-06*G0_1_2_2_1 + 9.46969696969733e-06*G0_1_2_2_2 + 2.43506493506501e-05*G0_2_0_0_0 + 8.11688311688339e-06*G0_2_0_0_2 + 8.11688311688339e-06*G0_2_0_2_0 + 2.43506493506502e-05*G0_2_0_2_2 + 4.05844155844172e-06*G0_2_1_1_1 - 1.35281385281389e-06*G0_2_1_1_2 - 1.35281385281389e-06*G0_2_1_2_1 + 9.46969696969733e-06*G0_2_1_2_2 + 8.11688311688339e-06*G0_2_2_0_0 + 2.43506493506502e-05*G0_2_2_0_2 - 1.35281385281389e-06*G0_2_2_1_1 + 9.46969696969733e-06*G0_2_2_1_2 + 2.43506493506502e-05*G0_2_2_2_0 + 9.46969696969733e-06*G0_2_2_2_1 + 0.000223214285714294*G0_2_2_2_2;
    A[48] = A[73] + 0.000365259740259754*G0_0_0_0_0 + 7.30519480519506e-05*G0_0_0_0_2 - 0.000109577922077926*G0_0_0_1_1 + 7.30519480519506e-05*G0_0_0_2_0 - 0.000109577922077926*G0_0_1_0_1 - 0.000109577922077926*G0_0_1_1_0 - 0.000182629870129876*G0_0_1_1_1 + 7.30519480519506e-05*G0_0_2_0_0 - 7.30519480519506e-05*G0_0_2_2_2 - 0.000109577922077926*G0_1_0_0_1 - 0.000109577922077926*G0_1_0_1_0 - 0.000182629870129876*G0_1_0_1_1 - 0.000109577922077926*G0_1_1_0_0 - 0.000182629870129876*G0_1_1_0_1 - 0.000182629870129876*G0_1_1_1_0 + 0.000182629870129877*G0_1_1_1_2 + 0.000182629870129877*G0_1_1_2_1 + 0.000109577922077926*G0_1_1_2_2 + 0.000182629870129877*G0_1_2_1_1 + 0.000109577922077926*G0_1_2_1_2 + 0.000109577922077926*G0_1_2_2_1 + 7.30519480519506e-05*G0_2_0_0_0 - 7.30519480519506e-05*G0_2_0_2_2 + 0.000182629870129877*G0_2_1_1_1 + 0.000109577922077926*G0_2_1_1_2 + 0.000109577922077926*G0_2_1_2_1 - 7.30519480519506e-05*G0_2_2_0_2 + 0.000109577922077926*G0_2_2_1_1 - 7.30519480519505e-05*G0_2_2_2_0 - 0.000365259740259753*G0_2_2_2_2;
    A[30] = A[32] - 2.84090909090923e-05*G0_0_0_0_0 - 6.76406926406945e-06*G0_0_0_1_1 - 6.76406926406945e-06*G0_0_1_0_1 - 6.76406926406945e-06*G0_0_1_1_0 + 6.76406926406951e-06*G0_0_1_1_2 + 6.7640692640695e-06*G0_0_1_2_1 + 6.76406926406951e-06*G0_0_2_1_1 + 2.84090909090919e-05*G0_0_2_2_2 - 6.76406926406945e-06*G0_1_0_0_1 - 6.76406926406945e-06*G0_1_0_1_0 + 6.76406926406951e-06*G0_1_0_1_2 + 6.7640692640695e-06*G0_1_0_2_1 - 6.76406926406945e-06*G0_1_1_0_0 + 6.7640692640695e-06*G0_1_1_0_2 - 3.3820346320347e-05*G0_1_1_1_1 + 5.00541125541144e-05*G0_1_1_1_2 + 6.7640692640695e-06*G0_1_1_2_0 + 5.00541125541145e-05*G0_1_1_2_1 + 6.08766233766256e-05*G0_1_1_2_2 + 6.7640692640695e-06*G0_1_2_0_1 + 6.7640692640695e-06*G0_1_2_1_0 + 5.00541125541145e-05*G0_1_2_1_1 + 6.08766233766256e-05*G0_1_2_1_2 + 6.08766233766256e-05*G0_1_2_2_1 + 0.000116341991341995*G0_1_2_2_2 + 6.76406926406951e-06*G0_2_0_1_1 + 2.84090909090919e-05*G0_2_0_2_2 + 6.7640692640695e-06*G0_2_1_0_1 + 6.7640692640695e-06*G0_2_1_1_0 + 5.00541125541145e-05*G0_2_1_1_1 + 6.08766233766256e-05*G0_2_1_1_2 + 6.08766233766256e-05*G0_2_1_2_1 + 0.000116341991341995*G0_2_1_2_2 + 2.84090909090919e-05*G0_2_2_0_2 + 6.08766233766256e-05*G0_2_2_1_1 + 0.000116341991341995*G0_2_2_1_2 + 2.84090909090919e-05*G0_2_2_2_0 + 0.000116341991341995*G0_2_2_2_1 + 0.000845508658008687*G0_2_2_2_2;
    A[82] = A[30] - 0.00012175324675325*G0_0_0_0_0 - 2.43506493506502e-05*G0_0_0_0_2 + 3.65259740259753e-05*G0_0_0_1_1 - 2.43506493506502e-05*G0_0_0_2_0 + 3.65259740259753e-05*G0_0_1_0_1 + 3.65259740259753e-05*G0_0_1_1_0 + 6.08766233766254e-05*G0_0_1_1_1 - 2.43506493506502e-05*G0_0_2_0_0 + 2.43506493506502e-05*G0_0_2_2_2 + 3.65259740259753e-05*G0_1_0_0_1 + 3.65259740259753e-05*G0_1_0_1_0 + 6.08766233766254e-05*G0_1_0_1_1 + 3.65259740259753e-05*G0_1_1_0_0 + 6.08766233766254e-05*G0_1_1_0_1 + 6.08766233766254e-05*G0_1_1_1_0 - 6.08766233766257e-05*G0_1_1_1_2 - 6.08766233766257e-05*G0_1_1_2_1 - 3.65259740259753e-05*G0_1_1_2_2 - 6.08766233766257e-05*G0_1_2_1_1 - 3.65259740259753e-05*G0_1_2_1_2 - 3.65259740259753e-05*G0_1_2_2_1 - 2.43506493506502e-05*G0_2_0_0_0 + 2.43506493506502e-05*G0_2_0_2_2 - 6.08766233766257e-05*G0_2_1_1_1 - 3.65259740259753e-05*G0_2_1_1_2 - 3.65259740259753e-05*G0_2_1_2_1 + 2.43506493506502e-05*G0_2_2_0_2 - 3.65259740259753e-05*G0_2_2_1_1 + 2.43506493506502e-05*G0_2_2_2_0 + 0.000121753246753251*G0_2_2_2_2;
    A[8] = A[82] - 0.000845508658008686*G0_0_0_0_0 - 0.000116341991341995*G0_0_0_0_1 - 2.84090909090918e-05*G0_0_0_0_2 - 0.000116341991341995*G0_0_0_1_0 - 6.08766233766255e-05*G0_0_0_1_1 - 2.84090909090918e-05*G0_0_0_2_0 - 0.000116341991341995*G0_0_1_0_0 - 6.08766233766255e-05*G0_0_1_0_1 - 6.08766233766255e-05*G0_0_1_1_0 - 5.00541125541142e-05*G0_0_1_1_1 - 6.76406926406947e-06*G0_0_1_1_2 - 6.76406926406947e-06*G0_0_1_2_1 - 2.84090909090918e-05*G0_0_2_0_0 - 6.76406926406947e-06*G0_0_2_1_1 - 0.000116341991341995*G0_1_0_0_0 - 6.08766233766255e-05*G0_1_0_0_1 - 6.08766233766255e-05*G0_1_0_1_0 - 5.00541125541142e-05*G0_1_0_1_1 - 6.76406926406947e-06*G0_1_0_1_2 - 6.76406926406947e-06*G0_1_0_2_1 - 6.08766233766255e-05*G0_1_1_0_0 - 5.00541125541142e-05*G0_1_1_0_1 - 6.76406926406947e-06*G0_1_1_0_2 - 5.00541125541142e-05*G0_1_1_1_0 + 3.3820346320348e-05*G0_1_1_1_1 - 6.76406926406947e-06*G0_1_1_2_0 + 6.76406926406952e-06*G0_1_1_2_2 - 6.76406926406947e-06*G0_1_2_0_1 - 6.76406926406947e-06*G0_1_2_1_0 + 6.76406926406952e-06*G0_1_2_1_2 + 6.76406926406953e-06*G0_1_2_2_1 - 2.84090909090918e-05*G0_2_0_0_0 - 6.76406926406947e-06*G0_2_0_1_1 - 6.76406926406947e-06*G0_2_1_0_1 - 6.76406926406947e-06*G0_2_1_1_0 + 6.76406926406953e-06*G0_2_1_1_2 + 6.76406926406953e-06*G0_2_1_2_1 + 6.76406926406953e-06*G0_2_2_1_1 + 2.84090909090917e-05*G0_2_2_2_2;
    A[28] = A[82];
    A[98] = A[89];
    A[80] = A[8];
    A[14] = A[41];
    A[39] = A[93];
    A[23] = A[32];
    A[87] = A[78];
    A[42] = -A[11] + 1.08225108225112e-05*G0_0_0_0_0 - 9.46969696969728e-06*G0_0_0_0_1 - 2.7056277056278e-06*G0_0_0_0_2 - 9.46969696969727e-06*G0_0_0_1_0 - 2.70562770562771e-06*G0_0_0_1_1 - 6.76406926406949e-06*G0_0_0_1_2 - 2.7056277056278e-06*G0_0_0_2_0 - 6.76406926406948e-06*G0_0_0_2_1 + 4.96031746031765e-06*G0_0_0_2_2 - 9.46969696969727e-06*G0_0_1_0_0 - 2.70562770562771e-06*G0_0_1_0_1 - 6.76406926406948e-06*G0_0_1_0_2 - 2.70562770562771e-06*G0_0_1_1_0 + 0.000116341991341996*G0_0_1_1_1 - 6.76406926406946e-06*G0_0_1_1_2 - 6.76406926406948e-06*G0_0_1_2_0 - 6.76406926406946e-06*G0_0_1_2_1 - 2.7056277056278e-06*G0_0_2_0_0 - 6.76406926406948e-06*G0_0_2_0_1 + 4.96031746031765e-06*G0_0_2_0_2 - 6.76406926406948e-06*G0_0_2_1_0 - 6.76406926406946e-06*G0_0_2_1_1 + 4.96031746031766e-06*G0_0_2_2_0 + 0.000112283549783554*G0_0_2_2_2 - 9.46969696969727e-06*G0_1_0_0_0 - 2.70562770562772e-06*G0_1_0_0_1 - 6.76406926406948e-06*G0_1_0_0_2 - 2.70562770562772e-06*G0_1_0_1_0 + 0.000116341991341996*G0_1_0_1_1 - 6.76406926406946e-06*G0_1_0_1_2 - 6.76406926406948e-06*G0_1_0_2_0 - 6.76406926406946e-06*G0_1_0_2_1 - 2.70562770562772e-06*G0_1_1_0_0 + 0.000116341991341996*G0_1_1_0_1 - 6.76406926406946e-06*G0_1_1_0_2 + 0.000116341991341996*G0_1_1_1_0 + 0.00278679653679664*G0_1_1_1_1 + 9.46969696969727e-05*G0_1_1_1_2 - 6.76406926406946e-06*G0_1_1_2_0 + 9.46969696969728e-05*G0_1_1_2_1 + 6.76406926406952e-06*G0_1_1_2_2 - 6.76406926406948e-06*G0_1_2_0_0 - 6.76406926406947e-06*G0_1_2_0_1 - 6.76406926406946e-06*G0_1_2_1_0 + 9.46969696969727e-05*G0_1_2_1_1 + 6.76406926406952e-06*G0_1_2_1_2 + 6.76406926406952e-06*G0_1_2_2_1 + 0.000209686147186155*G0_1_2_2_2 - 2.7056277056278e-06*G0_2_0_0_0 - 6.76406926406948e-06*G0_2_0_0_1 + 4.96031746031765e-06*G0_2_0_0_2 - 6.76406926406948e-06*G0_2_0_1_0 - 6.76406926406946e-06*G0_2_0_1_1 + 4.96031746031766e-06*G0_2_0_2_0 + 0.000112283549783554*G0_2_0_2_2 - 6.76406926406949e-06*G0_2_1_0_0 - 6.76406926406947e-06*G0_2_1_0_1 - 6.76406926406946e-06*G0_2_1_1_0 + 9.46969696969728e-05*G0_2_1_1_1 + 6.76406926406952e-06*G0_2_1_1_2 + 6.76406926406952e-06*G0_2_1_2_1 + 0.000209686147186155*G0_2_1_2_2 + 4.96031746031766e-06*G0_2_2_0_0 + 0.000112283549783554*G0_2_2_0_2 + 6.76406926406952e-06*G0_2_2_1_1 + 0.000209686147186155*G0_2_2_1_2 + 0.000112283549783554*G0_2_2_2_0 + 0.000209686147186155*G0_2_2_2_1 + 0.00222132034632042*G0_2_2_2_2;
    A[26] = A[42] - 0.000238095238095246*G0_0_0_0_0 - 2.97619047619058e-05*G0_0_0_0_1 - 6.08766233766254e-05*G0_0_0_0_2 - 2.97619047619058e-05*G0_0_0_1_0 - 6.76406926406949e-06*G0_0_0_1_2 - 6.08766233766254e-05*G0_0_0_2_0 - 6.7640692640695e-06*G0_0_0_2_1 - 1.35281385281389e-05*G0_0_0_2_2 - 2.97619047619058e-05*G0_0_1_0_0 - 6.7640692640695e-06*G0_0_1_0_2 + 2.97619047619058e-05*G0_0_1_1_1 + 6.76406926406948e-06*G0_0_1_1_2 - 6.76406926406949e-06*G0_0_1_2_0 + 6.76406926406949e-06*G0_0_1_2_1 - 6.08766233766254e-05*G0_0_2_0_0 - 6.7640692640695e-06*G0_0_2_0_1 - 1.35281385281389e-05*G0_0_2_0_2 - 6.76406926406949e-06*G0_0_2_1_0 + 6.76406926406949e-06*G0_0_2_1_1 - 1.35281385281389e-05*G0_0_2_2_0 + 9.4696969696973e-05*G0_0_2_2_2 - 2.97619047619058e-05*G0_1_0_0_0 - 6.7640692640695e-06*G0_1_0_0_2 + 2.97619047619058e-05*G0_1_0_1_1 + 6.76406926406948e-06*G0_1_0_1_2 - 6.76406926406949e-06*G0_1_0_2_0 + 6.76406926406949e-06*G0_1_0_2_1 + 2.97619047619058e-05*G0_1_1_0_1 + 6.76406926406949e-06*G0_1_1_0_2 + 2.97619047619058e-05*G0_1_1_1_0 + 0.000238095238095247*G0_1_1_1_1 + 6.08766233766255e-05*G0_1_1_1_2 + 6.76406926406948e-06*G0_1_1_2_0 + 6.08766233766255e-05*G0_1_1_2_1 + 1.3528138528139e-05*G0_1_1_2_2 - 6.76406926406949e-06*G0_1_2_0_0 + 6.76406926406949e-06*G0_1_2_0_1 + 6.76406926406948e-06*G0_1_2_1_0 + 6.08766233766255e-05*G0_1_2_1_1 + 1.3528138528139e-05*G0_1_2_1_2 + 1.3528138528139e-05*G0_1_2_2_1 - 9.46969696969729e-05*G0_1_2_2_2 - 6.08766233766254e-05*G0_2_0_0_0 - 6.76406926406949e-06*G0_2_0_0_1 - 1.35281385281389e-05*G0_2_0_0_2 - 6.76406926406949e-06*G0_2_0_1_0 + 6.76406926406949e-06*G0_2_0_1_1 - 1.35281385281389e-05*G0_2_0_2_0 + 9.46969696969731e-05*G0_2_0_2_2 - 6.76406926406949e-06*G0_2_1_0_0 + 6.76406926406949e-06*G0_2_1_0_1 + 6.76406926406948e-06*G0_2_1_1_0 + 6.08766233766255e-05*G0_2_1_1_1 + 1.3528138528139e-05*G0_2_1_1_2 + 1.3528138528139e-05*G0_2_1_2_1 - 9.46969696969729e-05*G0_2_1_2_2 - 1.35281385281389e-05*G0_2_2_0_0 + 9.46969696969731e-05*G0_2_2_0_2 + 1.3528138528139e-05*G0_2_2_1_1 - 9.46969696969729e-05*G0_2_2_1_2 + 9.46969696969731e-05*G0_2_2_2_0 - 9.46969696969729e-05*G0_2_2_2_1;
    A[90] = A[26] + 0.00054112554112556*G0_0_0_0_0 + 1.89393939393946e-05*G0_0_0_0_1 + 4.05844155844169e-05*G0_0_0_0_2 + 1.89393939393946e-05*G0_0_0_1_0 + 5.41125541125559e-06*G0_0_0_1_1 + 4.05844155844167e-06*G0_0_0_1_2 + 4.05844155844169e-05*G0_0_0_2_0 + 4.05844155844167e-06*G0_0_0_2_1 - 4.05844155844176e-06*G0_0_0_2_2 + 1.89393939393946e-05*G0_0_1_0_0 + 5.41125541125561e-06*G0_0_1_0_1 + 4.05844155844167e-06*G0_0_1_0_2 + 5.4112554112556e-06*G0_0_1_1_0 + 7.84632034632062e-05*G0_0_1_1_1 + 3.78787878787892e-05*G0_0_1_1_2 + 4.05844155844166e-06*G0_0_1_2_0 + 3.78787878787892e-05*G0_0_1_2_1 + 3.11147186147196e-05*G0_0_1_2_2 + 4.05844155844169e-05*G0_0_2_0_0 + 4.05844155844167e-06*G0_0_2_0_1 - 4.05844155844174e-06*G0_0_2_0_2 + 4.05844155844167e-06*G0_0_2_1_0 + 3.78787878787892e-05*G0_0_2_1_1 + 3.11147186147196e-05*G0_0_2_1_2 - 4.05844155844175e-06*G0_0_2_2_0 + 3.11147186147196e-05*G0_0_2_2_1 - 0.000140692640692646*G0_0_2_2_2 + 1.89393939393946e-05*G0_1_0_0_0 + 5.4112554112556e-06*G0_1_0_0_1 + 4.05844155844168e-06*G0_1_0_0_2 + 5.41125541125561e-06*G0_1_0_1_0 + 7.84632034632062e-05*G0_1_0_1_1 + 3.78787878787892e-05*G0_1_0_1_2 + 4.05844155844167e-06*G0_1_0_2_0 + 3.78787878787892e-05*G0_1_0_2_1 + 3.11147186147196e-05*G0_1_0_2_2 + 5.4112554112556e-06*G0_1_1_0_0 + 7.84632034632062e-05*G0_1_1_0_1 + 3.78787878787892e-05*G0_1_1_0_2 + 7.84632034632062e-05*G0_1_1_1_0 + 0.000384199134199148*G0_1_1_1_1 + 0.000150162337662343*G0_1_1_1_2 + 3.78787878787892e-05*G0_1_1_2_0 + 0.000150162337662343*G0_1_1_2_1 + 0.00010416666666667*G0_1_1_2_2 + 4.05844155844167e-06*G0_1_2_0_0 + 3.78787878787892e-05*G0_1_2_0_1 + 3.11147186147196e-05*G0_1_2_0_2 + 3.78787878787892e-05*G0_1_2_1_0 + 0.000150162337662343*G0_1_2_1_1 + 0.00010416666666667*G0_1_2_1_2 + 3.11147186147196e-05*G0_1_2_2_0 + 0.00010416666666667*G0_1_2_2_1 + 3.5173160173161e-05*G0_1_2_2_2 + 4.05844155844169e-05*G0_2_0_0_0 + 4.05844155844167e-06*G0_2_0_0_1 - 4.05844155844175e-06*G0_2_0_0_2 + 4.05844155844167e-06*G0_2_0_1_0 + 3.78787878787892e-05*G0_2_0_1_1 + 3.11147186147196e-05*G0_2_0_1_2 - 4.05844155844175e-06*G0_2_0_2_0 + 3.11147186147196e-05*G0_2_0_2_1 - 0.000140692640692646*G0_2_0_2_2 + 4.05844155844167e-06*G0_2_1_0_0 + 3.78787878787892e-05*G0_2_1_0_1 + 3.11147186147196e-05*G0_2_1_0_2 + 3.78787878787892e-05*G0_2_1_1_0 + 0.000150162337662343*G0_2_1_1_1 + 0.00010416666666667*G0_2_1_1_2 + 3.11147186147196e-05*G0_2_1_2_0 + 0.00010416666666667*G0_2_1_2_1 + 3.51731601731611e-05*G0_2_1_2_2 - 4.05844155844176e-06*G0_2_2_0_0 + 3.11147186147196e-05*G0_2_2_0_1 - 0.000140692640692646*G0_2_2_0_2 + 3.11147186147196e-05*G0_2_2_1_0 + 0.00010416666666667*G0_2_2_1_1 + 3.51731601731611e-05*G0_2_2_1_2 - 0.000140692640692646*G0_2_2_2_0 + 3.51731601731611e-05*G0_2_2_2_1 - 0.00182629870129877*G0_2_2_2_2;
    A[92] = -A[90] + 0.000568181818181837*G0_0_0_0_0 + 8.92857142857174e-05*G0_0_0_0_1 + 8.11688311688342e-06*G0_0_0_0_2 + 8.92857142857174e-05*G0_0_0_1_0 + 7.30519480519505e-05*G0_0_0_1_1 + 8.11688311688338e-06*G0_0_0_1_2 + 8.11688311688343e-06*G0_0_0_2_0 + 8.11688311688338e-06*G0_0_0_2_1 - 4.87012987013003e-05*G0_0_0_2_2 + 8.92857142857174e-05*G0_0_1_0_0 + 7.30519480519505e-05*G0_0_1_0_1 + 8.11688311688338e-06*G0_0_1_0_2 + 7.30519480519505e-05*G0_0_1_1_0 + 0.000178571428571435*G0_0_1_1_1 + 4.87012987013004e-05*G0_0_1_1_2 + 8.11688311688338e-06*G0_0_1_2_0 + 4.87012987013004e-05*G0_0_1_2_1 + 8.11688311688343e-06*G0_0_1_2_2 + 8.11688311688341e-06*G0_0_2_0_0 + 8.11688311688337e-06*G0_0_2_0_1 - 4.87012987013003e-05*G0_0_2_0_2 + 8.11688311688337e-06*G0_0_2_1_0 + 4.87012987013004e-05*G0_0_2_1_1 + 8.11688311688344e-06*G0_0_2_1_2 - 4.87012987013003e-05*G0_0_2_2_0 + 8.11688311688343e-06*G0_0_2_2_1 + 8.11688311688367e-06*G0_0_2_2_2 + 8.92857142857174e-05*G0_1_0_0_0 + 7.30519480519505e-05*G0_1_0_0_1 + 8.11688311688339e-06*G0_1_0_0_2 + 7.30519480519505e-05*G0_1_0_1_0 + 0.000178571428571435*G0_1_0_1_1 + 4.87012987013004e-05*G0_1_0_1_2 + 8.11688311688339e-06*G0_1_0_2_0 + 4.87012987013004e-05*G0_1_0_2_1 + 8.11688311688344e-06*G0_1_0_2_2 + 7.30519480519505e-05*G0_1_1_0_0 + 0.000178571428571435*G0_1_1_0_1 + 4.87012987013004e-05*G0_1_1_0_2 + 0.000178571428571435*G0_1_1_1_0 + 0.000649350649350672*G0_1_1_1_1 + 0.000178571428571435*G0_1_1_1_2 + 4.87012987013004e-05*G0_1_1_2_0 + 0.000178571428571435*G0_1_1_2_1 + 7.30519480519506e-05*G0_1_1_2_2 + 8.11688311688338e-06*G0_1_2_0_0 + 4.87012987013004e-05*G0_1_2_0_1 + 8.11688311688343e-06*G0_1_2_0_2 + 4.87012987013004e-05*G0_1_2_1_0 + 0.000178571428571435*G0_1_2_1_1 + 7.30519480519506e-05*G0_1_2_1_2 + 8.11688311688343e-06*G0_1_2_2_0 + 7.30519480519506e-05*G0_1_2_2_1 + 8.92857142857175e-05*G0_1_2_2_2 + 8.11688311688342e-06*G0_2_0_0_0 + 8.11688311688339e-06*G0_2_0_0_1 - 4.87012987013002e-05*G0_2_0_0_2 + 8.11688311688338e-06*G0_2_0_1_0 + 4.87012987013004e-05*G0_2_0_1_1 + 8.11688311688344e-06*G0_2_0_1_2 - 4.87012987013002e-05*G0_2_0_2_0 + 8.11688311688343e-06*G0_2_0_2_1 + 8.11688311688365e-06*G0_2_0_2_2 + 8.11688311688337e-06*G0_2_1_0_0 + 4.87012987013004e-05*G0_2_1_0_1 + 8.11688311688343e-06*G0_2_1_0_2 + 4.87012987013004e-05*G0_2_1_1_0 + 0.000178571428571435*G0_2_1_1_1 + 7.30519480519506e-05*G0_2_1_1_2 + 8.11688311688343e-06*G0_2_1_2_0 + 7.30519480519506e-05*G0_2_1_2_1 + 8.92857142857176e-05*G0_2_1_2_2 - 4.87012987013003e-05*G0_2_2_0_0 + 8.11688311688343e-06*G0_2_2_0_1 + 8.11688311688365e-06*G0_2_2_0_2 + 8.11688311688343e-06*G0_2_2_1_0 + 7.30519480519506e-05*G0_2_2_1_1 + 8.92857142857176e-05*G0_2_2_1_2 + 8.11688311688365e-06*G0_2_2_2_0 + 8.92857142857176e-05*G0_2_2_2_1 + 0.000568181818181839*G0_2_2_2_2;
    A[62] = A[26];
    A[19] = -A[90] + 0.000568181818181838*G0_0_0_0_0 + 8.11688311688344e-06*G0_0_0_0_1 + 8.92857142857173e-05*G0_0_0_0_2 + 8.11688311688343e-06*G0_0_0_1_0 - 4.87012987013003e-05*G0_0_0_1_1 + 8.11688311688339e-06*G0_0_0_1_2 + 8.92857142857173e-05*G0_0_0_2_0 + 8.1168831168834e-06*G0_0_0_2_1 + 7.30519480519505e-05*G0_0_0_2_2 + 8.11688311688343e-06*G0_0_1_0_0 - 4.87012987013003e-05*G0_0_1_0_1 + 8.11688311688339e-06*G0_0_1_0_2 - 4.87012987013003e-05*G0_0_1_1_0 + 8.11688311688363e-06*G0_0_1_1_1 + 8.11688311688345e-06*G0_0_1_1_2 + 8.1168831168834e-06*G0_0_1_2_0 + 8.11688311688344e-06*G0_0_1_2_1 + 4.87012987013004e-05*G0_0_1_2_2 + 8.92857142857173e-05*G0_0_2_0_0 + 8.11688311688339e-06*G0_0_2_0_1 + 7.30519480519505e-05*G0_0_2_0_2 + 8.11688311688339e-06*G0_0_2_1_0 + 8.11688311688344e-06*G0_0_2_1_1 + 4.87012987013004e-05*G0_0_2_1_2 + 7.30519480519505e-05*G0_0_2_2_0 + 4.87012987013004e-05*G0_0_2_2_1 + 0.000178571428571435*G0_0_2_2_2 + 8.11688311688346e-06*G0_1_0_0_0 - 4.87012987013003e-05*G0_1_0_0_1 + 8.1168831168834e-06*G0_1_0_0_2 - 4.87012987013003e-05*G0_1_0_1_0 + 8.11688311688363e-06*G0_1_0_1_1 + 8.11688311688344e-06*G0_1_0_1_2 + 8.1168831168834e-06*G0_1_0_2_0 + 8.11688311688344e-06*G0_1_0_2_1 + 4.87012987013004e-05*G0_1_0_2_2 - 4.87012987013003e-05*G0_1_1_0_0 + 8.11688311688365e-06*G0_1_1_0_1 + 8.11688311688345e-06*G0_1_1_0_2 + 8.11688311688365e-06*G0_1_1_1_0 + 0.00056818181818184*G0_1_1_1_1 + 8.92857142857176e-05*G0_1_1_1_2 + 8.11688311688345e-06*G0_1_1_2_0 + 8.92857142857177e-05*G0_1_1_2_1 + 7.30519480519506e-05*G0_1_1_2_2 + 8.1168831168834e-06*G0_1_2_0_0 + 8.11688311688344e-06*G0_1_2_0_1 + 4.87012987013004e-05*G0_1_2_0_2 + 8.11688311688345e-06*G0_1_2_1_0 + 8.92857142857177e-05*G0_1_2_1_1 + 7.30519480519506e-05*G0_1_2_1_2 + 4.87012987013004e-05*G0_1_2_2_0 + 7.30519480519506e-05*G0_1_2_2_1 + 0.000178571428571435*G0_1_2_2_2 + 8.92857142857173e-05*G0_2_0_0_0 + 8.1168831168834e-06*G0_2_0_0_1 + 7.30519480519505e-05*G0_2_0_0_2 + 8.11688311688339e-06*G0_2_0_1_0 + 8.11688311688344e-06*G0_2_0_1_1 + 4.87012987013004e-05*G0_2_0_1_2 + 7.30519480519505e-05*G0_2_0_2_0 + 4.87012987013004e-05*G0_2_0_2_1 + 0.000178571428571435*G0_2_0_2_2 + 8.11688311688339e-06*G0_2_1_0_0 + 8.11688311688344e-06*G0_2_1_0_1 + 4.87012987013004e-05*G0_2_1_0_2 + 8.11688311688345e-06*G0_2_1_1_0 + 8.92857142857177e-05*G0_2_1_1_1 + 7.30519480519506e-05*G0_2_1_1_2 + 4.87012987013004e-05*G0_2_1_2_0 + 7.30519480519506e-05*G0_2_1_2_1 + 0.000178571428571435*G0_2_1_2_2 + 7.30519480519505e-05*G0_2_2_0_0 + 4.87012987013004e-05*G0_2_2_0_1 + 0.000178571428571435*G0_2_2_0_2 + 4.87012987013004e-05*G0_2_2_1_0 + 7.30519480519506e-05*G0_2_2_1_1 + 0.000178571428571435*G0_2_2_1_2 + 0.000178571428571435*G0_2_2_2_0 + 0.000178571428571435*G0_2_2_2_1 + 0.000649350649350672*G0_2_2_2_2;
    A[96] = A[69];
    A[65] = -A[83] - 0.00213068181818189*G0_0_0_0_0 - 0.000158279220779226*G0_0_0_0_1 - 0.000267857142857152*G0_0_0_0_2 - 0.000158279220779226*G0_0_0_1_0 + 0.000170454545454551*G0_0_0_1_1 - 0.000267857142857152*G0_0_0_2_0 - 0.000158279220779226*G0_0_1_0_0 + 0.000170454545454551*G0_0_1_0_1 + 0.000170454545454551*G0_0_1_1_0 + 0.000754870129870156*G0_0_1_1_1 + 0.000133928571428576*G0_0_1_1_2 + 0.000133928571428576*G0_0_1_2_1 - 0.000267857142857152*G0_0_2_0_0 + 0.000133928571428576*G0_0_2_1_1 - 0.000267857142857153*G0_0_2_2_2 - 0.000158279220779226*G0_1_0_0_0 + 0.000170454545454551*G0_1_0_0_1 + 0.000170454545454551*G0_1_0_1_0 + 0.000754870129870156*G0_1_0_1_1 + 0.000133928571428576*G0_1_0_1_2 + 0.000133928571428576*G0_1_0_2_1 + 0.000170454545454551*G0_1_1_0_0 + 0.000754870129870156*G0_1_1_0_1 + 0.000133928571428576*G0_1_1_0_2 + 0.000754870129870156*G0_1_1_1_0 + 0.00400568181818196*G0_1_1_1_1 + 0.000754870129870157*G0_1_1_1_2 + 0.000133928571428576*G0_1_1_2_0 + 0.000754870129870157*G0_1_1_2_1 + 0.000170454545454551*G0_1_1_2_2 + 0.000133928571428576*G0_1_2_0_1 + 0.000133928571428576*G0_1_2_1_0 + 0.000754870129870157*G0_1_2_1_1 + 0.000170454545454551*G0_1_2_1_2 + 0.000170454545454551*G0_1_2_2_1 - 0.000158279220779227*G0_1_2_2_2 - 0.000267857142857152*G0_2_0_0_0 + 0.000133928571428576*G0_2_0_1_1 - 0.000267857142857153*G0_2_0_2_2 + 0.000133928571428576*G0_2_1_0_1 + 0.000133928571428576*G0_2_1_1_0 + 0.000754870129870157*G0_2_1_1_1 + 0.000170454545454551*G0_2_1_1_2 + 0.000170454545454551*G0_2_1_2_1 - 0.000158279220779227*G0_2_1_2_2 - 0.000267857142857153*G0_2_2_0_2 + 0.000170454545454551*G0_2_2_1_1 - 0.000158279220779227*G0_2_2_1_2 - 0.000267857142857153*G0_2_2_2_0 - 0.000158279220779227*G0_2_2_2_1 - 0.0021306818181819*G0_2_2_2_2;
    A[53] = A[35];
    A[70] = A[7];
    A[68] = A[86];
    A[6] = A[60];
    A[17] = A[71];
    A[9] = A[90];
    A[34] = -A[75] + 0.00400568181818195*G0_0_0_0_0 + 0.000754870129870155*G0_0_0_0_1 + 0.000754870129870155*G0_0_0_0_2 + 0.000754870129870155*G0_0_0_1_0 + 0.000170454545454551*G0_0_0_1_1 + 0.000133928571428576*G0_0_0_1_2 + 0.000754870129870155*G0_0_0_2_0 + 0.000133928571428576*G0_0_0_2_1 + 0.000170454545454551*G0_0_0_2_2 + 0.000754870129870155*G0_0_1_0_0 + 0.000170454545454551*G0_0_1_0_1 + 0.000133928571428576*G0_0_1_0_2 + 0.000170454545454551*G0_0_1_1_0 - 0.000158279220779226*G0_0_1_1_1 + 0.000133928571428576*G0_0_1_2_0 + 0.000754870129870155*G0_0_2_0_0 + 0.000133928571428576*G0_0_2_0_1 + 0.000170454545454551*G0_0_2_0_2 + 0.000133928571428576*G0_0_2_1_0 + 0.000170454545454551*G0_0_2_2_0 - 0.000158279220779226*G0_0_2_2_2 + 0.000754870129870155*G0_1_0_0_0 + 0.000170454545454551*G0_1_0_0_1 + 0.000133928571428576*G0_1_0_0_2 + 0.000170454545454551*G0_1_0_1_0 - 0.000158279220779226*G0_1_0_1_1 + 0.000133928571428576*G0_1_0_2_0 + 0.000170454545454551*G0_1_1_0_0 - 0.000158279220779226*G0_1_1_0_1 - 0.000158279220779226*G0_1_1_1_0 - 0.00213068181818189*G0_1_1_1_1 - 0.000267857142857152*G0_1_1_1_2 - 0.000267857142857152*G0_1_1_2_1 + 0.000133928571428576*G0_1_2_0_0 - 0.000267857142857152*G0_1_2_1_1 - 0.000267857142857152*G0_1_2_2_2 + 0.000754870129870155*G0_2_0_0_0 + 0.000133928571428576*G0_2_0_0_1 + 0.000170454545454551*G0_2_0_0_2 + 0.000133928571428576*G0_2_0_1_0 + 0.000170454545454551*G0_2_0_2_0 - 0.000158279220779226*G0_2_0_2_2 + 0.000133928571428576*G0_2_1_0_0 - 0.000267857142857152*G0_2_1_1_1 - 0.000267857142857152*G0_2_1_2_2 + 0.000170454545454551*G0_2_2_0_0 - 0.000158279220779226*G0_2_2_0_2 - 0.000267857142857152*G0_2_2_1_2 - 0.000158279220779226*G0_2_2_2_0 - 0.000267857142857152*G0_2_2_2_1 - 0.00213068181818189*G0_2_2_2_2;
    A[24] = A[42];
    A[84] = A[48];
    A[59] = A[97] - 0.000365259740259754*G0_0_0_0_1 + 0.000365259740259752*G0_0_0_0_2 - 0.000365259740259754*G0_0_0_1_0 - 0.000219155844155852*G0_0_0_1_1 + 0.000365259740259752*G0_0_0_2_0 + 0.000219155844155851*G0_0_0_2_2 - 0.000365259740259754*G0_0_1_0_0 - 0.000219155844155852*G0_0_1_0_1 - 0.000219155844155852*G0_0_1_1_0 + 0.000365259740259752*G0_0_2_0_0 + 0.000219155844155851*G0_0_2_0_2 + 0.000219155844155851*G0_0_2_2_0 - 0.000365259740259754*G0_1_0_0_0 - 0.000219155844155852*G0_1_0_0_1 - 0.000219155844155852*G0_1_0_1_0 - 0.000219155844155852*G0_1_1_0_0 + 0.000730519480519507*G0_1_1_1_1 + 0.000146103896103901*G0_1_1_1_2 + 0.000146103896103901*G0_1_1_2_1 + 0.000146103896103901*G0_1_2_1_1 - 0.000146103896103901*G0_1_2_2_2 + 0.000365259740259752*G0_2_0_0_0 + 0.000219155844155851*G0_2_0_0_2 + 0.000219155844155851*G0_2_0_2_0 + 0.000146103896103901*G0_2_1_1_1 - 0.000146103896103901*G0_2_1_2_2 + 0.000219155844155851*G0_2_2_0_0 - 0.000146103896103901*G0_2_2_1_2 - 0.000146103896103901*G0_2_2_2_1 - 0.000730519480519506*G0_2_2_2_2;
    A[47] = A[74];
    A[91] = A[19];
    A[66] = A[55] - 0.00657467532467554*G0_0_0_0_0 - 0.000547889610389628*G0_0_0_0_1 - 0.00164366883116889*G0_0_0_0_2 - 0.000547889610389628*G0_0_0_1_0 - 7.30519480519504e-05*G0_0_0_1_1 - 0.000109577922077925*G0_0_0_1_2 - 0.00164366883116889*G0_0_0_2_0 - 0.000109577922077925*G0_0_0_2_1 - 0.000547889610389628*G0_0_1_0_0 - 7.30519480519504e-05*G0_0_1_0_1 - 0.000109577922077926*G0_0_1_0_2 - 7.30519480519504e-05*G0_0_1_1_0 - 0.000109577922077925*G0_0_1_2_0 + 0.000109577922077926*G0_0_1_2_2 - 0.00164366883116889*G0_0_2_0_0 - 0.000109577922077925*G0_0_2_0_1 - 0.000109577922077925*G0_0_2_1_0 + 0.000109577922077926*G0_0_2_1_2 + 0.000109577922077926*G0_0_2_2_1 + 0.00164366883116889*G0_0_2_2_2 - 0.000547889610389628*G0_1_0_0_0 - 7.30519480519504e-05*G0_1_0_0_1 - 0.000109577922077926*G0_1_0_0_2 - 7.30519480519504e-05*G0_1_0_1_0 - 0.000109577922077926*G0_1_0_2_0 + 0.000109577922077926*G0_1_0_2_2 - 7.30519480519504e-05*G0_1_1_0_0 + 7.30519480519506e-05*G0_1_1_2_2 - 0.000109577922077926*G0_1_2_0_0 + 0.000109577922077926*G0_1_2_0_2 + 7.30519480519506e-05*G0_1_2_1_2 + 0.000109577922077926*G0_1_2_2_0 + 7.30519480519506e-05*G0_1_2_2_1 + 0.00054788961038963*G0_1_2_2_2 - 0.00164366883116889*G0_2_0_0_0 - 0.000109577922077925*G0_2_0_0_1 - 0.000109577922077925*G0_2_0_1_0 + 0.000109577922077926*G0_2_0_1_2 + 0.000109577922077926*G0_2_0_2_1 + 0.00164366883116889*G0_2_0_2_2 - 0.000109577922077926*G0_2_1_0_0 + 0.000109577922077926*G0_2_1_0_2 + 7.30519480519506e-05*G0_2_1_1_2 + 0.000109577922077926*G0_2_1_2_0 + 7.30519480519506e-05*G0_2_1_2_1 + 0.00054788961038963*G0_2_1_2_2 + 0.000109577922077926*G0_2_2_0_1 + 0.00164366883116889*G0_2_2_0_2 + 0.000109577922077926*G0_2_2_1_0 + 7.30519480519506e-05*G0_2_2_1_1 + 0.00054788961038963*G0_2_2_1_2 + 0.00164366883116889*G0_2_2_2_0 + 0.00054788961038963*G0_2_2_2_1 + 0.00657467532467555*G0_2_2_2_2;
    A[56] = A[65];
    A[77] = A[55] + 0.00158279220779226*G0_0_0_0_1 - 0.00158279220779226*G0_0_0_0_2 + 0.00158279220779226*G0_0_0_1_0 + 0.000852272727272758*G0_0_0_1_1 - 0.00158279220779226*G0_0_0_2_0 - 0.000852272727272755*G0_0_0_2_2 + 0.00158279220779226*G0_0_1_0_0 + 0.000852272727272758*G0_0_1_0_1 + 0.000852272727272758*G0_0_1_1_0 + 0.000657467532467556*G0_0_1_1_1 + 7.30519480519506e-05*G0_0_1_1_2 + 7.30519480519506e-05*G0_0_1_2_1 - 7.30519480519504e-05*G0_0_1_2_2 - 0.00158279220779226*G0_0_2_0_0 - 0.000852272727272755*G0_0_2_0_2 + 7.30519480519506e-05*G0_0_2_1_1 - 7.30519480519504e-05*G0_0_2_1_2 - 0.000852272727272755*G0_0_2_2_0 - 7.30519480519504e-05*G0_0_2_2_1 - 0.000657467532467554*G0_0_2_2_2 + 0.00158279220779226*G0_1_0_0_0 + 0.000852272727272758*G0_1_0_0_1 + 0.000852272727272758*G0_1_0_1_0 + 0.000657467532467556*G0_1_0_1_1 + 7.30519480519506e-05*G0_1_0_1_2 + 7.30519480519506e-05*G0_1_0_2_1 - 7.30519480519504e-05*G0_1_0_2_2 + 0.000852272727272758*G0_1_1_0_0 + 0.000657467532467556*G0_1_1_0_1 + 7.30519480519506e-05*G0_1_1_0_2 + 0.000657467532467556*G0_1_1_1_0 + 0.00136363636363641*G0_1_1_1_1 + 0.000170454545454551*G0_1_1_1_2 + 7.30519480519506e-05*G0_1_1_2_0 + 0.000170454545454552*G0_1_1_2_1 + 7.30519480519506e-05*G0_1_2_0_1 - 7.30519480519504e-05*G0_1_2_0_2 + 7.30519480519506e-05*G0_1_2_1_0 + 0.000170454545454551*G0_1_2_1_1 - 7.30519480519504e-05*G0_1_2_2_0 - 0.000170454545454551*G0_1_2_2_2 - 0.00158279220779226*G0_2_0_0_0 - 0.000852272727272755*G0_2_0_0_2 + 7.30519480519506e-05*G0_2_0_1_1 - 7.30519480519504e-05*G0_2_0_1_2 - 0.000852272727272755*G0_2_0_2_0 - 7.30519480519504e-05*G0_2_0_2_1 - 0.000657467532467554*G0_2_0_2_2 + 7.30519480519506e-05*G0_2_1_0_1 - 7.30519480519504e-05*G0_2_1_0_2 + 7.30519480519506e-05*G0_2_1_1_0 + 0.000170454545454552*G0_2_1_1_1 - 7.30519480519504e-05*G0_2_1_2_0 - 0.000170454545454551*G0_2_1_2_2 - 0.000852272727272755*G0_2_2_0_0 - 7.30519480519504e-05*G0_2_2_0_1 - 0.000657467532467554*G0_2_2_0_2 - 7.30519480519504e-05*G0_2_2_1_0 - 0.000170454545454551*G0_2_2_1_2 - 0.000657467532467554*G0_2_2_2_0 - 0.000170454545454551*G0_2_2_2_1 - 0.00136363636363641*G0_2_2_2_2;
    A[3] = A[30];
    A[12] = A[21];
    A[49] = A[94];
    A[33] = A[55] - 0.00793831168831195*G0_0_0_0_0 - 0.00071834415584418*G0_0_0_0_1 - 0.00230113636363644*G0_0_0_0_2 - 0.00071834415584418*G0_0_0_1_0 - 0.000182629870129876*G0_0_0_1_2 - 0.00230113636363644*G0_0_0_2_0 - 0.000182629870129876*G0_0_0_2_1 - 0.000925324675324705*G0_0_0_2_2 - 0.00071834415584418*G0_0_1_0_0 - 0.000182629870129876*G0_0_1_0_2 + 0.000718344155844181*G0_0_1_1_1 + 0.000182629870129876*G0_0_1_1_2 - 0.000182629870129876*G0_0_1_2_0 + 0.000182629870129876*G0_0_1_2_1 - 0.00230113636363644*G0_0_2_0_0 - 0.000182629870129876*G0_0_2_0_1 - 0.000925324675324705*G0_0_2_0_2 - 0.000182629870129876*G0_0_2_1_0 + 0.000182629870129876*G0_0_2_1_1 - 0.000925324675324705*G0_0_2_2_0 - 0.000487012987013003*G0_0_2_2_2 - 0.00071834415584418*G0_1_0_0_0 - 0.000182629870129876*G0_1_0_0_2 + 0.000718344155844181*G0_1_0_1_1 + 0.000182629870129876*G0_1_0_1_2 - 0.000182629870129876*G0_1_0_2_0 + 0.000182629870129876*G0_1_0_2_1 + 0.000718344155844181*G0_1_1_0_1 + 0.000182629870129876*G0_1_1_0_2 + 0.000718344155844181*G0_1_1_1_0 + 0.00793831168831197*G0_1_1_1_1 + 0.00230113636363644*G0_1_1_1_2 + 0.000182629870129876*G0_1_1_2_0 + 0.00230113636363644*G0_1_1_2_1 + 0.000925324675324708*G0_1_1_2_2 - 0.000182629870129876*G0_1_2_0_0 + 0.000182629870129876*G0_1_2_0_1 + 0.000182629870129876*G0_1_2_1_0 + 0.00230113636363644*G0_1_2_1_1 + 0.000925324675324708*G0_1_2_1_2 + 0.000925324675324708*G0_1_2_2_1 + 0.000487012987013004*G0_1_2_2_2 - 0.00230113636363644*G0_2_0_0_0 - 0.000182629870129876*G0_2_0_0_1 - 0.000925324675324706*G0_2_0_0_2 - 0.000182629870129876*G0_2_0_1_0 + 0.000182629870129876*G0_2_0_1_1 - 0.000925324675324705*G0_2_0_2_0 - 0.000487012987013003*G0_2_0_2_2 - 0.000182629870129876*G0_2_1_0_0 + 0.000182629870129876*G0_2_1_0_1 + 0.000182629870129876*G0_2_1_1_0 + 0.00230113636363644*G0_2_1_1_1 + 0.000925324675324708*G0_2_1_1_2 + 0.000925324675324708*G0_2_1_2_1 + 0.000487012987013004*G0_2_1_2_2 - 0.000925324675324706*G0_2_2_0_0 - 0.000487012987013003*G0_2_2_0_2 + 0.000925324675324708*G0_2_2_1_1 + 0.000487012987013004*G0_2_2_1_2 - 0.000487012987013003*G0_2_2_2_0 + 0.000487012987013004*G0_2_2_2_1;
    A[29] = A[92];
    A[44] = A[33] - 7.30519480519505e-05*G0_0_0_1_1 + 7.30519480519505e-05*G0_0_0_2_2 - 7.30519480519505e-05*G0_0_1_0_1 - 7.30519480519505e-05*G0_0_1_1_0 - 0.000547889610389629*G0_0_1_1_1 - 0.000109577922077926*G0_0_1_1_2 - 0.000109577922077926*G0_0_1_2_1 + 0.000109577922077926*G0_0_1_2_2 + 7.30519480519505e-05*G0_0_2_0_2 - 0.000109577922077926*G0_0_2_1_1 + 0.000109577922077926*G0_0_2_1_2 + 7.30519480519505e-05*G0_0_2_2_0 + 0.000109577922077926*G0_0_2_2_1 + 0.000547889610389629*G0_0_2_2_2 - 7.30519480519505e-05*G0_1_0_0_1 - 7.30519480519505e-05*G0_1_0_1_0 - 0.000547889610389629*G0_1_0_1_1 - 0.000109577922077926*G0_1_0_1_2 - 0.000109577922077926*G0_1_0_2_1 + 0.000109577922077926*G0_1_0_2_2 - 7.30519480519505e-05*G0_1_1_0_0 - 0.00054788961038963*G0_1_1_0_1 - 0.000109577922077926*G0_1_1_0_2 - 0.000547889610389629*G0_1_1_1_0 - 0.00657467532467556*G0_1_1_1_1 - 0.00164366883116889*G0_1_1_1_2 - 0.000109577922077926*G0_1_1_2_0 - 0.00164366883116889*G0_1_1_2_1 - 0.000109577922077926*G0_1_2_0_1 + 0.000109577922077926*G0_1_2_0_2 - 0.000109577922077926*G0_1_2_1_0 - 0.00164366883116889*G0_1_2_1_1 + 0.000109577922077926*G0_1_2_2_0 + 0.00164366883116889*G0_1_2_2_2 + 7.30519480519505e-05*G0_2_0_0_2 - 0.000109577922077926*G0_2_0_1_1 + 0.000109577922077926*G0_2_0_1_2 + 7.30519480519505e-05*G0_2_0_2_0 + 0.000109577922077926*G0_2_0_2_1 + 0.000547889610389629*G0_2_0_2_2 - 0.000109577922077926*G0_2_1_0_1 + 0.000109577922077926*G0_2_1_0_2 - 0.000109577922077926*G0_2_1_1_0 - 0.00164366883116889*G0_2_1_1_1 + 0.000109577922077926*G0_2_1_2_0 + 0.00164366883116889*G0_2_1_2_2 + 7.30519480519505e-05*G0_2_2_0_0 + 0.000109577922077926*G0_2_2_0_1 + 0.000547889610389629*G0_2_2_0_2 + 0.000109577922077926*G0_2_2_1_0 + 0.00164366883116889*G0_2_2_1_2 + 0.000547889610389629*G0_2_2_2_0 + 0.00164366883116889*G0_2_2_2_1 + 0.00657467532467555*G0_2_2_2_2;
    A[63] = A[36];
    A[0] = -A[26] + 0.00278679653679663*G0_0_0_0_0 + 0.000116341991341996*G0_0_0_0_1 + 9.46969696969726e-05*G0_0_0_0_2 + 0.000116341991341996*G0_0_0_1_0 - 2.70562770562775e-06*G0_0_0_1_1 - 6.76406926406949e-06*G0_0_0_1_2 + 9.46969696969726e-05*G0_0_0_2_0 - 6.76406926406949e-06*G0_0_0_2_1 + 6.76406926406955e-06*G0_0_0_2_2 + 0.000116341991341996*G0_0_1_0_0 - 2.70562770562776e-06*G0_0_1_0_1 - 6.76406926406949e-06*G0_0_1_0_2 - 2.70562770562776e-06*G0_0_1_1_0 - 9.46969696969727e-06*G0_0_1_1_1 - 6.76406926406949e-06*G0_0_1_1_2 - 6.76406926406948e-06*G0_0_1_2_0 - 6.76406926406948e-06*G0_0_1_2_1 + 9.46969696969726e-05*G0_0_2_0_0 - 6.76406926406949e-06*G0_0_2_0_1 + 6.76406926406954e-06*G0_0_2_0_2 - 6.76406926406948e-06*G0_0_2_1_0 - 6.76406926406948e-06*G0_0_2_1_1 + 6.76406926406955e-06*G0_0_2_2_0 + 0.000209686147186155*G0_0_2_2_2 + 0.000116341991341996*G0_1_0_0_0 - 2.70562770562776e-06*G0_1_0_0_1 - 6.76406926406949e-06*G0_1_0_0_2 - 2.70562770562775e-06*G0_1_0_1_0 - 9.46969696969727e-06*G0_1_0_1_1 - 6.76406926406949e-06*G0_1_0_1_2 - 6.76406926406948e-06*G0_1_0_2_0 - 6.76406926406948e-06*G0_1_0_2_1 - 2.70562770562776e-06*G0_1_1_0_0 - 9.46969696969727e-06*G0_1_1_0_1 - 6.76406926406948e-06*G0_1_1_0_2 - 9.46969696969727e-06*G0_1_1_1_0 + 1.08225108225113e-05*G0_1_1_1_1 - 2.70562770562778e-06*G0_1_1_1_2 - 6.76406926406948e-06*G0_1_1_2_0 - 2.70562770562779e-06*G0_1_1_2_1 + 4.96031746031768e-06*G0_1_1_2_2 - 6.76406926406948e-06*G0_1_2_0_0 - 6.76406926406948e-06*G0_1_2_0_1 - 6.76406926406948e-06*G0_1_2_1_0 - 2.70562770562778e-06*G0_1_2_1_1 + 4.96031746031768e-06*G0_1_2_1_2 + 4.96031746031768e-06*G0_1_2_2_1 + 0.000112283549783554*G0_1_2_2_2 + 9.46969696969726e-05*G0_2_0_0_0 - 6.76406926406948e-06*G0_2_0_0_1 + 6.76406926406955e-06*G0_2_0_0_2 - 6.76406926406948e-06*G0_2_0_1_0 - 6.76406926406948e-06*G0_2_0_1_1 + 6.76406926406955e-06*G0_2_0_2_0 + 0.000209686147186155*G0_2_0_2_2 - 6.76406926406949e-06*G0_2_1_0_0 - 6.76406926406948e-06*G0_2_1_0_1 - 6.76406926406948e-06*G0_2_1_1_0 - 2.70562770562778e-06*G0_2_1_1_1 + 4.96031746031768e-06*G0_2_1_1_2 + 4.96031746031768e-06*G0_2_1_2_1 + 0.000112283549783554*G0_2_1_2_2 + 6.76406926406954e-06*G0_2_2_0_0 + 0.000209686147186155*G0_2_2_0_2 + 4.96031746031768e-06*G0_2_2_1_1 + 0.000112283549783554*G0_2_2_1_2 + 0.000209686147186155*G0_2_2_2_0 + 0.000112283549783554*G0_2_2_2_1 + 0.00222132034632042*G0_2_2_2_2;
    A[81] = -A[0] + 0.00278679653679663*G0_0_0_0_0 + 9.46969696969732e-05*G0_0_0_0_1 + 0.000116341991341995*G0_0_0_0_2 + 9.46969696969732e-05*G0_0_0_1_0 + 6.76406926406958e-06*G0_0_0_1_1 - 6.76406926406948e-06*G0_0_0_1_2 + 0.000116341991341995*G0_0_0_2_0 - 6.76406926406948e-06*G0_0_0_2_1 - 2.7056277056278e-06*G0_0_0_2_2 + 9.46969696969732e-05*G0_0_1_0_0 + 6.7640692640696e-06*G0_0_1_0_1 - 6.76406926406948e-06*G0_0_1_0_2 + 6.76406926406959e-06*G0_0_1_1_0 + 0.000209686147186155*G0_0_1_1_1 - 6.76406926406948e-06*G0_0_1_2_0 - 6.76406926406948e-06*G0_0_1_2_2 + 0.000116341991341995*G0_0_2_0_0 - 6.76406926406948e-06*G0_0_2_0_1 - 2.7056277056278e-06*G0_0_2_0_2 - 6.76406926406948e-06*G0_0_2_1_0 - 6.76406926406948e-06*G0_0_2_1_2 - 2.70562770562781e-06*G0_0_2_2_0 - 6.76406926406948e-06*G0_0_2_2_1 - 9.46969696969726e-06*G0_0_2_2_2 + 9.46969696969732e-05*G0_1_0_0_0 + 6.76406926406958e-06*G0_1_0_0_1 - 6.76406926406948e-06*G0_1_0_0_2 + 6.76406926406958e-06*G0_1_0_1_0 + 0.000209686147186155*G0_1_0_1_1 - 6.76406926406948e-06*G0_1_0_2_0 - 6.76406926406948e-06*G0_1_0_2_2 + 6.76406926406958e-06*G0_1_1_0_0 + 0.000209686147186155*G0_1_1_0_1 + 0.000209686147186155*G0_1_1_1_0 + 0.00222132034632043*G0_1_1_1_1 + 0.000112283549783554*G0_1_1_1_2 + 0.000112283549783554*G0_1_1_2_1 + 4.9603174603177e-06*G0_1_1_2_2 - 6.76406926406948e-06*G0_1_2_0_0 - 6.76406926406948e-06*G0_1_2_0_2 + 0.000112283549783554*G0_1_2_1_1 + 4.9603174603177e-06*G0_1_2_1_2 - 6.76406926406948e-06*G0_1_2_2_0 + 4.9603174603177e-06*G0_1_2_2_1 - 2.70562770562776e-06*G0_1_2_2_2 + 0.000116341991341995*G0_2_0_0_0 - 6.76406926406948e-06*G0_2_0_0_1 - 2.7056277056278e-06*G0_2_0_0_2 - 6.76406926406948e-06*G0_2_0_1_0 - 6.76406926406948e-06*G0_2_0_1_2 - 2.70562770562781e-06*G0_2_0_2_0 - 6.76406926406948e-06*G0_2_0_2_1 - 9.46969696969726e-06*G0_2_0_2_2 - 6.76406926406948e-06*G0_2_1_0_0 - 6.76406926406948e-06*G0_2_1_0_2 + 0.000112283549783554*G0_2_1_1_1 + 4.9603174603177e-06*G0_2_1_1_2 - 6.76406926406948e-06*G0_2_1_2_0 + 4.9603174603177e-06*G0_2_1_2_1 - 2.70562770562776e-06*G0_2_1_2_2 - 2.70562770562781e-06*G0_2_2_0_0 - 6.76406926406948e-06*G0_2_2_0_1 - 9.46969696969726e-06*G0_2_2_0_2 - 6.76406926406948e-06*G0_2_2_1_0 + 4.9603174603177e-06*G0_2_2_1_1 - 2.70562770562776e-06*G0_2_2_1_2 - 9.46969696969727e-06*G0_2_2_2_0 - 2.70562770562777e-06*G0_2_2_2_1 + 1.08225108225113e-05*G0_2_2_2_2;
    A[31] = A[81] + 0.000238095238095246*G0_0_0_0_0 + 6.08766233766254e-05*G0_0_0_0_1 + 2.97619047619057e-05*G0_0_0_0_2 + 6.08766233766254e-05*G0_0_0_1_0 + 1.3528138528139e-05*G0_0_0_1_1 + 6.7640692640695e-06*G0_0_0_1_2 + 2.97619047619057e-05*G0_0_0_2_0 + 6.7640692640695e-06*G0_0_0_2_1 + 6.08766233766254e-05*G0_0_1_0_0 + 1.3528138528139e-05*G0_0_1_0_1 + 6.7640692640695e-06*G0_0_1_0_2 + 1.3528138528139e-05*G0_0_1_1_0 - 9.46969696969732e-05*G0_0_1_1_1 + 6.7640692640695e-06*G0_0_1_2_0 - 6.7640692640695e-06*G0_0_1_2_2 + 2.97619047619057e-05*G0_0_2_0_0 + 6.7640692640695e-06*G0_0_2_0_1 + 6.7640692640695e-06*G0_0_2_1_0 - 6.7640692640695e-06*G0_0_2_1_2 - 6.76406926406949e-06*G0_0_2_2_1 - 2.97619047619058e-05*G0_0_2_2_2 + 6.08766233766254e-05*G0_1_0_0_0 + 1.3528138528139e-05*G0_1_0_0_1 + 6.7640692640695e-06*G0_1_0_0_2 + 1.3528138528139e-05*G0_1_0_1_0 - 9.46969696969732e-05*G0_1_0_1_1 + 6.7640692640695e-06*G0_1_0_2_0 - 6.7640692640695e-06*G0_1_0_2_2 + 1.3528138528139e-05*G0_1_1_0_0 - 9.46969696969732e-05*G0_1_1_0_1 - 9.46969696969733e-05*G0_1_1_1_0 + 9.46969696969727e-05*G0_1_1_1_2 + 9.46969696969727e-05*G0_1_1_2_1 - 1.3528138528139e-05*G0_1_1_2_2 + 6.7640692640695e-06*G0_1_2_0_0 - 6.7640692640695e-06*G0_1_2_0_2 + 9.46969696969727e-05*G0_1_2_1_1 - 1.3528138528139e-05*G0_1_2_1_2 - 6.76406926406949e-06*G0_1_2_2_0 - 1.3528138528139e-05*G0_1_2_2_1 - 6.08766233766255e-05*G0_1_2_2_2 + 2.97619047619057e-05*G0_2_0_0_0 + 6.7640692640695e-06*G0_2_0_0_1 + 6.7640692640695e-06*G0_2_0_1_0 - 6.7640692640695e-06*G0_2_0_1_2 - 6.76406926406949e-06*G0_2_0_2_1 - 2.97619047619058e-05*G0_2_0_2_2 + 6.7640692640695e-06*G0_2_1_0_0 - 6.7640692640695e-06*G0_2_1_0_2 + 9.46969696969727e-05*G0_2_1_1_1 - 1.3528138528139e-05*G0_2_1_1_2 - 6.7640692640695e-06*G0_2_1_2_0 - 1.3528138528139e-05*G0_2_1_2_1 - 6.08766233766255e-05*G0_2_1_2_2 - 6.76406926406949e-06*G0_2_2_0_1 - 2.97619047619058e-05*G0_2_2_0_2 - 6.76406926406949e-06*G0_2_2_1_0 - 1.3528138528139e-05*G0_2_2_1_1 - 6.08766233766255e-05*G0_2_2_1_2 - 2.97619047619058e-05*G0_2_2_2_0 - 6.08766233766255e-05*G0_2_2_2_1 - 0.000238095238095246*G0_2_2_2_2;
    A[22] = -A[31] + 1.08225108225112e-05*G0_0_0_0_0 - 2.7056277056278e-06*G0_0_0_0_1 - 9.46969696969729e-06*G0_0_0_0_2 - 2.7056277056278e-06*G0_0_0_1_0 + 4.96031746031768e-06*G0_0_0_1_1 - 6.76406926406948e-06*G0_0_0_1_2 - 9.46969696969729e-06*G0_0_0_2_0 - 6.76406926406948e-06*G0_0_0_2_1 - 2.70562770562778e-06*G0_0_0_2_2 - 2.7056277056278e-06*G0_0_1_0_0 + 4.96031746031768e-06*G0_0_1_0_1 - 6.76406926406948e-06*G0_0_1_0_2 + 4.96031746031769e-06*G0_0_1_1_0 + 0.000112283549783554*G0_0_1_1_1 - 6.76406926406948e-06*G0_0_1_2_0 - 6.76406926406947e-06*G0_0_1_2_2 - 9.4696969696973e-06*G0_0_2_0_0 - 6.76406926406948e-06*G0_0_2_0_1 - 2.70562770562779e-06*G0_0_2_0_2 - 6.76406926406948e-06*G0_0_2_1_0 - 6.76406926406947e-06*G0_0_2_1_2 - 2.70562770562779e-06*G0_0_2_2_0 - 6.76406926406946e-06*G0_0_2_2_1 + 0.000116341991341995*G0_0_2_2_2 - 2.7056277056278e-06*G0_1_0_0_0 + 4.96031746031768e-06*G0_1_0_0_1 - 6.76406926406948e-06*G0_1_0_0_2 + 4.96031746031769e-06*G0_1_0_1_0 + 0.000112283549783554*G0_1_0_1_1 - 6.76406926406948e-06*G0_1_0_2_0 - 6.76406926406947e-06*G0_1_0_2_2 + 4.96031746031769e-06*G0_1_1_0_0 + 0.000112283549783554*G0_1_1_0_1 + 0.000112283549783554*G0_1_1_1_0 + 0.00222132034632042*G0_1_1_1_1 + 0.000209686147186155*G0_1_1_1_2 + 0.000209686147186155*G0_1_1_2_1 + 6.76406926406953e-06*G0_1_1_2_2 - 6.76406926406948e-06*G0_1_2_0_0 - 6.76406926406947e-06*G0_1_2_0_2 + 0.000209686147186155*G0_1_2_1_1 + 6.76406926406954e-06*G0_1_2_1_2 - 6.76406926406947e-06*G0_1_2_2_0 + 6.76406926406952e-06*G0_1_2_2_1 + 9.46969696969731e-05*G0_1_2_2_2 - 9.46969696969729e-06*G0_2_0_0_0 - 6.76406926406948e-06*G0_2_0_0_1 - 2.70562770562778e-06*G0_2_0_0_2 - 6.76406926406948e-06*G0_2_0_1_0 - 6.76406926406947e-06*G0_2_0_1_2 - 2.70562770562779e-06*G0_2_0_2_0 - 6.76406926406947e-06*G0_2_0_2_1 + 0.000116341991341995*G0_2_0_2_2 - 6.76406926406948e-06*G0_2_1_0_0 - 6.76406926406947e-06*G0_2_1_0_2 + 0.000209686147186155*G0_2_1_1_1 + 6.76406926406954e-06*G0_2_1_1_2 - 6.76406926406947e-06*G0_2_1_2_0 + 6.76406926406953e-06*G0_2_1_2_1 + 9.4696969696973e-05*G0_2_1_2_2 - 2.70562770562778e-06*G0_2_2_0_0 - 6.76406926406947e-06*G0_2_2_0_1 + 0.000116341991341995*G0_2_2_0_2 - 6.76406926406946e-06*G0_2_2_1_0 + 6.76406926406952e-06*G0_2_2_1_1 + 9.46969696969731e-05*G0_2_2_1_2 + 0.000116341991341995*G0_2_2_2_0 + 9.4696969696973e-05*G0_2_2_2_1 + 0.00278679653679663*G0_2_2_2_2;
    A[5] = -A[22] + 0.00222132034632042*G0_0_0_0_0 + 0.000112283549783554*G0_0_0_0_1 + 0.000209686147186154*G0_0_0_0_2 + 0.000112283549783554*G0_0_0_1_0 + 4.96031746031763e-06*G0_0_0_1_1 + 0.000209686147186154*G0_0_0_2_0 + 6.76406926406949e-06*G0_0_0_2_2 + 0.000112283549783554*G0_0_1_0_0 + 4.96031746031763e-06*G0_0_1_0_1 + 4.96031746031763e-06*G0_0_1_1_0 - 2.70562770562781e-06*G0_0_1_1_1 - 6.7640692640695e-06*G0_0_1_1_2 - 6.7640692640695e-06*G0_0_1_2_1 - 6.76406926406948e-06*G0_0_1_2_2 + 0.000209686147186154*G0_0_2_0_0 + 6.7640692640695e-06*G0_0_2_0_2 - 6.7640692640695e-06*G0_0_2_1_1 - 6.76406926406948e-06*G0_0_2_1_2 + 6.76406926406949e-06*G0_0_2_2_0 - 6.76406926406948e-06*G0_0_2_2_1 + 9.4696969696973e-05*G0_0_2_2_2 + 0.000112283549783554*G0_1_0_0_0 + 4.96031746031763e-06*G0_1_0_0_1 + 4.96031746031763e-06*G0_1_0_1_0 - 2.70562770562781e-06*G0_1_0_1_1 - 6.7640692640695e-06*G0_1_0_1_2 - 6.7640692640695e-06*G0_1_0_2_1 - 6.76406926406948e-06*G0_1_0_2_2 + 4.96031746031763e-06*G0_1_1_0_0 - 2.70562770562781e-06*G0_1_1_0_1 - 6.7640692640695e-06*G0_1_1_0_2 - 2.70562770562781e-06*G0_1_1_1_0 + 1.08225108225111e-05*G0_1_1_1_1 - 9.46969696969732e-06*G0_1_1_1_2 - 6.7640692640695e-06*G0_1_1_2_0 - 9.46969696969732e-06*G0_1_1_2_1 - 2.7056277056278e-06*G0_1_1_2_2 - 6.7640692640695e-06*G0_1_2_0_1 - 6.76406926406948e-06*G0_1_2_0_2 - 6.7640692640695e-06*G0_1_2_1_0 - 9.46969696969732e-06*G0_1_2_1_1 - 2.7056277056278e-06*G0_1_2_1_2 - 6.76406926406948e-06*G0_1_2_2_0 - 2.7056277056278e-06*G0_1_2_2_1 + 0.000116341991341995*G0_1_2_2_2 + 0.000209686147186154*G0_2_0_0_0 + 6.7640692640695e-06*G0_2_0_0_2 - 6.7640692640695e-06*G0_2_0_1_1 - 6.76406926406948e-06*G0_2_0_1_2 + 6.76406926406948e-06*G0_2_0_2_0 - 6.76406926406948e-06*G0_2_0_2_1 + 9.4696969696973e-05*G0_2_0_2_2 - 6.7640692640695e-06*G0_2_1_0_1 - 6.76406926406948e-06*G0_2_1_0_2 - 6.7640692640695e-06*G0_2_1_1_0 - 9.46969696969732e-06*G0_2_1_1_1 - 2.7056277056278e-06*G0_2_1_1_2 - 6.76406926406948e-06*G0_2_1_2_0 - 2.7056277056278e-06*G0_2_1_2_1 + 0.000116341991341995*G0_2_1_2_2 + 6.76406926406949e-06*G0_2_2_0_0 - 6.76406926406948e-06*G0_2_2_0_1 + 9.4696969696973e-05*G0_2_2_0_2 - 6.76406926406948e-06*G0_2_2_1_0 - 2.7056277056278e-06*G0_2_2_1_1 + 0.000116341991341995*G0_2_2_1_2 + 9.4696969696973e-05*G0_2_2_2_0 + 0.000116341991341995*G0_2_2_2_1 + 0.00278679653679663*G0_2_2_2_2;
    A[13] = A[31];
    A[50] = A[5];
    A[79] = A[97];
    A[38] = A[83];
    A[20] = A[2];
    A[18] = A[81];
    A[88] = A[77] - 0.00657467532467556*G0_0_0_0_0 - 0.00164366883116889*G0_0_0_0_1 - 0.000547889610389629*G0_0_0_0_2 - 0.00164366883116889*G0_0_0_1_0 - 0.000109577922077926*G0_0_0_1_2 - 0.000547889610389629*G0_0_0_2_0 - 0.000109577922077926*G0_0_0_2_1 - 7.30519480519505e-05*G0_0_0_2_2 - 0.00164366883116889*G0_0_1_0_0 - 0.000109577922077926*G0_0_1_0_2 + 0.00164366883116889*G0_0_1_1_1 + 0.000109577922077926*G0_0_1_1_2 - 0.000109577922077926*G0_0_1_2_0 + 0.000109577922077926*G0_0_1_2_1 - 0.000547889610389629*G0_0_2_0_0 - 0.000109577922077926*G0_0_2_0_1 - 7.30519480519505e-05*G0_0_2_0_2 - 0.000109577922077926*G0_0_2_1_0 + 0.000109577922077926*G0_0_2_1_1 - 7.30519480519504e-05*G0_0_2_2_0 - 0.00164366883116889*G0_1_0_0_0 - 0.000109577922077926*G0_1_0_0_2 + 0.00164366883116889*G0_1_0_1_1 + 0.000109577922077926*G0_1_0_1_2 - 0.000109577922077926*G0_1_0_2_0 + 0.000109577922077926*G0_1_0_2_1 + 0.00164366883116889*G0_1_1_0_1 + 0.000109577922077926*G0_1_1_0_2 + 0.00164366883116889*G0_1_1_1_0 + 0.00657467532467556*G0_1_1_1_1 + 0.000547889610389629*G0_1_1_1_2 + 0.000109577922077926*G0_1_1_2_0 + 0.000547889610389629*G0_1_1_2_1 + 7.30519480519506e-05*G0_1_1_2_2 - 0.000109577922077926*G0_1_2_0_0 + 0.000109577922077926*G0_1_2_0_1 + 0.000109577922077926*G0_1_2_1_0 + 0.000547889610389629*G0_1_2_1_1 + 7.30519480519506e-05*G0_1_2_1_2 + 7.30519480519505e-05*G0_1_2_2_1 - 0.000547889610389629*G0_2_0_0_0 - 0.000109577922077926*G0_2_0_0_1 - 7.30519480519505e-05*G0_2_0_0_2 - 0.000109577922077926*G0_2_0_1_0 + 0.000109577922077926*G0_2_0_1_1 - 7.30519480519504e-05*G0_2_0_2_0 - 0.000109577922077926*G0_2_1_0_0 + 0.000109577922077926*G0_2_1_0_1 + 0.000109577922077926*G0_2_1_1_0 + 0.000547889610389629*G0_2_1_1_1 + 7.30519480519506e-05*G0_2_1_1_2 + 7.30519480519506e-05*G0_2_1_2_1 - 7.30519480519504e-05*G0_2_2_0_0 + 7.30519480519506e-05*G0_2_2_1_1;
    A[43] = A[34];
    A[95] = A[59];
    A[52] = A[25];
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class mass_matrix_f4_p1_q3_tensor_form_0: public ufc::form
{
public:

  /// Constructor
  mass_matrix_f4_p1_q3_tensor_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f4_p1_q3_tensor_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(Product(Argument(FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None), 0), Argument(FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None), 1)), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 3), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 2), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 0), Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None), 1))))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 4;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f4_p1_q3_tensor_finite_element_1();
        break;
      }
    case 1:
      {
        return new mass_matrix_f4_p1_q3_tensor_finite_element_1();
        break;
      }
    case 2:
      {
        return new mass_matrix_f4_p1_q3_tensor_finite_element_0();
        break;
      }
    case 3:
      {
        return new mass_matrix_f4_p1_q3_tensor_finite_element_0();
        break;
      }
    case 4:
      {
        return new mass_matrix_f4_p1_q3_tensor_finite_element_0();
        break;
      }
    case 5:
      {
        return new mass_matrix_f4_p1_q3_tensor_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f4_p1_q3_tensor_dofmap_1();
        break;
      }
    case 1:
      {
        return new mass_matrix_f4_p1_q3_tensor_dofmap_1();
        break;
      }
    case 2:
      {
        return new mass_matrix_f4_p1_q3_tensor_dofmap_0();
        break;
      }
    case 3:
      {
        return new mass_matrix_f4_p1_q3_tensor_dofmap_0();
        break;
      }
    case 4:
      {
        return new mass_matrix_f4_p1_q3_tensor_dofmap_0();
        break;
      }
    case 5:
      {
        return new mass_matrix_f4_p1_q3_tensor_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f4_p1_q3_tensor_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif

#include <cassert>
#include <cassert>
#include <cmath>
#include <ufc.h>

// Common sub-expression elimination pass took 0 minutes and 18.05 seconds (wall clock).

class ExcafeCellIntegral_0 : public ufc::cell_integral
{
public:
  void tabulate_tensor(double* const A, const double* const* w, const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;

    const double var_0 = w[0][0]*w[2][1] + w[0][1]*w[2][0];
    const double var_1 = w[1][1]*w[3][0] + w[1][0]*w[3][1];
    const double var_2 = var_0*w[1][1]*w[3][1] + var_1*w[0][1]*w[2][1];
    const double var_3 = w[0][2]*w[2][1] + w[0][1]*w[2][2];
    const double var_4 = w[1][2]*w[3][1] + w[1][1]*w[3][2];
    const double var_5 = var_4*w[0][2]*w[2][2] + var_3*w[1][2]*w[3][2];
    const double var_6 = -0.0666666666666666657414808*var_2 + 0.1666666666666666574148081*var_5;
    const double var_7 = var_0*w[1][0]*w[3][0] + var_1*w[0][0]*w[2][0];
    const double var_8 = w[0][0]*w[2][2] + w[0][2]*w[2][0];
    const double var_9 = var_0*w[3][2] + var_3*w[3][0] + var_8*w[3][1];
    const double var_10 = var_3*w[1][0];
    const double var_11 = var_8*w[1][1];
    const double var_12 = var_10 + var_11;
    const double var_13 = var_1*w[0][2]*w[2][2] + var_9*w[1][2] + var_12*w[3][2];
    const double var_14 = w[0][2]*w[1][2]*w[2][2]*w[3][2];
    const double var_15 = -0.0250000000000000013877788*var_13 + -0.3333333333333333148296163*var_14;
    const double var_16 = var_0*w[1][2];
    const double var_17 = var_11 + var_16;
    const double var_18 = var_4*w[0][0]*w[2][0] + var_9*w[1][0] + var_17*w[3][0];
    const double var_19 = w[0][0]*w[1][0]*w[2][0]*w[3][0];
    const double var_20 = -0.0666666666666666657414808*var_19 + -0.0166666666666666664353702*var_18;
    const double var_21 = w[1][2]*w[3][0] + w[1][0]*w[3][2];
    const double var_22 = var_8*w[1][0]*w[3][0] + var_21*w[0][0]*w[2][0];
    const double var_23 = 0.1666666666666666574148081*var_2 + -0.0666666666666666657414808*var_22;
    const double var_24 = var_8*w[1][2]*w[3][2] + var_21*w[0][2]*w[2][2];
    const double var_25 = var_3*w[1][1]*w[3][1] + var_4*w[0][1]*w[2][1];
    const double var_26 = -0.0666666666666666657414808*var_24 + 0.1666666666666666574148081*var_25;
    const double var_27 = w[0][2]*w[1][0]*w[2][2]*w[3][0] + w[0][0]*w[1][2]*w[2][0]*w[3][2] + var_21*var_8;
    const double var_28 = w[0][1]*w[1][1]*w[2][1]*w[3][1];
    const double var_29 = var_28 + -0.0333333333333333328707404*var_27;
    const double var_30 = var_20 + -0.0250000000000000013877788*var_7 + var_15 + -0.1000000000000000055511151*var_5 + var_26 + 0.5000000000000000000000000*var_23 + var_29;
    const double var_31 = w[0][2]*w[1][1]*w[2][2]*w[3][1] + w[0][1]*w[1][2]*w[2][1]*w[3][2] + var_3*var_4;
    const double var_32 = var_28 + var_14;
    const double var_33 = 0.1000000000000000055511151*var_31 + 0.3333333333333333148296163*var_32;
    const double var_34 = var_10 + var_16;
    const double var_35 = var_9*w[1][1] + var_21*w[0][1]*w[2][1] + var_34*w[3][1];
    const double var_36 = -0.0666666666666666657414808*var_28 + -0.0166666666666666664353702*var_35;
    const double var_37 = w[0][1]*w[1][0]*w[2][1]*w[3][0] + w[0][0]*w[1][1]*w[2][0]*w[3][1] + var_0*var_1;
    const double var_38 = var_37 + var_27;
    const double var_39 = var_24 + var_2;
    const double var_40 = var_35 + var_13;
    const double var_41 = var_5 + var_25;
    const double var_42 = var_7 + var_22;
    const double var_43 = 0.0500000000000000027755576*var_41 + 0.5000000000000000000000000*var_42 + 0.0333333333333333328707404*var_31 + 0.0833333333333333287074041*var_39 + 0.2000000000000000111022302*var_32 + 5.6666666666666660745477202*w[0][0]*w[1][0]*w[2][0]*w[3][0] + 0.0277777777777777762358014*var_40 + 0.1111111111111111049432054*var_38 + 0.0555555555555555524716027*var_18;
    const double var_44 = -x[0][1];
    const double var_45 = x[1][1] + var_44;
    const double var_46 = -x[0][0];
    const double var_47 = x[2][0] + var_46;
    const double var_48 = x[1][0] + var_46;
    const double var_49 = x[2][1] + var_44;
    const double var_50 = -var_45*var_47 + var_48*var_49;
    const double var_51 = std::abs(var_50);
    const double var_52 = var_28 + var_19;
    const double var_53 = var_25 + var_22;
    const double var_54 = var_7 + var_2;
    const double var_55 = var_24 + var_5;
    const double var_56 = var_35 + var_18;
    const double var_57 = var_56 + 0.5000000000000000000000000*var_13;
    const double var_58 = var_27 + var_31;
    const double var_59 = var_58 + var_14;
    const double var_60 = 0.2000000000000000111022302*var_57 + var_54 + 2.0000000000000000000000000*var_52 + 0.3333333333333333148296163*var_53 + 0.8000000000000000444089210*var_37 + 0.1000000000000000055511151*var_55 + 0.1333333333333333314829616*var_59;
    A[35] = 0.0031746031746031746004211*var_51*var_60;
    const double var_61 = var_13 + var_18;
    const double var_62 = var_2 + var_25;
    const double var_63 = var_19 + var_14;
    const double var_64 = 0.1000000000000000055511151*var_27 + 0.3333333333333333148296163*var_63;
    const double var_65 = var_37 + var_31;
    const double var_66 = var_5 + var_7;
    const double var_67 = var_65 + var_66;
    const double var_68 = var_24 + var_22;
    const double var_69 = var_35 + var_68;
    const double var_70 = 0.2000000000000000111022302*var_67 + 0.3333333333333333148296163*var_62 + var_64 + var_28 + 0.1000000000000000055511151*var_61 + 0.1333333333333333314829616*var_69;
    A[23] = 0.0031746031746031746004211*var_51*var_70;
    A[33] = A[23];
    const double var_71 = -var_61 + var_65;
    const double var_72 = -0.0873015873015872967410900*var_63 + -0.0071428571428571426341070*var_27 + 0.0055555555555555557675773*var_62 + -0.0079365079365079360673718*var_66 + 0.0007936507936507936501053*var_71 + 0.0206349206349206344690561*w[0][1]*w[1][1]*w[2][1]*w[3][1] + 0.0015873015873015873002105*var_35 + -0.0158730158730158721347436*var_68;
    A[2] = 0.0083333333333333332176851*var_51*var_72;
    A[12] = A[2];
    const double var_73 = 0.0500000000000000027755576*var_68 + 5.6666666666666660745477202*w[0][1]*w[1][1]*w[2][1]*w[3][1] + 0.0333333333333333328707404*var_27 + 0.2000000000000000111022302*var_63 + 0.0555555555555555524716027*var_35 + 0.0833333333333333287074041*var_66 + 0.1111111111111111049432054*var_65 + 0.5000000000000000000000000*var_62 + 0.0277777777777777762358014*var_61;
    A[7] = 0.0011904761904761905835781*var_51*var_73;
    const double var_74 = 0.0500000000000000027755576*var_54 + 0.2000000000000000111022302*var_52 + 5.6666666666666660745477202*w[0][2]*w[1][2]*w[2][2]*w[3][2] + 0.5000000000000000000000000*var_55 + 0.0333333333333333328707404*var_37 + 0.0555555555555555524716027*var_13 + 0.0833333333333333287074041*var_53 + 0.1111111111111111049432054*var_58 + 0.0277777777777777762358014*var_56;
    A[14] = 0.0011904761904761905835781*var_51*var_74;
    const double var_75 = -0.0250000000000000013877788*var_18 + -0.3333333333333333148296163*var_19;
    const double var_76 = var_58 + -var_56;
    const double var_77 = -0.0079365079365079360673718*var_53 + -0.0873015873015872967410900*var_52 + 0.0007936507936507936501053*var_76 + -0.0071428571428571426341070*var_37 + 0.0015873015873015873002105*var_13 + 0.0206349206349206344690561*w[0][2]*w[1][2]*w[2][2]*w[3][2] + 0.0055555555555555557675773*var_55 + -0.0158730158730158721347436*var_54;
    A[1] = 0.0083333333333333332176851*var_51*var_77;
    A[6] = A[1];
    const double var_78 = -0.0666666666666666657414808*var_25 + 0.1666666666666666574148081*var_7;
    const double var_79 = var_39 + var_38;
    const double var_80 = var_58 + var_53;
    const double var_81 = -0.0250000000000000013877788*var_35 + -0.3333333333333333148296163*var_28;
    const double var_82 = -0.0666666666666666657414808*var_7 + 0.1666666666666666574148081*var_24;
    const double var_83 = -0.0333333333333333328707404*var_37 + var_14;
    const double var_84 = -0.0250000000000000013877788*var_22 + var_20 + -0.1000000000000000055511151*var_25 + var_81 + 0.5000000000000000000000000*var_82 + var_6 + var_83;
    const double var_85 = 0.1000000000000000055511151*var_37 + 0.3333333333333333148296163*var_52;
    const double var_86 = -0.0111111111111111115351546*var_57 + -0.0333333333333333328707404*var_54 + -0.0083333333333333332176851*var_58 + -0.0222222222222222230703093*var_53 + 0.0277777777777777762358014*var_14 + -0.2500000000000000000000000*var_85;
    A[17] = 0.0095238095238095246686250*var_51*var_86;
    A[32] = A[17];
    const double var_87 = 0.5000000000000000000000000*var_18 + var_40;
    const double var_88 = var_36 + -0.1000000000000000055511151*var_22 + -0.0250000000000000013877788*var_25 + var_75 + var_82 + 0.5000000000000000000000000*var_6 + var_83;
    A[16] = 0.0031746031746031746004211*var_51*var_88;
    const double var_89 = -0.0111111111111111115351546*var_87 + 0.0277777777777777762358014*var_19 + -0.0222222222222222230703093*var_39 + -0.0083333333333333332176851*var_38 + -0.0333333333333333328707404*var_41 + -0.2500000000000000000000000*var_33;
    A[3] = 0.0095238095238095246686250*var_51*var_89;
    const double var_90 = var_41 + var_18;
    const double var_91 = -0.0666666666666666657414808*var_14 + -0.0166666666666666664353702*var_13;
    const double var_92 = var_91 + -0.1000000000000000055511151*var_7 + var_75 + -0.0250000000000000013877788*var_5 + 0.5000000000000000000000000*var_26 + var_23 + var_29;
    A[11] = 0.0031746031746031746004211*var_51*var_92;
    const double var_93 = -0.0666666666666666657414808*var_5 + 0.1666666666666666574148081*var_22;
    const double var_94 = var_19 + -0.0333333333333333328707404*var_31;
    const double var_95 = 0.5000000000000000000000000*var_93 + var_94 + var_91 + -0.1000000000000000055511151*var_2 + var_81 + -0.0250000000000000013877788*var_24 + var_78;
    A[5] = 0.0031746031746031746004211*var_51*var_95;
    const double var_96 = 0.2000000000000000111022302*var_79 + var_19 + 0.3333333333333333148296163*var_42 + 0.1000000000000000055511151*var_40 + var_33 + 0.1333333333333333314829616*var_90;
    A[29] = 0.0031746031746031746004211*var_51*var_96;
    A[34] = A[29];
    const double var_97 = var_28 + var_65;
    const double var_98 = var_38 + -var_40;
    const double var_99 = -0.0079365079365079360673718*var_39 + -0.0873015873015872967410900*var_32 + 0.0206349206349206344690561*w[0][0]*w[1][0]*w[2][0]*w[3][0] + 0.0015873015873015873002105*var_18 + -0.0071428571428571426341070*var_31 + -0.0158730158730158721347436*var_41 + 0.0055555555555555557675773*var_42 + 0.0007936507936507936501053*var_98;
    A[8] = 0.0083333333333333332176851*var_51*var_99;
    A[13] = A[8];
    A[9] = 0.0031746031746031746004211*var_30*var_51;
    A[19] = A[9];
    const double var_100 = var_61 + 0.5000000000000000000000000*var_35;
    const double var_101 = var_93 + var_94 + var_36 + -0.1000000000000000055511151*var_24 + -0.0250000000000000013877788*var_2 + 0.5000000000000000000000000*var_78 + var_15;
    A[4] = 0.0031746031746031746004211*var_101*var_51;
    A[30] = A[5];
    const double var_102 = var_38 + var_19;
    const double var_103 = -0.0083333333333333332176851*var_65 + -0.0222222222222222230703093*var_66 + -0.0111111111111111115351546*var_100 + 0.0277777777777777762358014*var_28 + -0.0333333333333333328707404*var_68 + -0.2500000000000000000000000*var_64;
    A[10] = 0.0095238095238095246686250*var_103*var_51;
    A[15] = 0.0031746031746031746004211*var_51*var_84;
    A[20] = A[15];
    const double var_104 = 0.2000000000000000111022302*var_87 + 2.0000000000000000000000000*var_32 + var_41 + 0.1000000000000000055511151*var_42 + 0.8000000000000000444089210*var_31 + 0.1333333333333333314829616*var_102 + 0.3333333333333333148296163*var_39;
    A[21] = 0.0031746031746031746004211*var_104*var_51;
    const double var_105 = var_13 + var_54;
    const double var_106 = 0.2000000000000000111022302*var_100 + var_68 + 0.3333333333333333148296163*var_66 + 0.1000000000000000055511151*var_62 + 2.0000000000000000000000000*var_63 + 0.8000000000000000444089210*var_27 + 0.1333333333333333314829616*var_97;
    A[28] = 0.0031746031746031746004211*var_106*var_51;
    A[24] = A[4];
    const double var_107 = 0.1333333333333333314829616*var_105 + 0.3333333333333333148296163*var_55 + var_14 + 0.1000000000000000055511151*var_56 + var_85 + 0.2000000000000000111022302*var_80;
    A[18] = A[3];
    A[22] = 0.0031746031746031746004211*var_107*var_51;
    A[0] = 0.0011904761904761905835781*var_43*var_51;
    A[26] = A[16];
    A[27] = A[22];
    A[25] = A[10];
    A[31] = A[11];
  }

  void tabulate_tensor(double* const A,
                       const double* const* w,
                       const ufc::cell& c,
                       unsigned int num_quadrature_points,
                       const double* const* quadrature_points,
                       const double* quadrature_weights) const
  {
    assert(0 && "This function is not implemented!");
  }
};

extern "C" ufc::cell_integral* newExcafeCellIntegral_0()
{
  return new ExcafeCellIntegral_0();
}

#include <cassert>
#include <cassert>
#include <cmath>
#include <ufc.h>

// Common sub-expression elimination pass took 0 minutes and 0.81 seconds (wall clock).

class ExcafeCellIntegral_0 : public ufc::cell_integral
{
public:
  void tabulate_tensor(double* const A, const double* const* w, const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;

    const double var_0 = w[0][0] + w[0][2];
    const double var_1 = 0.4444444444444444197728217*w[0][1] + var_0;
    const double var_2 = -1.0000000000000000000000000*x[0][1];
    const double var_3 = x[2][1] + var_2;
    const double var_4 = -1.0000000000000000000000000*x[0][0];
    const double var_5 = x[1][0] + var_4;
    const double var_6 = var_2 + x[1][1];
    const double var_7 = var_4 + x[2][0];
    const double var_8 = -1.0000000000000000000000000*var_6*var_7 + var_3*var_5;
    const double var_9 = std::abs(var_8);
    const double var_10 = -0.0000684089572978461906913*var_9*w[0][0];
    const double var_11 = 0.0005772005772005772000766*var_9*w[0][1];
    const double var_12 = -0.0005087916199027310093853*var_9*w[0][2];
    A[20] = var_12 + var_10 + var_11;
    A[76] = A[20];
    const double var_13 = -0.0003719737053070386822128*var_9*w[0][0];
    const double var_14 = -0.0009106942440275774203542*var_9*w[0][1];
    const double var_15 = -0.0001282667949334615939937*var_9*w[0][2];
    A[43] = var_15 + var_13 + var_14;
    const double var_16 = 0.0006840895729784619069130*var_9*w[0][1];
    const double var_17 = 0.0007182940516273849480486*var_9*w[0][0];
    const double var_18 = 0.0031126075570520011885634*var_9*w[0][2];
    A[53] = var_16 + var_18 + var_17;
    A[123] = A[53];
    const double var_19 = w[0][1] + w[0][2];
    const double var_20 = var_19 + 0.4444444444444444197728217*w[0][0];
    A[12] = 0.0005772005772005772000766*var_20*var_9;
    A[180] = A[12];
    const double var_21 = 0.0002308802308802308800306*var_9*w[0][2];
    A[17] = 0.0000163005718561274130492*var_9*w[0][0] + -0.0001271979049756827523463*var_19*var_9;
    const double var_22 = w[0][0] + w[0][1];
    A[32] = 0.0002004168670835337711083*var_22*var_9 + 0.0021564854898188231743794*var_9*w[0][2];
    const double var_23 = -0.0001539201539201539290554*var_9*w[0][0];
    const double var_24 = 0.0056180856180856183698658*var_9*w[0][2];
    const double var_25 = -1.0000000000000000000000000*w[0][1];
    const double var_26 = 0.0020779220779220779202756*var_25*var_9;
    A[73] = var_23 + var_24 + var_26;
    const double var_27 = 0.0006840895729784619069130*var_9*w[0][2];
    A[146] = 0.0030441985997541553231327*var_22*var_9 + var_27;
    A[174] = A[146];
    const double var_28 = 0.0018598685265351930315930*var_9*w[0][0];
    const double var_29 = -0.0002992891881780770707219*var_9*w[0][2];
    const double var_30 = -0.0001496445940890385353610*var_9*w[0][1];
    A[6] = var_29 + var_30 + var_28;
    const double var_31 = var_22 + 1.1428571428571427937015414*w[0][2];
    A[51] = 0.0007182940516273849480486*var_31*var_9;
    const double var_32 = 0.0007182940516273849480486*var_9*w[0][2];
    const double var_33 = 0.0031126075570520011885634*var_9*w[0][0];
    A[101] = var_33 + var_16 + var_32;
    A[171] = A[101];
    const double var_34 = 0.0002052268718935385720739*var_9*w[0][1];
    const double var_35 = -0.0000684089572978461906913*var_9*w[0][2];
    const double var_36 = -0.0006755384533162311737342*var_9*w[0][1];
    const double var_37 = -0.0002437069103735770611140*var_9*w[0][0];
    A[41] = var_35 + var_36 + var_37;
    A[167] = A[41];
    const double var_38 = 0.0006840895729784619069130*var_9*w[0][0];
    A[50] = var_38 + 0.0030441985997541553231327*var_19*var_9;
    const double var_39 = 0.0017102239324461546588624*var_9*w[0][2];
    const double var_40 = 0.0051306717973384641934276*var_9*w[0][0];
    const double var_41 = 0.0157340601785046253768829*var_9*w[0][1];
    A[176] = var_40 + var_41 + var_39;
    const double var_42 = -0.0012570145903479236319800*var_9*w[0][2];
    const double var_43 = -0.0064133397466730806754653*var_9*w[0][1];
    const double var_44 = -0.0036171236171236172650401*var_9*w[0][0];
    A[161] = var_42 + var_44 + var_43;
    A[175] = A[161];
    A[0] = 0.0021564854898188231743794*var_9*w[0][0] + 0.0002004168670835337711083*var_19*var_9;
    const double var_45 = 0.0005130671797338463759747*var_9*w[0][2];
    const double var_46 = 0.0001122334455667789015207*var_9*w[0][1];
    const double var_47 = -0.0013307679974346640038030*var_9*w[0][0];
    A[7] = var_47 + var_45 + var_46;
    A[105] = A[7];
    A[193] = -0.0036940836940836940804900*var_22*var_9 + -0.0061568061568061565116960*var_9*w[0][2];
    A[207] = A[193];
    const double var_48 = -0.0005087916199027310093853*var_9*w[0][0];
    const double var_49 = 0.0006669873336540003321352*var_9*w[0][0];
    const double var_50 = 0.0002308802308802308800306*var_9*w[0][1];
    const double var_51 = -1.0000000000000000000000000*w[0][2];
    const double var_52 = 0.0003334936668270001660676*var_51*var_9;
    A[52] = var_49 + var_52 + var_50;
    A[108] = A[52];
    const double var_53 = 0.0020779220779220779202756*var_51*var_9;
    const double var_54 = -0.0002437069103735770611140*var_9*w[0][2];
    const double var_55 = 0.0005130671797338463759747*var_9*w[0][1];
    const double var_56 = 0.0017102239324461546588624*var_9*w[0][0];
    const double var_57 = 0.0051306717973384641934276*var_9*w[0][2];
    A[48] = var_56 + var_41 + var_57;
    const double var_58 = -0.0019496552829886164889123*var_9*w[0][0];
    const double var_59 = -0.0006755384533162311737342*var_9*w[0][0];
    const double var_60 = -0.0002437069103735770611140*var_9*w[0][1];
    A[39] = var_35 + var_59 + var_60;
    A[137] = A[39];
    const double var_61 = -0.0001496445940890385353610*var_9*w[0][2];
    const double var_62 = -0.0002992891881780770707219*var_9*w[0][1];
    A[9] = var_61 + var_62 + var_28;
    A[135] = A[9];
    const double var_63 = -0.0001539201539201539290554*var_9*w[0][2];
    A[70] = -0.0005002405002405002762064*var_0*var_9 + 0.0014237614237614239047491*var_9*w[0][1];
    A[154] = A[70];
    A[98] = 0.0030441985997541553231327*var_0*var_9 + var_16;
    const double var_64 = -0.0002992891881780770707219*var_9*w[0][0];
    const double var_65 = 0.0018598685265351930315930*var_9*w[0][1];
    A[26] = var_64 + var_61 + var_65;
    const double var_66 = -0.0012570145903479236319800*var_9*w[0][0];
    const double var_67 = -0.0013083213083213084647338*var_9*w[0][2];
    const double var_68 = -0.0059002725669392332152885*var_9*w[0][1];
    A[55] = var_66 + var_67 + var_68;
    const double var_69 = var_19 + 0.2000000000000000111022302*w[0][0];
    A[4] = -0.0000481000481000480977476*var_69*var_9;
    A[60] = A[4];
    const double var_70 = 0.0010261343594676927519493*var_9*w[0][0];
    const double var_71 = 0.0031810165143498479213557*var_9*w[0][2];
    const double var_72 = -0.0019496552829886164889123*var_9*w[0][1];
    A[59] = var_72 + var_70 + var_71;
    A[213] = A[59];
    const double var_73 = -0.0013307679974346640038030*var_9*w[0][2];
    const double var_74 = 0.0005130671797338463759747*var_9*w[0][0];
    A[37] = var_74 + var_46 + var_73;
    A[107] = A[37];
    const double var_75 = var_19 + 1.1428571428571427937015414*w[0][0];
    A[131] = 0.0007182940516273849480486*var_75*var_9;
    A[173] = A[131];
    const double var_76 = -1.0000000000000000000000000*w[0][0];
    const double var_77 = 0.0003334936668270001660676*var_76*var_9;
    const double var_78 = -0.0064133397466730806754653*var_9*w[0][0];
    const double var_79 = -0.0036171236171236172650401*var_9*w[0][1];
    A[145] = var_79 + var_42 + var_78;
    A[28] = 0.0005772005772005772000766*var_1*var_9;
    A[196] = A[28];
    A[31] = A[17];
    A[209] = -0.0061568061568061565116960*var_9*w[0][0] + -0.0036940836940836940804900*var_19*var_9;
    A[223] = A[209];
    A[1] = -0.0001271979049756827523463*var_22*var_9 + 0.0000163005718561274130492*var_9*w[0][2];
    const double var_80 = -0.0005087916199027310093853*var_9*w[0][1];
    A[164] = -0.0026936026936026937449176*var_22*var_9 + -0.0013852813852813852801837*var_9*w[0][2];
    A[220] = A[164];
    const double var_81 = -0.0001282667949334615939937*var_9*w[0][1];
    const double var_82 = -0.0009106942440275774203542*var_9*w[0][2];
    A[29] = var_82 + var_81 + var_13;
    const double var_83 = -0.0064133397466730806754653*var_9*w[0][2];
    A[65] = var_66 + var_83 + var_79;
    const double var_84 = -0.0013083213083213084647338*var_9*w[0][1];
    const double var_85 = -0.0059002725669392332152885*var_9*w[0][2];
    A[82] = var_66 + var_85 + var_84;
    const double var_86 = 0.0001122334455667789015207*var_9*w[0][0];
    const double var_87 = -0.0001026134359467692860370*var_9*w[0][2];
    const double var_88 = -0.0031810165143498479213557*var_9*w[0][1];
    A[57] = var_70 + var_87 + var_88;
    const double var_89 = 0.0003078403078403078581109*var_9*w[0][2];
    const double var_90 = 0.0107744107744107749796703*var_9*w[0][0];
    A[102] = var_90 + var_34 + var_89;
    const double var_91 = 0.0006669873336540003321352*var_9*w[0][1];
    A[130] = var_77 + var_91 + var_21;
    A[158] = A[130];
    A[67] = -0.0005002405002405002762064*var_22*var_9 + 0.0014237614237614239047491*var_9*w[0][2];
    A[109] = A[67];
    const double var_92 = 0.0002052268718935385720739*var_9*w[0][0];
    const double var_93 = 0.0107744107744107749796703*var_9*w[0][1];
    A[58] = var_92 + var_93 + var_89;
    A[194] = -0.0036940836940836940804900*var_0*var_9 + -0.0061568061568061565116960*var_9*w[0][1];
    A[222] = A[194];
    const double var_94 = var_22 + 4.6000000000000005329070518*w[0][2];
    A[83] = 0.0017102239324461546588624*var_9*var_94;
    A[125] = A[83];
    const double var_95 = -0.0001026134359467692860370*var_9*w[0][1];
    const double var_96 = -0.0031810165143498479213557*var_9*w[0][2];
    A[87] = var_95 + var_70 + var_96;
    A[185] = A[87];
    const double var_97 = 0.0002308802308802308800306*var_9*w[0][0];
    const double var_98 = 0.0006669873336540003321352*var_9*w[0][2];
    const double var_99 = 0.0003334936668270001660676*var_25*var_9;
    A[69] = var_99 + var_97 + var_98;
    A[3] = var_54 + var_10 + var_36;
    A[166] = A[26];
    const double var_100 = -0.0001496445940890385353610*var_9*w[0][0];
    const double var_101 = 0.0018598685265351930315930*var_9*w[0][2];
    A[35] = var_101 + var_62 + var_100;
    A[18] = var_29 + var_100 + var_65;
    const double var_102 = 0.0010261343594676927519493*var_9*w[0][1];
    A[104] = var_102 + var_58 + var_71;
    A[192] = 0.0480230880230880230463697*var_9*w[0][0] + 0.0233958633958633969995855*var_19*var_9;
    const double var_103 = 0.0157340601785046253768829*var_9*w[0][0];
    const double var_104 = 0.0017102239324461546588624*var_9*w[0][1];
    A[96] = var_104 + var_57 + var_103;
    const double var_105 = 0.0001122334455667789015207*var_9*w[0][2];
    const double var_106 = 1.1428571428571427937015414*w[0][1] + var_0;
    A[84] = 0.0007182940516273849480486*var_106*var_9;
    A[140] = A[84];
    const double var_107 = var_22 + 0.4444444444444444197728217*w[0][2];
    A[44] = 0.0005772005772005772000766*var_107*var_9;
    const double var_108 = 0.0056180856180856183698658*var_9*w[0][1];
    A[74] = var_108 + var_53 + var_23;
    const double var_109 = -0.0001282667949334615939937*var_9*w[0][0];
    const double var_110 = -0.0003719737053070386822128*var_9*w[0][2];
    A[13] = var_109 + var_14 + var_110;
    A[38] = var_101 + var_64 + var_30;
    const double var_111 = 0.0005772005772005772000766*var_9*w[0][2];
    const double var_112 = -0.0009106942440275774203542*var_9*w[0][0];
    const double var_113 = -0.0003719737053070386822128*var_9*w[0][1];
    A[42] = var_15 + var_112 + var_113;
    const double var_114 = 0.0010261343594676927519493*var_9*w[0][2];
    const double var_115 = -0.0001026134359467692860370*var_9*w[0][0];
    A[179] = var_114 + var_115 + var_88;
    A[197] = A[43];
    const double var_116 = 0.0007182940516273849480486*var_9*w[0][1];
    A[129] = var_33 + var_27 + var_116;
    A[143] = A[129];
    A[112] = 0.0127753727753727765181768*var_0*var_9 + 0.0023857623857623860494370*var_9*w[0][1];
    A[182] = A[42];
    const double var_117 = -0.0013307679974346640038030*var_9*w[0][1];
    A[19] = var_117 + var_45 + var_86;
    const double var_118 = 4.6000000000000005329070518*w[0][1] + var_0;
    A[72] = -0.0013852813852813852801837*var_9*w[0][0] + -0.0026936026936026937449176*var_19*var_9;
    A[184] = A[72];
    A[153] = A[55];
    const double var_119 = 0.0031126075570520011885634*var_9*w[0][1];
    A[86] = var_27 + var_17 + var_119;
    const double var_120 = 0.0056180856180856183698658*var_9*w[0][0];
    const double var_121 = var_22 + 0.2000000000000000111022302*w[0][2];
    const double var_122 = 0.0157340601785046253768829*var_9*w[0][2];
    const double var_123 = 0.0005772005772005772000766*var_9*w[0][0];
    const double var_124 = -0.0012570145903479236319800*var_9*w[0][1];
    const double var_125 = -0.0013083213083213084647338*var_9*w[0][0];
    A[68] = var_85 + var_124 + var_125;
    A[124] = A[68];
    A[214] = A[74];
    A[85] = var_49 + var_99 + var_21;
    const double var_126 = -0.0000684089572978461906913*var_9*w[0][1];
    A[8] = var_12 + var_123 + var_126;
    A[120] = A[8];
    A[24] = var_48 + var_35 + var_11;
    A[198] = A[58];
    A[34] = var_55 + var_86 + var_73;
    A[62] = A[34];
    const double var_127 = -0.0006755384533162311737342*var_9*w[0][2];
    A[64] = 0.0023857623857623860494370*var_9*w[0][0] + 0.0127753727753727765181768*var_19*var_9;
    const double var_128 = -0.0031810165143498479213557*var_9*w[0][0];
    A[103] = var_87 + var_128 + var_102;
    A[79] = A[65];
    A[14] = var_82 + var_109 + var_113;
    A[210] = A[14];
    const double var_129 = 0.0031810165143498479213557*var_9*w[0][1];
    A[148] = var_114 + var_129 + var_58;
    const double var_130 = 0.0003078403078403078581109*var_9*w[0][1];
    const double var_131 = -0.0019496552829886164889123*var_9*w[0][2];
    A[88] = var_70 + var_129 + var_131;
    A[200] = A[88];
    A[66] = var_91 + var_52 + var_97;
    A[118] = -0.0026936026936026937449176*var_0*var_9 + -0.0013852813852813852801837*var_9*w[0][1];
    A[202] = A[118];
    A[149] = var_114 + var_95 + var_128;
    const double var_132 = -0.0036171236171236172650401*var_9*w[0][2];
    A[49] = var_66 + var_132 + var_43;
    A[33] = var_80 + var_10 + var_111;
    A[47] = A[33];
    A[61] = A[19];
    A[78] = A[50];
    A[97] = var_132 + var_124 + var_78;
    const double var_133 = 0.0031810165143498479213557*var_9*w[0][0];
    A[132] = var_133 + var_131 + var_102;
    A[186] = A[102];
    A[208] = 0.0233958633958633969995855*var_0*var_9 + 0.0480230880230880230463697*var_9*w[0][1];
    A[183] = A[57];
    A[5] = var_10 + var_60 + var_127;
    A[75] = A[5];
    const double var_134 = var_19 + 4.6000000000000005329070518*w[0][0];
    A[99] = 0.0017102239324461546588624*var_134*var_9;
    A[141] = A[99];
    A[201] = A[103];
    const double var_135 = 0.0002052268718935385720739*var_9*w[0][2];
    const double var_136 = 0.2000000000000000111022302*w[0][1] + var_0;
    const double var_137 = 0.0107744107744107749796703*var_9*w[0][2];
    A[89] = var_92 + var_130 + var_137;
    A[215] = A[89];
    const double var_138 = -0.0059002725669392332152885*var_9*w[0][0];
    A[114] = var_84 + var_42 + var_138;
    const double var_139 = 0.0020779220779220779202756*var_76*var_9;
    A[162] = var_108 + var_63 + var_139;
    A[190] = A[162];
    A[25] = var_117 + var_105 + var_74;
    A[151] = A[25];
    A[40] = -0.0000481000481000480977476*var_121*var_9;
    A[152] = A[40];
    A[122] = A[38];
    A[110] = A[82];
    A[133] = var_115 + var_96 + var_102;
    A[203] = A[133];
    A[11] = var_35 + var_80 + var_123;
    A[126] = A[98];
    A[100] = var_67 + var_124 + var_138;
    A[188] = A[132];
    A[116] = var_77 + var_50 + var_98;
    A[172] = A[116];
    const double var_140 = 0.0051306717973384641934276*var_9*w[0][1];
    A[23] = var_37 + var_127 + var_126;
    A[113] = var_83 + var_124 + var_44;
    A[212] = A[44];
    A[163] = var_26 + var_63 + var_120;
    A[205] = A[163];
    A[94] = A[66];
    A[77] = A[35];
    A[21] = var_54 + var_59 + var_126;
    A[15] = A[1];
    A[177] = var_72 + var_114 + var_133;
    A[144] = var_140 + var_39 + var_103;
    A[80] = var_56 + var_140 + var_122;
    A[127] = A[113];
    A[155] = A[85];
    A[54] = var_38 + var_32 + var_119;
    A[27] = var_81 + var_112 + var_110;
    A[199] = A[73];
    A[195] = A[13];
    A[56] = 0.0017102239324461546588624*var_118*var_9;
    A[121] = A[23];
    A[181] = A[27];
    const double var_141 = 0.0003078403078403078581109*var_9*w[0][0];
    A[134] = var_141 + var_34 + var_137;
    A[147] = var_90 + var_135 + var_130;
    A[170] = A[86];
    A[16] = 0.0002004168670835337711083*var_0*var_9 + 0.0021564854898188231743794*var_9*w[0][1];
    const double var_142 = -0.0001539201539201539290554*var_9*w[0][1];
    A[117] = var_142 + var_24 + var_139;
    A[178] = var_135 + var_141 + var_93;
    A[119] = var_53 + var_142 + var_120;
    A[217] = A[119];
    A[138] = A[54];
    A[10] = var_47 + var_55 + var_105;
    A[150] = A[10];
    A[160] = 0.0127753727753727765181768*var_22*var_9 + 0.0023857623857623860494370*var_9*w[0][2];
    A[139] = A[69];
    A[206] = A[178];
    A[168] = A[56];
    A[63] = A[49];
    A[128] = var_104 + var_40 + var_122;
    A[71] = var_42 + var_125 + var_68;
    A[169] = A[71];
    A[90] = A[6];
    A[81] = var_38 + var_116 + var_18;
    A[115] = 0.0014237614237614239047491*var_9*w[0][0] + -0.0005002405002405002762064*var_19*var_9;
    A[204] = A[148];
    A[159] = A[145];
    A[22] = -0.0000481000481000480977476*var_136*var_9;
    A[157] = A[115];
    A[93] = A[51];
    A[187] = A[117];
    A[221] = A[179];
    A[189] = A[147];
    A[36] = var_48 + var_111 + var_126;
    A[111] = A[97];
    A[211] = A[29];
    A[95] = A[81];
    A[2] = -0.0001271979049756827523463*var_0*var_9 + 0.0000163005718561274130492*var_9*w[0][1];
    A[219] = A[149];
    A[142] = A[114];
    A[46] = A[18];
    A[165] = A[11];
    A[136] = A[24];
    A[92] = A[36];
    A[216] = A[104];
    A[91] = A[21];
    A[218] = A[134];
    A[30] = A[2];
    A[224] = 0.0233958633958633969995855*var_22*var_9 + 0.0480230880230880230463697*var_9*w[0][2];
    A[156] = A[100];
    A[106] = A[22];
    A[191] = A[177];
    A[45] = A[3];
  }

  void tabulate_tensor(double* const A,
                       const double* const* w,
                       const ufc::cell& c,
                       unsigned int num_quadrature_points,
                       const double* const* quadrature_points,
                       const double* quadrature_weights) const
  {
    assert(0 && "This function is not implemented!");
  }
};

extern "C" ufc::cell_integral* newExcafeCellIntegral_0()
{
  return new ExcafeCellIntegral_0();
}

// This code conforms with the UFC specification version 2.0.3
// and was automatically generated by FFC version 1.0-beta2.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'ufc'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'tensor'
//   split:                          False
//   swig_binary:                    'swig'
//   swig_path:                      ''

#ifndef __MASS_MATRIX_F2_P3_Q3_TENSOR_H
#define __MASS_MATRIX_F2_P3_Q3_TENSOR_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class mass_matrix_f2_p3_q3_tensor_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  mass_matrix_f2_p3_q3_tensor_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f2_p3_q3_tensor_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435952, 0.0606091526731326, 0.0349927106111882, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333333, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807677, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930786, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.0909137290096989};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435952, 0.0606091526731326, 0.0349927106111882, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333333, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807677, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930786, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.0909137290096989};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mass_matrix_f2_p3_q3_tensor_finite_element_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mass_matrix_f2_p3_q3_tensor_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  mass_matrix_f2_p3_q3_tensor_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~mass_matrix_f2_p3_q3_tensor_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + 2.0*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 10;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*m.num_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
    offset += m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[3][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[4][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[4][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[5][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[5][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[6][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[6][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[7][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[7][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[8][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[8][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[9][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[9][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mass_matrix_f2_p3_q3_tensor_dofmap_0();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mass_matrix_f2_p3_q3_tensor_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  mass_matrix_f2_p3_q3_tensor_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f2_p3_q3_tensor_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      9
    // Number of operations (multiply-add pairs) for geometry tensor:    150
    // Number of operations (multiply-add pairs) for tensor contraction: 5008
    // Total number of operations (multiply-add pairs):                  5167
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[0][0]*w[1][0]*(1.0);
    const double G0_0_1 = det*w[0][0]*w[1][1]*(1.0);
    const double G0_0_2 = det*w[0][0]*w[1][2]*(1.0);
    const double G0_0_3 = det*w[0][0]*w[1][3]*(1.0);
    const double G0_0_4 = det*w[0][0]*w[1][4]*(1.0);
    const double G0_0_5 = det*w[0][0]*w[1][5]*(1.0);
    const double G0_0_6 = det*w[0][0]*w[1][6]*(1.0);
    const double G0_0_7 = det*w[0][0]*w[1][7]*(1.0);
    const double G0_0_8 = det*w[0][0]*w[1][8]*(1.0);
    const double G0_0_9 = det*w[0][0]*w[1][9]*(1.0);
    const double G0_1_0 = det*w[0][1]*w[1][0]*(1.0);
    const double G0_1_1 = det*w[0][1]*w[1][1]*(1.0);
    const double G0_1_2 = det*w[0][1]*w[1][2]*(1.0);
    const double G0_1_3 = det*w[0][1]*w[1][3]*(1.0);
    const double G0_1_4 = det*w[0][1]*w[1][4]*(1.0);
    const double G0_1_5 = det*w[0][1]*w[1][5]*(1.0);
    const double G0_1_6 = det*w[0][1]*w[1][6]*(1.0);
    const double G0_1_7 = det*w[0][1]*w[1][7]*(1.0);
    const double G0_1_8 = det*w[0][1]*w[1][8]*(1.0);
    const double G0_1_9 = det*w[0][1]*w[1][9]*(1.0);
    const double G0_2_0 = det*w[0][2]*w[1][0]*(1.0);
    const double G0_2_1 = det*w[0][2]*w[1][1]*(1.0);
    const double G0_2_2 = det*w[0][2]*w[1][2]*(1.0);
    const double G0_2_3 = det*w[0][2]*w[1][3]*(1.0);
    const double G0_2_4 = det*w[0][2]*w[1][4]*(1.0);
    const double G0_2_5 = det*w[0][2]*w[1][5]*(1.0);
    const double G0_2_6 = det*w[0][2]*w[1][6]*(1.0);
    const double G0_2_7 = det*w[0][2]*w[1][7]*(1.0);
    const double G0_2_8 = det*w[0][2]*w[1][8]*(1.0);
    const double G0_2_9 = det*w[0][2]*w[1][9]*(1.0);
    const double G0_3_0 = det*w[0][3]*w[1][0]*(1.0);
    const double G0_3_1 = det*w[0][3]*w[1][1]*(1.0);
    const double G0_3_2 = det*w[0][3]*w[1][2]*(1.0);
    const double G0_3_3 = det*w[0][3]*w[1][3]*(1.0);
    const double G0_3_4 = det*w[0][3]*w[1][4]*(1.0);
    const double G0_3_5 = det*w[0][3]*w[1][5]*(1.0);
    const double G0_3_6 = det*w[0][3]*w[1][6]*(1.0);
    const double G0_3_7 = det*w[0][3]*w[1][7]*(1.0);
    const double G0_3_8 = det*w[0][3]*w[1][8]*(1.0);
    const double G0_3_9 = det*w[0][3]*w[1][9]*(1.0);
    const double G0_4_0 = det*w[0][4]*w[1][0]*(1.0);
    const double G0_4_1 = det*w[0][4]*w[1][1]*(1.0);
    const double G0_4_2 = det*w[0][4]*w[1][2]*(1.0);
    const double G0_4_3 = det*w[0][4]*w[1][3]*(1.0);
    const double G0_4_4 = det*w[0][4]*w[1][4]*(1.0);
    const double G0_4_5 = det*w[0][4]*w[1][5]*(1.0);
    const double G0_4_6 = det*w[0][4]*w[1][6]*(1.0);
    const double G0_4_7 = det*w[0][4]*w[1][7]*(1.0);
    const double G0_4_8 = det*w[0][4]*w[1][8]*(1.0);
    const double G0_4_9 = det*w[0][4]*w[1][9]*(1.0);
    const double G0_5_0 = det*w[0][5]*w[1][0]*(1.0);
    const double G0_5_1 = det*w[0][5]*w[1][1]*(1.0);
    const double G0_5_2 = det*w[0][5]*w[1][2]*(1.0);
    const double G0_5_3 = det*w[0][5]*w[1][3]*(1.0);
    const double G0_5_4 = det*w[0][5]*w[1][4]*(1.0);
    const double G0_5_5 = det*w[0][5]*w[1][5]*(1.0);
    const double G0_5_6 = det*w[0][5]*w[1][6]*(1.0);
    const double G0_5_7 = det*w[0][5]*w[1][7]*(1.0);
    const double G0_5_8 = det*w[0][5]*w[1][8]*(1.0);
    const double G0_5_9 = det*w[0][5]*w[1][9]*(1.0);
    const double G0_6_0 = det*w[0][6]*w[1][0]*(1.0);
    const double G0_6_1 = det*w[0][6]*w[1][1]*(1.0);
    const double G0_6_2 = det*w[0][6]*w[1][2]*(1.0);
    const double G0_6_3 = det*w[0][6]*w[1][3]*(1.0);
    const double G0_6_4 = det*w[0][6]*w[1][4]*(1.0);
    const double G0_6_5 = det*w[0][6]*w[1][5]*(1.0);
    const double G0_6_6 = det*w[0][6]*w[1][6]*(1.0);
    const double G0_6_7 = det*w[0][6]*w[1][7]*(1.0);
    const double G0_6_8 = det*w[0][6]*w[1][8]*(1.0);
    const double G0_6_9 = det*w[0][6]*w[1][9]*(1.0);
    const double G0_7_0 = det*w[0][7]*w[1][0]*(1.0);
    const double G0_7_1 = det*w[0][7]*w[1][1]*(1.0);
    const double G0_7_2 = det*w[0][7]*w[1][2]*(1.0);
    const double G0_7_3 = det*w[0][7]*w[1][3]*(1.0);
    const double G0_7_4 = det*w[0][7]*w[1][4]*(1.0);
    const double G0_7_5 = det*w[0][7]*w[1][5]*(1.0);
    const double G0_7_6 = det*w[0][7]*w[1][6]*(1.0);
    const double G0_7_7 = det*w[0][7]*w[1][7]*(1.0);
    const double G0_7_8 = det*w[0][7]*w[1][8]*(1.0);
    const double G0_7_9 = det*w[0][7]*w[1][9]*(1.0);
    const double G0_8_0 = det*w[0][8]*w[1][0]*(1.0);
    const double G0_8_1 = det*w[0][8]*w[1][1]*(1.0);
    const double G0_8_2 = det*w[0][8]*w[1][2]*(1.0);
    const double G0_8_3 = det*w[0][8]*w[1][3]*(1.0);
    const double G0_8_4 = det*w[0][8]*w[1][4]*(1.0);
    const double G0_8_5 = det*w[0][8]*w[1][5]*(1.0);
    const double G0_8_6 = det*w[0][8]*w[1][6]*(1.0);
    const double G0_8_7 = det*w[0][8]*w[1][7]*(1.0);
    const double G0_8_8 = det*w[0][8]*w[1][8]*(1.0);
    const double G0_8_9 = det*w[0][8]*w[1][9]*(1.0);
    const double G0_9_0 = det*w[0][9]*w[1][0]*(1.0);
    const double G0_9_1 = det*w[0][9]*w[1][1]*(1.0);
    const double G0_9_2 = det*w[0][9]*w[1][2]*(1.0);
    const double G0_9_3 = det*w[0][9]*w[1][3]*(1.0);
    const double G0_9_4 = det*w[0][9]*w[1][4]*(1.0);
    const double G0_9_5 = det*w[0][9]*w[1][5]*(1.0);
    const double G0_9_6 = det*w[0][9]*w[1][6]*(1.0);
    const double G0_9_7 = det*w[0][9]*w[1][7]*(1.0);
    const double G0_9_8 = det*w[0][9]*w[1][8]*(1.0);
    const double G0_9_9 = det*w[0][9]*w[1][9]*(1.0);
    
    // Compute element tensor
    A[73] = -4.28477772227848e-05*G0_0_0 - 1.81626409305012e-05*G0_0_1 - 1.79619487655232e-05*G0_0_2 - 0.000251366936634836*G0_0_3 + 8.0979288568588e-05*G0_0_4 + 1.68581418581446e-05*G0_0_5 + 4.03391251605606e-05*G0_0_6 + 6.32180319680422e-05*G0_0_7 - 0.000172494915798516*G0_0_8 - 0.000173398030540917*G0_0_9 - 1.81626409305012e-05*G0_1_0 - 0.000214238886113923*G0_1_1 - 3.52214749536238e-05*G0_1_2 - 0.000238121253746295*G0_1_3 + 0.000172795954045984*G0_1_4 - 5.71972670187052e-05*G0_1_5 + 4.03391251605606e-05*G0_1_6 + 5.26816933067023e-05*G0_1_7 - 0.000225477647352686*G0_1_8 - 2.52872127872171e-05*G0_1_9 - 1.79619487655232e-05*G0_2_0 - 3.52214749536238e-05*G0_2_1 - 1.40484515484539e-05*G0_2_2 - 0.000167076227344113*G0_2_3 + 0.000109276883830474*G0_2_4 - 2.01695625802803e-05*G0_2_5 + 4.03391251605606e-05*G0_2_6 + 4.03391251605604e-05*G0_2_7 - 0.000121318413729148*G0_2_8 - 0.000124629834451284*G0_2_9 - 0.000251366936634836*G0_3_0 - 0.000238121253746295*G0_3_1 - 0.000167076227344113*G0_3_2 - 0.00284481143856192*G0_3_3 + 0.0005933463857572*G0_3_4 + 0.000382017536035458*G0_3_5 + 4.0640163408027e-05*G0_3_6 + 0.000915758348794218*G0_3_7 - 0.00144137112887137*G0_3_8 - 0.00175565505922678*G0_3_9 + 8.0979288568588e-05*G0_4_0 + 0.000172795954045983*G0_4_1 + 0.000109276883830474*G0_4_2 + 0.0005933463857572*G0_4_3 - 0.000235712947766559*G0_4_4 - 8.1280326816055e-05*G0_4_5 + 4.06401634080277e-05*G0_4_6 - 0.000262806390038577*G0_4_7 + 0.000525612780077154*G0_4_8 + 0.000536450156985962*G0_4_9 + 1.68581418581446e-05*G0_5_0 - 5.71972670187052e-05*G0_5_1 - 2.01695625802803e-05*G0_5_2 + 0.000382017536035458*G0_5_3 - 8.1280326816055e-05*G0_5_4 - 0.000422657699443485*G0_5_5 + 4.06401634080273e-05*G0_5_6 - 0.000373889503353852*G0_5_7 + 0.000333249339945825*G0_5_8 - 0.000146304588268899*G0_5_9 + 4.03391251605606e-05*G0_6_0 + 4.03391251605606e-05*G0_6_1 + 4.03391251605606e-05*G0_6_2 + 4.06401634080271e-05*G0_6_3 + 4.06401634080277e-05*G0_6_4 + 4.06401634080273e-05*G0_6_5 + 4.0640163408028e-05*G0_6_6 + 4.06401634080277e-05*G0_6_7 + 4.06401634080273e-05*G0_6_8 + 0.000292609176537798*G0_6_9 + 6.32180319680422e-05*G0_7_0 + 5.26816933067022e-05*G0_7_1 + 4.03391251605604e-05*G0_7_2 + 0.000915758348794218*G0_7_3 - 0.000262806390038577*G0_7_4 - 0.000373889503353852*G0_7_5 + 4.06401634080277e-05*G0_7_6 - 0.000650242614528441*G0_7_7 + 0.000885955562294997*G0_7_8 + 0.000438913764806695*G0_7_9 - 0.000172494915798516*G0_8_0 - 0.000225477647352686*G0_8_1 - 0.000121318413729148*G0_8_2 - 0.00144137112887137*G0_8_3 + 0.000525612780077154*G0_8_4 + 0.000333249339945825*G0_8_5 + 4.06401634080273e-05*G0_8_6 + 0.000885955562294997*G0_8_7 - 0.0014793019480522*G0_8_8 - 0.000975363921792657*G0_8_9 - 0.000173398030540917*G0_9_0 - 2.52872127872171e-05*G0_9_1 - 0.000124629834451284*G0_9_2 - 0.00175565505922678*G0_9_3 + 0.000536450156985962*G0_9_4 - 0.000146304588268899*G0_9_5 + 0.000292609176537798*G0_9_6 + 0.000438913764806695*G0_9_7 - 0.000975363921792657*G0_9_8 - 0.00234087341230238*G0_9_9;
    A[16] = -1.77947052947083e-05*G0_0_0 - 1.28219994291443e-06*G0_0_1 + 4.47097545311907e-06*G0_0_2 - 1.79619487655232e-05*G0_0_3 + 3.59238975310465e-05*G0_0_4 - 5.82007278435948e-05*G0_0_5 + 5.50899992864371e-05*G0_0_6 - 3.52214749536237e-05*G0_0_7 + 6.12111103182634e-06*G0_0_8 + 1.46505280433877e-05*G0_0_9 - 1.28219994291443e-06*G0_1_0 - 8.19493006993136e-06*G0_1_1 - 1.21530255458847e-06*G0_1_2 - 4.28477772227845e-05*G0_1_3 + 5.68962287712384e-05*G0_1_4 - 3.15086699015323e-05*G0_1_5 + 7.92734051662757e-05*G0_1_6 - 1.40484515484539e-05*G0_1_7 - 2.73944805194851e-05*G0_1_8 + 3.09065934065986e-05*G0_1_9 + 4.47097545311907e-06*G0_2_0 - 1.21530255458847e-06*G0_2_1 + 4.89354395604478e-05*G0_2_2 - 1.81626409305011e-05*G0_2_3 + 5.33841158841249e-05*G0_2_4 - 5.82007278435948e-05*G0_2_5 + 5.7598651348661e-05*G0_2_6 - 1.79619487655232e-05*G0_2_7 + 1.45501819608987e-05*G0_2_8 - 1.8463679177968e-05*G0_2_9 - 1.79619487655232e-05*G0_3_0 - 4.28477772227845e-05*G0_3_1 - 1.81626409305011e-05*G0_3_2 + 6.32180319680425e-05*G0_3_3 - 0.000172494915798516*G0_3_4 + 8.0979288568588e-05*G0_3_5 - 0.000251366936634836*G0_3_6 + 4.03391251605606e-05*G0_3_7 + 1.68581418581447e-05*G0_3_8 - 0.000173398030540917*G0_3_9 + 3.59238975310465e-05*G0_4_0 + 5.68962287712384e-05*G0_4_1 + 5.33841158841249e-05*G0_4_2 - 0.000172494915798516*G0_4_3 + 0.000339571143142629*G0_4_4 - 0.000121318413729149*G0_4_5 + 0.000372685350363985*G0_4_6 - 2.01695625802804e-05*G0_4_7 - 5.71972670187053e-05*G0_4_8 + 0.000298027864992201*G0_4_9 - 5.82007278435948e-05*G0_5_0 - 3.15086699015323e-05*G0_5_1 - 5.82007278435948e-05*G0_5_2 + 8.0979288568588e-05*G0_5_3 - 0.000121318413729149*G0_5_4 - 7.49585236192504e-05*G0_5_5 - 7.49585236192507e-05*G0_5_6 - 0.000121318413729148*G0_5_7 + 8.09792885685879e-05*G0_5_8 - 0.000205910161267339*G0_5_9 + 5.50899992864371e-05*G0_6_0 + 7.92734051662757e-05*G0_6_1 + 5.7598651348661e-05*G0_6_2 - 0.000251366936634836*G0_6_3 + 0.000372685350363985*G0_6_4 - 7.49585236192507e-05*G0_6_5 + 0.000794740973312536*G0_6_6 + 4.03391251605603e-05*G0_6_7 - 0.000133962020122757*G0_6_8 + 0.000558124910803576*G0_6_9 - 3.52214749536237e-05*G0_7_0 - 1.40484515484539e-05*G0_7_1 - 1.79619487655232e-05*G0_7_2 + 4.03391251605606e-05*G0_7_3 - 2.01695625802804e-05*G0_7_4 - 0.000121318413729148*G0_7_5 + 4.03391251605603e-05*G0_7_6 - 0.000167076227344112*G0_7_7 + 0.000109276883830474*G0_7_8 - 0.000124629834451284*G0_7_9 + 6.12111103182634e-06*G0_8_0 - 2.73944805194851e-05*G0_8_1 + 1.45501819608987e-05*G0_8_2 + 1.68581418581447e-05*G0_8_3 - 5.71972670187053e-05*G0_8_4 + 8.09792885685878e-05*G0_8_5 - 0.000133962020122757*G0_8_6 + 0.000109276883830474*G0_8_7 - 1.26436063936082e-05*G0_8_8 + 2.16747538176148e-05*G0_8_9 + 1.46505280433877e-05*G0_9_0 + 3.09065934065986e-05*G0_9_1 - 1.8463679177968e-05*G0_9_2 - 0.000173398030540917*G0_9_3 + 0.000298027864992201*G0_9_4 - 0.000205910161267339*G0_9_5 + 0.000558124910803576*G0_9_6 - 0.000124629834451284*G0_9_7 + 2.16747538176148e-05*G0_9_8 + 0.000585218353075595*G0_9_9;
    A[69] = A[16] - 8.89735264735413e-06*G0_0_0 + 1.59327279863021e-05*G0_0_1 + 1.11830134151581e-05*G0_0_2 - 0.000106667885685761*G0_0_3 + 0.000262103967461155*G0_0_4 - 0.000207315006422184*G0_0_5 + 0.000232100488796957*G0_0_6 + 9.93426216640662e-06*G0_0_7 + 0.000473031432852942*G0_0_9 + 1.59327279863021e-05*G0_1_0 + 3.910152347653e-05*G0_1_1 - 1.72483766233795e-05*G0_1_2 - 0.000130550253318132*G0_1_3 + 0.000241131636220963*G0_1_4 - 0.000174401491365807*G0_1_5 + 0.000478851505637301*G0_1_6 - 0.00011058138290283*G0_1_7 + 4.90692343370999e-05*G0_1_8 + 0.000554311759668996*G0_1_9 + 1.11830134151581e-05*G0_2_0 - 1.72483766233795e-05*G0_2_1 + 8.45248501498644e-05*G0_2_2 - 7.12457185671585e-06*G0_2_3 - 2.80969030969083e-06*G0_2_4 - 0.000207315006422184*G0_2_5 + 1.82629870129903e-05*G0_2_6 - 0.000155436081775394*G0_2_7 + 7.12457185671581e-06*G0_2_8 - 0.000891875981161846*G0_2_9 - 0.000106667885685761*G0_3_0 - 0.000130550253318133*G0_3_1 - 7.12457185671585e-06*G0_3_2 + 0.000375695732838654*G0_3_3 - 0.000802869005994142*G0_3_4 + 0.000455470868417375*G0_3_5 - 0.00150428812259195*G0_3_6 + 0.000252270051377238*G0_3_7 - 0.000163162730127044*G0_3_8 - 0.00216747538176146*G0_3_9 + 0.000262103967461155*G0_4_0 + 0.000241131636220963*G0_4_1 - 2.80969030969085e-06*G0_4_2 - 0.000802869005994142*G0_4_3 + 0.00239144783787681*G0_4_4 - 0.00085404550806351*G0_4_5 + 0.00235833363065546*G0_4_6 - 0.000126135025688619*G0_4_7 - 8.91073212501928e-05*G0_4_8 + 0.00438371895961256*G0_4_9 - 0.000207315006422184*G0_5_0 - 0.000174401491365807*G0_5_1 - 0.000207315006422184*G0_5_2 + 0.000455470868417375*G0_5_3 - 0.00085404550806351*G0_5_4 - 0.000315187045097812*G0_5_5 - 0.000315187045097814*G0_5_6 - 0.000854045508063509*G0_5_7 + 0.000455470868417374*G0_5_8 - 0.00233003603539357*G0_5_9 + 0.000232100488796957*G0_6_0 + 0.000478851505637301*G0_6_1 + 1.82629870129902e-05*G0_6_2 - 0.00150428812259195*G0_6_3 + 0.00235833363065546*G0_6_4 - 0.000315187045097814*G0_6_5 + 0.00466729698872634*G0_6_6 + 0.000398574639646135*G0_6_7 - 0.000695097313401001*G0_6_8 + 0.00568420418866944*G0_6_9 + 9.93426216640659e-06*G0_7_0 - 0.00011058138290283*G0_7_1 - 0.000155436081775394*G0_7_2 + 0.000252270051377237*G0_7_3 - 0.000126135025688619*G0_7_4 - 0.000854045508063509*G0_7_5 + 0.000398574639646135*G0_7_6 - 0.00158857883188267*G0_7_7 + 0.000427173273155488*G0_7_8 - 0.0022162435778511*G0_7_9 + 4.90692343370999e-05*G0_8_1 + 7.1245718567158e-06*G0_8_2 - 0.000163162730127044*G0_8_3 - 8.91073212501928e-05*G0_8_4 + 0.000455470868417374*G0_8_5 - 0.000695097313401001*G0_8_6 + 0.000427173273155488*G0_8_7 - 0.000816415727130152*G0_8_8 - 0.0014847206365066*G0_8_9 + 0.000473031432852942*G0_9_0 + 0.000554311759668996*G0_9_1 - 0.000891875981161846*G0_9_2 - 0.00216747538176146*G0_9_3 + 0.00438371895961256*G0_9_4 - 0.00233003603539357*G0_9_5 + 0.00568420418866944*G0_9_6 - 0.0022162435778511*G0_9_7 - 0.0014847206365066*G0_9_8 + 0.00292609176537797*G0_9_9;
    A[37] = A[73];
    A[40] = A[16] + 9.59977522477694e-06*G0_0_0 - 1.35467211360091e-05*G0_0_3 + 4.33495076352292e-05*G0_0_4 + 1.53529506208103e-05*G0_0_5 + 1.80622948480125e-06*G0_0_6 + 7.82699443413867e-06*G0_0_7 - 2.01695625802803e-05*G0_0_8 + 1.6256065363211e-05*G0_0_9 - 9.59977522477699e-06*G0_1_1 - 1.53529506208104e-05*G0_1_3 - 1.80622948480121e-06*G0_1_4 + 1.35467211360091e-05*G0_1_5 - 4.33495076352292e-05*G0_1_6 + 2.01695625802803e-05*G0_1_7 - 7.82699443413868e-06*G0_1_8 - 1.62560653632109e-05*G0_1_9 - 4.00380869130937e-05*G0_2_3 + 4.21453546453616e-06*G0_2_4 + 4.00380869130937e-05*G0_2_5 - 4.21453546453615e-06*G0_2_6 + 3.25121307264219e-05*G0_2_7 - 3.25121307264219e-05*G0_2_8 - 1.35467211360091e-05*G0_3_0 - 1.53529506208104e-05*G0_3_1 - 4.00380869130937e-05*G0_3_2 - 0.000138176555587293*G0_3_3 + 9.75363921792658e-05*G0_3_4 + 0.000130048522905688*G0_3_6 + 4.06401634080274e-05*G0_3_7 - 0.000138176555587293*G0_3_8 - 3.2512130726422e-05*G0_3_9 + 4.33495076352292e-05*G0_4_0 - 1.80622948480121e-06*G0_4_1 + 4.21453546453615e-06*G0_4_2 + 9.75363921792658e-05*G0_4_3 + 0.000455169830169907*G0_4_4 - 0.000130048522905688*G0_4_5 - 0.000113792457542477*G0_4_7 + 9.75363921792659e-05*G0_4_8 + 0.000260097045811375*G0_4_9 + 1.53529506208103e-05*G0_5_0 + 1.35467211360091e-05*G0_5_1 + 4.00380869130937e-05*G0_5_2 - 0.000130048522905688*G0_5_4 + 0.000138176555587293*G0_5_5 - 9.75363921792657e-05*G0_5_6 + 0.000138176555587293*G0_5_7 - 4.06401634080273e-05*G0_5_8 + 3.25121307264219e-05*G0_5_9 + 1.80622948480125e-06*G0_6_0 - 4.33495076352292e-05*G0_6_1 - 4.21453546453617e-06*G0_6_2 + 0.000130048522905688*G0_6_3 - 9.75363921792657e-05*G0_6_5 - 0.000455169830169907*G0_6_6 - 9.75363921792657e-05*G0_6_7 + 0.000113792457542477*G0_6_8 - 0.000260097045811375*G0_6_9 + 7.82699443413867e-06*G0_7_0 + 2.01695625802803e-05*G0_7_1 + 3.25121307264219e-05*G0_7_2 + 4.06401634080274e-05*G0_7_3 - 0.000113792457542477*G0_7_4 + 0.000138176555587293*G0_7_5 - 9.75363921792657e-05*G0_7_6 + 0.000154432620950504*G0_7_7 + 0.000146304588268899*G0_7_9 - 2.01695625802803e-05*G0_8_0 - 7.82699443413869e-06*G0_8_1 - 3.25121307264219e-05*G0_8_2 - 0.000138176555587293*G0_8_3 + 9.75363921792659e-05*G0_8_4 - 4.06401634080273e-05*G0_8_5 + 0.000113792457542477*G0_8_6 - 0.000154432620950504*G0_8_8 - 0.000146304588268899*G0_8_9 + 1.6256065363211e-05*G0_9_0 - 1.62560653632109e-05*G0_9_1 - 3.25121307264221e-05*G0_9_3 + 0.000260097045811375*G0_9_4 + 3.25121307264219e-05*G0_9_5 - 0.000260097045811375*G0_9_6 + 0.000146304588268899*G0_9_7 - 0.000146304588268899*G0_9_8;
    A[4] = A[40];
    A[45] = A[73] + 2.00692164978011e-07*G0_0_1 - 2.00692164977926e-07*G0_0_2 + 0.000332346225203424*G0_0_3 - 0.000332346225203424*G0_0_4 + 4.63598901098981e-05*G0_0_5 - 0.000212834040959077*G0_0_6 - 4.63598901098974e-05*G0_0_7 + 0.000212834040959077*G0_0_8 + 2.00692164978004e-07*G0_1_0 + 0.000200190434565469*G0_1_1 + 0.000347398137576769*G0_1_3 - 0.000339872181390096*G0_1_4 + 9.75363921792658e-05*G0_1_5 - 0.000161657538889709*G0_1_6 - 7.28512558869825e-05*G0_1_7 + 0.000265816772513246*G0_1_8 - 9.93426216640671e-05*G0_1_9 - 2.00692164977923e-07*G0_2_0 - 0.000200190434565468*G0_2_2 + 0.000339872181390096*G0_2_3 - 0.000347398137576768*G0_2_4 + 7.28512558869826e-05*G0_2_5 - 0.000265816772513246*G0_2_6 - 9.75363921792656e-05*G0_2_7 + 0.000161657538889709*G0_2_8 + 9.93426216640672e-05*G0_2_9 + 0.000332346225203424*G0_3_0 + 0.000347398137576768*G0_3_1 + 0.000339872181390096*G0_3_2 + 0.00260909849079536*G0_3_3 - 0.000644823926074035*G0_3_5 + 0.000484972616669128*G0_3_6 - 0.000997038675610273*G0_3_7 + 0.0014820112922794*G0_3_8 + 0.00229210521621275*G0_3_9 - 0.000332346225203424*G0_4_0 - 0.000339872181390096*G0_4_1 - 0.000347398137576768*G0_4_2 - 0.00260909849079536*G0_4_4 + 0.000997038675610273*G0_4_5 - 0.0014820112922794*G0_4_6 + 0.000644823926074035*G0_4_7 - 0.000484972616669127*G0_4_8 - 0.00229210521621275*G0_4_9 + 4.63598901098981e-05*G0_5_0 + 9.75363921792658e-05*G0_5_1 + 7.28512558869826e-05*G0_5_2 - 0.000644823926074035*G0_5_3 + 0.000997038675610273*G0_5_4 - 0.000227584915084954*G0_5_5 + 0.000845315398886971*G0_5_6 - 0.000292609176537797*G0_5_8 + 0.000585218353075596*G0_5_9 - 0.000212834040959077*G0_6_0 - 0.000161657538889709*G0_6_1 - 0.000265816772513246*G0_6_2 + 0.000484972616669128*G0_6_3 - 0.0014820112922794*G0_6_4 + 0.000845315398886971*G0_6_5 - 0.00151994211146023*G0_6_6 + 0.000292609176537798*G0_6_7 - 0.00126797309833046*G0_6_9 - 4.63598901098974e-05*G0_7_0 - 7.28512558869825e-05*G0_7_1 - 9.75363921792656e-05*G0_7_2 - 0.000997038675610273*G0_7_3 + 0.000644823926074035*G0_7_4 + 0.000292609176537798*G0_7_6 + 0.000227584915084956*G0_7_7 - 0.00084531539888697*G0_7_8 - 0.000585218353075593*G0_7_9 + 0.000212834040959077*G0_8_0 + 0.000265816772513246*G0_8_1 + 0.000161657538889709*G0_8_2 + 0.0014820112922794*G0_8_3 - 0.000484972616669127*G0_8_4 - 0.000292609176537797*G0_8_5 - 0.00084531539888697*G0_8_7 + 0.00151994211146022*G0_8_8 + 0.00126797309833045*G0_8_9 - 9.9342621664067e-05*G0_9_1 + 9.93426216640671e-05*G0_9_2 + 0.00229210521621275*G0_9_3 - 0.00229210521621275*G0_9_4 + 0.000585218353075596*G0_9_5 - 0.00126797309833046*G0_9_6 - 0.000585218353075593*G0_9_7 + 0.00126797309833045*G0_9_8;
    A[78] = A[73] - 0.000318899850149903*G0_0_0 - 7.81695982588971e-05*G0_0_1 - 4.02387790780715e-05*G0_0_2 + 7.88720208363202e-05*G0_0_3 + 2.82975952618856e-05*G0_0_4 - 0.000242335789210829*G0_0_5 + 0.000132456828885422*G0_0_6 - 0.000701720154845272*G0_0_7 + 6.50242614528431e-05*G0_0_8 - 9.21177037248624e-05*G0_0_9 - 7.81695982588971e-05*G0_1_0 - 0.000147508741258766*G0_1_1 - 2.2979252889971e-05*G0_1_2 + 1.26436063936091e-05*G0_1_3 - 0.000115297648779811*G0_1_5 + 6.89377586699129e-05*G0_1_6 - 0.000160152347652374*G0_1_7 - 0.000413024475524546*G0_1_8 - 0.000240228521478562*G0_1_9 - 4.02387790780715e-05*G0_2_0 - 2.2979252889971e-05*G0_2_1 - 1.74602183530785e-05*G0_2_2 + 4.57578136149644e-05*G0_2_3 - 2.82975952618859e-05*G0_2_4 - 0.000101148851148868*G0_2_5 + 4.06401634080273e-05*G0_2_6 - 0.000115297648779811*G0_2_7 + 4.63598901098979e-05*G0_2_8 - 8.12803268160546e-05*G0_2_9 + 7.88720208363202e-05*G0_3_0 + 1.26436063936091e-05*G0_3_1 + 4.57578136149644e-05*G0_3_2 + 0.00140344030969055*G0_3_3 - 6.77336056800458e-05*G0_3_4 - 4.87681960896329e-05*G0_3_5 - 2.98027864992205e-05*G0_3_7 - 3.79308191808256e-05*G0_3_8 + 0.000780291137434126*G0_3_9 + 2.82975952618856e-05*G0_4_0 - 2.82975952618859e-05*G0_4_2 - 6.77336056800457e-05*G0_4_3 - 2.70934422720185e-05*G0_4_4 + 0.000121920490224082*G0_4_5 - 0.000121920490224082*G0_4_6 + 2.70934422720181e-05*G0_4_7 + 6.77336056800456e-05*G0_4_8 - 0.000242335789210829*G0_5_0 - 0.000115297648779811*G0_5_1 - 0.000101148851148868*G0_5_2 - 4.87681960896329e-05*G0_5_3 + 0.000121920490224082*G0_5_4 - 0.00101871342942788*G0_5_5 + 0.000484972616669126*G0_5_6 - 0.00110541244469834*G0_5_7 + 0.000552706222349172*G0_5_8 - 0.000829059333523757*G0_5_9 + 0.000132456828885422*G0_6_0 + 6.89377586699129e-05*G0_6_1 + 4.06401634080272e-05*G0_6_2 - 0.000121920490224082*G0_6_4 + 0.000484972616669126*G0_6_5 - 0.000303446553446605*G0_6_6 + 0.000552706222349172*G0_6_7 - 0.000276353111174586*G0_6_8 + 0.000243840980448163*G0_6_9 - 0.000701720154845272*G0_7_0 - 0.000160152347652374*G0_7_1 - 0.000115297648779811*G0_7_2 - 2.98027864992203e-05*G0_7_3 + 2.70934422720181e-05*G0_7_4 - 0.00110541244469834*G0_7_5 + 0.000552706222349172*G0_7_6 - 0.0025359461966609*G0_7_7 + 0.00226772111816793*G0_7_8 - 0.000829059333523757*G0_7_9 + 6.50242614528431e-05*G0_8_0 - 0.000413024475524546*G0_8_1 + 4.63598901098979e-05*G0_8_2 - 3.79308191808254e-05*G0_8_3 + 6.77336056800456e-05*G0_8_4 + 0.000552706222349172*G0_8_5 - 0.000276353111174586*G0_8_6 + 0.00226772111816793*G0_8_7 - 0.00170688686313715*G0_8_8 + 0.000585218353075594*G0_8_9 - 9.21177037248624e-05*G0_9_0 - 0.000240228521478562*G0_9_1 - 8.12803268160547e-05*G0_9_2 + 0.000780291137434126*G0_9_3 - 0.000829059333523757*G0_9_5 + 0.000243840980448163*G0_9_6 - 0.000829059333523757*G0_9_7 + 0.000585218353075594*G0_9_8 - 0.000195072784358532*G0_9_9;
    A[89] = A[69] + 1.00346082488955e-06*G0_0_1 - 1.00346082488954e-06*G0_0_2 + 0.000422657699443485*G0_0_3 - 0.000422657699443485*G0_0_4 + 0.000240228521478562*G0_0_5 - 0.000290802947052996*G0_0_6 - 0.000240228521478562*G0_0_7 + 0.000290802947052996*G0_0_8 + 1.00346082488955e-06*G0_1_0 + 0.000102553696303714*G0_1_1 + 0.000223972456115351*G0_1_3 - 0.000323315077779418*G0_1_4 + 3.25121307264223e-05*G0_1_5 - 0.000536450156985961*G0_1_6 - 0.000140885899814495*G0_1_7 + 5.41868845440357e-05*G0_1_8 - 0.00149555801341541*G0_1_9 - 1.00346082488954e-06*G0_2_0 - 0.000102553696303714*G0_2_2 + 0.000323315077779418*G0_2_3 - 0.000223972456115351*G0_2_4 + 0.000140885899814495*G0_2_5 - 5.41868845440368e-05*G0_2_6 - 3.2512130726422e-05*G0_2_7 + 0.000536450156985962*G0_2_8 + 0.00149555801341541*G0_2_9 + 0.000422657699443485*G0_3_0 + 0.000223972456115351*G0_3_1 + 0.000323315077779418*G0_3_2 + 0.00229210521621274*G0_3_3 - 0.000682754745254862*G0_3_5 + 0.00160935047095789*G0_3_6 - 0.00126797309833046*G0_3_7 + 0.00287732356928834*G0_3_8 + 0.00702262023690714*G0_3_9 - 0.000422657699443485*G0_4_0 - 0.000323315077779418*G0_4_1 - 0.000223972456115351*G0_4_2 - 0.00229210521621274*G0_4_4 + 0.00126797309833046*G0_4_5 - 0.00287732356928834*G0_4_6 + 0.000682754745254861*G0_4_7 - 0.00160935047095789*G0_4_8 - 0.00702262023690714*G0_4_9 + 0.000240228521478562*G0_5_0 + 3.25121307264223e-05*G0_5_1 + 0.000140885899814495*G0_5_2 - 0.000682754745254862*G0_5_3 + 0.00126797309833046*G0_5_4 - 0.00136550949050972*G0_5_5 + 0.000926595725703027*G0_5_6 - 9.75363921792675e-05*G0_5_8 + 0.000195072784358537*G0_5_9 - 0.000290802947052996*G0_6_0 - 0.000536450156985961*G0_6_1 - 5.41868845440368e-05*G0_6_2 + 0.00160935047095789*G0_6_3 - 0.00287732356928834*G0_6_4 + 0.000926595725703027*G0_6_5 - 0.00629109729556264*G0_6_6 + 9.75363921792665e-05*G0_6_7 - 0.007705374982162*G0_6_9 - 0.000240228521478562*G0_7_0 - 0.000140885899814495*G0_7_1 - 3.2512130726422e-05*G0_7_2 - 0.00126797309833046*G0_7_3 + 0.000682754745254861*G0_7_4 + 9.75363921792664e-05*G0_7_6 + 0.00136550949050972*G0_7_7 - 0.000926595725703025*G0_7_8 - 0.00019507278435853*G0_7_9 + 0.000290802947052996*G0_8_0 + 5.41868845440356e-05*G0_8_1 + 0.000536450156985962*G0_8_2 + 0.00287732356928834*G0_8_3 - 0.00160935047095789*G0_8_4 - 9.75363921792674e-05*G0_8_5 - 0.000926595725703025*G0_8_7 + 0.00629109729556265*G0_8_8 + 0.007705374982162*G0_8_9 - 0.00149555801341541*G0_9_1 + 0.00149555801341541*G0_9_2 + 0.00702262023690714*G0_9_3 - 0.00702262023690714*G0_9_4 + 0.000195072784358535*G0_9_5 - 0.007705374982162*G0_9_6 - 0.00019507278435853*G0_9_7 + 0.007705374982162*G0_9_8;
    A[93] = A[89] + 5.7598651348661e-05*G0_0_0 - 3.41176680462452e-05*G0_0_1 + 0.000260097045811375*G0_0_3 - 8.12803268160551e-05*G0_0_4 + 4.69619666048318e-05*G0_0_5 - 0.000121017375481682*G0_0_6 + 9.21177037248624e-05*G0_0_7 + 1.08373769088071e-05*G0_0_8 + 9.75363921792653e-05*G0_0_9 - 3.41176680462452e-05*G0_1_0 + 3.41176680462453e-05*G0_1_2 + 2.5287212787218e-05*G0_1_3 - 0.000240228521478562*G0_1_4 + 0.000195072784358531*G0_1_5 - 0.000195072784358532*G0_1_6 + 0.000240228521478562*G0_1_7 - 2.52872127872165e-05*G0_1_8 + 3.41176680462453e-05*G0_2_1 - 5.75986513486612e-05*G0_2_2 - 1.08373769088071e-05*G0_2_3 - 9.2117703724862e-05*G0_2_4 + 0.000121017375481682*G0_2_5 - 4.69619666048315e-05*G0_2_6 + 8.12803268160547e-05*G0_2_7 - 0.000260097045811376*G0_2_8 - 9.75363921792657e-05*G0_2_9 + 0.000260097045811375*G0_3_0 + 2.52872127872181e-05*G0_3_1 - 1.08373769088071e-05*G0_3_2 + 0.00273101898101944*G0_3_3 + 0.000585218353075595*G0_3_4 - 0.00068275474525486*G0_3_5 + 0.000585218353075596*G0_3_6 - 0.000780291137434126*G0_3_7 + 0.00156058227486825*G0_3_9 - 8.1280326816055e-05*G0_4_0 - 0.000240228521478562*G0_4_1 - 9.2117703724862e-05*G0_4_2 + 0.000585218353075595*G0_4_3 - 0.000829059333523761*G0_4_4 + 0.000243840980448165*G0_4_5 - 0.00082905933352376*G0_4_6 + 0.000780291137434127*G0_4_8 - 0.000195072784358532*G0_4_9 + 4.69619666048318e-05*G0_5_0 + 0.000195072784358531*G0_5_1 + 0.000121017375481682*G0_5_2 - 0.00068275474525486*G0_5_3 + 0.000243840980448165*G0_5_4 + 0.000926595725703023*G0_5_5 + 0.000829059333523757*G0_5_7 - 0.000585218353075593*G0_5_8 + 0.000877827529613391*G0_5_9 - 0.000121017375481682*G0_6_0 - 0.000195072784358532*G0_6_1 - 4.69619666048315e-05*G0_6_2 + 0.000585218353075596*G0_6_3 - 0.00082905933352376*G0_6_4 - 0.000926595725703026*G0_6_6 - 0.000243840980448163*G0_6_7 + 0.000682754745254861*G0_6_8 - 0.000877827529613392*G0_6_9 + 9.21177037248624e-05*G0_7_0 + 0.000240228521478562*G0_7_1 + 8.12803268160547e-05*G0_7_2 - 0.000780291137434126*G0_7_3 + 0.000829059333523757*G0_7_5 - 0.000243840980448163*G0_7_6 + 0.000829059333523757*G0_7_7 - 0.000585218353075594*G0_7_8 + 0.000195072784358533*G0_7_9 + 1.08373769088072e-05*G0_8_0 - 2.52872127872164e-05*G0_8_1 - 0.000260097045811376*G0_8_2 + 0.000780291137434127*G0_8_4 - 0.000585218353075593*G0_8_5 + 0.000682754745254861*G0_8_6 - 0.000585218353075594*G0_8_7 - 0.00273101898101945*G0_8_8 - 0.00156058227486825*G0_8_9 + 9.75363921792654e-05*G0_9_0 - 9.75363921792657e-05*G0_9_2 + 0.00156058227486825*G0_9_3 - 0.000195072784358532*G0_9_4 + 0.000877827529613392*G0_9_5 - 0.000877827529613392*G0_9_6 + 0.000195072784358533*G0_9_7 - 0.00156058227486825*G0_9_8;
    A[94] = A[69] + 5.75986513486611e-05*G0_0_0 - 3.41176680462452e-05*G0_0_2 - 8.12803268160549e-05*G0_0_3 + 0.000260097045811375*G0_0_4 + 9.21177037248619e-05*G0_0_5 + 1.08373769088073e-05*G0_0_6 + 4.69619666048316e-05*G0_0_7 - 0.000121017375481681*G0_0_8 + 9.75363921792656e-05*G0_0_9 - 5.75986513486612e-05*G0_1_1 + 3.41176680462452e-05*G0_1_2 - 9.21177037248623e-05*G0_1_3 - 1.08373769088075e-05*G0_1_4 + 8.12803268160549e-05*G0_1_5 - 0.000260097045811375*G0_1_6 + 0.000121017375481682*G0_1_7 - 4.69619666048316e-05*G0_1_8 - 9.75363921792659e-05*G0_1_9 - 3.41176680462452e-05*G0_2_0 + 3.41176680462452e-05*G0_2_1 - 0.000240228521478562*G0_2_3 + 2.5287212787217e-05*G0_2_4 + 0.000240228521478562*G0_2_5 - 2.52872127872173e-05*G0_2_6 + 0.000195072784358531*G0_2_7 - 0.000195072784358531*G0_2_8 - 8.12803268160549e-05*G0_3_0 - 9.21177037248623e-05*G0_3_1 - 0.000240228521478562*G0_3_2 - 0.000829059333523759*G0_3_3 + 0.000585218353075595*G0_3_4 + 0.000780291137434126*G0_3_6 + 0.000243840980448164*G0_3_7 - 0.000829059333523759*G0_3_8 - 0.000195072784358532*G0_3_9 + 0.000260097045811375*G0_4_0 - 1.08373769088074e-05*G0_4_1 + 2.5287212787217e-05*G0_4_2 + 0.000585218353075594*G0_4_3 + 0.00273101898101944*G0_4_4 - 0.000780291137434126*G0_4_5 - 0.000682754745254861*G0_4_7 + 0.000585218353075595*G0_4_8 + 0.00156058227486825*G0_4_9 + 9.21177037248619e-05*G0_5_0 + 8.12803268160549e-05*G0_5_1 + 0.000240228521478562*G0_5_2 - 0.000780291137434127*G0_5_4 + 0.000829059333523759*G0_5_5 - 0.000585218353075594*G0_5_6 + 0.000829059333523759*G0_5_7 - 0.000243840980448165*G0_5_8 + 0.000195072784358533*G0_5_9 + 1.08373769088073e-05*G0_6_0 - 0.000260097045811375*G0_6_1 - 2.52872127872172e-05*G0_6_2 + 0.000780291137434126*G0_6_3 - 0.000585218353075594*G0_6_5 - 0.00273101898101944*G0_6_6 - 0.000585218353075594*G0_6_7 + 0.00068275474525486*G0_6_8 - 0.00156058227486825*G0_6_9 + 4.69619666048316e-05*G0_7_0 + 0.000121017375481682*G0_7_1 + 0.000195072784358531*G0_7_2 + 0.000243840980448164*G0_7_3 - 0.000682754745254861*G0_7_4 + 0.000829059333523759*G0_7_5 - 0.000585218353075594*G0_7_6 + 0.000926595725703025*G0_7_7 + 0.000877827529613392*G0_7_9 - 0.000121017375481681*G0_8_0 - 4.69619666048316e-05*G0_8_1 - 0.000195072784358531*G0_8_2 - 0.000829059333523758*G0_8_3 + 0.000585218353075595*G0_8_4 - 0.000243840980448165*G0_8_5 + 0.00068275474525486*G0_8_6 - 0.000926595725703025*G0_8_8 - 0.000877827529613393*G0_8_9 + 9.75363921792656e-05*G0_9_0 - 9.75363921792658e-05*G0_9_1 - 0.000195072784358532*G0_9_3 + 0.00156058227486825*G0_9_4 + 0.000195072784358533*G0_9_5 - 0.00156058227486825*G0_9_6 + 0.000877827529613391*G0_9_7 - 0.000877827529613393*G0_9_8;
    A[51] = -A[16] + 3.11407342657395e-05*G0_0_0 - 3.41176680462455e-06*G0_0_3 + 1.79619487655232e-05*G0_0_4 - 6.02076494933799e-07*G0_0_5 - 3.11072855715763e-06*G0_0_6 + 1.81626409305011e-05*G0_0_7 - 1.20415298986748e-05*G0_0_8 - 3.81315113458034e-06*G0_0_9 - 7.02422577422699e-05*G0_1_3 + 4.28477772227846e-05*G0_1_4 + 4.77647352647433e-05*G0_1_5 + 4.77647352647433e-05*G0_1_6 + 4.28477772227846e-05*G0_1_7 - 7.02422577422699e-05*G0_1_8 + 6.18131868131971e-05*G0_1_9 + 3.11407342657395e-05*G0_2_2 - 1.20415298986748e-05*G0_2_3 + 1.81626409305011e-05*G0_2_4 - 3.11072855715767e-06*G0_2_5 - 6.02076494933758e-07*G0_2_6 + 1.79619487655232e-05*G0_2_7 - 3.41176680462452e-06*G0_2_8 - 3.81315113458032e-06*G0_2_9 - 3.41176680462456e-06*G0_3_0 - 7.02422577422699e-05*G0_3_1 - 1.20415298986748e-05*G0_3_2 + 5.05744255744338e-05*G0_3_3 - 6.32180319680425e-05*G0_3_4 - 5.29827315541689e-05*G0_3_5 - 0.000170387648066248*G0_3_6 - 1.68581418581446e-05*G0_3_7 + 3.37162837162893e-05*G0_3_8 - 0.000151723276723302*G0_3_9 + 1.79619487655232e-05*G0_4_0 + 4.28477772227846e-05*G0_4_1 + 1.81626409305011e-05*G0_4_2 - 6.32180319680425e-05*G0_4_3 + 0.000172494915798516*G0_4_4 - 8.0979288568588e-05*G0_4_5 + 0.000251366936634836*G0_4_6 - 4.03391251605606e-05*G0_4_7 - 1.68581418581447e-05*G0_4_8 + 0.000173398030540917*G0_4_9 - 6.02076494933792e-07*G0_5_0 + 4.77647352647433e-05*G0_5_1 - 3.11072855715767e-06*G0_5_2 - 5.29827315541689e-05*G0_5_3 - 8.0979288568588e-05*G0_5_4 + 0.000719782449693285*G0_5_5 - 0.000149917047238501*G0_5_6 + 0.000251366936634836*G0_5_7 - 0.000170387648066248*G0_5_8 + 0.000352214749536237*G0_5_9 - 3.11072855715761e-06*G0_6_0 + 4.77647352647433e-05*G0_6_1 - 6.02076494933758e-07*G0_6_2 - 0.000170387648066248*G0_6_3 + 0.000251366936634836*G0_6_4 - 0.000149917047238501*G0_6_5 + 0.000719782449693285*G0_6_6 - 8.0979288568588e-05*G0_6_7 - 5.2982731554169e-05*G0_6_8 + 0.000352214749536237*G0_6_9 + 1.8162640930501e-05*G0_7_0 + 4.28477772227846e-05*G0_7_1 + 1.79619487655232e-05*G0_7_2 - 1.68581418581446e-05*G0_7_3 - 4.03391251605606e-05*G0_7_4 + 0.000251366936634836*G0_7_5 - 8.0979288568588e-05*G0_7_6 + 0.000172494915798516*G0_7_7 - 6.32180319680423e-05*G0_7_8 + 0.000173398030540917*G0_7_9 - 1.20415298986748e-05*G0_8_0 - 7.02422577422699e-05*G0_8_1 - 3.41176680462452e-06*G0_8_2 + 3.37162837162892e-05*G0_8_3 - 1.68581418581447e-05*G0_8_4 - 0.000170387648066248*G0_8_5 - 5.2982731554169e-05*G0_8_6 - 6.32180319680423e-05*G0_8_7 + 5.05744255744337e-05*G0_8_8 - 0.000151723276723302*G0_8_9 - 3.81315113458034e-06*G0_9_0 + 6.18131868131971e-05*G0_9_1 - 3.81315113458032e-06*G0_9_2 - 0.000151723276723302*G0_9_3 + 0.000173398030540917*G0_9_4 + 0.000352214749536237*G0_9_5 + 0.000352214749536237*G0_9_6 + 0.000173398030540917*G0_9_7 - 0.000151723276723302*G0_9_8 + 0.00117043670615119*G0_9_9;
    A[72] = A[51] - 3.25121307264219e-05*G0_0_3 + 3.25121307264219e-05*G0_0_4 - 4.21453546453616e-06*G0_0_5 + 4.00380869130936e-05*G0_0_6 + 4.21453546453615e-06*G0_0_7 - 4.00380869130936e-05*G0_0_8 - 9.59977522477613e-06*G0_1_1 - 7.82699443413841e-06*G0_1_3 + 2.01695625802802e-05*G0_1_4 - 4.33495076352292e-05*G0_1_5 + 1.35467211360091e-05*G0_1_6 - 1.80622948480144e-06*G0_1_7 - 1.53529506208099e-05*G0_1_8 - 1.62560653632109e-05*G0_1_9 + 9.59977522477657e-06*G0_2_2 - 2.01695625802802e-05*G0_2_3 + 7.82699443413848e-06*G0_2_4 + 1.80622948480128e-06*G0_2_5 + 1.53529506208102e-05*G0_2_6 + 4.33495076352292e-05*G0_2_7 - 1.35467211360091e-05*G0_2_8 + 1.62560653632109e-05*G0_2_9 - 3.25121307264219e-05*G0_3_0 - 7.82699443413841e-06*G0_3_1 - 2.01695625802802e-05*G0_3_2 - 0.000154432620950504*G0_3_3 + 0.000113792457542477*G0_3_5 - 4.06401634080274e-05*G0_3_6 + 9.75363921792656e-05*G0_3_7 - 0.000138176555587293*G0_3_8 - 0.000146304588268899*G0_3_9 + 3.25121307264219e-05*G0_4_0 + 2.01695625802802e-05*G0_4_1 + 7.82699443413848e-06*G0_4_2 + 0.000154432620950504*G0_4_4 - 9.75363921792658e-05*G0_4_5 + 0.000138176555587293*G0_4_6 - 0.000113792457542477*G0_4_7 + 4.06401634080273e-05*G0_4_8 + 0.000146304588268899*G0_4_9 - 4.21453546453617e-06*G0_5_0 - 4.33495076352292e-05*G0_5_1 + 1.80622948480128e-06*G0_5_2 + 0.000113792457542477*G0_5_3 - 9.75363921792658e-05*G0_5_4 - 0.000455169830169906*G0_5_5 - 9.75363921792656e-05*G0_5_6 + 0.000130048522905688*G0_5_8 - 0.000260097045811375*G0_5_9 + 4.00380869130936e-05*G0_6_0 + 1.35467211360091e-05*G0_6_1 + 1.53529506208102e-05*G0_6_2 - 4.06401634080274e-05*G0_6_3 + 0.000138176555587293*G0_6_4 - 9.75363921792656e-05*G0_6_5 + 0.000138176555587293*G0_6_6 - 0.000130048522905688*G0_6_7 + 3.25121307264223e-05*G0_6_9 + 4.21453546453617e-06*G0_7_0 - 1.80622948480144e-06*G0_7_1 + 4.33495076352292e-05*G0_7_2 + 9.75363921792656e-05*G0_7_3 - 0.000113792457542477*G0_7_4 - 0.000130048522905688*G0_7_6 + 0.000455169830169906*G0_7_7 + 9.75363921792656e-05*G0_7_8 + 0.000260097045811375*G0_7_9 - 4.00380869130936e-05*G0_8_0 - 1.53529506208099e-05*G0_8_1 - 1.35467211360091e-05*G0_8_2 - 0.000138176555587293*G0_8_3 + 4.06401634080273e-05*G0_8_4 + 0.000130048522905688*G0_8_5 + 9.75363921792656e-05*G0_8_7 - 0.000138176555587292*G0_8_8 - 3.2512130726422e-05*G0_8_9 - 1.62560653632109e-05*G0_9_1 + 1.62560653632109e-05*G0_9_2 - 0.000146304588268899*G0_9_3 + 0.000146304588268899*G0_9_4 - 0.000260097045811375*G0_9_5 + 3.25121307264223e-05*G0_9_6 + 0.000260097045811375*G0_9_7 - 3.25121307264219e-05*G0_9_8;
    A[7] = A[72] + 0.000641780094905203*G0_0_0 + 6.60054231482914e-05*G0_0_1 + 5.01507421150362e-05*G0_0_2 - 2.48858284572616e-05*G0_0_3 - 4.19446624803838e-05*G0_0_4 + 0.000375093656343719*G0_0_5 - 0.000196076245183421*G0_0_6 + 0.000799356893107027*G0_0_7 - 0.000303546899529093*G0_0_8 + 0.00015192396888828*G0_0_9 + 6.60054231482914e-05*G0_1_0 - 7.25836663336794e-06*G0_1_1 + 1.70588340231226e-05*G0_1_3 + 1.74602183530783e-05*G0_1_5 - 1.72595261881005e-05*G0_1_6 + 0.000117705954759546*G0_1_7 - 3.81315113458036e-05*G0_1_8 + 1.00346082488957e-06*G0_1_9 + 5.01507421150362e-05*G0_2_0 - 3.91349721706937e-06*G0_2_3 + 4.1944662480384e-05*G0_2_4 - 3.51211288711361e-06*G0_2_5 + 2.46851362922835e-05*G0_2_6 - 2.16747538176147e-05*G0_2_7 - 2.66920579420624e-05*G0_2_8 - 4.93702725845665e-05*G0_2_9 - 2.48858284572616e-05*G0_3_0 + 1.70588340231226e-05*G0_3_1 - 3.91349721706937e-06*G0_3_2 - 8.42907092907236e-05*G0_3_3 - 2.82975952618858e-05*G0_3_4 + 3.70277044384249e-05*G0_3_5 + 2.28789068074818e-05*G0_3_7 - 5.11765020693677e-05*G0_3_8 - 4.87681960896328e-05*G0_3_9 - 4.19446624803838e-05*G0_4_0 + 4.1944662480384e-05*G0_4_2 - 2.82975952618858e-05*G0_4_3 - 0.000121318413729148*G0_4_4 + 7.405540887685e-05*G0_4_5 - 7.405540887685e-05*G0_4_6 + 0.000121318413729149*G0_4_7 + 2.82975952618857e-05*G0_4_8 + 0.000375093656343719*G0_5_0 + 1.74602183530784e-05*G0_5_1 - 3.51211288711362e-06*G0_5_2 + 3.70277044384249e-05*G0_5_3 + 7.405540887685e-05*G0_5_4 + 0.00012402775795635*G0_5_5 - 5.29827315541689e-05*G0_5_6 + 9.09135507349943e-05*G0_5_7 - 0.000104159233623536*G0_5_8 - 0.000247453439417767*G0_5_9 - 0.000196076245183421*G0_6_0 - 1.72595261881005e-05*G0_6_1 + 2.46851362922835e-05*G0_6_2 - 7.405540887685e-05*G0_6_4 - 5.29827315541689e-05*G0_6_5 - 1.05363386613404e-05*G0_6_6 + 1.32456828885424e-05*G0_6_7 + 9.18166654773951e-05*G0_6_8 + 0.0001481108177537*G0_6_9 + 0.000799356893107027*G0_7_0 + 0.000117705954759546*G0_7_1 - 2.16747538176146e-05*G0_7_2 + 2.28789068074818e-05*G0_7_3 + 0.000121318413729149*G0_7_4 + 9.09135507349943e-05*G0_7_5 + 1.32456828885425e-05*G0_7_6 + 0.000596055729984402*G0_7_7 - 0.000563543599257979*G0_7_8 - 0.000482263272441924*G0_7_9 - 0.000303546899529093*G0_8_0 - 3.81315113458036e-05*G0_8_1 - 2.66920579420624e-05*G0_8_2 - 5.11765020693677e-05*G0_8_3 + 2.82975952618857e-05*G0_8_4 - 0.000104159233623536*G0_8_5 + 9.18166654773951e-05*G0_8_6 - 0.000563543599257979*G0_8_7 - 3.25121307264224e-05*G0_8_8 - 5.96055729984405e-05*G0_8_9 + 0.00015192396888828*G0_9_0 + 1.00346082488957e-06*G0_9_1 - 4.93702725845665e-05*G0_9_2 - 4.87681960896328e-05*G0_9_3 - 0.000247453439417767*G0_9_5 + 0.0001481108177537*G0_9_6 - 0.000482263272441924*G0_9_7 - 5.96055729984405e-05*G0_9_8 - 0.00149555801341541*G0_9_9;
    A[82] = -A[72] + 3.11407342657395e-05*G0_0_0 + 1.79619487655232e-05*G0_0_3 - 3.41176680462452e-06*G0_0_4 + 1.81626409305011e-05*G0_0_5 - 1.20415298986748e-05*G0_0_6 - 6.02076494933785e-07*G0_0_7 - 3.11072855715763e-06*G0_0_8 - 3.81315113458032e-06*G0_0_9 + 3.11407342657395e-05*G0_1_1 + 1.81626409305011e-05*G0_1_3 - 1.20415298986748e-05*G0_1_4 + 1.79619487655232e-05*G0_1_5 - 3.41176680462451e-06*G0_1_6 - 3.11072855715769e-06*G0_1_7 - 6.02076494933819e-07*G0_1_8 - 3.81315113458041e-06*G0_1_9 + 4.28477772227844e-05*G0_2_3 - 7.02422577422696e-05*G0_2_4 + 4.28477772227845e-05*G0_2_5 - 7.02422577422696e-05*G0_2_6 + 4.77647352647433e-05*G0_2_7 + 4.77647352647433e-05*G0_2_8 + 6.18131868131972e-05*G0_2_9 + 1.79619487655232e-05*G0_3_0 + 1.81626409305011e-05*G0_3_1 + 4.28477772227844e-05*G0_3_2 + 0.000172494915798516*G0_3_3 - 6.32180319680425e-05*G0_3_4 - 4.03391251605606e-05*G0_3_5 - 1.68581418581447e-05*G0_3_6 - 8.09792885685879e-05*G0_3_7 + 0.000251366936634836*G0_3_8 + 0.000173398030540917*G0_3_9 - 3.41176680462452e-06*G0_4_0 - 1.20415298986748e-05*G0_4_1 - 7.02422577422696e-05*G0_4_2 - 6.32180319680425e-05*G0_4_3 + 5.05744255744341e-05*G0_4_4 - 1.68581418581447e-05*G0_4_5 + 3.37162837162894e-05*G0_4_6 - 5.2982731554169e-05*G0_4_7 - 0.000170387648066248*G0_4_8 - 0.000151723276723302*G0_4_9 + 1.81626409305011e-05*G0_5_0 + 1.79619487655232e-05*G0_5_1 + 4.28477772227845e-05*G0_5_2 - 4.03391251605606e-05*G0_5_3 - 1.68581418581447e-05*G0_5_4 + 0.000172494915798516*G0_5_5 - 6.32180319680426e-05*G0_5_6 + 0.000251366936634836*G0_5_7 - 8.0979288568588e-05*G0_5_8 + 0.000173398030540917*G0_5_9 - 1.20415298986748e-05*G0_6_0 - 3.4117668046245e-06*G0_6_1 - 7.02422577422696e-05*G0_6_2 - 1.68581418581447e-05*G0_6_3 + 3.37162837162894e-05*G0_6_4 - 6.32180319680426e-05*G0_6_5 + 5.05744255744341e-05*G0_6_6 - 0.000170387648066248*G0_6_7 - 5.29827315541691e-05*G0_6_8 - 0.000151723276723302*G0_6_9 - 6.02076494933785e-07*G0_7_0 - 3.1107285571577e-06*G0_7_1 + 4.77647352647433e-05*G0_7_2 - 8.09792885685879e-05*G0_7_3 - 5.2982731554169e-05*G0_7_4 + 0.000251366936634836*G0_7_5 - 0.000170387648066248*G0_7_6 + 0.000719782449693284*G0_7_7 - 0.000149917047238501*G0_7_8 + 0.000352214749536237*G0_7_9 - 3.11072855715763e-06*G0_8_0 - 6.02076494933819e-07*G0_8_1 + 4.77647352647433e-05*G0_8_2 + 0.000251366936634836*G0_8_3 - 0.000170387648066248*G0_8_4 - 8.0979288568588e-05*G0_8_5 - 5.29827315541691e-05*G0_8_6 - 0.000149917047238501*G0_8_7 + 0.000719782449693285*G0_8_8 + 0.000352214749536238*G0_8_9 - 3.81315113458033e-06*G0_9_0 - 3.81315113458042e-06*G0_9_1 + 6.18131868131972e-05*G0_9_2 + 0.000173398030540917*G0_9_3 - 0.000151723276723302*G0_9_4 + 0.000173398030540917*G0_9_5 - 0.000151723276723302*G0_9_6 + 0.000352214749536237*G0_9_7 + 0.000352214749536238*G0_9_8 + 0.00117043670615119*G0_9_9;
    A[15] = A[51];
    A[36] = A[45] + 2.87993256743307e-05*G0_0_0 - 1.70588340231226e-05*G0_0_2 - 4.06401634080274e-05*G0_0_3 + 0.000130048522905688*G0_0_4 + 4.60588518624311e-05*G0_0_5 + 5.4186884544036e-06*G0_0_6 + 2.34809833024159e-05*G0_0_7 - 6.05086877408408e-05*G0_0_8 + 4.8768196089633e-05*G0_0_9 - 2.87993256743307e-05*G0_1_1 + 1.70588340231226e-05*G0_1_2 - 4.60588518624313e-05*G0_1_3 - 5.41868845440363e-06*G0_1_4 + 4.06401634080274e-05*G0_1_5 - 0.000130048522905688*G0_1_6 + 6.05086877408409e-05*G0_1_7 - 2.34809833024159e-05*G0_1_8 - 4.87681960896328e-05*G0_1_9 - 1.70588340231226e-05*G0_2_0 + 1.70588340231226e-05*G0_2_1 - 0.000120114260739281*G0_2_3 + 1.26436063936087e-05*G0_2_4 + 0.000120114260739281*G0_2_5 - 1.26436063936084e-05*G0_2_6 + 9.75363921792658e-05*G0_2_7 - 9.75363921792658e-05*G0_2_8 - 4.06401634080274e-05*G0_3_0 - 4.60588518624313e-05*G0_3_1 - 0.000120114260739281*G0_3_2 - 0.000414529666761878*G0_3_3 + 0.000292609176537797*G0_3_4 + 0.000390145568717063*G0_3_6 + 0.000121920490224082*G0_3_7 - 0.000414529666761879*G0_3_8 - 9.7536392179266e-05*G0_3_9 + 0.000130048522905688*G0_4_0 - 5.41868845440366e-06*G0_4_1 + 1.26436063936087e-05*G0_4_2 + 0.000292609176537797*G0_4_3 + 0.00136550949050972*G0_4_4 - 0.000390145568717063*G0_4_5 - 0.00034137737262743*G0_4_7 + 0.000292609176537797*G0_4_8 + 0.000780291137434127*G0_4_9 + 4.60588518624311e-05*G0_5_0 + 4.06401634080274e-05*G0_5_1 + 0.000120114260739281*G0_5_2 - 0.000390145568717063*G0_5_4 + 0.00041452966676188*G0_5_5 - 0.000292609176537797*G0_5_6 + 0.00041452966676188*G0_5_7 - 0.000121920490224082*G0_5_8 + 9.7536392179266e-05*G0_5_9 + 5.4186884544036e-06*G0_6_0 - 0.000130048522905688*G0_6_1 - 1.26436063936084e-05*G0_6_2 + 0.000390145568717063*G0_6_3 - 0.000292609176537797*G0_6_5 - 0.00136550949050972*G0_6_6 - 0.000292609176537797*G0_6_7 + 0.00034137737262743*G0_6_8 - 0.000780291137434126*G0_6_9 + 2.34809833024159e-05*G0_7_0 + 6.05086877408409e-05*G0_7_1 + 9.75363921792658e-05*G0_7_2 + 0.000121920490224082*G0_7_3 - 0.000341377372627431*G0_7_4 + 0.00041452966676188*G0_7_5 - 0.000292609176537797*G0_7_6 + 0.000463297862851513*G0_7_7 + 0.000438913764806696*G0_7_9 - 6.05086877408408e-05*G0_8_0 - 2.34809833024159e-05*G0_8_1 - 9.75363921792658e-05*G0_8_2 - 0.00041452966676188*G0_8_3 + 0.000292609176537798*G0_8_4 - 0.000121920490224082*G0_8_5 + 0.00034137737262743*G0_8_6 - 0.000463297862851513*G0_8_8 - 0.000438913764806696*G0_8_9 + 4.8768196089633e-05*G0_9_0 - 4.87681960896328e-05*G0_9_1 - 9.75363921792659e-05*G0_9_3 + 0.000780291137434127*G0_9_4 + 9.75363921792661e-05*G0_9_5 - 0.000780291137434126*G0_9_6 + 0.000438913764806696*G0_9_7 - 0.000438913764806696*G0_9_8;
    A[85] = A[36] - 0.000200190434565468*G0_0_0 - 2.00692164977882e-07*G0_0_1 - 9.75363921792658e-05*G0_0_3 + 0.000161657538889709*G0_0_4 - 0.000347398137576767*G0_0_5 + 0.000339872181390096*G0_0_6 - 0.000265816772513245*G0_0_7 + 7.28512558869821e-05*G0_0_8 + 9.9342621664067e-05*G0_0_9 - 2.00692164977892e-07*G0_1_0 + 2.00692164977902e-07*G0_1_2 - 4.6359890109898e-05*G0_1_3 + 0.000212834040959077*G0_1_4 - 0.000332346225203424*G0_1_5 + 0.000332346225203424*G0_1_6 - 0.000212834040959076*G0_1_7 + 4.63598901098972e-05*G0_1_8 + 2.00692164977906e-07*G0_2_1 + 0.000200190434565468*G0_2_2 - 7.28512558869824e-05*G0_2_3 + 0.000265816772513246*G0_2_4 - 0.000339872181390096*G0_2_5 + 0.000347398137576767*G0_2_6 - 0.000161657538889709*G0_2_7 + 9.75363921792657e-05*G0_2_8 - 9.93426216640671e-05*G0_2_9 - 9.75363921792658e-05*G0_3_0 - 4.6359890109898e-05*G0_3_1 - 7.28512558869824e-05*G0_3_2 + 0.000227584915084952*G0_3_3 - 0.00084531539888697*G0_3_4 + 0.000644823926074035*G0_3_5 - 0.000997038675610273*G0_3_6 + 0.000292609176537798*G0_3_7 - 0.000585218353075596*G0_3_9 + 0.000161657538889709*G0_4_0 + 0.000212834040959077*G0_4_1 + 0.000265816772513246*G0_4_2 - 0.000845315398886971*G0_4_3 + 0.00151994211146022*G0_4_4 - 0.000484972616669127*G0_4_5 + 0.0014820112922794*G0_4_6 - 0.000292609176537797*G0_4_8 + 0.00126797309833046*G0_4_9 - 0.000347398137576767*G0_5_0 - 0.000332346225203424*G0_5_1 - 0.000339872181390096*G0_5_2 + 0.000644823926074035*G0_5_3 - 0.000484972616669127*G0_5_4 - 0.00260909849079535*G0_5_5 - 0.0014820112922794*G0_5_7 + 0.00099703867561027*G0_5_8 - 0.00229210521621274*G0_5_9 + 0.000339872181390096*G0_6_0 + 0.000332346225203424*G0_6_1 + 0.000347398137576767*G0_6_2 - 0.000997038675610273*G0_6_3 + 0.0014820112922794*G0_6_4 + 0.00260909849079536*G0_6_6 + 0.000484972616669126*G0_6_7 - 0.000644823926074034*G0_6_8 + 0.00229210521621275*G0_6_9 - 0.000265816772513245*G0_7_0 - 0.000212834040959076*G0_7_1 - 0.000161657538889709*G0_7_2 + 0.000292609176537798*G0_7_3 - 0.0014820112922794*G0_7_5 + 0.000484972616669126*G0_7_6 - 0.00151994211146022*G0_7_7 + 0.00084531539888697*G0_7_8 - 0.00126797309833045*G0_7_9 + 7.28512558869821e-05*G0_8_0 + 4.63598901098972e-05*G0_8_1 + 9.75363921792656e-05*G0_8_2 - 0.000292609176537797*G0_8_4 + 0.00099703867561027*G0_8_5 - 0.000644823926074034*G0_8_6 + 0.00084531539888697*G0_8_7 - 0.000227584915084956*G0_8_8 + 0.000585218353075593*G0_8_9 + 9.9342621664067e-05*G0_9_0 - 9.93426216640671e-05*G0_9_2 - 0.000585218353075596*G0_9_3 + 0.00126797309833046*G0_9_4 - 0.00229210521621274*G0_9_5 + 0.00229210521621275*G0_9_6 - 0.00126797309833045*G0_9_7 + 0.000585218353075593*G0_9_8;
    A[58] = A[85];
    A[67] = A[85] - 1.70588340231226e-05*G0_0_1 + 1.70588340231226e-05*G0_0_2 + 9.75363921792659e-05*G0_0_3 - 9.75363921792659e-05*G0_0_4 + 1.26436063936085e-05*G0_0_5 - 0.000120114260739281*G0_0_6 - 1.26436063936087e-05*G0_0_7 + 0.000120114260739281*G0_0_8 - 1.70588340231226e-05*G0_1_0 + 2.87993256743309e-05*G0_1_1 + 2.34809833024161e-05*G0_1_3 - 6.05086877408409e-05*G0_1_4 + 0.000130048522905688*G0_1_5 - 4.06401634080275e-05*G0_1_6 + 5.41868845440338e-06*G0_1_7 + 4.60588518624316e-05*G0_1_8 + 4.87681960896326e-05*G0_1_9 + 1.70588340231226e-05*G0_2_0 - 2.87993256743307e-05*G0_2_2 + 6.05086877408409e-05*G0_2_3 - 2.34809833024159e-05*G0_2_4 - 5.41868845440352e-06*G0_2_5 - 4.60588518624311e-05*G0_2_6 - 0.000130048522905688*G0_2_7 + 4.06401634080275e-05*G0_2_8 - 4.87681960896327e-05*G0_2_9 + 9.75363921792659e-05*G0_3_0 + 2.34809833024161e-05*G0_3_1 + 6.05086877408409e-05*G0_3_2 + 0.000463297862851512*G0_3_3 - 0.00034137737262743*G0_3_5 + 0.000121920490224083*G0_3_6 - 0.000292609176537797*G0_3_7 + 0.00041452966676188*G0_3_8 + 0.000438913764806697*G0_3_9 - 9.75363921792659e-05*G0_4_0 - 6.05086877408409e-05*G0_4_1 - 2.34809833024159e-05*G0_4_2 - 0.000463297862851513*G0_4_4 + 0.000292609176537798*G0_4_5 - 0.00041452966676188*G0_4_6 + 0.00034137737262743*G0_4_7 - 0.000121920490224082*G0_4_8 - 0.000438913764806697*G0_4_9 + 1.26436063936085e-05*G0_5_0 + 0.000130048522905688*G0_5_1 - 5.41868845440352e-06*G0_5_2 - 0.00034137737262743*G0_5_3 + 0.000292609176537798*G0_5_4 + 0.00136550949050972*G0_5_5 + 0.000292609176537798*G0_5_6 - 0.000390145568717062*G0_5_8 + 0.000780291137434124*G0_5_9 - 0.000120114260739281*G0_6_0 - 4.06401634080275e-05*G0_6_1 - 4.60588518624311e-05*G0_6_2 + 0.000121920490224083*G0_6_3 - 0.00041452966676188*G0_6_4 + 0.000292609176537798*G0_6_5 - 0.000414529666761883*G0_6_6 + 0.000390145568717063*G0_6_7 - 9.75363921792669e-05*G0_6_9 - 1.26436063936087e-05*G0_7_0 + 5.41868845440338e-06*G0_7_1 - 0.000130048522905688*G0_7_2 - 0.000292609176537797*G0_7_3 + 0.00034137737262743*G0_7_4 + 0.000390145568717063*G0_7_6 - 0.00136550949050972*G0_7_7 - 0.000292609176537798*G0_7_8 - 0.000780291137434127*G0_7_9 + 0.000120114260739281*G0_8_0 + 4.60588518624316e-05*G0_8_1 + 4.06401634080275e-05*G0_8_2 + 0.00041452966676188*G0_8_3 - 0.000121920490224082*G0_8_4 - 0.000390145568717062*G0_8_5 - 0.000292609176537798*G0_8_7 + 0.000414529666761882*G0_8_8 + 9.75363921792668e-05*G0_8_9 + 4.87681960896327e-05*G0_9_1 - 4.87681960896326e-05*G0_9_2 + 0.000438913764806697*G0_9_3 - 0.000438913764806697*G0_9_4 + 0.000780291137434124*G0_9_5 - 9.75363921792669e-05*G0_9_6 - 0.000780291137434126*G0_9_7 + 9.75363921792668e-05*G0_9_8;
    A[76] = A[67];
    A[86] = A[51] + 3.81649600399665e-05*G0_0_0 - 3.4719744541179e-05*G0_0_3 - 2.20761381475698e-06*G0_0_4 + 0.000115197302697322*G0_0_5 - 3.27128228913997e-05*G0_0_6 + 0.000119411838161858*G0_0_7 - 7.27509098044934e-05*G0_0_8 + 1.48512202083655e-05*G0_0_9 - 1.91995504495529e-05*G0_1_1 + 1.58323819038132e-05*G0_1_2 + 4.42526223776301e-05*G0_1_3 - 4.31488154702514e-05*G0_1_4 + 1.70588340231222e-06*G0_1_5 - 0.000102453350221225*G0_1_6 + 5.2380655059235e-05*G0_1_7 + 3.02041708291766e-05*G0_1_8 - 9.23183958898373e-06*G0_1_9 + 1.58323819038132e-05*G0_2_1 - 9.59977522477669e-06*G0_2_2 - 6.33183780505316e-05*G0_2_3 + 5.20796168117686e-05*G0_2_4 + 5.41868845440363e-05*G0_2_5 + 4.55571214499865e-05*G0_2_6 + 4.50553910375414e-05*G0_2_7 - 0.000116000071357234*G0_2_8 + 7.02422577422684e-06*G0_2_9 - 3.4719744541179e-05*G0_3_0 + 4.42526223776301e-05*G0_3_1 - 6.33183780505316e-05*G0_3_2 - 0.000361245896960243*G0_3_3 + 0.000223972456115351*G0_3_4 + 5.26816933067022e-05*G0_3_5 + 0.000301038247466869*G0_3_6 + 9.78374304267324e-05*G0_3_7 - 0.000439515841301629*G0_3_8 - 0.000167979342086514*G0_3_9 - 2.20761381475698e-06*G0_4_0 - 4.31488154702514e-05*G0_4_1 + 5.20796168117686e-05*G0_4_2 + 0.000223972456115351*G0_4_3 - 0.000206813276009739*G0_4_4 + 3.01038247466598e-07*G0_4_5 - 0.000301339285714336*G0_4_6 - 6.11107642357745e-05*G0_4_7 + 0.000341678410874897*G0_4_8 - 2.16747538176138e-05*G0_4_9 + 0.000115197302697322*G0_5_0 + 1.70588340231222e-06*G0_5_1 + 5.41868845440363e-05*G0_5_2 + 5.26816933067022e-05*G0_5_3 + 3.01038247466584e-07*G0_5_4 - 0.000201394587555335*G0_5_5 - 0.000160754424147308*G0_5_6 + 0.00015292742971317*G0_5_7 - 1.14394534037409e-05*G0_5_8 - 2.16747538176138e-05*G0_5_9 - 3.27128228913997e-05*G0_6_0 - 0.000102453350221225*G0_6_1 + 4.55571214499865e-05*G0_6_2 + 0.000301038247466869*G0_6_3 - 0.000301339285714336*G0_6_4 - 0.000160754424147308*G0_6_5 - 0.000867893267446983*G0_6_6 - 0.000141487976309428*G0_6_7 + 0.00033084103396609*G0_6_8 - 0.000623149172256419*G0_6_9 + 0.000119411838161858*G0_7_0 + 5.2380655059235e-05*G0_7_1 + 4.50553910375414e-05*G0_7_2 + 9.78374304267324e-05*G0_7_3 - 6.11107642357745e-05*G0_7_4 + 0.00015292742971317*G0_7_5 - 0.000141487976309428*G0_7_6 + 0.000253775242614571*G0_7_7 - 6.32180319680428e-05*G0_7_8 + 0.000238422291993761*G0_7_9 - 7.27509098044934e-05*G0_8_0 + 3.02041708291766e-05*G0_8_1 - 0.000116000071357234*G0_8_2 - 0.000439515841301629*G0_8_3 + 0.000341678410874897*G0_8_4 - 1.14394534037409e-05*G0_8_5 + 0.00033084103396609*G0_8_6 - 6.32180319680428e-05*G0_8_7 - 0.00100606982303428*G0_8_8 - 0.000655661302982843*G0_8_9 + 1.48512202083656e-05*G0_9_0 - 9.23183958898371e-06*G0_9_1 + 7.02422577422684e-06*G0_9_2 - 0.000167979342086514*G0_9_3 - 2.16747538176139e-05*G0_9_4 - 2.16747538176138e-05*G0_9_5 - 0.000623149172256419*G0_9_6 + 0.000238422291993761*G0_9_7 - 0.000655661302982843*G0_9_8 - 0.00204826423576458*G0_9_9;
    A[97] = A[94] + 0.000102553696303713*G0_0_0 + 1.00346082488955e-06*G0_0_1 + 3.25121307264222e-05*G0_0_3 - 0.000536450156985962*G0_0_4 + 0.000223972456115351*G0_0_5 - 0.000323315077779418*G0_0_6 + 5.41868845440371e-05*G0_0_7 - 0.000140885899814495*G0_0_8 - 0.00149555801341541*G0_0_9 + 1.00346082488956e-06*G0_1_0 - 1.00346082488959e-06*G0_1_2 + 0.000240228521478562*G0_1_3 - 0.000290802947052996*G0_1_4 + 0.000422657699443485*G0_1_5 - 0.000422657699443485*G0_1_6 + 0.000290802947052996*G0_1_7 - 0.000240228521478562*G0_1_8 - 1.00346082488958e-06*G0_2_1 - 0.000102553696303714*G0_2_2 + 0.000140885899814495*G0_2_3 - 5.41868845440363e-05*G0_2_4 + 0.000323315077779418*G0_2_5 - 0.000223972456115351*G0_2_6 + 0.000536450156985961*G0_2_7 - 3.25121307264218e-05*G0_2_8 + 0.00149555801341541*G0_2_9 + 3.25121307264221e-05*G0_3_0 + 0.000240228521478562*G0_3_1 + 0.000140885899814495*G0_3_2 - 0.00136550949050972*G0_3_3 + 0.000926595725703026*G0_3_4 - 0.000682754745254862*G0_3_5 + 0.00126797309833046*G0_3_6 - 9.75363921792669e-05*G0_3_7 + 0.000195072784358534*G0_3_9 - 0.000536450156985962*G0_4_0 - 0.000290802947052996*G0_4_1 - 5.41868845440364e-05*G0_4_2 + 0.000926595725703026*G0_4_3 - 0.00629109729556264*G0_4_4 + 0.00160935047095789*G0_4_5 - 0.00287732356928834*G0_4_6 + 9.75363921792646e-05*G0_4_8 - 0.007705374982162*G0_4_9 + 0.000223972456115351*G0_5_0 + 0.000422657699443485*G0_5_1 + 0.000323315077779418*G0_5_2 - 0.000682754745254862*G0_5_3 + 0.00160935047095789*G0_5_4 + 0.00229210521621274*G0_5_5 + 0.00287732356928834*G0_5_7 - 0.00126797309833045*G0_5_8 + 0.00702262023690714*G0_5_9 - 0.000323315077779418*G0_6_0 - 0.000422657699443485*G0_6_1 - 0.000223972456115351*G0_6_2 + 0.00126797309833046*G0_6_3 - 0.00287732356928834*G0_6_4 - 0.00229210521621275*G0_6_6 - 0.00160935047095788*G0_6_7 + 0.000682754745254859*G0_6_8 - 0.00702262023690714*G0_6_9 + 5.41868845440371e-05*G0_7_0 + 0.000290802947052996*G0_7_1 + 0.000536450156985961*G0_7_2 - 9.75363921792669e-05*G0_7_3 + 0.00287732356928834*G0_7_5 - 0.00160935047095788*G0_7_6 + 0.00629109729556263*G0_7_7 - 0.000926595725703023*G0_7_8 + 0.007705374982162*G0_7_9 - 0.000140885899814495*G0_8_0 - 0.000240228521478562*G0_8_1 - 3.25121307264217e-05*G0_8_2 + 9.75363921792647e-05*G0_8_4 - 0.00126797309833045*G0_8_5 + 0.000682754745254859*G0_8_6 - 0.000926595725703023*G0_8_7 + 0.00136550949050972*G0_8_8 - 0.000195072784358531*G0_8_9 - 0.00149555801341541*G0_9_0 + 0.00149555801341541*G0_9_2 + 0.000195072784358534*G0_9_3 - 0.007705374982162*G0_9_4 + 0.00702262023690714*G0_9_5 - 0.00702262023690714*G0_9_6 + 0.007705374982162*G0_9_7 - 0.000195072784358531*G0_9_8;
    A[54] = A[45];
    A[35] = A[16] - 9.59977522477706e-06*G0_0_0 + 1.58323819038131e-05*G0_0_1 - 0.000116000071357234*G0_0_3 + 4.50553910375416e-05*G0_0_4 + 4.5557121449986e-05*G0_0_5 + 5.41868845440366e-05*G0_0_6 + 5.20796168117683e-05*G0_0_7 - 6.33183780505316e-05*G0_0_8 + 7.02422577422697e-06*G0_0_9 + 1.58323819038131e-05*G0_1_0 - 1.9199550449554e-05*G0_1_1 + 3.02041708291757e-05*G0_1_3 + 5.23806550592355e-05*G0_1_4 - 0.000102453350221225*G0_1_5 + 1.70588340231236e-06*G0_1_6 - 4.31488154702512e-05*G0_1_7 + 4.42526223776296e-05*G0_1_8 - 9.23183958898394e-06*G0_1_9 + 3.81649600399665e-05*G0_2_2 - 7.27509098044935e-05*G0_2_3 + 0.000119411838161858*G0_2_4 - 3.27128228913999e-05*G0_2_5 + 0.000115197302697322*G0_2_6 - 2.20761381475711e-06*G0_2_7 - 3.4719744541179e-05*G0_2_8 + 1.48512202083654e-05*G0_2_9 - 0.000116000071357234*G0_3_0 + 3.02041708291757e-05*G0_3_1 - 7.27509098044935e-05*G0_3_2 - 0.00100606982303428*G0_3_3 - 6.32180319680429e-05*G0_3_4 + 0.00033084103396609*G0_3_5 - 1.14394534037413e-05*G0_3_6 + 0.000341678410874897*G0_3_7 - 0.00043951584130163*G0_3_8 - 0.000655661302982842*G0_3_9 + 4.50553910375416e-05*G0_4_0 + 5.23806550592355e-05*G0_4_1 + 0.000119411838161858*G0_4_2 - 6.32180319680429e-05*G0_4_3 + 0.000253775242614572*G0_4_4 - 0.000141487976309429*G0_4_5 + 0.00015292742971317*G0_4_6 - 6.11107642357747e-05*G0_4_7 + 9.78374304267328e-05*G0_4_8 + 0.000238422291993762*G0_4_9 + 4.5557121449986e-05*G0_5_0 - 0.000102453350221225*G0_5_1 - 3.27128228913999e-05*G0_5_2 + 0.00033084103396609*G0_5_3 - 0.000141487976309429*G0_5_4 - 0.000867893267446984*G0_5_5 - 0.000160754424147308*G0_5_6 - 0.000301339285714336*G0_5_7 + 0.000301038247466869*G0_5_8 - 0.00062314917225642*G0_5_9 + 5.41868845440366e-05*G0_6_0 + 1.70588340231235e-06*G0_6_1 + 0.000115197302697322*G0_6_2 - 1.14394534037413e-05*G0_6_3 + 0.00015292742971317*G0_6_4 - 0.000160754424147308*G0_6_5 - 0.000201394587555335*G0_6_6 + 3.01038247466991e-07*G0_6_7 + 5.26816933067021e-05*G0_6_8 - 2.16747538176135e-05*G0_6_9 + 5.20796168117683e-05*G0_7_0 - 4.31488154702512e-05*G0_7_1 - 2.2076138147571e-06*G0_7_2 + 0.000341678410874897*G0_7_3 - 6.11107642357747e-05*G0_7_4 - 0.000301339285714336*G0_7_5 + 3.01038247466991e-07*G0_7_6 - 0.00020681327600974*G0_7_7 + 0.000223972456115351*G0_7_8 - 2.16747538176147e-05*G0_7_9 - 6.33183780505316e-05*G0_8_0 + 4.42526223776296e-05*G0_8_1 - 3.4719744541179e-05*G0_8_2 - 0.00043951584130163*G0_8_3 + 9.78374304267328e-05*G0_8_4 + 0.000301038247466869*G0_8_5 + 5.26816933067021e-05*G0_8_6 + 0.000223972456115351*G0_8_7 - 0.000361245896960244*G0_8_8 - 0.000167979342086514*G0_8_9 + 7.02422577422697e-06*G0_9_0 - 9.23183958898396e-06*G0_9_1 + 1.48512202083654e-05*G0_9_2 - 0.000655661302982842*G0_9_3 + 0.000238422291993762*G0_9_4 - 0.000623149172256419*G0_9_5 - 2.16747538176134e-05*G0_9_6 - 2.16747538176148e-05*G0_9_7 - 0.000167979342086514*G0_9_8 - 0.00204826423576458*G0_9_9;
    A[27] = A[72];
    A[61] = A[16];
    A[74] = A[82] - 9.59977522477682e-06*G0_0_0 + 1.58323819038131e-05*G0_0_2 + 4.50553910375416e-05*G0_0_3 - 0.000116000071357234*G0_0_4 + 5.20796168117685e-05*G0_0_5 - 6.33183780505317e-05*G0_0_6 + 4.55571214499864e-05*G0_0_7 + 5.41868845440365e-05*G0_0_8 + 7.02422577422681e-06*G0_0_9 + 3.81649600399666e-05*G0_1_1 + 0.000119411838161859*G0_1_3 - 7.27509098044937e-05*G0_1_4 - 2.20761381475701e-06*G0_1_5 - 3.47197445411791e-05*G0_1_6 - 3.27128228913998e-05*G0_1_7 + 0.000115197302697322*G0_1_8 + 1.48512202083655e-05*G0_1_9 + 1.58323819038131e-05*G0_2_0 - 1.91995504495541e-05*G0_2_2 + 5.23806550592355e-05*G0_2_3 + 3.02041708291757e-05*G0_2_4 - 4.31488154702512e-05*G0_2_5 + 4.42526223776296e-05*G0_2_6 - 0.000102453350221225*G0_2_7 + 1.70588340231222e-06*G0_2_8 - 9.23183958898402e-06*G0_2_9 + 4.50553910375416e-05*G0_3_0 + 0.000119411838161859*G0_3_1 + 5.23806550592355e-05*G0_3_2 + 0.000253775242614571*G0_3_3 - 6.32180319680422e-05*G0_3_4 - 6.11107642357748e-05*G0_3_5 + 9.78374304267331e-05*G0_3_6 - 0.000141487976309429*G0_3_7 + 0.00015292742971317*G0_3_8 + 0.000238422291993761*G0_3_9 - 0.000116000071357234*G0_4_0 - 7.27509098044937e-05*G0_4_1 + 3.02041708291757e-05*G0_4_2 - 6.32180319680422e-05*G0_4_3 - 0.00100606982303428*G0_4_4 + 0.000341678410874898*G0_4_5 - 0.000439515841301631*G0_4_6 + 0.00033084103396609*G0_4_7 - 1.14394534037411e-05*G0_4_8 - 0.000655661302982843*G0_4_9 + 5.20796168117685e-05*G0_5_0 - 2.20761381475701e-06*G0_5_1 - 4.31488154702512e-05*G0_5_2 - 6.11107642357748e-05*G0_5_3 + 0.000341678410874898*G0_5_4 - 0.00020681327600974*G0_5_5 + 0.000223972456115352*G0_5_6 - 0.000301339285714337*G0_5_7 + 3.01038247466944e-07*G0_5_8 - 2.16747538176142e-05*G0_5_9 - 6.33183780505317e-05*G0_6_0 - 3.47197445411791e-05*G0_6_1 + 4.42526223776296e-05*G0_6_2 + 9.7837430426733e-05*G0_6_3 - 0.000439515841301631*G0_6_4 + 0.000223972456115352*G0_6_5 - 0.000361245896960245*G0_6_6 + 0.00030103824746687*G0_6_7 + 5.26816933067022e-05*G0_6_8 - 0.000167979342086514*G0_6_9 + 4.55571214499864e-05*G0_7_0 - 3.27128228913998e-05*G0_7_1 - 0.000102453350221225*G0_7_2 - 0.000141487976309429*G0_7_3 + 0.00033084103396609*G0_7_4 - 0.000301339285714337*G0_7_5 + 0.00030103824746687*G0_7_6 - 0.000867893267446984*G0_7_7 - 0.000160754424147309*G0_7_8 - 0.00062314917225642*G0_7_9 + 5.41868845440365e-05*G0_8_0 + 0.000115197302697322*G0_8_1 + 1.70588340231222e-06*G0_8_2 + 0.00015292742971317*G0_8_3 - 1.14394534037411e-05*G0_8_4 + 3.0103824746695e-07*G0_8_5 + 5.26816933067022e-05*G0_8_6 - 0.000160754424147309*G0_8_7 - 0.000201394587555336*G0_8_8 - 2.16747538176149e-05*G0_8_9 + 7.0242257742268e-06*G0_9_0 + 1.48512202083656e-05*G0_9_1 - 9.23183958898402e-06*G0_9_2 + 0.000238422291993761*G0_9_3 - 0.000655661302982843*G0_9_4 - 2.1674753817614e-05*G0_9_5 - 0.000167979342086514*G0_9_6 - 0.00062314917225642*G0_9_7 - 2.16747538176148e-05*G0_9_8 - 0.00204826423576458*G0_9_9;
    A[2] = 7.40145271395397e-05*G0_0_0 + 6.73185941043197e-06*G0_0_1 + 1.63180073894387e-05*G0_0_2 - 1.28219994291447e-06*G0_0_3 - 1.21530255458847e-06*G0_0_4 + 7.04763986014106e-05*G0_0_5 - 2.50530719280762e-05*G0_0_6 + 4.89354395604477e-05*G0_0_7 - 1.77947052947082e-05*G0_0_8 + 1.82629870129901e-05*G0_0_9 + 6.73185941043197e-06*G0_1_0 + 6.73185941043198e-06*G0_1_1 + 6.73185941043197e-06*G0_1_2 + 4.47097545311908e-06*G0_1_3 + 4.47097545311906e-06*G0_1_4 + 4.47097545311905e-06*G0_1_5 + 4.47097545311907e-06*G0_1_6 + 4.47097545311904e-06*G0_1_7 + 4.47097545311907e-06*G0_1_8 + 7.09112316255293e-06*G0_1_9 + 1.63180073894387e-05*G0_2_0 + 6.73185941043197e-06*G0_2_1 + 7.40145271395396e-05*G0_2_2 - 1.77947052947083e-05*G0_2_3 + 4.89354395604478e-05*G0_2_4 - 2.50530719280762e-05*G0_2_5 + 7.04763986014105e-05*G0_2_6 - 1.2153025545885e-06*G0_2_7 - 1.28219994291443e-06*G0_2_8 + 1.82629870129901e-05*G0_2_9 - 1.28219994291447e-06*G0_3_0 + 4.47097545311908e-06*G0_3_1 - 1.77947052947083e-05*G0_3_2 + 5.50899992864372e-05*G0_3_3 - 5.82007278435948e-05*G0_3_4 + 6.12111103182635e-06*G0_3_5 - 3.52214749536238e-05*G0_3_6 - 1.79619487655232e-05*G0_3_7 + 3.59238975310464e-05*G0_3_8 + 1.46505280433877e-05*G0_3_9 - 1.21530255458848e-06*G0_4_0 + 4.47097545311906e-06*G0_4_1 + 4.89354395604478e-05*G0_4_2 - 5.82007278435948e-05*G0_4_3 + 5.7598651348661e-05*G0_4_4 - 1.81626409305012e-05*G0_4_5 + 5.33841158841249e-05*G0_4_6 + 1.45501819608987e-05*G0_4_7 - 1.79619487655232e-05*G0_4_8 - 1.8463679177968e-05*G0_4_9 + 7.04763986014106e-05*G0_5_0 + 4.47097545311905e-06*G0_5_1 - 2.50530719280762e-05*G0_5_2 + 6.12111103182635e-06*G0_5_3 - 1.81626409305012e-05*G0_5_4 + 0.000172795954045983*G0_5_5 - 9.63322391893984e-05*G0_5_6 + 5.33841158841248e-05*G0_5_7 - 3.52214749536237e-05*G0_5_8 + 1.56539888682772e-05*G0_5_9 - 2.50530719280762e-05*G0_6_0 + 4.47097545311907e-06*G0_6_1 + 7.04763986014105e-05*G0_6_2 - 3.52214749536238e-05*G0_6_3 + 5.33841158841249e-05*G0_6_4 - 9.63322391893984e-05*G0_6_5 + 0.000172795954045983*G0_6_6 - 1.81626409305011e-05*G0_6_7 + 6.12111103182635e-06*G0_6_8 + 1.56539888682772e-05*G0_6_9 + 4.89354395604477e-05*G0_7_0 + 4.47097545311904e-06*G0_7_1 - 1.2153025545885e-06*G0_7_2 - 1.79619487655232e-05*G0_7_3 + 1.45501819608987e-05*G0_7_4 + 5.33841158841248e-05*G0_7_5 - 1.81626409305011e-05*G0_7_6 + 5.75986513486609e-05*G0_7_7 - 5.82007278435947e-05*G0_7_8 - 1.8463679177968e-05*G0_7_9 - 1.77947052947082e-05*G0_8_0 + 4.47097545311908e-06*G0_8_1 - 1.28219994291443e-06*G0_8_2 + 3.59238975310464e-05*G0_8_3 - 1.79619487655232e-05*G0_8_4 - 3.52214749536237e-05*G0_8_5 + 6.12111103182635e-06*G0_8_6 - 5.82007278435947e-05*G0_8_7 + 5.50899992864371e-05*G0_8_8 + 1.46505280433877e-05*G0_8_9 + 1.82629870129901e-05*G0_9_0 + 7.09112316255293e-06*G0_9_1 + 1.82629870129901e-05*G0_9_2 + 1.46505280433877e-05*G0_9_3 - 1.8463679177968e-05*G0_9_4 + 1.56539888682772e-05*G0_9_5 + 1.56539888682772e-05*G0_9_6 - 1.8463679177968e-05*G0_9_7 + 1.46505280433877e-05*G0_9_8 - 7.94740973312536e-05*G0_9_9;
    A[25] = A[2] - 3.53812853812913e-06*G0_0_0 - 4.13710793175149e-05*G0_0_2 - 1.69473383759127e-05*G0_0_4 + 0.000102319555444573*G0_0_5 - 7.12791672613222e-05*G0_0_6 + 4.44867632367708e-06*G0_0_7 - 1.74267696589154e-05*G0_0_8 - 2.60899814471285e-06*G0_0_9 - 2.45265647051403e-05*G0_1_2 - 3.96924504067428e-05*G0_1_4 + 5.06190238333181e-05*G0_1_5 - 6.26717032967139e-05*G0_1_6 + 3.14529220779274e-05*G0_1_7 - 2.24329242186423e-05*G0_1_8 + 7.55940488083473e-06*G0_1_9 - 4.13710793175149e-05*G0_2_0 - 2.45265647051403e-05*G0_2_1 - 0.00039478750416257*G0_2_2 + 0.000104895104895123*G0_2_3 - 0.00026317432567437*G0_2_4 + 0.00025263798701303*G0_2_5 - 0.000432224025974099*G0_2_6 + 5.81115313258269e-05*G0_2_7 - 1.27662516055395e-05*G0_2_8 - 4.49550449550527e-05*G0_2_9 + 0.000104895104895123*G0_3_2 - 0.000146003550021432*G0_3_3 + 0.000230996681889578*G0_3_4 - 9.70346617668211e-05*G0_3_5 + 0.000208017428999607*G0_3_6 - 2.20761381475709e-06*G0_3_7 - 5.60934601113267e-05*G0_3_8 - 1.82629870129902e-05*G0_3_9 - 1.69473383759127e-05*G0_4_0 - 3.96924504067428e-05*G0_4_1 - 0.00026317432567437*G0_4_2 + 0.000230996681889578*G0_4_3 - 0.000295719905094955*G0_4_4 + 7.08443342372034e-05*G0_4_5 - 0.00027886176323681*G0_4_6 - 7.17474489796039e-05*G0_4_7 + 5.83010739260837e-05*G0_4_8 - 6.82353360924885e-06*G0_4_9 + 0.000102319555444573*G0_5_0 + 5.06190238333181e-05*G0_5_1 + 0.00025263798701303*G0_5_2 - 9.70346617668211e-05*G0_5_3 + 7.08443342372034e-05*G0_5_4 + 0.000372685350363984*G0_5_5 - 1.11384151562737e-05*G0_5_6 + 0.000286187027258504*G0_5_7 - 0.000131854752390489*G0_5_8 + 0.000271536499215116*G0_5_9 - 7.12791672613222e-05*G0_6_0 - 6.26717032967139e-05*G0_6_1 - 0.000432224025974099*G0_6_2 + 0.000208017428999607*G0_6_3 - 0.00027886176323681*G0_6_4 - 1.11384151562737e-05*G0_6_5 - 0.000811298076923214*G0_6_6 - 0.000154332274868015*G0_6_7 + 0.000103155772798647*G0_6_8 - 0.000281169723134056*G0_6_9 + 4.44867632367708e-06*G0_7_0 + 3.14529220779274e-05*G0_7_1 + 5.81115313258269e-05*G0_7_2 - 2.2076138147571e-06*G0_7_3 - 7.17474489796039e-05*G0_7_4 + 0.000286187027258504*G0_7_5 - 0.000154332274868015*G0_7_6 + 0.000315086699015323*G0_7_7 - 6.31176858855536e-05*G0_7_8 + 0.000316491544170169*G0_7_9 - 1.74267696589154e-05*G0_8_0 - 2.24329242186423e-05*G0_8_1 - 1.27662516055395e-05*G0_8_2 - 5.60934601113267e-05*G0_8_3 + 5.83010739260837e-05*G0_8_4 - 0.000131854752390489*G0_8_5 + 0.000103155772798647*G0_8_6 - 6.31176858855536e-05*G0_8_7 - 1.47508741258768e-05*G0_8_8 - 0.000139280362494672*G0_8_9 - 2.60899814471284e-06*G0_9_0 + 7.55940488083473e-06*G0_9_1 - 4.49550449550526e-05*G0_9_2 - 1.82629870129902e-05*G0_9_3 - 6.82353360924884e-06*G0_9_4 + 0.000271536499215116*G0_9_5 - 0.000281169723134056*G0_9_6 + 0.000316491544170169*G0_9_7 - 0.000139280362494672*G0_9_8 + 0.000567156058227583*G0_9_9;
    A[90] = A[2] + 2.43246336996379e-05*G0_0_0 + 1.15311276025581e-05*G0_0_1 + 1.94497962355136e-06*G0_0_2 + 3.2188793349513e-05*G0_0_3 + 3.21218959611871e-05*G0_0_4 + 6.29838911089015e-05*G0_0_5 - 1.63898601398623e-06*G0_0_6 + 8.45248501498644e-05*G0_0_7 - 8.89735264735412e-06*G0_0_8 + 0.000302041708291759*G0_0_9 + 1.15311276025581e-05*G0_1_0 + 1.15311276025581e-05*G0_1_1 - 2.29346546310871e-05*G0_1_3 + 1.01795525902686e-05*G0_1_4 - 2.29346546310871e-05*G0_1_5 + 1.01795525902686e-05*G0_1_6 + 1.11830134151582e-05*G0_1_7 + 1.11830134151582e-05*G0_1_8 - 8.65652204938065e-05*G0_1_9 + 1.94497962355136e-06*G0_2_0 - 5.57515401265495e-05*G0_2_2 + 3.24452333380959e-05*G0_2_3 - 6.73991187384158e-05*G0_2_4 + 4.07070607963534e-05*G0_2_5 - 5.48224097331333e-05*G0_2_6 - 1.72483766233795e-05*G0_2_7 + 1.59327279863021e-05*G0_2_8 - 9.77370843442438e-05*G0_2_9 + 3.2188793349513e-05*G0_3_0 - 2.29346546310871e-05*G0_3_1 + 3.2445233338096e-05*G0_3_2 + 0.000503034911517139*G0_3_3 - 0.000147709433423744*G0_3_4 + 1.55536427857883e-05*G0_3_5 - 8.94083594976604e-05*G0_3_6 - 0.000155436081775394*G0_3_7 + 0.000262103967461154*G0_3_8 + 0.000570567825032207*G0_3_9 + 3.21218959611871e-05*G0_4_0 + 1.01795525902686e-05*G0_4_1 - 6.73991187384158e-05*G0_4_2 - 0.000147709433423744*G0_4_3 + 0.000500526259454915*G0_4_4 - 0.000155235389610416*G0_4_5 + 0.000244643749108076*G0_4_6 + 7.12457185671575e-06*G0_4_7 - 0.000106667885685761*G0_4_8 + 0.000603682032253563*G0_4_9 + 6.29838911089015e-05*G0_5_0 - 2.29346546310871e-05*G0_5_1 + 4.07070607963534e-05*G0_5_2 + 1.55536427857883e-05*G0_5_3 - 0.000155235389610416*G0_5_4 - 9.69343156843318e-05*G0_5_5 - 0.000169183495076381*G0_5_6 - 2.80969030969055e-06*G0_5_7 + 9.93426216640656e-06*G0_5_8 - 0.000925993649208091*G0_5_9 - 1.63898601398621e-06*G0_6_0 + 1.01795525902686e-05*G0_6_1 - 5.48224097331333e-05*G0_6_2 - 8.94083594976604e-05*G0_6_3 + 0.000244643749108076*G0_6_4 - 0.000169183495076381*G0_6_5 + 0.000114394534037411*G0_6_6 - 7.12457185671601e-06*G0_6_7 + 0.000472027972028052*G0_6_9 + 8.45248501498643e-05*G0_7_0 + 1.11830134151582e-05*G0_7_1 - 1.72483766233795e-05*G0_7_2 - 0.000155436081775394*G0_7_3 + 7.12457185671576e-06*G0_7_4 - 2.80969030969055e-06*G0_7_5 - 7.12457185671597e-06*G0_7_6 + 1.82629870129906e-05*G0_7_7 - 0.000207315006422184*G0_7_8 - 0.000891875981161846*G0_7_9 - 8.89735264735412e-06*G0_8_0 + 1.11830134151582e-05*G0_8_1 + 1.59327279863021e-05*G0_8_2 + 0.000262103967461154*G0_8_3 - 0.000106667885685761*G0_8_4 + 9.93426216640658e-06*G0_8_5 - 0.000207315006422184*G0_8_7 + 0.000232100488796957*G0_8_8 + 0.000473031432852941*G0_8_9 + 0.000302041708291759*G0_9_0 - 8.65652204938065e-05*G0_9_1 - 9.77370843442438e-05*G0_9_2 + 0.000570567825032207*G0_9_3 + 0.000603682032253563*G0_9_4 - 0.000925993649208091*G0_9_5 + 0.000472027972028052*G0_9_6 - 0.000891875981161846*G0_9_7 + 0.000473031432852941*G0_9_8 + 0.00046961966604832*G0_9_9;
    A[11] = A[2] - 5.76965197501009e-05*G0_0_0 + 6.7282667729108e-05*G0_0_1 - 9.58614797900673e-06*G0_0_2 + 5.02176395033624e-05*G0_0_3 - 1.65794027401199e-05*G0_0_4 - 7.16917011559991e-05*G0_0_5 + 2.37708719851618e-05*G0_0_6 - 7.3988511488524e-05*G0_0_7 + 8.8271103896119e-05*G0_0_8 + 6.7282667729108e-05*G0_1_0 + 0.00153963843696013*G0_1_1 + 6.72826677291077e-05*G0_1_2 + 0.000686244559012533*G0_1_3 - 0.000325243952476151*G0_1_4 - 0.000325243952476151*G0_1_7 + 0.000686244559012534*G0_1_8 + 9.12480376766248e-05*G0_1_9 - 9.58614797900673e-06*G0_2_0 + 6.72826677291077e-05*G0_2_1 - 5.76965197501008e-05*G0_2_2 + 8.82711038961188e-05*G0_2_3 - 7.39885114885239e-05*G0_2_4 + 2.37708719851617e-05*G0_2_5 - 7.1691701155999e-05*G0_2_6 - 1.65794027401198e-05*G0_2_7 + 5.02176395033623e-05*G0_2_8 + 5.02176395033624e-05*G0_3_0 + 0.000686244559012533*G0_3_1 + 8.82711038961188e-05*G0_3_2 + 0.000801865545169253*G0_3_3 - 0.000303546899529094*G0_3_4 - 3.35155915513117e-05*G0_3_5 - 7.62630226916073e-06*G0_3_6 - 0.0001962769373484*G0_3_7 + 0.000392553874696799*G0_3_8 + 0.000118809761666925*G0_3_9 - 1.65794027401199e-05*G0_4_0 - 0.00032524395247615*G0_4_1 - 7.39885114885239e-05*G0_4_2 - 0.000303546899529094*G0_4_3 + 0.000169986263736293*G0_4_4 + 4.11418938204734e-06*G0_4_5 + 3.51211288711351e-06*G0_4_6 + 7.25502176395158e-05*G0_4_7 - 0.000196276937348399*G0_4_8 - 8.22837876409452e-06*G0_4_9 - 7.16917011559991e-05*G0_5_0 + 2.37708719851617e-05*G0_5_2 - 3.35155915513117e-05*G0_5_3 + 4.11418938204734e-06*G0_5_4 - 9.35225488797077e-05*G0_5_5 + 6.4823569287866e-05*G0_5_6 + 3.5121128871137e-06*G0_5_7 - 7.62630226916117e-06*G0_5_8 + 1.52526045383213e-05*G0_5_9 + 2.37708719851618e-05*G0_6_0 - 7.1691701155999e-05*G0_6_2 - 7.62630226916073e-06*G0_6_3 + 3.5121128871135e-06*G0_6_4 + 6.4823569287866e-05*G0_6_5 - 9.35225488797076e-05*G0_6_6 + 4.11418938204719e-06*G0_6_7 - 3.35155915513114e-05*G0_6_8 + 1.52526045383214e-05*G0_6_9 - 7.3988511488524e-05*G0_7_0 - 0.000325243952476151*G0_7_1 - 1.65794027401198e-05*G0_7_2 - 0.0001962769373484*G0_7_3 + 7.25502176395158e-05*G0_7_4 + 3.5121128871137e-06*G0_7_5 + 4.1141893820472e-06*G0_7_6 + 0.000169986263736293*G0_7_7 - 0.000303546899529094*G0_7_8 - 8.22837876409462e-06*G0_7_9 + 8.8271103896119e-05*G0_8_0 + 0.000686244559012534*G0_8_1 + 5.02176395033623e-05*G0_8_2 + 0.000392553874696799*G0_8_3 - 0.000196276937348399*G0_8_4 - 7.62630226916116e-06*G0_8_5 - 3.35155915513114e-05*G0_8_6 - 0.000303546899529094*G0_8_7 + 0.000801865545169253*G0_8_8 + 0.000118809761666925*G0_8_9 + 9.12480376766248e-05*G0_9_1 + 0.000118809761666925*G0_9_3 - 8.22837876409452e-06*G0_9_4 + 1.52526045383213e-05*G0_9_5 + 1.52526045383214e-05*G0_9_6 - 8.22837876409462e-06*G0_9_7 + 0.000118809761666925*G0_9_8 + 0.000399778792636003*G0_9_9;
    A[32] = A[25] - 7.1758598544325e-05*G0_0_0 + 7.25836663336786e-06*G0_0_2 + 4.89688882546108e-05*G0_0_3 - 4.00380869130937e-05*G0_0_4 - 0.000166674843014157*G0_0_5 + 6.11107642357746e-05*G0_0_6 - 7.1346064649648e-05*G0_0_7 + 7.11453724846701e-05*G0_0_8 - 1.00346082488956e-06*G0_0_9 + 7.17585985443251e-05*G0_1_1 - 7.25836663336782e-06*G0_1_2 + 0.000166674843014157*G0_1_3 - 6.11107642357746e-05*G0_1_4 - 4.89688882546108e-05*G0_1_5 + 4.00380869130937e-05*G0_1_6 - 7.11453724846702e-05*G0_1_7 + 7.13460646496481e-05*G0_1_8 + 1.0034608248896e-06*G0_1_9 + 7.25836663336786e-06*G0_2_0 - 7.25836663336783e-06*G0_2_1 + 0.000140484515484539*G0_2_3 - 0.000147508741258766*G0_2_4 - 0.000140484515484539*G0_2_5 + 0.000147508741258766*G0_2_6 - 7.09446803196923e-05*G0_2_7 + 7.09446803196923e-05*G0_2_8 + 4.89688882546108e-05*G0_3_0 + 0.000166674843014157*G0_3_1 + 0.000140484515484539*G0_3_2 + 0.000636394855144963*G0_3_3 - 0.000280266608391656*G0_3_4 - 0.000120114260739281*G0_3_6 - 0.000146906664763832*G0_3_7 + 0.000359740705722909*G0_3_8 + 0.000290802947052996*G0_3_9 - 4.00380869130937e-05*G0_4_0 - 6.11107642357746e-05*G0_4_1 - 0.000147508741258766*G0_4_2 - 0.000280266608391656*G0_4_3 - 0.000400380869130937*G0_4_4 + 0.000120114260739281*G0_4_5 + 0.000166474150849179*G0_4_7 - 0.000212834040959077*G0_4_8 - 0.000240228521478562*G0_4_9 - 0.000166674843014157*G0_5_0 - 4.89688882546108e-05*G0_5_1 - 0.000140484515484539*G0_5_2 + 0.000120114260739281*G0_5_4 - 0.000636394855144962*G0_5_5 + 0.000280266608391655*G0_5_6 - 0.000359740705722909*G0_5_7 + 0.000146906664763832*G0_5_8 - 0.000290802947052996*G0_5_9 + 6.11107642357746e-05*G0_6_0 + 4.00380869130937e-05*G0_6_1 + 0.000147508741258766*G0_6_2 - 0.000120114260739281*G0_6_3 + 0.000280266608391655*G0_6_5 + 0.000400380869130937*G0_6_6 + 0.000212834040959077*G0_6_7 - 0.000166474150849179*G0_6_8 + 0.000240228521478562*G0_6_9 - 7.1346064649648e-05*G0_7_0 - 7.11453724846702e-05*G0_7_1 - 7.09446803196923e-05*G0_7_2 - 0.000146906664763832*G0_7_3 + 0.000166474150849179*G0_7_4 - 0.000359740705722909*G0_7_5 + 0.000212834040959077*G0_7_6 - 0.000332346225203424*G0_7_7 - 0.000422657699443485*G0_7_9 + 7.11453724846701e-05*G0_8_0 + 7.13460646496482e-05*G0_8_1 + 7.09446803196923e-05*G0_8_2 + 0.000359740705722909*G0_8_3 - 0.000212834040959077*G0_8_4 + 0.000146906664763832*G0_8_5 - 0.000166474150849179*G0_8_6 + 0.000332346225203424*G0_8_8 + 0.000422657699443485*G0_8_9 - 1.00346082488957e-06*G0_9_0 + 1.0034608248896e-06*G0_9_1 + 0.000290802947052996*G0_9_3 - 0.000240228521478562*G0_9_4 - 0.000290802947052996*G0_9_5 + 0.000240228521478562*G0_9_6 - 0.000422657699443485*G0_9_7 + 0.000422657699443485*G0_9_8;
    A[1] = A[2] + 9.58614797900677e-06*G0_0_1 - 9.58614797900675e-06*G0_0_2 - 2.15409590409628e-05*G0_0_5 + 7.25836663336791e-06*G0_0_6 + 2.15409590409627e-05*G0_0_7 - 7.25836663336784e-06*G0_0_8 + 9.58614797900677e-06*G0_1_0 + 6.7282667729108e-05*G0_1_1 + 4.44644641073289e-05*G0_1_3 - 2.22656807478274e-05*G0_1_4 - 2.95240473811953e-05*G0_1_7 + 6.60054231482916e-05*G0_1_8 + 1.11718638504372e-05*G0_1_9 - 9.58614797900675e-06*G0_2_0 - 6.72826677291076e-05*G0_2_2 + 2.22656807478274e-05*G0_2_3 - 4.44644641073287e-05*G0_2_4 + 2.95240473811952e-05*G0_2_5 - 6.60054231482915e-05*G0_2_6 - 1.11718638504372e-05*G0_2_9 + 4.44644641073289e-05*G0_3_1 + 2.22656807478274e-05*G0_3_2 + 2.50865206222411e-06*G0_3_3 + 8.42907092907233e-06*G0_3_5 + 1.72595261881005e-05*G0_3_6 - 2.00692164978004e-07*G0_3_7 + 1.74602183530786e-05*G0_3_8 - 3.31142072213556e-05*G0_3_9 - 2.22656807478274e-05*G0_4_1 - 4.44644641073287e-05*G0_4_2 - 2.50865206222386e-06*G0_4_4 + 2.00692164977923e-07*G0_4_5 - 1.74602183530784e-05*G0_4_6 - 8.42907092907232e-06*G0_4_7 - 1.72595261881005e-05*G0_4_8 + 3.31142072213557e-05*G0_4_9 - 2.15409590409628e-05*G0_5_0 + 2.95240473811952e-05*G0_5_2 + 8.42907092907233e-06*G0_5_3 + 2.00692164977926e-07*G0_5_4 - 0.000115197302697322*G0_5_5 + 3.81315113458036e-05*G0_5_6 + 1.70588340231226e-05*G0_5_8 - 3.41176680462452e-05*G0_5_9 + 7.25836663336791e-06*G0_6_0 - 6.60054231482915e-05*G0_6_2 + 1.72595261881005e-05*G0_6_3 - 1.74602183530784e-05*G0_6_4 + 3.81315113458036e-05*G0_6_5 - 0.000117705954759546*G0_6_6 - 1.70588340231226e-05*G0_6_7 - 1.00346082488952e-06*G0_6_9 + 2.15409590409627e-05*G0_7_0 - 2.95240473811953e-05*G0_7_1 - 2.00692164978004e-07*G0_7_3 - 8.42907092907233e-06*G0_7_4 - 1.70588340231226e-05*G0_7_6 + 0.000115197302697322*G0_7_7 - 3.81315113458036e-05*G0_7_8 + 3.41176680462452e-05*G0_7_9 - 7.25836663336784e-06*G0_8_0 + 6.60054231482917e-05*G0_8_1 + 1.74602183530785e-05*G0_8_3 - 1.72595261881005e-05*G0_8_4 + 1.70588340231226e-05*G0_8_5 - 3.81315113458036e-05*G0_8_7 + 0.000117705954759546*G0_8_8 + 1.00346082488956e-06*G0_8_9 + 1.11718638504372e-05*G0_9_1 - 1.11718638504372e-05*G0_9_2 - 3.31142072213556e-05*G0_9_3 + 3.31142072213557e-05*G0_9_4 - 3.41176680462452e-05*G0_9_5 - 1.00346082488953e-06*G0_9_6 + 3.41176680462452e-05*G0_9_7 + 1.00346082488956e-06*G0_9_8;
    A[31] = -A[1] + 7.27992245849513e-05*G0_0_0 + 6.52534469498867e-05*G0_0_1 + 5.63833487940728e-05*G0_0_3 - 5.94829277865093e-05*G0_0_4 + 6.34856215213464e-05*G0_0_5 - 3.57566540602315e-05*G0_0_6 + 5.23137576709092e-05*G0_0_7 + 2.83310439560489e-05*G0_0_8 - 2.00692164977882e-07*G0_0_9 + 6.52534469498867e-05*G0_1_0 + 0.000764730061605192*G0_1_1 + 7.72082580118425e-05*G0_1_2 + 0.000905890984016138*G0_1_3 - 0.000379542332667397*G0_1_4 - 2.86097830740739e-05*G0_1_5 - 4.41299771656989e-05*G0_1_6 - 0.000239291958041999*G0_1_7 + 0.000498954170829256*G0_1_8 + 0.000151723276723303*G0_1_9 + 7.72082580118425e-05*G0_2_1 - 1.83212125176442e-05*G0_2_2 + 0.000177266929499103*G0_2_3 - 9.18612637362794e-05*G0_2_4 - 1.36916654773821e-05*G0_2_6 - 3.07504995005047e-05*G0_2_7 + 5.7855091337244e-05*G0_2_8 + 2.27451120308302e-05*G0_2_9 + 5.63833487940728e-05*G0_3_0 + 0.000905890984016138*G0_3_1 + 0.000177266929499103*G0_3_2 + 0.0014483953546456*G0_3_3 - 0.000696702850720826*G0_3_4 + 1.9065755672899e-06*G0_3_5 + 4.52560832025193e-05*G0_3_6 - 0.000256283894676796*G0_3_7 + 0.000516983016983105*G0_3_8 + 5.73979591836841e-05*G0_3_9 - 5.94829277865093e-05*G0_4_0 - 0.000379542332667397*G0_4_1 - 9.18612637362794e-05*G0_4_2 - 0.000696702850720826*G0_4_3 - 5.23806550592353e-05*G0_4_4 + 9.13149350649506e-05*G0_4_5 - 0.00013657101826747*G0_4_6 + 0.00017891706507781*G0_4_7 - 0.000260699122306309*G0_4_8 - 0.000250865206222392*G0_4_9 + 6.34856215213464e-05*G0_5_0 - 2.86097830740739e-05*G0_5_1 + 1.9065755672899e-06*G0_5_3 + 9.13149350649507e-05*G0_5_4 - 7.6363368774096e-05*G0_5_5 + 2.27785607249933e-05*G0_5_6 - 3.81315113458039e-06*G0_5_7 - 1.30449907235657e-06*G0_5_8 + 3.21107463964666e-06*G0_5_9 - 3.57566540602315e-05*G0_6_0 - 4.41299771656989e-05*G0_6_1 - 1.36916654773821e-05*G0_6_2 + 4.52560832025193e-05*G0_6_3 - 0.00013657101826747*G0_6_4 + 2.27785607249933e-05*G0_6_5 - 0.000196276937348399*G0_6_6 + 5.11765020693689e-06*G0_6_7 + 2.2979252889971e-05*G0_6_8 - 0.000158747502497529*G0_6_9 + 5.23137576709092e-05*G0_7_0 - 0.000239291958041999*G0_7_1 - 3.07504995005047e-05*G0_7_2 - 0.000256283894676796*G0_7_3 + 0.00017891706507781*G0_7_4 - 3.8131511345804e-06*G0_7_5 + 5.11765020693689e-06*G0_7_6 + 0.000225477647352685*G0_7_7 - 0.000321809886542084*G0_7_8 - 9.63322391893986e-06*G0_7_9 + 2.83310439560489e-05*G0_8_0 + 0.000498954170829256*G0_8_1 + 5.7855091337244e-05*G0_8_2 + 0.000516983016983105*G0_8_3 - 0.000260699122306309*G0_8_4 - 1.30449907235657e-06*G0_8_5 + 2.2979252889971e-05*G0_8_6 - 0.000321809886542084*G0_8_7 + 0.000636394855144963*G0_8_8 + 6.62284144427113e-05*G0_8_9 - 2.00692164977889e-07*G0_9_0 + 0.000151723276723303*G0_9_1 + 2.27451120308302e-05*G0_9_2 + 5.73979591836841e-05*G0_9_3 - 0.000250865206222392*G0_9_4 + 3.21107463964666e-06*G0_9_5 - 0.000158747502497529*G0_9_6 - 9.63322391893985e-06*G0_9_7 + 6.62284144427113e-05*G0_9_8 - 0.000989813757671067*G0_9_9;
    A[99] = -A[11] + 0.000336622702694188*G0_0_0 - 5.45957019171362e-06*G0_0_1 - 7.27422379208217e-05*G0_0_2 + 0.000634153792636042*G0_0_3 + 0.000567423647780886*G0_0_4 - 0.000911554962894402*G0_0_5 + 0.000486399760953415*G0_0_6 - 0.00093539273226789*G0_0_7 + 0.00055815835949774*G0_0_8 + 0.000408408555730056*G0_0_9 - 5.45957019171362e-06*G0_1_0 + 0.00186667499167531*G0_1_1 - 5.459570191714e-06*G0_1_2 - 0.000219624125874161*G0_1_3 + 0.000166908983873298*G0_1_4 + 0.000577023423005662*G0_1_5 + 0.000577023423005663*G0_1_6 + 0.000166908983873296*G0_1_7 - 0.000219624125874161*G0_1_8 + 0.000488484729556239*G0_1_9 - 7.27422379208217e-05*G0_2_0 - 5.45957019171402e-06*G0_2_1 + 0.000336622702694188*G0_2_2 + 0.000558158359497739*G0_2_3 - 0.00093539273226789*G0_2_4 + 0.000486399760953415*G0_2_5 - 0.000911554962894403*G0_2_6 + 0.000567423647780886*G0_2_7 + 0.000634153792636042*G0_2_8 + 0.000408408555730053*G0_2_9 + 0.000634153792636042*G0_3_0 - 0.000219624125874161*G0_3_1 + 0.000558158359497739*G0_3_2 + 0.00709928464392869*G0_3_3 - 0.0028976938240336*G0_3_4 - 0.00149044036320847*G0_3_5 - 0.00238372118952516*G0_3_6 - 0.0025551122984163*G0_3_7 + 0.0051102245968326*G0_3_8 + 0.00364477040816387*G0_3_9 + 0.000567423647780886*G0_4_0 + 0.000166908983873298*G0_4_1 - 0.00093539273226789*G0_4_2 - 0.0028976938240336*G0_4_3 + 0.00646991401455796*G0_4_4 - 0.00235492186385083*G0_4_5 + 0.004738643053376*G0_4_6 - 0.00137594548308857*G0_4_7 - 0.0025551122984163*G0_4_8 + 0.00348461806051151*G0_4_9 - 0.000911554962894403*G0_5_0 + 0.000577023423005662*G0_5_1 + 0.000486399760953415*G0_5_2 - 0.00149044036320847*G0_5_3 - 0.00235492186385083*G0_5_4 + 0.00632160250463928*G0_5_5 - 0.00256745486656245*G0_5_6 + 0.00473864305337599*G0_5_7 - 0.00238372118952516*G0_5_8 + 0.00354221671186015*G0_5_9 + 0.000486399760953415*G0_6_0 + 0.000577023423005663*G0_6_1 - 0.000911554962894403*G0_6_2 - 0.00238372118952516*G0_6_3 + 0.004738643053376*G0_6_4 - 0.00256745486656245*G0_6_5 + 0.00632160250463929*G0_6_6 - 0.00235492186385083*G0_6_7 - 0.00149044036320847*G0_6_8 + 0.00354221671186016*G0_6_9 - 0.00093539273226789*G0_7_0 + 0.000166908983873296*G0_7_1 + 0.000567423647780886*G0_7_2 - 0.0025551122984163*G0_7_3 - 0.00137594548308857*G0_7_4 + 0.00473864305337599*G0_7_5 - 0.00235492186385083*G0_7_6 + 0.00646991401455796*G0_7_7 - 0.0028976938240336*G0_7_8 + 0.00348461806051149*G0_7_9 + 0.00055815835949774*G0_8_0 - 0.000219624125874161*G0_8_1 + 0.000634153792636042*G0_8_2 + 0.0051102245968326*G0_8_3 - 0.0025551122984163*G0_8_4 - 0.00238372118952516*G0_8_5 - 0.00149044036320847*G0_8_6 - 0.0028976938240336*G0_8_7 + 0.0070992846439287*G0_8_8 + 0.00364477040816389*G0_8_9 + 0.000408408555730056*G0_9_0 + 0.000488484729556239*G0_9_1 + 0.000408408555730053*G0_9_2 + 0.00364477040816387*G0_9_3 + 0.00348461806051151*G0_9_4 + 0.00354221671186015*G0_9_5 + 0.00354221671186017*G0_9_6 + 0.00348461806051149*G0_9_7 + 0.00364477040816389*G0_9_8 + 0.0845917475381904*G0_9_9;
    A[21] = A[2] - 6.72826677291077e-05*G0_0_0 - 9.58614797900674e-06*G0_0_2 - 6.60054231482915e-05*G0_0_5 + 2.95240473811953e-05*G0_0_6 - 4.44644641073287e-05*G0_0_7 + 2.22656807478273e-05*G0_0_8 - 1.11718638504372e-05*G0_0_9 + 6.72826677291077e-05*G0_1_1 + 9.58614797900675e-06*G0_1_2 + 6.60054231482915e-05*G0_1_3 - 2.95240473811952e-05*G0_1_4 - 2.22656807478274e-05*G0_1_7 + 4.44644641073288e-05*G0_1_8 + 1.11718638504372e-05*G0_1_9 - 9.58614797900674e-06*G0_2_0 + 9.58614797900675e-06*G0_2_1 - 7.25836663336786e-06*G0_2_3 + 2.15409590409628e-05*G0_2_4 + 7.25836663336784e-06*G0_2_5 - 2.15409590409627e-05*G0_2_6 + 6.60054231482915e-05*G0_3_1 - 7.25836663336785e-06*G0_3_2 + 0.000117705954759546*G0_3_3 - 3.81315113458036e-05*G0_3_4 + 1.70588340231226e-05*G0_3_6 - 1.72595261881006e-05*G0_3_7 + 1.74602183530785e-05*G0_3_8 + 1.00346082488959e-06*G0_3_9 - 2.95240473811952e-05*G0_4_1 + 2.15409590409627e-05*G0_4_2 - 3.81315113458036e-05*G0_4_3 + 0.000115197302697322*G0_4_4 - 1.70588340231226e-05*G0_4_5 - 8.42907092907235e-06*G0_4_7 - 2.00692164977902e-07*G0_4_8 + 3.41176680462453e-05*G0_4_9 - 6.60054231482915e-05*G0_5_0 + 7.25836663336784e-06*G0_5_2 - 1.70588340231226e-05*G0_5_4 - 0.000117705954759546*G0_5_5 + 3.81315113458036e-05*G0_5_6 - 1.74602183530784e-05*G0_5_7 + 1.72595261881005e-05*G0_5_8 - 1.00346082488957e-06*G0_5_9 + 2.95240473811953e-05*G0_6_0 - 2.15409590409627e-05*G0_6_2 + 1.70588340231226e-05*G0_6_3 + 3.81315113458036e-05*G0_6_5 - 0.000115197302697322*G0_6_6 + 2.00692164977909e-07*G0_6_7 + 8.42907092907237e-06*G0_6_8 - 3.41176680462452e-05*G0_6_9 - 4.44644641073287e-05*G0_7_0 - 2.22656807478274e-05*G0_7_1 - 1.72595261881006e-05*G0_7_3 - 8.42907092907235e-06*G0_7_4 - 1.74602183530784e-05*G0_7_5 + 2.00692164977916e-07*G0_7_6 - 2.50865206222389e-06*G0_7_7 + 3.31142072213556e-05*G0_7_9 + 2.22656807478273e-05*G0_8_0 + 4.44644641073288e-05*G0_8_1 + 1.74602183530785e-05*G0_8_3 - 2.00692164977899e-07*G0_8_4 + 1.72595261881005e-05*G0_8_5 + 8.42907092907237e-06*G0_8_6 + 2.50865206222383e-06*G0_8_8 - 3.31142072213557e-05*G0_8_9 - 1.11718638504371e-05*G0_9_0 + 1.11718638504372e-05*G0_9_1 + 1.00346082488959e-06*G0_9_3 + 3.41176680462453e-05*G0_9_4 - 1.00346082488957e-06*G0_9_5 - 3.41176680462452e-05*G0_9_6 + 3.31142072213556e-05*G0_9_7 - 3.31142072213557e-05*G0_9_8;
    A[26] = -A[21] - 1.83212125176442e-05*G0_0_0 + 7.72082580118425e-05*G0_0_2 - 3.07504995005047e-05*G0_0_3 + 5.7855091337244e-05*G0_0_4 - 9.18612637362793e-05*G0_0_5 + 0.000177266929499102*G0_0_6 - 1.36916654773821e-05*G0_0_7 + 2.27451120308301e-05*G0_0_9 + 7.27992245849512e-05*G0_1_1 + 6.52534469498865e-05*G0_1_2 + 5.23137576709094e-05*G0_1_3 + 2.83310439560487e-05*G0_1_4 - 5.94829277865093e-05*G0_1_5 + 5.63833487940726e-05*G0_1_6 - 3.57566540602316e-05*G0_1_7 + 6.34856215213466e-05*G0_1_8 - 2.00692164977858e-07*G0_1_9 + 7.72082580118425e-05*G0_2_0 + 6.52534469498865e-05*G0_2_1 + 0.00076473006160519*G0_2_2 - 0.000239291958041998*G0_2_3 + 0.000498954170829255*G0_2_4 - 0.000379542332667397*G0_2_5 + 0.000905890984016137*G0_2_6 - 4.41299771656991e-05*G0_2_7 - 2.86097830740735e-05*G0_2_8 + 0.000151723276723302*G0_2_9 - 3.07504995005047e-05*G0_3_0 + 5.23137576709094e-05*G0_3_1 - 0.000239291958041998*G0_3_2 + 0.000225477647352686*G0_3_3 - 0.000321809886542084*G0_3_4 + 0.00017891706507781*G0_3_5 - 0.000256283894676795*G0_3_6 + 5.11765020693681e-06*G0_3_7 - 3.81315113458038e-06*G0_3_8 - 9.63322391893972e-06*G0_3_9 + 5.7855091337244e-05*G0_4_0 + 2.83310439560487e-05*G0_4_1 + 0.000498954170829255*G0_4_2 - 0.000321809886542084*G0_4_3 + 0.000636394855144962*G0_4_4 - 0.000260699122306309*G0_4_5 + 0.000516983016983104*G0_4_6 + 2.29792528899709e-05*G0_4_7 - 1.30449907235629e-06*G0_4_8 + 6.62284144427113e-05*G0_4_9 - 9.18612637362793e-05*G0_5_0 - 5.94829277865093e-05*G0_5_1 - 0.000379542332667397*G0_5_2 + 0.00017891706507781*G0_5_3 - 0.000260699122306309*G0_5_4 - 5.2380655059235e-05*G0_5_5 - 0.000696702850720826*G0_5_6 - 0.00013657101826747*G0_5_7 + 9.13149350649502e-05*G0_5_8 - 0.000250865206222391*G0_5_9 + 0.000177266929499102*G0_6_0 + 5.63833487940726e-05*G0_6_1 + 0.000905890984016137*G0_6_2 - 0.000256283894676795*G0_6_3 + 0.000516983016983104*G0_6_4 - 0.000696702850720826*G0_6_5 + 0.0014483953546456*G0_6_6 + 4.52560832025191e-05*G0_6_7 + 1.90657556729041e-06*G0_6_8 + 5.73979591836833e-05*G0_6_9 - 1.36916654773821e-05*G0_7_0 - 3.57566540602316e-05*G0_7_1 - 4.41299771656991e-05*G0_7_2 + 5.11765020693681e-06*G0_7_3 + 2.29792528899709e-05*G0_7_4 - 0.00013657101826747*G0_7_5 + 4.52560832025191e-05*G0_7_6 - 0.000196276937348399*G0_7_7 + 2.27785607249931e-05*G0_7_8 - 0.000158747502497529*G0_7_9 + 6.34856215213466e-05*G0_8_1 - 2.86097830740735e-05*G0_8_2 - 3.81315113458037e-06*G0_8_3 - 1.30449907235629e-06*G0_8_4 + 9.13149350649502e-05*G0_8_5 + 1.90657556729043e-06*G0_8_6 + 2.27785607249931e-05*G0_8_7 - 7.6363368774096e-05*G0_8_8 + 3.21107463964644e-06*G0_8_9 + 2.27451120308301e-05*G0_9_0 - 2.00692164977865e-07*G0_9_1 + 0.000151723276723302*G0_9_2 - 9.63322391893972e-06*G0_9_3 + 6.62284144427113e-05*G0_9_4 - 0.000250865206222391*G0_9_5 + 5.73979591836833e-05*G0_9_6 - 0.000158747502497529*G0_9_7 + 3.21107463964644e-06*G0_9_8 - 0.000989813757671068*G0_9_9;
    A[22] = A[1] - 5.7696519750101e-05*G0_0_0 - 9.58614797900677e-06*G0_0_1 + 6.72826677291076e-05*G0_0_2 - 1.65794027401198e-05*G0_0_3 + 5.02176395033622e-05*G0_0_4 - 7.39885114885239e-05*G0_0_5 + 8.82711038961188e-05*G0_0_6 - 7.16917011559989e-05*G0_0_7 + 2.37708719851617e-05*G0_0_8 - 9.58614797900676e-06*G0_1_0 - 5.76965197501012e-05*G0_1_1 + 6.72826677291076e-05*G0_1_2 - 7.39885114885241e-05*G0_1_3 + 8.82711038961189e-05*G0_1_4 - 1.65794027401198e-05*G0_1_5 + 5.02176395033622e-05*G0_1_6 + 2.37708719851618e-05*G0_1_7 - 7.16917011559992e-05*G0_1_8 + 6.72826677291076e-05*G0_2_0 + 6.72826677291076e-05*G0_2_1 + 0.00153963843696012*G0_2_2 - 0.00032524395247615*G0_2_3 + 0.000686244559012531*G0_2_4 - 0.00032524395247615*G0_2_5 + 0.000686244559012531*G0_2_6 + 9.12480376766244e-05*G0_2_9 - 1.65794027401198e-05*G0_3_0 - 7.39885114885241e-05*G0_3_1 - 0.00032524395247615*G0_3_2 + 0.000169986263736292*G0_3_3 - 0.000303546899529093*G0_3_4 + 7.25502176395156e-05*G0_3_5 - 0.000196276937348399*G0_3_6 + 4.11418938204738e-06*G0_3_7 + 3.51211288711332e-06*G0_3_8 - 8.2283787640945e-06*G0_3_9 + 5.02176395033622e-05*G0_4_0 + 8.82711038961189e-05*G0_4_1 + 0.000686244559012531*G0_4_2 - 0.000303546899529093*G0_4_3 + 0.000801865545169252*G0_4_4 - 0.000196276937348399*G0_4_5 + 0.000392553874696798*G0_4_6 - 3.35155915513117e-05*G0_4_7 - 7.62630226916056e-06*G0_4_8 + 0.000118809761666925*G0_4_9 - 7.39885114885239e-05*G0_5_0 - 1.65794027401198e-05*G0_5_1 - 0.00032524395247615*G0_5_2 + 7.25502176395156e-05*G0_5_3 - 0.000196276937348399*G0_5_4 + 0.000169986263736293*G0_5_5 - 0.000303546899529094*G0_5_6 + 3.51211288711363e-06*G0_5_7 + 4.11418938204717e-06*G0_5_8 - 8.22837876409453e-06*G0_5_9 + 8.82711038961188e-05*G0_6_0 + 5.02176395033622e-05*G0_6_1 + 0.000686244559012531*G0_6_2 - 0.000196276937348399*G0_6_3 + 0.000392553874696798*G0_6_4 - 0.000303546899529094*G0_6_5 + 0.000801865545169252*G0_6_6 - 7.62630226916091e-06*G0_6_7 - 3.35155915513113e-05*G0_6_8 + 0.000118809761666925*G0_6_9 - 7.16917011559989e-05*G0_7_0 + 2.37708719851618e-05*G0_7_1 + 4.11418938204738e-06*G0_7_3 - 3.35155915513117e-05*G0_7_4 + 3.51211288711364e-06*G0_7_5 - 7.62630226916091e-06*G0_7_6 - 9.35225488797075e-05*G0_7_7 + 6.4823569287866e-05*G0_7_8 + 1.52526045383213e-05*G0_7_9 + 2.37708719851617e-05*G0_8_0 - 7.16917011559992e-05*G0_8_1 + 3.51211288711333e-06*G0_8_3 - 7.62630226916056e-06*G0_8_4 + 4.11418938204718e-06*G0_8_5 - 3.35155915513113e-05*G0_8_6 + 6.4823569287866e-05*G0_8_7 - 9.35225488797078e-05*G0_8_8 + 1.52526045383215e-05*G0_8_9 + 9.12480376766244e-05*G0_9_2 - 8.2283787640945e-06*G0_9_3 + 0.000118809761666925*G0_9_4 - 8.22837876409453e-06*G0_9_5 + 0.000118809761666925*G0_9_6 + 1.52526045383213e-05*G0_9_7 + 1.52526045383215e-05*G0_9_8 + 0.000399778792636003*G0_9_9;
    A[71] = A[25] - 2.95240473811953e-05*G0_0_1 + 2.95240473811952e-05*G0_0_2 - 2.42837519623276e-05*G0_0_3 + 2.42837519623275e-05*G0_0_4 - 0.000119411838161858*G0_0_5 + 6.11107642357746e-05*G0_0_6 + 0.000119411838161858*G0_0_7 - 6.11107642357746e-05*G0_0_8 - 2.95240473811953e-05*G0_1_0 - 0.000319490777080118*G0_1_1 - 0.000220359997145749*G0_1_3 + 0.000122321874554038*G0_1_4 + 1.80622948480136e-06*G0_1_5 + 4.41522762951409e-05*G0_1_6 + 0.000191661017553907*G0_1_7 - 0.000343785678607166*G0_1_8 - 4.13425859854503e-05*G0_1_9 + 2.95240473811952e-05*G0_2_0 + 0.000319490777080116*G0_2_2 - 0.000122321874554038*G0_2_3 + 0.000220359997145749*G0_2_4 - 0.000191661017553907*G0_2_5 + 0.000343785678607165*G0_2_6 - 1.80622948480136e-06*G0_2_7 - 4.41522762951408e-05*G0_2_8 + 4.13425859854502e-05*G0_2_9 - 2.42837519623276e-05*G0_3_0 - 0.000220359997145749*G0_3_1 - 0.000122321874554038*G0_3_2 - 0.0001472077030113*G0_3_3 + 3.37162837162895e-05*G0_3_5 - 0.000132456828885423*G0_3_6 + 7.28512558869826e-05*G0_3_7 - 0.000205308084772405*G0_3_8 - 2.16747538176145e-05*G0_3_9 + 2.42837519623275e-05*G0_4_0 + 0.000122321874554038*G0_4_1 + 0.000220359997145749*G0_4_2 + 0.000147207703011299*G0_4_4 - 7.28512558869825e-05*G0_4_5 + 0.000205308084772405*G0_4_6 - 3.37162837162894e-05*G0_4_7 + 0.000132456828885423*G0_4_8 + 2.16747538176144e-05*G0_4_9 - 0.000119411838161858*G0_5_0 + 1.80622948480137e-06*G0_5_1 - 0.000191661017553907*G0_5_2 + 3.37162837162895e-05*G0_5_3 - 7.28512558869825e-05*G0_5_4 - 0.000172795954045983*G0_5_5 - 1.38477593834763e-05*G0_5_6 - 5.41868845440333e-06*G0_5_8 + 1.08373769088072e-05*G0_5_9 + 6.11107642357746e-05*G0_6_0 + 4.41522762951409e-05*G0_6_1 + 0.000343785678607165*G0_6_2 - 0.000132456828885423*G0_6_3 + 0.000205308084772405*G0_6_4 - 1.38477593834762e-05*G0_6_5 + 0.000678841248037791*G0_6_6 + 5.41868845440363e-06*G0_6_7 + 0.000140885899814495*G0_6_9 + 0.000119411838161858*G0_7_0 + 0.000191661017553907*G0_7_1 - 1.80622948480136e-06*G0_7_2 + 7.28512558869826e-05*G0_7_3 - 3.37162837162894e-05*G0_7_4 + 5.41868845440363e-06*G0_7_6 + 0.000172795954045982*G0_7_7 + 1.38477593834766e-05*G0_7_8 - 1.08373769088075e-05*G0_7_9 - 6.11107642357746e-05*G0_8_0 - 0.000343785678607166*G0_8_1 - 4.41522762951408e-05*G0_8_2 - 0.000205308084772405*G0_8_3 + 0.000132456828885423*G0_8_4 - 5.41868845440333e-06*G0_8_5 + 1.38477593834766e-05*G0_8_7 - 0.000678841248037792*G0_8_8 - 0.000140885899814495*G0_8_9 - 4.13425859854503e-05*G0_9_1 + 4.13425859854502e-05*G0_9_2 - 2.16747538176145e-05*G0_9_3 + 2.16747538176144e-05*G0_9_4 + 1.0837376908807e-05*G0_9_5 + 0.000140885899814495*G0_9_6 - 1.08373769088075e-05*G0_9_7 - 0.000140885899814495*G0_9_8;
    A[41] = A[71] - 7.17585985443248e-05*G0_0_0 + 7.25836663336792e-06*G0_0_1 - 4.00380869130937e-05*G0_0_3 + 4.89688882546108e-05*G0_0_4 - 7.1346064649648e-05*G0_0_5 + 7.11453724846702e-05*G0_0_6 - 0.000166674843014157*G0_0_7 + 6.11107642357746e-05*G0_0_8 - 1.00346082488956e-06*G0_0_9 + 7.25836663336792e-06*G0_1_0 - 7.25836663336783e-06*G0_1_2 - 0.000147508741258766*G0_1_3 + 0.000140484515484539*G0_1_4 - 7.09446803196923e-05*G0_1_5 + 7.09446803196923e-05*G0_1_6 - 0.000140484515484539*G0_1_7 + 0.000147508741258766*G0_1_8 - 7.25836663336784e-06*G0_2_1 + 7.1758598544325e-05*G0_2_2 - 6.11107642357746e-05*G0_2_3 + 0.000166674843014157*G0_2_4 - 7.11453724846702e-05*G0_2_5 + 7.13460646496481e-05*G0_2_6 - 4.89688882546107e-05*G0_2_7 + 4.00380869130936e-05*G0_2_8 + 1.00346082488959e-06*G0_2_9 - 4.00380869130937e-05*G0_3_0 - 0.000147508741258766*G0_3_1 - 6.11107642357746e-05*G0_3_2 - 0.000400380869130937*G0_3_3 - 0.000280266608391656*G0_3_4 + 0.000166474150849179*G0_3_5 - 0.000212834040959077*G0_3_6 + 0.000120114260739281*G0_3_7 - 0.000240228521478562*G0_3_9 + 4.89688882546108e-05*G0_4_0 + 0.000140484515484539*G0_4_1 + 0.000166674843014157*G0_4_2 - 0.000280266608391656*G0_4_3 + 0.000636394855144963*G0_4_4 - 0.000146906664763833*G0_4_5 + 0.000359740705722909*G0_4_6 - 0.000120114260739281*G0_4_8 + 0.000290802947052996*G0_4_9 - 7.1346064649648e-05*G0_5_0 - 7.09446803196923e-05*G0_5_1 - 7.11453724846702e-05*G0_5_2 + 0.000166474150849179*G0_5_3 - 0.000146906664763833*G0_5_4 - 0.000332346225203423*G0_5_5 - 0.000359740705722908*G0_5_7 + 0.000212834040959076*G0_5_8 - 0.000422657699443485*G0_5_9 + 7.11453724846702e-05*G0_6_0 + 7.09446803196923e-05*G0_6_1 + 7.13460646496481e-05*G0_6_2 - 0.000212834040959077*G0_6_3 + 0.000359740705722909*G0_6_4 + 0.000332346225203424*G0_6_6 + 0.000146906664763832*G0_6_7 - 0.000166474150849179*G0_6_8 + 0.000422657699443485*G0_6_9 - 0.000166674843014157*G0_7_0 - 0.000140484515484539*G0_7_1 - 4.89688882546107e-05*G0_7_2 + 0.000120114260739281*G0_7_3 - 0.000359740705722908*G0_7_5 + 0.000146906664763832*G0_7_6 - 0.000636394855144961*G0_7_7 + 0.000280266608391655*G0_7_8 - 0.000290802947052996*G0_7_9 + 6.11107642357746e-05*G0_8_0 + 0.000147508741258766*G0_8_1 + 4.00380869130936e-05*G0_8_2 - 0.000120114260739281*G0_8_4 + 0.000212834040959076*G0_8_5 - 0.000166474150849179*G0_8_6 + 0.000280266608391655*G0_8_7 + 0.000400380869130938*G0_8_8 + 0.000240228521478562*G0_8_9 - 1.00346082488956e-06*G0_9_0 + 1.00346082488959e-06*G0_9_2 - 0.000240228521478562*G0_9_3 + 0.000290802947052996*G0_9_4 - 0.000422657699443485*G0_9_5 + 0.000422657699443485*G0_9_6 - 0.000290802947052996*G0_9_7 + 0.000240228521478562*G0_9_8;
    A[60] = A[41] - 0.000319490777080117*G0_0_0 - 2.95240473811953e-05*G0_0_2 + 4.41522762951411e-05*G0_0_3 + 1.80622948480121e-06*G0_0_4 - 0.000343785678607166*G0_0_5 + 0.000191661017553907*G0_0_6 - 0.000220359997145749*G0_0_7 + 0.000122321874554038*G0_0_8 - 4.13425859854501e-05*G0_0_9 + 0.000319490777080117*G0_1_1 + 2.95240473811952e-05*G0_1_2 + 0.000343785678607166*G0_1_3 - 0.000191661017553907*G0_1_4 - 4.4152276295141e-05*G0_1_5 - 1.80622948480125e-06*G0_1_6 - 0.000122321874554038*G0_1_7 + 0.000220359997145749*G0_1_8 + 4.13425859854502e-05*G0_1_9 - 2.95240473811953e-05*G0_2_0 + 2.95240473811952e-05*G0_2_1 + 6.11107642357747e-05*G0_2_3 - 0.000119411838161858*G0_2_4 - 6.11107642357746e-05*G0_2_5 + 0.000119411838161858*G0_2_6 - 2.42837519623275e-05*G0_2_7 + 2.42837519623275e-05*G0_2_8 + 4.41522762951411e-05*G0_3_0 + 0.000343785678607166*G0_3_1 + 6.11107642357747e-05*G0_3_2 + 0.000678841248037792*G0_3_3 - 1.38477593834761e-05*G0_3_4 + 5.41868845440357e-06*G0_3_6 - 0.000132456828885423*G0_3_7 + 0.000205308084772405*G0_3_8 + 0.000140885899814495*G0_3_9 + 1.80622948480121e-06*G0_4_0 - 0.000191661017553907*G0_4_1 - 0.000119411838161858*G0_4_2 - 1.38477593834761e-05*G0_4_3 - 0.000172795954045984*G0_4_4 - 5.41868845440366e-06*G0_4_5 + 3.37162837162895e-05*G0_4_7 - 7.28512558869825e-05*G0_4_8 + 1.08373769088077e-05*G0_4_9 - 0.000343785678607166*G0_5_0 - 4.4152276295141e-05*G0_5_1 - 6.11107642357746e-05*G0_5_2 - 5.41868845440366e-06*G0_5_4 - 0.000678841248037792*G0_5_5 + 1.38477593834762e-05*G0_5_6 - 0.000205308084772405*G0_5_7 + 0.000132456828885422*G0_5_8 - 0.000140885899814495*G0_5_9 + 0.000191661017553907*G0_6_0 - 1.80622948480125e-06*G0_6_1 + 0.000119411838161858*G0_6_2 + 5.41868845440357e-06*G0_6_3 + 1.38477593834762e-05*G0_6_5 + 0.000172795954045983*G0_6_6 + 7.28512558869824e-05*G0_6_7 - 3.37162837162892e-05*G0_6_8 - 1.08373769088071e-05*G0_6_9 - 0.000220359997145749*G0_7_0 - 0.000122321874554038*G0_7_1 - 2.42837519623275e-05*G0_7_2 - 0.000132456828885423*G0_7_3 + 3.37162837162895e-05*G0_7_4 - 0.000205308084772405*G0_7_5 + 7.28512558869824e-05*G0_7_6 - 0.000147207703011299*G0_7_7 - 2.16747538176146e-05*G0_7_9 + 0.000122321874554038*G0_8_0 + 0.000220359997145749*G0_8_1 + 2.42837519623275e-05*G0_8_2 + 0.000205308084772405*G0_8_3 - 7.28512558869825e-05*G0_8_4 + 0.000132456828885422*G0_8_5 - 3.37162837162892e-05*G0_8_6 + 0.000147207703011299*G0_8_8 + 2.16747538176143e-05*G0_8_9 - 4.13425859854501e-05*G0_9_0 + 4.13425859854502e-05*G0_9_1 + 0.000140885899814495*G0_9_3 + 1.08373769088078e-05*G0_9_4 - 0.000140885899814495*G0_9_5 - 1.08373769088071e-05*G0_9_6 - 2.16747538176146e-05*G0_9_7 + 2.16747538176143e-05*G0_9_8;
    A[55] = A[60] + 0.00117772852147872*G0_0_0 + 7.53933566433692e-05*G0_0_1 + 0.000197849025974059*G0_0_2 + 1.40484515484509e-06*G0_0_3 + 6.32180319680427e-06*G0_0_4 + 0.00175254433066963*G0_0_5 - 0.000866087037962185*G0_0_6 + 0.0006778377872129*G0_0_7 - 0.000325221653346708*G0_0_8 + 0.000102553696303714*G0_0_9 + 7.53933566433692e-05*G0_1_0 + 8.05556051091901e-05*G0_1_1 + 5.06190238333181e-05*G0_1_2 - 0.000116000071357234*G0_1_3 + 4.41522762951417e-06*G0_1_4 + 0.00085294170115613*G0_1_5 - 0.000130048522905688*G0_1_6 + 0.000407906825317608*G0_1_7 - 0.000257488047666662*G0_1_8 + 0.000543474382760188*G0_1_9 + 0.000197849025974059*G0_2_0 + 5.06190238333181e-05*G0_2_1 + 0.000157108516483543*G0_2_2 - 5.5692075781371e-05*G0_2_3 - 7.02422577422667e-07*G0_2_4 + 0.000641813543599366*G0_2_5 - 0.000280266608391655*G0_2_6 + 0.00035773378407313*G0_2_7 - 0.000173197338375939*G0_2_8 + 0.000271536499215116*G0_2_9 + 1.40484515484509e-06*G0_3_0 - 0.000116000071357234*G0_3_1 - 5.5692075781371e-05*G0_3_2 + 0.000371481197374117*G0_3_3 - 0.000141487976309429*G0_3_4 - 0.00105212867489671*G0_3_5 - 6.86367204224462e-05*G0_3_6 - 0.000462996824604045*G0_3_7 + 0.000402187098615738*G0_3_8 - 0.000704429499072474*G0_3_9 + 6.32180319680428e-06*G0_4_0 + 4.41522762951417e-06*G0_4_1 - 7.02422577422654e-07*G0_4_2 - 0.000141487976309429*G0_4_3 + 0.000543072998430233*G0_4_4 - 0.000477747698729922*G0_4_5 + 0.000546384419152369*G0_4_6 - 0.000316692236335147*G0_4_7 + 6.08097259883076e-05*G0_4_8 + 0.000140885899814495*G0_4_9 + 0.00175254433066963*G0_5_0 + 0.00085294170115613*G0_5_1 + 0.000641813543599366*G0_5_2 - 0.00105212867489671*G0_5_3 - 0.000477747698729922*G0_5_4 + 0.0179349556693337*G0_5_5 - 0.00307871815684368*G0_5_6 + 0.00454959103396679*G0_5_7 - 0.00301760739260789*G0_5_8 + 0.00572755369630466*G0_5_9 - 0.000866087037962185*G0_6_0 - 0.000130048522905688*G0_6_1 - 0.000280266608391655*G0_6_2 - 6.86367204224462e-05*G0_6_3 + 0.000546384419152369*G0_6_4 - 0.00307871815684368*G0_6_5 + 0.00260819537605296*G0_6_6 - 0.0015319836413589*G0_6_7 + 0.000684259936492194*G0_6_8 - 0.000677336056800456*G0_6_9 + 0.0006778377872129*G0_7_0 + 0.000407906825317608*G0_7_1 + 0.00035773378407313*G0_7_2 - 0.000462996824604045*G0_7_3 - 0.000316692236335147*G0_7_4 + 0.00454959103396679*G0_7_5 - 0.0015319836413589*G0_7_6 + 0.00312086351148903*G0_7_7 - 0.00161416708291735*G0_7_8 + 0.00275630619380666*G0_7_9 - 0.000325221653346708*G0_8_0 - 0.000257488047666662*G0_8_1 - 0.000173197338375939*G0_8_2 + 0.000402187098615738*G0_8_3 + 6.08097259883076e-05*G0_8_4 - 0.0030176073926079*G0_8_5 + 0.000684259936492194*G0_8_6 - 0.00161416708291735*G0_8_7 + 0.00100667189952921*G0_8_8 - 0.00175204260025718*G0_8_9 + 0.000102553696303714*G0_9_0 + 0.000543474382760188*G0_9_1 + 0.000271536499215116*G0_9_2 - 0.000704429499072474*G0_9_3 + 0.000140885899814495*G0_9_4 + 0.00572755369630466*G0_9_5 - 0.000677336056800456*G0_9_6 + 0.00275630619380666*G0_9_7 - 0.00175204260025718*G0_9_8 + 0.00575464713857668*G0_9_9;
    A[75] = -A[60] + 0.000107704795204812*G0_0_0 + 3.55894105894165e-05*G0_0_1 + 2.83310439560486e-05*G0_0_2 + 2.80969030969078e-06*G0_0_3 + 7.37543706293832e-05*G0_0_4 + 0.000101851273726289*G0_0_5 + 2.10726773226886e-06*G0_0_6 + 0.000249360014985056*G0_0_7 - 0.000138377247752271*G0_0_8 + 2.38823676323718e-05*G0_0_9 + 3.55894105894165e-05*G0_1_0 + 5.56140288283241e-05*G0_1_1 + 4.03948729841655e-05*G0_1_2 - 7.51592157842284e-05*G0_1_3 + 1.57543349507662e-05*G0_1_4 + 0.000314484622520389*G0_1_5 - 6.62284144427112e-05*G0_1_6 + 0.000304349668189005*G0_1_7 - 0.000166373804766689*G0_1_8 + 0.000312678393035588*G0_1_9 + 2.83310439560486e-05*G0_2_0 + 4.03948729841655e-05*G0_2_1 + 0.000127372627372649*G0_2_2 - 5.53910375339041e-05*G0_2_3 - 3.81315113458031e-06*G0_2_4 + 0.00024323890395323*G0_2_5 + 3.01038247467255e-07*G0_2_6 + 0.000354522709433483*G0_2_7 - 0.000115197302697322*G0_2_8 + 0.000313681853860478*G0_2_9 + 2.80969030969078e-06*G0_3_0 - 7.51592157842284e-05*G0_3_1 - 5.53910375339041e-05*G0_3_2 + 0.000422356661196018*G0_3_3 - 0.000202598740545204*G0_3_4 - 0.000313380815613011*G0_3_5 - 0.000126436063936085*G0_3_6 - 0.000333550378193292*G0_3_7 + 0.000313079777365545*G0_3_8 - 0.000270934422720183*G0_3_9 + 7.37543706293832e-05*G0_4_0 + 1.57543349507662e-05*G0_4_1 - 3.81315113458032e-06*G0_4_2 - 0.000202598740545204*G0_4_3 + 0.000754702886399443*G0_4_4 - 0.000546384419152369*G0_4_5 + 0.000672820483088454*G0_4_6 - 0.00047985496646219*G0_4_7 + 2.04706008277471e-05*G0_4_8 + 0.000151723276723303*G0_4_9 + 0.000101851273726289*G0_5_0 + 0.000314484622520389*G0_5_1 + 0.00024323890395323*G0_5_2 - 0.000313380815613011*G0_5_3 - 0.000546384419152369*G0_5_4 + 0.00368561126373688*G0_5_5 - 0.00158677260239787*G0_5_6 + 0.00265726461039006*G0_5_7 - 0.00126857517482539*G0_5_8 + 0.00246550324675366*G0_5_9 + 2.10726773226892e-06*G0_6_0 - 6.62284144427112e-05*G0_6_1 + 3.01038247467282e-07*G0_6_2 - 0.000126436063936085*G0_6_3 + 0.000672820483088454*G0_6_4 - 0.00158677260239787*G0_6_5 + 0.00143143686670497*G0_6_6 - 0.00138868943556467*G0_6_7 + 0.000434699229342159*G0_6_8 - 0.000688173433709263*G0_6_9 + 0.000249360014985056*G0_7_0 + 0.000304349668189005*G0_7_1 + 0.000354522709433483*G0_7_2 - 0.000333550378193292*G0_7_3 - 0.00047985496646219*G0_7_4 + 0.00265726461039006*G0_7_5 - 0.00138868943556467*G0_7_6 + 0.00408599213286782*G0_7_7 - 0.00130650599400621*G0_7_8 + 0.00270573176823222*G0_7_9 - 0.000138377247752271*G0_8_0 - 0.000166373804766689*G0_8_1 - 0.000115197302697322*G0_8_2 + 0.000313079777365545*G0_8_3 + 2.04706008277471e-05*G0_8_4 - 0.00126857517482539*G0_8_5 + 0.000434699229342159*G0_8_6 - 0.00130650599400621*G0_8_7 + 0.000795042011560003*G0_8_8 - 0.000978976380762259*G0_8_9 + 2.38823676323719e-05*G0_9_0 + 0.000312678393035588*G0_9_1 + 0.000313681853860478*G0_9_2 - 0.000270934422720183*G0_9_3 + 0.000151723276723303*G0_9_4 + 0.00246550324675366*G0_9_5 - 0.000688173433709264*G0_9_6 + 0.00270573176823222*G0_9_7 - 0.000978976380762259*G0_9_8 + 0.00516942878550108*G0_9_9;
    A[64] = A[75] - 0.000371581543456605*G0_0_0 - 1.74602183530783e-05*G0_0_1 - 0.000138176555587293*G0_0_3 + 0.00035582720850584*G0_0_4 - 0.000636093816897495*G0_0_5 + 0.000565048790495314*G0_0_6 - 0.000520796168117684*G0_0_7 + 0.000205308084772405*G0_0_8 + 0.000247453439417767*G0_0_9 - 1.74602183530783e-05*G0_1_0 + 1.74602183530785e-05*G0_1_2 - 0.000115297648779811*G0_1_3 + 0.000359740705722909*G0_1_4 - 0.000494003764093133*G0_1_5 + 0.000494003764093133*G0_1_6 - 0.000359740705722909*G0_1_7 + 0.000115297648779811*G0_1_8 + 1.74602183530785e-05*G0_2_1 + 0.000371581543456606*G0_2_2 - 0.000205308084772405*G0_2_3 + 0.000520796168117684*G0_2_4 - 0.000565048790495314*G0_2_5 + 0.000636093816897495*G0_2_6 - 0.00035582720850584*G0_2_7 + 0.000138176555587293*G0_2_8 - 0.000247453439417767*G0_2_9 - 0.000138176555587293*G0_3_0 - 0.000115297648779811*G0_3_1 - 0.000205308084772405*G0_3_2 + 0.00050393802625954*G0_3_3 - 0.00139802162123614*G0_3_4 + 0.00094827047952064*G0_3_5 - 0.0014820112922794*G0_3_6 + 0.00041452966676188*G0_3_7 - 0.000829059333523759*G0_3_9 + 0.00035582720850584*G0_4_0 + 0.000359740705722909*G0_4_1 + 0.000520796168117684*G0_4_2 - 0.00139802162123614*G0_4_3 + 0.00394209585057866*G0_4_4 - 0.00106748162551752*G0_4_5 + 0.00254949291779692*G0_4_6 - 0.000414529666761879*G0_4_8 + 0.00287732356928834*G0_4_9 - 0.000636093816897495*G0_5_0 - 0.000494003764093133*G0_5_1 - 0.000565048790495314*G0_5_2 + 0.00094827047952064*G0_5_3 - 0.00106748162551752*G0_5_4 - 0.00343815782431911*G0_5_5 - 0.00254949291779692*G0_5_7 + 0.0014820112922794*G0_5_8 - 0.0037063829028121*G0_5_9 + 0.000565048790495314*G0_6_0 + 0.000494003764093133*G0_6_1 + 0.000636093816897495*G0_6_2 - 0.0014820112922794*G0_6_3 + 0.00254949291779692*G0_6_4 + 0.00343815782431912*G0_6_6 + 0.00106748162551752*G0_6_7 - 0.000948270479520638*G0_6_8 + 0.0037063829028121*G0_6_9 - 0.000520796168117684*G0_7_0 - 0.000359740705722909*G0_7_1 - 0.00035582720850584*G0_7_2 + 0.00041452966676188*G0_7_3 - 0.00254949291779692*G0_7_5 + 0.00106748162551752*G0_7_6 - 0.00394209585057865*G0_7_7 + 0.00139802162123614*G0_7_8 - 0.00287732356928834*G0_7_9 + 0.000205308084772405*G0_8_0 + 0.000115297648779811*G0_8_1 + 0.000138176555587293*G0_8_2 - 0.000414529666761879*G0_8_4 + 0.0014820112922794*G0_8_5 - 0.000948270479520638*G0_8_6 + 0.00139802162123614*G0_8_7 - 0.000503938026259539*G0_8_8 + 0.000829059333523758*G0_8_9 + 0.000247453439417767*G0_9_0 - 0.000247453439417767*G0_9_2 - 0.000829059333523759*G0_9_3 + 0.00287732356928834*G0_9_4 - 0.0037063829028121*G0_9_5 + 0.0037063829028121*G0_9_6 - 0.00287732356928834*G0_9_7 + 0.000829059333523758*G0_9_8;
    A[5] = -A[1] + 0.000764730061605192*G0_0_0 + 6.52534469498865e-05*G0_0_1 + 7.72082580118425e-05*G0_0_2 - 2.86097830740738e-05*G0_0_3 - 4.41299771656989e-05*G0_0_4 + 0.000905890984016138*G0_0_5 - 0.000379542332667397*G0_0_6 + 0.000498954170829254*G0_0_7 - 0.000239291958041998*G0_0_8 + 0.000151723276723302*G0_0_9 + 6.52534469498865e-05*G0_1_0 + 7.27992245849514e-05*G0_1_1 + 6.34856215213466e-05*G0_1_3 - 3.57566540602316e-05*G0_1_4 + 5.63833487940724e-05*G0_1_5 - 5.94829277865092e-05*G0_1_6 + 2.83310439560485e-05*G0_1_7 + 5.23137576709096e-05*G0_1_8 - 2.00692164977882e-07*G0_1_9 + 7.72082580118425e-05*G0_2_0 - 1.83212125176442e-05*G0_2_2 - 1.36916654773821e-05*G0_2_4 + 0.000177266929499102*G0_2_5 - 9.18612637362793e-05*G0_2_6 + 5.78550913372438e-05*G0_2_7 - 3.07504995005046e-05*G0_2_8 + 2.27451120308302e-05*G0_2_9 - 2.86097830740738e-05*G0_3_0 + 6.34856215213466e-05*G0_3_1 - 7.63633687740958e-05*G0_3_3 + 2.27785607249931e-05*G0_3_4 + 1.90657556728994e-06*G0_3_5 + 9.13149350649505e-05*G0_3_6 - 1.30449907235663e-06*G0_3_7 - 3.81315113458023e-06*G0_3_8 + 3.21107463964667e-06*G0_3_9 - 4.41299771656989e-05*G0_4_0 - 3.57566540602316e-05*G0_4_1 - 1.36916654773821e-05*G0_4_2 + 2.27785607249931e-05*G0_4_3 - 0.000196276937348399*G0_4_4 + 4.52560832025194e-05*G0_4_5 - 0.00013657101826747*G0_4_6 + 2.29792528899711e-05*G0_4_7 + 5.11765020693677e-06*G0_4_8 - 0.000158747502497529*G0_4_9 + 0.000905890984016138*G0_5_0 + 5.63833487940724e-05*G0_5_1 + 0.000177266929499102*G0_5_2 + 1.90657556728994e-06*G0_5_3 + 4.52560832025195e-05*G0_5_4 + 0.0014483953546456*G0_5_5 - 0.000696702850720826*G0_5_6 + 0.000516983016983103*G0_5_7 - 0.000256283894676795*G0_5_8 + 5.73979591836835e-05*G0_5_9 - 0.000379542332667397*G0_6_0 - 5.94829277865092e-05*G0_6_1 - 9.18612637362793e-05*G0_6_2 + 9.13149350649505e-05*G0_6_3 - 0.00013657101826747*G0_6_4 - 0.000696702850720826*G0_6_5 - 5.23806550592352e-05*G0_6_6 - 0.000260699122306309*G0_6_7 + 0.000178917065077809*G0_6_8 - 0.000250865206222392*G0_6_9 + 0.000498954170829254*G0_7_0 + 2.83310439560485e-05*G0_7_1 + 5.78550913372438e-05*G0_7_2 - 1.30449907235663e-06*G0_7_3 + 2.29792528899711e-05*G0_7_4 + 0.000516983016983103*G0_7_5 - 0.000260699122306309*G0_7_6 + 0.000636394855144962*G0_7_7 - 0.000321809886542083*G0_7_8 + 6.62284144427115e-05*G0_7_9 - 0.000239291958041998*G0_8_0 + 5.23137576709096e-05*G0_8_1 - 3.07504995005046e-05*G0_8_2 - 3.81315113458024e-06*G0_8_3 + 5.11765020693677e-06*G0_8_4 - 0.000256283894676795*G0_8_5 + 0.000178917065077809*G0_8_6 - 0.000321809886542083*G0_8_7 + 0.000225477647352685*G0_8_8 - 9.63322391893994e-06*G0_8_9 + 0.000151723276723302*G0_9_0 - 2.00692164977889e-07*G0_9_1 + 2.27451120308302e-05*G0_9_2 + 3.21107463964663e-06*G0_9_3 - 0.000158747502497529*G0_9_4 + 5.73979591836835e-05*G0_9_5 - 0.000250865206222391*G0_9_6 + 6.62284144427115e-05*G0_9_7 - 9.63322391893992e-06*G0_9_8 - 0.000989813757671068*G0_9_9;
    A[10] = A[1];
    A[8] = A[32] - 0.000319490777080117*G0_0_0 - 2.95240473811952e-05*G0_0_1 + 1.80622948480135e-06*G0_0_3 + 4.41522762951409e-05*G0_0_4 - 0.000220359997145748*G0_0_5 + 0.000122321874554038*G0_0_6 - 0.000343785678607165*G0_0_7 + 0.000191661017553907*G0_0_8 - 4.134258598545e-05*G0_0_9 - 2.95240473811952e-05*G0_1_0 + 2.95240473811952e-05*G0_1_2 - 0.000119411838161858*G0_1_3 + 6.11107642357747e-05*G0_1_4 - 2.42837519623275e-05*G0_1_5 + 2.42837519623275e-05*G0_1_6 - 6.11107642357745e-05*G0_1_7 + 0.000119411838161859*G0_1_8 + 2.95240473811952e-05*G0_2_1 + 0.000319490777080116*G0_2_2 - 0.000191661017553907*G0_2_3 + 0.000343785678607165*G0_2_4 - 0.000122321874554038*G0_2_5 + 0.000220359997145749*G0_2_6 - 4.41522762951409e-05*G0_2_7 - 1.80622948480119e-06*G0_2_8 + 4.13425859854501e-05*G0_2_9 + 1.80622948480136e-06*G0_3_0 - 0.000119411838161858*G0_3_1 - 0.000191661017553907*G0_3_2 - 0.000172795954045984*G0_3_3 - 1.3847759383476e-05*G0_3_4 + 3.37162837162895e-05*G0_3_5 - 7.28512558869825e-05*G0_3_6 - 5.41868845440336e-06*G0_3_7 + 1.08373769088072e-05*G0_3_9 + 4.41522762951409e-05*G0_4_0 + 6.11107642357747e-05*G0_4_1 + 0.000343785678607165*G0_4_2 - 1.3847759383476e-05*G0_4_3 + 0.000678841248037792*G0_4_4 - 0.000132456828885423*G0_4_5 + 0.000205308084772405*G0_4_6 + 5.41868845440374e-06*G0_4_8 + 0.000140885899814495*G0_4_9 - 0.000220359997145748*G0_5_0 - 2.42837519623275e-05*G0_5_1 - 0.000122321874554038*G0_5_2 + 3.37162837162895e-05*G0_5_3 - 0.000132456828885423*G0_5_4 - 0.000147207703011299*G0_5_5 - 0.000205308084772404*G0_5_7 + 7.2851255886982e-05*G0_5_8 - 2.16747538176146e-05*G0_5_9 + 0.000122321874554038*G0_6_0 + 2.42837519623275e-05*G0_6_1 + 0.000220359997145749*G0_6_2 - 7.28512558869824e-05*G0_6_3 + 0.000205308084772405*G0_6_4 + 0.000147207703011299*G0_6_6 + 0.000132456828885422*G0_6_7 - 3.37162837162892e-05*G0_6_8 + 2.16747538176145e-05*G0_6_9 - 0.000343785678607165*G0_7_0 - 6.11107642357745e-05*G0_7_1 - 4.41522762951409e-05*G0_7_2 - 5.41868845440336e-06*G0_7_3 - 0.000205308084772404*G0_7_5 + 0.000132456828885422*G0_7_6 - 0.00067884124803779*G0_7_7 + 1.38477593834754e-05*G0_7_8 - 0.000140885899814495*G0_7_9 + 0.000191661017553907*G0_8_0 + 0.000119411838161859*G0_8_1 - 1.80622948480119e-06*G0_8_2 + 5.41868845440374e-06*G0_8_4 + 7.2851255886982e-05*G0_8_5 - 3.37162837162892e-05*G0_8_6 + 1.38477593834754e-05*G0_8_7 + 0.000172795954045984*G0_8_8 - 1.0837376908807e-05*G0_8_9 - 4.134258598545e-05*G0_9_0 + 4.13425859854501e-05*G0_9_2 + 1.08373769088072e-05*G0_9_3 + 0.000140885899814495*G0_9_4 - 2.16747538176146e-05*G0_9_5 + 2.16747538176145e-05*G0_9_6 - 0.000140885899814495*G0_9_7 - 1.0837376908807e-05*G0_9_8;
    A[83] = A[75] - 0.000371581543456605*G0_0_0 - 1.74602183530784e-05*G0_0_2 + 0.00035582720850584*G0_0_3 - 0.000138176555587293*G0_0_4 - 0.000520796168117684*G0_0_5 + 0.000205308084772405*G0_0_6 - 0.000636093816897495*G0_0_7 + 0.000565048790495314*G0_0_8 + 0.000247453439417767*G0_0_9 + 0.000371581543456607*G0_1_1 + 1.74602183530785e-05*G0_1_2 + 0.000520796168117685*G0_1_3 - 0.000205308084772405*G0_1_4 - 0.00035582720850584*G0_1_5 + 0.000138176555587293*G0_1_6 - 0.000565048790495314*G0_1_7 + 0.000636093816897495*G0_1_8 - 0.000247453439417767*G0_1_9 - 1.74602183530784e-05*G0_2_0 + 1.74602183530785e-05*G0_2_1 + 0.000359740705722909*G0_2_3 - 0.000115297648779811*G0_2_4 - 0.000359740705722909*G0_2_5 + 0.000115297648779811*G0_2_6 - 0.000494003764093133*G0_2_7 + 0.000494003764093133*G0_2_8 + 0.00035582720850584*G0_3_0 + 0.000520796168117685*G0_3_1 + 0.000359740705722909*G0_3_2 + 0.00394209585057866*G0_3_3 - 0.00139802162123614*G0_3_4 - 0.000414529666761879*G0_3_6 - 0.00106748162551752*G0_3_7 + 0.00254949291779692*G0_3_8 + 0.00287732356928834*G0_3_9 - 0.000138176555587293*G0_4_0 - 0.000205308084772405*G0_4_1 - 0.000115297648779811*G0_4_2 - 0.00139802162123614*G0_4_3 + 0.000503938026259539*G0_4_4 + 0.00041452966676188*G0_4_5 + 0.000948270479520639*G0_4_7 - 0.0014820112922794*G0_4_8 - 0.000829059333523759*G0_4_9 - 0.000520796168117684*G0_5_0 - 0.00035582720850584*G0_5_1 - 0.000359740705722909*G0_5_2 + 0.00041452966676188*G0_5_4 - 0.00394209585057865*G0_5_5 + 0.00139802162123614*G0_5_6 - 0.00254949291779692*G0_5_7 + 0.00106748162551752*G0_5_8 - 0.00287732356928834*G0_5_9 + 0.000205308084772405*G0_6_0 + 0.000138176555587293*G0_6_1 + 0.000115297648779811*G0_6_2 - 0.000414529666761879*G0_6_3 + 0.00139802162123614*G0_6_5 - 0.000503938026259541*G0_6_6 + 0.0014820112922794*G0_6_7 - 0.000948270479520639*G0_6_8 + 0.000829059333523758*G0_6_9 - 0.000636093816897495*G0_7_0 - 0.000565048790495314*G0_7_1 - 0.000494003764093133*G0_7_2 - 0.00106748162551752*G0_7_3 + 0.000948270479520639*G0_7_4 - 0.00254949291779692*G0_7_5 + 0.0014820112922794*G0_7_6 - 0.00343815782431911*G0_7_7 - 0.0037063829028121*G0_7_9 + 0.000565048790495314*G0_8_0 + 0.000636093816897495*G0_8_1 + 0.000494003764093133*G0_8_2 + 0.00254949291779692*G0_8_3 - 0.0014820112922794*G0_8_4 + 0.00106748162551752*G0_8_5 - 0.000948270479520639*G0_8_6 + 0.00343815782431912*G0_8_8 + 0.0037063829028121*G0_8_9 + 0.000247453439417767*G0_9_0 - 0.000247453439417767*G0_9_1 + 0.00287732356928834*G0_9_3 - 0.000829059333523759*G0_9_4 - 0.00287732356928834*G0_9_5 + 0.000829059333523758*G0_9_6 - 0.0037063829028121*G0_9_7 + 0.0037063829028121*G0_9_8;
    A[46] = A[64];
    A[92] = A[2] - 5.57515401265496e-05*G0_0_0 + 1.9449796235514e-06*G0_0_2 + 1.59327279863021e-05*G0_0_3 - 1.72483766233796e-05*G0_0_4 - 5.48224097331333e-05*G0_0_5 + 4.07070607963534e-05*G0_0_6 - 6.73991187384157e-05*G0_0_7 + 3.24452333380959e-05*G0_0_8 - 9.77370843442437e-05*G0_0_9 + 1.15311276025581e-05*G0_1_1 + 1.15311276025581e-05*G0_1_2 + 1.11830134151582e-05*G0_1_3 + 1.11830134151582e-05*G0_1_4 + 1.01795525902686e-05*G0_1_5 - 2.2934654631087e-05*G0_1_6 + 1.01795525902686e-05*G0_1_7 - 2.29346546310871e-05*G0_1_8 - 8.65652204938066e-05*G0_1_9 + 1.94497962355139e-06*G0_2_0 + 1.15311276025581e-05*G0_2_1 + 2.43246336996378e-05*G0_2_2 - 8.89735264735419e-06*G0_2_3 + 8.45248501498645e-05*G0_2_4 - 1.63898601398639e-06*G0_2_5 + 6.29838911089017e-05*G0_2_6 + 3.2121895961187e-05*G0_2_7 + 3.21887933495131e-05*G0_2_8 + 0.000302041708291759*G0_2_9 + 1.59327279863021e-05*G0_3_0 + 1.11830134151582e-05*G0_3_1 - 8.89735264735419e-06*G0_3_2 + 0.000232100488796956*G0_3_3 - 0.000207315006422184*G0_3_4 + 9.93426216640676e-06*G0_3_6 - 0.000106667885685761*G0_3_7 + 0.000262103967461154*G0_3_8 + 0.000473031432852941*G0_3_9 - 1.72483766233796e-05*G0_4_0 + 1.11830134151582e-05*G0_4_1 + 8.45248501498645e-05*G0_4_2 - 0.000207315006422184*G0_4_3 + 1.826298701299e-05*G0_4_4 - 7.12457185671576e-06*G0_4_5 - 2.80969030969084e-06*G0_4_6 + 7.12457185671595e-06*G0_4_7 - 0.000155436081775394*G0_4_8 - 0.000891875981161846*G0_4_9 - 5.48224097331333e-05*G0_5_0 + 1.01795525902686e-05*G0_5_1 - 1.63898601398639e-06*G0_5_2 - 7.12457185671576e-06*G0_5_4 + 0.00011439453403741*G0_5_5 - 0.00016918349507638*G0_5_6 + 0.000244643749108076*G0_5_7 - 8.94083594976604e-05*G0_5_8 + 0.000472027972028052*G0_5_9 + 4.07070607963534e-05*G0_6_0 - 2.29346546310871e-05*G0_6_1 + 6.29838911089017e-05*G0_6_2 + 9.93426216640676e-06*G0_6_3 - 2.80969030969085e-06*G0_6_4 - 0.000169183495076381*G0_6_5 - 9.6934315684332e-05*G0_6_6 - 0.000155235389610416*G0_6_7 + 1.55536427857882e-05*G0_6_8 - 0.000925993649208091*G0_6_9 - 6.73991187384157e-05*G0_7_0 + 1.01795525902686e-05*G0_7_1 + 3.2121895961187e-05*G0_7_2 - 0.000106667885685761*G0_7_3 + 7.12457185671596e-06*G0_7_4 + 0.000244643749108076*G0_7_5 - 0.000155235389610416*G0_7_6 + 0.000500526259454915*G0_7_7 - 0.000147709433423744*G0_7_8 + 0.000603682032253563*G0_7_9 + 3.24452333380959e-05*G0_8_0 - 2.29346546310871e-05*G0_8_1 + 3.21887933495131e-05*G0_8_2 + 0.000262103967461154*G0_8_3 - 0.000155436081775394*G0_8_4 - 8.94083594976604e-05*G0_8_5 + 1.55536427857882e-05*G0_8_6 - 0.000147709433423744*G0_8_7 + 0.000503034911517139*G0_8_8 + 0.000570567825032207*G0_8_9 - 9.77370843442437e-05*G0_9_0 - 8.65652204938066e-05*G0_9_1 + 0.000302041708291759*G0_9_2 + 0.000473031432852941*G0_9_3 - 0.000891875981161846*G0_9_4 + 0.000472027972028052*G0_9_5 - 0.000925993649208091*G0_9_6 + 0.000603682032253563*G0_9_7 + 0.000570567825032207*G0_9_8 + 0.000469619666048316*G0_9_9;
    A[57] = A[75];
    A[13] = A[31];
    A[48] = A[73] + 2.87993256743308e-05*G0_0_0 - 1.70588340231225e-05*G0_0_1 + 0.000130048522905688*G0_0_3 - 4.06401634080274e-05*G0_0_4 + 2.34809833024159e-05*G0_0_5 - 6.05086877408408e-05*G0_0_6 + 4.60588518624314e-05*G0_0_7 + 5.41868845440349e-06*G0_0_8 + 4.87681960896329e-05*G0_0_9 - 1.70588340231225e-05*G0_1_0 + 1.70588340231227e-05*G0_1_2 + 1.26436063936091e-05*G0_1_3 - 0.000120114260739281*G0_1_4 + 9.75363921792658e-05*G0_1_5 - 9.75363921792659e-05*G0_1_6 + 0.000120114260739281*G0_1_7 - 1.26436063936081e-05*G0_1_8 + 1.70588340231227e-05*G0_2_1 - 2.87993256743305e-05*G0_2_2 - 5.4186884544036e-06*G0_2_3 - 4.6058851862431e-05*G0_2_4 + 6.05086877408408e-05*G0_2_5 - 2.34809833024158e-05*G0_2_6 + 4.06401634080275e-05*G0_2_7 - 0.000130048522905688*G0_2_8 - 4.87681960896329e-05*G0_2_9 + 0.000130048522905688*G0_3_0 + 1.26436063936091e-05*G0_3_1 - 5.4186884544036e-06*G0_3_2 + 0.00136550949050972*G0_3_3 + 0.000292609176537797*G0_3_4 - 0.00034137737262743*G0_3_5 + 0.000292609176537797*G0_3_6 - 0.000390145568717064*G0_3_7 + 0.000780291137434126*G0_3_9 - 4.06401634080274e-05*G0_4_0 - 0.000120114260739281*G0_4_1 - 4.6058851862431e-05*G0_4_2 + 0.000292609176537797*G0_4_3 - 0.000414529666761878*G0_4_4 + 0.000121920490224082*G0_4_5 - 0.000414529666761879*G0_4_6 + 0.000390145568717063*G0_4_8 - 9.75363921792651e-05*G0_4_9 + 2.34809833024159e-05*G0_5_0 + 9.75363921792658e-05*G0_5_1 + 6.05086877408408e-05*G0_5_2 - 0.00034137737262743*G0_5_3 + 0.000121920490224082*G0_5_4 + 0.000463297862851512*G0_5_5 + 0.00041452966676188*G0_5_7 - 0.000292609176537797*G0_5_8 + 0.000438913764806696*G0_5_9 - 6.05086877408409e-05*G0_6_0 - 9.75363921792659e-05*G0_6_1 - 2.34809833024158e-05*G0_6_2 + 0.000292609176537797*G0_6_3 - 0.000414529666761879*G0_6_4 - 0.000463297862851512*G0_6_6 - 0.000121920490224082*G0_6_7 + 0.00034137737262743*G0_6_8 - 0.000438913764806696*G0_6_9 + 4.60588518624314e-05*G0_7_0 + 0.000120114260739281*G0_7_1 + 4.06401634080275e-05*G0_7_2 - 0.000390145568717063*G0_7_3 + 0.00041452966676188*G0_7_5 - 0.000121920490224082*G0_7_6 + 0.000414529666761882*G0_7_7 - 0.000292609176537798*G0_7_8 + 9.75363921792663e-05*G0_7_9 + 5.41868845440352e-06*G0_8_0 - 1.26436063936081e-05*G0_8_1 - 0.000130048522905688*G0_8_2 + 0.000390145568717063*G0_8_4 - 0.000292609176537797*G0_8_5 + 0.00034137737262743*G0_8_6 - 0.000292609176537798*G0_8_7 - 0.00136550949050972*G0_8_8 - 0.000780291137434127*G0_8_9 + 4.87681960896329e-05*G0_9_0 - 4.8768196089633e-05*G0_9_2 + 0.000780291137434126*G0_9_3 - 9.75363921792652e-05*G0_9_4 + 0.000438913764806696*G0_9_5 - 0.000438913764806696*G0_9_6 + 9.75363921792663e-05*G0_9_7 - 0.000780291137434127*G0_9_8;
    A[30] = A[82] + 9.59977522477619e-06*G0_0_0 + 4.33495076352293e-05*G0_0_3 - 1.35467211360092e-05*G0_0_4 + 7.82699443413835e-06*G0_0_5 - 2.01695625802802e-05*G0_0_6 + 1.53529506208099e-05*G0_0_7 + 1.80622948480143e-06*G0_0_8 + 1.62560653632109e-05*G0_0_9 + 4.21453546453634e-06*G0_1_3 - 4.00380869130938e-05*G0_1_4 + 3.25121307264219e-05*G0_1_5 - 3.25121307264219e-05*G0_1_6 + 4.00380869130935e-05*G0_1_7 - 4.21453546453597e-06*G0_1_8 - 9.59977522477704e-06*G0_2_2 - 1.80622948480112e-06*G0_2_3 - 1.53529506208105e-05*G0_2_4 + 2.01695625802803e-05*G0_2_5 - 7.82699443413875e-06*G0_2_6 + 1.35467211360091e-05*G0_2_7 - 4.33495076352292e-05*G0_2_8 - 1.6256065363211e-05*G0_2_9 + 4.33495076352293e-05*G0_3_0 + 4.21453546453634e-06*G0_3_1 - 1.80622948480112e-06*G0_3_2 + 0.000455169830169908*G0_3_3 + 9.75363921792657e-05*G0_3_4 - 0.000113792457542477*G0_3_5 + 9.75363921792659e-05*G0_3_6 - 0.000130048522905688*G0_3_7 + 0.000260097045811376*G0_3_9 - 1.35467211360092e-05*G0_4_0 - 4.00380869130938e-05*G0_4_1 - 1.53529506208105e-05*G0_4_2 + 9.75363921792657e-05*G0_4_3 - 0.000138176555587293*G0_4_4 + 4.06401634080275e-05*G0_4_5 - 0.000138176555587293*G0_4_6 + 0.000130048522905688*G0_4_8 - 3.25121307264221e-05*G0_4_9 + 7.82699443413835e-06*G0_5_0 + 3.25121307264219e-05*G0_5_1 + 2.01695625802803e-05*G0_5_2 - 0.000113792457542477*G0_5_3 + 4.06401634080275e-05*G0_5_4 + 0.000154432620950504*G0_5_5 + 0.000138176555587293*G0_5_7 - 9.75363921792656e-05*G0_5_8 + 0.000146304588268899*G0_5_9 - 2.01695625802802e-05*G0_6_0 - 3.25121307264219e-05*G0_6_1 - 7.82699443413875e-06*G0_6_2 + 9.75363921792659e-05*G0_6_3 - 0.000138176555587293*G0_6_4 - 0.000154432620950505*G0_6_6 - 4.06401634080272e-05*G0_6_7 + 0.000113792457542477*G0_6_8 - 0.000146304588268899*G0_6_9 + 1.53529506208099e-05*G0_7_0 + 4.00380869130935e-05*G0_7_1 + 1.35467211360091e-05*G0_7_2 - 0.000130048522905688*G0_7_3 + 0.000138176555587293*G0_7_5 - 4.06401634080272e-05*G0_7_6 + 0.000138176555587292*G0_7_7 - 9.75363921792656e-05*G0_7_8 + 3.25121307264219e-05*G0_7_9 + 1.80622948480142e-06*G0_8_0 - 4.21453546453597e-06*G0_8_1 - 4.33495076352292e-05*G0_8_2 + 0.000130048522905688*G0_8_4 - 9.75363921792656e-05*G0_8_5 + 0.000113792457542477*G0_8_6 - 9.75363921792656e-05*G0_8_7 - 0.000455169830169907*G0_8_8 - 0.000260097045811376*G0_8_9 + 1.62560653632109e-05*G0_9_0 - 1.6256065363211e-05*G0_9_2 + 0.000260097045811376*G0_9_3 - 3.25121307264221e-05*G0_9_4 + 0.000146304588268899*G0_9_5 - 0.000146304588268899*G0_9_6 + 3.25121307264219e-05*G0_9_7 - 0.000260097045811376*G0_9_8;
    A[28] = A[82];
    A[98] = A[89];
    A[80] = A[8];
    A[62] = A[26];
    A[50] = A[5];
    A[14] = A[41];
    A[39] = A[93];
    A[23] = A[32];
    A[19] = A[1] - 5.57515401265496e-05*G0_0_0 + 1.94497962355138e-06*G0_0_1 - 1.72483766233795e-05*G0_0_3 + 1.59327279863021e-05*G0_0_4 - 6.73991187384157e-05*G0_0_5 + 3.2445233338096e-05*G0_0_6 - 5.48224097331332e-05*G0_0_7 + 4.07070607963533e-05*G0_0_8 - 9.77370843442437e-05*G0_0_9 + 1.94497962355139e-06*G0_1_0 + 2.43246336996378e-05*G0_1_1 + 1.15311276025581e-05*G0_1_2 + 8.45248501498645e-05*G0_1_3 - 8.89735264735421e-06*G0_1_4 + 3.21218959611871e-05*G0_1_5 + 3.2188793349513e-05*G0_1_6 - 1.63898601398632e-06*G0_1_7 + 6.29838911089018e-05*G0_1_8 + 0.000302041708291759*G0_1_9 + 1.15311276025581e-05*G0_2_1 + 1.15311276025581e-05*G0_2_2 + 1.11830134151582e-05*G0_2_3 + 1.11830134151582e-05*G0_2_4 + 1.01795525902686e-05*G0_2_5 - 2.29346546310871e-05*G0_2_6 + 1.01795525902686e-05*G0_2_7 - 2.29346546310871e-05*G0_2_8 - 8.65652204938066e-05*G0_2_9 - 1.72483766233795e-05*G0_3_0 + 8.45248501498645e-05*G0_3_1 + 1.11830134151582e-05*G0_3_2 + 1.82629870129908e-05*G0_3_3 - 0.000207315006422184*G0_3_4 + 7.12457185671598e-06*G0_3_5 - 0.000155436081775394*G0_3_6 - 7.12457185671587e-06*G0_3_7 - 2.8096903096909e-06*G0_3_8 - 0.000891875981161846*G0_3_9 + 1.59327279863021e-05*G0_4_0 - 8.89735264735421e-06*G0_4_1 + 1.11830134151582e-05*G0_4_2 - 0.000207315006422184*G0_4_3 + 0.000232100488796956*G0_4_4 - 0.000106667885685761*G0_4_5 + 0.000262103967461155*G0_4_6 + 9.93426216640694e-06*G0_4_8 + 0.000473031432852941*G0_4_9 - 6.73991187384157e-05*G0_5_0 + 3.21218959611871e-05*G0_5_1 + 1.01795525902686e-05*G0_5_2 + 7.12457185671602e-06*G0_5_3 - 0.000106667885685761*G0_5_4 + 0.000500526259454915*G0_5_5 - 0.000147709433423744*G0_5_6 + 0.000244643749108076*G0_5_7 - 0.000155235389610416*G0_5_8 + 0.000603682032253562*G0_5_9 + 3.2445233338096e-05*G0_6_0 + 3.2188793349513e-05*G0_6_1 - 2.29346546310871e-05*G0_6_2 - 0.000155436081775394*G0_6_3 + 0.000262103967461155*G0_6_4 - 0.000147709433423744*G0_6_5 + 0.000503034911517139*G0_6_6 - 8.94083594976604e-05*G0_6_7 + 1.55536427857885e-05*G0_6_8 + 0.000570567825032207*G0_6_9 - 5.48224097331332e-05*G0_7_0 - 1.63898601398632e-06*G0_7_1 + 1.01795525902686e-05*G0_7_2 - 7.12457185671587e-06*G0_7_3 + 0.000244643749108076*G0_7_5 - 8.94083594976604e-05*G0_7_6 + 0.00011439453403741*G0_7_7 - 0.00016918349507638*G0_7_8 + 0.000472027972028051*G0_7_9 + 4.07070607963533e-05*G0_8_0 + 6.29838911089018e-05*G0_8_1 - 2.29346546310871e-05*G0_8_2 - 2.8096903096909e-06*G0_8_3 + 9.93426216640695e-06*G0_8_4 - 0.000155235389610416*G0_8_5 + 1.55536427857885e-05*G0_8_6 - 0.00016918349507638*G0_8_7 - 9.6934315684333e-05*G0_8_8 - 0.000925993649208092*G0_8_9 - 9.77370843442437e-05*G0_9_0 + 0.000302041708291759*G0_9_1 - 8.65652204938066e-05*G0_9_2 - 0.000891875981161846*G0_9_3 + 0.000473031432852941*G0_9_4 + 0.000603682032253562*G0_9_5 + 0.000570567825032207*G0_9_6 + 0.000472027972028051*G0_9_7 - 0.000925993649208092*G0_9_8 + 0.000469619666048315*G0_9_9;
    A[87] = A[78];
    A[42] = -A[2] + 7.27992245849512e-05*G0_0_0 + 6.52534469498865e-05*G0_0_2 - 5.94829277865093e-05*G0_0_3 + 5.63833487940726e-05*G0_0_4 + 5.23137576709094e-05*G0_0_5 + 2.83310439560487e-05*G0_0_6 + 6.34856215213464e-05*G0_0_7 - 3.57566540602315e-05*G0_0_8 - 2.00692164977957e-07*G0_0_9 - 1.83212125176442e-05*G0_1_1 + 7.72082580118425e-05*G0_1_2 - 9.18612637362794e-05*G0_1_3 + 0.000177266929499102*G0_1_4 - 3.07504995005047e-05*G0_1_5 + 5.7855091337244e-05*G0_1_6 - 1.3691665477382e-05*G0_1_8 + 2.27451120308302e-05*G0_1_9 + 6.52534469498865e-05*G0_2_0 + 7.72082580118425e-05*G0_2_1 + 0.00076473006160519*G0_2_2 - 0.000379542332667397*G0_2_3 + 0.000905890984016136*G0_2_4 - 0.000239291958041998*G0_2_5 + 0.000498954170829255*G0_2_6 - 2.86097830740738e-05*G0_2_7 - 4.41299771656987e-05*G0_2_8 + 0.000151723276723302*G0_2_9 - 5.94829277865093e-05*G0_3_0 - 9.18612637362794e-05*G0_3_1 - 0.000379542332667397*G0_3_2 - 5.23806550592353e-05*G0_3_3 - 0.000696702850720826*G0_3_4 + 0.00017891706507781*G0_3_5 - 0.000260699122306309*G0_3_6 + 9.13149350649506e-05*G0_3_7 - 0.00013657101826747*G0_3_8 - 0.000250865206222391*G0_3_9 + 5.63833487940726e-05*G0_4_0 + 0.000177266929499102*G0_4_1 + 0.000905890984016137*G0_4_2 - 0.000696702850720826*G0_4_3 + 0.0014483953546456*G0_4_4 - 0.000256283894676795*G0_4_5 + 0.000516983016983104*G0_4_6 + 1.90657556729002e-06*G0_4_7 + 4.52560832025196e-05*G0_4_8 + 5.7397959183683e-05*G0_4_9 + 5.23137576709094e-05*G0_5_0 - 3.07504995005047e-05*G0_5_1 - 0.000239291958041998*G0_5_2 + 0.00017891706507781*G0_5_3 - 0.000256283894676795*G0_5_4 + 0.000225477647352686*G0_5_5 - 0.000321809886542084*G0_5_6 - 3.81315113458041e-06*G0_5_7 + 5.11765020693681e-06*G0_5_8 - 9.63322391893966e-06*G0_5_9 + 2.83310439560487e-05*G0_6_0 + 5.7855091337244e-05*G0_6_1 + 0.000498954170829255*G0_6_2 - 0.000260699122306309*G0_6_3 + 0.000516983016983104*G0_6_4 - 0.000321809886542084*G0_6_5 + 0.000636394855144962*G0_6_6 - 1.30449907235652e-06*G0_6_7 + 2.29792528899712e-05*G0_6_8 + 6.62284144427113e-05*G0_6_9 + 6.34856215213464e-05*G0_7_0 - 2.86097830740738e-05*G0_7_2 + 9.13149350649506e-05*G0_7_3 + 1.90657556729003e-06*G0_7_4 - 3.8131511345804e-06*G0_7_5 - 1.30449907235653e-06*G0_7_6 - 7.6363368774096e-05*G0_7_7 + 2.27785607249932e-05*G0_7_8 + 3.21107463964667e-06*G0_7_9 - 3.57566540602315e-05*G0_8_0 - 1.3691665477382e-05*G0_8_1 - 4.41299771656987e-05*G0_8_2 - 0.00013657101826747*G0_8_3 + 4.52560832025196e-05*G0_8_4 + 5.11765020693681e-06*G0_8_5 + 2.29792528899712e-05*G0_8_6 + 2.27785607249932e-05*G0_8_7 - 0.000196276937348399*G0_8_8 - 0.000158747502497529*G0_8_9 - 2.0069216497797e-07*G0_9_0 + 2.27451120308302e-05*G0_9_1 + 0.000151723276723302*G0_9_2 - 0.000250865206222391*G0_9_3 + 5.7397959183683e-05*G0_9_4 - 9.63322391893968e-06*G0_9_5 + 6.62284144427112e-05*G0_9_6 + 3.21107463964668e-06*G0_9_7 - 0.000158747502497529*G0_9_8 - 0.000989813757671068*G0_9_9;
    A[96] = A[69];
    A[65] = A[78] + 3.81315113458036e-05*G0_0_1 - 3.81315113458037e-05*G0_0_2 + 0.00028177179962899*G0_0_3 - 0.00028177179962899*G0_0_4 - 0.000413024475524546*G0_0_5 - 0.000280266608391655*G0_0_6 + 0.000413024475524545*G0_0_7 + 0.000280266608391656*G0_0_8 + 3.81315113458036e-05*G0_1_0 + 0.000330238957471157*G0_1_1 + 0.000306456935921274*G0_1_3 - 0.000294114367775132*G0_1_4 + 9.75363921792653e-05*G0_1_5 - 0.000184235407449724*G0_1_6 - 1.38477593834766e-05*G0_1_7 + 0.000719481411445819*G0_1_8 + 5.96055729984398e-05*G0_1_9 - 3.81315113458037e-05*G0_2_0 - 0.000330238957471156*G0_2_2 + 0.000294114367775132*G0_2_3 - 0.000306456935921273*G0_2_4 + 1.38477593834763e-05*G0_2_5 - 0.000719481411445819*G0_2_6 - 9.75363921792658e-05*G0_2_7 + 0.000184235407449724*G0_2_8 - 5.96055729984402e-05*G0_2_9 + 0.00028177179962899*G0_3_0 + 0.000306456935921274*G0_3_1 + 0.000294114367775132*G0_3_2 + 0.00117856473883279*G0_3_3 - 0.000568962287712384*G0_3_5 + 0.000552706222349174*G0_3_6 - 0.00084531539888697*G0_3_7 + 0.00139802162123614*G0_3_8 + 0.00151181407877862*G0_3_9 - 0.00028177179962899*G0_4_0 - 0.000294114367775132*G0_4_1 - 0.000306456935921273*G0_4_2 - 0.0011785647388328*G0_4_4 + 0.000845315398886971*G0_4_5 - 0.00139802162123614*G0_4_6 + 0.000568962287712384*G0_4_7 - 0.000552706222349173*G0_4_8 - 0.00151181407877862*G0_4_9 - 0.000413024475524546*G0_5_0 + 9.75363921792653e-05*G0_5_1 + 1.38477593834761e-05*G0_5_2 - 0.000568962287712384*G0_5_3 + 0.000845315398886971*G0_5_4 - 0.00174481768231798*G0_5_5 + 0.00262806390038577*G0_5_6 - 0.000292609176537797*G0_5_8 + 0.000585218353075594*G0_5_9 - 0.000280266608391655*G0_6_0 - 0.000184235407449724*G0_6_1 - 0.000719481411445819*G0_6_2 + 0.000552706222349174*G0_6_3 - 0.00139802162123614*G0_6_4 + 0.00262806390038577*G0_6_5 - 0.00292338242115078*G0_6_6 + 0.000292609176537799*G0_6_7 - 0.000926595725703026*G0_6_9 + 0.000413024475524545*G0_7_0 - 1.38477593834766e-05*G0_7_1 - 9.75363921792658e-05*G0_7_2 - 0.00084531539888697*G0_7_3 + 0.000568962287712384*G0_7_4 + 0.000292609176537799*G0_7_6 + 0.00174481768231797*G0_7_7 - 0.00262806390038577*G0_7_8 - 0.000585218353075596*G0_7_9 + 0.000280266608391656*G0_8_0 + 0.000719481411445819*G0_8_1 + 0.000184235407449724*G0_8_2 + 0.00139802162123614*G0_8_3 - 0.000552706222349173*G0_8_4 - 0.000292609176537798*G0_8_5 - 0.00262806390038577*G0_8_7 + 0.00292338242115077*G0_8_8 + 0.000926595725703026*G0_8_9 + 5.96055729984397e-05*G0_9_1 - 5.96055729984402e-05*G0_9_2 + 0.00151181407877862*G0_9_3 - 0.00151181407877862*G0_9_4 + 0.000585218353075593*G0_9_5 - 0.000926595725703026*G0_9_6 - 0.000585218353075596*G0_9_7 + 0.000926595725703026*G0_9_8;
    A[53] = A[35];
    A[70] = A[7];
    A[68] = A[86];
    A[6] = A[60];
    A[17] = A[71];
    A[9] = A[90];
    A[34] = A[78] + 0.000330238957471156*G0_0_0 + 3.81315113458034e-05*G0_0_1 + 9.75363921792655e-05*G0_0_3 - 0.000184235407449724*G0_0_4 + 0.000306456935921273*G0_0_5 - 0.000294114367775131*G0_0_6 + 0.000719481411445818*G0_0_7 - 1.38477593834754e-05*G0_0_8 + 5.96055729984402e-05*G0_0_9 + 3.81315113458034e-05*G0_1_0 - 3.81315113458037e-05*G0_1_2 - 0.000413024475524546*G0_1_3 - 0.000280266608391656*G0_1_4 + 0.00028177179962899*G0_1_5 - 0.00028177179962899*G0_1_6 + 0.000280266608391655*G0_1_7 + 0.000413024475524546*G0_1_8 - 3.81315113458037e-05*G0_2_1 - 0.000330238957471156*G0_2_2 + 1.38477593834759e-05*G0_2_3 - 0.000719481411445819*G0_2_4 + 0.000294114367775132*G0_2_5 - 0.000306456935921273*G0_2_6 + 0.000184235407449724*G0_2_7 - 9.75363921792658e-05*G0_2_8 - 5.96055729984402e-05*G0_2_9 + 9.75363921792655e-05*G0_3_0 - 0.000413024475524546*G0_3_1 + 1.38477593834759e-05*G0_3_2 - 0.00174481768231798*G0_3_3 + 0.00262806390038577*G0_3_4 - 0.000568962287712384*G0_3_5 + 0.000845315398886971*G0_3_6 - 0.000292609176537797*G0_3_7 + 0.000585218353075595*G0_3_9 - 0.000184235407449724*G0_4_0 - 0.000280266608391656*G0_4_1 - 0.000719481411445819*G0_4_2 + 0.00262806390038577*G0_4_3 - 0.00292338242115077*G0_4_4 + 0.000552706222349173*G0_4_5 - 0.00139802162123614*G0_4_6 + 0.000292609176537797*G0_4_8 - 0.000926595725703025*G0_4_9 + 0.000306456935921273*G0_5_0 + 0.00028177179962899*G0_5_1 + 0.000294114367775132*G0_5_2 - 0.000568962287712384*G0_5_3 + 0.000552706222349173*G0_5_4 + 0.00117856473883279*G0_5_5 + 0.00139802162123614*G0_5_7 - 0.00084531539888697*G0_5_8 + 0.00151181407877862*G0_5_9 - 0.000294114367775131*G0_6_0 - 0.00028177179962899*G0_6_1 - 0.000306456935921273*G0_6_2 + 0.000845315398886971*G0_6_3 - 0.00139802162123614*G0_6_4 - 0.0011785647388328*G0_6_6 - 0.000552706222349172*G0_6_7 + 0.000568962287712383*G0_6_8 - 0.00151181407877862*G0_6_9 + 0.000719481411445818*G0_7_0 + 0.000280266608391655*G0_7_1 + 0.000184235407449724*G0_7_2 - 0.000292609176537797*G0_7_3 + 0.00139802162123614*G0_7_5 - 0.000552706222349172*G0_7_6 + 0.00292338242115077*G0_7_7 - 0.00262806390038577*G0_7_8 + 0.000926595725703024*G0_7_9 - 1.38477593834755e-05*G0_8_0 + 0.000413024475524546*G0_8_1 - 9.75363921792658e-05*G0_8_2 + 0.000292609176537797*G0_8_4 - 0.00084531539888697*G0_8_5 + 0.000568962287712383*G0_8_6 - 0.00262806390038577*G0_8_7 + 0.00174481768231798*G0_8_8 - 0.000585218353075594*G0_8_9 + 5.96055729984402e-05*G0_9_0 - 5.96055729984402e-05*G0_9_2 + 0.000585218353075595*G0_9_3 - 0.000926595725703025*G0_9_4 + 0.00151181407877862*G0_9_5 - 0.00151181407877862*G0_9_6 + 0.000926595725703024*G0_9_7 - 0.000585218353075594*G0_9_8;
    A[24] = A[42];
    A[84] = A[48];
    A[59] = A[93] + 0.000102553696303713*G0_0_0 + 1.00346082488956e-06*G0_0_2 - 0.000536450156985962*G0_0_3 + 3.25121307264219e-05*G0_0_4 + 5.41868845440368e-05*G0_0_5 - 0.000140885899814495*G0_0_6 + 0.000223972456115351*G0_0_7 - 0.000323315077779418*G0_0_8 - 0.00149555801341541*G0_0_9 - 0.000102553696303714*G0_1_1 - 1.00346082488958e-06*G0_1_2 - 5.41868845440374e-05*G0_1_3 + 0.000140885899814495*G0_1_4 + 0.000536450156985961*G0_1_5 - 3.25121307264221e-05*G0_1_6 + 0.000323315077779418*G0_1_7 - 0.000223972456115351*G0_1_8 + 0.00149555801341541*G0_1_9 + 1.00346082488956e-06*G0_2_0 - 1.0034608248896e-06*G0_2_1 - 0.000290802947052996*G0_2_3 + 0.000240228521478562*G0_2_4 + 0.000290802947052996*G0_2_5 - 0.000240228521478562*G0_2_6 + 0.000422657699443485*G0_2_7 - 0.000422657699443485*G0_2_8 - 0.000536450156985962*G0_3_0 - 5.41868845440374e-05*G0_3_1 - 0.000290802947052996*G0_3_2 - 0.00629109729556264*G0_3_3 + 0.000926595725703025*G0_3_4 + 9.7536392179266e-05*G0_3_6 + 0.00160935047095788*G0_3_7 - 0.00287732356928834*G0_3_8 - 0.00770537498216199*G0_3_9 + 3.25121307264219e-05*G0_4_0 + 0.000140885899814495*G0_4_1 + 0.000240228521478562*G0_4_2 + 0.000926595725703025*G0_4_3 - 0.00136550949050972*G0_4_4 - 9.7536392179266e-05*G0_4_5 - 0.00068275474525486*G0_4_7 + 0.00126797309833046*G0_4_8 + 0.000195072784358531*G0_4_9 + 5.41868845440369e-05*G0_5_0 + 0.000536450156985961*G0_5_1 + 0.000290802947052996*G0_5_2 - 9.75363921792659e-05*G0_5_4 + 0.00629109729556263*G0_5_5 - 0.000926595725703025*G0_5_6 + 0.00287732356928834*G0_5_7 - 0.00160935047095788*G0_5_8 + 0.00770537498216199*G0_5_9 - 0.000140885899814495*G0_6_0 - 3.25121307264221e-05*G0_6_1 - 0.000240228521478562*G0_6_2 + 9.7536392179266e-05*G0_6_3 - 0.000926595725703026*G0_6_5 + 0.00136550949050972*G0_6_6 - 0.00126797309833046*G0_6_7 + 0.000682754745254861*G0_6_8 - 0.000195072784358534*G0_6_9 + 0.000223972456115351*G0_7_0 + 0.000323315077779418*G0_7_1 + 0.000422657699443485*G0_7_2 + 0.00160935047095788*G0_7_3 - 0.00068275474525486*G0_7_4 + 0.00287732356928834*G0_7_5 - 0.00126797309833046*G0_7_6 + 0.00229210521621274*G0_7_7 + 0.00702262023690713*G0_7_9 - 0.000323315077779418*G0_8_0 - 0.000223972456115351*G0_8_1 - 0.000422657699443485*G0_8_2 - 0.00287732356928834*G0_8_3 + 0.00126797309833046*G0_8_4 - 0.00160935047095788*G0_8_5 + 0.000682754745254861*G0_8_6 - 0.00229210521621275*G0_8_8 - 0.00702262023690713*G0_8_9 - 0.00149555801341541*G0_9_0 + 0.00149555801341541*G0_9_1 - 0.00770537498216199*G0_9_3 + 0.000195072784358531*G0_9_4 + 0.00770537498216199*G0_9_5 - 0.000195072784358534*G0_9_6 + 0.00702262023690713*G0_9_7 - 0.00702262023690713*G0_9_8;
    A[47] = A[74];
    A[91] = A[19];
    A[66] = A[55] - 0.000629370629370736*G0_0_0 - 2.50865206222381e-06*G0_0_1 - 0.000154432620950504*G0_0_3 + 0.000276353111174586*G0_0_4 - 0.00149826735764261*G0_0_5 + 0.0011839834272872*G0_0_6 - 0.000410917207792276*G0_0_7 + 0.000147207703011299*G0_0_8 + 0.000211328849721742*G0_0_9 - 2.50865206222381e-06*G0_1_0 + 2.50865206222392e-06*G0_1_2 - 0.000117404916512079*G0_1_3 + 0.000332346225203424*G0_1_4 - 0.000869699496931786*G0_1_5 + 0.000869699496931786*G0_1_6 - 0.000332346225203424*G0_1_7 + 0.000117404916512079*G0_1_8 + 2.50865206222391e-06*G0_2_1 + 0.000629370629370735*G0_2_2 - 0.000147207703011299*G0_2_3 + 0.000410917207792277*G0_2_4 - 0.0011839834272872*G0_2_5 + 0.00149826735764261*G0_2_6 - 0.000276353111174586*G0_2_7 + 0.000154432620950504*G0_2_8 - 0.000211328849721742*G0_2_9 - 0.000154432620950504*G0_3_0 - 0.000117404916512079*G0_3_1 - 0.000147207703011299*G0_3_2 + 0.00050393802625954*G0_3_3 - 0.00117856473883279*G0_3_4 + 0.00153619817682344*G0_3_5 - 0.00260909849079536*G0_3_6 + 0.000463297862851513*G0_3_7 - 0.000926595725703026*G0_3_9 + 0.000276353111174586*G0_4_0 + 0.000332346225203424*G0_4_1 + 0.000410917207792277*G0_4_2 - 0.00117856473883279*G0_4_3 + 0.00196698390894853*G0_4_4 - 0.00082905933352376*G0_4_5 + 0.00343815782431912*G0_4_6 - 0.000463297862851512*G0_4_8 + 0.00229210521621275*G0_4_9 - 0.00149826735764261*G0_5_0 - 0.000869699496931786*G0_5_1 - 0.0011839834272872*G0_5_2 + 0.00153619817682344*G0_5_3 - 0.00082905933352376*G0_5_4 - 0.0141427768659935*G0_5_5 - 0.00343815782431911*G0_5_7 + 0.00260909849079535*G0_5_8 - 0.00585218353075594*G0_5_9 + 0.0011839834272872*G0_6_0 + 0.000869699496931786*G0_6_1 + 0.00149826735764261*G0_6_2 - 0.00260909849079536*G0_6_3 + 0.00343815782431912*G0_6_4 + 0.0141427768659935*G0_6_6 + 0.000829059333523755*G0_6_7 - 0.00153619817682343*G0_6_8 + 0.00585218353075594*G0_6_9 - 0.000410917207792276*G0_7_0 - 0.000332346225203424*G0_7_1 - 0.000276353111174586*G0_7_2 + 0.000463297862851513*G0_7_3 - 0.00343815782431911*G0_7_5 + 0.000829059333523755*G0_7_6 - 0.00196698390894852*G0_7_7 + 0.00117856473883279*G0_7_8 - 0.00229210521621274*G0_7_9 + 0.000147207703011299*G0_8_0 + 0.000117404916512079*G0_8_1 + 0.000154432620950504*G0_8_2 - 0.000463297862851512*G0_8_4 + 0.00260909849079535*G0_8_5 - 0.00153619817682343*G0_8_6 + 0.00117856473883279*G0_8_7 - 0.000503938026259538*G0_8_8 + 0.000926595725703024*G0_8_9 + 0.000211328849721742*G0_9_0 - 0.000211328849721742*G0_9_2 - 0.000926595725703026*G0_9_3 + 0.00229210521621275*G0_9_4 - 0.00585218353075594*G0_9_5 + 0.00585218353075594*G0_9_6 - 0.00229210521621274*G0_9_7 + 0.000926595725703023*G0_9_8;
    A[56] = A[65];
    A[77] = A[55] + 0.000115197302697322*G0_0_1 - 0.000115197302697322*G0_0_2 + 7.58616383616509e-05*G0_0_3 - 7.5861638361651e-05*G0_0_4 - 0.000927197802197961*G0_0_5 + 0.000400380869130938*G0_0_6 + 0.000927197802197958*G0_0_7 - 0.000400380869130936*G0_0_8 + 0.000115197302697322*G0_1_0 + 0.000148311509918678*G0_1_1 + 0.000186643713429459*G0_1_3 - 0.000131252675895555*G0_1_4 - 0.000455169830169907*G0_1_5 - 9.21177037248619e-05*G0_1_6 + 0.000172795954045982*G0_1_7 + 0.000143896282289164*G0_1_8 - 0.000270934422720182*G0_1_9 - 0.000115197302697322*G0_2_0 - 0.000148311509918678*G0_2_2 + 0.000131252675895555*G0_2_3 - 0.000186643713429459*G0_2_4 - 0.000172795954045983*G0_2_5 - 0.000143896282289164*G0_2_6 + 0.000455169830169906*G0_2_7 + 9.21177037248623e-05*G0_2_8 + 0.000270934422720182*G0_2_9 + 7.58616383616509e-05*G0_3_0 + 0.000186643713429459*G0_3_1 + 0.000131252675895555*G0_3_2 + 0.00050393802625954*G0_3_3 + 0.000568962287712382*G0_3_5 + 0.000276353111174587*G0_3_6 - 0.000227584915084957*G0_3_7 + 0.00050393802625954*G0_3_8 + 0.00126797309833045*G0_3_9 - 7.5861638361651e-05*G0_4_0 - 0.000131252675895555*G0_4_1 - 0.000186643713429459*G0_4_2 - 0.00050393802625954*G0_4_4 + 0.000227584915084954*G0_4_5 - 0.000503938026259541*G0_4_6 - 0.000568962287712381*G0_4_7 - 0.000276353111174587*G0_4_8 - 0.00126797309833046*G0_4_9 - 0.00092719780219796*G0_5_0 - 0.000455169830169907*G0_5_1 - 0.000172795954045983*G0_5_2 + 0.000568962287712382*G0_5_3 + 0.000227584915084954*G0_5_4 - 0.0144137112887137*G0_5_5 + 0.00174481768231798*G0_5_6 + 0.00136550949050972*G0_5_8 - 0.00273101898101944*G0_5_9 + 0.000400380869130938*G0_6_0 - 9.21177037248619e-05*G0_6_1 - 0.000143896282289164*G0_6_2 + 0.000276353111174587*G0_6_3 - 0.000503938026259541*G0_6_4 + 0.00174481768231798*G0_6_5 - 0.00223791833166871*G0_6_6 - 0.00136550949050972*G0_6_7 - 0.00136550949050972*G0_6_9 + 0.000927197802197958*G0_7_0 + 0.000172795954045982*G0_7_1 + 0.000455169830169906*G0_7_2 - 0.000227584915084957*G0_7_3 - 0.000568962287712381*G0_7_4 - 0.00136550949050972*G0_7_6 + 0.0144137112887137*G0_7_7 - 0.00174481768231797*G0_7_8 + 0.00273101898101944*G0_7_9 - 0.000400380869130936*G0_8_0 + 0.000143896282289164*G0_8_1 + 9.21177037248623e-05*G0_8_2 + 0.00050393802625954*G0_8_3 - 0.000276353111174586*G0_8_4 + 0.00136550949050972*G0_8_5 - 0.00174481768231797*G0_8_7 + 0.00223791833166871*G0_8_8 + 0.00136550949050972*G0_8_9 - 0.000270934422720182*G0_9_1 + 0.000270934422720182*G0_9_2 + 0.00126797309833045*G0_9_3 - 0.00126797309833046*G0_9_4 - 0.00273101898101944*G0_9_5 - 0.00136550949050972*G0_9_6 + 0.00273101898101944*G0_9_7 + 0.00136550949050972*G0_9_8;
    A[3] = A[30];
    A[12] = A[21];
    A[49] = A[94];
    A[33] = A[55] - 0.000777682139289414*G0_0_0 - 0.000117705954759546*G0_0_2 + 0.000807384579706146*G0_0_3 - 0.000138176555587293*G0_0_4 - 0.0015247587234197*G0_0_5 + 0.000678841248037792*G0_0_6 - 0.000714965837733815*G0_0_7 + 0.000610806604110278*G0_0_8 + 0.000482263272441925*G0_0_9 + 0.000777682139289414*G0_1_1 + 0.000117705954759546*G0_1_2 + 0.0015247587234197*G0_1_3 - 0.000678841248037792*G0_1_4 - 0.000807384579706144*G0_1_5 + 0.000138176555587293*G0_1_6 - 0.000610806604110279*G0_1_7 + 0.000714965837733816*G0_1_8 - 0.000482263272441924*G0_1_9 - 0.000117705954759546*G0_2_0 + 0.000117705954759546*G0_2_1 + 0.000636394855144963*G0_2_3 - 0.000160152347652375*G0_2_4 - 0.000636394855144962*G0_2_5 + 0.000160152347652374*G0_2_6 - 0.000506647370486742*G0_2_7 + 0.000506647370486741*G0_2_8 + 0.000807384579706146*G0_3_0 + 0.0015247587234197*G0_3_1 + 0.000636394855144964*G0_3_2 + 0.0168846332239218*G0_3_3 - 0.00292338242115078*G0_3_4 - 0.000414529666761878*G0_3_6 - 0.00242215373911844*G0_3_7 + 0.00394209585057866*G0_3_8 + 0.00629109729556264*G0_3_9 - 0.000138176555587293*G0_4_0 - 0.000678841248037792*G0_4_1 - 0.000160152347652375*G0_4_2 - 0.00292338242115078*G0_4_3 + 0.00223791833166871*G0_4_4 + 0.00041452966676188*G0_4_5 + 0.000967235889111052*G0_4_7 - 0.00151994211146022*G0_4_8 - 0.000829059333523759*G0_4_9 - 0.0015247587234197*G0_5_0 - 0.000807384579706144*G0_5_1 - 0.000636394855144962*G0_5_2 + 0.00041452966676188*G0_5_4 - 0.0168846332239218*G0_5_5 + 0.00292338242115077*G0_5_6 - 0.00394209585057865*G0_5_7 + 0.00242215373911843*G0_5_8 - 0.00629109729556264*G0_5_9 + 0.000678841248037792*G0_6_0 + 0.000138176555587293*G0_6_1 + 0.000160152347652374*G0_6_2 - 0.000414529666761878*G0_6_3 + 0.00292338242115077*G0_6_5 - 0.00223791833166871*G0_6_6 + 0.00151994211146022*G0_6_7 - 0.000967235889111052*G0_6_8 + 0.000829059333523759*G0_6_9 - 0.000714965837733815*G0_7_0 - 0.000610806604110279*G0_7_1 - 0.000506647370486742*G0_7_2 - 0.00242215373911844*G0_7_3 + 0.000967235889111052*G0_7_4 - 0.00394209585057865*G0_7_5 + 0.00151994211146022*G0_7_6 - 0.00196698390894852*G0_7_7 - 0.00448667404024622*G0_7_9 + 0.000610806604110278*G0_8_0 + 0.000714965837733816*G0_8_1 + 0.000506647370486741*G0_8_2 + 0.00394209585057866*G0_8_3 - 0.00151994211146022*G0_8_4 + 0.00242215373911843*G0_8_5 - 0.000967235889111052*G0_8_6 + 0.00196698390894853*G0_8_8 + 0.00448667404024622*G0_8_9 + 0.000482263272441925*G0_9_0 - 0.000482263272441924*G0_9_1 + 0.00629109729556264*G0_9_3 - 0.000829059333523759*G0_9_4 - 0.00629109729556264*G0_9_5 + 0.000829059333523759*G0_9_6 - 0.00448667404024622*G0_9_7 + 0.00448667404024622*G0_9_8;
    A[29] = A[92];
    A[81] = -A[21] - 1.83212125176441e-05*G0_0_0 + 7.72082580118427e-05*G0_0_1 + 5.78550913372441e-05*G0_0_3 - 3.07504995005047e-05*G0_0_4 - 1.36916654773821e-05*G0_0_5 - 9.18612637362793e-05*G0_0_7 + 0.000177266929499102*G0_0_8 + 2.27451120308302e-05*G0_0_9 + 7.72082580118427e-05*G0_1_0 + 0.000764730061605193*G0_1_1 + 6.52534469498866e-05*G0_1_2 + 0.000498954170829256*G0_1_3 - 0.000239291958041999*G0_1_4 - 4.41299771656993e-05*G0_1_5 - 2.86097830740735e-05*G0_1_6 - 0.000379542332667397*G0_1_7 + 0.000905890984016138*G0_1_8 + 0.000151723276723303*G0_1_9 + 6.52534469498866e-05*G0_2_1 + 7.27992245849511e-05*G0_2_2 + 2.83310439560488e-05*G0_2_3 + 5.23137576709094e-05*G0_2_4 - 3.57566540602315e-05*G0_2_5 + 6.34856215213465e-05*G0_2_6 - 5.94829277865092e-05*G0_2_7 + 5.63833487940725e-05*G0_2_8 - 2.00692164977974e-07*G0_2_9 + 5.78550913372441e-05*G0_3_0 + 0.000498954170829256*G0_3_1 + 2.83310439560488e-05*G0_3_2 + 0.000636394855144964*G0_3_3 - 0.000321809886542084*G0_3_4 + 2.29792528899709e-05*G0_3_5 - 1.30449907235644e-06*G0_3_6 - 0.000260699122306309*G0_3_7 + 0.000516983016983104*G0_3_8 + 6.62284144427113e-05*G0_3_9 - 3.07504995005047e-05*G0_4_0 - 0.000239291958041999*G0_4_1 + 5.23137576709094e-05*G0_4_2 - 0.000321809886542084*G0_4_3 + 0.000225477647352686*G0_4_4 + 5.1176502069368e-06*G0_4_5 - 3.81315113458035e-06*G0_4_6 + 0.00017891706507781*G0_4_7 - 0.000256283894676795*G0_4_8 - 9.63322391893957e-06*G0_4_9 - 1.36916654773821e-05*G0_5_0 - 4.41299771656993e-05*G0_5_1 - 3.57566540602315e-05*G0_5_2 + 2.29792528899709e-05*G0_5_3 + 5.1176502069368e-06*G0_5_4 - 0.000196276937348399*G0_5_5 + 2.27785607249931e-05*G0_5_6 - 0.000136571018267469*G0_5_7 + 4.52560832025187e-05*G0_5_8 - 0.000158747502497529*G0_5_9 - 2.86097830740735e-05*G0_6_1 + 6.34856215213465e-05*G0_6_2 - 1.30449907235645e-06*G0_6_3 - 3.81315113458035e-06*G0_6_4 + 2.27785607249931e-05*G0_6_5 - 7.63633687740958e-05*G0_6_6 + 9.13149350649503e-05*G0_6_7 + 1.9065755672905e-06*G0_6_8 + 3.21107463964682e-06*G0_6_9 - 9.18612637362793e-05*G0_7_0 - 0.000379542332667397*G0_7_1 - 5.94829277865092e-05*G0_7_2 - 0.000260699122306309*G0_7_3 + 0.00017891706507781*G0_7_4 - 0.000136571018267469*G0_7_5 + 9.13149350649503e-05*G0_7_6 - 5.23806550592346e-05*G0_7_7 - 0.000696702850720826*G0_7_8 - 0.000250865206222391*G0_7_9 + 0.000177266929499103*G0_8_0 + 0.000905890984016138*G0_8_1 + 5.63833487940725e-05*G0_8_2 + 0.000516983016983104*G0_8_3 - 0.000256283894676795*G0_8_4 + 4.52560832025187e-05*G0_8_5 + 1.9065755672905e-06*G0_8_6 - 0.000696702850720826*G0_8_7 + 0.0014483953546456*G0_8_8 + 5.73979591836824e-05*G0_8_9 + 2.27451120308302e-05*G0_9_0 + 0.000151723276723303*G0_9_1 - 2.00692164977963e-07*G0_9_2 + 6.62284144427113e-05*G0_9_3 - 9.63322391893957e-06*G0_9_4 - 0.000158747502497529*G0_9_5 + 3.21107463964685e-06*G0_9_6 - 0.000250865206222391*G0_9_7 + 5.73979591836824e-05*G0_9_8 - 0.000989813757671068*G0_9_9;
    A[44] = A[33] - 2.50865206222408e-06*G0_0_1 + 2.50865206222387e-06*G0_0_2 - 0.000869699496931787*G0_0_3 + 0.000869699496931786*G0_0_4 - 0.000117404916512079*G0_0_5 + 0.000332346225203424*G0_0_6 + 0.000117404916512079*G0_0_7 - 0.000332346225203424*G0_0_8 - 2.5086520622241e-06*G0_1_0 - 0.000629370629370736*G0_1_1 - 0.00149826735764261*G0_1_3 + 0.0011839834272872*G0_1_4 - 0.000154432620950504*G0_1_5 + 0.000276353111174586*G0_1_6 + 0.0001472077030113*G0_1_7 - 0.000410917207792278*G0_1_8 + 0.000211328849721741*G0_1_9 + 2.50865206222389e-06*G0_2_0 + 0.000629370629370735*G0_2_2 - 0.0011839834272872*G0_2_3 + 0.00149826735764261*G0_2_4 - 0.000147207703011299*G0_2_5 + 0.000410917207792277*G0_2_6 + 0.000154432620950504*G0_2_7 - 0.000276353111174586*G0_2_8 - 0.000211328849721743*G0_2_9 - 0.000869699496931787*G0_3_0 - 0.00149826735764261*G0_3_1 - 0.0011839834272872*G0_3_2 - 0.0141427768659935*G0_3_3 + 0.00153619817682344*G0_3_5 - 0.00082905933352376*G0_3_6 + 0.00260909849079536*G0_3_7 - 0.00343815782431912*G0_3_8 - 0.00585218353075594*G0_3_9 + 0.000869699496931787*G0_4_0 + 0.0011839834272872*G0_4_1 + 0.00149826735764261*G0_4_2 + 0.0141427768659935*G0_4_4 - 0.00260909849079536*G0_4_5 + 0.00343815782431912*G0_4_6 - 0.00153619817682344*G0_4_7 + 0.00082905933352376*G0_4_8 + 0.00585218353075594*G0_4_9 - 0.000117404916512079*G0_5_0 - 0.000154432620950504*G0_5_1 - 0.000147207703011299*G0_5_2 + 0.00153619817682344*G0_5_3 - 0.00260909849079536*G0_5_4 + 0.00050393802625954*G0_5_5 - 0.0011785647388328*G0_5_6 + 0.000463297862851512*G0_5_8 - 0.000926595725703026*G0_5_9 + 0.000332346225203424*G0_6_0 + 0.000276353111174586*G0_6_1 + 0.000410917207792277*G0_6_2 - 0.00082905933352376*G0_6_3 + 0.00343815782431912*G0_6_4 - 0.0011785647388328*G0_6_5 + 0.00196698390894853*G0_6_6 - 0.000463297862851513*G0_6_7 + 0.00229210521621275*G0_6_9 + 0.000117404916512079*G0_7_0 + 0.0001472077030113*G0_7_1 + 0.000154432620950504*G0_7_2 + 0.00260909849079536*G0_7_3 - 0.00153619817682344*G0_7_4 - 0.000463297862851513*G0_7_6 - 0.00050393802625954*G0_7_7 + 0.00117856473883279*G0_7_8 + 0.000926595725703023*G0_7_9 - 0.000332346225203424*G0_8_0 - 0.000410917207792278*G0_8_1 - 0.000276353111174586*G0_8_2 - 0.00343815782431912*G0_8_3 + 0.00082905933352376*G0_8_4 + 0.000463297862851512*G0_8_5 + 0.00117856473883279*G0_8_7 - 0.00196698390894852*G0_8_8 - 0.00229210521621274*G0_8_9 + 0.000211328849721741*G0_9_1 - 0.000211328849721743*G0_9_2 - 0.00585218353075594*G0_9_3 + 0.00585218353075595*G0_9_4 - 0.000926595725703026*G0_9_5 + 0.00229210521621275*G0_9_6 + 0.000926595725703023*G0_9_7 - 0.00229210521621274*G0_9_8;
    A[63] = A[36];
    A[0] = A[21] + 0.00153963843696013*G0_0_0 + 6.72826677291077e-05*G0_0_1 + 6.72826677291077e-05*G0_0_2 + 0.000686244559012533*G0_0_5 - 0.000325243952476151*G0_0_6 + 0.000686244559012532*G0_0_7 - 0.00032524395247615*G0_0_8 + 9.12480376766247e-05*G0_0_9 + 6.72826677291078e-05*G0_1_0 - 5.76965197501009e-05*G0_1_1 - 9.58614797900676e-06*G0_1_2 - 7.16917011559991e-05*G0_1_3 + 2.37708719851617e-05*G0_1_4 + 5.02176395033622e-05*G0_1_5 - 1.65794027401198e-05*G0_1_6 + 8.82711038961187e-05*G0_1_7 - 7.3988511488524e-05*G0_1_8 + 6.72826677291077e-05*G0_2_0 - 9.58614797900676e-06*G0_2_1 - 5.76965197501009e-05*G0_2_2 + 2.37708719851617e-05*G0_2_3 - 7.1691701155999e-05*G0_2_4 + 8.82711038961189e-05*G0_2_5 - 7.3988511488524e-05*G0_2_6 + 5.02176395033622e-05*G0_2_7 - 1.65794027401198e-05*G0_2_8 - 7.16917011559991e-05*G0_3_1 + 2.37708719851617e-05*G0_3_2 - 9.35225488797077e-05*G0_3_3 + 6.48235692878661e-05*G0_3_4 - 3.35155915513117e-05*G0_3_5 + 4.11418938204731e-06*G0_3_6 - 7.62630226916102e-06*G0_3_7 + 3.51211288711361e-06*G0_3_8 + 1.52526045383213e-05*G0_3_9 + 2.37708719851617e-05*G0_4_1 - 7.1691701155999e-05*G0_4_2 + 6.48235692878661e-05*G0_4_3 - 9.35225488797077e-05*G0_4_4 - 7.6263022691607e-06*G0_4_5 + 3.51211288711349e-06*G0_4_6 - 3.35155915513114e-05*G0_4_7 + 4.11418938204716e-06*G0_4_8 + 1.52526045383214e-05*G0_4_9 + 0.000686244559012533*G0_5_0 + 5.02176395033622e-05*G0_5_1 + 8.82711038961189e-05*G0_5_2 - 3.35155915513117e-05*G0_5_3 - 7.6263022691607e-06*G0_5_4 + 0.000801865545169253*G0_5_5 - 0.000303546899529094*G0_5_6 + 0.000392553874696797*G0_5_7 - 0.000196276937348399*G0_5_8 + 0.000118809761666924*G0_5_9 - 0.000325243952476151*G0_6_0 - 1.65794027401198e-05*G0_6_1 - 7.3988511488524e-05*G0_6_2 + 4.11418938204732e-06*G0_6_3 + 3.51211288711349e-06*G0_6_4 - 0.000303546899529094*G0_6_5 + 0.000169986263736293*G0_6_6 - 0.000196276937348399*G0_6_7 + 7.25502176395155e-05*G0_6_8 - 8.22837876409443e-06*G0_6_9 + 0.000686244559012532*G0_7_0 + 8.82711038961187e-05*G0_7_1 + 5.02176395033622e-05*G0_7_2 - 7.62630226916102e-06*G0_7_3 - 3.35155915513114e-05*G0_7_4 + 0.000392553874696797*G0_7_5 - 0.000196276937348399*G0_7_6 + 0.000801865545169251*G0_7_7 - 0.000303546899529093*G0_7_8 + 0.000118809761666924*G0_7_9 - 0.00032524395247615*G0_8_0 - 7.3988511488524e-05*G0_8_1 - 1.65794027401198e-05*G0_8_2 + 3.51211288711361e-06*G0_8_3 + 4.11418938204715e-06*G0_8_4 - 0.000196276937348399*G0_8_5 + 7.25502176395155e-05*G0_8_6 - 0.000303546899529093*G0_8_7 + 0.000169986263736292*G0_8_8 - 8.22837876409433e-06*G0_8_9 + 9.12480376766247e-05*G0_9_0 + 1.52526045383213e-05*G0_9_3 + 1.52526045383214e-05*G0_9_4 + 0.000118809761666924*G0_9_5 - 8.22837876409445e-06*G0_9_6 + 0.000118809761666924*G0_9_7 - 8.22837876409434e-06*G0_9_8 + 0.000399778792636003*G0_9_9;
    A[79] = A[97];
    A[38] = A[83];
    A[20] = A[2];
    A[18] = A[81];
    A[88] = A[77] - 0.000629370629370735*G0_0_0 - 2.50865206222384e-06*G0_0_2 + 0.000276353111174587*G0_0_3 - 0.000154432620950504*G0_0_4 - 0.000410917207792277*G0_0_5 + 0.000147207703011299*G0_0_6 - 0.00149826735764261*G0_0_7 + 0.0011839834272872*G0_0_8 + 0.000211328849721742*G0_0_9 + 0.000629370629370736*G0_1_1 + 2.50865206222389e-06*G0_1_2 + 0.000410917207792277*G0_1_3 - 0.000147207703011299*G0_1_4 - 0.000276353111174586*G0_1_5 + 0.000154432620950504*G0_1_6 - 0.0011839834272872*G0_1_7 + 0.00149826735764261*G0_1_8 - 0.000211328849721743*G0_1_9 - 2.50865206222385e-06*G0_2_0 + 2.50865206222389e-06*G0_2_1 + 0.000332346225203424*G0_2_3 - 0.000117404916512079*G0_2_4 - 0.000332346225203424*G0_2_5 + 0.000117404916512079*G0_2_6 - 0.000869699496931785*G0_2_7 + 0.000869699496931786*G0_2_8 + 0.000276353111174587*G0_3_0 + 0.000410917207792277*G0_3_1 + 0.000332346225203424*G0_3_2 + 0.00196698390894852*G0_3_3 - 0.00117856473883279*G0_3_4 - 0.000463297862851513*G0_3_6 - 0.000829059333523756*G0_3_7 + 0.00343815782431911*G0_3_8 + 0.00229210521621275*G0_3_9 - 0.000154432620950504*G0_4_0 - 0.000147207703011299*G0_4_1 - 0.000117404916512079*G0_4_2 - 0.00117856473883279*G0_4_3 + 0.000503938026259539*G0_4_4 + 0.000463297862851513*G0_4_5 + 0.00153619817682343*G0_4_7 - 0.00260909849079536*G0_4_8 - 0.000926595725703026*G0_4_9 - 0.000410917207792277*G0_5_0 - 0.000276353111174586*G0_5_1 - 0.000332346225203424*G0_5_2 + 0.000463297862851513*G0_5_4 - 0.00196698390894852*G0_5_5 + 0.00117856473883279*G0_5_6 - 0.00343815782431911*G0_5_7 + 0.000829059333523755*G0_5_8 - 0.00229210521621274*G0_5_9 + 0.000147207703011299*G0_6_0 + 0.000154432620950504*G0_6_1 + 0.000117404916512079*G0_6_2 - 0.000463297862851513*G0_6_3 + 0.00117856473883279*G0_6_5 - 0.000503938026259539*G0_6_6 + 0.00260909849079536*G0_6_7 - 0.00153619817682343*G0_6_8 + 0.000926595725703023*G0_6_9 - 0.00149826735764261*G0_7_0 - 0.0011839834272872*G0_7_1 - 0.000869699496931785*G0_7_2 - 0.000829059333523756*G0_7_3 + 0.00153619817682343*G0_7_4 - 0.00343815782431911*G0_7_5 + 0.00260909849079536*G0_7_6 - 0.0141427768659935*G0_7_7 - 0.00585218353075594*G0_7_9 + 0.0011839834272872*G0_8_0 + 0.00149826735764261*G0_8_1 + 0.000869699496931786*G0_8_2 + 0.00343815782431911*G0_8_3 - 0.00260909849079536*G0_8_4 + 0.000829059333523755*G0_8_5 - 0.00153619817682343*G0_8_6 + 0.0141427768659936*G0_8_8 + 0.00585218353075595*G0_8_9 + 0.000211328849721742*G0_9_0 - 0.000211328849721743*G0_9_1 + 0.00229210521621275*G0_9_3 - 0.000926595725703026*G0_9_4 - 0.00229210521621274*G0_9_5 + 0.000926595725703023*G0_9_6 - 0.00585218353075594*G0_9_7 + 0.00585218353075595*G0_9_8;
    A[43] = A[34];
    A[95] = A[59];
    A[52] = A[25];
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class mass_matrix_f2_p3_q3_tensor_form_0: public ufc::form
{
public:

  /// Constructor
  mass_matrix_f2_p3_q3_tensor_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f2_p3_q3_tensor_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(Product(Argument(FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None), 0), Argument(FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None), 1)), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None), 0), Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None), 1))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 2;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f2_p3_q3_tensor_finite_element_0();
        break;
      }
    case 1:
      {
        return new mass_matrix_f2_p3_q3_tensor_finite_element_0();
        break;
      }
    case 2:
      {
        return new mass_matrix_f2_p3_q3_tensor_finite_element_0();
        break;
      }
    case 3:
      {
        return new mass_matrix_f2_p3_q3_tensor_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f2_p3_q3_tensor_dofmap_0();
        break;
      }
    case 1:
      {
        return new mass_matrix_f2_p3_q3_tensor_dofmap_0();
        break;
      }
    case 2:
      {
        return new mass_matrix_f2_p3_q3_tensor_dofmap_0();
        break;
      }
    case 3:
      {
        return new mass_matrix_f2_p3_q3_tensor_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f2_p3_q3_tensor_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif

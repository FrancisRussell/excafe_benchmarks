#include <cassert>
#include <cassert>
#include <cmath>
#include <ufc.h>

// Common sub-expression elimination pass took 0 minutes and 9.19 seconds (wall clock).

class ExcafeCellIntegral_0 : public ufc::cell_integral
{
public:
  void tabulate_tensor(double* const A, const double* const* w, const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;

    const double var_0 = w[0][4]*w[1][0] + w[0][0]*w[1][4];
    const double var_1 = -var_0;
    const double var_2 = w[0][0]*w[1][5] + w[0][5]*w[1][0];
    const double var_3 = w[0][2]*w[1][3] + w[0][3]*w[1][2];
    const double var_4 = w[0][2]*w[1][4] + w[0][4]*w[1][2];
    const double var_5 = w[0][1]*w[1][0] + w[0][0]*w[1][1];
    const double var_6 = w[0][2]*w[1][5] + w[0][5]*w[1][2];
    const double var_7 = w[0][2]*w[1][2];
    const double var_8 = 0.1666666666666666574148081*var_7;
    const double var_9 = w[0][2]*w[1][0] + w[0][0]*w[1][2];
    const double var_10 = w[0][1]*w[1][2] + w[0][2]*w[1][1];
    const double var_11 = var_9 + var_10;
    const double var_12 = -0.1777777777777777845624740*w[0][5]*w[1][5] + var_8 + 0.0555555555555555524716027*var_6 + 0.0111111111111111115351546*var_5 + -0.0277777777777777762358014*var_11;
    const double var_13 = w[0][1]*w[1][3] + w[0][3]*w[1][1];
    const double var_14 = -var_13;
    const double var_15 = w[0][1]*w[1][5] + w[0][5]*w[1][1];
    const double var_16 = -var_15;
    const double var_17 = w[0][1]*w[1][4] + w[0][4]*w[1][1];
    const double var_18 = -var_17;
    const double var_19 = var_18 + var_1 + var_16;
    const double var_20 = w[0][0]*w[1][3] + w[0][3]*w[1][0];
    const double var_21 = w[0][4]*w[1][5] + w[0][5]*w[1][4];
    const double var_22 = 0.2500000000000000000000000*w[0][0]*w[1][0];
    const double var_23 = -var_22;
    const double var_24 = -0.2666666666666666629659233*var_21 + 0.0333333333333333328707404*var_20 + 0.0666666666666666657414808*var_23;
    const double var_25 = w[0][3]*w[1][5] + w[0][5]*w[1][3];
    const double var_26 = w[0][1]*w[1][1];
    const double var_27 = 0.0833333333333333287074041*var_26 + 0.4000000000000000222044605*var_25;
    const double var_28 = -var_27;
    const double var_29 = var_24 + var_28;
    const double var_30 = 0.0111111111111111115351546*var_19 + var_12 + 0.1111111111111111049432054*var_4 + 0.2222222222222222098864108*var_3 + 0.0222222222222222230703093*var_2 + 0.3333333333333333148296163*var_29 + 0.1000000000000000055511151*var_14;
    const double var_31 = -var_20;
    const double var_32 = w[0][3]*w[1][3];
    const double var_33 = -var_21 + 0.5000000000000000000000000*var_31 + var_32;
    const double var_34 = var_0 + var_2;
    const double var_35 = var_34 + var_20;
    const double var_36 = var_22 + var_35;
    const double var_37 = 3.2000000000000001776356839*w[0][4]*w[1][4];
    const double var_38 = var_37 + var_26;
    const double var_39 = -var_4;
    const double var_40 = var_18 + var_39;
    const double var_41 = -var_6;
    const double var_42 = var_41 + var_16;
    const double var_43 = var_42 + var_40;
    const double var_44 = -var_2;
    const double var_45 = -var_3;
    const double var_46 = var_44 + var_45;
    const double var_47 = 3.2000000000000001776356839*w[0][3]*w[1][3];
    const double var_48 = w[0][0]*w[1][0];
    const double var_49 = 0.5000000000000000000000000*var_48;
    const double var_50 = var_47 + -0.5333333333333333259318465*var_20 + 1.6000000000000000888178420*var_21 + -0.0333333333333333328707404*var_10 + 0.3333333333333333148296163*var_49;
    const double var_51 = -x[0][1];
    const double var_52 = x[1][1] + var_51;
    const double var_53 = -x[0][0];
    const double var_54 = x[2][0] + var_53;
    const double var_55 = x[1][0] + var_53;
    const double var_56 = x[2][1] + var_51;
    const double var_57 = -var_52*var_54 + var_55*var_56;
    const double var_58 = std::abs(var_57);
    const double var_59 = w[0][3]*w[1][4] + w[0][4]*w[1][3];
    const double var_60 = 0.0111111111111111115351546*var_9 + 1.0666666666666666518636930*var_25 + 0.1333333333333333314829616*var_18 + 0.2222222222222222098864108*var_38;
    const double var_61 = var_47 + var_48;
    const double var_62 = 0.1333333333333333314829616*var_31 + 0.0111111111111111115351546*var_10 + 1.0666666666666666518636930*var_21 + 0.2222222222222222098864108*var_61;
    const double var_63 = var_3 + var_4;
    const double var_64 = 0.4000000000000000222044605*var_41;
    const double var_65 = var_62 + 4.2666666666666666074547720*w[0][5]*w[1][5] + 0.0666666666666666657414808*var_7 + -0.1777777777777777845624740*var_63 + var_60 + 0.5333333333333333259318465*var_59 + -0.1000000000000000055511151*var_5 + var_64;
    A[35] = 0.0095238095238095246686250*var_58*var_65;
    const double var_66 = 3.2000000000000001776356839*w[0][5]*w[1][5];
    const double var_67 = var_66 + -0.5333333333333333259318465*var_6 + var_8 + -0.0333333333333333328707404*var_5 + 1.6000000000000000888178420*var_59;
    const double var_68 = w[0][4]*w[1][4];
    const double var_69 = var_68 + 1.3333333333333332593184650*var_25;
    const double var_70 = 0.2000000000000000111022302*var_9 + var_26;
    const double var_71 = var_1 + var_40;
    const double var_72 = 0.3333333333333333148296163*var_70 + 0.2666666666666666629659233*var_71 + 0.4000000000000000222044605*var_46 + var_67 + 1.6000000000000000888178420*var_69 + var_50;
    A[23] = 0.0031746031746031746004211*var_58*var_72;
    A[33] = A[23];
    const double var_73 = -0.1333333333333333314829616*var_69 + 0.0222222222222222230703093*var_17 + -0.0277777777777777762358014*var_70;
    const double var_74 = 0.0027777777777777778837887*var_10;
    const double var_75 = 0.1666666666666666574148081*var_23 + -0.0277777777777777762358014*var_34 + 0.0111111111111111115351546*var_33 + var_74;
    const double var_76 = 0.0027777777777777778837887*var_5;
    const double var_77 = 0.2500000000000000000000000*w[0][2]*w[1][2];
    const double var_78 = -var_77;
    const double var_79 = w[0][5]*w[1][5];
    const double var_80 = var_79 + 0.5000000000000000000000000*var_41 + -var_59;
    const double var_81 = 0.1666666666666666574148081*var_78 + -0.0277777777777777762358014*var_63 + var_76 + 0.0111111111111111115351546*var_80;
    const double var_82 = var_13 + var_15;
    const double var_83 = var_82 + var_17;
    const double var_84 = 0.2500000000000000000000000*w[0][1]*w[1][1];
    const double var_85 = var_84 + var_83;
    const double var_86 = 0.0166666666666666664353702*var_9 + var_81 + 0.0222222222222222230703093*var_25 + -0.1000000000000000055511151*w[0][4]*w[1][4] + var_75 + 0.0111111111111111115351546*var_85;
    A[2] = 0.0095238095238095246686250*var_58*var_86;
    A[12] = A[2];
    const double var_87 = -0.0833333333333333287074041*var_5;
    const double var_88 = var_87 + -0.5333333333333333259318465*w[0][3]*w[1][3] + 0.1666666666666666574148081*var_20 + -0.0833333333333333287074041*var_9 + 0.0333333333333333328707404*var_10 + var_49;
    const double var_89 = -0.0416666666666666643537020*var_5 + 0.0555555555555555524716027*var_59 + 0.2222222222222222098864108*w[0][5]*w[1][5] + 0.0166666666666666664353702*var_7;
    const double var_90 = 0.0166666666666666664353702*var_48 + -0.0416666666666666643537020*var_10 + 0.2222222222222222098864108*w[0][3]*w[1][3] + 0.0555555555555555524716027*var_21;
    const double var_91 = var_41 + var_44;
    const double var_92 = var_31 + var_45;
    const double var_93 = var_92 + var_91;
    const double var_94 = var_1 + var_39;
    const double var_95 = 0.5000000000000000000000000*var_26;
    const double var_96 = 0.0666666666666666657414808*var_68 + 0.0055555555555555557675773*var_94 + var_89 + 0.0027777777777777778837887*var_9 + var_90 + 0.1111111111111111049432054*var_25 + 0.1666666666666666574148081*var_82 + 0.0277777777777777762358014*var_93 + var_95;
    A[7] = 0.0095238095238095246686250*var_58*var_96;
    const double var_97 = var_7 + var_66;
    const double var_98 = 0.6666666666666666296592325*var_97 + 0.0333333333333333328707404*var_5 + 3.2000000000000001776356839*var_59 + var_64;
    const double var_99 = 0.3333333333333333148296163*var_98;
    const double var_100 = 0.4000000000000000222044605*var_18 + var_62 + 4.2666666666666666074547720*w[0][4]*w[1][4] + 0.5333333333333333259318465*var_25 + 0.0666666666666666657414808*var_26 + var_99 + -0.1000000000000000055511151*var_9 + -0.1777777777777777845624740*var_82;
    const double var_101 = 0.0555555555555555524716027*var_25 + 0.2222222222222222098864108*w[0][4]*w[1][4] + -0.0416666666666666643537020*var_9 + 0.0166666666666666664353702*var_26;
    const double var_102 = var_1 + var_14;
    const double var_103 = var_31 + var_18 + var_102;
    const double var_104 = var_44 + var_16;
    const double var_105 = var_76 + var_90 + 0.0055555555555555557675773*var_104 + var_101 + 0.5000000000000000000000000*var_7 + 0.0666666666666666657414808*var_79 + 0.0277777777777777762358014*var_103 + 0.1111111111111111049432054*var_59 + 0.1666666666666666574148081*var_63;
    A[14] = 0.0095238095238095246686250*var_105*var_58;
    const double var_106 = var_42 + var_45;
    const double var_107 = -var_84;
    const double var_108 = 0.5000000000000000000000000*var_18 + -var_25 + var_68 + 0.2500000000000000000000000*var_9;
    const double var_109 = -0.0833333333333333287074041*var_82 + 0.5000000000000000000000000*var_107 + 0.0333333333333333328707404*var_108;
    const double var_110 = 0.3333333333333333148296163*var_109;
    const double var_111 = var_63 + var_6;
    const double var_112 = var_111 + var_77;
    const double var_113 = var_110 + 0.0222222222222222230703093*var_59 + 0.0166666666666666664353702*var_5 + -0.1000000000000000055511151*w[0][5]*w[1][5] + var_75 + 0.0111111111111111115351546*var_112;
    A[1] = 0.0095238095238095246686250*var_113*var_58;
    A[6] = A[1];
    const double var_114 = 0.4000000000000000222044605*var_21 + 0.0833333333333333287074041*var_48;
    const double var_115 = 0.0333333333333333328707404*var_6 + -0.2666666666666666629659233*var_59 + 0.0666666666666666657414808*var_78;
    const double var_116 = var_14 + var_40;
    const double var_117 = var_88 + 0.0333333333333333328707404*var_116 + 0.0666666666666666657414808*var_3 + 0.6666666666666666296592325*var_2 + 0.3333333333333333148296163*var_0 + var_115 + var_28;
    const double var_118 = var_1 + var_92;
    const double var_119 = var_16 + var_39;
    const double var_120 = 1.3333333333333332593184650*var_59 + var_79;
    const double var_121 = 0.2000000000000000111022302*var_5 + var_7;
    const double var_122 = -0.1333333333333333314829616*var_120 + 0.0222222222222222230703093*var_6 + -0.0277777777777777762358014*var_121;
    const double var_123 = 1.3333333333333332593184650*var_21 + var_32;
    const double var_124 = 0.2000000000000000111022302*var_10 + var_48;
    const double var_125 = -0.1333333333333333314829616*var_123 + 0.0222222222222222230703093*var_20 + -0.0277777777777777762358014*var_124;
    const double var_126 = var_102 + var_15 + var_5 + var_2;
    const double var_127 = 0.0555555555555555524716027*var_63 + 0.0666666666666666657414808*var_6 + var_125 + -0.0888888888888888922812370*var_59 + -0.4000000000000000222044605*var_79 + var_73 + 0.0111111111111111115351546*var_126;
    A[17] = 0.0095238095238095246686250*var_127*var_58;
    A[32] = A[17];
    const double var_128 = 0.0333333333333333328707404*var_9 + -0.0833333333333333287074041*var_10 + 0.1666666666666666574148081*var_17 + var_87 + -0.5333333333333333259318465*w[0][4]*w[1][4] + var_95;
    const double var_129 = -0.4000000000000000222044605*var_59 + -0.0833333333333333287074041*var_7;
    const double var_130 = var_39 + var_91;
    const double var_131 = var_128 + 0.6666666666666666296592325*var_13 + 0.0666666666666666657414808*var_0 + var_129 + 0.3333333333333333148296163*var_15 + var_24 + 0.0333333333333333328707404*var_130;
    const double var_132 = var_44 + var_31 + var_14;
    const double var_133 = -0.2666666666666666629659233*var_25 + 0.0333333333333333328707404*var_17 + 0.0666666666666666657414808*var_107;
    const double var_134 = -var_114;
    const double var_135 = var_133 + var_134;
    const double var_136 = var_12 + 0.1000000000000000055511151*var_1 + 0.1111111111111111049432054*var_3 + 0.0111111111111111115351546*var_132 + 0.0222222222222222230703093*var_15 + 0.2222222222222222098864108*var_4 + 0.3333333333333333148296163*var_135;
    A[16] = 0.0095238095238095246686250*var_136*var_58;
    const double var_137 = -0.5333333333333333259318465*var_17 + 1.6000000000000000888178420*var_25 + var_37 + -0.0333333333333333328707404*var_9 + 0.3333333333333333148296163*var_95;
    const double var_138 = var_3 + var_13 + var_119 + var_10;
    const double var_139 = -0.4000000000000000222044605*var_32 + 0.0666666666666666657414808*var_20 + 0.0555555555555555524716027*var_34 + 0.0111111111111111115351546*var_138 + -0.0888888888888888922812370*var_21 + var_73 + var_122;
    A[3] = 0.0095238095238095246686250*var_139*var_58;
    const double var_140 = 0.0333333333333333328707404*var_118 + var_128 + 0.3333333333333333148296163*var_13 + 0.0666666666666666657414808*var_4 + 0.6666666666666666296592325*var_15 + var_115 + var_134;
    A[11] = -0.0009523809523809523801263*var_2*var_58 + 0.0031746031746031746004211*var_140*var_58;
    A[5] = -0.0009523809523809523801263*var_15*var_58 + 0.0031746031746031746004211*var_117*var_58;
    const double var_141 = var_14 + var_92;
    const double var_142 = 0.4000000000000000222044605*var_119 + var_67 + 0.3333333333333333148296163*var_124 + var_137 + 1.6000000000000000888178420*var_123 + 0.2666666666666666629659233*var_141;
    A[29] = 0.0031746031746031746004211*var_142*var_58;
    A[34] = A[29];
    const double var_143 = 0.0222222222222222230703093*var_21 + var_110 + -0.1000000000000000055511151*w[0][3]*w[1][3] + 0.0166666666666666664353702*var_10 + var_81 + 0.0111111111111111115351546*var_36;
    A[8] = 0.0095238095238095246686250*var_143*var_58;
    A[13] = A[8];
    A[9] = -0.0009523809523809523801263*var_3*var_58 + 0.0031746031746031746004211*var_131*var_58;
    A[19] = A[9];
    const double var_144 = 0.0666666666666666657414808*var_13 + var_129 + 0.6666666666666666296592325*var_0 + var_88 + 0.3333333333333333148296163*var_2 + var_133 + 0.0333333333333333328707404*var_106;
    A[4] = -0.0009523809523809523801263*var_4*var_58 + 0.0031746031746031746004211*var_144*var_58;
    A[30] = A[5];
    const double var_145 = var_14 + var_45;
    const double var_146 = 0.0055555555555555557675773*var_145 + 0.1666666666666666574148081*var_34 + 0.1111111111111111049432054*var_21 + var_101 + 0.0277777777777777762358014*var_43 + var_74 + var_49 + var_89 + 0.0666666666666666657414808*var_32;
    const double var_147 = var_46 + var_4 + var_0 + var_9;
    const double var_148 = -0.4000000000000000222044605*var_68 + var_122 + var_125 + 0.0666666666666666657414808*var_17 + -0.0888888888888888922812370*var_25 + 0.0111111111111111115351546*var_147 + 0.0555555555555555524716027*var_82;
    A[10] = 0.0095238095238095246686250*var_148*var_58;
    A[15] = 0.0095238095238095246686250*var_30*var_58;
    A[20] = A[15];
    const double var_149 = 0.4000000000000000222044605*var_31 + -0.1777777777777777845624740*var_34 + -0.1000000000000000055511151*var_10 + 4.2666666666666666074547720*w[0][3]*w[1][3] + 0.5333333333333333259318465*var_21 + var_60 + 0.0666666666666666657414808*var_48 + var_99;
    A[21] = 0.0095238095238095246686250*var_149*var_58;
    A[28] = 0.0095238095238095246686250*var_100*var_58;
    const double var_150 = var_91 + var_16;
    A[24] = A[4];
    A[18] = A[3];
    const double var_151 = 0.3333333333333333148296163*var_121 + var_50 + 1.6000000000000000888178420*var_120 + var_137 + 0.4000000000000000222044605*var_102 + 0.2666666666666666629659233*var_150;
    A[22] = 0.0031746031746031746004211*var_151*var_58;
    A[0] = 0.0095238095238095246686250*var_146*var_58;
    A[26] = A[16];
    A[27] = A[22];
    A[25] = A[10];
    A[31] = A[11];
  }

  void tabulate_tensor(double* const A,
                       const double* const* w,
                       const ufc::cell& c,
                       unsigned int num_quadrature_points,
                       const double* const* quadrature_points,
                       const double* quadrature_weights) const
  {
    assert(0 && "This function is not implemented!");
  }
};

extern "C" ufc::cell_integral* newExcafeCellIntegral_0()
{
  return new ExcafeCellIntegral_0();
}

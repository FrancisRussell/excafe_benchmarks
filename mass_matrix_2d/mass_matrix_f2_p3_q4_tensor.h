// This code conforms with the UFC specification version 2.0.3
// and was automatically generated by FFC version 1.0-beta2.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'ufc'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'tensor'
//   split:                          False
//   swig_binary:                    'swig'
//   swig_path:                      ''

#ifndef __MASS_MATRIX_F2_P3_Q4_TENSOR_H
#define __MASS_MATRIX_F2_P3_Q4_TENSOR_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class mass_matrix_f2_p3_q4_tensor_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  mass_matrix_f2_p3_q4_tensor_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f2_p3_q4_tensor_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435952, 0.0606091526731326, 0.0349927106111882, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333333, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807677, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930786, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.0909137290096989};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, -0.0288675134594813, -0.0166666666666667, 0.0782460796435952, 0.0606091526731326, 0.0349927106111882, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333333, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807677, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930786, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.0909137290096989};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513775, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.30550504633039, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845308, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mass_matrix_f2_p3_q4_tensor_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class mass_matrix_f2_p3_q4_tensor_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  mass_matrix_f2_p3_q4_tensor_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f2_p3_q4_tensor_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233824, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421162, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.0388807895679869, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968254, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977598, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0109971479845644, 0.00634920634920633, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406278, -0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977598, 0.026770604530526, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527351, -0.0109971479845643, 0.00634920634920644, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382571, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924091, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984127, -0.243432247780074, 0.0, 0.0544331053951818, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.0518410527573159, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924092, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087791, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 15; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233824, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421162, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.0388807895679869, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968254, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977598, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0109971479845644, 0.00634920634920633, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406278, -0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977598, 0.026770604530526, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527351, -0.0109971479845643, 0.00634920634920644, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382571, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924091, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984127, -0.243432247780074, 0.0, 0.0544331053951818, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.0518410527573159, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924092, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087791, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941916, 13.6626010212795, 0.0, 0.611010092660776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.40000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999964, 0.0, 17.7482393492989, 0.0, 0.553283335172491, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933239, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285715, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695794, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002066, 2.52982212813471, 8.08290376865476, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206987, 8.87411967464942, -1.07142857142857, 0.276641667586245, -0.0958314847499915, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306815, 2.18217890235992, 5.74704893215391, -2.53734018966619, 10.0623058987491, 8.50420064270761, -2.1957751641342, 0.760638829255664, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.4230748895809, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393186, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696594, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 15; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.75*x[1][0] + 0.25*x[2][0];
      y[1] = 0.75*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.25*x[1][0] + 0.75*x[2][0];
      y[1] = 0.25*x[1][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[2][0];
      y[1] = 0.75*x[0][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[2][0];
      y[1] = 0.25*x[0][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[1][0];
      y[1] = 0.75*x[0][1] + 0.25*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[1][0];
      y[1] = 0.25*x[0][1] + 0.75*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
      y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
      y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.75*x[1][0] + 0.25*x[2][0];
    y[1] = 0.75*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.25*x[1][0] + 0.75*x[2][0];
    y[1] = 0.25*x[1][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[2][0];
    y[1] = 0.75*x[0][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[2][0];
    y[1] = 0.25*x[0][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[1][0];
    y[1] = 0.75*x[0][1] + 0.25*x[1][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[1][0];
    y[1] = 0.25*x[0][1] + 0.75*x[1][1];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new mass_matrix_f2_p3_q4_tensor_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mass_matrix_f2_p3_q4_tensor_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  mass_matrix_f2_p3_q4_tensor_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~mass_matrix_f2_p3_q4_tensor_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + 2.0*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 10;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*m.num_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
    offset += m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[3][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[4][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[4][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[5][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[5][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[6][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[6][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[7][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[7][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[8][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[8][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[9][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[9][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mass_matrix_f2_p3_q4_tensor_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class mass_matrix_f2_p3_q4_tensor_dofmap_1: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  mass_matrix_f2_p3_q4_tensor_dofmap_1() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~mass_matrix_f2_p3_q4_tensor_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + 3.0*m.num_entities[1] + 3.0*m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 15;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 5;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 3;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset += 3*m.num_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
    offset += 3*m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
          break;
        }
      case 1:
        {
          dofs[0] = 6;
        dofs[1] = 7;
        dofs[2] = 8;
          break;
        }
      case 2:
        {
          dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 12;
      dofs[1] = 13;
      dofs[2] = 14;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[6][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[8][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[8][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[9][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[9][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[11][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[11][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[12][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[12][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[13][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[13][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[14][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[14][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new mass_matrix_f2_p3_q4_tensor_dofmap_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class mass_matrix_f2_p3_q4_tensor_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  mass_matrix_f2_p3_q4_tensor_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f2_p3_q4_tensor_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      9
    // Number of operations (multiply-add pairs) for geometry tensor:    150
    // Number of operations (multiply-add pairs) for tensor contraction: 10628
    // Total number of operations (multiply-add pairs):                  10787
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[0][0]*w[1][0]*(1.0);
    const double G0_0_1 = det*w[0][0]*w[1][1]*(1.0);
    const double G0_0_2 = det*w[0][0]*w[1][2]*(1.0);
    const double G0_0_3 = det*w[0][0]*w[1][3]*(1.0);
    const double G0_0_4 = det*w[0][0]*w[1][4]*(1.0);
    const double G0_0_5 = det*w[0][0]*w[1][5]*(1.0);
    const double G0_0_6 = det*w[0][0]*w[1][6]*(1.0);
    const double G0_0_7 = det*w[0][0]*w[1][7]*(1.0);
    const double G0_0_8 = det*w[0][0]*w[1][8]*(1.0);
    const double G0_0_9 = det*w[0][0]*w[1][9]*(1.0);
    const double G0_1_0 = det*w[0][1]*w[1][0]*(1.0);
    const double G0_1_1 = det*w[0][1]*w[1][1]*(1.0);
    const double G0_1_2 = det*w[0][1]*w[1][2]*(1.0);
    const double G0_1_3 = det*w[0][1]*w[1][3]*(1.0);
    const double G0_1_4 = det*w[0][1]*w[1][4]*(1.0);
    const double G0_1_5 = det*w[0][1]*w[1][5]*(1.0);
    const double G0_1_6 = det*w[0][1]*w[1][6]*(1.0);
    const double G0_1_7 = det*w[0][1]*w[1][7]*(1.0);
    const double G0_1_8 = det*w[0][1]*w[1][8]*(1.0);
    const double G0_1_9 = det*w[0][1]*w[1][9]*(1.0);
    const double G0_2_0 = det*w[0][2]*w[1][0]*(1.0);
    const double G0_2_1 = det*w[0][2]*w[1][1]*(1.0);
    const double G0_2_2 = det*w[0][2]*w[1][2]*(1.0);
    const double G0_2_3 = det*w[0][2]*w[1][3]*(1.0);
    const double G0_2_4 = det*w[0][2]*w[1][4]*(1.0);
    const double G0_2_5 = det*w[0][2]*w[1][5]*(1.0);
    const double G0_2_6 = det*w[0][2]*w[1][6]*(1.0);
    const double G0_2_7 = det*w[0][2]*w[1][7]*(1.0);
    const double G0_2_8 = det*w[0][2]*w[1][8]*(1.0);
    const double G0_2_9 = det*w[0][2]*w[1][9]*(1.0);
    const double G0_3_0 = det*w[0][3]*w[1][0]*(1.0);
    const double G0_3_1 = det*w[0][3]*w[1][1]*(1.0);
    const double G0_3_2 = det*w[0][3]*w[1][2]*(1.0);
    const double G0_3_3 = det*w[0][3]*w[1][3]*(1.0);
    const double G0_3_4 = det*w[0][3]*w[1][4]*(1.0);
    const double G0_3_5 = det*w[0][3]*w[1][5]*(1.0);
    const double G0_3_6 = det*w[0][3]*w[1][6]*(1.0);
    const double G0_3_7 = det*w[0][3]*w[1][7]*(1.0);
    const double G0_3_8 = det*w[0][3]*w[1][8]*(1.0);
    const double G0_3_9 = det*w[0][3]*w[1][9]*(1.0);
    const double G0_4_0 = det*w[0][4]*w[1][0]*(1.0);
    const double G0_4_1 = det*w[0][4]*w[1][1]*(1.0);
    const double G0_4_2 = det*w[0][4]*w[1][2]*(1.0);
    const double G0_4_3 = det*w[0][4]*w[1][3]*(1.0);
    const double G0_4_4 = det*w[0][4]*w[1][4]*(1.0);
    const double G0_4_5 = det*w[0][4]*w[1][5]*(1.0);
    const double G0_4_6 = det*w[0][4]*w[1][6]*(1.0);
    const double G0_4_7 = det*w[0][4]*w[1][7]*(1.0);
    const double G0_4_8 = det*w[0][4]*w[1][8]*(1.0);
    const double G0_4_9 = det*w[0][4]*w[1][9]*(1.0);
    const double G0_5_0 = det*w[0][5]*w[1][0]*(1.0);
    const double G0_5_1 = det*w[0][5]*w[1][1]*(1.0);
    const double G0_5_2 = det*w[0][5]*w[1][2]*(1.0);
    const double G0_5_3 = det*w[0][5]*w[1][3]*(1.0);
    const double G0_5_4 = det*w[0][5]*w[1][4]*(1.0);
    const double G0_5_5 = det*w[0][5]*w[1][5]*(1.0);
    const double G0_5_6 = det*w[0][5]*w[1][6]*(1.0);
    const double G0_5_7 = det*w[0][5]*w[1][7]*(1.0);
    const double G0_5_8 = det*w[0][5]*w[1][8]*(1.0);
    const double G0_5_9 = det*w[0][5]*w[1][9]*(1.0);
    const double G0_6_0 = det*w[0][6]*w[1][0]*(1.0);
    const double G0_6_1 = det*w[0][6]*w[1][1]*(1.0);
    const double G0_6_2 = det*w[0][6]*w[1][2]*(1.0);
    const double G0_6_3 = det*w[0][6]*w[1][3]*(1.0);
    const double G0_6_4 = det*w[0][6]*w[1][4]*(1.0);
    const double G0_6_5 = det*w[0][6]*w[1][5]*(1.0);
    const double G0_6_6 = det*w[0][6]*w[1][6]*(1.0);
    const double G0_6_7 = det*w[0][6]*w[1][7]*(1.0);
    const double G0_6_8 = det*w[0][6]*w[1][8]*(1.0);
    const double G0_6_9 = det*w[0][6]*w[1][9]*(1.0);
    const double G0_7_0 = det*w[0][7]*w[1][0]*(1.0);
    const double G0_7_1 = det*w[0][7]*w[1][1]*(1.0);
    const double G0_7_2 = det*w[0][7]*w[1][2]*(1.0);
    const double G0_7_3 = det*w[0][7]*w[1][3]*(1.0);
    const double G0_7_4 = det*w[0][7]*w[1][4]*(1.0);
    const double G0_7_5 = det*w[0][7]*w[1][5]*(1.0);
    const double G0_7_6 = det*w[0][7]*w[1][6]*(1.0);
    const double G0_7_7 = det*w[0][7]*w[1][7]*(1.0);
    const double G0_7_8 = det*w[0][7]*w[1][8]*(1.0);
    const double G0_7_9 = det*w[0][7]*w[1][9]*(1.0);
    const double G0_8_0 = det*w[0][8]*w[1][0]*(1.0);
    const double G0_8_1 = det*w[0][8]*w[1][1]*(1.0);
    const double G0_8_2 = det*w[0][8]*w[1][2]*(1.0);
    const double G0_8_3 = det*w[0][8]*w[1][3]*(1.0);
    const double G0_8_4 = det*w[0][8]*w[1][4]*(1.0);
    const double G0_8_5 = det*w[0][8]*w[1][5]*(1.0);
    const double G0_8_6 = det*w[0][8]*w[1][6]*(1.0);
    const double G0_8_7 = det*w[0][8]*w[1][7]*(1.0);
    const double G0_8_8 = det*w[0][8]*w[1][8]*(1.0);
    const double G0_8_9 = det*w[0][8]*w[1][9]*(1.0);
    const double G0_9_0 = det*w[0][9]*w[1][0]*(1.0);
    const double G0_9_1 = det*w[0][9]*w[1][1]*(1.0);
    const double G0_9_2 = det*w[0][9]*w[1][2]*(1.0);
    const double G0_9_3 = det*w[0][9]*w[1][3]*(1.0);
    const double G0_9_4 = det*w[0][9]*w[1][4]*(1.0);
    const double G0_9_5 = det*w[0][9]*w[1][5]*(1.0);
    const double G0_9_6 = det*w[0][9]*w[1][6]*(1.0);
    const double G0_9_7 = det*w[0][9]*w[1][7]*(1.0);
    const double G0_9_8 = det*w[0][9]*w[1][8]*(1.0);
    const double G0_9_9 = det*w[0][9]*w[1][9]*(1.0);
    
    // Compute element tensor
    A[108] = -1.35666802333532e-05*G0_0_0 - 1.02542959685864e-05*G0_0_1 - 2.27638322876525e-05*G0_0_2 + 3.8374324088628e-05*G0_0_3 - 4.15457558314897e-05*G0_0_4 - 4.09114694829171e-05*G0_0_5 - 6.66000666000979e-05*G0_0_6 - 2.72743129886115e-05*G0_0_7 + 2.69571698143254e-05*G0_0_8 - 5.89886304172295e-05*G0_0_9 - 1.02542959685865e-05*G0_1_0 + 1.01133434466821e-05*G0_1_1 - 2.52305014209894e-05*G0_1_2 + 3.07628879057603e-05*G0_1_3 - 5.3914339628651e-05*G0_1_4 + 4.59857602714962e-05*G0_1_5 - 7.29429300858212e-06*G0_1_6 - 3.48857491714812e-06*G0_1_7 + 6.97714983429626e-06*G0_1_8 + 2.85428856857564e-05*G0_1_9 - 2.27638322876525e-05*G0_2_0 - 2.52305014209894e-05*G0_2_1 - 0.000166253499586911*G0_2_2 + 0.000111951540523022*G0_2_3 - 0.000221048792477468*G0_2_4 + 6.88200688201013e-05*G0_2_5 - 0.000258471687043237*G0_2_6 + 2.69571698143254e-05*G0_2_8 - 0.000114171542743025*G0_2_9 + 3.8374324088628e-05*G0_3_0 + 3.07628879057603e-05*G0_3_1 + 0.000111951540523022*G0_3_2 - 3.42514628229032e-05*G0_3_3 + 0.00018838304552599*G0_3_4 - 0.000162694448408811*G0_3_5 + 9.41915227629953e-05*G0_3_6 - 4.28143285286352e-05*G0_3_7 + 5.13771942343626e-05*G0_3_8 - 4.15457558314897e-05*G0_4_0 - 5.3914339628651e-05*G0_4_1 - 0.000221048792477468*G0_4_2 + 0.00018838304552599*G0_4_3 - 0.000333951762523347*G0_4_4 + 0.000196945911231718*G0_4_5 - 0.000291137433994713*G0_4_6 + 2.5688597117181e-05*G0_4_7 - 8.56286570572749e-06*G0_4_8 - 5.13771942343618e-05*G0_4_9 - 4.09114694829171e-05*G0_5_0 + 4.59857602714962e-05*G0_5_1 + 6.88200688201013e-05*G0_5_2 - 0.000162694448408811*G0_5_3 + 0.000196945911231718*G0_5_4 + 0.000148423005565932*G0_5_5 + 0.000456686170972099*G0_5_6 - 5.70857713715104e-06*G0_5_7 - 6.56486370772395e-05*G0_5_8 + 0.000308263165406167*G0_5_9 - 6.66000666000979e-05*G0_6_0 - 7.29429300858213e-06*G0_6_1 - 0.000258471687043237*G0_6_2 + 9.41915227629953e-05*G0_6_3 - 0.000291137433994713*G0_6_4 + 0.000456686170972099*G0_6_5 - 8.27743684886927e-05*G0_6_6 + 7.13572142143905e-05*G0_6_7 - 6.56486370772395e-05*G0_6_8 + 0.000154131582703084*G0_6_9 - 2.72743129886115e-05*G0_7_0 - 3.48857491714812e-06*G0_7_1 - 4.28143285286352e-05*G0_7_3 + 2.5688597117181e-05*G0_7_4 - 5.70857713715105e-06*G0_7_5 + 7.13572142143905e-05*G0_7_6 - 1.71257314114531e-05*G0_7_7 - 8.56286570572747e-06*G0_7_8 + 3.42514628229074e-05*G0_7_9 + 2.69571698143254e-05*G0_8_0 + 6.97714983429626e-06*G0_8_1 + 2.69571698143254e-05*G0_8_2 + 5.13771942343626e-05*G0_8_3 - 8.56286570572749e-06*G0_8_4 - 6.56486370772395e-05*G0_8_5 - 6.56486370772394e-05*G0_8_6 - 8.56286570572747e-06*G0_8_7 + 5.13771942343624e-05*G0_8_8 - 6.85029256458144e-05*G0_8_9 - 5.89886304172295e-05*G0_9_0 + 2.85428856857564e-05*G0_9_1 - 0.000114171542743025*G0_9_2 - 5.13771942343618e-05*G0_9_4 + 0.000308263165406167*G0_9_5 + 0.000154131582703084*G0_9_6 + 3.42514628229074e-05*G0_9_7 - 6.85029256458144e-05*G0_9_8 + 0.000513771942343613*G0_9_9;
    A[52] = A[108];
    A[60] = 5.30333863667449e-06*G0_0_0 + 7.50351940828485e-06*G0_0_1 + 7.50351940828484e-06*G0_0_2 - 7.47268604411815e-06*G0_0_3 - 7.47268604411813e-06*G0_0_4 + 3.33000333000481e-06*G0_0_5 + 5.47071975643666e-06*G0_0_6 + 3.33000333000494e-06*G0_0_7 + 5.4707197564366e-06*G0_0_8 - 7.61143618286835e-06*G0_0_9 + 7.50351940828485e-06*G0_1_0 + 3.32691999358823e-05*G0_1_1 + 8.45054416483386e-06*G0_1_2 + 5.44296972868657e-05*G0_1_3 - 9.8512598512645e-06*G0_1_5 + 6.79875679876001e-06*G0_1_6 - 2.28739514453908e-05*G0_1_7 + 4.33693290836352e-05*G0_1_8 + 3.21107463964758e-05*G0_1_9 + 7.50351940828484e-06*G0_2_0 + 8.45054416483386e-06*G0_2_1 + 3.32691999358823e-05*G0_2_2 + 5.44296972868658e-05*G0_2_4 - 2.28739514453908e-05*G0_2_5 + 4.33693290836353e-05*G0_2_6 - 9.85125985126452e-06*G0_2_7 + 6.79875679876003e-06*G0_2_8 + 3.21107463964758e-05*G0_2_9 - 7.47268604411815e-06*G0_3_0 + 5.44296972868657e-05*G0_3_1 - 1.26659055230543e-05*G0_3_3 - 0.000166797488226138*G0_3_4 + 4.01384329955948e-05*G0_3_5 - 4.87012987013217e-05*G0_3_6 - 5.88697017268721e-06*G0_3_7 + 5.45882688740089e-05*G0_3_8 - 8.45582988440529e-05*G0_3_9 - 7.47268604411813e-06*G0_4_0 + 5.44296972868658e-05*G0_4_2 - 0.000166797488226138*G0_4_3 - 1.26659055230541e-05*G0_4_4 - 5.88697017268727e-06*G0_4_5 + 5.45882688740089e-05*G0_4_6 + 4.01384329955947e-05*G0_4_7 - 4.87012987013217e-05*G0_4_8 - 8.45582988440529e-05*G0_4_9 + 3.33000333000481e-06*G0_5_0 - 9.85125985126451e-06*G0_5_1 - 2.28739514453908e-05*G0_5_2 + 4.01384329955948e-05*G0_5_3 - 5.88697017268726e-06*G0_5_4 + 1.62337662337738e-05*G0_5_5 - 4.15655772798826e-05*G0_5_6 - 2.4975024975037e-06*G0_5_7 + 1.24875124875185e-06*G0_5_8 + 2.03368060511013e-05*G0_5_9 + 5.47071975643666e-06*G0_6_0 + 6.79875679876001e-06*G0_6_1 + 4.33693290836353e-05*G0_6_2 - 4.87012987013217e-05*G0_6_3 + 5.45882688740089e-05*G0_6_4 - 4.15655772798826e-05*G0_6_5 + 7.08220351077827e-05*G0_6_6 + 1.24875124875184e-06*G0_6_7 - 6.24375624375922e-06*G0_6_8 + 1.07035821321589e-06*G0_6_9 + 3.33000333000494e-06*G0_7_0 - 2.28739514453908e-05*G0_7_1 - 9.85125985126451e-06*G0_7_2 - 5.88697017268721e-06*G0_7_3 + 4.01384329955947e-05*G0_7_4 - 2.4975024975037e-06*G0_7_5 + 1.24875124875184e-06*G0_7_6 + 1.62337662337739e-05*G0_7_7 - 4.15655772798826e-05*G0_7_8 + 2.03368060511013e-05*G0_7_9 + 5.4707197564366e-06*G0_8_0 + 4.33693290836352e-05*G0_8_1 + 6.79875679876003e-06*G0_8_2 + 5.45882688740089e-05*G0_8_3 - 4.87012987013217e-05*G0_8_4 + 1.24875124875185e-06*G0_8_5 - 6.24375624375922e-06*G0_8_6 - 4.15655772798826e-05*G0_8_7 + 7.08220351077829e-05*G0_8_8 + 1.07035821321595e-06*G0_8_9 - 7.61143618286835e-06*G0_9_0 + 3.21107463964758e-05*G0_9_1 + 3.21107463964758e-05*G0_9_2 - 8.45582988440529e-05*G0_9_3 - 8.45582988440529e-05*G0_9_4 + 2.03368060511013e-05*G0_9_5 + 1.0703582132159e-06*G0_9_6 + 2.03368060511013e-05*G0_9_7 + 1.07035821321595e-06*G0_9_8 - 0.000173398030540969*G0_9_9;
    A[202] = -A[108] + 4.8593381926738e-05*G0_0_0 + 2.46314532028934e-05*G0_0_1 + 4.72190948381646e-06*G0_0_2 - 3.20314606029037e-05*G0_0_3 - 3.20314606029045e-05*G0_0_4 + 0.000235003092146059*G0_0_5 - 1.90285904571708e-05*G0_0_6 + 0.000136371564943057*G0_0_7 - 5.48657691515088e-05*G0_0_8 + 0.000135102992245913*G0_0_9 + 2.46314532028934e-05*G0_1_0 + 1.23333456666917e-06*G0_1_1 + 9.65524775049042e-06*G0_1_2 + 9.16543773687071e-05*G0_1_3 - 4.44000444000657e-05*G0_1_4 - 4.72543329686409e-05*G0_1_5 - 0.000100534386248719*G0_1_6 + 6.7868639297243e-05*G0_1_8 - 3.99600399600592e-05*G0_1_9 + 4.72190948381646e-06*G0_2_0 + 9.65524775049043e-06*G0_2_1 - 0.00010409343742682*G0_2_2 + 3.01286015571878e-05*G0_2_3 - 5.7402914545799e-05*G0_2_4 + 0.000116391544963028*G0_2_5 + 1.74428745857395e-05*G0_2_6 - 4.34486148772062e-05*G0_2_8 + 7.99200799201181e-05*G0_2_9 - 3.20314606029037e-05*G0_3_0 + 9.16543773687071e-05*G0_3_1 + 3.01286015571878e-05*G0_3_2 - 0.000171257314114529*G0_3_3 + 0.00016269444840881*G0_3_5 + 0.000214071642643172*G0_3_6 + 8.5628657057246e-06*G0_3_7 - 5.13771942343571e-05*G0_3_8 + 0.000102754388468728*G0_3_9 - 3.20314606029045e-05*G0_4_0 - 4.44000444000657e-05*G0_4_1 - 5.7402914545799e-05*G0_4_2 - 0.000265448836877532*G0_4_4 + 8.56286570572734e-06*G0_4_5 - 0.000222634508348899*G0_4_6 + 7.70657913515426e-05*G0_4_7 + 4.28143285286324e-05*G0_4_8 - 0.000256885971171809*G0_4_9 + 0.000235003092146059*G0_5_0 - 4.72543329686409e-05*G0_5_1 + 0.000116391544963028*G0_5_2 + 0.00016269444840881*G0_5_3 + 8.56286570572731e-06*G0_5_4 - 0.000536606250892218*G0_5_5 - 0.000536606250892216*G0_5_6 + 6.27943485086639e-05*G0_5_7 + 5.42314828029365e-05*G0_5_8 - 0.000513771942343613*G0_5_9 - 1.90285904571708e-05*G0_6_0 - 0.000100534386248719*G0_6_1 + 1.74428745857395e-05*G0_6_2 + 0.000214071642643172*G0_6_3 - 0.000222634508348899*G0_6_4 - 0.000536606250892216*G0_6_5 - 0.000767803624946844*G0_6_6 - 0.0001170258313116*G0_6_7 + 0.000259740259740381*G0_6_8 - 0.000667903525046698*G0_6_9 + 0.000136371564943057*G0_7_0 + 8.56286570572461e-06*G0_7_3 + 7.70657913515426e-05*G0_7_4 + 6.27943485086639e-05*G0_7_5 - 0.0001170258313116*G0_7_6 + 5.13771942343629e-05*G0_7_7 - 0.00019694591123172*G0_7_8 - 0.000171257314114539*G0_7_9 - 5.48657691515088e-05*G0_8_0 + 6.7868639297243e-05*G0_8_1 - 4.34486148772062e-05*G0_8_2 - 5.13771942343571e-05*G0_8_3 + 4.28143285286325e-05*G0_8_4 + 5.42314828029365e-05*G0_8_5 + 0.000259740259740381*G0_8_6 - 0.00019694591123172*G0_8_7 - 8.5628657057264e-05*G0_8_8 + 3.42514628229123e-05*G0_8_9 + 0.000135102992245913*G0_9_0 - 3.99600399600592e-05*G0_9_1 + 7.99200799201181e-05*G0_9_2 + 0.000102754388468728*G0_9_3 - 0.000256885971171809*G0_9_4 - 0.000513771942343613*G0_9_5 - 0.000667903525046698*G0_9_6 - 0.000171257314114539*G0_9_7 + 3.42514628229123e-05*G0_9_8 - 0.00195233338090572*G0_9_9;
    A[4] = A[60];
    A[16] = 6.98449111147853e-06*G0_0_0 + 3.59208692542195e-05*G0_0_1 + 2.56228926863968e-06*G0_0_2 + 1.55862655862729e-05*G0_0_3 - 6.23219373219666e-06*G0_0_4 + 1.15790294361777e-06*G0_0_5 - 7.71219521219885e-06*G0_0_7 + 2.37840862840975e-05*G0_0_8 + 4.92562992563224e-06*G0_0_9 + 3.59208692542195e-05*G0_1_0 + 0.000999386416053554*G0_1_1 + 3.59208692542195e-05*G0_1_2 + 0.000332306582306739*G0_1_3 - 0.000157134532134606*G0_1_4 - 3.00625300625446e-06*G0_1_5 - 3.00625300625441e-06*G0_1_6 - 0.000157134532134607*G0_1_7 + 0.000332306582306739*G0_1_8 + 3.6075036075053e-05*G0_1_9 + 2.56228926863968e-06*G0_2_0 + 3.59208692542195e-05*G0_2_1 + 6.98449111147853e-06*G0_2_2 + 2.37840862840975e-05*G0_2_3 - 7.71219521219884e-06*G0_2_4 + 1.15790294361778e-06*G0_2_6 - 6.23219373219668e-06*G0_2_7 + 1.55862655862729e-05*G0_2_8 + 4.92562992563224e-06*G0_2_9 + 1.55862655862729e-05*G0_3_0 + 0.000332306582306739*G0_3_1 + 2.37840862840975e-05*G0_3_2 + 0.00027888777888791*G0_3_3 - 0.000123834498834557*G0_3_4 - 7.3884448884484e-06*G0_3_5 - 1.39443889443955e-05*G0_3_6 - 6.97219447219777e-05*G0_3_7 + 0.000139443889443955*G0_3_8 + 3.12187812187959e-05*G0_3_9 - 6.23219373219666e-06*G0_4_0 - 0.000157134532134606*G0_4_1 - 7.71219521219884e-06*G0_4_2 - 0.000123834498834557*G0_4_3 + 7.28438228438571e-05*G0_4_4 - 4.26656676656877e-06*G0_4_5 + 1.82109557109643e-05*G0_4_6 + 3.01781551781695e-05*G0_4_7 - 6.97219447219776e-05*G0_4_8 - 6.24375624375916e-06*G0_4_9 + 1.15790294361777e-06*G0_5_0 - 3.00625300625446e-06*G0_5_1 - 7.3884448884484e-06*G0_5_3 - 4.26656676656877e-06*G0_5_4 + 3.45785167213902e-05*G0_5_5 - 1.15806812235438e-05*G0_5_6 + 1.82109557109643e-05*G0_5_7 - 1.39443889443956e-05*G0_5_8 + 1.31118881118943e-05*G0_5_9 - 3.00625300625441e-06*G0_6_1 + 1.15790294361778e-06*G0_6_2 - 1.39443889443955e-05*G0_6_3 + 1.82109557109643e-05*G0_6_4 - 1.15806812235438e-05*G0_6_5 + 3.45785167213902e-05*G0_6_6 - 4.2665667665688e-06*G0_6_7 - 7.38844488844834e-06*G0_6_8 + 1.31118881118943e-05*G0_6_9 - 7.71219521219885e-06*G0_7_0 - 0.000157134532134607*G0_7_1 - 6.23219373219668e-06*G0_7_2 - 6.97219447219777e-05*G0_7_3 + 3.01781551781695e-05*G0_7_4 + 1.82109557109643e-05*G0_7_5 - 4.2665667665688e-06*G0_7_6 + 7.28438228438573e-05*G0_7_7 - 0.000123834498834557*G0_7_8 - 6.24375624375915e-06*G0_7_9 + 2.37840862840975e-05*G0_8_0 + 0.000332306582306739*G0_8_1 + 1.55862655862729e-05*G0_8_2 + 0.000139443889443955*G0_8_3 - 6.97219447219776e-05*G0_8_4 - 1.39443889443956e-05*G0_8_5 - 7.38844488844834e-06*G0_8_6 - 0.000123834498834557*G0_8_7 + 0.00027888777888791*G0_8_8 + 3.12187812187958e-05*G0_8_9 + 4.92562992563224e-06*G0_9_0 + 3.6075036075053e-05*G0_9_1 + 4.92562992563224e-06*G0_9_2 + 3.12187812187959e-05*G0_9_3 - 6.24375624375916e-06*G0_9_4 + 1.31118881118943e-05*G0_9_5 + 1.31118881118943e-05*G0_9_6 - 6.24375624375915e-06*G0_9_7 + 3.12187812187958e-05*G0_9_8 + 7.49250749251103e-05*G0_9_9;
    A[1] = -4.08696242029768e-05*G0_0_0 - 5.90257038670015e-06*G0_0_1 - 1.84192644510191e-06*G0_0_2 + 1.72281422281503e-06*G0_0_4 - 2.03500203500299e-05*G0_0_5 + 1.06705463848371e-05*G0_0_6 - 2.80275280275412e-05*G0_0_7 + 1.07630464773373e-05*G0_0_8 - 3.76607519464839e-06*G0_0_9 - 5.90257038670015e-06*G0_1_0 - 4.08696242029769e-05*G0_1_1 - 1.84192644510192e-06*G0_1_2 - 2.035002035003e-05*G0_1_3 + 1.06705463848371e-05*G0_1_4 + 1.72281422281503e-06*G0_1_6 + 1.07630464773373e-05*G0_1_7 - 2.80275280275413e-05*G0_1_8 - 3.76607519464839e-06*G0_1_9 - 1.84192644510191e-06*G0_2_0 - 1.84192644510192e-06*G0_2_1 + 2.6670860004206e-06*G0_2_2 - 3.3366104794692e-06*G0_2_3 + 5.36996072710612e-06*G0_2_4 - 3.33661047946919e-06*G0_2_5 + 5.36996072710612e-06*G0_2_6 - 1.24049231192146e-06*G0_2_7 - 1.24049231192147e-06*G0_2_8 + 2.87411001696852e-06*G0_2_9 - 2.03500203500299e-05*G0_3_1 - 3.3366104794692e-06*G0_3_2 - 2.80969030969166e-06*G0_3_3 + 1.07035821321586e-06*G0_3_4 - 2.83942248228097e-06*G0_3_6 + 4.04357547214882e-06*G0_3_7 - 1.00940725940774e-05*G0_3_8 + 3.21107463964757e-06*G0_3_9 + 1.72281422281503e-06*G0_4_0 + 1.06705463848371e-05*G0_4_1 + 5.36996072710612e-06*G0_4_2 + 1.07035821321586e-06*G0_4_3 + 1.20415298986785e-06*G0_4_4 - 2.83942248228097e-06*G0_4_5 + 5.67884496456193e-06*G0_4_6 - 1.88799295942243e-06*G0_4_7 + 6.05049712192855e-06*G0_4_8 - 2.94348508634362e-06*G0_4_9 - 2.03500203500299e-05*G0_5_0 - 3.33661047946919e-06*G0_5_2 - 2.83942248228097e-06*G0_5_4 - 2.80969030969155e-06*G0_5_5 + 1.07035821321582e-06*G0_5_6 - 1.00940725940773e-05*G0_5_7 + 4.04357547214879e-06*G0_5_8 + 3.21107463964761e-06*G0_5_9 + 1.06705463848371e-05*G0_6_0 + 1.72281422281503e-06*G0_6_1 + 5.36996072710612e-06*G0_6_2 - 2.83942248228097e-06*G0_6_3 + 5.67884496456193e-06*G0_6_4 + 1.07035821321582e-06*G0_6_5 + 1.20415298986786e-06*G0_6_6 + 6.05049712192852e-06*G0_6_7 - 1.88799295942241e-06*G0_6_8 - 2.94348508634363e-06*G0_6_9 - 2.80275280275412e-05*G0_7_0 + 1.07630464773373e-05*G0_7_1 - 1.24049231192146e-06*G0_7_2 + 4.04357547214882e-06*G0_7_3 - 1.88799295942243e-06*G0_7_4 - 1.00940725940773e-05*G0_7_5 + 6.05049712192852e-06*G0_7_6 - 4.21453546453744e-05*G0_7_7 + 2.55548023405286e-05*G0_7_8 + 1.07630464773373e-05*G0_8_0 - 2.80275280275413e-05*G0_8_1 - 1.24049231192147e-06*G0_8_2 - 1.00940725940774e-05*G0_8_3 + 6.05049712192855e-06*G0_8_4 + 4.04357547214879e-06*G0_8_5 - 1.88799295942241e-06*G0_8_6 + 2.55548023405287e-05*G0_8_7 - 4.21453546453745e-05*G0_8_8 - 3.76607519464839e-06*G0_9_0 - 3.76607519464839e-06*G0_9_1 + 2.87411001696852e-06*G0_9_2 + 3.21107463964757e-06*G0_9_3 - 2.94348508634362e-06*G0_9_4 + 3.21107463964762e-06*G0_9_5 - 2.94348508634363e-06*G0_9_6 + 1.01684030255507e-05*G0_9_9;
    A[125] = -A[1] - 5.77244624863951e-06*G0_0_0 + 2.0737456253339e-05*G0_0_1 + 8.63003839194722e-05*G0_0_2 - 9.74059009773754e-05*G0_0_3 + 0.00022964304214315*G0_0_4 - 0.000130715845001621*G0_0_5 + 0.000259310795025203*G0_0_6 - 4.7478976050427e-05*G0_0_7 - 4.88268345411429e-06*G0_0_8 + 0.000120554049125534*G0_0_9 + 2.0737456253339e-05*G0_1_0 - 5.77244624863959e-06*G0_1_1 + 8.63003839194722e-05*G0_1_2 - 0.000130715845001621*G0_1_3 + 0.000259310795025203*G0_1_4 - 9.74059009773755e-05*G0_1_5 + 0.00022964304214315*G0_1_6 - 4.88268345411435e-06*G0_1_7 - 4.7478976050427e-05*G0_1_8 + 0.000120554049125534*G0_1_9 + 8.63003839194722e-05*G0_2_0 + 8.63003839194722e-05*G0_2_1 + 0.000690045551156988*G0_2_2 - 0.000379256986400022*G0_2_3 + 0.000819370774728303*G0_2_4 - 0.000379256986400022*G0_2_5 + 0.000819370774728303*G0_2_6 - 2.19605130319522e-05*G0_2_7 - 2.19605130319518e-05*G0_2_8 + 0.000251514358657334*G0_2_9 - 9.74059009773754e-05*G0_3_0 - 0.000130715845001621*G0_3_1 - 0.000379256986400022*G0_3_2 + 0.000545213714856829*G0_3_3 - 0.00111781076066843*G0_3_4 + 0.000415373317159227*G0_3_5 - 0.000935240354883652*G0_3_6 + 4.5906474477925e-05*G0_3_7 + 0.000134523214880421*G0_3_8 - 0.000453475096332453*G0_3_9 + 0.00022964304214315*G0_4_0 + 0.000259310795025203*G0_4_1 + 0.000819370774728303*G0_4_2 - 0.00111781076066843*G0_4_3 + 0.00279840695019398*G0_4_4 - 0.000935240354883652*G0_4_5 + 0.0018704807097673*G0_4_6 - 0.000188368179439697*G0_4_7 - 0.000180429689358345*G0_4_8 + 0.0011159376337953*G0_4_9 - 0.000130715845001621*G0_5_0 - 9.74059009773755e-05*G0_5_1 - 0.000379256986400022*G0_5_2 + 0.000415373317159227*G0_5_3 - 0.000935240354883652*G0_5_4 + 0.000545213714856829*G0_5_5 - 0.00111781076066843*G0_5_6 + 0.000134523214880421*G0_5_7 + 4.59064744779245e-05*G0_5_8 - 0.000453475096332453*G0_5_9 + 0.000259310795025203*G0_6_0 + 0.00022964304214315*G0_6_1 + 0.000819370774728303*G0_6_2 - 0.000935240354883652*G0_6_3 + 0.0018704807097673*G0_6_4 - 0.00111781076066843*G0_6_5 + 0.00279840695019398*G0_6_6 - 0.000180429689358346*G0_6_7 - 0.000188368179439696*G0_6_8 + 0.0011159376337953*G0_6_9 - 4.7478976050427e-05*G0_7_0 - 4.88268345411436e-06*G0_7_1 - 2.19605130319522e-05*G0_7_2 + 4.5906474477925e-05*G0_7_3 - 0.000188368179439697*G0_7_4 + 0.000134523214880421*G0_7_5 - 0.000180429689358346*G0_7_6 + 0.00016336342229207*G0_7_7 - 8.69666048237875e-06*G0_7_8 - 4.88268345411429e-06*G0_8_0 - 4.7478976050427e-05*G0_8_1 - 2.19605130319518e-05*G0_8_2 + 0.000134523214880421*G0_8_3 - 0.000180429689358345*G0_8_4 + 4.59064744779246e-05*G0_8_5 - 0.000188368179439696*G0_8_6 - 8.69666048237873e-06*G0_8_7 + 0.00016336342229207*G0_8_8 + 0.000120554049125534*G0_9_0 + 0.000120554049125534*G0_9_1 + 0.000251514358657334*G0_9_2 - 0.000453475096332453*G0_9_3 + 0.0011159376337953*G0_9_4 - 0.000453475096332453*G0_9_5 + 0.0011159376337953*G0_9_6 + 0.00124322106465022*G0_9_9;
    A[83] = A[125];
    A[80] = A[125] + 2.96000296000439e-06*G0_0_0 + 1.77600177600261e-05*G0_0_1 + 2.07200207200305e-05*G0_0_2 - 2.11428782857455e-05*G0_0_3 + 0.000207200207200305*G0_0_4 - 2.07200207200305e-05*G0_0_5 - 2.07200207200303e-05*G0_0_6 - 3.04457447314733e-05*G0_0_7 + 3.04457447314733e-05*G0_0_8 + 6.8502925645815e-05*G0_0_9 + 1.77600177600261e-05*G0_1_0 + 0.000128971557543047*G0_1_1 + 0.000134844579289087*G0_1_2 - 2.02971631543161e-05*G0_1_3 + 0.00037296037296055*G0_1_4 - 4.1440041440061e-05*G0_1_5 + 2.07200207200306e-05*G0_1_6 - 5.37029108457933e-05*G0_1_7 + 7.56915042629684e-05*G0_1_8 + 5.58171986743679e-05*G0_1_9 + 2.07200207200305e-05*G0_2_0 + 0.000134844579289087*G0_2_1 + 0.000687378465156567*G0_2_2 - 0.000565360565360832*G0_2_3 + 0.0016280016280024*G0_2_4 - 6.21600621600915e-05*G0_2_5 - 4.1440041440061e-05*G0_2_7 + 2.07200207200306e-05*G0_2_8 + 0.000124320124320183*G0_2_9 - 2.11428782857455e-05*G0_3_0 - 2.02971631543161e-05*G0_3_1 - 0.000565360565360832*G0_3_2 + 0.00114171542743025*G0_3_3 - 0.00223776223776329*G0_3_4 + 0.000156034441748801*G0_3_5 - 0.000186480186480275*G0_3_6 - 6.08914894629464e-05*G0_3_7 + 0.00024737167594322*G0_3_8 - 4.56686170972107e-05*G0_3_9 + 0.000207200207200305*G0_4_0 + 0.00037296037296055*G0_4_1 + 0.0016280016280024*G0_4_2 - 0.00223776223776329*G0_4_3 + 0.00839160839161235*G0_4_4 - 0.000745920745921098*G0_4_5 + 0.000932400932401373*G0_4_6 - 0.000186480186480275*G0_4_7 - 0.000186480186480273*G0_4_8 + 0.00111888111888165*G0_4_9 - 2.07200207200305e-05*G0_5_0 - 4.1440041440061e-05*G0_5_1 - 6.21600621600915e-05*G0_5_2 + 0.000156034441748801*G0_5_3 - 0.000745920745921098*G0_5_4 - 3.0445744731473e-05*G0_5_5 + 0.000186480186480274*G0_5_6 - 0.000205508776937445*G0_5_9 - 2.07200207200303e-05*G0_6_0 + 2.07200207200306e-05*G0_6_1 - 0.000186480186480275*G0_6_3 + 0.000932400932401373*G0_6_4 + 0.000186480186480274*G0_6_5 - 0.000932400932401372*G0_6_6 - 3.04457447314733e-05*G0_7_0 - 5.37029108457933e-05*G0_7_1 - 4.1440041440061e-05*G0_7_2 - 6.08914894629464e-05*G0_7_3 - 0.000186480186480275*G0_7_4 - 2.28343085486047e-05*G0_7_7 - 9.133723419442e-05*G0_7_8 - 0.000205508776937445*G0_7_9 + 3.04457447314733e-05*G0_8_0 + 7.56915042629684e-05*G0_8_1 + 2.07200207200306e-05*G0_8_2 + 0.00024737167594322*G0_8_3 - 0.000186480186480273*G0_8_4 - 9.133723419442e-05*G0_8_7 + 0.00031968031968047*G0_8_8 + 0.000205508776937445*G0_8_9 + 6.8502925645815e-05*G0_9_0 + 5.58171986743679e-05*G0_9_1 + 0.000124320124320183*G0_9_2 - 4.56686170972107e-05*G0_9_3 + 0.00111888111888165*G0_9_4 - 0.000205508776937445*G0_9_5 - 0.000205508776937445*G0_9_7 + 0.000205508776937445*G0_9_8 + 0.00041101755387489*G0_9_9;
    A[41] = -A[16] - 1.06698122571188e-05*G0_0_0 + 2.65034788844437e-05*G0_0_1 + 1.44696573268071e-06*G0_0_3 - 1.94564033849839e-05*G0_0_5 + 1.0444251515685e-05*G0_0_6 - 2.08207797493609e-05*G0_0_7 + 6.55264048121499e-06*G0_0_8 - 1.85429649715451e-05*G0_0_9 + 2.65034788844437e-05*G0_1_0 + 0.000949847477625703*G0_1_1 + 3.01036412147665e-05*G0_1_2 + 0.000281299388442378*G0_1_3 - 0.000131551649408854*G0_1_4 - 0.000131075934647425*G0_1_7 + 0.000263063655920923*G0_1_8 + 1.73635887921683e-05*G0_1_9 + 3.01036412147665e-05*G0_2_1 + 4.22692386978298e-06*G0_2_3 + 7.4578199578235e-06*G0_2_4 + 1.29979147836352e-05*G0_2_6 - 8.06732949590468e-06*G0_2_8 - 5.5400948258117e-06*G0_2_9 + 1.44696573268071e-06*G0_3_0 + 0.000281299388442378*G0_3_1 + 4.22692386978298e-06*G0_3_2 + 0.000147352647352716*G0_3_3 - 5.55694305694567e-05*G0_3_4 - 3.86518243661309e-07*G0_3_6 - 9.81161695448029e-07*G0_3_7 - 2.65805622948603e-05*G0_3_8 - 5.01284429856094e-05*G0_3_9 - 0.000131551649408854*G0_4_1 + 7.4578199578235e-06*G0_4_2 - 5.55694305694567e-05*G0_4_3 + 4.12087912088106e-05*G0_4_4 + 8.22094572094962e-06*G0_4_6 - 8.11688311688686e-06*G0_4_7 + 2.75617239903083e-05*G0_4_8 + 3.22891394320117e-05*G0_4_9 - 1.94564033849839e-05*G0_5_0 + 5.32205889349011e-06*G0_5_5 + 1.05400551829172e-05*G0_5_6 - 1.65162218733724e-05*G0_5_7 + 1.48363541220754e-05*G0_5_8 + 2.59561866704847e-05*G0_5_9 + 1.0444251515685e-05*G0_6_0 + 1.29979147836352e-05*G0_6_2 - 3.86518243661306e-07*G0_6_3 + 8.22094572094961e-06*G0_6_4 + 1.05400551829172e-05*G0_6_5 + 9.6034917463535e-06*G0_6_6 + 8.54799961943221e-06*G0_6_8 + 1.73933209647577e-05*G0_6_9 - 2.08207797493609e-05*G0_7_0 - 0.000131075934647425*G0_7_1 - 9.81161695448056e-07*G0_7_3 - 8.11688311688686e-06*G0_7_4 - 1.65162218733725e-05*G0_7_5 + 7.43304314733244e-06*G0_7_7 + 2.48263641120899e-05*G0_7_8 + 5.22691594120412e-05*G0_7_9 + 6.55264048121499e-06*G0_8_0 + 0.000263063655920923*G0_8_1 - 8.06732949590468e-06*G0_8_2 - 2.65805622948603e-05*G0_8_3 + 2.75617239903083e-05*G0_8_4 + 1.48363541220754e-05*G0_8_5 + 8.54799961943221e-06*G0_8_6 + 2.48263641120899e-05*G0_8_7 - 0.000133319061890553*G0_8_8 - 0.000107214214357122*G0_8_9 - 1.85429649715451e-05*G0_9_0 + 1.73635887921683e-05*G0_9_1 - 5.5400948258117e-06*G0_9_2 - 5.01284429856094e-05*G0_9_3 + 3.22891394320117e-05*G0_9_4 + 2.59561866704847e-05*G0_9_5 + 1.73933209647577e-05*G0_9_6 + 5.22691594120411e-05*G0_9_7 - 0.000107214214357122*G0_9_8 - 2.14071642643156e-06*G0_9_9;
    A[165] = A[41] + 0.000228554514268907*G0_0_0 - 5.41786256072229e-06*G0_0_3 + 0.000122364408078751*G0_0_5 - 5.95172023743731e-05*G0_0_6 + 0.000177758749187404*G0_0_7 - 7.89686503972589e-05*G0_0_8 + 3.45686059971936e-05*G0_0_9 - 1.800668467336e-05*G0_1_1 - 1.58571587143062e-07*G0_1_4 + 3.16614602329037e-05*G0_1_7 - 3.92200392200578e-05*G0_1_8 + 3.17143174286165e-07*G0_1_9 + 5.41786256072225e-06*G0_2_3 - 1.09942967085876e-05*G0_2_4 - 1.84735899021701e-05*G0_2_6 + 1.0042867185729e-05*G0_2_7 + 5.76143433286556e-06*G0_2_8 - 1.42714428428787e-06*G0_2_9 - 5.41786256072229e-06*G0_3_0 + 5.41786256072225e-06*G0_3_2 - 3.44893202036224e-05*G0_3_3 + 4.75714761429376e-07*G0_3_4 + 4.28143285286347e-06*G0_3_5 - 4.28143285286341e-06*G0_3_6 - 4.75714761429132e-07*G0_3_7 + 3.44893202036218e-05*G0_3_8 - 1.58571587143069e-07*G0_4_1 - 1.09942967085876e-05*G0_4_2 + 4.7571476142939e-07*G0_4_3 + 1.18928690357308e-06*G0_4_4 + 1.66500166500242e-06*G0_4_7 - 3.40136054421927e-05*G0_4_8 + 4.28143285286357e-06*G0_4_9 + 0.000122364408078751*G0_5_0 + 4.28143285286346e-06*G0_5_3 + 6.58864944579534e-05*G0_5_5 - 5.11393368536463e-05*G0_5_6 + 8.80072308644148e-05*G0_5_7 - 4.11493268636318e-05*G0_5_8 - 2.14071642643173e-05*G0_5_9 - 5.95172023743731e-05*G0_6_0 - 1.84735899021701e-05*G0_6_2 - 4.28143285286341e-06*G0_6_3 - 5.11393368536463e-05*G0_6_5 + 4.59064744779245e-05*G0_6_6 - 4.68579040007831e-05*G0_6_7 + 5.94643451786589e-06*G0_6_8 + 1.28442985585904e-05*G0_6_9 + 0.000177758749187404*G0_7_0 + 3.16614602329037e-05*G0_7_1 + 1.0042867185729e-05*G0_7_2 - 4.75714761429119e-07*G0_7_3 + 1.66500166500242e-06*G0_7_4 + 8.80072308644148e-05*G0_7_5 - 4.68579040007831e-05*G0_7_6 + 0.000221920936206754*G0_7_7 - 0.000106322249179442*G0_7_8 - 9.99000999001463e-06*G0_7_9 - 7.89686503972589e-05*G0_8_0 - 3.92200392200578e-05*G0_8_1 + 5.76143433286556e-06*G0_8_2 + 3.44893202036218e-05*G0_8_3 - 3.40136054421927e-05*G0_8_4 - 4.11493268636318e-05*G0_8_5 + 5.94643451786589e-06*G0_8_6 - 0.000106322249179442*G0_8_7 + 0.000241900956186783*G0_8_8 + 6.70757813615268e-05*G0_8_9 + 3.45686059971936e-05*G0_9_0 + 3.17143174286165e-07*G0_9_1 - 1.42714428428787e-06*G0_9_2 + 4.28143285286356e-06*G0_9_4 - 2.14071642643173e-05*G0_9_5 + 1.28442985585904e-05*G0_9_6 - 9.99000999001462e-06*G0_9_7 + 6.70757813615268e-05*G0_9_8 - 8.5628657057273e-06*G0_9_9;
    A[10] = -A[165] - 0.000263625263625387*G0_0_0 - 2.36359760169395e-05*G0_0_1 - 1.37957280814488e-05*G0_0_2 + 4.30786145072062e-06*G0_0_3 - 0.000111925111925165*G0_0_5 + 5.45750545750802e-05*G0_0_6 - 0.000193325193325284*G0_0_7 + 7.86250786251154e-05*G0_0_8 - 2.22000222000326e-05*G0_0_9 - 2.36359760169395e-05*G0_1_0 - 2.41630797186467e-05*G0_1_1 - 1.78657321514549e-05*G0_1_3 + 7.78322206894002e-06*G0_1_4 - 5.74161288447267e-06*G0_1_5 - 4.83643340786411e-06*G0_1_7 - 4.26953998382771e-05*G0_1_8 - 1.81564467278838e-05*G0_1_9 - 1.37957280814488e-05*G0_2_0 + 2.70893128036108e-07*G0_2_3 - 6.93089978804589e-06*G0_2_5 - 8.71483014340565e-06*G0_2_7 + 7.57840043554679e-06*G0_2_8 - 3.56786071071971e-07*G0_2_9 + 4.30786145072062e-06*G0_3_0 - 1.78657321514549e-05*G0_3_1 + 2.70893128036108e-07*G0_3_2 + 2.84239569953989e-05*G0_3_3 + 1.43309071880569e-05*G0_3_4 - 8.02768659911897e-06*G0_3_5 + 7.43304314733242e-06*G0_3_7 - 5.05446934018615e-06*G0_3_8 + 3.96032538889867e-05*G0_3_9 + 7.78322206894002e-06*G0_4_1 + 1.43309071880569e-05*G0_4_3 + 6.66000666000966e-06*G0_4_4 - 7.01679273108179e-06*G0_4_7 - 2.37857380714626e-06*G0_4_8 - 0.000111925111925165*G0_5_0 - 5.74161288447267e-06*G0_5_1 - 6.93089978804589e-06*G0_5_2 - 8.02768659911897e-06*G0_5_3 - 7.57575757576112e-05*G0_5_5 + 4.59064744779246e-05*G0_5_6 - 8.40825840826234e-05*G0_5_7 + 3.75814661529123e-05*G0_5_8 + 5.45750545750802e-05*G0_6_0 + 4.59064744779246e-05*G0_6_5 - 2.18828790257465e-05*G0_6_6 + 4.65011179297111e-05*G0_6_7 - 3.09214594929025e-05*G0_6_8 - 2.14071642643173e-06*G0_6_9 - 0.000193325193325284*G0_7_0 - 4.83643340786412e-06*G0_7_1 - 8.71483014340565e-06*G0_7_2 + 7.43304314733242e-06*G0_7_3 - 7.01679273108178e-06*G0_7_4 - 8.40825840826234e-05*G0_7_5 + 4.65011179297111e-05*G0_7_6 - 0.000330502830502985*G0_7_7 + 0.00015472622615487*G0_7_8 - 2.64021692593245e-05*G0_7_9 + 7.86250786251154e-05*G0_8_0 - 4.26953998382771e-05*G0_8_1 + 7.57840043554679e-06*G0_8_2 - 5.05446934018618e-06*G0_8_3 - 2.37857380714626e-06*G0_8_4 + 3.75814661529123e-05*G0_8_5 - 3.09214594929025e-05*G0_8_6 + 0.00015472622615487*G0_8_7 + 1.16550116550166e-05*G0_8_8 + 5.9226487797944e-05*G0_8_9 - 2.22000222000326e-05*G0_9_0 - 1.81564467278838e-05*G0_9_1 - 3.56786071071971e-07*G0_9_2 + 3.96032538889867e-05*G0_9_3 - 2.14071642643174e-06*G0_9_6 - 2.64021692593245e-05*G0_9_7 + 5.9226487797944e-05*G0_9_8 + 0.000132724418438767*G0_9_9;
    A[158] = A[10] + 0.000308271974938786*G0_0_0 + 7.14453095405811e-06*G0_0_1 - 2.53714539428945e-06*G0_0_2 - 2.35478806907489e-05*G0_0_3 + 2.47371675943221e-05*G0_0_4 - 7.37357880215345e-06*G0_0_5 + 9.27643784787076e-06*G0_0_6 + 9.95036709322889e-05*G0_0_7 - 0.000106005106005156*G0_0_8 - 8.08715094429761e-05*G0_0_9 + 7.1445309540581e-06*G0_1_0 - 5.69492236159171e-05*G0_1_1 - 1.21901907616251e-05*G0_1_2 - 6.04157747015174e-05*G0_1_3 + 4.45982588839942e-05*G0_1_4 - 2.84834213405776e-05*G0_1_5 + 3.22296750868332e-05*G0_1_6 - 4.0435754721489e-06*G0_1_7 - 0.000106679035250514*G0_1_8 - 5.92264877979442e-05*G0_1_9 - 2.53714539428944e-06*G0_2_0 - 1.21901907616251e-05*G0_2_1 + 1.06991773658491e-05*G0_2_2 - 1.78987678987764e-05*G0_2_3 - 3.72841444270191e-05*G0_2_5 + 2.50344893202155e-05*G0_2_6 + 1.82555539698482e-05*G0_2_7 + 2.05151990866373e-05*G0_2_8 + 1.70068027210964e-05*G0_2_9 - 2.35478806907489e-05*G0_3_0 - 6.04157747015174e-05*G0_3_1 - 1.78987678987764e-05*G0_3_2 - 0.000211574140145668*G0_3_3 + 4.58470101327458e-05*G0_3_4 + 4.72741544170339e-05*G0_3_5 - 3.51434280005876e-05*G0_3_6 + 0.000132189239332159*G0_3_7 - 0.000132189239332159*G0_3_8 - 8.6699015270485e-05*G0_3_9 + 2.47371675943221e-05*G0_4_0 + 4.45982588839942e-05*G0_4_1 + 4.58470101327458e-05*G0_4_3 + 1.42714428428787e-05*G0_4_4 + 4.7809333523642e-05*G0_4_6 - 9.52618809762115e-05*G0_4_7 - 2.56885971171802e-05*G0_4_9 - 7.37357880215345e-06*G0_5_0 - 2.84834213405776e-05*G0_5_1 - 3.72841444270191e-05*G0_5_2 + 4.72741544170339e-05*G0_5_3 - 0.000221564150135682*G0_5_5 + 0.000113457970600881*G0_5_6 - 0.000153774796632012*G0_5_7 + 0.000146995861281644*G0_5_8 - 5.13771942343613e-05*G0_5_9 + 9.27643784787076e-06*G0_6_0 + 3.22296750868332e-05*G0_6_1 + 2.50344893202155e-05*G0_6_2 - 3.51434280005876e-05*G0_6_3 + 4.7809333523642e-05*G0_6_4 + 0.000113457970600881*G0_6_5 + 8.56286570572709e-06*G0_6_6 + 6.77893535036725e-06*G0_6_7 - 0.000109890109890162*G0_6_8 + 1.92664478378859e-05*G0_6_9 + 9.95036709322889e-05*G0_7_0 - 4.04357547214889e-06*G0_7_1 + 1.82555539698482e-05*G0_7_2 + 0.000132189239332159*G0_7_3 - 9.52618809762115e-05*G0_7_4 - 0.000153774796632012*G0_7_5 + 6.77893535036724e-06*G0_7_6 + 0.000404238618524521*G0_7_7 + 0.000344298558584435*G0_7_8 + 0.000229056657628194*G0_7_9 - 0.000106005106005156*G0_8_0 - 0.000106679035250514*G0_8_1 + 2.05151990866373e-05*G0_8_2 - 0.000132189239332159*G0_8_3 + 0.000146995861281644*G0_8_5 - 0.000109890109890162*G0_8_6 + 0.000344298558584435*G0_8_7 - 3.35378906807637e-05*G0_8_8 + 0.000177679463393832*G0_8_9 - 8.08715094429761e-05*G0_9_0 - 5.92264877979442e-05*G0_9_1 + 1.70068027210964e-05*G0_9_2 - 8.6699015270485e-05*G0_9_3 - 2.56885971171802e-05*G0_9_4 - 5.13771942343612e-05*G0_9_5 + 1.92664478378859e-05*G0_9_6 + 0.000229056657628194*G0_9_7 + 0.000177679463393832*G0_9_8 + 0.000295418866847577*G0_9_9;
    A[135] = -A[10] + 0.000211208544541977*G0_0_0 + 2.24672446894774e-05*G0_0_1 + 9.41445385890273e-06*G0_0_2 + 4.25500425500627e-06*G0_0_3 - 9.62000962001414e-06*G0_0_4 + 7.12250712251045e-05*G0_0_5 - 3.97750397750584e-05*G0_0_6 + 0.000211825211825311*G0_0_7 - 8.2325082325121e-05*G0_0_8 + 2.22000222000327e-05*G0_0_9 + 2.24672446894774e-05*G0_1_0 + 2.74549084073023e-05*G0_1_1 + 1.9345733631457e-05*G0_1_3 - 1.03467960610867e-05*G0_1_4 + 6.73268530411705e-06*G0_1_5 - 5.21964807679339e-06*G0_1_6 + 8.48357991215532e-06*G0_1_7 + 1.74032316889542e-05*G0_1_8 + 9.41445385890273e-06*G0_2_0 + 8.51661565947682e-06*G0_2_3 + 3.16482459339749e-06*G0_2_5 - 5.75482718340134e-06*G0_2_7 + 7.04982847840322e-06*G0_2_8 + 4.71750471750694e-06*G0_2_9 + 4.25500425500627e-06*G0_3_0 + 1.9345733631457e-05*G0_3_1 + 8.51661565947682e-06*G0_3_2 + 6.64811379097406e-05*G0_3_3 - 2.18234146805678e-05*G0_3_4 - 9.93054564483606e-06*G0_3_5 + 2.55696684268235e-06*G0_3_6 - 2.58669901527166e-05*G0_3_7 + 6.01184529756241e-05*G0_3_8 + 5.3874696731865e-05*G0_3_9 - 9.62000962001414e-06*G0_4_0 - 1.03467960610867e-05*G0_4_1 - 2.18234146805678e-05*G0_4_3 - 2.66400266400392e-05*G0_4_4 + 1.57580514723446e-05*G0_4_5 - 1.8315018315027e-05*G0_4_6 + 2.96132438989722e-05*G0_4_7 - 3.42514628229075e-05*G0_4_8 - 4.566861709721e-05*G0_4_9 + 7.12250712251045e-05*G0_5_0 + 6.73268530411705e-06*G0_5_1 + 3.16482459339749e-06*G0_5_2 - 9.93054564483606e-06*G0_5_3 + 1.57580514723446e-05*G0_5_4 + 5.41125541125793e-05*G0_5_5 - 8.32500832501221e-06*G0_5_6 + 2.91375291375427e-05*G0_5_7 - 3.33000333000489e-05*G0_5_8 - 3.97750397750584e-05*G0_6_0 - 5.21964807679339e-06*G0_6_1 + 2.55696684268235e-06*G0_6_3 - 1.8315018315027e-05*G0_6_4 - 8.32500832501221e-06*G0_6_5 - 1.61743018885952e-05*G0_6_6 + 4.16250416250611e-06*G0_6_7 + 3.80571809143421e-06*G0_6_8 - 1.92664478378855e-05*G0_6_9 + 0.000211825211825311*G0_7_0 + 8.4835799121553e-06*G0_7_1 - 5.75482718340134e-06*G0_7_2 - 2.58669901527166e-05*G0_7_3 + 2.96132438989722e-05*G0_7_4 + 2.91375291375428e-05*G0_7_5 + 4.16250416250617e-06*G0_7_6 + 1.24875124875186e-05*G0_7_7 - 0.000137362637362702*G0_7_8 - 7.49250749251102e-05*G0_7_9 - 8.2325082325121e-05*G0_8_0 + 1.74032316889542e-05*G0_8_1 + 7.04982847840322e-06*G0_8_2 + 6.01184529756241e-05*G0_8_3 - 3.42514628229075e-05*G0_8_4 - 3.33000333000489e-05*G0_8_5 + 3.80571809143421e-06*G0_8_6 - 0.000137362637362702*G0_8_7 + 0.000201940916226725*G0_8_8 + 7.06436420722467e-05*G0_8_9 + 2.22000222000327e-05*G0_9_0 + 4.71750471750694e-06*G0_9_2 + 5.3874696731865e-05*G0_9_3 - 4.566861709721e-05*G0_9_4 - 1.92664478378855e-05*G0_9_6 - 7.49250749251102e-05*G0_9_7 + 7.06436420722467e-05*G0_9_8 - 2.14071642643171e-05*G0_9_9;
    A[47] = A[165] - 0.000212644498358884*G0_0_0 + 1.66500166500247e-06*G0_0_3 + 1.24478695907326e-05*G0_0_4 - 0.000108383679812302*G0_0_5 + 5.77993435136563e-05*G0_0_6 - 0.000160474446188807*G0_0_7 + 8.20607963465492e-05*G0_0_8 - 2.2992880135748e-05*G0_0_9 - 5.7455771741513e-05*G0_1_3 + 3.2295746581476e-05*G0_1_4 - 3.22957465814761e-05*G0_1_7 + 5.74557717415132e-05*G0_1_8 + 0.000212644498358884*G0_2_2 - 8.20607963465493e-05*G0_2_3 + 0.000160474446188808*G0_2_4 - 5.77993435136565e-05*G0_2_5 + 0.000108383679812302*G0_2_6 - 1.24478695907326e-05*G0_2_7 - 1.66500166500239e-06*G0_2_8 + 2.29928801357482e-05*G0_2_9 + 1.66500166500247e-06*G0_3_0 - 5.7455771741513e-05*G0_3_1 - 8.20607963465493e-05*G0_3_2 - 4.28143285286319e-06*G0_3_3 - 2.64021692593247e-05*G0_3_4 + 8.32500832501223e-06*G0_3_5 - 2.16450216450319e-05*G0_3_6 - 4.99500499500743e-06*G0_3_7 + 9.99000999001492e-06*G0_3_9 + 1.24478695907326e-05*G0_4_0 + 3.2295746581476e-05*G0_4_1 + 0.000160474446188808*G0_4_2 - 2.64021692593247e-05*G0_4_3 + 0.000186955901241704*G0_4_4 - 3.73436087721978e-05*G0_4_5 + 5.89886304172297e-05*G0_4_6 + 4.9950049950072e-06*G0_4_8 + 5.70857713715115e-06*G0_4_9 - 0.000108383679812302*G0_5_0 - 5.77993435136565e-05*G0_5_2 + 8.32500832501223e-06*G0_5_3 - 3.73436087721978e-05*G0_5_4 - 1.56985871271654e-05*G0_5_5 - 5.89886304172293e-05*G0_5_7 + 2.16450216450316e-05*G0_5_8 + 2.56885971171808e-05*G0_5_9 + 5.77993435136563e-05*G0_6_0 + 0.000108383679812302*G0_6_2 - 2.16450216450319e-05*G0_6_3 + 5.89886304172297e-05*G0_6_4 + 1.56985871271661e-05*G0_6_6 + 3.73436087721976e-05*G0_6_7 - 8.32500832501221e-06*G0_6_8 - 2.56885971171807e-05*G0_6_9 - 0.000160474446188807*G0_7_0 - 3.22957465814761e-05*G0_7_1 - 1.24478695907326e-05*G0_7_2 - 4.99500499500743e-06*G0_7_3 - 5.89886304172292e-05*G0_7_5 + 3.73436087721976e-05*G0_7_6 - 0.000186955901241703*G0_7_7 + 2.64021692593241e-05*G0_7_8 - 5.70857713715123e-06*G0_7_9 + 8.20607963465492e-05*G0_8_0 + 5.74557717415132e-05*G0_8_1 - 1.66500166500239e-06*G0_8_2 + 4.9950049950072e-06*G0_8_4 + 2.16450216450316e-05*G0_8_5 - 8.32500832501221e-06*G0_8_6 + 2.64021692593241e-05*G0_8_7 + 4.28143285286433e-06*G0_8_8 - 9.99000999001439e-06*G0_8_9 - 2.2992880135748e-05*G0_9_0 + 2.29928801357482e-05*G0_9_2 + 9.99000999001492e-06*G0_9_3 + 5.70857713715116e-06*G0_9_4 + 2.56885971171807e-05*G0_9_5 - 2.56885971171807e-05*G0_9_6 - 5.70857713715123e-06*G0_9_7 - 9.99000999001439e-06*G0_9_8;
    A[149] = A[158] + 4.78533811867367e-05*G0_0_0 - 8.24572253144075e-06*G0_0_1 + 1.4095252190492e-07*G0_0_2 + 7.70657913515418e-05*G0_0_4 + 4.34486148772063e-05*G0_0_5 + 7.29429300858231e-06*G0_0_6 - 7.92857935715468e-06*G0_0_7 + 1.49057291914507e-05*G0_0_8 + 0.000159840159840235*G0_0_9 - 8.24572253144075e-06*G0_1_0 - 2.70276460752778e-05*G0_1_1 - 2.99524109048062e-06*G0_1_2 - 5.89886304172295e-05*G0_1_3 + 3.13971742543318e-05*G0_1_4 - 3.71057513914831e-05*G0_1_5 + 1.99800199800294e-05*G0_1_6 - 4.24971853543481e-05*G0_1_7 - 7.29429300858215e-06*G0_1_8 - 0.000108462965605874*G0_1_9 + 1.4095252190491e-07*G0_2_0 - 2.99524109048062e-06*G0_2_1 - 6.16667283334247e-06*G0_2_2 - 3.45686059971935e-05*G0_2_3 - 1.45885860171643e-05*G0_2_5 + 3.0128601557187e-05*G0_2_6 - 0.0001170258313116*G0_2_7 - 2.85428856857555e-06*G0_2_8 - 0.000119880119880176*G0_2_9 - 5.89886304172295e-05*G0_3_1 - 3.45686059971935e-05*G0_3_2 + 0.000108462965605874*G0_3_3 + 3.13971742543319e-05*G0_3_4 + 4.28143285286343e-05*G0_3_5 - 2.56885971171806e-05*G0_3_6 + 4.28143285286345e-05*G0_3_7 - 8.56286570572686e-05*G0_3_8 + 0.000239760239760353*G0_3_9 + 7.70657913515419e-05*G0_4_0 + 3.13971742543318e-05*G0_4_1 + 3.13971742543319e-05*G0_4_3 + 0.000724989296418207*G0_4_4 - 0.000196945911231718*G0_4_5 + 0.000222634508348898*G0_4_6 + 4.28143285286342e-05*G0_4_7 + 4.28143285286344e-05*G0_4_8 + 0.000753532182103964*G0_4_9 + 4.34486148772062e-05*G0_5_0 - 3.71057513914831e-05*G0_5_1 - 1.45885860171643e-05*G0_5_2 + 4.28143285286343e-05*G0_5_3 - 0.000196945911231718*G0_5_4 - 0.000122734408448753*G0_5_5 - 2.85428856857557e-05*G0_5_6 - 0.000530897673755066*G0_5_7 + 0.000145568716997357*G0_5_8 - 0.000770657913515418*G0_5_9 + 7.29429300858231e-06*G0_6_0 + 1.99800199800294e-05*G0_6_1 + 3.0128601557187e-05*G0_6_2 - 2.56885971171806e-05*G0_6_3 + 0.000222634508348898*G0_6_4 - 2.85428856857556e-05*G0_6_5 - 1.14171542743025e-05*G0_6_6 + 0.000385328956757709*G0_6_7 - 4.28143285286346e-05*G0_6_8 + 0.00041101755387489*G0_6_9 - 7.92857935715468e-06*G0_7_0 - 4.24971853543481e-05*G0_7_1 - 0.0001170258313116*G0_7_2 + 4.28143285286345e-05*G0_7_3 + 4.28143285286342e-05*G0_7_4 - 0.000530897673755066*G0_7_5 + 0.000385328956757709*G0_7_6 - 0.00229199372056622*G0_7_7 + 0.00031968031968047*G0_7_8 - 0.00125017839303612*G0_7_9 + 1.49057291914507e-05*G0_8_0 - 7.29429300858217e-06*G0_8_1 - 2.85428856857554e-06*G0_8_2 - 8.56286570572686e-05*G0_8_3 + 4.28143285286344e-05*G0_8_4 + 0.000145568716997357*G0_8_5 - 4.28143285286346e-05*G0_8_6 + 0.00031968031968047*G0_8_7 - 0.000331097473954772*G0_8_8 + 0.000239760239760353*G0_8_9 + 0.000159840159840235*G0_9_0 - 0.000108462965605874*G0_9_1 - 0.000119880119880176*G0_9_2 + 0.000239760239760353*G0_9_3 + 0.000753532182103964*G0_9_4 - 0.000770657913515418*G0_9_5 + 0.00041101755387489*G0_9_6 - 0.00125017839303612*G0_9_7 + 0.000239760239760353*G0_9_8 - 0.000513771942343611*G0_9_9;
    A[90] = A[135] - 2.02677980455853e-05*G0_0_1 + 2.02677980455854e-05*G0_0_2 + 7.77000777001145e-06*G0_0_3 - 7.7700077700115e-06*G0_0_4 + 0.000284900284900419*G0_0_5 - 0.000114700114700169*G0_0_6 - 0.000284900284900419*G0_0_7 + 0.000114700114700168*G0_0_8 - 2.02677980455853e-05*G0_1_0 + 1.51993802787525e-05*G0_1_1 + 1.86057328914559e-05*G0_1_3 - 7.0564356278675e-06*G0_1_6 - 5.12450512450753e-05*G0_1_7 + 3.99336113622016e-05*G0_1_8 + 2.02677980455854e-05*G0_2_0 - 1.51993802787526e-05*G0_2_2 - 1.8605732891456e-05*G0_2_4 + 5.12450512450753e-05*G0_2_5 - 3.99336113622016e-05*G0_2_6 + 7.05643562786753e-06*G0_2_8 + 7.77000777001145e-06*G0_3_0 + 1.86057328914559e-05*G0_3_1 + 6.42214927929517e-05*G0_3_3 - 1.16550116550172e-05*G0_3_5 + 2.11693068836026e-05*G0_3_6 - 2.33100233100343e-05*G0_3_7 + 4.44793301936369e-05*G0_3_8 + 6.42214927929517e-05*G0_3_9 - 7.7700077700115e-06*G0_4_0 - 1.8605732891456e-05*G0_4_2 - 6.42214927929516e-05*G0_4_4 + 2.33100233100343e-05*G0_4_5 - 4.44793301936369e-05*G0_4_6 + 1.16550116550171e-05*G0_4_7 - 2.11693068836026e-05*G0_4_8 - 6.42214927929516e-05*G0_4_9 + 0.000284900284900419*G0_5_0 + 5.12450512450754e-05*G0_5_2 - 1.16550116550172e-05*G0_5_3 + 2.33100233100343e-05*G0_5_4 + 0.00033300033300049*G0_5_5 - 0.000166500166500245*G0_5_6 - 0.000114700114700169*G0_6_0 - 7.0564356278675e-06*G0_6_1 - 3.99336113622016e-05*G0_6_2 + 2.11693068836026e-05*G0_6_3 - 4.44793301936369e-05*G0_6_4 - 0.000166500166500245*G0_6_5 - 6.66000666000994e-06*G0_6_6 - 5.99400599400881e-05*G0_6_9 - 0.000284900284900419*G0_7_0 - 5.12450512450753e-05*G0_7_1 - 2.33100233100343e-05*G0_7_3 + 1.16550116550171e-05*G0_7_4 - 0.00033300033300049*G0_7_7 + 0.000166500166500245*G0_7_8 + 0.000114700114700168*G0_8_0 + 3.99336113622016e-05*G0_8_1 + 7.05643562786752e-06*G0_8_2 + 4.44793301936369e-05*G0_8_3 - 2.11693068836026e-05*G0_8_4 + 0.000166500166500245*G0_8_7 + 6.66000666000996e-06*G0_8_8 + 5.99400599400882e-05*G0_8_9 + 6.42214927929517e-05*G0_9_3 - 6.42214927929516e-05*G0_9_4 - 5.99400599400881e-05*G0_9_6 + 5.99400599400882e-05*G0_9_8;
    A[164] = A[202] - 7.40000740001091e-06*G0_0_1 + 7.40000740001094e-06*G0_0_2 + 7.99200799201169e-05*G0_0_3 - 7.99200799201172e-05*G0_0_4 - 0.000112268683697307*G0_0_5 - 0.000129394415108762*G0_0_6 + 0.000112268683697309*G0_0_7 + 0.000129394415108761*G0_0_8 - 7.4000074000109e-06*G0_1_0 + 7.10400710401041e-05*G0_1_1 + 0.000102754388468722*G0_1_3 - 9.13372341944197e-05*G0_1_4 + 0.000102754388468722*G0_1_5 + 2.28343085486051e-05*G0_1_6 + 3.8057180914342e-05*G0_1_7 + 0.00021502307216603*G0_1_8 + 0.000262594548308958*G0_1_9 + 7.40000740001094e-06*G0_2_0 - 7.10400710401043e-05*G0_2_2 + 9.13372341944195e-05*G0_2_3 - 0.000102754388468722*G0_2_4 - 3.80571809143415e-05*G0_2_5 - 0.00021502307216603*G0_2_6 - 0.000102754388468722*G0_2_7 - 2.28343085486055e-05*G0_2_8 - 0.000262594548308958*G0_2_9 + 7.99200799201169e-05*G0_3_0 + 0.000102754388468722*G0_3_1 + 9.13372341944196e-05*G0_3_2 + 0.00020550877693744*G0_3_3 - 0.000274011702583259*G0_3_5 - 6.85029256458157e-05*G0_3_6 - 0.000239760239760351*G0_3_7 + 0.000171257314114535*G0_3_8 - 0.000308263165406173*G0_3_9 - 7.99200799201172e-05*G0_4_0 - 9.13372341944197e-05*G0_4_1 - 0.000102754388468722*G0_4_2 - 0.000205508776937444*G0_4_4 + 0.000239760239760352*G0_4_5 - 0.000171257314114536*G0_4_6 + 0.000274011702583259*G0_4_7 + 6.85029256458163e-05*G0_4_8 + 0.000308263165406171*G0_4_9 - 0.000112268683697307*G0_5_0 + 0.000102754388468722*G0_5_1 - 3.80571809143414e-05*G0_5_2 - 0.000274011702583259*G0_5_3 + 0.000239760239760352*G0_5_4 + 0.000753532182103965*G0_5_5 + 0.000804909376338324*G0_5_6 - 0.000308263165406167*G0_5_8 + 0.000616526330812336*G0_5_9 - 0.000129394415108762*G0_6_0 + 2.28343085486051e-05*G0_6_1 - 0.00021502307216603*G0_6_2 - 6.85029256458157e-05*G0_6_3 - 0.000171257314114536*G0_6_4 + 0.000804909376338324*G0_6_5 + 0.000548023405166522*G0_6_6 + 0.000308263165406167*G0_6_7 + 0.000924789496218505*G0_6_9 + 0.000112268683697309*G0_7_0 + 3.8057180914342e-05*G0_7_1 - 0.000102754388468722*G0_7_2 - 0.000239760239760351*G0_7_3 + 0.000274011702583259*G0_7_4 + 0.000308263165406167*G0_7_6 - 0.000753532182103965*G0_7_7 - 0.000804909376338326*G0_7_8 - 0.000616526330812334*G0_7_9 + 0.000129394415108761*G0_8_0 + 0.00021502307216603*G0_8_1 - 2.28343085486055e-05*G0_8_2 + 0.000171257314114535*G0_8_3 + 6.85029256458163e-05*G0_8_4 - 0.000308263165406167*G0_8_5 - 0.000804909376338325*G0_8_7 - 0.000548023405166524*G0_8_8 - 0.000924789496218508*G0_8_9 + 0.000262594548308958*G0_9_1 - 0.000262594548308958*G0_9_2 - 0.000308263165406173*G0_9_3 + 0.000308263165406171*G0_9_4 + 0.000616526330812336*G0_9_5 + 0.000924789496218505*G0_9_6 - 0.000616526330812334*G0_9_7 - 0.000924789496218508*G0_9_8;
    A[195] = A[41] - 3.53790829981475e-05*G0_0_0 - 3.92993250136293e-05*G0_0_3 + 1.29500129500192e-06*G0_0_4 - 1.82357325214552e-05*G0_0_5 + 1.63328734757383e-05*G0_0_6 - 3.5414321128623e-06*G0_0_7 + 5.8142915285789e-07*G0_0_8 - 4.31314717029207e-05*G0_0_9 + 2.35155790711456e-05*G0_1_1 + 2.53185967471801e-05*G0_1_3 + 5.33857676715072e-06*G0_1_4 - 1.65443022585957e-05*G0_1_7 + 2.30985945271768e-05*G0_1_8 + 1.77600177600262e-05*G0_1_9 - 9.14429485858492e-06*G0_2_3 + 1.36900136900201e-05*G0_2_4 + 8.6157229014412e-06*G0_2_6 + 1.01750101750149e-05*G0_2_8 + 3.61543218686245e-05*G0_2_9 - 3.92993250136293e-05*G0_3_0 + 2.53185967471801e-05*G0_3_1 - 9.14429485858492e-06*G0_3_2 - 0.000390799676514147*G0_3_3 + 4.51929023357829e-06*G0_3_4 + 6.35079206508078e-05*G0_3_5 - 9.27643784787074e-06*G0_3_6 + 0.000112506541078023*G0_3_7 - 7.65900765901132e-05*G0_3_8 - 0.000278293135436124*G0_3_9 + 1.29500129500192e-06*G0_4_0 + 5.33857676715071e-06*G0_4_1 + 1.36900136900201e-05*G0_4_2 + 4.51929023357829e-06*G0_4_3 - 4.54307597164955e-05*G0_4_4 - 9.27643784787079e-06*G0_4_5 - 3.09214594929034e-06*G0_4_7 - 3.59164644879097e-05*G0_4_8 - 8.9910089910132e-05*G0_4_9 - 1.82357325214552e-05*G0_5_0 + 6.35079206508078e-05*G0_5_3 - 9.27643784787079e-06*G0_5_4 + 7.92065077779739e-05*G0_5_5 - 4.49550449550663e-05*G0_5_6 + 1.47471576043075e-05*G0_5_7 - 1.66500166500249e-06*G0_5_8 + 0.000132724418438767*G0_5_9 + 1.63328734757383e-05*G0_6_0 + 8.61572290144119e-06*G0_6_2 - 9.27643784787074e-06*G0_6_3 - 4.49550449550663e-05*G0_6_5 + 1.92664478378855e-05*G0_6_6 - 1.45093002235926e-05*G0_6_8 - 8.99100899101322e-05*G0_6_9 - 3.54143211286229e-06*G0_7_0 - 1.65443022585957e-05*G0_7_1 + 0.000112506541078023*G0_7_3 - 3.09214594929034e-06*G0_7_4 + 1.47471576043075e-05*G0_7_5 - 4.44793301936369e-05*G0_7_7 - 5.94643451786578e-06*G0_7_8 + 0.000155558726987372*G0_7_9 + 5.8142915285789e-07*G0_8_0 + 2.30985945271768e-05*G0_8_1 + 1.01750101750149e-05*G0_8_2 - 7.65900765901133e-05*G0_8_3 - 3.59164644879097e-05*G0_8_4 - 1.66500166500249e-06*G0_8_5 - 1.45093002235926e-05*G0_8_6 - 5.94643451786581e-06*G0_8_7 + 0.000280909566623983*G0_8_8 + 1.85528756957406e-05*G0_8_9 - 4.31314717029207e-05*G0_9_0 + 1.77600177600262e-05*G0_9_1 + 3.61543218686245e-05*G0_9_2 - 0.000278293135436124*G0_9_3 - 8.9910089910132e-05*G0_9_4 + 0.000132724418438767*G0_9_5 - 8.99100899101322e-05*G0_9_6 + 0.000155558726987372*G0_9_7 + 1.85528756957406e-05*G0_9_8 - 7.70657913515427e-05*G0_9_9;
    A[31] = 2.66708600042059e-06*G0_0_0 - 1.84192644510192e-06*G0_0_1 - 1.84192644510192e-06*G0_0_2 - 1.24049231192147e-06*G0_0_3 - 1.24049231192147e-06*G0_0_4 + 5.36996072710611e-06*G0_0_5 - 3.33661047946919e-06*G0_0_6 + 5.36996072710611e-06*G0_0_7 - 3.33661047946919e-06*G0_0_8 + 2.87411001696851e-06*G0_0_9 - 1.84192644510192e-06*G0_1_0 - 4.08696242029768e-05*G0_1_1 - 5.90257038670015e-06*G0_1_2 - 2.80275280275412e-05*G0_1_3 + 1.07630464773373e-05*G0_1_4 + 1.72281422281504e-06*G0_1_5 + 1.06705463848371e-05*G0_1_7 - 2.03500203500299e-05*G0_1_8 - 3.7660751946484e-06*G0_1_9 - 1.84192644510192e-06*G0_2_0 - 5.90257038670015e-06*G0_2_1 - 4.08696242029768e-05*G0_2_2 + 1.07630464773373e-05*G0_2_3 - 2.80275280275412e-05*G0_2_4 + 1.06705463848371e-05*G0_2_5 - 2.035002035003e-05*G0_2_6 + 1.72281422281505e-06*G0_2_7 - 3.7660751946484e-06*G0_2_9 - 1.24049231192147e-06*G0_3_0 - 2.80275280275412e-05*G0_3_1 + 1.07630464773373e-05*G0_3_2 - 4.21453546453745e-05*G0_3_3 + 2.55548023405287e-05*G0_3_4 - 1.88799295942242e-06*G0_3_5 + 4.04357547214881e-06*G0_3_6 + 6.05049712192855e-06*G0_3_7 - 1.00940725940774e-05*G0_3_8 - 1.24049231192147e-06*G0_4_0 + 1.07630464773372e-05*G0_4_1 - 2.80275280275412e-05*G0_4_2 + 2.55548023405287e-05*G0_4_3 - 4.21453546453745e-05*G0_4_4 + 6.05049712192854e-06*G0_4_5 - 1.00940725940773e-05*G0_4_6 - 1.88799295942243e-06*G0_4_7 + 4.04357547214882e-06*G0_4_8 + 5.36996072710611e-06*G0_5_0 + 1.72281422281504e-06*G0_5_1 + 1.06705463848371e-05*G0_5_2 - 1.88799295942242e-06*G0_5_3 + 6.05049712192854e-06*G0_5_4 + 1.20415298986784e-06*G0_5_5 + 1.07035821321586e-06*G0_5_6 + 5.67884496456194e-06*G0_5_7 - 2.83942248228096e-06*G0_5_8 - 2.94348508634361e-06*G0_5_9 - 3.33661047946919e-06*G0_6_0 - 2.035002035003e-05*G0_6_2 + 4.04357547214881e-06*G0_6_3 - 1.00940725940773e-05*G0_6_4 + 1.07035821321586e-06*G0_6_5 - 2.80969030969163e-06*G0_6_6 - 2.83942248228098e-06*G0_6_7 + 3.21107463964757e-06*G0_6_9 + 5.36996072710611e-06*G0_7_0 + 1.06705463848371e-05*G0_7_1 + 1.72281422281505e-06*G0_7_2 + 6.05049712192855e-06*G0_7_3 - 1.88799295942243e-06*G0_7_4 + 5.67884496456194e-06*G0_7_5 - 2.83942248228098e-06*G0_7_6 + 1.20415298986788e-06*G0_7_7 + 1.07035821321586e-06*G0_7_8 - 2.94348508634359e-06*G0_7_9 - 3.33661047946919e-06*G0_8_0 - 2.03500203500299e-05*G0_8_1 - 1.00940725940774e-05*G0_8_3 + 4.04357547214881e-06*G0_8_4 - 2.83942248228096e-06*G0_8_5 + 1.07035821321586e-06*G0_8_7 - 2.80969030969166e-06*G0_8_8 + 3.21107463964756e-06*G0_8_9 + 2.87411001696851e-06*G0_9_0 - 3.7660751946484e-06*G0_9_1 - 3.7660751946484e-06*G0_9_2 - 2.94348508634361e-06*G0_9_5 + 3.21107463964757e-06*G0_9_6 - 2.94348508634359e-06*G0_9_7 + 3.21107463964755e-06*G0_9_8 + 1.01684030255507e-05*G0_9_9;
    A[99] = -A[31] + 0.000690045551156986*G0_0_0 + 8.63003839194719e-05*G0_0_1 + 8.63003839194719e-05*G0_0_2 - 2.1960513031952e-05*G0_0_3 - 2.19605130319519e-05*G0_0_4 + 0.000819370774728301*G0_0_5 - 0.000379256986400021*G0_0_6 + 0.000819370774728302*G0_0_7 - 0.000379256986400022*G0_0_8 + 0.000251514358657334*G0_0_9 + 8.63003839194719e-05*G0_1_0 - 5.77244624863951e-06*G0_1_1 + 2.0737456253339e-05*G0_1_2 - 4.7478976050427e-05*G0_1_3 - 4.8826834541143e-06*G0_1_4 + 0.00022964304214315*G0_1_5 - 9.74059009773753e-05*G0_1_6 + 0.000259310795025203*G0_1_7 - 0.000130715845001621*G0_1_8 + 0.000120554049125534*G0_1_9 + 8.63003839194719e-05*G0_2_0 + 2.0737456253339e-05*G0_2_1 - 5.77244624863954e-06*G0_2_2 - 4.88268345411433e-06*G0_2_3 - 4.7478976050427e-05*G0_2_4 + 0.000259310795025203*G0_2_5 - 0.000130715845001621*G0_2_6 + 0.00022964304214315*G0_2_7 - 9.74059009773754e-05*G0_2_8 + 0.000120554049125534*G0_2_9 - 2.1960513031952e-05*G0_3_0 - 4.7478976050427e-05*G0_3_1 - 4.88268345411434e-06*G0_3_2 + 0.00016336342229207*G0_3_3 - 8.6966604823787e-06*G0_3_4 - 0.000188368179439697*G0_3_5 + 4.59064744779249e-05*G0_3_6 - 0.000180429689358346*G0_3_7 + 0.000134523214880421*G0_3_8 - 2.19605130319519e-05*G0_4_0 - 4.88268345411431e-06*G0_4_1 - 4.7478976050427e-05*G0_4_2 - 8.6966604823787e-06*G0_4_3 + 0.00016336342229207*G0_4_4 - 0.000180429689358346*G0_4_5 + 0.000134523214880421*G0_4_6 - 0.000188368179439697*G0_4_7 + 4.59064744779248e-05*G0_4_8 + 0.000819370774728301*G0_5_0 + 0.00022964304214315*G0_5_1 + 0.000259310795025203*G0_5_2 - 0.000188368179439697*G0_5_3 - 0.000180429689358346*G0_5_4 + 0.00279840695019398*G0_5_5 - 0.00111781076066843*G0_5_6 + 0.0018704807097673*G0_5_7 - 0.000935240354883652*G0_5_8 + 0.0011159376337953*G0_5_9 - 0.000379256986400021*G0_6_0 - 9.74059009773753e-05*G0_6_1 - 0.000130715845001621*G0_6_2 + 4.59064744779249e-05*G0_6_3 + 0.000134523214880421*G0_6_4 - 0.00111781076066843*G0_6_5 + 0.000545213714856828*G0_6_6 - 0.000935240354883652*G0_6_7 + 0.000415373317159227*G0_6_8 - 0.000453475096332453*G0_6_9 + 0.000819370774728302*G0_7_0 + 0.000259310795025203*G0_7_1 + 0.00022964304214315*G0_7_2 - 0.000180429689358346*G0_7_3 - 0.000188368179439697*G0_7_4 + 0.0018704807097673*G0_7_5 - 0.000935240354883652*G0_7_6 + 0.00279840695019398*G0_7_7 - 0.00111781076066843*G0_7_8 + 0.0011159376337953*G0_7_9 - 0.000379256986400022*G0_8_0 - 0.000130715845001621*G0_8_1 - 9.74059009773754e-05*G0_8_2 + 0.000134523214880421*G0_8_3 + 4.59064744779248e-05*G0_8_4 - 0.000935240354883652*G0_8_5 + 0.000415373317159227*G0_8_6 - 0.00111781076066843*G0_8_7 + 0.000545213714856829*G0_8_8 - 0.000453475096332453*G0_8_9 + 0.000251514358657334*G0_9_0 + 0.000120554049125534*G0_9_1 + 0.000120554049125534*G0_9_2 + 0.0011159376337953*G0_9_5 - 0.000453475096332453*G0_9_6 + 0.0011159376337953*G0_9_7 - 0.000453475096332453*G0_9_8 + 0.00124322106465022*G0_9_9;
    A[144] = A[99] + 0.000687378465156565*G0_0_0 + 0.000134844579289087*G0_0_1 + 2.07200207200306e-05*G0_0_2 + 2.07200207200304e-05*G0_0_3 - 4.14400414400609e-05*G0_0_4 - 6.21600621600921e-05*G0_0_6 + 0.0016280016280024*G0_0_7 - 0.000565360565360832*G0_0_8 + 0.000124320124320183*G0_0_9 + 0.000134844579289087*G0_1_0 + 0.000128971557543047*G0_1_1 + 1.77600177600261e-05*G0_1_2 + 7.56915042629684e-05*G0_1_3 - 5.37029108457932e-05*G0_1_4 + 2.07200207200305e-05*G0_1_5 - 4.14400414400611e-05*G0_1_6 + 0.000372960372960548*G0_1_7 - 2.02971631543153e-05*G0_1_8 + 5.58171986743677e-05*G0_1_9 + 2.07200207200306e-05*G0_2_0 + 1.77600177600261e-05*G0_2_1 + 2.96000296000439e-06*G0_2_2 + 3.04457447314733e-05*G0_2_3 - 3.04457447314733e-05*G0_2_4 - 2.07200207200305e-05*G0_2_5 - 2.07200207200306e-05*G0_2_6 + 0.000207200207200305*G0_2_7 - 2.11428782857455e-05*G0_2_8 + 6.8502925645815e-05*G0_2_9 + 2.07200207200304e-05*G0_3_0 + 7.56915042629684e-05*G0_3_1 + 3.04457447314733e-05*G0_3_2 + 0.00031968031968047*G0_3_3 - 9.13372341944201e-05*G0_3_4 - 0.000186480186480275*G0_3_7 + 0.000247371675943221*G0_3_8 + 0.000205508776937445*G0_3_9 - 4.14400414400609e-05*G0_4_0 - 5.37029108457932e-05*G0_4_1 - 3.04457447314733e-05*G0_4_2 - 9.13372341944201e-05*G0_4_3 - 2.28343085486049e-05*G0_4_4 - 0.000186480186480274*G0_4_7 - 6.08914894629467e-05*G0_4_8 - 0.000205508776937445*G0_4_9 + 2.07200207200304e-05*G0_5_1 - 2.07200207200305e-05*G0_5_2 - 0.000932400932401369*G0_5_5 + 0.000186480186480274*G0_5_6 + 0.000932400932401373*G0_5_7 - 0.000186480186480274*G0_5_8 - 6.21600621600921e-05*G0_6_0 - 4.1440041440061e-05*G0_6_1 - 2.07200207200307e-05*G0_6_2 + 0.000186480186480274*G0_6_5 - 3.04457447314728e-05*G0_6_6 - 0.000745920745921099*G0_6_7 + 0.000156034441748802*G0_6_8 - 0.000205508776937445*G0_6_9 + 0.0016280016280024*G0_7_0 + 0.000372960372960548*G0_7_1 + 0.000207200207200305*G0_7_2 - 0.000186480186480275*G0_7_3 - 0.000186480186480274*G0_7_4 + 0.000932400932401373*G0_7_5 - 0.000745920745921099*G0_7_6 + 0.00839160839161233*G0_7_7 - 0.00223776223776329*G0_7_8 + 0.00111888111888164*G0_7_9 - 0.000565360565360832*G0_8_0 - 2.02971631543153e-05*G0_8_1 - 2.11428782857455e-05*G0_8_2 + 0.000247371675943221*G0_8_3 - 6.08914894629467e-05*G0_8_4 - 0.000186480186480274*G0_8_5 + 0.000156034441748802*G0_8_6 - 0.00223776223776329*G0_8_7 + 0.00114171542743025*G0_8_8 - 4.56686170972105e-05*G0_8_9 + 0.000124320124320183*G0_9_0 + 5.58171986743677e-05*G0_9_1 + 6.8502925645815e-05*G0_9_2 + 0.000205508776937445*G0_9_3 - 0.000205508776937445*G0_9_4 - 0.000205508776937445*G0_9_6 + 0.00111888111888165*G0_9_7 - 4.56686170972105e-05*G0_9_8 + 0.00041101755387489*G0_9_9;
    A[176] = A[144] - 0.00121068819481575*G0_0_0 - 6.44622866845392e-05*G0_0_2 + 0.000248640248640366*G0_0_3 - 7.61143618286832e-05*G0_0_4 - 0.000757760757761113*G0_0_5 + 0.000368731797303399*G0_0_6 - 0.0025726654298095*G0_0_7 + 0.0015628815628823*G0_0_8 - 0.000192823049965998*G0_0_9 + 0.00121068819481575*G0_1_1 + 6.44622866845393e-05*G0_1_2 + 0.000757760757761114*G0_1_3 - 0.000368731797303399*G0_1_4 - 0.000248640248640366*G0_1_5 + 7.61143618286835e-05*G0_1_6 - 0.0015628815628823*G0_1_7 + 0.0025726654298095*G0_1_8 + 0.000192823049965998*G0_1_9 - 6.44622866845392e-05*G0_2_0 + 6.44622866845393e-05*G0_2_1 + 0.000213120213120313*G0_2_3 - 8.11886526172621e-05*G0_2_4 - 0.000213120213120313*G0_2_5 + 8.11886526172624e-05*G0_2_6 - 0.000553097695955099*G0_2_7 + 0.000553097695955099*G0_2_8 + 0.000248640248640366*G0_3_0 + 0.000757760757761114*G0_3_1 + 0.000213120213120313*G0_3_2 + 0.00133961276818483*G0_3_3 - 0.000806812235384042*G0_3_4 - 0.00022834308548605*G0_3_6 - 0.000745920745921096*G0_3_7 + 0.00240521383378639*G0_3_8 + 0.000913372341944199*G0_3_9 - 7.61143618286832e-05*G0_4_0 - 0.000368731797303399*G0_4_1 - 8.11886526172621e-05*G0_4_2 - 0.000806812235384043*G0_4_3 + 0.000334903192046207*G0_4_4 + 0.00022834308548605*G0_4_5 + 0.000943818086675673*G0_4_7 - 0.0016592930878653*G0_4_8 - 0.000456686170972099*G0_4_9 - 0.000757760757761113*G0_5_0 - 0.000248640248640366*G0_5_1 - 0.000213120213120313*G0_5_2 + 0.00022834308548605*G0_5_4 - 0.00133961276818483*G0_5_5 + 0.000806812235384043*G0_5_6 - 0.00240521383378639*G0_5_7 + 0.000745920745921096*G0_5_8 - 0.0009133723419442*G0_5_9 + 0.000368731797303399*G0_6_0 + 7.61143618286835e-05*G0_6_1 + 8.11886526172624e-05*G0_6_2 - 0.00022834308548605*G0_6_3 + 0.000806812235384043*G0_6_5 - 0.000334903192046207*G0_6_6 + 0.0016592930878653*G0_6_7 - 0.000943818086675674*G0_6_8 + 0.000456686170972101*G0_6_9 - 0.0025726654298095*G0_7_0 - 0.0015628815628823*G0_7_1 - 0.000553097695955099*G0_7_2 - 0.000745920745921096*G0_7_3 + 0.000943818086675673*G0_7_4 - 0.00240521383378639*G0_7_5 + 0.0016592930878653*G0_7_6 - 0.00949907235621967*G0_7_7 - 0.0027401170258326*G0_7_9 + 0.0015628815628823*G0_8_0 + 0.0025726654298095*G0_8_1 + 0.000553097695955099*G0_8_2 + 0.00240521383378639*G0_8_3 - 0.0016592930878653*G0_8_4 + 0.000745920745921096*G0_8_5 - 0.000943818086675674*G0_8_6 + 0.00949907235621968*G0_8_8 + 0.0027401170258326*G0_8_9 - 0.000192823049965998*G0_9_0 + 0.000192823049965998*G0_9_1 + 0.000913372341944199*G0_9_3 - 0.000456686170972099*G0_9_4 - 0.0009133723419442*G0_9_5 + 0.000456686170972101*G0_9_6 - 0.0027401170258326*G0_9_7 + 0.0027401170258326*G0_9_8;
    A[56] = A[176] - 0.000128971557543047*G0_0_0 - 0.000134844579289087*G0_0_1 - 1.77600177600261e-05*G0_0_2 - 2.07200207200303e-05*G0_0_3 + 4.14400414400608e-05*G0_0_4 - 7.56915042629682e-05*G0_0_5 + 5.37029108457932e-05*G0_0_6 + 2.02971631543158e-05*G0_0_7 - 0.000372960372960548*G0_0_8 - 5.58171986743677e-05*G0_0_9 - 0.000134844579289087*G0_1_0 - 0.000687378465156567*G0_1_1 - 2.07200207200305e-05*G0_1_2 + 6.21600621600913e-05*G0_1_4 - 2.07200207200303e-05*G0_1_5 + 4.14400414400609e-05*G0_1_6 + 0.000565360565360832*G0_1_7 - 0.00162800162800239*G0_1_8 - 0.000124320124320183*G0_1_9 - 1.77600177600261e-05*G0_2_0 - 2.07200207200305e-05*G0_2_1 - 2.96000296000432e-06*G0_2_2 + 2.07200207200304e-05*G0_2_3 + 2.07200207200305e-05*G0_2_4 - 3.04457447314733e-05*G0_2_5 + 3.04457447314733e-05*G0_2_6 + 2.11428782857454e-05*G0_2_7 - 0.000207200207200305*G0_2_8 - 6.85029256458148e-05*G0_2_9 - 2.07200207200303e-05*G0_3_0 + 2.07200207200304e-05*G0_3_2 + 0.000932400932401371*G0_3_3 - 0.000186480186480274*G0_3_4 + 0.000186480186480274*G0_3_7 - 0.000932400932401368*G0_3_8 + 4.14400414400608e-05*G0_4_0 + 6.21600621600913e-05*G0_4_1 + 2.07200207200305e-05*G0_4_2 - 0.000186480186480274*G0_4_3 + 3.04457447314731e-05*G0_4_4 - 0.000156034441748801*G0_4_7 + 0.000745920745921097*G0_4_8 + 0.000205508776937445*G0_4_9 - 7.56915042629682e-05*G0_5_0 - 2.07200207200303e-05*G0_5_1 - 3.04457447314733e-05*G0_5_2 - 0.00031968031968047*G0_5_5 + 9.13372341944199e-05*G0_5_6 - 0.000247371675943221*G0_5_7 + 0.000186480186480275*G0_5_8 - 0.000205508776937445*G0_5_9 + 5.37029108457932e-05*G0_6_0 + 4.14400414400609e-05*G0_6_1 + 3.04457447314733e-05*G0_6_2 + 9.13372341944199e-05*G0_6_5 + 2.28343085486049e-05*G0_6_6 + 6.08914894629467e-05*G0_6_7 + 0.000186480186480274*G0_6_8 + 0.000205508776937445*G0_6_9 + 2.02971631543157e-05*G0_7_0 + 0.000565360565360832*G0_7_1 + 2.11428782857454e-05*G0_7_2 + 0.000186480186480274*G0_7_3 - 0.000156034441748801*G0_7_4 - 0.000247371675943221*G0_7_5 + 6.08914894629467e-05*G0_7_6 - 0.00114171542743025*G0_7_7 + 0.00223776223776329*G0_7_8 + 4.56686170972094e-05*G0_7_9 - 0.000372960372960548*G0_8_0 - 0.00162800162800239*G0_8_1 - 0.000207200207200305*G0_8_2 - 0.000932400932401368*G0_8_3 + 0.000745920745921097*G0_8_4 + 0.000186480186480275*G0_8_5 + 0.000186480186480274*G0_8_6 + 0.00223776223776329*G0_8_7 - 0.00839160839161234*G0_8_8 - 0.00111888111888164*G0_8_9 - 5.58171986743676e-05*G0_9_0 - 0.000124320124320183*G0_9_1 - 6.85029256458148e-05*G0_9_2 + 0.000205508776937445*G0_9_4 - 0.000205508776937445*G0_9_5 + 0.000205508776937445*G0_9_6 + 4.56686170972094e-05*G0_9_7 - 0.00111888111888164*G0_9_8 - 0.00041101755387489*G0_9_9;
    A[117] = -A[56] - 0.000204663061806015*G0_0_0 + 2.06965286330463e-05*G0_0_1 + 8.45715131429817e-06*G0_0_2 + 0.000286908858337565*G0_0_3 - 3.59428930857671e-06*G0_0_4 - 0.000725412153983923*G0_0_5 + 0.0001460972889545*G0_0_6 - 0.000509966224252178*G0_0_7 + 0.000516943374086474*G0_0_8 - 9.26058068915656e-05*G0_0_9 + 2.06965286330463e-05*G0_1_0 + 0.00069710418916801*G0_1_1 + 6.04451398102476e-05*G0_1_2 + 0.000722663579806777*G0_1_3 - 0.000267457410314679*G0_1_4 - 5.30686244972204e-05*G0_1_5 + 0.000243777386634644*G0_1_6 - 0.000556691985263675*G0_1_7 + 0.00084444655873267*G0_1_8 + 0.000454149025577811*G0_1_9 + 8.45715131429818e-06*G0_2_0 + 6.04451398102477e-05*G0_2_1 + 9.13372341944201e-05*G0_2_2 + 0.000242931671503214*G0_2_3 - 7.6114361828682e-06*G0_2_4 - 0.000417148988577756*G0_2_5 + 0.000104234389948725*G0_2_6 - 0.000437446151732071*G0_2_7 + 0.000355411783983379*G0_2_8 - 0.000320948892377614*G0_2_9 + 0.000286908858337565*G0_3_0 + 0.000722663579806777*G0_3_1 + 0.000242931671503214*G0_3_2 + 0.00313971742543318*G0_3_3 - 0.00144427001569927*G0_3_4 - 0.000340611769183358*G0_3_5 - 0.000751629323058248*G0_3_6 - 0.000881023738167009*G0_3_7 + 0.00196755625327146*G0_3_8 + 0.000399600399600586*G0_3_9 - 3.59428930857671e-06*G0_4_0 - 0.000267457410314679*G0_4_1 - 7.6114361828682e-06*G0_4_2 - 0.00144427001569927*G0_4_3 + 0.00171257314114537*G0_4_4 - 9.51429522858561e-06*G0_4_5 + 0.000761143618286833*G0_4_6 + 0.000671709243138129*G0_4_7 - 0.00108653251510445*G0_4_8 + 0.000981875267590013*G0_4_9 - 0.000725412153983923*G0_5_0 - 5.30686244972204e-05*G0_5_1 - 0.000417148988577756*G0_5_2 - 0.000340611769183358*G0_5_3 - 9.51429522858556e-06*G0_5_4 + 0.00034251462822908*G0_5_5 + 0.00143856143856211*G0_5_6 - 0.00143095000237924*G0_5_7 + 0.000138908710337345*G0_5_8 + 0.0001460972889545*G0_6_0 + 0.000243777386634644*G0_6_1 + 0.000104234389948725*G0_6_2 - 0.000751629323058248*G0_6_3 + 0.000761143618286833*G0_6_4 + 0.00143856143856211*G0_6_5 + 0.00116454973597886*G0_6_6 + 0.0012920412920419*G0_6_7 - 0.000888635174349877*G0_6_8 + 0.00246610532324934*G0_6_9 - 0.000509966224252178*G0_7_0 - 0.000556691985263675*G0_7_1 - 0.000437446151732071*G0_7_2 - 0.000881023738167009*G0_7_3 + 0.000671709243138129*G0_7_4 - 0.00143095000237924*G0_7_5 + 0.0012920412920419*G0_7_6 - 0.00267161410018678*G0_7_7 - 0.000279720279720412*G0_7_8 - 0.0023062651634091*G0_7_9 + 0.000516943374086474*G0_8_0 + 0.00084444655873267*G0_8_1 + 0.000355411783983379*G0_8_2 + 0.00196755625327146*G0_8_3 - 0.00108653251510445*G0_8_4 + 0.000138908710337345*G0_8_5 - 0.000888635174349877*G0_8_6 - 0.000279720279720412*G0_8_7 + 0.00245468816897504*G0_8_8 + 0.000810617953475476*G0_8_9 - 9.26058068915656e-05*G0_9_0 + 0.000454149025577811*G0_9_1 - 0.000320948892377614*G0_9_2 + 0.000399600399600586*G0_9_3 + 0.000981875267590013*G0_9_4 + 0.00246610532324934*G0_9_6 - 0.0023062651634091*G0_9_7 + 0.000810617953475476*G0_9_8 + 0.00369915798487402*G0_9_9;
    A[199] = A[117] + 0.000249485963771795*G0_0_0 - 9.51429522858545e-06*G0_0_2 - 9.13372341944195e-05*G0_0_3 + 0.000171257314114537*G0_0_4 + 0.000614623471766617*G0_0_5 - 5.32800532800781e-05*G0_0_6 + 0.00043004614433206*G0_0_7 - 0.000449074734789231*G0_0_8 + 0.000422434708149194*G0_0_9 - 0.000249485963771795*G0_1_1 + 9.51429522858535e-06*G0_1_2 - 0.000614623471766618*G0_1_3 + 5.32800532800783e-05*G0_1_4 + 9.13372341944195e-05*G0_1_5 - 0.000171257314114537*G0_1_6 + 0.000449074734789231*G0_1_7 - 0.000430046144332061*G0_1_8 - 0.000422434708149194*G0_1_9 - 9.51429522858545e-06*G0_2_0 + 9.51429522858535e-06*G0_2_1 - 0.000395794681509153*G0_2_3 + 2.09314495028875e-05*G0_2_4 + 0.000395794681509153*G0_2_5 - 2.0931449502888e-05*G0_2_6 + 0.000468103325246402*G0_2_7 - 0.000468103325246402*G0_2_8 - 9.13372341944194e-05*G0_3_0 - 0.000614623471766618*G0_3_1 - 0.000395794681509153*G0_3_2 - 0.000205508776937439*G0_3_3 + 0.00179820179820264*G0_3_4 + 0.000513771942343613*G0_3_6 + 0.000274011702583258*G0_3_7 - 0.00167832167832246*G0_3_8 + 0.000719280719281063*G0_3_9 + 0.000171257314114537*G0_4_0 + 5.32800532800783e-05*G0_4_1 + 2.09314495028875e-05*G0_4_2 + 0.00179820179820264*G0_4_3 - 0.000205508776937443*G0_4_4 - 0.000513771942343613*G0_4_5 - 0.000959040959041409*G0_4_7 + 0.00140430997573921*G0_4_8 + 0.00102754388468723*G0_4_9 + 0.000614623471766617*G0_5_0 + 9.13372341944195e-05*G0_5_1 + 0.000395794681509153*G0_5_2 - 0.000513771942343613*G0_5_4 + 0.000205508776937441*G0_5_5 - 0.00179820179820264*G0_5_6 + 0.00167832167832246*G0_5_7 - 0.000274011702583259*G0_5_8 - 0.000719280719281063*G0_5_9 - 5.32800532800781e-05*G0_6_0 - 0.000171257314114537*G0_6_1 - 2.09314495028881e-05*G0_6_2 + 0.000513771942343613*G0_6_3 - 0.00179820179820264*G0_6_5 + 0.000205508776937444*G0_6_6 - 0.00140430997573921*G0_6_7 + 0.000959040959041409*G0_6_8 - 0.00102754388468722*G0_6_9 + 0.00043004614433206*G0_7_0 + 0.000449074734789231*G0_7_1 + 0.000468103325246402*G0_7_2 + 0.000274011702583258*G0_7_3 - 0.000959040959041409*G0_7_4 + 0.00167832167832246*G0_7_5 - 0.00140430997573921*G0_7_6 + 0.00287712287712423*G0_7_7 + 0.00154131582703083*G0_7_9 - 0.000449074734789231*G0_8_0 - 0.000430046144332061*G0_8_1 - 0.000468103325246402*G0_8_2 - 0.00167832167832246*G0_8_3 + 0.00140430997573921*G0_8_4 - 0.000274011702583259*G0_8_5 + 0.00095904095904141*G0_8_6 - 0.00287712287712423*G0_8_8 - 0.00154131582703083*G0_8_9 + 0.000422434708149194*G0_9_0 - 0.000422434708149193*G0_9_1 + 0.000719280719281063*G0_9_3 + 0.00102754388468723*G0_9_4 - 0.000719280719281063*G0_9_5 - 0.00102754388468722*G0_9_6 + 0.00154131582703083*G0_9_7 - 0.00154131582703083*G0_9_8;
    A[214] = A[199] + 3.97486111772013e-05*G0_0_1 - 3.97486111772013e-05*G0_0_2 + 0.000296846011131864*G0_0_3 - 0.000296846011131865*G0_0_4 + 0.000121782978925894*G0_0_5 - 0.000289234574948997*G0_0_6 - 0.000121782978925893*G0_0_7 + 0.000289234574948996*G0_0_8 + 3.97486111772013e-05*G0_1_0 + 0.000296000296000435*G0_1_1 + 0.000829646543932648*G0_1_3 - 0.000563246277532256*G0_1_4 + 6.8502925645815e-05*G0_1_5 - 0.000433851862423495*G0_1_6 - 0.00027401170258326*G0_1_7 + 0.00050235478806931*G0_1_8 - 0.000228343085486049*G0_1_9 - 3.97486111772013e-05*G0_2_0 - 0.000296000296000435*G0_2_2 + 0.000563246277532256*G0_2_3 - 0.000829646543932647*G0_2_4 + 0.00027401170258326*G0_2_5 - 0.00050235478806931*G0_2_6 - 6.85029256458149e-05*G0_2_7 + 0.000433851862423494*G0_2_8 + 0.000228343085486049*G0_2_9 + 0.000296846011131864*G0_3_0 + 0.000829646543932648*G0_3_1 + 0.000563246277532256*G0_3_2 + 0.000822035107749773*G0_3_3 - 0.00054802340516652*G0_3_5 + 0.00130155558727049*G0_3_6 - 0.000890538033395594*G0_3_7 + 0.00219209362066608*G0_3_8 + 0.00246610532324933*G0_3_9 - 0.000296846011131865*G0_4_0 - 0.000563246277532256*G0_4_1 - 0.000829646543932647*G0_4_2 - 0.000822035107749782*G0_4_4 + 0.000890538033395596*G0_4_5 - 0.00219209362066608*G0_4_6 + 0.00054802340516652*G0_4_7 - 0.00130155558727048*G0_4_8 - 0.00246610532324934*G0_4_9 + 0.000121782978925894*G0_5_0 + 6.8502925645815e-05*G0_5_1 + 0.00027401170258326*G0_5_2 - 0.00054802340516652*G0_5_3 + 0.000890538033395596*G0_5_4 - 0.000685029256458151*G0_5_5 + 0.00116454973597886*G0_5_6 - 0.000205508776937445*G0_5_8 + 0.000411017553874891*G0_5_9 - 0.000289234574948997*G0_6_0 - 0.000433851862423495*G0_6_1 - 0.00050235478806931*G0_6_2 + 0.00130155558727049*G0_6_3 - 0.00219209362066608*G0_6_4 + 0.00116454973597886*G0_6_5 - 0.00438418724133216*G0_6_6 + 0.000205508776937446*G0_6_7 - 0.00328814043099912*G0_6_9 - 0.000121782978925893*G0_7_0 - 0.00027401170258326*G0_7_1 - 6.85029256458149e-05*G0_7_2 - 0.000890538033395594*G0_7_3 + 0.00054802340516652*G0_7_4 + 0.000205508776937446*G0_7_6 + 0.000685029256458149*G0_7_7 - 0.00116454973597885*G0_7_8 - 0.000411017553874888*G0_7_9 + 0.000289234574948996*G0_8_0 + 0.00050235478806931*G0_8_1 + 0.000433851862423494*G0_8_2 + 0.00219209362066608*G0_8_3 - 0.00130155558727048*G0_8_4 - 0.000205508776937445*G0_8_5 - 0.00116454973597885*G0_8_7 + 0.00438418724133216*G0_8_8 + 0.00328814043099911*G0_8_9 - 0.000228343085486049*G0_9_1 + 0.000228343085486049*G0_9_2 + 0.00246610532324933*G0_9_3 - 0.00246610532324934*G0_9_4 + 0.000411017553874891*G0_9_5 - 0.00328814043099912*G0_9_6 - 0.000411017553874888*G0_9_7 + 0.00328814043099911*G0_9_8;
    A[163] = A[199] + 4.65143322286396e-05*G0_0_0 + 4.92629064057868e-05*G0_0_1 - 0.000308263165406168*G0_0_3 - 0.00013700585129163*G0_0_4 + 0.000194091622663142*G0_0_5 - 0.000114171542743025*G0_0_6 + 9.32400932401372e-05*G0_0_7 - 0.000220731649303182*G0_0_8 - 0.000650777793635244*G0_0_9 + 4.92629064057868e-05*G0_1_0 - 4.92629064057867e-05*G0_1_2 + 0.000306360306360451*G0_1_3 + 0.000106560106560157*G0_1_4 + 3.42514628229075e-05*G0_1_5 - 3.42514628229074e-05*G0_1_6 - 0.000106560106560157*G0_1_7 - 0.00030636030636045*G0_1_8 - 4.92629064057867e-05*G0_2_1 - 4.65143322286397e-05*G0_2_2 + 0.000220731649303181*G0_2_3 - 9.32400932401367e-05*G0_2_4 + 0.000114171542743025*G0_2_5 - 0.000194091622663142*G0_2_6 + 0.00013700585129163*G0_2_7 + 0.000308263165406167*G0_2_8 + 0.000650777793635242*G0_2_9 - 0.000308263165406168*G0_3_0 + 0.000306360306360451*G0_3_1 + 0.000220731649303181*G0_3_2 - 0.00335664335664494*G0_3_3 - 0.000633652062223787*G0_3_4 + 0.00041101755387489*G0_3_5 + 0.000102754388468723*G0_3_6 + 0.000924789496218505*G0_3_7 - 0.00184957899243701*G0_3_9 - 0.00013700585129163*G0_4_0 + 0.000106560106560157*G0_4_1 - 9.32400932401367e-05*G0_4_2 - 0.000633652062223787*G0_4_3 - 0.00130155558727049*G0_4_4 + 0.00041101755387489*G0_4_5 - 0.000513771942343613*G0_4_6 - 0.000924789496218501*G0_4_8 - 0.00277436848865551*G0_4_9 + 0.000194091622663142*G0_5_0 + 3.42514628229075e-05*G0_5_1 + 0.000114171542743025*G0_5_2 + 0.00041101755387489*G0_5_3 + 0.00041101755387489*G0_5_4 + 0.000822035107749779*G0_5_5 + 0.000513771942343612*G0_5_7 - 0.000102754388468722*G0_5_8 + 0.00215784215784317*G0_5_9 - 0.000114171542743025*G0_6_0 - 3.42514628229074e-05*G0_6_1 - 0.000194091622663142*G0_6_2 + 0.000102754388468723*G0_6_3 - 0.000513771942343613*G0_6_4 - 0.000822035107749779*G0_6_6 - 0.00041101755387489*G0_6_7 - 0.00041101755387489*G0_6_8 - 0.00215784215784317*G0_6_9 + 9.32400932401372e-05*G0_7_0 - 0.000106560106560157*G0_7_1 + 0.00013700585129163*G0_7_2 + 0.000924789496218505*G0_7_3 + 0.000513771942343612*G0_7_5 - 0.00041101755387489*G0_7_6 + 0.00130155558727048*G0_7_7 + 0.000633652062223791*G0_7_8 + 0.00277436848865551*G0_7_9 - 0.000220731649303182*G0_8_0 - 0.00030636030636045*G0_8_1 + 0.000308263165406167*G0_8_2 - 0.000924789496218501*G0_8_4 - 0.000102754388468722*G0_8_5 - 0.00041101755387489*G0_8_6 + 0.00063365206222379*G0_8_7 + 0.00335664335664493*G0_8_8 + 0.001849578992437*G0_8_9 - 0.000650777793635244*G0_9_0 + 0.000650777793635242*G0_9_2 - 0.00184957899243701*G0_9_3 - 0.00277436848865551*G0_9_4 + 0.00215784215784317*G0_9_5 - 0.00215784215784317*G0_9_6 + 0.00277436848865551*G0_9_7 + 0.001849578992437*G0_9_8;
    A[205] = A[163];
    A[72] = A[202] - 7.10400710401043e-05*G0_0_0 + 7.40000740001094e-06*G0_0_2 - 2.28343085486056e-05*G0_0_3 - 0.000102754388468722*G0_0_4 - 0.00021502307216603*G0_0_5 - 3.80571809143416e-05*G0_0_6 - 0.000102754388468722*G0_0_7 + 9.13372341944195e-05*G0_0_8 - 0.000262594548308958*G0_0_9 + 7.10400710401044e-05*G0_1_1 - 7.40000740001084e-06*G0_1_2 + 0.00021502307216603*G0_1_3 + 3.8057180914342e-05*G0_1_4 + 2.28343085486049e-05*G0_1_5 + 0.000102754388468723*G0_1_6 - 9.13372341944199e-05*G0_1_7 + 0.000102754388468722*G0_1_8 + 0.000262594548308958*G0_1_9 + 7.40000740001094e-06*G0_2_0 - 7.40000740001085e-06*G0_2_1 + 0.000129394415108761*G0_2_3 + 0.000112268683697309*G0_2_4 - 0.000129394415108762*G0_2_5 - 0.000112268683697307*G0_2_6 - 7.99200799201173e-05*G0_2_7 + 7.99200799201171e-05*G0_2_8 - 2.28343085486056e-05*G0_3_0 + 0.00021502307216603*G0_3_1 + 0.000129394415108761*G0_3_2 - 0.000548023405166524*G0_3_3 - 0.000804909376338325*G0_3_4 - 0.000308263165406168*G0_3_6 + 6.85029256458168e-05*G0_3_7 + 0.000171257314114534*G0_3_8 - 0.000924789496218507*G0_3_9 - 0.000102754388468722*G0_4_0 + 3.8057180914342e-05*G0_4_1 + 0.000112268683697309*G0_4_2 - 0.000804909376338325*G0_4_3 - 0.000753532182103966*G0_4_4 + 0.000308263165406167*G0_4_5 + 0.00027401170258326*G0_4_7 - 0.000239760239760351*G0_4_8 - 0.000616526330812333*G0_4_9 - 0.00021502307216603*G0_5_0 + 2.28343085486049e-05*G0_5_1 - 0.000129394415108762*G0_5_2 + 0.000308263165406167*G0_5_4 + 0.00054802340516652*G0_5_5 + 0.000804909376338324*G0_5_6 - 0.000171257314114537*G0_5_7 - 6.85029256458147e-05*G0_5_8 + 0.000924789496218504*G0_5_9 - 3.80571809143416e-05*G0_6_0 + 0.000102754388468723*G0_6_1 - 0.000112268683697307*G0_6_2 - 0.000308263165406168*G0_6_3 + 0.000804909376338324*G0_6_5 + 0.000753532182103967*G0_6_6 + 0.000239760239760352*G0_6_7 - 0.00027401170258326*G0_6_8 + 0.000616526330812337*G0_6_9 - 0.000102754388468722*G0_7_0 - 9.13372341944199e-05*G0_7_1 - 7.99200799201173e-05*G0_7_2 + 6.85029256458168e-05*G0_7_3 + 0.00027401170258326*G0_7_4 - 0.000171257314114537*G0_7_5 + 0.000239760239760352*G0_7_6 - 0.000205508776937445*G0_7_7 + 0.00030826316540617*G0_7_9 + 9.13372341944195e-05*G0_8_0 + 0.000102754388468722*G0_8_1 + 7.99200799201171e-05*G0_8_2 + 0.000171257314114534*G0_8_3 - 0.000239760239760351*G0_8_4 - 6.85029256458147e-05*G0_8_5 - 0.00027401170258326*G0_8_6 + 0.000205508776937442*G0_8_8 - 0.000308263165406172*G0_8_9 - 0.000262594548308958*G0_9_0 + 0.000262594548308958*G0_9_1 - 0.000924789496218507*G0_9_3 - 0.000616526330812333*G0_9_4 + 0.000924789496218504*G0_9_5 + 0.000616526330812336*G0_9_6 + 0.00030826316540617*G0_9_7 - 0.000308263165406172*G0_9_8;
    A[107] = 4.33825433825637e-05*G0_0_0 + 1.93589479303855e-06*G0_0_1 - 2.99083632417107e-05*G0_0_2 + 6.14464900179474e-06*G0_0_3 - 1.30623344909121e-05*G0_0_4 + 6.57675657675966e-05*G0_0_5 - 6.25564911279491e-05*G0_0_6 + 3.31414617129059e-05*G0_0_7 - 1.76410890696688e-05*G0_0_8 + 1.93589479303855e-06*G0_1_0 - 2.26933560267e-05*G0_1_2 + 5.7283985855441e-06*G0_1_3 - 1.66301952016316e-05*G0_1_4 + 2.54705611848589e-05*G0_1_5 - 2.55498469784304e-05*G0_1_6 + 1.44101929816283e-05*G0_1_7 - 9.31608074465657e-06*G0_1_8 + 1.15360829646598e-05*G0_1_9 - 2.99083632417107e-05*G0_2_0 - 2.26933560267e-05*G0_2_1 - 0.000474525474525699*G0_2_2 + 0.000102675102675151*G0_2_3 - 0.000213675213675314*G0_2_4 + 0.000174825174825257*G0_2_5 - 0.000357975357975527*G0_2_6 + 2.38650238650352e-05*G0_2_7 + 2.22000222000319e-06*G0_2_8 - 3.3300033300049e-05*G0_2_9 + 6.14464900179474e-06*G0_3_0 + 5.7283985855441e-06*G0_3_1 + 0.000102675102675151*G0_3_2 - 4.28143285286344e-05*G0_3_3 + 7.49250749251102e-05*G0_3_4 - 5.28043385186491e-05*G0_3_5 + 8.74125874126286e-05*G0_3_6 - 7.67090052804701e-06*G0_3_7 + 3.56786071071947e-06*G0_3_8 - 1.92664478378855e-05*G0_3_9 - 1.30623344909121e-05*G0_4_0 - 1.66301952016316e-05*G0_4_1 - 0.000213675213675314*G0_4_2 + 7.49250749251102e-05*G0_4_3 - 0.000112387612387665*G0_4_4 + 4.99500499500735e-05*G0_4_5 - 0.000137362637362702*G0_4_6 - 2.15855572998531e-05*G0_4_7 + 4.10303981732748e-06*G0_4_8 + 6.57675657675966e-05*G0_5_0 + 2.54705611848589e-05*G0_5_1 + 0.000174825174825257*G0_5_2 - 5.28043385186491e-05*G0_5_3 + 4.99500499500735e-05*G0_5_4 + 0.000181960896246696*G0_5_5 + 0.000112387612387665*G0_5_6 + 0.000126480662195007*G0_5_7 - 6.56486370772392e-05*G0_5_8 + 0.000130583702012335*G0_5_9 - 6.25564911279491e-05*G0_6_0 - 2.55498469784304e-05*G0_6_1 - 0.000357975357975527*G0_6_2 + 8.74125874126286e-05*G0_6_3 - 0.000137362637362702*G0_6_4 + 0.000112387612387665*G0_6_5 - 0.000487012987013216*G0_6_6 - 6.08320251177678e-05*G0_6_7 + 2.96132438989721e-05*G0_6_8 - 7.49250749251102e-05*G0_6_9 + 3.31414617129059e-05*G0_7_0 + 1.44101929816283e-05*G0_7_1 + 2.38650238650352e-05*G0_7_2 - 7.67090052804701e-06*G0_7_3 - 2.15855572998531e-05*G0_7_4 + 0.000126480662195007*G0_7_5 - 6.08320251177678e-05*G0_7_6 + 0.000194448408734214*G0_7_7 - 5.44098758384728e-05*G0_7_8 + 0.000120950478093392*G0_7_9 - 1.76410890696688e-05*G0_8_0 - 9.31608074465657e-06*G0_8_1 + 2.22000222000319e-06*G0_8_2 + 3.56786071071947e-06*G0_8_3 + 4.10303981732748e-06*G0_8_4 - 6.56486370772392e-05*G0_8_5 + 2.96132438989721e-05*G0_8_6 - 5.44098758384728e-05*G0_8_7 + 3.71057513914829e-05*G0_8_8 - 4.28143285286345e-05*G0_8_9 + 1.15360829646598e-05*G0_9_1 - 3.3300033300049e-05*G0_9_2 - 1.92664478378855e-05*G0_9_3 + 0.000130583702012335*G0_9_5 - 7.49250749251102e-05*G0_9_6 + 0.000120950478093392*G0_9_7 - 4.28143285286345e-05*G0_9_8 + 0.000218353075496035*G0_9_9;
    A[36] = -A[107] - 2.41630797186467e-05*G0_0_0 - 2.36359760169395e-05*G0_0_2 - 5.74161288447273e-06*G0_0_4 - 4.26953998382771e-05*G0_0_5 - 4.83643340786421e-06*G0_0_6 - 1.78657321514548e-05*G0_0_7 + 7.78322206893999e-06*G0_0_8 - 1.81564467278838e-05*G0_0_9 - 1.37957280814489e-05*G0_1_2 - 6.93089978804589e-06*G0_1_4 + 7.57840043554686e-06*G0_1_5 - 8.71483014340567e-06*G0_1_6 + 2.70893128036128e-07*G0_1_7 - 3.56786071071976e-07*G0_1_9 - 2.36359760169395e-05*G0_2_0 - 1.37957280814489e-05*G0_2_1 - 0.000263625263625388*G0_2_2 + 5.45750545750802e-05*G0_2_3 - 0.000111925111925164*G0_2_4 + 7.86250786251156e-05*G0_2_5 - 0.000193325193325284*G0_2_6 + 4.30786145072066e-06*G0_2_7 - 2.22000222000327e-05*G0_2_9 + 5.45750545750802e-05*G0_3_2 - 2.18828790257465e-05*G0_3_3 + 4.59064744779246e-05*G0_3_4 - 3.09214594929026e-05*G0_3_5 + 4.65011179297112e-05*G0_3_6 - 2.14071642643172e-06*G0_3_9 - 5.74161288447273e-06*G0_4_0 - 6.93089978804589e-06*G0_4_1 - 0.000111925111925164*G0_4_2 + 4.59064744779246e-05*G0_4_3 - 7.57575757576114e-05*G0_4_4 + 3.75814661529125e-05*G0_4_5 - 8.40825840826237e-05*G0_4_6 - 8.02768659911888e-06*G0_4_7 - 4.26953998382771e-05*G0_5_0 + 7.57840043554686e-06*G0_5_1 + 7.86250786251156e-05*G0_5_2 - 3.09214594929026e-05*G0_5_3 + 3.75814661529125e-05*G0_5_4 + 1.16550116550171e-05*G0_5_5 + 0.00015472622615487*G0_5_6 - 5.05446934018599e-06*G0_5_7 - 2.37857380714629e-06*G0_5_8 + 5.92264877979442e-05*G0_5_9 - 4.83643340786418e-06*G0_6_0 - 8.71483014340567e-06*G0_6_1 - 0.000193325193325284*G0_6_2 + 4.65011179297112e-05*G0_6_3 - 8.40825840826237e-05*G0_6_4 + 0.00015472622615487*G0_6_5 - 0.000330502830502986*G0_6_6 + 7.4330431473325e-06*G0_6_7 - 7.01679273108179e-06*G0_6_8 - 2.64021692593246e-05*G0_6_9 - 1.78657321514548e-05*G0_7_0 + 2.70893128036132e-07*G0_7_1 + 4.30786145072066e-06*G0_7_2 - 8.02768659911888e-06*G0_7_4 - 5.05446934018596e-06*G0_7_5 + 7.4330431473325e-06*G0_7_6 + 2.84239569953988e-05*G0_7_7 + 1.43309071880569e-05*G0_7_8 + 3.96032538889865e-05*G0_7_9 + 7.78322206893999e-06*G0_8_0 - 2.3785738071463e-06*G0_8_5 - 7.01679273108179e-06*G0_8_6 + 1.43309071880569e-05*G0_8_7 + 6.66000666000961e-06*G0_8_8 - 1.81564467278838e-05*G0_9_0 - 3.56786071071975e-07*G0_9_1 - 2.22000222000327e-05*G0_9_2 - 2.14071642643172e-06*G0_9_3 + 5.92264877979442e-05*G0_9_5 - 2.64021692593245e-05*G0_9_6 + 3.96032538889865e-05*G0_9_7 + 0.000132724418438766*G0_9_9;
    A[21] = A[36] + 1.80066846733598e-05*G0_0_0 + 3.92200392200577e-05*G0_0_5 - 3.16614602329037e-05*G0_0_6 + 1.5857158714311e-07*G0_0_8 - 3.17143174286192e-07*G0_0_9 + 1.847358990217e-05*G0_1_3 - 5.76143433286565e-06*G0_1_5 - 1.0042867185729e-05*G0_1_6 - 5.41786256072229e-06*G0_1_7 + 1.09942967085876e-05*G0_1_8 + 1.42714428428776e-06*G0_1_9 - 0.000228554514268908*G0_2_2 + 5.95172023743733e-05*G0_2_3 - 0.000122364408078752*G0_2_4 + 7.89686503972592e-05*G0_2_5 - 0.000177758749187404*G0_2_6 + 5.41786256072228e-06*G0_2_7 - 3.45686059971938e-05*G0_2_9 + 1.847358990217e-05*G0_3_1 + 5.95172023743733e-05*G0_3_2 - 4.59064744779247e-05*G0_3_3 + 5.11393368536467e-05*G0_3_4 - 5.94643451786585e-06*G0_3_5 + 4.68579040007832e-05*G0_3_6 + 4.28143285286344e-06*G0_3_7 - 1.28442985585902e-05*G0_3_9 - 0.000122364408078752*G0_4_2 + 5.11393368536467e-05*G0_4_3 - 6.58864944579541e-05*G0_4_4 + 4.1149326863632e-05*G0_4_5 - 8.80072308644152e-05*G0_4_6 - 4.28143285286339e-06*G0_4_7 + 2.14071642643172e-05*G0_4_9 + 3.92200392200576e-05*G0_5_0 - 5.76143433286566e-06*G0_5_1 + 7.89686503972592e-05*G0_5_2 - 5.94643451786585e-06*G0_5_3 + 4.1149326863632e-05*G0_5_4 - 0.000241900956186785*G0_5_5 + 0.000106322249179442*G0_5_6 - 3.44893202036223e-05*G0_5_7 + 3.40136054421931e-05*G0_5_8 - 6.70757813615276e-05*G0_5_9 - 3.16614602329037e-05*G0_6_0 - 1.0042867185729e-05*G0_6_1 - 0.000177758749187404*G0_6_2 + 4.68579040007832e-05*G0_6_3 - 8.80072308644152e-05*G0_6_4 + 0.000106322249179442*G0_6_5 - 0.000221920936206755*G0_6_6 + 4.7571476142943e-07*G0_6_7 - 1.66500166500252e-06*G0_6_8 + 9.99000999001477e-06*G0_6_9 - 5.41786256072228e-06*G0_7_1 + 5.41786256072228e-06*G0_7_2 + 4.28143285286344e-06*G0_7_3 - 4.28143285286339e-06*G0_7_4 - 3.44893202036224e-05*G0_7_5 + 4.75714761429417e-07*G0_7_6 + 3.44893202036218e-05*G0_7_7 - 4.757147614292e-07*G0_7_8 + 1.58571587143116e-07*G0_8_0 + 1.09942967085876e-05*G0_8_1 + 3.40136054421931e-05*G0_8_5 - 1.66500166500252e-06*G0_8_6 - 4.757147614292e-07*G0_8_7 - 1.18928690357329e-06*G0_8_8 - 4.28143285286335e-06*G0_8_9 - 3.17143174286192e-07*G0_9_0 + 1.42714428428776e-06*G0_9_1 - 3.45686059971938e-05*G0_9_2 - 1.28442985585902e-05*G0_9_3 + 2.14071642643172e-05*G0_9_4 - 6.70757813615276e-05*G0_9_5 + 9.99000999001475e-06*G0_9_6 - 4.28143285286334e-06*G0_9_8 + 8.56286570572652e-06*G0_9_9;
    A[42] = A[21] + 2.35155790711457e-05*G0_0_0 + 2.30985945271768e-05*G0_0_5 - 1.65443022585957e-05*G0_0_6 + 2.531859674718e-05*G0_0_7 + 5.33857676715073e-06*G0_0_8 + 1.77600177600261e-05*G0_0_9 + 8.61572290144124e-06*G0_1_3 + 1.0175010175015e-05*G0_1_5 - 9.14429485858481e-06*G0_1_7 + 1.36900136900201e-05*G0_1_8 + 3.61543218686247e-05*G0_1_9 - 3.53790829981474e-05*G0_2_2 + 1.63328734757384e-05*G0_2_3 - 1.82357325214555e-05*G0_2_4 + 5.8142915285809e-07*G0_2_5 - 3.54143211286243e-06*G0_2_6 - 3.92993250136291e-05*G0_2_7 + 1.2950012950019e-06*G0_2_8 - 4.31314717029205e-05*G0_2_9 + 8.61572290144124e-06*G0_3_1 + 1.63328734757384e-05*G0_3_2 + 1.92664478378855e-05*G0_3_3 - 4.49550449550661e-05*G0_3_4 - 1.45093002235928e-05*G0_3_5 - 9.27643784787076e-06*G0_3_7 - 8.99100899101323e-05*G0_3_9 - 1.82357325214555e-05*G0_4_2 - 4.49550449550661e-05*G0_4_3 + 7.92065077779736e-05*G0_4_4 - 1.66500166500252e-06*G0_4_5 + 1.47471576043075e-05*G0_4_6 + 6.35079206508076e-05*G0_4_7 - 9.2764378478708e-06*G0_4_8 + 0.000132724418438766*G0_4_9 + 2.30985945271768e-05*G0_5_0 + 1.0175010175015e-05*G0_5_1 + 5.8142915285809e-07*G0_5_2 - 1.45093002235928e-05*G0_5_3 - 1.66500166500252e-06*G0_5_4 + 0.000280909566623985*G0_5_5 - 5.94643451786613e-06*G0_5_6 - 7.65900765901123e-05*G0_5_7 - 3.59164644879101e-05*G0_5_8 + 1.85528756957421e-05*G0_5_9 - 1.65443022585957e-05*G0_6_0 - 3.54143211286243e-06*G0_6_2 + 1.47471576043075e-05*G0_6_4 - 5.94643451786613e-06*G0_6_5 - 4.44793301936367e-05*G0_6_6 + 0.000112506541078022*G0_6_7 - 3.09214594929023e-06*G0_6_8 + 0.000155558726987371*G0_6_9 + 2.531859674718e-05*G0_7_0 - 9.14429485858482e-06*G0_7_1 - 3.92993250136291e-05*G0_7_2 - 9.27643784787076e-06*G0_7_3 + 6.35079206508075e-05*G0_7_4 - 7.65900765901124e-05*G0_7_5 + 0.000112506541078022*G0_7_6 - 0.000390799676514145*G0_7_7 + 4.51929023357798e-06*G0_7_8 - 0.000278293135436123*G0_7_9 + 5.33857676715072e-06*G0_8_0 + 1.36900136900201e-05*G0_8_1 + 1.2950012950019e-06*G0_8_2 - 9.2764378478708e-06*G0_8_4 - 3.59164644879101e-05*G0_8_5 - 3.09214594929022e-06*G0_8_6 + 4.51929023357798e-06*G0_8_7 - 4.54307597164952e-05*G0_8_8 - 8.99100899101323e-05*G0_8_9 + 1.77600177600261e-05*G0_9_0 + 3.61543218686247e-05*G0_9_1 - 4.31314717029205e-05*G0_9_2 - 8.99100899101323e-05*G0_9_3 + 0.000132724418438766*G0_9_4 + 1.85528756957421e-05*G0_9_5 + 0.000155558726987371*G0_9_6 - 0.000278293135436123*G0_9_7 - 8.99100899101323e-05*G0_9_8 - 7.70657913515407e-05*G0_9_9;
    A[182] = A[42];
    A[11] = A[165];
    A[51] = -A[21] - 2.28989117878115e-05*G0_0_0 + 8.34262739025035e-06*G0_0_2 + 1.9055019055028e-05*G0_0_3 - 3.49914635629087e-05*G0_0_5 + 3.11328882757601e-05*G0_0_6 - 3.49386063671943e-05*G0_0_7 + 2.5160025160037e-05*G0_0_8 + 9.19715205429919e-06*G0_0_9 + 3.19433652767136e-05*G0_1_1 + 1.40864426578778e-05*G0_1_2 + 4.60914746629246e-05*G0_1_3 - 8.85358028215595e-06*G0_1_5 - 1.99800199800294e-05*G0_1_7 + 3.12386026671887e-05*G0_1_8 + 1.74428745857399e-05*G0_1_9 + 8.34262739025035e-06*G0_2_0 + 1.40864426578778e-05*G0_2_1 + 6.49438744677146e-05*G0_2_2 - 1.09942967085877e-05*G0_2_3 + 7.87572216144016e-05*G0_2_4 - 3.96428967857727e-05*G0_2_5 + 8.62629434058412e-05*G0_2_6 - 1.45621574193072e-05*G0_2_7 + 5.26457669315059e-05*G0_2_9 + 1.9055019055028e-05*G0_3_0 + 4.60914746629246e-05*G0_3_1 - 1.09942967085877e-05*G0_3_2 + 0.000507825507825745*G0_3_3 - 0.000221445221445325*G0_3_4 + 4.51929023357821e-06*G0_3_5 - 7.39736454022517e-05*G0_3_6 - 9.68079539508564e-05*G0_3_7 + 0.000165073022215957*G0_3_8 + 0.000141287284144493*G0_3_9 + 7.87572216144016e-05*G0_4_2 - 0.000221445221445325*G0_4_3 + 0.000149612292469506*G0_4_4 - 5.11393368536466e-05*G0_4_5 + 0.000125112982255898*G0_4_6 + 3.59164644879099e-05*G0_4_7 - 6.82650682651002e-05*G0_4_8 - 5.56586270872244e-05*G0_4_9 - 3.49914635629087e-05*G0_5_0 - 8.85358028215595e-06*G0_5_1 - 3.96428967857727e-05*G0_5_2 + 4.51929023357822e-06*G0_5_3 - 5.11393368536466e-05*G0_5_4 + 0.000120593692022319*G0_5_5 - 9.49050949051392e-05*G0_5_6 + 9.03858046715574e-06*G0_5_7 - 1.30821559393046e-05*G0_5_8 - 1.42714428428826e-06*G0_5_9 + 3.11328882757601e-05*G0_6_0 + 8.62629434058412e-05*G0_6_2 - 7.39736454022517e-05*G0_6_3 + 0.000125112982255898*G0_6_4 - 9.49050949051392e-05*G0_6_5 + 0.000113457970600881*G0_6_6 + 4.04357547214899e-06*G0_6_7 - 1.16550116550172e-05*G0_6_8 - 9.99000999001435e-06*G0_6_9 - 3.49386063671943e-05*G0_7_0 - 1.99800199800294e-05*G0_7_1 - 1.45621574193072e-05*G0_7_2 - 9.68079539508564e-05*G0_7_3 + 3.59164644879099e-05*G0_7_4 + 9.03858046715574e-06*G0_7_5 + 4.04357547214898e-06*G0_7_6 - 2.14071642643234e-06*G0_7_7 - 4.21007563864902e-05*G0_7_8 - 3.56786071071956e-05*G0_7_9 + 2.5160025160037e-05*G0_8_0 + 3.12386026671887e-05*G0_8_1 + 0.000165073022215957*G0_8_3 - 6.82650682651002e-05*G0_8_4 - 1.30821559393046e-05*G0_8_5 - 1.16550116550172e-05*G0_8_6 - 4.21007563864902e-05*G0_8_7 + 9.77593834737148e-05*G0_8_8 + 8.42015127729809e-05*G0_8_9 + 9.19715205429919e-06*G0_9_0 + 1.74428745857399e-05*G0_9_1 + 5.26457669315059e-05*G0_9_2 + 0.000141287284144493*G0_9_3 - 5.56586270872244e-05*G0_9_4 - 1.42714428428826e-06*G0_9_5 - 9.99000999001438e-06*G0_9_6 - 3.56786071071956e-05*G0_9_7 + 8.42015127729809e-05*G0_9_8 + 5.99400599400884e-05*G0_9_9;
    A[32] = 6.98449111147852e-06*G0_0_0 + 2.56228926863968e-06*G0_0_1 + 3.59208692542196e-05*G0_0_2 - 6.23219373219668e-06*G0_0_3 + 1.55862655862729e-05*G0_0_4 - 7.71219521219887e-06*G0_0_5 + 2.37840862840975e-05*G0_0_6 + 1.15790294361776e-06*G0_0_7 + 4.92562992563225e-06*G0_0_9 + 2.56228926863968e-06*G0_1_0 + 6.98449111147853e-06*G0_1_1 + 3.59208692542195e-05*G0_1_2 - 7.71219521219886e-06*G0_1_3 + 2.37840862840975e-05*G0_1_4 - 6.23219373219668e-06*G0_1_5 + 1.55862655862729e-05*G0_1_6 + 1.15790294361778e-06*G0_1_8 + 4.92562992563225e-06*G0_1_9 + 3.59208692542196e-05*G0_2_0 + 3.59208692542195e-05*G0_2_1 + 0.000999386416053553*G0_2_2 - 0.000157134532134606*G0_2_3 + 0.000332306582306739*G0_2_4 - 0.000157134532134607*G0_2_5 + 0.000332306582306739*G0_2_6 - 3.00625300625463e-06*G0_2_7 - 3.00625300625433e-06*G0_2_8 + 3.60750360750532e-05*G0_2_9 - 6.23219373219668e-06*G0_3_0 - 7.71219521219886e-06*G0_3_1 - 0.000157134532134606*G0_3_2 + 7.28438228438572e-05*G0_3_3 - 0.000123834498834557*G0_3_4 + 3.01781551781694e-05*G0_3_5 - 6.97219447219776e-05*G0_3_6 - 4.26656676656874e-06*G0_3_7 + 1.82109557109642e-05*G0_3_8 - 6.24375624375923e-06*G0_3_9 + 1.55862655862729e-05*G0_4_0 + 2.37840862840975e-05*G0_4_1 + 0.000332306582306739*G0_4_2 - 0.000123834498834557*G0_4_3 + 0.00027888777888791*G0_4_4 - 6.97219447219777e-05*G0_4_5 + 0.000139443889443955*G0_4_6 - 7.38844488844844e-06*G0_4_7 - 1.39443889443955e-05*G0_4_8 + 3.1218781218796e-05*G0_4_9 - 7.71219521219887e-06*G0_5_0 - 6.23219373219668e-06*G0_5_1 - 0.000157134532134607*G0_5_2 + 3.01781551781694e-05*G0_5_3 - 6.97219447219777e-05*G0_5_4 + 7.28438228438573e-05*G0_5_5 - 0.000123834498834557*G0_5_6 + 1.82109557109643e-05*G0_5_7 - 4.26656676656879e-06*G0_5_8 - 6.24375624375923e-06*G0_5_9 + 2.37840862840975e-05*G0_6_0 + 1.55862655862729e-05*G0_6_1 + 0.000332306582306739*G0_6_2 - 6.97219447219776e-05*G0_6_3 + 0.000139443889443955*G0_6_4 - 0.000123834498834557*G0_6_5 + 0.000278887778887911*G0_6_6 - 1.39443889443956e-05*G0_6_7 - 7.38844488844832e-06*G0_6_8 + 3.1218781218796e-05*G0_6_9 + 1.15790294361776e-06*G0_7_0 - 3.00625300625463e-06*G0_7_2 - 4.26656676656874e-06*G0_7_3 - 7.38844488844843e-06*G0_7_4 + 1.82109557109643e-05*G0_7_5 - 1.39443889443956e-05*G0_7_6 + 3.45785167213901e-05*G0_7_7 - 1.15806812235438e-05*G0_7_8 + 1.31118881118942e-05*G0_7_9 + 1.15790294361778e-06*G0_8_1 - 3.00625300625433e-06*G0_8_2 + 1.82109557109642e-05*G0_8_3 - 1.39443889443955e-05*G0_8_4 - 4.26656676656879e-06*G0_8_5 - 7.38844488844832e-06*G0_8_6 - 1.15806812235438e-05*G0_8_7 + 3.45785167213901e-05*G0_8_8 + 1.31118881118943e-05*G0_8_9 + 4.92562992563225e-06*G0_9_0 + 4.92562992563225e-06*G0_9_1 + 3.60750360750532e-05*G0_9_2 - 6.24375624375923e-06*G0_9_3 + 3.1218781218796e-05*G0_9_4 - 6.24375624375923e-06*G0_9_5 + 3.1218781218796e-05*G0_9_6 + 1.31118881118942e-05*G0_9_7 + 1.31118881118943e-05*G0_9_8 + 7.49250749251102e-05*G0_9_9;
    A[142] = A[149] - 0.000397133730467249*G0_0_0 - 3.8409562219104e-05*G0_0_1 - 3.77047996095791e-05*G0_0_2 + 2.94943152086148e-05*G0_0_3 - 9.99000999001468e-05*G0_0_4 - 0.000366300366300537*G0_0_5 + 0.000136054421768771*G0_0_6 - 0.000410700410700603*G0_0_7 + 0.000224854510568902*G0_0_8 - 0.000232148803577484*G0_0_9 - 3.8409562219104e-05*G0_1_0 + 2.17419265038416e-05*G0_1_1 - 6.73048292096223e-06*G0_1_2 + 0.000112268683697308*G0_1_3 - 5.8037200894371e-05*G0_1_4 - 5.80372008943709e-05*G0_1_5 + 2.85428856857559e-06*G0_1_6 - 0.00011290297004588*G0_1_7 + 0.000143031571603067*G0_1_8 + 6.27943485086638e-05*G0_1_9 - 3.77047996095791e-05*G0_2_0 - 6.73048292096223e-06*G0_2_1 - 3.77400377400554e-05*G0_2_2 + 6.12086326372328e-05*G0_2_3 - 8.24572253144068e-05*G0_2_5 + 9.8314384028717e-06*G0_2_6 - 8.0871509442976e-05*G0_2_7 + 4.09114694829173e-05*G0_2_8 + 9.5142952285854e-06*G0_2_9 + 2.94943152086148e-05*G0_3_0 + 0.000112268683697308*G0_3_1 + 6.12086326372328e-05*G0_3_2 - 0.000142714428428781*G0_3_3 + 2.8542885685755e-06*G0_3_4 + 2.85428856857562e-06*G0_3_5 + 7.13572142143906e-05*G0_3_6 - 8.56286570572704e-06*G0_3_7 + 5.13771942343614e-05*G0_3_8 - 0.000171257314114537*G0_3_9 - 9.99000999001468e-05*G0_4_0 - 5.8037200894371e-05*G0_4_1 + 2.85428856857548e-06*G0_4_3 - 0.00103325246182437*G0_4_4 + 0.000379620379620558*G0_4_5 - 0.000450977593834948*G0_4_6 + 0.000231197374054626*G0_4_7 - 4.28143285286345e-05*G0_4_8 - 0.000787783644926872*G0_4_9 - 0.000366300366300537*G0_5_0 - 5.80372008943708e-05*G0_5_1 - 8.24572253144068e-05*G0_5_2 + 2.85428856857559e-06*G0_5_3 + 0.000379620379620558*G0_5_4 - 0.000842015127729806*G0_5_5 + 0.000536606250892217*G0_5_6 - 0.000576566290852275*G0_5_7 + 0.00025403168260323*G0_5_8 + 0.000188383045525991*G0_5_9 + 0.000136054421768771*G0_6_0 + 2.85428856857559e-06*G0_6_1 + 9.8314384028717e-06*G0_6_2 + 7.13572142143905e-05*G0_6_3 - 0.000450977593834948*G0_6_4 + 0.000536606250892217*G0_6_5 - 0.000422434708149192*G0_6_6 + 0.000322534608249045*G0_6_7 - 0.000105608677037298*G0_6_8 - 0.000171257314114537*G0_6_9 - 0.000410700410700603*G0_7_0 - 0.00011290297004588*G0_7_1 - 8.0871509442976e-05*G0_7_2 - 8.56286570572705e-06*G0_7_3 + 0.000231197374054626*G0_7_4 - 0.000576566290852275*G0_7_5 + 0.000322534608249045*G0_7_6 - 0.000522334808049338*G0_7_7 + 0.000205508776937445*G0_7_8 + 5.13771942343613e-05*G0_7_9 + 0.000224854510568902*G0_8_0 + 0.000143031571603067*G0_8_1 + 4.09114694829173e-05*G0_8_2 + 5.13771942343615e-05*G0_8_3 - 4.28143285286345e-05*G0_8_4 + 0.00025403168260323*G0_8_5 - 0.000105608677037298*G0_8_6 + 0.000205508776937444*G0_8_7 - 0.000171257314114537*G0_8_8 - 0.000102754388468723*G0_8_9 - 0.000232148803577484*G0_9_0 + 6.27943485086638e-05*G0_9_1 + 9.5142952285854e-06*G0_9_2 - 0.000171257314114537*G0_9_3 - 0.000787783644926872*G0_9_4 + 0.000188383045525991*G0_9_5 - 0.000171257314114537*G0_9_6 + 5.13771942343613e-05*G0_9_7 - 0.000102754388468723*G0_9_8 - 0.000924789496218502*G0_9_9;
    A[94] = A[108] + 2.36800236800346e-05*G0_0_0 - 2.46666913333705e-06*G0_0_2 + 7.61143618286823e-06*G0_0_3 + 3.42514628229076e-05*G0_0_4 + 7.16743573886763e-05*G0_0_5 + 1.26857269714474e-05*G0_0_6 + 3.42514628229074e-05*G0_0_7 - 3.04457447314733e-05*G0_0_8 + 8.75315161029857e-05*G0_0_9 - 2.36800236800353e-05*G0_1_1 + 2.46666913333688e-06*G0_1_2 - 7.16743573886774e-05*G0_1_3 - 1.2685726971447e-05*G0_1_4 - 7.61143618286839e-06*G0_1_5 - 3.42514628229075e-05*G0_1_6 + 3.04457447314734e-05*G0_1_7 - 3.42514628229077e-05*G0_1_8 - 8.7531516102986e-05*G0_1_9 - 2.46666913333705e-06*G0_2_0 + 2.46666913333687e-06*G0_2_1 - 4.31314717029207e-05*G0_2_3 - 3.74228945657695e-05*G0_2_4 + 4.31314717029204e-05*G0_2_5 + 3.74228945657692e-05*G0_2_6 + 2.66400266400392e-05*G0_2_7 - 2.66400266400392e-05*G0_2_8 + 7.61143618286823e-06*G0_3_0 - 7.16743573886774e-05*G0_3_1 - 4.31314717029207e-05*G0_3_2 + 0.000182674468388836*G0_3_3 + 0.00026830312544611*G0_3_4 + 0.000102754388468723*G0_3_6 - 2.28343085486043e-05*G0_3_7 - 5.70857713715136e-05*G0_3_8 + 0.000308263165406167*G0_3_9 + 3.42514628229076e-05*G0_4_0 - 1.2685726971447e-05*G0_4_1 - 3.74228945657695e-05*G0_4_2 + 0.00026830312544611*G0_4_3 + 0.000251177394034654*G0_4_4 - 0.000102754388468722*G0_4_5 - 9.13372341944202e-05*G0_4_7 + 7.99200799201179e-05*G0_4_8 + 0.000205508776937445*G0_4_9 + 7.16743573886763e-05*G0_5_0 - 7.61143618286839e-06*G0_5_1 + 4.31314717029204e-05*G0_5_2 - 0.000102754388468722*G0_5_4 - 0.000182674468388842*G0_5_5 - 0.000268303125446108*G0_5_6 + 5.70857713715121e-05*G0_5_7 + 2.28343085486053e-05*G0_5_8 - 0.000308263165406168*G0_5_9 + 1.26857269714474e-05*G0_6_0 - 3.42514628229075e-05*G0_6_1 + 3.74228945657691e-05*G0_6_2 + 0.000102754388468723*G0_6_3 - 0.000268303125446108*G0_6_5 - 0.000251177394034655*G0_6_6 - 7.99200799201173e-05*G0_6_7 + 9.133723419442e-05*G0_6_8 - 0.000205508776937445*G0_6_9 + 3.42514628229074e-05*G0_7_0 + 3.04457447314734e-05*G0_7_1 + 2.66400266400392e-05*G0_7_2 - 2.28343085486044e-05*G0_7_3 - 9.13372341944202e-05*G0_7_4 + 5.7085771371512e-05*G0_7_5 - 7.99200799201172e-05*G0_7_6 + 6.85029256458145e-05*G0_7_7 - 0.000102754388468722*G0_7_9 - 3.04457447314733e-05*G0_8_0 - 3.42514628229077e-05*G0_8_1 - 2.66400266400392e-05*G0_8_2 - 5.70857713715136e-05*G0_8_3 + 7.99200799201179e-05*G0_8_4 + 2.28343085486053e-05*G0_8_5 + 9.133723419442e-05*G0_8_6 - 6.85029256458159e-05*G0_8_8 + 0.000102754388468722*G0_8_9 + 8.75315161029857e-05*G0_9_0 - 8.7531516102986e-05*G0_9_1 + 0.000308263165406167*G0_9_3 + 0.000205508776937445*G0_9_4 - 0.000308263165406168*G0_9_5 - 0.000205508776937445*G0_9_6 - 0.000102754388468722*G0_9_7 + 0.000102754388468722*G0_9_8;
    A[106] = 3.32691999358822e-05*G0_0_0 + 7.50351940828486e-06*G0_0_1 + 8.45054416483385e-06*G0_0_2 - 9.85125985126449e-06*G0_0_3 + 6.79875679875999e-06*G0_0_4 + 5.44296972868657e-05*G0_0_5 + 4.33693290836351e-05*G0_0_7 - 2.28739514453908e-05*G0_0_8 + 3.21107463964758e-05*G0_0_9 + 7.50351940828486e-06*G0_1_0 + 5.30333863667493e-06*G0_1_1 + 7.50351940828487e-06*G0_1_2 + 3.33000333000512e-06*G0_1_3 + 5.4707197564365e-06*G0_1_4 - 7.47268604411815e-06*G0_1_5 - 7.47268604411817e-06*G0_1_6 + 5.47071975643653e-06*G0_1_7 + 3.3300033300051e-06*G0_1_8 - 7.61143618286834e-06*G0_1_9 + 8.45054416483385e-06*G0_2_0 + 7.50351940828487e-06*G0_2_1 + 3.32691999358823e-05*G0_2_2 - 2.28739514453908e-05*G0_2_3 + 4.33693290836352e-05*G0_2_4 + 5.44296972868657e-05*G0_2_6 + 6.79875679876e-06*G0_2_7 - 9.85125985126448e-06*G0_2_8 + 3.21107463964758e-05*G0_2_9 - 9.85125985126449e-06*G0_3_0 + 3.33000333000512e-06*G0_3_1 - 2.28739514453908e-05*G0_3_2 + 1.62337662337739e-05*G0_3_3 - 4.15655772798825e-05*G0_3_4 + 4.01384329955947e-05*G0_3_5 - 5.88697017268713e-06*G0_3_6 + 1.24875124875182e-06*G0_3_7 - 2.49750249750366e-06*G0_3_8 + 2.03368060511014e-05*G0_3_9 + 6.79875679875999e-06*G0_4_0 + 5.4707197564365e-06*G0_4_1 + 4.33693290836352e-05*G0_4_2 - 4.15655772798825e-05*G0_4_3 + 7.08220351077826e-05*G0_4_4 - 4.87012987013216e-05*G0_4_5 + 5.45882688740088e-05*G0_4_6 - 6.24375624375921e-06*G0_4_7 + 1.24875124875184e-06*G0_4_8 + 1.07035821321579e-06*G0_4_9 + 5.44296972868657e-05*G0_5_0 - 7.47268604411815e-06*G0_5_1 + 4.01384329955947e-05*G0_5_3 - 4.87012987013216e-05*G0_5_4 - 1.26659055230545e-05*G0_5_5 - 0.000166797488226138*G0_5_6 + 5.45882688740089e-05*G0_5_7 - 5.88697017268721e-06*G0_5_8 - 8.4558298844053e-05*G0_5_9 - 7.47268604411817e-06*G0_6_1 + 5.44296972868657e-05*G0_6_2 - 5.88697017268713e-06*G0_6_3 + 5.45882688740088e-05*G0_6_4 - 0.000166797488226138*G0_6_5 - 1.26659055230546e-05*G0_6_6 - 4.87012987013217e-05*G0_6_7 + 4.01384329955948e-05*G0_6_8 - 8.45582988440532e-05*G0_6_9 + 4.33693290836351e-05*G0_7_0 + 5.47071975643653e-06*G0_7_1 + 6.79875679876e-06*G0_7_2 + 1.24875124875182e-06*G0_7_3 - 6.24375624375922e-06*G0_7_4 + 5.45882688740089e-05*G0_7_5 - 4.87012987013217e-05*G0_7_6 + 7.0822035107783e-05*G0_7_7 - 4.15655772798826e-05*G0_7_8 + 1.07035821321603e-06*G0_7_9 - 2.28739514453908e-05*G0_8_0 + 3.3300033300051e-06*G0_8_1 - 9.85125985126448e-06*G0_8_2 - 2.49750249750366e-06*G0_8_3 + 1.24875124875185e-06*G0_8_4 - 5.88697017268721e-06*G0_8_5 + 4.01384329955948e-05*G0_8_6 - 4.15655772798826e-05*G0_8_7 + 1.62337662337739e-05*G0_8_8 + 2.03368060511013e-05*G0_8_9 + 3.21107463964758e-05*G0_9_0 - 7.61143618286834e-06*G0_9_1 + 3.21107463964758e-05*G0_9_2 + 2.03368060511014e-05*G0_9_3 + 1.07035821321579e-06*G0_9_4 - 8.4558298844053e-05*G0_9_5 - 8.45582988440531e-05*G0_9_6 + 1.07035821321603e-06*G0_9_7 + 2.03368060511013e-05*G0_9_8 - 0.000173398030540969*G0_9_9;
    A[101] = -A[158] + 8.04134137467848e-05*G0_0_0 + 1.0031121142237e-05*G0_0_1 + 1.19809643619223e-05*G0_0_2 + 1.13114398828738e-05*G0_0_4 + 0.000119351547923032*G0_0_5 - 3.73171801743404e-05*G0_0_6 - 6.87143544286718e-06*G0_0_7 - 4.49286163572089e-05*G0_0_8 - 2.28343085486051e-05*G0_0_9 + 1.0031121142237e-05*G0_1_0 + 1.37311248422424e-05*G0_1_1 + 3.98190874381539e-06*G0_1_2 - 1.12057254914452e-05*G0_1_3 + 1.13114398828738e-05*G0_1_4 + 6.9665783951531e-05*G0_1_5 - 7.71715057429698e-06*G0_1_6 + 2.11428782857434e-07*G0_1_7 - 5.40200540200795e-05*G0_1_8 - 6.34286348572303e-07*G0_1_9 + 1.19809643619223e-05*G0_2_0 + 3.98190874381539e-06*G0_2_1 + 2.74505036409928e-05*G0_2_2 + 6.02572031143742e-05*G0_2_5 + 1.58571587143104e-06*G0_2_6 + 5.82486296772284e-05*G0_2_7 + 1.51171579743079e-05*G0_2_8 + 0.00010212010212015*G0_2_9 - 1.12057254914452e-05*G0_3_1 + 0.000157937300794518*G0_3_3 - 7.32600732601077e-05*G0_3_4 - 8.46772275344102e-05*G0_3_5 - 1.61743018885953e-05*G0_3_6 - 3.90086104372003e-05*G0_3_7 + 0.00012368583797161*G0_3_8 + 7.99200799201169e-05*G0_3_9 + 1.13114398828738e-05*G0_4_0 + 1.13114398828738e-05*G0_4_1 - 7.32600732601077e-05*G0_4_3 + 8.94343751487035e-05*G0_4_4 - 7.32600732601079e-05*G0_4_5 + 8.94343751487033e-05*G0_4_6 - 8.46772275344103e-05*G0_4_7 - 8.46772275344101e-05*G0_4_8 - 0.000159840159840235*G0_4_9 + 0.000119351547923032*G0_5_0 + 6.9665783951531e-05*G0_5_1 + 6.02572031143742e-05*G0_5_2 - 8.46772275344102e-05*G0_5_3 - 7.32600732601079e-05*G0_5_4 + 0.00139003853289633*G0_5_5 - 0.000382474668189134*G0_5_6 + 0.000462394748109251*G0_5_7 - 0.00024832310546608*G0_5_8 + 0.000565149136577974*G0_5_9 - 3.73171801743404e-05*G0_6_0 - 7.717150574297e-06*G0_6_1 + 1.58571587143104e-06*G0_6_2 - 1.61743018885953e-05*G0_6_3 + 8.94343751487033e-05*G0_6_4 - 0.000382474668189134*G0_6_5 + 0.000148423005565933*G0_6_6 - 0.000214071642643172*G0_6_7 + 8.5628657057269e-06*G0_6_8 - 0.00027401170258326*G0_6_9 - 6.87143544286718e-06*G0_7_0 + 2.11428782857434e-07*G0_7_1 + 5.82486296772284e-05*G0_7_2 - 3.90086104372003e-05*G0_7_3 - 8.46772275344103e-05*G0_7_4 + 0.000462394748109251*G0_7_5 - 0.000214071642643172*G0_7_6 + 0.000575614861329418*G0_7_7 + 7.61143618286834e-05*G0_7_8 + 0.000496646210932159*G0_7_9 - 4.49286163572089e-05*G0_8_0 - 5.40200540200795e-05*G0_8_1 + 1.51171579743079e-05*G0_8_2 + 0.00012368583797161*G0_8_3 - 8.46772275344101e-05*G0_8_4 - 0.00024832310546608*G0_8_5 + 8.5628657057269e-06*G0_8_6 + 7.61143618286834e-05*G0_8_7 + 0.000407211835783456*G0_8_8 + 0.000171257314114537*G0_8_9 - 2.28343085486051e-05*G0_9_0 - 6.34286348572289e-07*G0_9_1 + 0.00010212010212015*G0_9_2 + 7.99200799201169e-05*G0_9_3 - 0.000159840159840234*G0_9_4 + 0.000565149136577974*G0_9_5 - 0.00027401170258326*G0_9_6 + 0.000496646210932159*G0_9_7 + 0.000171257314114537*G0_9_8 + 0.000924789496218503*G0_9_9;
    A[157] = A[101] + 0.000111863445196831*G0_0_0 + 1.34022356244641e-05*G0_0_1 + 8.98572327144172e-06*G0_0_2 - 2.26493083636048e-05*G0_0_3 - 7.42643599786807e-06*G0_0_4 + 0.000144115144115212*G0_0_5 - 4.98179069607875e-05*G0_0_6 + 0.000232915232915342*G0_0_7 - 8.53379424808397e-05*G0_0_8 + 0.0001170258313116*G0_0_9 + 1.34022356244641e-05*G0_1_0 - 3.00728078506e-05*G0_1_1 + 1.14523924047753e-07*G0_1_2 - 2.13014498728886e-05*G0_1_3 - 1.71785886071677e-06*G0_1_4 - 4.58007600864961e-05*G0_1_5 - 2.8357885500756e-05*G0_1_6 + 6.16314902029478e-05*G0_1_7 - 1.75750175750261e-05*G0_1_8 - 3.98014683729158e-05*G0_1_9 + 8.98572327144174e-06*G0_2_0 + 1.14523924047749e-07*G0_2_1 - 2.01121629693154e-05*G0_2_2 - 1.69407312264535e-05*G0_2_3 + 1.42714428428781e-05*G0_2_5 - 1.50643007785945e-06*G0_2_6 - 1.32142989285741e-07*G0_2_7 - 4.35807578664926e-05*G0_2_8 - 5.50243407386523e-05*G0_2_9 - 2.26493083636048e-05*G0_3_0 - 2.13014498728886e-05*G0_3_1 - 1.69407312264534e-05*G0_3_2 - 0.000205033062176017*G0_3_3 + 0.000131059416773764*G0_3_4 + 0.000108225108225159*G0_3_5 + 7.39736454022517e-05*G0_3_6 + 5.68479139907983e-05*G0_3_7 - 0.00017649017649026*G0_3_8 + 5.70857713715116e-06*G0_3_9 - 7.42643599786807e-06*G0_4_0 - 1.71785886071677e-06*G0_4_1 + 0.000131059416773764*G0_4_3 - 6.80272108843865e-05*G0_4_4 + 1.1179296893588e-05*G0_4_5 - 8.51529422958398e-05*G0_4_6 + 1.68878740307389e-05*G0_4_7 + 0.000119642262499462*G0_4_8 + 0.000142714428428781*G0_4_9 + 0.000144115144115212*G0_5_0 - 4.5800760086496e-05*G0_5_1 + 1.42714428428781e-05*G0_5_2 + 0.000108225108225159*G0_5_3 + 1.1179296893588e-05*G0_5_4 - 0.00117810760667959*G0_5_5 - 7.13572142143867e-06*G0_5_6 - 0.000115598687027313*G0_5_7 + 0.000126302269159472*G0_5_8 - 0.000603682032253745*G0_5_9 - 4.98179069607875e-05*G0_6_0 - 2.8357885500756e-05*G0_6_1 - 1.50643007785944e-06*G0_6_2 + 7.39736454022517e-05*G0_6_3 - 8.51529422958398e-05*G0_6_4 - 7.13572142143856e-06*G0_6_5 - 0.000208363065506021*G0_6_6 - 1.07035821321588e-05*G0_6_7 + 0.000113457970600881*G0_6_8 + 1.71257314114531e-05*G0_6_9 + 0.000232915232915342*G0_7_0 + 6.16314902029478e-05*G0_7_1 - 1.32142989285741e-07*G0_7_2 + 5.68479139907983e-05*G0_7_3 + 1.68878740307389e-05*G0_7_4 - 0.000115598687027313*G0_7_5 - 1.07035821321589e-05*G0_7_6 - 0.000112506541078021*G0_7_7 - 0.000197421625993147*G0_7_8 - 0.000329670329670484*G0_7_9 - 8.53379424808397e-05*G0_8_0 - 1.75750175750261e-05*G0_8_1 - 4.35807578664926e-05*G0_8_2 - 0.00017649017649026*G0_8_3 + 0.000119642262499462*G0_8_4 + 0.000126302269159472*G0_8_5 + 0.000113457970600881*G0_8_6 - 0.000197421625993147*G0_8_7 - 0.000284477427334704*G0_8_8 - 0.000119880119880176*G0_8_9 + 0.0001170258313116*G0_9_0 - 3.98014683729159e-05*G0_9_1 - 5.50243407386523e-05*G0_9_2 + 5.70857713715117e-06*G0_9_3 + 0.000142714428428781*G0_9_4 - 0.000603682032253745*G0_9_5 + 1.71257314114531e-05*G0_9_6 - 0.000329670329670484*G0_9_7 - 0.000119880119880176*G0_9_8 - 0.000950478093335684*G0_9_9;
    A[187] = A[117];
    A[174] = A[101] + 0.000128266794933522*G0_0_0 + 6.65295903391455e-05*G0_0_1 + 3.61778139556093e-06*G0_0_2 + 6.72343529486703e-05*G0_0_3 - 3.80571809143417e-05*G0_0_4 - 8.88000888001297e-05*G0_0_5 + 1.14171542743022e-05*G0_0_6 + 0.000236800236800348*G0_0_7 + 1.73371601943112e-05*G0_0_8 + 4.82057624914996e-05*G0_0_9 + 6.65295903391454e-05*G0_1_0 + 0.000347635903191622*G0_1_1 + 2.65930424660709e-05*G0_1_2 + 0.000235531664103203*G0_1_3 - 0.000122205836491608*G0_1_4 - 4.44000444000653e-05*G0_1_5 - 7.61143618286835e-06*G0_1_6 - 0.000163223020365954*G0_1_7 + 0.00050150907293788*G0_1_8 + 8.11886526172622e-05*G0_1_9 + 3.61778139556093e-06*G0_2_0 + 2.65930424660709e-05*G0_2_1 - 1.83238278476463e-06*G0_2_2 + 6.59657802515256e-05*G0_2_3 - 3.55200355200523e-05*G0_2_4 - 4.86286200572142e-05*G0_2_5 - 5.49714835429392e-06*G0_2_6 - 3.29828901257626e-05*G0_2_7 + 6.34286348572361e-05*G0_2_8 + 7.61143618286838e-06*G0_2_9 + 6.72343529486703e-05*G0_3_0 + 0.000235531664103203*G0_3_1 + 6.59657802515256e-05*G0_3_2 + 0.000578469149897993*G0_3_3 - 0.000243565957851787*G0_3_4 - 4.566861709721e-05*G0_3_6 - 0.000270205984491826*G0_3_7 + 0.00052899481470935*G0_3_8 + 0.000296846011131865*G0_3_9 - 3.80571809143417e-05*G0_4_0 - 0.000122205836491608*G0_4_1 - 3.55200355200523e-05*G0_4_2 - 0.000243565957851787*G0_4_3 + 9.89486703772883e-05*G0_4_4 + 4.566861709721e-05*G0_4_5 + 0.000140811569383064*G0_4_7 - 0.000258788830217523*G0_4_8 - 0.000114171542743025*G0_4_9 - 8.88000888001297e-05*G0_5_0 - 4.44000444000653e-05*G0_5_1 - 4.86286200572142e-05*G0_5_2 + 4.566861709721e-05*G0_5_4 - 0.000970458113315711*G0_5_5 + 0.000262594548308957*G0_5_6 - 9.51429522858531e-05*G0_5_7 + 6.46972075543804e-05*G0_5_8 - 0.00027401170258326*G0_5_9 + 1.14171542743023e-05*G0_6_0 - 7.61143618286834e-06*G0_6_1 - 5.49714835429391e-06*G0_6_2 - 4.566861709721e-05*G0_6_3 + 0.000262594548308958*G0_6_5 - 4.56686170972097e-05*G0_6_6 + 3.04457447314728e-05*G0_6_7 - 4.9474335188644e-05*G0_6_8 + 6.85029256458147e-05*G0_6_9 + 0.000236800236800348*G0_7_0 - 0.000163223020365954*G0_7_1 - 3.29828901257627e-05*G0_7_2 - 0.000270205984491826*G0_7_3 + 0.000140811569383064*G0_7_4 - 9.51429522858532e-05*G0_7_5 + 3.04457447314728e-05*G0_7_6 + 0.000574663431806561*G0_7_7 - 0.00078397792683544*G0_7_8 - 0.000205508776937445*G0_7_9 + 1.73371601943112e-05*G0_8_0 + 0.00050150907293788*G0_8_1 + 6.34286348572361e-05*G0_8_2 + 0.00052899481470935*G0_8_3 - 0.000258788830217523*G0_8_4 + 6.46972075543804e-05*G0_8_5 - 4.9474335188644e-05*G0_8_6 - 0.00078397792683544*G0_8_7 + 0.000974263831407148*G0_8_8 + 0.00027401170258326*G0_8_9 + 4.82057624914996e-05*G0_9_0 + 8.11886526172622e-05*G0_9_1 + 7.61143618286838e-06*G0_9_2 + 0.000296846011131865*G0_9_3 - 0.000114171542743025*G0_9_4 - 0.00027401170258326*G0_9_5 + 6.85029256458147e-05*G0_9_6 - 0.000205508776937445*G0_9_7 + 0.00027401170258326*G0_9_8 + 0.00013700585129163*G0_9_9;
    A[175] = -A[174] + 0.000104586771253487*G0_0_0 - 4.50813149226059e-05*G0_0_1 + 3.86444830889459e-06*G0_0_2 - 8.41486555772666e-05*G0_0_3 + 2.65343122486104e-05*G0_0_4 + 9.5248666677283e-05*G0_0_5 - 4.01714687429162e-05*G0_0_6 + 0.000347271775843368*G0_0_7 - 0.000244200244200359*G0_0_8 + 3.86914672629141e-05*G0_0_9 - 4.50813149226059e-05*G0_1_0 - 0.000458800458800675*G0_1_1 - 3.30651124302073e-05*G0_1_2 - 0.00029230029230043*G0_1_3 + 0.000150748722177364*G0_1_4 + 2.05085919371731e-05*G0_1_5 + 3.70000370000537e-06*G0_1_6 + 0.000356468927897667*G0_1_7 - 0.000743700743701093*G0_1_8 - 0.000113537256394452*G0_1_9 + 3.86444830889459e-06*G0_2_0 - 3.30651124302073e-05*G0_2_1 - 9.23239018477546e-06*G0_2_2 - 7.11457854315332e-05*G0_2_3 + 4.08057550914885e-05*G0_2_4 + 8.77429448858433e-06*G0_2_5 + 1.41657284514494e-05*G0_2_6 + 2.33628805057487e-05*G0_2_7 - 8.70029441458422e-05*G0_2_8 - 5.20114805829337e-05*G0_2_9 - 8.41486555772666e-05*G0_3_0 - 0.000292300292300429*G0_3_1 - 7.11457854315332e-05*G0_3_2 - 0.000645069216498091*G0_3_3 + 0.000288283145426138*G0_3_4 + 6.37457780315224e-05*G0_3_5 + 5.23286237572197e-05*G0_3_6 + 0.000315874601589036*G0_3_7 - 0.000640312068883798*G0_3_8 - 0.000291137433994714*G0_3_9 + 2.65343122486104e-05*G0_4_0 + 0.000150748722177364*G0_4_1 + 4.08057550914886e-05*G0_4_2 + 0.000288283145426138*G0_4_3 - 0.000148423005565932*G0_4_4 - 1.61743018885953e-05*G0_4_5 - 3.61543218686246e-05*G0_4_6 - 0.000106560106560157*G0_4_7 + 0.000324437467294763*G0_4_8 + 0.000188383045525991*G0_4_9 + 9.5248666677283e-05*G0_5_0 + 2.05085919371731e-05*G0_5_1 + 8.77429448858433e-06*G0_5_2 + 6.37457780315224e-05*G0_5_3 - 1.61743018885953e-05*G0_5_4 - 8.56286570572682e-05*G0_5_5 - 4.28143285286344e-05*G0_5_6 + 4.75714761429306e-06*G0_5_7 + 1.90285904571707e-06*G0_5_8 - 0.000119880119880176*G0_5_9 - 4.01714687429162e-05*G0_6_0 + 3.70000370000537e-06*G0_6_1 + 1.41657284514494e-05*G0_6_2 + 5.23286237572198e-05*G0_6_3 - 3.61543218686246e-05*G0_6_4 - 4.28143285286345e-05*G0_6_5 - 3.42514628229074e-05*G0_6_6 - 6.66000666000997e-06*G0_6_7 + 9.32400932401372e-05*G0_6_8 + 5.13771942343614e-05*G0_6_9 + 0.000347271775843368*G0_7_0 + 0.000356468927897667*G0_7_1 + 2.33628805057487e-05*G0_7_2 + 0.000315874601589036*G0_7_3 - 0.000106560106560157*G0_7_4 + 4.75714761429295e-06*G0_7_5 - 6.66000666000997e-06*G0_7_6 - 0.000696446410732453*G0_7_7 + 0.00041672613101204*G0_7_8 - 0.000102754388468722*G0_7_9 - 0.000244200244200359*G0_8_0 - 0.000743700743701093*G0_8_1 - 8.70029441458422e-05*G0_8_2 - 0.000640312068883799*G0_8_3 + 0.000324437467294763*G0_8_4 + 1.90285904571707e-06*G0_8_5 + 9.32400932401372e-05*G0_8_6 + 0.00041672613101204*G0_8_7 - 0.000764949336378269*G0_8_8 - 0.000308263165406168*G0_8_9 + 3.86914672629141e-05*G0_9_0 - 0.000113537256394452*G0_9_1 - 5.20114805829337e-05*G0_9_2 - 0.000291137433994714*G0_9_3 + 0.000188383045525992*G0_9_4 - 0.000119880119880176*G0_9_5 + 5.13771942343614e-05*G0_9_6 - 0.000102754388468722*G0_9_7 - 0.000308263165406168*G0_9_8 - 0.000685029256458151*G0_9_9;
    A[159] = -A[174] - 0.000458800458800674*G0_0_0 - 4.50813149226059e-05*G0_0_1 - 3.30651124302073e-05*G0_0_2 + 2.0508591937173e-05*G0_0_3 + 3.70000370000538e-06*G0_0_4 - 0.000292300292300429*G0_0_5 + 0.000150748722177365*G0_0_6 - 0.000743700743701093*G0_0_7 + 0.000356468927897667*G0_0_8 - 0.000113537256394453*G0_0_9 - 4.50813149226059e-05*G0_1_0 + 0.000104586771253487*G0_1_1 + 3.86444830889459e-06*G0_1_2 + 9.52486666772829e-05*G0_1_3 - 4.01714687429163e-05*G0_1_4 - 8.41486555772667e-05*G0_1_5 + 2.65343122486105e-05*G0_1_6 - 0.000244200244200359*G0_1_7 + 0.000347271775843368*G0_1_8 + 3.8691467262914e-05*G0_1_9 - 3.30651124302073e-05*G0_2_0 + 3.86444830889459e-06*G0_2_1 - 9.23239018477548e-06*G0_2_2 + 8.77429448858434e-06*G0_2_3 + 1.41657284514494e-05*G0_2_4 - 7.11457854315332e-05*G0_2_5 + 4.08057550914886e-05*G0_2_6 - 8.70029441458424e-05*G0_2_7 + 2.33628805057486e-05*G0_2_8 - 5.20114805829337e-05*G0_2_9 + 2.0508591937173e-05*G0_3_0 + 9.52486666772829e-05*G0_3_1 + 8.77429448858434e-06*G0_3_2 - 8.56286570572685e-05*G0_3_3 - 4.28143285286344e-05*G0_3_4 + 6.37457780315224e-05*G0_3_5 - 1.61743018885953e-05*G0_3_6 + 1.90285904571713e-06*G0_3_7 + 4.75714761429295e-06*G0_3_8 - 0.000119880119880176*G0_3_9 + 3.70000370000539e-06*G0_4_0 - 4.01714687429163e-05*G0_4_1 + 1.41657284514494e-05*G0_4_2 - 4.28143285286343e-05*G0_4_3 - 3.42514628229074e-05*G0_4_4 + 5.23286237572198e-05*G0_4_5 - 3.61543218686246e-05*G0_4_6 + 9.32400932401372e-05*G0_4_7 - 6.6600066600097e-06*G0_4_8 + 5.13771942343615e-05*G0_4_9 - 0.000292300292300429*G0_5_0 - 8.41486555772667e-05*G0_5_1 - 7.11457854315332e-05*G0_5_2 + 6.37457780315224e-05*G0_5_3 + 5.23286237572198e-05*G0_5_4 - 0.000645069216498091*G0_5_5 + 0.000288283145426138*G0_5_6 - 0.000640312068883798*G0_5_7 + 0.000315874601589035*G0_5_8 - 0.000291137433994714*G0_5_9 + 0.000150748722177364*G0_6_0 + 2.65343122486105e-05*G0_6_1 + 4.08057550914886e-05*G0_6_2 - 1.61743018885953e-05*G0_6_3 - 3.61543218686246e-05*G0_6_4 + 0.000288283145426138*G0_6_5 - 0.000148423005565933*G0_6_6 + 0.000324437467294763*G0_6_7 - 0.000106560106560157*G0_6_8 + 0.000188383045525992*G0_6_9 - 0.000743700743701093*G0_7_0 - 0.000244200244200359*G0_7_1 - 8.70029441458424e-05*G0_7_2 + 1.90285904571718e-06*G0_7_3 + 9.32400932401372e-05*G0_7_4 - 0.000640312068883798*G0_7_5 + 0.000324437467294763*G0_7_6 - 0.000764949336378272*G0_7_7 + 0.000416726131012042*G0_7_8 - 0.000308263165406169*G0_7_9 + 0.000356468927897667*G0_8_0 + 0.000347271775843368*G0_8_1 + 2.33628805057486e-05*G0_8_2 + 4.75714761429284e-06*G0_8_3 - 6.6600066600097e-06*G0_8_4 + 0.000315874601589035*G0_8_5 - 0.000106560106560157*G0_8_6 + 0.000416726131012042*G0_8_7 - 0.000696446410732453*G0_8_8 - 0.000102754388468723*G0_8_9 - 0.000113537256394453*G0_9_0 + 3.8691467262914e-05*G0_9_1 - 5.20114805829337e-05*G0_9_2 - 0.000119880119880176*G0_9_3 + 5.13771942343615e-05*G0_9_4 - 0.000291137433994714*G0_9_5 + 0.000188383045525992*G0_9_6 - 0.000308263165406169*G0_9_7 - 0.000102754388468722*G0_9_8 - 0.000685029256458152*G0_9_9;
    A[5] = -A[32] + 3.01036412147666e-05*G0_0_2 - 8.06732949590472e-06*G0_0_4 + 7.45781995782345e-06*G0_0_5 + 4.22692386978303e-06*G0_0_6 + 1.29979147836351e-05*G0_0_7 - 5.54009482581172e-06*G0_0_9 - 1.06698122571189e-05*G0_1_1 + 2.65034788844438e-05*G0_1_2 - 2.0820779749361e-05*G0_1_3 + 6.55264048121497e-06*G0_1_4 + 1.4469657326807e-06*G0_1_6 + 1.0444251515685e-05*G0_1_7 - 1.9456403384984e-05*G0_1_8 - 1.85429649715451e-05*G0_1_9 + 3.01036412147666e-05*G0_2_0 + 2.65034788844438e-05*G0_2_1 + 0.000949847477625703*G0_2_2 - 0.000131075934647425*G0_2_3 + 0.000263063655920923*G0_2_4 - 0.000131551649408855*G0_2_5 + 0.000281299388442379*G0_2_6 + 1.73635887921685e-05*G0_2_9 - 2.0820779749361e-05*G0_3_1 - 0.000131075934647425*G0_3_2 + 7.43304314733235e-06*G0_3_3 + 2.48263641120901e-05*G0_3_4 - 8.11688311688695e-06*G0_3_5 - 9.8116169544784e-07*G0_3_6 - 1.65162218733726e-05*G0_3_8 + 5.22691594120412e-05*G0_3_9 - 8.06732949590472e-06*G0_4_0 + 6.55264048121497e-06*G0_4_1 + 0.000263063655920923*G0_4_2 + 2.48263641120901e-05*G0_4_3 - 0.000133319061890553*G0_4_4 + 2.75617239903083e-05*G0_4_5 - 2.65805622948605e-05*G0_4_6 + 8.5479996194322e-06*G0_4_7 + 1.48363541220755e-05*G0_4_8 - 0.000107214214357122*G0_4_9 + 7.45781995782345e-06*G0_5_0 - 0.000131551649408855*G0_5_2 - 8.11688311688694e-06*G0_5_3 + 2.75617239903083e-05*G0_5_4 + 4.12087912088106e-05*G0_5_5 - 5.55694305694568e-05*G0_5_6 + 8.22094572094959e-06*G0_5_7 + 3.22891394320118e-05*G0_5_9 + 4.22692386978303e-06*G0_6_0 + 1.4469657326807e-06*G0_6_1 + 0.000281299388442379*G0_6_2 - 9.8116169544784e-07*G0_6_3 - 2.65805622948606e-05*G0_6_4 - 5.55694305694568e-05*G0_6_5 + 0.000147352647352717*G0_6_6 - 3.86518243661324e-07*G0_6_7 - 5.01284429856094e-05*G0_6_9 + 1.29979147836351e-05*G0_7_0 + 1.0444251515685e-05*G0_7_1 + 8.5479996194322e-06*G0_7_4 + 8.22094572094959e-06*G0_7_5 - 3.86518243661326e-07*G0_7_6 + 9.60349174635333e-06*G0_7_7 + 1.05400551829173e-05*G0_7_8 + 1.73933209647577e-05*G0_7_9 - 1.9456403384984e-05*G0_8_1 - 1.65162218733726e-05*G0_8_3 + 1.48363541220755e-05*G0_8_4 + 1.05400551829173e-05*G0_8_7 + 5.32205889348978e-06*G0_8_8 + 2.59561866704845e-05*G0_8_9 - 5.54009482581172e-06*G0_9_0 - 1.85429649715451e-05*G0_9_1 + 1.73635887921685e-05*G0_9_2 + 5.22691594120412e-05*G0_9_3 - 0.000107214214357122*G0_9_4 + 3.22891394320118e-05*G0_9_5 - 5.01284429856094e-05*G0_9_6 + 1.73933209647577e-05*G0_9_7 + 2.59561866704845e-05*G0_9_8 - 2.14071642643179e-06*G0_9_9;
    A[211] = A[5] + 1.0175010175015e-05*G0_0_4 + 1.36900136900201e-05*G0_0_5 - 9.14429485858487e-06*G0_0_6 + 8.61572290144126e-06*G0_0_7 + 3.61543218686246e-05*G0_0_9 - 3.53790829981471e-05*G0_1_1 - 3.54143211286233e-06*G0_1_3 + 5.81429152858016e-07*G0_1_4 + 1.29500129500191e-06*G0_1_5 - 3.92993250136292e-05*G0_1_6 + 1.63328734757383e-05*G0_1_7 - 1.82357325214553e-05*G0_1_8 - 4.31314717029205e-05*G0_1_9 + 2.35155790711458e-05*G0_2_2 - 1.65443022585958e-05*G0_2_3 + 2.3098594527177e-05*G0_2_4 + 5.33857676715069e-06*G0_2_5 + 2.53185967471801e-05*G0_2_6 + 1.77600177600261e-05*G0_2_9 - 3.54143211286234e-06*G0_3_1 - 1.65443022585958e-05*G0_3_2 - 4.44793301936367e-05*G0_3_3 - 5.94643451786602e-06*G0_3_4 - 3.09214594929025e-06*G0_3_5 + 0.000112506541078022*G0_3_6 + 1.47471576043074e-05*G0_3_8 + 0.000155558726987371*G0_3_9 + 1.0175010175015e-05*G0_4_0 + 5.81429152858016e-07*G0_4_1 + 2.3098594527177e-05*G0_4_2 - 5.946434517866e-06*G0_4_3 + 0.000280909566623985*G0_4_4 - 3.591646448791e-05*G0_4_5 - 7.65900765901123e-05*G0_4_6 - 1.45093002235928e-05*G0_4_7 - 1.66500166500243e-06*G0_4_8 + 1.85528756957416e-05*G0_4_9 + 1.36900136900201e-05*G0_5_0 + 1.29500129500191e-06*G0_5_1 + 5.3385767671507e-06*G0_5_2 - 3.09214594929026e-06*G0_5_3 - 3.591646448791e-05*G0_5_4 - 4.54307597164952e-05*G0_5_5 + 4.51929023357802e-06*G0_5_6 - 9.27643784787083e-06*G0_5_8 - 8.99100899101322e-05*G0_5_9 - 9.14429485858487e-06*G0_6_0 - 3.92993250136292e-05*G0_6_1 + 2.53185967471801e-05*G0_6_2 + 0.000112506541078022*G0_6_3 - 7.65900765901123e-05*G0_6_4 + 4.51929023357802e-06*G0_6_5 - 0.000390799676514146*G0_6_6 - 9.27643784787081e-06*G0_6_7 + 6.35079206508076e-05*G0_6_8 - 0.000278293135436123*G0_6_9 + 8.61572290144126e-06*G0_7_0 + 1.63328734757383e-05*G0_7_1 - 1.45093002235928e-05*G0_7_4 - 9.27643784787081e-06*G0_7_6 + 1.92664478378858e-05*G0_7_7 - 4.49550449550662e-05*G0_7_8 - 8.9910089910132e-05*G0_7_9 - 1.82357325214553e-05*G0_8_1 + 1.47471576043074e-05*G0_8_3 - 1.66500166500243e-06*G0_8_4 - 9.27643784787083e-06*G0_8_5 + 6.35079206508076e-05*G0_8_6 - 4.49550449550662e-05*G0_8_7 + 7.92065077779737e-05*G0_8_8 + 0.000132724418438766*G0_8_9 + 3.61543218686246e-05*G0_9_0 - 4.31314717029205e-05*G0_9_1 + 1.77600177600261e-05*G0_9_2 + 0.000155558726987371*G0_9_3 + 1.85528756957416e-05*G0_9_4 - 8.99100899101322e-05*G0_9_5 - 0.000278293135436123*G0_9_6 - 8.9910089910132e-05*G0_9_7 + 0.000132724418438766*G0_9_8 - 7.70657913515415e-05*G0_9_9;
    A[76] = A[5] + 1.00428671857291e-05*G0_0_3 + 5.76143433286563e-06*G0_0_4 - 1.09942967085876e-05*G0_0_5 + 5.41786256072226e-06*G0_0_6 - 1.847358990217e-05*G0_0_7 - 1.4271442842878e-06*G0_0_9 + 0.000228554514268907*G0_1_1 + 0.000177758749187404*G0_1_3 - 7.89686503972589e-05*G0_1_4 - 5.41786256072224e-06*G0_1_6 - 5.95172023743733e-05*G0_1_7 + 0.000122364408078751*G0_1_8 + 3.45686059971937e-05*G0_1_9 - 1.80066846733598e-05*G0_2_2 + 3.16614602329037e-05*G0_2_3 - 3.92200392200575e-05*G0_2_4 - 1.5857158714311e-07*G0_2_5 + 3.17143174286206e-07*G0_2_9 + 1.00428671857291e-05*G0_3_0 + 0.000177758749187404*G0_3_1 + 3.16614602329037e-05*G0_3_2 + 0.000221920936206755*G0_3_3 - 0.000106322249179442*G0_3_4 + 1.66500166500248e-06*G0_3_5 - 4.7571476142939e-07*G0_3_6 - 4.68579040007832e-05*G0_3_7 + 8.80072308644152e-05*G0_3_8 - 9.99000999001471e-06*G0_3_9 + 5.76143433286563e-06*G0_4_0 - 7.89686503972589e-05*G0_4_1 - 3.92200392200576e-05*G0_4_2 - 0.000106322249179442*G0_4_3 + 0.000241900956186785*G0_4_4 - 3.40136054421929e-05*G0_4_5 + 3.44893202036223e-05*G0_4_6 + 5.94643451786591e-06*G0_4_7 - 4.1149326863632e-05*G0_4_8 + 6.70757813615272e-05*G0_4_9 - 1.09942967085876e-05*G0_5_0 - 1.5857158714311e-07*G0_5_2 + 1.66500166500248e-06*G0_5_3 - 3.40136054421929e-05*G0_5_4 + 1.18928690357324e-06*G0_5_5 + 4.75714761429187e-07*G0_5_6 + 4.28143285286342e-06*G0_5_9 + 5.41786256072226e-06*G0_6_0 - 5.41786256072224e-06*G0_6_1 - 4.7571476142939e-07*G0_6_3 + 3.44893202036223e-05*G0_6_4 + 4.75714761429173e-07*G0_6_5 - 3.44893202036219e-05*G0_6_6 - 4.28143285286343e-06*G0_6_7 + 4.28143285286339e-06*G0_6_8 - 1.847358990217e-05*G0_7_0 - 5.95172023743733e-05*G0_7_1 - 4.68579040007832e-05*G0_7_3 + 5.9464345178659e-06*G0_7_4 - 4.28143285286343e-06*G0_7_6 + 4.59064744779247e-05*G0_7_7 - 5.11393368536467e-05*G0_7_8 + 1.28442985585902e-05*G0_7_9 + 0.000122364408078751*G0_8_1 + 8.80072308644152e-05*G0_8_3 - 4.1149326863632e-05*G0_8_4 + 4.28143285286339e-06*G0_8_6 - 5.11393368536467e-05*G0_8_7 + 6.58864944579543e-05*G0_8_8 - 2.1407164264317e-05*G0_8_9 - 1.4271442842878e-06*G0_9_0 + 3.45686059971937e-05*G0_9_1 + 3.17143174286206e-07*G0_9_2 - 9.9900099900147e-06*G0_9_3 + 6.70757813615272e-05*G0_9_4 + 4.28143285286342e-06*G0_9_5 + 1.28442985585902e-05*G0_9_7 - 2.1407164264317e-05*G0_9_8 - 8.56286570572674e-06*G0_9_9;
    A[212] = A[76] + 2.22910540370963e-05*G0_0_2 - 1.13642970785883e-06*G0_0_3 - 6.60714946429536e-07*G0_0_4 + 2.72214557928971e-06*G0_0_6 - 1.56985871271659e-05*G0_0_9 - 0.000201755916041725*G0_1_1 + 1.02542959685865e-05*G0_1_2 - 0.00015941730227452*G0_1_3 + 8.47829419258389e-05*G0_1_4 + 1.13114398828738e-05*G0_1_5 + 1.00428671857291e-06*G0_1_6 + 5.36500536500789e-05*G0_1_7 - 0.000103335817621581*G0_1_8 - 3.8691467262914e-05*G0_1_9 + 2.22910540370963e-05*G0_2_0 + 1.02542959685865e-05*G0_2_1 + 0.000226645782201444*G0_2_2 - 0.000118770118770175*G0_2_3 + 0.000247213104356078*G0_2_4 - 8.64743721886986e-05*G0_2_5 + 0.000189757332614565*G0_2_6 + 8.49943707086963e-05*G0_2_9 - 1.13642970785883e-06*G0_3_0 - 0.00015941730227452*G0_3_1 - 0.000118770118770175*G0_3_2 - 7.08814994529613e-05*G0_3_3 - 4.23386137672052e-05*G0_3_4 - 7.61143618286833e-06*G0_3_5 - 1.83150183150269e-05*G0_3_6 - 1.18928690357317e-05*G0_3_7 + 3.52028923457659e-05*G0_3_8 + 0.000139860139860205*G0_3_9 - 6.6071494642954e-07*G0_4_0 + 8.47829419258389e-05*G0_4_1 + 0.000247213104356078*G0_4_2 - 4.23386137672051e-05*G0_4_3 + 2.04557347414586e-05*G0_4_4 - 1.33200133200196e-05*G0_4_5 + 3.16350316350465e-05*G0_4_6 - 6.18429189858057e-06*G0_4_7 - 2.33100233100342e-05*G0_4_8 - 0.00022834308548605*G0_4_9 + 1.13114398828738e-05*G0_5_1 - 8.64743721886986e-05*G0_5_2 - 7.61143618286832e-06*G0_5_3 - 1.33200133200196e-05*G0_5_4 + 0.000116074401788742*G0_5_5 - 6.87407830265296e-05*G0_5_6 + 9.41915227629955e-05*G0_5_7 - 4.92364778079295e-05*G0_5_8 + 0.000145568716997357*G0_5_9 + 2.72214557928971e-06*G0_6_0 + 1.00428671857292e-06*G0_6_1 + 0.000189757332614565*G0_6_2 - 1.83150183150269e-05*G0_6_3 + 3.16350316350465e-05*G0_6_4 - 6.87407830265296e-05*G0_6_5 + 1.61743018885951e-05*G0_6_6 - 4.49550449550661e-05*G0_6_7 + 2.14071642643175e-06*G0_6_8 - 0.000218353075496035*G0_6_9 + 5.36500536500789e-05*G0_7_1 - 1.18928690357317e-05*G0_7_3 - 6.18429189858057e-06*G0_7_4 + 9.41915227629955e-05*G0_7_5 - 4.49550449550661e-05*G0_7_6 + 0.000210265924551737*G0_7_7 - 3.5202892345766e-05*G0_7_8 + 0.00013700585129163*G0_7_9 - 0.000103335817621581*G0_8_1 + 3.52028923457658e-05*G0_8_3 - 2.33100233100342e-05*G0_8_4 - 4.92364778079295e-05*G0_8_5 + 2.14071642643174e-06*G0_8_6 - 3.5202892345766e-05*G0_8_7 + 0.000194567337424572*G0_8_8 + 0.00016269444840881*G0_8_9 - 1.56985871271659e-05*G0_9_0 - 3.8691467262914e-05*G0_9_1 + 8.49943707086963e-05*G0_9_2 + 0.000139860139860205*G0_9_3 - 0.00022834308548605*G0_9_4 + 0.000145568716997357*G0_9_5 - 0.000218353075496035*G0_9_6 + 0.00013700585129163*G0_9_7 + 0.00016269444840881*G0_9_8 + 0.00054802340516652*G0_9_9;
    A[20] = A[76];
    A[61] = -A[76] - 1.37957280814489e-05*G0_0_1 - 8.71483014340567e-06*G0_0_3 + 7.57840043554687e-06*G0_0_4 + 2.70893128036111e-07*G0_0_6 - 6.9308997880459e-06*G0_0_8 - 3.56786071071946e-07*G0_0_9 - 1.37957280814489e-05*G0_1_0 - 0.000263625263625388*G0_1_1 - 2.36359760169395e-05*G0_1_2 - 0.000193325193325284*G0_1_3 + 7.86250786251155e-05*G0_1_4 + 4.30786145072062e-06*G0_1_6 + 5.45750545750803e-05*G0_1_7 - 0.000111925111925165*G0_1_8 - 2.22000222000327e-05*G0_1_9 - 2.36359760169395e-05*G0_2_1 - 2.41630797186467e-05*G0_2_2 - 4.83643340786424e-06*G0_2_3 - 4.26953998382771e-05*G0_2_4 + 7.78322206894004e-06*G0_2_5 - 1.78657321514548e-05*G0_2_6 - 5.74161288447275e-06*G0_2_8 - 1.81564467278839e-05*G0_2_9 - 8.71483014340567e-06*G0_3_0 - 0.000193325193325284*G0_3_1 - 4.83643340786425e-06*G0_3_2 - 0.000330502830502986*G0_3_3 + 0.00015472622615487*G0_3_4 - 7.01679273108174e-06*G0_3_5 + 7.43304314733235e-06*G0_3_6 + 4.65011179297113e-05*G0_3_7 - 8.40825840826237e-05*G0_3_8 - 2.64021692593245e-05*G0_3_9 + 7.57840043554687e-06*G0_4_0 + 7.86250786251155e-05*G0_4_1 - 4.26953998382771e-05*G0_4_2 + 0.00015472622615487*G0_4_3 + 1.16550116550176e-05*G0_4_4 - 2.37857380714641e-06*G0_4_5 - 5.05446934018602e-06*G0_4_6 - 3.09214594929027e-05*G0_4_7 + 3.75814661529125e-05*G0_4_8 + 5.92264877979443e-05*G0_4_9 + 7.78322206894004e-06*G0_5_2 - 7.01679273108174e-06*G0_5_3 - 2.37857380714641e-06*G0_5_4 + 6.66000666000984e-06*G0_5_5 + 1.43309071880568e-05*G0_5_6 + 2.70893128036113e-07*G0_6_0 + 4.30786145072062e-06*G0_6_1 - 1.78657321514548e-05*G0_6_2 + 7.43304314733233e-06*G0_6_3 - 5.05446934018602e-06*G0_6_4 + 1.43309071880568e-05*G0_6_5 + 2.8423956995399e-05*G0_6_6 - 8.02768659911895e-06*G0_6_8 + 3.96032538889869e-05*G0_6_9 + 5.45750545750803e-05*G0_7_1 + 4.65011179297113e-05*G0_7_3 - 3.09214594929027e-05*G0_7_4 - 2.18828790257465e-05*G0_7_7 + 4.59064744779247e-05*G0_7_8 - 2.14071642643175e-06*G0_7_9 - 6.9308997880459e-06*G0_8_0 - 0.000111925111925165*G0_8_1 - 5.74161288447274e-06*G0_8_2 - 8.40825840826237e-05*G0_8_3 + 3.75814661529125e-05*G0_8_4 - 8.02768659911894e-06*G0_8_6 + 4.59064744779247e-05*G0_8_7 - 7.57575757576115e-05*G0_8_8 - 3.56786071071948e-07*G0_9_0 - 2.22000222000327e-05*G0_9_1 - 1.81564467278839e-05*G0_9_2 - 2.64021692593245e-05*G0_9_3 + 5.92264877979443e-05*G0_9_4 + 3.96032538889869e-05*G0_9_6 - 2.14071642643175e-06*G0_9_7 + 0.000132724418438767*G0_9_9;
    A[139] = A[61] + 1.06991773658492e-05*G0_0_0 - 2.53714539428941e-06*G0_0_1 - 1.21901907616251e-05*G0_0_2 + 1.82555539698484e-05*G0_0_3 + 2.05151990866373e-05*G0_0_4 - 1.78987678987763e-05*G0_0_6 + 2.50344893202154e-05*G0_0_7 - 3.72841444270191e-05*G0_0_8 + 1.70068027210965e-05*G0_0_9 - 2.53714539428941e-06*G0_1_0 + 0.000308271974938787*G0_1_1 + 7.14453095405814e-06*G0_1_2 + 9.95036709322892e-05*G0_1_3 - 0.000106005106005156*G0_1_4 + 2.47371675943221e-05*G0_1_5 - 2.35478806907489e-05*G0_1_6 + 9.27643784787063e-06*G0_1_7 - 7.37357880215339e-06*G0_1_8 - 8.0871509442976e-05*G0_1_9 - 1.21901907616251e-05*G0_2_0 + 7.14453095405814e-06*G0_2_1 - 5.69492236159171e-05*G0_2_2 - 4.04357547214872e-06*G0_2_3 - 0.000106679035250514*G0_2_4 + 4.45982588839941e-05*G0_2_5 - 6.04157747015174e-05*G0_2_6 + 3.22296750868331e-05*G0_2_7 - 2.84834213405775e-05*G0_2_8 - 5.92264877979441e-05*G0_2_9 + 1.82555539698484e-05*G0_3_0 + 9.95036709322892e-05*G0_3_1 - 4.04357547214872e-06*G0_3_2 + 0.000404238618524523*G0_3_3 + 0.000344298558584434*G0_3_4 - 9.52618809762115e-05*G0_3_5 + 0.000132189239332159*G0_3_6 + 6.77893535036673e-06*G0_3_7 - 0.000153774796632011*G0_3_8 + 0.000229056657628194*G0_3_9 + 2.05151990866373e-05*G0_4_0 - 0.000106005106005156*G0_4_1 - 0.000106679035250514*G0_4_2 + 0.000344298558584434*G0_4_3 - 3.35378906807637e-05*G0_4_4 - 0.000132189239332159*G0_4_6 - 0.000109890109890161*G0_4_7 + 0.000146995861281644*G0_4_8 + 0.000177679463393832*G0_4_9 + 2.47371675943221e-05*G0_5_1 + 4.45982588839941e-05*G0_5_2 - 9.52618809762115e-05*G0_5_3 + 1.42714428428779e-05*G0_5_5 + 4.5847010132746e-05*G0_5_6 + 4.78093335236418e-05*G0_5_7 - 2.56885971171807e-05*G0_5_9 - 1.78987678987763e-05*G0_6_0 - 2.35478806907489e-05*G0_6_1 - 6.04157747015174e-05*G0_6_2 + 0.000132189239332159*G0_6_3 - 0.000132189239332159*G0_6_4 + 4.5847010132746e-05*G0_6_5 - 0.000211574140145668*G0_6_6 - 3.51434280005874e-05*G0_6_7 + 4.72741544170338e-05*G0_6_8 - 8.66990152704848e-05*G0_6_9 + 2.50344893202154e-05*G0_7_0 + 9.27643784787063e-06*G0_7_1 + 3.22296750868331e-05*G0_7_2 + 6.77893535036675e-06*G0_7_3 - 0.000109890109890161*G0_7_4 + 4.78093335236417e-05*G0_7_5 - 3.51434280005874e-05*G0_7_6 + 8.56286570572728e-06*G0_7_7 + 0.000113457970600881*G0_7_8 + 1.92664478378855e-05*G0_7_9 - 3.72841444270191e-05*G0_8_0 - 7.37357880215339e-06*G0_8_1 - 2.84834213405776e-05*G0_8_2 - 0.000153774796632011*G0_8_3 + 0.000146995861281644*G0_8_4 + 4.72741544170338e-05*G0_8_6 + 0.000113457970600881*G0_8_7 - 0.000221564150135682*G0_8_8 - 5.1377194234361e-05*G0_8_9 + 1.70068027210965e-05*G0_9_0 - 8.0871509442976e-05*G0_9_1 - 5.92264877979441e-05*G0_9_2 + 0.000229056657628194*G0_9_3 + 0.000177679463393832*G0_9_4 - 2.56885971171806e-05*G0_9_5 - 8.66990152704847e-05*G0_9_6 + 1.92664478378855e-05*G0_9_7 - 5.1377194234361e-05*G0_9_8 + 0.000295418866847577*G0_9_9;
    A[170] = -A[139] + 2.74505036409928e-05*G0_0_0 + 1.19809643619224e-05*G0_0_1 + 3.98190874381537e-06*G0_0_2 + 5.82486296772285e-05*G0_0_3 + 1.5117157974308e-05*G0_0_4 + 1.58571587143094e-06*G0_0_7 + 6.02572031143742e-05*G0_0_8 + 0.00010212010212015*G0_0_9 + 1.19809643619224e-05*G0_1_0 + 8.0413413746785e-05*G0_1_1 + 1.0031121142237e-05*G0_1_2 - 6.87143544286708e-06*G0_1_3 - 4.49286163572089e-05*G0_1_4 + 1.13114398828737e-05*G0_1_5 - 3.73171801743406e-05*G0_1_7 + 0.000119351547923033*G0_1_8 - 2.2834308548605e-05*G0_1_9 + 3.98190874381537e-06*G0_2_0 + 1.0031121142237e-05*G0_2_1 + 1.37311248422425e-05*G0_2_2 + 2.11428782857394e-07*G0_2_3 - 5.40200540200792e-05*G0_2_4 + 1.13114398828737e-05*G0_2_5 - 1.12057254914449e-05*G0_2_6 - 7.71715057429702e-06*G0_2_7 + 6.96657839515309e-05*G0_2_8 - 6.34286348572357e-07*G0_2_9 + 5.82486296772285e-05*G0_3_0 - 6.87143544286713e-06*G0_3_1 + 2.1142878285738e-07*G0_3_2 + 0.000575614861329418*G0_3_3 + 7.61143618286829e-05*G0_3_4 - 8.46772275344102e-05*G0_3_5 - 3.90086104372003e-05*G0_3_6 - 0.000214071642643172*G0_3_7 + 0.000462394748109251*G0_3_8 + 0.000496646210932158*G0_3_9 + 1.5117157974308e-05*G0_4_0 - 4.49286163572089e-05*G0_4_1 - 5.40200540200792e-05*G0_4_2 + 7.61143618286828e-05*G0_4_3 + 0.000407211835783457*G0_4_4 - 8.46772275344104e-05*G0_4_5 + 0.000123685837971611*G0_4_6 + 8.56286570572677e-06*G0_4_7 - 0.000248323105466079*G0_4_8 + 0.000171257314114538*G0_4_9 + 1.13114398828737e-05*G0_5_1 + 1.13114398828737e-05*G0_5_2 - 8.46772275344102e-05*G0_5_3 - 8.46772275344103e-05*G0_5_4 + 8.94343751487028e-05*G0_5_5 - 7.32600732601078e-05*G0_5_6 + 8.9434375148703e-05*G0_5_7 - 7.32600732601078e-05*G0_5_8 - 0.000159840159840235*G0_5_9 - 1.12057254914449e-05*G0_6_2 - 3.90086104372003e-05*G0_6_3 + 0.000123685837971611*G0_6_4 - 7.32600732601078e-05*G0_6_5 + 0.000157937300794518*G0_6_6 - 1.61743018885954e-05*G0_6_7 - 8.46772275344101e-05*G0_6_8 + 7.99200799201177e-05*G0_6_9 + 1.58571587143093e-06*G0_7_0 - 3.73171801743405e-05*G0_7_1 - 7.71715057429702e-06*G0_7_2 - 0.000214071642643172*G0_7_3 + 8.56286570572671e-06*G0_7_4 + 8.9434375148703e-05*G0_7_5 - 1.61743018885954e-05*G0_7_6 + 0.000148423005565933*G0_7_7 - 0.000382474668189134*G0_7_8 - 0.00027401170258326*G0_7_9 + 6.02572031143742e-05*G0_8_0 + 0.000119351547923033*G0_8_1 + 6.96657839515309e-05*G0_8_2 + 0.000462394748109251*G0_8_3 - 0.000248323105466079*G0_8_4 - 7.32600732601078e-05*G0_8_5 - 8.46772275344101e-05*G0_8_6 - 0.000382474668189134*G0_8_7 + 0.00139003853289633*G0_8_8 + 0.000565149136577973*G0_8_9 + 0.00010212010212015*G0_9_0 - 2.2834308548605e-05*G0_9_1 - 6.34286348572357e-07*G0_9_2 + 0.000496646210932158*G0_9_3 + 0.000171257314114538*G0_9_4 - 0.000159840159840235*G0_9_5 + 7.99200799201177e-05*G0_9_6 - 0.00027401170258326*G0_9_7 + 0.000565149136577973*G0_9_8 + 0.000924789496218502*G0_9_9;
    A[70] = A[170] - 2.01121629693153e-05*G0_0_0 + 8.98572327144175e-06*G0_0_1 + 1.14523924047775e-07*G0_0_2 - 1.32142989285998e-07*G0_0_3 - 4.35807578664927e-05*G0_0_4 - 1.69407312264536e-05*G0_0_6 - 1.50643007785939e-06*G0_0_7 + 1.42714428428781e-05*G0_0_8 - 5.50243407386524e-05*G0_0_9 + 8.98572327144175e-06*G0_1_0 + 0.000111863445196831*G0_1_1 + 1.34022356244641e-05*G0_1_2 + 0.000232915232915342*G0_1_3 - 8.53379424808396e-05*G0_1_4 - 7.42643599786802e-06*G0_1_5 - 2.26493083636047e-05*G0_1_6 - 4.98179069607874e-05*G0_1_7 + 0.000144115144115212*G0_1_8 + 0.0001170258313116*G0_1_9 + 1.14523924047778e-07*G0_2_0 + 1.34022356244641e-05*G0_2_1 - 3.00728078506e-05*G0_2_2 + 6.16314902029478e-05*G0_2_3 - 1.75750175750261e-05*G0_2_4 - 1.71785886071669e-06*G0_2_5 - 2.13014498728886e-05*G0_2_6 - 2.83578855007559e-05*G0_2_7 - 4.58007600864958e-05*G0_2_8 - 3.98014683729156e-05*G0_2_9 - 1.32142989286012e-07*G0_3_0 + 0.000232915232915342*G0_3_1 + 6.16314902029478e-05*G0_3_2 - 0.000112506541078024*G0_3_3 - 0.000197421625993147*G0_3_4 + 1.68878740307391e-05*G0_3_5 + 5.6847913990798e-05*G0_3_6 - 1.07035821321584e-05*G0_3_7 - 0.000115598687027313*G0_3_8 - 0.000329670329670485*G0_3_9 - 4.35807578664927e-05*G0_4_0 - 8.53379424808397e-05*G0_4_1 - 1.75750175750261e-05*G0_4_2 - 0.000197421625993147*G0_4_3 - 0.000284477427334705*G0_4_4 + 0.000119642262499462*G0_4_5 - 0.00017649017649026*G0_4_6 + 0.000113457970600881*G0_4_7 + 0.000126302269159471*G0_4_8 - 0.000119880119880177*G0_4_9 - 7.42643599786802e-06*G0_5_1 - 1.71785886071669e-06*G0_5_2 + 1.68878740307391e-05*G0_5_3 + 0.000119642262499462*G0_5_4 - 6.80272108843855e-05*G0_5_5 + 0.000131059416773764*G0_5_6 - 8.51529422958394e-05*G0_5_7 + 1.1179296893588e-05*G0_5_8 + 0.000142714428428782*G0_5_9 - 1.69407312264536e-05*G0_6_0 - 2.26493083636047e-05*G0_6_1 - 2.13014498728886e-05*G0_6_2 + 5.6847913990798e-05*G0_6_3 - 0.00017649017649026*G0_6_4 + 0.000131059416773764*G0_6_5 - 0.000205033062176016*G0_6_6 + 7.39736454022516e-05*G0_6_7 + 0.000108225108225159*G0_6_8 + 5.70857713715077e-06*G0_6_9 - 1.50643007785939e-06*G0_7_0 - 4.98179069607874e-05*G0_7_1 - 2.83578855007559e-05*G0_7_2 - 1.07035821321584e-05*G0_7_3 + 0.000113457970600881*G0_7_4 - 8.51529422958394e-05*G0_7_5 + 7.39736454022516e-05*G0_7_6 - 0.00020836306550602*G0_7_7 - 7.13572142143856e-06*G0_7_8 + 1.71257314114542e-05*G0_7_9 + 1.42714428428781e-05*G0_8_0 + 0.000144115144115212*G0_8_1 - 4.58007600864958e-05*G0_8_2 - 0.000115598687027313*G0_8_3 + 0.000126302269159471*G0_8_4 + 1.1179296893588e-05*G0_8_5 + 0.000108225108225159*G0_8_6 - 7.13572142143867e-06*G0_8_7 - 0.00117810760667959*G0_8_8 - 0.000603682032253744*G0_8_9 - 5.50243407386525e-05*G0_9_0 + 0.0001170258313116*G0_9_1 - 3.98014683729156e-05*G0_9_2 - 0.000329670329670485*G0_9_3 - 0.000119880119880177*G0_9_4 + 0.000142714428428782*G0_9_5 + 5.70857713715073e-06*G0_9_6 + 1.71257314114542e-05*G0_9_7 - 0.000603682032253744*G0_9_8 - 0.000950478093335683*G0_9_9;
    A[86] = A[170];
    A[57] = A[139] - 6.16667283334257e-06*G0_0_0 + 1.4095252190493e-07*G0_0_1 - 2.9952410904806e-06*G0_0_2 - 0.000117025831311601*G0_0_3 - 2.85428856857567e-06*G0_0_4 - 3.45686059971938e-05*G0_0_6 + 3.01286015571872e-05*G0_0_7 - 1.45885860171644e-05*G0_0_8 - 0.000119880119880176*G0_0_9 + 1.40952521904934e-07*G0_1_0 + 4.78533811867367e-05*G0_1_1 - 8.24572253144073e-06*G0_1_2 - 7.92857935715457e-06*G0_1_3 + 1.49057291914505e-05*G0_1_4 + 7.70657913515418e-05*G0_1_5 + 7.29429300858205e-06*G0_1_7 + 4.34486148772067e-05*G0_1_8 + 0.000159840159840235*G0_1_9 - 2.9952410904806e-06*G0_2_0 - 8.24572253144073e-06*G0_2_1 - 2.7027646075278e-05*G0_2_2 - 4.24971853543481e-05*G0_2_3 - 7.29429300858228e-06*G0_2_4 + 3.13971742543319e-05*G0_2_5 - 5.89886304172296e-05*G0_2_6 + 1.99800199800292e-05*G0_2_7 - 3.71057513914832e-05*G0_2_8 - 0.000108462965605874*G0_2_9 - 0.000117025831311601*G0_3_0 - 7.92857935715457e-06*G0_3_1 - 4.24971853543481e-05*G0_3_2 - 0.00229199372056623*G0_3_3 + 0.000319680319680471*G0_3_4 + 4.28143285286344e-05*G0_3_5 + 4.28143285286345e-05*G0_3_6 + 0.00038532895675771*G0_3_7 - 0.000530897673755067*G0_3_8 - 0.00125017839303612*G0_3_9 - 2.85428856857567e-06*G0_4_0 + 1.49057291914505e-05*G0_4_1 - 7.29429300858227e-06*G0_4_2 + 0.000319680319680471*G0_4_3 - 0.000331097473954773*G0_4_4 + 4.28143285286347e-05*G0_4_5 - 8.56286570572692e-05*G0_4_6 - 4.28143285286342e-05*G0_4_7 + 0.000145568716997357*G0_4_8 + 0.000239760239760353*G0_4_9 + 7.70657913515418e-05*G0_5_1 + 3.13971742543319e-05*G0_5_2 + 4.28143285286344e-05*G0_5_3 + 4.28143285286346e-05*G0_5_4 + 0.000724989296418208*G0_5_5 + 3.13971742543324e-05*G0_5_6 + 0.000222634508348897*G0_5_7 - 0.000196945911231718*G0_5_8 + 0.000753532182103964*G0_5_9 - 3.45686059971938e-05*G0_6_0 - 5.89886304172296e-05*G0_6_2 + 4.28143285286345e-05*G0_6_3 - 8.56286570572693e-05*G0_6_4 + 3.13971742543323e-05*G0_6_5 + 0.000108462965605873*G0_6_6 - 2.56885971171801e-05*G0_6_7 + 4.28143285286344e-05*G0_6_8 + 0.000239760239760353*G0_6_9 + 3.01286015571872e-05*G0_7_0 + 7.29429300858205e-06*G0_7_1 + 1.99800199800292e-05*G0_7_2 + 0.00038532895675771*G0_7_3 - 4.28143285286341e-05*G0_7_4 + 0.000222634508348898*G0_7_5 - 2.56885971171801e-05*G0_7_6 - 1.14171542743045e-05*G0_7_7 - 2.85428856857556e-05*G0_7_8 + 0.000411017553874889*G0_7_9 - 1.45885860171643e-05*G0_8_0 + 4.34486148772067e-05*G0_8_1 - 3.71057513914832e-05*G0_8_2 - 0.000530897673755067*G0_8_3 + 0.000145568716997357*G0_8_4 - 0.000196945911231718*G0_8_5 + 4.28143285286344e-05*G0_8_6 - 2.85428856857556e-05*G0_8_7 - 0.000122734408448753*G0_8_8 - 0.000770657913515419*G0_8_9 - 0.000119880119880176*G0_9_0 + 0.000159840159840235*G0_9_1 - 0.000108462965605874*G0_9_2 - 0.00125017839303612*G0_9_3 + 0.000239760239760353*G0_9_4 + 0.000753532182103964*G0_9_5 + 0.000239760239760353*G0_9_6 + 0.000411017553874889*G0_9_7 - 0.000770657913515419*G0_9_8 - 0.000513771942343619*G0_9_9;
    A[153] = A[57] - 3.77400377400554e-05*G0_0_0 - 3.77047996095792e-05*G0_0_1 - 6.73048292096225e-06*G0_0_2 - 8.0871509442976e-05*G0_0_3 + 4.09114694829173e-05*G0_0_4 + 6.12086326372328e-05*G0_0_6 + 9.83143840287178e-06*G0_0_7 - 8.24572253144069e-05*G0_0_8 + 9.51429522858537e-06*G0_0_9 - 3.77047996095792e-05*G0_1_0 - 0.00039713373046725*G0_1_1 - 3.84095622191041e-05*G0_1_2 - 0.000410700410700603*G0_1_3 + 0.000224854510568902*G0_1_4 - 9.99000999001468e-05*G0_1_5 + 2.94943152086148e-05*G0_1_6 + 0.000136054421768772*G0_1_7 - 0.000366300366300538*G0_1_8 - 0.000232148803577484*G0_1_9 - 6.73048292096225e-06*G0_2_0 - 3.84095622191041e-05*G0_2_1 + 2.17419265038417e-05*G0_2_2 - 0.00011290297004588*G0_2_3 + 0.000143031571603068*G0_2_4 - 5.8037200894371e-05*G0_2_5 + 0.000112268683697308*G0_2_6 + 2.85428856857572e-06*G0_2_7 - 5.80372008943711e-05*G0_2_8 + 6.27943485086639e-05*G0_2_9 - 8.0871509442976e-05*G0_3_0 - 0.000410700410700603*G0_3_1 - 0.00011290297004588*G0_3_2 - 0.000522334808049338*G0_3_3 + 0.000205508776937444*G0_3_4 + 0.000231197374054626*G0_3_5 - 8.56286570572717e-06*G0_3_6 + 0.000322534608249045*G0_3_7 - 0.000576566290852276*G0_3_8 + 5.13771942343615e-05*G0_3_9 + 4.09114694829173e-05*G0_4_0 + 0.000224854510568902*G0_4_1 + 0.000143031571603068*G0_4_2 + 0.000205508776937444*G0_4_3 - 0.000171257314114537*G0_4_4 - 4.28143285286347e-05*G0_4_5 + 5.13771942343617e-05*G0_4_6 - 0.000105608677037298*G0_4_7 + 0.000254031682603231*G0_4_8 - 0.000102754388468723*G0_4_9 - 9.99000999001468e-05*G0_5_1 - 5.8037200894371e-05*G0_5_2 + 0.000231197374054626*G0_5_3 - 4.28143285286347e-05*G0_5_4 - 0.00103325246182437*G0_5_5 + 2.85428856857505e-06*G0_5_6 - 0.000450977593834948*G0_5_7 + 0.000379620379620558*G0_5_8 - 0.000787783644926871*G0_5_9 + 6.12086326372328e-05*G0_6_0 + 2.94943152086148e-05*G0_6_1 + 0.000112268683697308*G0_6_2 - 8.56286570572715e-06*G0_6_3 + 5.13771942343617e-05*G0_6_4 + 2.85428856857509e-06*G0_6_5 - 0.00014271442842878*G0_6_6 + 7.13572142143902e-05*G0_6_7 + 2.85428856857567e-06*G0_6_8 - 0.000171257314114538*G0_6_9 + 9.83143840287179e-06*G0_7_0 + 0.000136054421768772*G0_7_1 + 2.85428856857572e-06*G0_7_2 + 0.000322534608249045*G0_7_3 - 0.000105608677037298*G0_7_4 - 0.000450977593834948*G0_7_5 + 7.13572142143902e-05*G0_7_6 - 0.000422434708149192*G0_7_7 + 0.000536606250892217*G0_7_8 - 0.000171257314114536*G0_7_9 - 8.2457225314407e-05*G0_8_0 - 0.000366300366300538*G0_8_1 - 5.80372008943711e-05*G0_8_2 - 0.000576566290852276*G0_8_3 + 0.000254031682603231*G0_8_4 + 0.000379620379620558*G0_8_5 + 2.85428856857567e-06*G0_8_6 + 0.000536606250892217*G0_8_7 - 0.00084201512772981*G0_8_8 + 0.000188383045525991*G0_8_9 + 9.51429522858537e-06*G0_9_0 - 0.000232148803577484*G0_9_1 + 6.27943485086639e-05*G0_9_2 + 5.13771942343615e-05*G0_9_3 - 0.000102754388468723*G0_9_4 - 0.000787783644926871*G0_9_5 - 0.000171257314114538*G0_9_6 - 0.000171257314114536*G0_9_7 + 0.000188383045525991*G0_9_8 - 0.000924789496218498*G0_9_9;
    A[154] = A[70];
    A[15] = A[1];
    A[8] = A[76] + 0.000212644498358884*G0_0_0 - 1.24478695907326e-05*G0_0_3 - 1.66500166500245e-06*G0_0_4 + 0.000160474446188807*G0_0_5 - 8.20607963465491e-05*G0_0_6 + 0.000108383679812302*G0_0_7 - 5.77993435136563e-05*G0_0_8 + 2.2992880135748e-05*G0_0_9 - 0.000212644498358884*G0_1_1 - 0.000160474446188807*G0_1_3 + 8.20607963465492e-05*G0_1_4 + 1.24478695907326e-05*G0_1_5 + 1.66500166500245e-06*G0_1_6 + 5.77993435136565e-05*G0_1_7 - 0.000108383679812302*G0_1_8 - 2.29928801357481e-05*G0_1_9 - 3.2295746581476e-05*G0_2_3 + 5.7455771741513e-05*G0_2_4 + 3.22957465814761e-05*G0_2_5 - 5.74557717415131e-05*G0_2_6 - 1.24478695907326e-05*G0_3_0 - 0.000160474446188807*G0_3_1 - 3.2295746581476e-05*G0_3_2 - 0.000186955901241703*G0_3_3 + 2.64021692593245e-05*G0_3_4 - 4.99500499500727e-06*G0_3_6 + 3.73436087721978e-05*G0_3_7 - 5.89886304172297e-05*G0_3_8 - 5.70857713715127e-06*G0_3_9 - 1.66500166500245e-06*G0_4_0 + 8.20607963465492e-05*G0_4_1 + 5.7455771741513e-05*G0_4_2 + 2.64021692593245e-05*G0_4_3 + 4.2814328528633e-06*G0_4_4 + 4.99500499500742e-06*G0_4_5 - 8.32500832501228e-06*G0_4_7 + 2.16450216450319e-05*G0_4_8 - 9.99000999001465e-06*G0_4_9 + 0.000160474446188807*G0_5_0 + 1.24478695907326e-05*G0_5_1 + 3.22957465814761e-05*G0_5_2 + 4.99500499500742e-06*G0_5_4 + 0.000186955901241703*G0_5_5 - 2.64021692593242e-05*G0_5_6 + 5.89886304172293e-05*G0_5_7 - 3.73436087721977e-05*G0_5_8 + 5.70857713715125e-06*G0_5_9 - 8.20607963465491e-05*G0_6_0 + 1.66500166500245e-06*G0_6_1 - 5.74557717415131e-05*G0_6_2 - 4.99500499500727e-06*G0_6_3 - 2.64021692593243e-05*G0_6_5 - 4.28143285286384e-06*G0_6_6 - 2.16450216450317e-05*G0_6_7 + 8.32500832501223e-06*G0_6_8 + 9.99000999001461e-06*G0_6_9 + 0.000108383679812302*G0_7_0 + 5.77993435136565e-05*G0_7_1 + 3.73436087721978e-05*G0_7_3 - 8.32500832501228e-06*G0_7_4 + 5.89886304172293e-05*G0_7_5 - 2.16450216450317e-05*G0_7_6 + 1.56985871271657e-05*G0_7_7 - 2.56885971171806e-05*G0_7_9 - 5.77993435136563e-05*G0_8_0 - 0.000108383679812302*G0_8_1 - 5.89886304172297e-05*G0_8_3 + 2.16450216450319e-05*G0_8_4 - 3.73436087721977e-05*G0_8_5 + 8.32500832501223e-06*G0_8_6 - 1.56985871271662e-05*G0_8_8 + 2.56885971171805e-05*G0_8_9 + 2.2992880135748e-05*G0_9_0 - 2.29928801357481e-05*G0_9_1 - 5.70857713715127e-06*G0_9_3 - 9.99000999001464e-06*G0_9_4 + 5.70857713715125e-06*G0_9_5 + 9.99000999001462e-06*G0_9_6 - 2.56885971171806e-05*G0_9_7 + 2.56885971171805e-05*G0_9_8;
    A[7] = -A[8] - 0.000263625263625388*G0_0_0 - 1.37957280814488e-05*G0_0_1 - 2.36359760169395e-05*G0_0_2 + 4.3078614507206e-06*G0_0_4 - 0.000193325193325284*G0_0_5 + 7.86250786251154e-05*G0_0_6 - 0.000111925111925164*G0_0_7 + 5.45750545750801e-05*G0_0_8 - 2.22000222000326e-05*G0_0_9 - 1.37957280814488e-05*G0_1_0 + 2.70893128036115e-07*G0_1_4 - 8.71483014340563e-06*G0_1_5 + 7.57840043554683e-06*G0_1_6 - 6.93089978804586e-06*G0_1_7 - 3.56786071071958e-07*G0_1_9 - 2.36359760169395e-05*G0_2_0 - 2.41630797186467e-05*G0_2_2 + 7.78322206894005e-06*G0_2_3 - 1.78657321514549e-05*G0_2_4 - 4.83643340786419e-06*G0_2_5 - 4.26953998382772e-05*G0_2_6 - 5.74161288447269e-06*G0_2_7 - 1.81564467278839e-05*G0_2_9 + 7.78322206894005e-06*G0_3_2 + 6.66000666000951e-06*G0_3_3 + 1.43309071880569e-05*G0_3_4 - 7.01679273108176e-06*G0_3_5 - 2.37857380714633e-06*G0_3_6 + 4.3078614507206e-06*G0_4_0 + 2.70893128036115e-07*G0_4_1 - 1.78657321514549e-05*G0_4_2 + 1.43309071880569e-05*G0_4_3 + 2.84239569953986e-05*G0_4_4 + 7.4330431473325e-06*G0_4_5 - 5.05446934018623e-06*G0_4_6 - 8.02768659911894e-06*G0_4_7 + 3.96032538889867e-05*G0_4_9 - 0.000193325193325284*G0_5_0 - 8.71483014340563e-06*G0_5_1 - 4.8364334078642e-06*G0_5_2 - 7.01679273108175e-06*G0_5_3 + 7.4330431473325e-06*G0_5_4 - 0.000330502830502986*G0_5_5 + 0.00015472622615487*G0_5_6 - 8.40825840826233e-05*G0_5_7 + 4.65011179297111e-05*G0_5_8 - 2.64021692593243e-05*G0_5_9 + 7.86250786251153e-05*G0_6_0 + 7.57840043554683e-06*G0_6_1 - 4.26953998382771e-05*G0_6_2 - 2.37857380714633e-06*G0_6_3 - 5.05446934018623e-06*G0_6_4 + 0.00015472622615487*G0_6_5 + 1.16550116550171e-05*G0_6_6 + 3.75814661529122e-05*G0_6_7 - 3.09214594929025e-05*G0_6_8 + 5.92264877979442e-05*G0_6_9 - 0.000111925111925164*G0_7_0 - 6.93089978804586e-06*G0_7_1 - 5.74161288447268e-06*G0_7_2 - 8.02768659911894e-06*G0_7_4 - 8.40825840826233e-05*G0_7_5 + 3.75814661529122e-05*G0_7_6 - 7.57575757576113e-05*G0_7_7 + 4.59064744779246e-05*G0_7_8 + 5.45750545750801e-05*G0_8_0 + 4.65011179297111e-05*G0_8_5 - 3.09214594929025e-05*G0_8_6 + 4.59064744779246e-05*G0_8_7 - 2.18828790257465e-05*G0_8_8 - 2.14071642643181e-06*G0_8_9 - 2.22000222000326e-05*G0_9_0 - 3.56786071071959e-07*G0_9_1 - 1.81564467278839e-05*G0_9_2 + 3.96032538889867e-05*G0_9_4 - 2.64021692593243e-05*G0_9_5 + 5.92264877979442e-05*G0_9_6 - 2.14071642643181e-06*G0_9_8 + 0.000132724418438766*G0_9_9;
    A[186] = -A[8] + 0.000605567272234223*G0_0_0 + 6.8379592189148e-05*G0_0_1 + 7.90038885277351e-05*G0_0_2 - 4.38186152472073e-05*G0_0_3 - 0.000113431542003024*G0_0_4 + 0.000963850963851416*G0_0_5 - 0.00046916046916069*G0_0_6 + 0.000634550634550932*G0_0_7 - 0.000314500314500462*G0_0_8 + 0.000117660117660173*G0_0_9 + 6.8379592189148e-05*G0_1_0 + 2.92652673605193e-05*G0_1_1 + 3.28566201582229e-05*G0_1_2 - 8.26422254994073e-05*G0_1_4 + 0.000501429787144309*G0_1_5 - 0.000248772391629652*G0_1_6 + 0.00035728821443124*G0_1_7 - 0.000169010883296677*G0_1_8 + 0.000262118833547529*G0_1_9 + 7.90038885277351e-05*G0_2_0 + 3.28566201582229e-05*G0_2_1 - 6.64180029259709e-05*G0_2_2 + 2.59000259000384e-06*G0_2_3 - 9.66758109615709e-05*G0_2_4 + 0.000547389118817947*G0_2_5 - 0.000319046033331898*G0_2_6 + 0.000354909640624093*G0_2_7 - 0.000185105899391701*G0_2_8 + 0.000301286015571871*G0_2_9 - 4.38186152472073e-05*G0_3_0 + 2.59000259000384e-06*G0_3_2 - 0.000441463298606363*G0_3_3 + 0.000274249559963975*G0_3_4 - 0.00051615051615076*G0_3_5 + 0.000405784691499169*G0_3_6 - 0.000209076637648165*G0_3_7 - 0.000368203225346256*G0_3_9 - 0.000113431542003024*G0_4_0 - 8.26422254994073e-05*G0_4_1 - 9.66758109615709e-05*G0_4_2 + 0.000274249559963975*G0_4_3 - 0.000988059559488596*G0_4_4 - 2.37857380714309e-07*G0_4_5 - 0.000405546834118454*G0_4_6 - 0.000191950906236711*G0_4_7 + 0.000214785214785316*G0_4_8 - 0.000903382331954185*G0_4_9 + 0.000963850963851416*G0_5_0 + 0.000501429787144309*G0_5_1 + 0.000547389118817947*G0_5_2 - 0.00051615051615076*G0_5_3 - 2.37857380714254e-07*G0_5_4 + 0.00655011655011963*G0_5_5 - 0.00192141192141282*G0_5_6 + 0.00325008325008478*G0_5_7 - 0.00184482184482271*G0_5_8 + 0.00333666333666491*G0_5_9 - 0.00046916046916069*G0_6_0 - 0.000248772391629652*G0_6_1 - 0.000319046033331898*G0_6_2 + 0.000405784691499169*G0_6_3 - 0.000405546834118454*G0_6_4 - 0.00192141192141282*G0_6_5 + 0.000195043052186001*G0_6_6 - 0.00140526140526207*G0_6_7 + 0.000821083678226922*G0_6_8 - 0.00171542742971395*G0_6_9 + 0.000634550634550932*G0_7_0 + 0.00035728821443124*G0_7_1 + 0.000354909640624093*G0_7_2 - 0.000209076637648165*G0_7_3 - 0.000191950906236711*G0_7_4 + 0.00325008325008478*G0_7_5 - 0.00140526140526207*G0_7_6 + 0.00323343323343475*G0_7_7 - 0.00142191142191209*G0_7_8 + 0.00245754245754362*G0_7_9 - 0.000314500314500462*G0_8_0 - 0.000169010883296677*G0_8_1 - 0.000185105899391701*G0_8_2 + 0.000214785214785316*G0_8_4 - 0.00184482184482271*G0_8_5 + 0.000821083678226922*G0_8_6 - 0.00142191142191209*G0_8_7 + 0.000614623471766618*G0_8_8 - 0.00121592693021322*G0_8_9 + 0.000117660117660173*G0_9_0 + 0.000262118833547529*G0_9_1 + 0.000301286015571872*G0_9_2 - 0.000368203225346256*G0_9_3 - 0.000903382331954185*G0_9_4 + 0.00333666333666491*G0_9_5 - 0.00171542742971395*G0_9_6 + 0.00245754245754362*G0_9_7 - 0.00121592693021322*G0_9_8 - 8.56286570572676e-05*G0_9_9;
    A[218] = A[186] - 0.000393539441158673*G0_0_0 - 2.08609732419354e-05*G0_0_1 - 0.00013700585129163*G0_0_3 + 0.000441463298606363*G0_0_4 - 0.0010097838669272*G0_0_5 + 0.000862629434058411*G0_0_6 - 0.000578469149897993*G0_0_7 + 0.000243565957851787*G0_0_8 + 0.000213120213120314*G0_0_9 - 2.08609732419353e-05*G0_1_0 + 2.08609732419355e-05*G0_1_2 - 0.000162377305234524*G0_1_3 + 0.000416091844663469*G0_1_4 - 0.000715475001189623*G0_1_5 + 0.000715475001189623*G0_1_6 - 0.000416091844663469*G0_1_7 + 0.000162377305234525*G0_1_8 + 2.08609732419355e-05*G0_2_1 + 0.000393539441158674*G0_2_2 - 0.000243565957851787*G0_2_3 + 0.000578469149897993*G0_2_4 - 0.000862629434058411*G0_2_5 + 0.0010097838669272*G0_2_6 - 0.000441463298606363*G0_2_7 + 0.00013700585129163*G0_2_8 - 0.000213120213120313*G0_2_9 - 0.00013700585129163*G0_3_0 - 0.000162377305234524*G0_3_1 - 0.000243565957851787*G0_3_2 + 0.00100470957613862*G0_3_3 - 0.00159840159840235*G0_3_4 + 0.00127872127872188*G0_3_5 - 0.00214642500356887*G0_3_6 + 0.000411017553874891*G0_3_7 - 0.000822035107749779*G0_3_9 + 0.000441463298606363*G0_4_0 + 0.000416091844663469*G0_4_1 + 0.000578469149897993*G0_4_2 - 0.00159840159840235*G0_4_3 + 0.00401883830455448*G0_4_4 - 0.00132438989581909*G0_4_5 + 0.00347081489938796*G0_4_6 - 0.00041101755387489*G0_4_8 + 0.00328814043099912*G0_4_9 - 0.0010097838669272*G0_5_0 - 0.000715475001189623*G0_5_1 - 0.000862629434058411*G0_5_2 + 0.00127872127872188*G0_5_3 - 0.00132438989581909*G0_5_4 - 0.00602825745683171*G0_5_5 - 0.00347081489938796*G0_5_7 + 0.00214642500356887*G0_5_8 - 0.00493221064649868*G0_5_9 + 0.000862629434058411*G0_6_0 + 0.000715475001189624*G0_6_1 + 0.0010097838669272*G0_6_2 - 0.00214642500356887*G0_6_3 + 0.00347081489938796*G0_6_4 + 0.00602825745683172*G0_6_6 + 0.00132438989581909*G0_6_7 - 0.00127872127872188*G0_6_8 + 0.00493221064649868*G0_6_9 - 0.000578469149897993*G0_7_0 - 0.000416091844663469*G0_7_1 - 0.000441463298606363*G0_7_2 + 0.000411017553874891*G0_7_3 - 0.00347081489938796*G0_7_5 + 0.00132438989581909*G0_7_6 - 0.00401883830455448*G0_7_7 + 0.00159840159840235*G0_7_8 - 0.00328814043099912*G0_7_9 + 0.000243565957851787*G0_8_0 + 0.000162377305234525*G0_8_1 + 0.00013700585129163*G0_8_2 - 0.00041101755387489*G0_8_4 + 0.00214642500356887*G0_8_5 - 0.00127872127872188*G0_8_6 + 0.00159840159840235*G0_8_7 - 0.00100470957613862*G0_8_8 + 0.000822035107749782*G0_8_9 + 0.000213120213120313*G0_9_0 - 0.000213120213120313*G0_9_2 - 0.000822035107749779*G0_9_3 + 0.00328814043099912*G0_9_4 - 0.00493221064649868*G0_9_5 + 0.00493221064649868*G0_9_6 - 0.00328814043099912*G0_9_7 + 0.000822035107749782*G0_9_8;
    A[89] = A[218] + 2.98819346438534e-05*G0_0_0 - 1.32495370590672e-05*G0_0_2 - 4.56686170972101e-05*G0_0_3 + 0.00013700585129163*G0_0_4 + 4.82057624914994e-05*G0_0_5 - 0.000142080142080209*G0_0_6 + 4.56686170972099e-05*G0_0_7 - 4.56686170972099e-05*G0_0_8 - 4.566861709721e-05*G0_0_9 - 2.98819346438534e-05*G0_1_1 + 1.32495370590671e-05*G0_1_2 - 4.82057624914995e-05*G0_1_3 + 0.000142080142080209*G0_1_4 + 4.56686170972099e-05*G0_1_5 - 0.00013700585129163*G0_1_6 + 4.566861709721e-05*G0_1_7 - 4.56686170972099e-05*G0_1_8 + 4.566861709721e-05*G0_1_9 - 1.32495370590671e-05*G0_2_0 + 1.32495370590671e-05*G0_2_1 - 0.000106560106560157*G0_2_3 + 0.000266400266400392*G0_2_4 + 0.000106560106560157*G0_2_5 - 0.000266400266400392*G0_2_6 + 4.566861709721e-05*G0_2_7 - 4.56686170972099e-05*G0_2_8 - 4.56686170972101e-05*G0_3_0 - 4.82057624914995e-05*G0_3_1 - 0.000106560106560157*G0_3_2 - 0.000228343085486049*G0_3_3 - 0.000570857713715125*G0_3_4 + 0.000411017553874889*G0_3_6 + 0.00013700585129163*G0_3_7 - 0.00027401170258326*G0_3_8 - 0.00041101755387489*G0_3_9 + 0.00013700585129163*G0_4_0 + 0.000142080142080209*G0_4_1 + 0.000266400266400392*G0_4_2 - 0.000570857713715125*G0_4_3 + 0.0031968031968047*G0_4_4 - 0.00041101755387489*G0_4_5 - 0.00027401170258326*G0_4_7 + 0.00013700585129163*G0_4_8 + 0.00082203510774978*G0_4_9 + 4.82057624914994e-05*G0_5_0 + 4.56686170972099e-05*G0_5_1 + 0.000106560106560157*G0_5_2 - 0.00041101755387489*G0_5_4 + 0.000228343085486049*G0_5_5 + 0.000570857713715126*G0_5_6 + 0.00027401170258326*G0_5_7 - 0.00013700585129163*G0_5_8 + 0.000411017553874889*G0_5_9 - 0.000142080142080209*G0_6_0 - 0.00013700585129163*G0_6_1 - 0.000266400266400392*G0_6_2 + 0.000411017553874889*G0_6_3 + 0.000570857713715126*G0_6_5 - 0.0031968031968047*G0_6_6 - 0.000137005851291629*G0_6_7 + 0.00027401170258326*G0_6_8 - 0.00082203510774978*G0_6_9 + 4.56686170972099e-05*G0_7_0 + 4.56686170972099e-05*G0_7_1 + 4.566861709721e-05*G0_7_2 + 0.00013700585129163*G0_7_3 - 0.00027401170258326*G0_7_4 + 0.00027401170258326*G0_7_5 - 0.000137005851291629*G0_7_6 + 0.00041101755387489*G0_7_7 + 0.00041101755387489*G0_7_9 - 4.56686170972099e-05*G0_8_0 - 4.56686170972099e-05*G0_8_1 - 4.56686170972099e-05*G0_8_2 - 0.00027401170258326*G0_8_3 + 0.00013700585129163*G0_8_4 - 0.00013700585129163*G0_8_5 + 0.00027401170258326*G0_8_6 - 0.00041101755387489*G0_8_8 - 0.00041101755387489*G0_8_9 - 4.566861709721e-05*G0_9_0 + 4.566861709721e-05*G0_9_1 - 0.000411017553874889*G0_9_3 + 0.00082203510774978*G0_9_4 + 0.000411017553874889*G0_9_5 - 0.00082203510774978*G0_9_6 + 0.00041101755387489*G0_9_7 - 0.00041101755387489*G0_9_8;
    A[215] = A[89];
    A[198] = A[186] - 0.00036365750651482*G0_0_0 - 3.41105103010024e-05*G0_0_2 + 0.000532800532800783*G0_0_3 - 0.00013700585129163*G0_0_4 - 0.000799200799201174*G0_0_5 + 0.000304457447314733*G0_0_6 - 0.000695177838035307*G0_0_7 + 0.000613989185418046*G0_0_8 + 0.000167451596023104*G0_0_9 + 0.00036365750651482*G0_1_1 + 3.41105103010026e-05*G0_1_2 + 0.000799200799201175*G0_1_3 - 0.000304457447314733*G0_1_4 - 0.000532800532800783*G0_1_5 + 0.00013700585129163*G0_1_6 - 0.000613989185418046*G0_1_7 + 0.000695177838035308*G0_1_8 - 0.000167451596023104*G0_1_9 - 3.41105103010024e-05*G0_2_0 + 3.41105103010026e-05*G0_2_1 + 0.000512503369646467*G0_2_3 - 0.000164914450628814*G0_2_4 - 0.000512503369646467*G0_2_5 + 0.000164914450628814*G0_2_6 - 0.000532800532800783*G0_2_7 + 0.000532800532800783*G0_2_8 + 0.000532800532800784*G0_3_0 + 0.000799200799201175*G0_3_1 + 0.000512503369646467*G0_3_2 + 0.00680462394748429*G0_3_3 - 0.00216925931211747*G0_3_4 - 0.00041101755387489*G0_3_6 - 0.00159840159840235*G0_3_7 + 0.0031968031968047*G0_3_8 + 0.00369915798487401*G0_3_9 - 0.00013700585129163*G0_4_0 - 0.000304457447314733*G0_4_1 - 0.000164914450628814*G0_4_2 - 0.00216925931211747*G0_4_3 + 0.00118738404452746*G0_4_4 + 0.00041101755387489*G0_4_5 + 0.00100470957613862*G0_4_7 - 0.00159840159840235*G0_4_8 - 0.000822035107749779*G0_4_9 - 0.000799200799201174*G0_5_0 - 0.000532800532800783*G0_5_1 - 0.000512503369646468*G0_5_2 + 0.00041101755387489*G0_5_4 - 0.00680462394748428*G0_5_5 + 0.00216925931211747*G0_5_6 - 0.0031968031968047*G0_5_7 + 0.00159840159840235*G0_5_8 - 0.00369915798487401*G0_5_9 + 0.000304457447314733*G0_6_0 + 0.00013700585129163*G0_6_1 + 0.000164914450628814*G0_6_2 - 0.00041101755387489*G0_6_3 + 0.00216925931211747*G0_6_5 - 0.00118738404452746*G0_6_6 + 0.00159840159840235*G0_6_7 - 0.00100470957613862*G0_6_8 + 0.000822035107749782*G0_6_9 - 0.000695177838035308*G0_7_0 - 0.000613989185418046*G0_7_1 - 0.000532800532800783*G0_7_2 - 0.00159840159840235*G0_7_3 + 0.00100470957613862*G0_7_4 - 0.0031968031968047*G0_7_5 + 0.00159840159840235*G0_7_6 - 0.00260311117454097*G0_7_7 - 0.00369915798487401*G0_7_9 + 0.000613989185418046*G0_8_0 + 0.000695177838035308*G0_8_1 + 0.000532800532800783*G0_8_2 + 0.0031968031968047*G0_8_3 - 0.00159840159840235*G0_8_4 + 0.00159840159840235*G0_8_5 - 0.00100470957613862*G0_8_6 + 0.00260311117454097*G0_8_8 + 0.00369915798487401*G0_8_9 + 0.000167451596023104*G0_9_0 - 0.000167451596023104*G0_9_1 + 0.00369915798487401*G0_9_3 - 0.000822035107749779*G0_9_4 - 0.00369915798487401*G0_9_5 + 0.000822035107749782*G0_9_6 - 0.00369915798487401*G0_9_7 + 0.00369915798487401*G0_9_8;
    A[37] = A[107];
    A[148] = A[149] + 3.94667061333913e-05*G0_0_0 + 2.48076438552745e-05*G0_0_1 + 2.02971631543156e-05*G0_0_2 + 0.000223268794697471*G0_0_3 - 0.000142080142080209*G0_0_4 - 6.08914894629467e-05*G0_0_6 + 0.000152228723657367*G0_0_8 + 0.000121782978925894*G0_0_9 + 2.48076438552745e-05*G0_1_0 + 0.000158994444708805*G0_1_1 + 3.49562254324324e-05*G0_1_2 + 0.000243565957851786*G0_1_3 - 0.00018267446838884*G0_1_4 + 1.01485815771576e-05*G0_1_5 - 5.07429078857889e-05*G0_1_6 - 3.04457447314735e-05*G0_1_7 + 0.000334903192046207*G0_1_8 + 0.00018267446838884*G0_1_9 + 2.02971631543156e-05*G0_2_0 + 3.49562254324324e-05*G0_2_1 + 0.000152228723657367*G0_2_3 - 6.08914894629465e-05*G0_2_4 - 1.01485815771578e-05*G0_2_5 - 4.05943263086309e-05*G0_2_6 + 1.01485815771575e-05*G0_2_7 + 4.05943263086311e-05*G0_2_8 + 0.000223268794697471*G0_3_0 + 0.000243565957851786*G0_3_1 + 0.000152228723657367*G0_3_2 + 0.00200941915227724*G0_3_3 - 0.0004566861709721*G0_3_4 - 0.00027401170258326*G0_3_5 - 0.000822035107749781*G0_3_7 + 0.00109604681033304*G0_3_8 + 0.00109604681033304*G0_3_9 - 0.000142080142080209*G0_4_0 - 0.00018267446838884*G0_4_1 - 6.08914894629465e-05*G0_4_2 - 0.0004566861709721*G0_4_3 - 0.000456686170972099*G0_4_4 + 0.00027401170258326*G0_4_5 - 0.00027401170258326*G0_4_6 + 0.00027401170258326*G0_4_7 - 0.00027401170258326*G0_4_8 - 0.000548023405166519*G0_4_9 + 1.01485815771576e-05*G0_5_1 - 1.01485815771578e-05*G0_5_2 - 0.00027401170258326*G0_5_3 + 0.00027401170258326*G0_5_4 - 0.00036534893677768*G0_5_5 + 0.00018267446838884*G0_5_6 + 0.000365348936777679*G0_5_7 - 0.00018267446838884*G0_5_8 - 6.08914894629467e-05*G0_6_0 - 5.07429078857889e-05*G0_6_1 - 4.05943263086309e-05*G0_6_2 - 0.00027401170258326*G0_6_4 + 0.00018267446838884*G0_6_5 - 9.13372341944207e-05*G0_6_6 - 0.00018267446838884*G0_6_7 + 9.13372341944202e-05*G0_6_8 - 3.04457447314734e-05*G0_7_1 + 1.01485815771575e-05*G0_7_2 - 0.00082203510774978*G0_7_3 + 0.00027401170258326*G0_7_4 + 0.000365348936777679*G0_7_5 - 0.00018267446838884*G0_7_6 + 0.00219209362066608*G0_7_7 - 0.00109604681033304*G0_7_8 + 0.000152228723657367*G0_8_0 + 0.000334903192046207*G0_8_1 + 4.05943263086311e-05*G0_8_2 + 0.00109604681033304*G0_8_3 - 0.00027401170258326*G0_8_4 - 0.00018267446838884*G0_8_5 + 9.13372341944202e-05*G0_8_6 - 0.00109604681033304*G0_8_7 + 0.00054802340516652*G0_8_8 + 0.000121782978925894*G0_9_0 + 0.00018267446838884*G0_9_1 + 0.00109604681033304*G0_9_3 - 0.000548023405166519*G0_9_4;
    A[123] = -A[94] + 2.74505036409925e-05*G0_0_0 + 3.98190874381536e-06*G0_0_1 + 1.19809643619224e-05*G0_0_2 + 1.51171579743079e-05*G0_0_3 + 5.82486296772285e-05*G0_0_4 + 1.58571587143043e-06*G0_0_5 + 6.02572031143746e-05*G0_0_6 + 0.00010212010212015*G0_0_9 + 3.98190874381536e-06*G0_1_0 + 1.37311248422424e-05*G0_1_1 + 1.0031121142237e-05*G0_1_2 - 5.40200540200793e-05*G0_1_3 + 2.11428782857434e-07*G0_1_4 - 7.71715057429715e-06*G0_1_5 + 6.9665783951531e-05*G0_1_6 + 1.13114398828737e-05*G0_1_7 - 1.1205725491445e-05*G0_1_8 - 6.34286348572344e-07*G0_1_9 + 1.19809643619224e-05*G0_2_0 + 1.0031121142237e-05*G0_2_1 + 8.04134137467851e-05*G0_2_2 - 4.49286163572089e-05*G0_2_3 - 6.87143544286708e-06*G0_2_4 - 3.73171801743408e-05*G0_2_5 + 0.000119351547923033*G0_2_6 + 1.13114398828737e-05*G0_2_7 - 2.28343085486049e-05*G0_2_9 + 1.51171579743079e-05*G0_3_0 - 5.40200540200793e-05*G0_3_1 - 4.49286163572089e-05*G0_3_2 + 0.000407211835783456*G0_3_3 + 7.61143618286829e-05*G0_3_4 + 8.56286570572701e-06*G0_3_5 - 0.00024832310546608*G0_3_6 - 8.46772275344102e-05*G0_3_7 + 0.000123685837971611*G0_3_8 + 0.000171257314114537*G0_3_9 + 5.82486296772285e-05*G0_4_0 + 2.11428782857434e-07*G0_4_1 - 6.87143544286708e-06*G0_4_2 + 7.61143618286829e-05*G0_4_3 + 0.000575614861329418*G0_4_4 - 0.000214071642643172*G0_4_5 + 0.000462394748109251*G0_4_6 - 8.46772275344103e-05*G0_4_7 - 3.90086104372002e-05*G0_4_8 + 0.000496646210932159*G0_4_9 + 1.58571587143043e-06*G0_5_0 - 7.71715057429715e-06*G0_5_1 - 3.73171801743408e-05*G0_5_2 + 8.56286570572698e-06*G0_5_3 - 0.000214071642643172*G0_5_4 + 0.000148423005565931*G0_5_5 - 0.000382474668189134*G0_5_6 + 8.94343751487027e-05*G0_5_7 - 1.6174301888595e-05*G0_5_8 - 0.00027401170258326*G0_5_9 + 6.02572031143746e-05*G0_6_0 + 6.9665783951531e-05*G0_6_1 + 0.000119351547923033*G0_6_2 - 0.00024832310546608*G0_6_3 + 0.000462394748109251*G0_6_4 - 0.000382474668189134*G0_6_5 + 0.00139003853289633*G0_6_6 - 7.32600732601078e-05*G0_6_7 - 8.46772275344101e-05*G0_6_8 + 0.000565149136577974*G0_6_9 + 1.13114398828737e-05*G0_7_1 + 1.13114398828737e-05*G0_7_2 - 8.46772275344102e-05*G0_7_3 - 8.46772275344103e-05*G0_7_4 + 8.94343751487027e-05*G0_7_5 - 7.32600732601078e-05*G0_7_6 + 8.94343751487027e-05*G0_7_7 - 7.32600732601077e-05*G0_7_8 - 0.000159840159840235*G0_7_9 - 1.1205725491445e-05*G0_8_1 + 0.000123685837971611*G0_8_3 - 3.90086104372002e-05*G0_8_4 - 1.6174301888595e-05*G0_8_5 - 8.46772275344101e-05*G0_8_6 - 7.32600732601077e-05*G0_8_7 + 0.000157937300794518*G0_8_8 + 7.99200799201177e-05*G0_8_9 + 0.00010212010212015*G0_9_0 - 6.3428634857233e-07*G0_9_1 - 2.28343085486049e-05*G0_9_2 + 0.000171257314114537*G0_9_3 + 0.000496646210932159*G0_9_4 - 0.00027401170258326*G0_9_5 + 0.000565149136577974*G0_9_6 - 0.000159840159840235*G0_9_7 + 7.99200799201177e-05*G0_9_8 + 0.000924789496218502*G0_9_9;
    A[50] = A[123] - 1.83238278476458e-06*G0_0_0 + 2.65930424660708e-05*G0_0_1 + 3.61778139556087e-06*G0_0_2 + 6.3428634857236e-05*G0_0_3 - 3.29828901257627e-05*G0_0_4 - 5.49714835429373e-06*G0_0_5 - 4.86286200572145e-05*G0_0_6 - 3.55200355200522e-05*G0_0_7 + 6.59657802515255e-05*G0_0_8 + 7.6114361828683e-06*G0_0_9 + 2.65930424660709e-05*G0_1_0 + 0.000347635903191622*G0_1_1 + 6.65295903391454e-05*G0_1_2 + 0.00050150907293788*G0_1_3 - 0.000163223020365954*G0_1_4 - 7.61143618286835e-06*G0_1_5 - 4.44000444000653e-05*G0_1_6 - 0.000122205836491608*G0_1_7 + 0.000235531664103203*G0_1_8 + 8.11886526172622e-05*G0_1_9 + 3.61778139556086e-06*G0_2_0 + 6.65295903391454e-05*G0_2_1 + 0.000128266794933522*G0_2_2 + 1.7337160194311e-05*G0_2_3 + 0.000236800236800348*G0_2_4 + 1.14171542743026e-05*G0_2_5 - 8.88000888001307e-05*G0_2_6 - 3.80571809143417e-05*G0_2_7 + 6.72343529486703e-05*G0_2_8 + 4.82057624914995e-05*G0_2_9 + 6.34286348572361e-05*G0_3_0 + 0.00050150907293788*G0_3_1 + 1.7337160194311e-05*G0_3_2 + 0.000974263831407145*G0_3_3 - 0.000783977926835438*G0_3_4 - 4.94743351886441e-05*G0_3_5 + 6.46972075543809e-05*G0_3_6 - 0.000258788830217523*G0_3_7 + 0.000528994814709349*G0_3_8 + 0.000274011702583259*G0_3_9 - 3.29828901257628e-05*G0_4_0 - 0.000163223020365954*G0_4_1 + 0.000236800236800348*G0_4_2 - 0.000783977926835438*G0_4_3 + 0.000574663431806559*G0_4_4 + 3.04457447314734e-05*G0_4_5 - 9.51429522858541e-05*G0_4_6 + 0.000140811569383064*G0_4_7 - 0.000270205984491826*G0_4_8 - 0.000205508776937445*G0_4_9 - 5.49714835429373e-06*G0_5_0 - 7.61143618286835e-06*G0_5_1 + 1.14171542743026e-05*G0_5_2 - 4.94743351886441e-05*G0_5_3 + 3.04457447314734e-05*G0_5_4 - 4.56686170972098e-05*G0_5_5 + 0.000262594548308958*G0_5_6 - 4.56686170972101e-05*G0_5_8 + 6.85029256458151e-05*G0_5_9 - 4.86286200572145e-05*G0_6_0 - 4.44000444000653e-05*G0_6_1 - 8.88000888001307e-05*G0_6_2 + 6.4697207554381e-05*G0_6_3 - 9.5142952285854e-05*G0_6_4 + 0.000262594548308957*G0_6_5 - 0.000970458113315712*G0_6_6 + 4.56686170972101e-05*G0_6_7 - 0.00027401170258326*G0_6_9 - 3.55200355200522e-05*G0_7_0 - 0.000122205836491608*G0_7_1 - 3.80571809143417e-05*G0_7_2 - 0.000258788830217523*G0_7_3 + 0.000140811569383064*G0_7_4 + 4.56686170972101e-05*G0_7_6 + 9.89486703772885e-05*G0_7_7 - 0.000243565957851787*G0_7_8 - 0.000114171542743025*G0_7_9 + 6.59657802515255e-05*G0_8_0 + 0.000235531664103203*G0_8_1 + 6.72343529486702e-05*G0_8_2 + 0.000528994814709349*G0_8_3 - 0.000270205984491826*G0_8_4 - 4.56686170972101e-05*G0_8_5 - 0.000243565957851787*G0_8_7 + 0.000578469149897993*G0_8_8 + 0.000296846011131865*G0_8_9 + 7.6114361828683e-06*G0_9_0 + 8.11886526172622e-05*G0_9_1 + 4.82057624914995e-05*G0_9_2 + 0.000274011702583259*G0_9_3 - 0.000205508776937445*G0_9_4 + 6.85029256458151e-05*G0_9_5 - 0.00027401170258326*G0_9_6 - 0.000114171542743025*G0_9_7 + 0.000296846011131865*G0_9_8 + 0.00013700585129163*G0_9_9;
    A[65] = -A[50] - 9.23239018477548e-06*G0_0_0 + 3.86444830889456e-06*G0_0_1 - 3.30651124302074e-05*G0_0_2 + 2.33628805057486e-05*G0_0_3 - 8.70029441458422e-05*G0_0_4 + 4.08057550914886e-05*G0_0_5 - 7.11457854315332e-05*G0_0_6 + 1.41657284514494e-05*G0_0_7 + 8.77429448858436e-06*G0_0_8 - 5.20114805829337e-05*G0_0_9 + 3.86444830889457e-06*G0_1_0 + 0.000104586771253487*G0_1_1 - 4.5081314922606e-05*G0_1_2 + 0.000347271775843368*G0_1_3 - 0.000244200244200359*G0_1_4 + 2.65343122486104e-05*G0_1_5 - 8.41486555772666e-05*G0_1_6 - 4.01714687429162e-05*G0_1_7 + 9.5248666677283e-05*G0_1_8 + 3.8691467262914e-05*G0_1_9 - 3.30651124302074e-05*G0_2_0 - 4.5081314922606e-05*G0_2_1 - 0.000458800458800675*G0_2_2 + 0.000356468927897667*G0_2_3 - 0.000743700743701094*G0_2_4 + 0.000150748722177365*G0_2_5 - 0.00029230029230043*G0_2_6 + 3.70000370000555e-06*G0_2_7 + 2.0508591937173e-05*G0_2_8 - 0.000113537256394453*G0_2_9 + 2.33628805057486e-05*G0_3_0 + 0.000347271775843368*G0_3_1 + 0.000356468927897667*G0_3_2 - 0.000696446410732454*G0_3_3 + 0.000416726131012042*G0_3_4 - 0.000106560106560157*G0_3_5 + 0.000315874601589036*G0_3_6 - 6.66000666000997e-06*G0_3_7 + 4.75714761429295e-06*G0_3_8 - 0.000102754388468722*G0_3_9 - 8.70029441458422e-05*G0_4_0 - 0.000244200244200359*G0_4_1 - 0.000743700743701094*G0_4_2 + 0.000416726131012042*G0_4_3 - 0.000764949336378266*G0_4_4 + 0.000324437467294763*G0_4_5 - 0.000640312068883798*G0_4_6 + 9.32400932401373e-05*G0_4_7 + 1.9028590457168e-06*G0_4_8 - 0.000308263165406167*G0_4_9 + 4.08057550914886e-05*G0_5_0 + 2.65343122486104e-05*G0_5_1 + 0.000150748722177365*G0_5_2 - 0.000106560106560157*G0_5_3 + 0.000324437467294763*G0_5_4 - 0.000148423005565932*G0_5_5 + 0.000288283145426138*G0_5_6 - 3.61543218686246e-05*G0_5_7 - 1.61743018885951e-05*G0_5_8 + 0.000188383045525991*G0_5_9 - 7.11457854315332e-05*G0_6_0 - 8.41486555772666e-05*G0_6_1 - 0.00029230029230043*G0_6_2 + 0.000315874601589036*G0_6_3 - 0.000640312068883798*G0_6_4 + 0.000288283145426138*G0_6_5 - 0.000645069216498091*G0_6_6 + 5.232862375722e-05*G0_6_7 + 6.3745778031522e-05*G0_6_8 - 0.000291137433994714*G0_6_9 + 1.41657284514494e-05*G0_7_0 - 4.01714687429162e-05*G0_7_1 + 3.70000370000555e-06*G0_7_2 - 6.66000666000997e-06*G0_7_3 + 9.32400932401373e-05*G0_7_4 - 3.61543218686247e-05*G0_7_5 + 5.232862375722e-05*G0_7_6 - 3.42514628229074e-05*G0_7_7 - 4.28143285286346e-05*G0_7_8 + 5.13771942343613e-05*G0_7_9 + 8.77429448858436e-06*G0_8_0 + 9.52486666772829e-05*G0_8_1 + 2.0508591937173e-05*G0_8_2 + 4.75714761429295e-06*G0_8_3 + 1.9028590457168e-06*G0_8_4 - 1.61743018885951e-05*G0_8_5 + 6.3745778031522e-05*G0_8_6 - 4.28143285286346e-05*G0_8_7 - 8.56286570572686e-05*G0_8_8 - 0.000119880119880176*G0_8_9 - 5.20114805829337e-05*G0_9_0 + 3.8691467262914e-05*G0_9_1 - 0.000113537256394453*G0_9_2 - 0.000102754388468722*G0_9_3 - 0.000308263165406167*G0_9_4 + 0.000188383045525991*G0_9_5 - 0.000291137433994714*G0_9_6 + 5.13771942343613e-05*G0_9_7 - 0.000119880119880176*G0_9_8 - 0.00068502925645815*G0_9_9;
    A[79] = A[65];
    A[85] = A[139] - 2.36800236800348e-05*G0_0_0 + 2.46666913333698e-06*G0_0_1 - 3.42514628229075e-05*G0_0_3 - 7.61143618286829e-06*G0_0_4 - 3.42514628229074e-05*G0_0_5 + 3.04457447314733e-05*G0_0_6 - 7.16743573886768e-05*G0_0_7 - 1.26857269714472e-05*G0_0_8 - 8.75315161029859e-05*G0_0_9 + 2.46666913333697e-06*G0_1_0 - 2.46666913333694e-06*G0_1_2 + 3.74228945657691e-05*G0_1_3 + 4.31314717029207e-05*G0_1_4 - 2.66400266400392e-05*G0_1_5 + 2.66400266400392e-05*G0_1_6 - 4.31314717029206e-05*G0_1_7 - 3.74228945657693e-05*G0_1_8 - 2.46666913333694e-06*G0_2_1 + 2.36800236800349e-05*G0_2_2 + 1.26857269714471e-05*G0_2_3 + 7.16743573886771e-05*G0_2_4 - 3.04457447314734e-05*G0_2_5 + 3.42514628229076e-05*G0_2_6 + 7.61143618286825e-06*G0_2_7 + 3.42514628229075e-05*G0_2_8 + 8.75315161029858e-05*G0_2_9 - 3.42514628229075e-05*G0_3_0 + 3.74228945657691e-05*G0_3_1 + 1.26857269714471e-05*G0_3_2 - 0.000251177394034655*G0_3_3 - 0.000268303125446109*G0_3_4 + 9.13372341944201e-05*G0_3_5 - 7.99200799201177e-05*G0_3_6 + 0.000102754388468723*G0_3_7 - 0.000205508776937445*G0_3_9 - 7.61143618286828e-06*G0_4_0 + 4.31314717029207e-05*G0_4_1 + 7.16743573886771e-05*G0_4_2 - 0.000268303125446109*G0_4_3 - 0.000182674468388839*G0_4_4 + 2.28343085486048e-05*G0_4_5 + 5.70857713715129e-05*G0_4_6 - 0.000102754388468722*G0_4_8 - 0.000308263165406167*G0_4_9 - 3.42514628229074e-05*G0_5_0 - 2.66400266400392e-05*G0_5_1 - 3.04457447314734e-05*G0_5_2 + 9.13372341944201e-05*G0_5_3 + 2.28343085486048e-05*G0_5_4 - 6.85029256458146e-05*G0_5_5 - 5.70857713715126e-05*G0_5_7 + 7.99200799201174e-05*G0_5_8 + 0.000102754388468722*G0_5_9 + 3.04457447314733e-05*G0_6_0 + 2.66400266400392e-05*G0_6_1 + 3.42514628229076e-05*G0_6_2 - 7.99200799201177e-05*G0_6_3 + 5.70857713715129e-05*G0_6_4 + 6.85029256458153e-05*G0_6_6 - 2.28343085486049e-05*G0_6_7 - 9.13372341944201e-05*G0_6_8 - 0.000102754388468722*G0_6_9 - 7.16743573886768e-05*G0_7_0 - 4.31314717029206e-05*G0_7_1 + 7.61143618286825e-06*G0_7_2 + 0.000102754388468723*G0_7_3 - 5.70857713715126e-05*G0_7_5 - 2.28343085486049e-05*G0_7_6 + 0.000182674468388839*G0_7_7 + 0.000268303125446109*G0_7_8 + 0.000308263165406167*G0_7_9 - 1.26857269714472e-05*G0_8_0 - 3.74228945657693e-05*G0_8_1 + 3.42514628229075e-05*G0_8_2 - 0.000102754388468722*G0_8_4 + 7.99200799201174e-05*G0_8_5 - 9.13372341944201e-05*G0_8_6 + 0.000268303125446109*G0_8_7 + 0.000251177394034655*G0_8_8 + 0.000205508776937445*G0_8_9 - 8.75315161029859e-05*G0_9_0 + 8.75315161029858e-05*G0_9_2 - 0.000205508776937445*G0_9_3 - 0.000308263165406167*G0_9_4 + 0.000102754388468722*G0_9_5 - 0.000102754388468722*G0_9_6 + 0.000308263165406167*G0_9_7 + 0.000205508776937445*G0_9_8;
    A[138] = -A[85] + 1.37311248422424e-05*G0_0_0 + 1.0031121142237e-05*G0_0_1 + 3.98190874381539e-06*G0_0_2 + 6.9665783951531e-05*G0_0_3 - 7.717150574297e-06*G0_0_4 - 1.12057254914452e-05*G0_0_5 + 1.13114398828739e-05*G0_0_6 - 5.40200540200797e-05*G0_0_7 + 2.11428782857543e-07*G0_0_8 - 6.34286348572337e-07*G0_0_9 + 1.0031121142237e-05*G0_1_0 + 8.04134137467849e-05*G0_1_1 + 1.19809643619224e-05*G0_1_2 + 0.000119351547923032*G0_1_3 - 3.73171801743404e-05*G0_1_4 + 1.13114398828738e-05*G0_1_6 - 4.49286163572091e-05*G0_1_7 - 6.87143544286718e-06*G0_1_8 - 2.2834308548605e-05*G0_1_9 + 3.98190874381539e-06*G0_2_0 + 1.19809643619224e-05*G0_2_1 + 2.74505036409929e-05*G0_2_2 + 6.02572031143741e-05*G0_2_3 + 1.58571587143124e-06*G0_2_4 + 1.51171579743078e-05*G0_2_7 + 5.82486296772285e-05*G0_2_8 + 0.00010212010212015*G0_2_9 + 6.9665783951531e-05*G0_3_0 + 0.000119351547923032*G0_3_1 + 6.02572031143741e-05*G0_3_2 + 0.00139003853289633*G0_3_3 - 0.000382474668189134*G0_3_4 - 8.46772275344102e-05*G0_3_5 - 7.32600732601078e-05*G0_3_6 - 0.00024832310546608*G0_3_7 + 0.000462394748109251*G0_3_8 + 0.000565149136577973*G0_3_9 - 7.71715057429699e-06*G0_4_0 - 3.73171801743404e-05*G0_4_1 + 1.58571587143124e-06*G0_4_2 - 0.000382474668189134*G0_4_3 + 0.000148423005565934*G0_4_4 - 1.61743018885954e-05*G0_4_5 + 8.94343751487034e-05*G0_4_6 + 8.56286570572698e-06*G0_4_7 - 0.000214071642643172*G0_4_8 - 0.00027401170258326*G0_4_9 - 1.12057254914452e-05*G0_5_0 - 8.46772275344102e-05*G0_5_3 - 1.61743018885954e-05*G0_5_4 + 0.000157937300794518*G0_5_5 - 7.32600732601077e-05*G0_5_6 + 0.00012368583797161*G0_5_7 - 3.90086104372002e-05*G0_5_8 + 7.99200799201172e-05*G0_5_9 + 1.13114398828739e-05*G0_6_0 + 1.13114398828738e-05*G0_6_1 - 7.32600732601079e-05*G0_6_3 + 8.94343751487034e-05*G0_6_4 - 7.32600732601077e-05*G0_6_5 + 8.94343751487033e-05*G0_6_6 - 8.467722753441e-05*G0_6_7 - 8.46772275344103e-05*G0_6_8 - 0.000159840159840235*G0_6_9 - 5.40200540200797e-05*G0_7_0 - 4.49286163572091e-05*G0_7_1 + 1.51171579743078e-05*G0_7_2 - 0.00024832310546608*G0_7_3 + 8.56286570572698e-06*G0_7_4 + 0.00012368583797161*G0_7_5 - 8.46772275344101e-05*G0_7_6 + 0.000407211835783455*G0_7_7 + 7.61143618286833e-05*G0_7_8 + 0.000171257314114537*G0_7_9 + 2.11428782857543e-07*G0_8_0 - 6.87143544286718e-06*G0_8_1 + 5.82486296772285e-05*G0_8_2 + 0.000462394748109251*G0_8_3 - 0.000214071642643172*G0_8_4 - 3.90086104372003e-05*G0_8_5 - 8.46772275344103e-05*G0_8_6 + 7.61143618286833e-05*G0_8_7 + 0.000575614861329418*G0_8_8 + 0.000496646210932159*G0_8_9 - 6.34286348572323e-07*G0_9_0 - 2.2834308548605e-05*G0_9_1 + 0.00010212010212015*G0_9_2 + 0.000565149136577973*G0_9_3 - 0.00027401170258326*G0_9_4 + 7.99200799201172e-05*G0_9_5 - 0.000159840159840235*G0_9_6 + 0.000171257314114537*G0_9_7 + 0.000496646210932159*G0_9_8 + 0.000924789496218504*G0_9_9;
    A[66] = A[94];
    A[137] = A[21] + 1.82357325214553e-05*G0_0_5 - 4.75714761429271e-07*G0_0_6 - 1.82357325214554e-05*G0_0_7 + 4.75714761429271e-07*G0_0_8 - 2.29576420052719e-05*G0_1_1 - 3.24543181686191e-05*G0_1_3 + 1.8764304478599e-05*G0_1_4 + 9.51429522858547e-06*G0_1_5 + 2.32571661143204e-06*G0_1_7 - 2.82785997071844e-05*G0_1_8 - 1.30028701457333e-05*G0_1_9 + 2.29576420052718e-05*G0_2_2 - 1.8764304478599e-05*G0_2_3 + 3.24543181686191e-05*G0_2_4 - 2.32571661143196e-06*G0_2_5 + 2.82785997071844e-05*G0_2_6 - 9.51429522858538e-06*G0_2_7 + 1.30028701457334e-05*G0_2_9 - 3.24543181686191e-05*G0_3_1 - 1.8764304478599e-05*G0_3_2 - 4.28143285286345e-06*G0_3_3 - 6.66000666000984e-06*G0_3_5 + 1.52228723657367e-05*G0_3_7 - 2.47371675943221e-05*G0_3_8 + 8.56286570572678e-06*G0_3_9 + 1.8764304478599e-05*G0_4_1 + 3.24543181686191e-05*G0_4_2 + 4.2814328528634e-06*G0_4_4 - 1.52228723657367e-05*G0_4_5 + 2.47371675943221e-05*G0_4_6 + 6.66000666000974e-06*G0_4_7 - 8.56286570572691e-06*G0_4_9 + 1.82357325214554e-05*G0_5_0 + 9.51429522858547e-06*G0_5_1 - 2.32571661143196e-06*G0_5_2 - 6.66000666000983e-06*G0_5_3 - 1.52228723657367e-05*G0_5_4 + 0.00028067170924327*G0_5_5 - 8.03957946815469e-05*G0_5_6 - 2.85428856857564e-05*G0_5_8 + 5.70857713715129e-05*G0_5_9 - 4.75714761429271e-07*G0_6_0 + 2.82785997071844e-05*G0_6_2 + 2.47371675943221e-05*G0_6_4 - 8.03957946815469e-05*G0_6_5 + 3.37757480614782e-05*G0_6_6 + 2.85428856857562e-05*G0_6_7 - 1.99800199800295e-05*G0_6_9 - 1.82357325214554e-05*G0_7_0 + 2.32571661143205e-06*G0_7_1 - 9.51429522858538e-06*G0_7_2 + 1.52228723657367e-05*G0_7_3 + 6.66000666000974e-06*G0_7_4 + 2.85428856857562e-05*G0_7_6 - 0.000280671709243269*G0_7_7 + 8.03957946815467e-05*G0_7_8 - 5.70857713715121e-05*G0_7_9 + 4.75714761429268e-07*G0_8_0 - 2.82785997071844e-05*G0_8_1 - 2.47371675943221e-05*G0_8_3 - 2.85428856857564e-05*G0_8_5 + 8.03957946815467e-05*G0_8_7 - 3.37757480614782e-05*G0_8_8 + 1.99800199800292e-05*G0_8_9 - 1.30028701457334e-05*G0_9_1 + 1.30028701457334e-05*G0_9_2 + 8.56286570572679e-06*G0_9_3 - 8.56286570572691e-06*G0_9_4 + 5.70857713715129e-05*G0_9_5 - 1.99800199800295e-05*G0_9_6 - 5.70857713715121e-05*G0_9_7 + 1.99800199800292e-05*G0_9_8;
    A[181] = A[137] + 2.35155790711456e-05*G0_0_0 + 2.53185967471801e-05*G0_0_5 + 5.33857676715073e-06*G0_0_6 + 2.30985945271768e-05*G0_0_7 - 1.65443022585958e-05*G0_0_8 + 1.77600177600262e-05*G0_0_9 - 3.53790829981478e-05*G0_1_1 - 1.82357325214555e-05*G0_1_3 + 1.63328734757384e-05*G0_1_4 - 3.92993250136293e-05*G0_1_5 + 1.29500129500196e-06*G0_1_6 + 5.81429152857968e-07*G0_1_7 - 3.54143211286246e-06*G0_1_8 - 4.31314717029207e-05*G0_1_9 + 8.61572290144132e-06*G0_2_4 - 9.14429485858497e-06*G0_2_5 + 1.36900136900202e-05*G0_2_6 + 1.01750101750148e-05*G0_2_7 + 3.61543218686245e-05*G0_2_9 - 1.82357325214555e-05*G0_3_1 + 7.92065077779734e-05*G0_3_3 - 4.49550449550662e-05*G0_3_4 + 6.35079206508079e-05*G0_3_5 - 9.27643784787084e-06*G0_3_6 - 1.66500166500233e-06*G0_3_7 + 1.47471576043073e-05*G0_3_8 + 0.000132724418438767*G0_3_9 + 1.63328734757384e-05*G0_4_1 + 8.61572290144132e-06*G0_4_2 - 4.49550449550662e-05*G0_4_3 + 1.92664478378855e-05*G0_4_4 - 9.27643784787072e-06*G0_4_5 - 1.45093002235926e-05*G0_4_7 - 8.99100899101322e-05*G0_4_9 + 2.53185967471801e-05*G0_5_0 - 3.92993250136293e-05*G0_5_1 - 9.14429485858497e-06*G0_5_2 + 6.35079206508079e-05*G0_5_3 - 9.27643784787072e-06*G0_5_4 - 0.000390799676514147*G0_5_5 + 4.51929023357834e-06*G0_5_6 - 7.65900765901135e-05*G0_5_7 + 0.000112506541078023*G0_5_8 - 0.000278293135436124*G0_5_9 + 5.33857676715073e-06*G0_6_0 + 1.29500129500196e-06*G0_6_1 + 1.36900136900202e-05*G0_6_2 - 9.27643784787085e-06*G0_6_3 + 4.51929023357834e-06*G0_6_5 - 4.54307597164954e-05*G0_6_6 - 3.59164644879096e-05*G0_6_7 - 3.09214594929044e-06*G0_6_8 - 8.99100899101319e-05*G0_6_9 + 2.30985945271768e-05*G0_7_0 + 5.81429152857961e-07*G0_7_1 + 1.01750101750148e-05*G0_7_2 - 1.66500166500233e-06*G0_7_3 - 1.45093002235926e-05*G0_7_4 - 7.65900765901135e-05*G0_7_5 - 3.59164644879096e-05*G0_7_6 + 0.000280909566623983*G0_7_7 - 5.94643451786532e-06*G0_7_8 + 1.85528756957405e-05*G0_7_9 - 1.65443022585958e-05*G0_8_0 - 3.54143211286246e-06*G0_8_1 + 1.47471576043073e-05*G0_8_3 + 0.000112506541078023*G0_8_5 - 3.09214594929044e-06*G0_8_6 - 5.94643451786532e-06*G0_8_7 - 4.4479330193637e-05*G0_8_8 + 0.000155558726987372*G0_8_9 + 1.77600177600262e-05*G0_9_0 - 4.31314717029207e-05*G0_9_1 + 3.61543218686245e-05*G0_9_2 + 0.000132724418438767*G0_9_3 - 8.99100899101322e-05*G0_9_4 - 0.000278293135436125*G0_9_5 - 8.99100899101319e-05*G0_9_6 + 1.85528756957405e-05*G0_9_7 + 0.000155558726987372*G0_9_8 - 7.70657913515433e-05*G0_9_9;
    A[27] = A[181];
    A[91] = A[21];
    A[168] = A[56];
    A[109] = A[123] - 2.01121629693152e-05*G0_0_0 + 1.14523924047758e-07*G0_0_1 + 8.98572327144175e-06*G0_0_2 - 4.35807578664926e-05*G0_0_3 - 1.32142989285917e-07*G0_0_4 - 1.50643007785903e-06*G0_0_5 + 1.42714428428779e-05*G0_0_6 - 1.69407312264536e-05*G0_0_8 - 5.50243407386523e-05*G0_0_9 + 1.14523924047758e-07*G0_1_0 - 3.00728078506e-05*G0_1_1 + 1.34022356244641e-05*G0_1_2 - 1.75750175750262e-05*G0_1_3 + 6.16314902029477e-05*G0_1_4 - 2.83578855007558e-05*G0_1_5 - 4.58007600864961e-05*G0_1_6 - 1.71785886071665e-06*G0_1_7 - 2.13014498728886e-05*G0_1_8 - 3.98014683729159e-05*G0_1_9 + 8.98572327144174e-06*G0_2_0 + 1.34022356244641e-05*G0_2_1 + 0.000111863445196831*G0_2_2 - 8.53379424808397e-05*G0_2_3 + 0.000232915232915342*G0_2_4 - 4.98179069607874e-05*G0_2_5 + 0.000144115144115211*G0_2_6 - 7.42643599786802e-06*G0_2_7 - 2.26493083636048e-05*G0_2_8 + 0.0001170258313116*G0_2_9 - 4.35807578664926e-05*G0_3_0 - 1.75750175750262e-05*G0_3_1 - 8.53379424808397e-05*G0_3_2 - 0.000284477427334704*G0_3_3 - 0.000197421625993146*G0_3_4 + 0.000113457970600881*G0_3_5 + 0.000126302269159472*G0_3_6 + 0.000119642262499462*G0_3_7 - 0.00017649017649026*G0_3_8 - 0.000119880119880175*G0_3_9 - 1.32142989285917e-07*G0_4_0 + 6.16314902029477e-05*G0_4_1 + 0.000232915232915342*G0_4_2 - 0.000197421625993146*G0_4_3 - 0.000112506541078022*G0_4_4 - 1.07035821321584e-05*G0_4_5 - 0.000115598687027314*G0_4_6 + 1.68878740307389e-05*G0_4_7 + 5.68479139907983e-05*G0_4_8 - 0.000329670329670484*G0_4_9 - 1.50643007785903e-06*G0_5_0 - 2.83578855007558e-05*G0_5_1 - 4.98179069607874e-05*G0_5_2 + 0.000113457970600881*G0_5_3 - 1.07035821321584e-05*G0_5_4 - 0.000208363065506021*G0_5_5 - 7.13572142143834e-06*G0_5_6 - 8.51529422958393e-05*G0_5_7 + 7.39736454022515e-05*G0_5_8 + 1.7125731411454e-05*G0_5_9 + 1.42714428428779e-05*G0_6_0 - 4.58007600864961e-05*G0_6_1 + 0.000144115144115211*G0_6_2 + 0.000126302269159472*G0_6_3 - 0.000115598687027314*G0_6_4 - 7.13572142143856e-06*G0_6_5 - 0.00117810760667959*G0_6_6 + 1.1179296893588e-05*G0_6_7 + 0.000108225108225159*G0_6_8 - 0.000603682032253746*G0_6_9 - 1.71785886071665e-06*G0_7_1 - 7.42643599786802e-06*G0_7_2 + 0.000119642262499462*G0_7_3 + 1.68878740307389e-05*G0_7_4 - 8.51529422958393e-05*G0_7_5 + 1.1179296893588e-05*G0_7_6 - 6.80272108843858e-05*G0_7_7 + 0.000131059416773764*G0_7_8 + 0.000142714428428781*G0_7_9 - 1.69407312264536e-05*G0_8_0 - 2.13014498728887e-05*G0_8_1 - 2.26493083636048e-05*G0_8_2 - 0.00017649017649026*G0_8_3 + 5.68479139907983e-05*G0_8_4 + 7.39736454022515e-05*G0_8_5 + 0.000108225108225159*G0_8_6 + 0.000131059416773764*G0_8_7 - 0.000205033062176017*G0_8_8 + 5.70857713715088e-06*G0_8_9 - 5.50243407386523e-05*G0_9_0 - 3.98014683729159e-05*G0_9_1 + 0.0001170258313116*G0_9_2 - 0.000119880119880175*G0_9_3 - 0.000329670329670484*G0_9_4 + 1.71257314114541e-05*G0_9_5 - 0.000603682032253746*G0_9_6 + 0.000142714428428781*G0_9_7 + 5.70857713715088e-06*G0_9_8 - 0.000950478093335683*G0_9_9;
    A[184] = A[72];
    A[213] = A[57] + 2.02971631543156e-05*G0_0_1 + 3.49562254324324e-05*G0_0_2 + 1.01485815771579e-05*G0_0_3 + 4.05943263086312e-05*G0_0_4 - 6.08914894629467e-05*G0_0_5 + 0.000152228723657367*G0_0_6 - 4.05943263086313e-05*G0_0_7 - 1.01485815771577e-05*G0_0_8 + 2.02971631543156e-05*G0_1_0 + 3.94667061333917e-05*G0_1_1 + 2.48076438552746e-05*G0_1_2 + 0.000152228723657367*G0_1_4 - 0.000142080142080209*G0_1_5 + 0.000223268794697471*G0_1_6 - 6.08914894629467e-05*G0_1_7 + 0.000121782978925893*G0_1_9 + 3.49562254324324e-05*G0_2_0 + 2.48076438552746e-05*G0_2_1 + 0.000158994444708805*G0_2_2 - 3.04457447314734e-05*G0_2_3 + 0.000334903192046207*G0_2_4 - 0.00018267446838884*G0_2_5 + 0.000243565957851787*G0_2_6 - 5.07429078857888e-05*G0_2_7 + 1.01485815771579e-05*G0_2_8 + 0.00018267446838884*G0_2_9 + 1.01485815771579e-05*G0_3_0 - 3.04457447314734e-05*G0_3_2 + 0.00219209362066608*G0_3_3 - 0.00109604681033304*G0_3_4 + 0.00027401170258326*G0_3_5 - 0.00082203510774978*G0_3_6 - 0.000182674468388841*G0_3_7 + 0.000365348936777681*G0_3_8 + 4.05943263086312e-05*G0_4_0 + 0.000152228723657367*G0_4_1 + 0.000334903192046207*G0_4_2 - 0.00109604681033304*G0_4_3 + 0.000548023405166521*G0_4_4 - 0.000274011702583261*G0_4_5 + 0.00109604681033304*G0_4_6 + 9.13372341944195e-05*G0_4_7 - 0.00018267446838884*G0_4_8 - 6.08914894629467e-05*G0_5_0 - 0.000142080142080209*G0_5_1 - 0.00018267446838884*G0_5_2 + 0.00027401170258326*G0_5_3 - 0.000274011702583261*G0_5_4 - 0.000456686170972099*G0_5_5 - 0.000456686170972101*G0_5_6 - 0.000274011702583259*G0_5_7 + 0.00027401170258326*G0_5_8 - 0.00054802340516652*G0_5_9 + 0.000152228723657367*G0_6_0 + 0.000223268794697471*G0_6_1 + 0.000243565957851787*G0_6_2 - 0.00082203510774978*G0_6_3 + 0.00109604681033304*G0_6_4 - 0.000456686170972101*G0_6_5 + 0.00200941915227724*G0_6_6 - 0.00027401170258326*G0_6_8 + 0.00109604681033304*G0_6_9 - 4.05943263086313e-05*G0_7_0 - 6.08914894629467e-05*G0_7_1 - 5.07429078857888e-05*G0_7_2 - 0.000182674468388841*G0_7_3 + 9.13372341944195e-05*G0_7_4 - 0.000274011702583259*G0_7_5 - 9.13372341944178e-05*G0_7_7 + 0.000182674468388839*G0_7_8 - 1.01485815771577e-05*G0_8_0 + 1.01485815771579e-05*G0_8_2 + 0.000365348936777681*G0_8_3 - 0.00018267446838884*G0_8_4 + 0.00027401170258326*G0_8_5 - 0.00027401170258326*G0_8_6 + 0.000182674468388839*G0_8_7 - 0.000365348936777678*G0_8_8 + 0.000121782978925893*G0_9_1 + 0.00018267446838884*G0_9_2 - 0.00054802340516652*G0_9_5 + 0.00109604681033304*G0_9_6;
    A[204] = A[148];
    A[2] = -4.08696242029767e-05*G0_0_0 - 1.84192644510191e-06*G0_0_1 - 5.90257038670015e-06*G0_0_2 + 1.72281422281503e-06*G0_0_3 - 2.80275280275412e-05*G0_0_5 + 1.07630464773372e-05*G0_0_6 - 2.03500203500299e-05*G0_0_7 + 1.06705463848371e-05*G0_0_8 - 3.76607519464839e-06*G0_0_9 - 1.84192644510191e-06*G0_1_0 + 2.66708600042059e-06*G0_1_1 - 1.84192644510192e-06*G0_1_2 + 5.36996072710612e-06*G0_1_3 - 3.3366104794692e-06*G0_1_4 - 1.24049231192146e-06*G0_1_5 - 1.24049231192147e-06*G0_1_6 - 3.33661047946919e-06*G0_1_7 + 5.36996072710611e-06*G0_1_8 + 2.87411001696851e-06*G0_1_9 - 5.90257038670015e-06*G0_2_0 - 1.84192644510192e-06*G0_2_1 - 4.08696242029769e-05*G0_2_2 + 1.06705463848371e-05*G0_2_3 - 2.035002035003e-05*G0_2_4 + 1.07630464773373e-05*G0_2_5 - 2.80275280275413e-05*G0_2_6 + 1.72281422281503e-06*G0_2_8 - 3.7660751946484e-06*G0_2_9 + 1.72281422281503e-06*G0_3_0 + 5.36996072710612e-06*G0_3_1 + 1.06705463848371e-05*G0_3_2 + 1.20415298986785e-06*G0_3_3 + 1.07035821321586e-06*G0_3_4 - 1.88799295942242e-06*G0_3_5 + 6.05049712192855e-06*G0_3_6 - 2.83942248228097e-06*G0_3_7 + 5.67884496456194e-06*G0_3_8 - 2.94348508634361e-06*G0_3_9 - 3.3366104794692e-06*G0_4_1 - 2.035002035003e-05*G0_4_2 + 1.07035821321586e-06*G0_4_3 - 2.80969030969165e-06*G0_4_4 + 4.04357547214881e-06*G0_4_5 - 1.00940725940774e-05*G0_4_6 - 2.83942248228098e-06*G0_4_8 + 3.21107463964757e-06*G0_4_9 - 2.80275280275412e-05*G0_5_0 - 1.24049231192146e-06*G0_5_1 + 1.07630464773373e-05*G0_5_2 - 1.88799295942242e-06*G0_5_3 + 4.04357547214881e-06*G0_5_4 - 4.21453546453744e-05*G0_5_5 + 2.55548023405287e-05*G0_5_6 - 1.00940725940773e-05*G0_5_7 + 6.05049712192853e-06*G0_5_8 + 1.07630464773372e-05*G0_6_0 - 1.24049231192147e-06*G0_6_1 - 2.80275280275413e-05*G0_6_2 + 6.05049712192855e-06*G0_6_3 - 1.00940725940774e-05*G0_6_4 + 2.55548023405286e-05*G0_6_5 - 4.21453546453745e-05*G0_6_6 + 4.04357547214879e-06*G0_6_7 - 1.88799295942242e-06*G0_6_8 - 2.03500203500299e-05*G0_7_0 - 3.33661047946919e-06*G0_7_1 - 2.83942248228097e-06*G0_7_3 - 1.00940725940773e-05*G0_7_5 + 4.04357547214879e-06*G0_7_6 - 2.80969030969159e-06*G0_7_7 + 1.07035821321583e-06*G0_7_8 + 3.21107463964758e-06*G0_7_9 + 1.06705463848371e-05*G0_8_0 + 5.36996072710611e-06*G0_8_1 + 1.72281422281503e-06*G0_8_2 + 5.67884496456194e-06*G0_8_3 - 2.83942248228098e-06*G0_8_4 + 6.05049712192853e-06*G0_8_5 - 1.88799295942242e-06*G0_8_6 + 1.07035821321583e-06*G0_8_7 + 1.2041529898679e-06*G0_8_8 - 2.94348508634359e-06*G0_8_9 - 3.76607519464839e-06*G0_9_0 + 2.87411001696851e-06*G0_9_1 - 3.7660751946484e-06*G0_9_2 - 2.94348508634361e-06*G0_9_3 + 3.21107463964757e-06*G0_9_4 + 3.21107463964758e-06*G0_9_7 - 2.94348508634359e-06*G0_9_8 + 1.01684030255507e-05*G0_9_9;
    A[133] = A[108] - 2.70276460752778e-05*G0_0_0 - 2.99524109048063e-06*G0_0_1 - 8.24572253144071e-06*G0_0_2 + 1.99800199800292e-05*G0_0_3 - 3.7105751391483e-05*G0_0_4 - 7.29429300858198e-06*G0_0_5 - 4.24971853543483e-05*G0_0_6 - 5.89886304172295e-05*G0_0_7 + 3.13971742543317e-05*G0_0_8 - 0.000108462965605874*G0_0_9 - 2.99524109048063e-06*G0_1_0 - 6.16667283334293e-06*G0_1_1 + 1.4095252190491e-07*G0_1_2 + 3.01286015571864e-05*G0_1_3 - 1.4588586017164e-05*G0_1_4 - 2.85428856857553e-06*G0_1_5 - 0.000117025831311601*G0_1_6 - 3.45686059971935e-05*G0_1_7 - 0.000119880119880176*G0_1_9 - 8.24572253144071e-06*G0_2_0 + 1.4095252190491e-07*G0_2_1 + 4.78533811867373e-05*G0_2_2 + 7.29429300858177e-06*G0_2_3 + 4.34486148772068e-05*G0_2_4 + 1.49057291914504e-05*G0_2_5 - 7.92857935715441e-06*G0_2_6 + 7.70657913515417e-05*G0_2_8 + 0.000159840159840235*G0_2_9 + 1.99800199800292e-05*G0_3_0 + 3.01286015571864e-05*G0_3_1 + 7.29429300858178e-06*G0_3_2 - 1.14171542743071e-05*G0_3_3 - 2.85428856857546e-05*G0_3_4 - 4.28143285286344e-05*G0_3_5 + 0.00038532895675771*G0_3_6 - 2.56885971171799e-05*G0_3_7 + 0.000222634508348897*G0_3_8 + 0.000411017553874888*G0_3_9 - 3.7105751391483e-05*G0_4_0 - 1.4588586017164e-05*G0_4_1 + 4.34486148772068e-05*G0_4_2 - 2.85428856857547e-05*G0_4_3 - 0.000122734408448752*G0_4_4 + 0.000145568716997357*G0_4_5 - 0.000530897673755067*G0_4_6 + 4.28143285286342e-05*G0_4_7 - 0.000196945911231717*G0_4_8 - 0.000770657913515418*G0_4_9 - 7.29429300858196e-06*G0_5_0 - 2.85428856857553e-06*G0_5_1 + 1.49057291914504e-05*G0_5_2 - 4.28143285286344e-05*G0_5_3 + 0.000145568716997357*G0_5_4 - 0.000331097473954772*G0_5_5 + 0.00031968031968047*G0_5_6 - 8.56286570572688e-05*G0_5_7 + 4.28143285286343e-05*G0_5_8 + 0.000239760239760353*G0_5_9 - 4.24971853543483e-05*G0_6_0 - 0.000117025831311601*G0_6_1 - 7.92857935715441e-06*G0_6_2 + 0.00038532895675771*G0_6_3 - 0.000530897673755067*G0_6_4 + 0.00031968031968047*G0_6_5 - 0.00229199372056623*G0_6_6 + 4.28143285286349e-05*G0_6_7 + 4.28143285286343e-05*G0_6_8 - 0.00125017839303612*G0_6_9 - 5.89886304172295e-05*G0_7_0 - 3.45686059971935e-05*G0_7_1 - 2.56885971171799e-05*G0_7_3 + 4.28143285286342e-05*G0_7_4 - 8.56286570572688e-05*G0_7_5 + 4.28143285286349e-05*G0_7_6 + 0.000108462965605873*G0_7_7 + 3.13971742543324e-05*G0_7_8 + 0.000239760239760353*G0_7_9 + 3.13971742543317e-05*G0_8_0 + 7.70657913515417e-05*G0_8_2 + 0.000222634508348897*G0_8_3 - 0.000196945911231717*G0_8_4 + 4.28143285286343e-05*G0_8_5 + 4.28143285286343e-05*G0_8_6 + 3.13971742543325e-05*G0_8_7 + 0.000724989296418207*G0_8_8 + 0.000753532182103963*G0_8_9 - 0.000108462965605874*G0_9_0 - 0.000119880119880176*G0_9_1 + 0.000159840159840235*G0_9_2 + 0.000411017553874888*G0_9_3 - 0.000770657913515418*G0_9_4 + 0.000239760239760353*G0_9_5 - 0.00125017839303612*G0_9_6 + 0.000239760239760353*G0_9_7 + 0.000753532182103963*G0_9_8 - 0.000513771942343615*G0_9_9;
    A[132] = A[133] + 0.000158994444708805*G0_0_0 + 3.49562254324323e-05*G0_0_1 + 2.48076438552745e-05*G0_0_2 - 5.07429078857888e-05*G0_0_3 + 1.01485815771577e-05*G0_0_4 + 0.000334903192046206*G0_0_5 - 3.04457447314733e-05*G0_0_6 + 0.000243565957851786*G0_0_7 - 0.00018267446838884*G0_0_8 + 0.00018267446838884*G0_0_9 + 3.49562254324323e-05*G0_1_0 + 2.02971631543155e-05*G0_1_2 - 4.0594326308631e-05*G0_1_3 - 1.01485815771578e-05*G0_1_4 + 4.05943263086307e-05*G0_1_5 + 1.01485815771577e-05*G0_1_6 + 0.000152228723657366*G0_1_7 - 6.08914894629465e-05*G0_1_8 + 2.48076438552745e-05*G0_2_0 + 2.02971631543155e-05*G0_2_1 + 3.9466706133391e-05*G0_2_2 - 6.08914894629465e-05*G0_2_3 + 0.000152228723657367*G0_2_5 + 0.000223268794697471*G0_2_7 - 0.000142080142080209*G0_2_8 + 0.000121782978925893*G0_2_9 - 5.07429078857888e-05*G0_3_0 - 4.0594326308631e-05*G0_3_1 - 6.08914894629465e-05*G0_3_2 - 9.13372341944201e-05*G0_3_3 + 0.00018267446838884*G0_3_4 + 9.13372341944202e-05*G0_3_5 - 0.00018267446838884*G0_3_6 - 0.00027401170258326*G0_3_8 + 1.01485815771577e-05*G0_4_0 - 1.01485815771578e-05*G0_4_1 + 0.00018267446838884*G0_4_3 - 0.00036534893677768*G0_4_4 - 0.000182674468388839*G0_4_5 + 0.00036534893677768*G0_4_6 - 0.00027401170258326*G0_4_7 + 0.00027401170258326*G0_4_8 + 0.000334903192046206*G0_5_0 + 4.05943263086307e-05*G0_5_1 + 0.000152228723657367*G0_5_2 + 9.13372341944201e-05*G0_5_3 - 0.000182674468388839*G0_5_4 + 0.000548023405166515*G0_5_5 - 0.00109604681033304*G0_5_6 + 0.00109604681033304*G0_5_7 - 0.000274011702583259*G0_5_8 - 3.04457447314733e-05*G0_6_0 + 1.01485815771577e-05*G0_6_1 - 0.00018267446838884*G0_6_3 + 0.00036534893677768*G0_6_4 - 0.00109604681033304*G0_6_5 + 0.00219209362066608*G0_6_6 - 0.000822035107749779*G0_6_7 + 0.00027401170258326*G0_6_8 + 0.000243565957851786*G0_7_0 + 0.000152228723657366*G0_7_1 + 0.000223268794697471*G0_7_2 - 0.00027401170258326*G0_7_4 + 0.00109604681033304*G0_7_5 - 0.000822035107749779*G0_7_6 + 0.00200941915227724*G0_7_7 - 0.000456686170972099*G0_7_8 + 0.00109604681033304*G0_7_9 - 0.00018267446838884*G0_8_0 - 6.08914894629465e-05*G0_8_1 - 0.000142080142080209*G0_8_2 - 0.00027401170258326*G0_8_3 + 0.00027401170258326*G0_8_4 - 0.000274011702583259*G0_8_5 + 0.00027401170258326*G0_8_6 - 0.000456686170972099*G0_8_7 - 0.0004566861709721*G0_8_8 - 0.000548023405166518*G0_8_9 + 0.00018267446838884*G0_9_0 + 0.000121782978925893*G0_9_2 + 0.00109604681033304*G0_9_7 - 0.000548023405166518*G0_9_8;
    A[188] = A[132];
    A[68] = A[133] + 2.17419265038413e-05*G0_0_0 - 6.7304829209623e-06*G0_0_1 - 3.84095622191042e-05*G0_0_2 + 2.85428856857578e-06*G0_0_3 - 5.80372008943711e-05*G0_0_4 + 0.000143031571603067*G0_0_5 - 0.00011290297004588*G0_0_6 + 0.000112268683697308*G0_0_7 - 5.80372008943709e-05*G0_0_8 + 6.27943485086638e-05*G0_0_9 - 6.7304829209623e-06*G0_1_0 - 3.77400377400554e-05*G0_1_1 - 3.77047996095793e-05*G0_1_2 + 9.83143840287158e-06*G0_1_3 - 8.2457225314407e-05*G0_1_4 + 4.09114694829172e-05*G0_1_5 - 8.08715094429761e-05*G0_1_6 + 6.12086326372328e-05*G0_1_7 + 9.51429522858517e-06*G0_1_9 - 3.84095622191042e-05*G0_2_0 - 3.77047996095793e-05*G0_2_1 - 0.000397133730467251*G0_2_2 + 0.000136054421768772*G0_2_3 - 0.000366300366300539*G0_2_4 + 0.000224854510568902*G0_2_5 - 0.000410700410700605*G0_2_6 + 2.94943152086149e-05*G0_2_7 - 9.99000999001468e-05*G0_2_8 - 0.000232148803577484*G0_2_9 + 2.85428856857577e-06*G0_3_0 + 9.83143840287158e-06*G0_3_1 + 0.000136054421768772*G0_3_2 - 0.000422434708149192*G0_3_3 + 0.000536606250892217*G0_3_4 - 0.000105608677037298*G0_3_5 + 0.000322534608249045*G0_3_6 + 7.13572142143904e-05*G0_3_7 - 0.000450977593834948*G0_3_8 - 0.000171257314114536*G0_3_9 - 5.80372008943711e-05*G0_4_0 - 8.2457225314407e-05*G0_4_1 - 0.000366300366300539*G0_4_2 + 0.000536606250892218*G0_4_3 - 0.000842015127729809*G0_4_4 + 0.000254031682603231*G0_4_5 - 0.000576566290852276*G0_4_6 + 2.8542885685758e-06*G0_4_7 + 0.000379620379620558*G0_4_8 + 0.000188383045525991*G0_4_9 + 0.000143031571603067*G0_5_0 + 4.09114694829172e-05*G0_5_1 + 0.000224854510568902*G0_5_2 - 0.000105608677037298*G0_5_3 + 0.000254031682603231*G0_5_4 - 0.000171257314114539*G0_5_5 + 0.000205508776937446*G0_5_6 + 5.13771942343609e-05*G0_5_7 - 4.2814328528634e-05*G0_5_8 - 0.000102754388468723*G0_5_9 - 0.00011290297004588*G0_6_0 - 8.08715094429761e-05*G0_6_1 - 0.000410700410700605*G0_6_2 + 0.000322534608249045*G0_6_3 - 0.000576566290852276*G0_6_4 + 0.000205508776937446*G0_6_5 - 0.000522334808049339*G0_6_6 - 8.56286570572667e-06*G0_6_7 + 0.000231197374054625*G0_6_8 + 5.13771942343608e-05*G0_6_9 + 0.000112268683697308*G0_7_0 + 6.12086326372328e-05*G0_7_1 + 2.94943152086149e-05*G0_7_2 + 7.13572142143904e-05*G0_7_3 + 2.85428856857578e-06*G0_7_4 + 5.13771942343609e-05*G0_7_5 - 8.56286570572667e-06*G0_7_6 - 0.000142714428428781*G0_7_7 + 2.8542885685756e-06*G0_7_8 - 0.000171257314114537*G0_7_9 - 5.80372008943709e-05*G0_8_0 - 9.99000999001468e-05*G0_8_2 - 0.000450977593834948*G0_8_3 + 0.000379620379620558*G0_8_4 - 4.2814328528634e-05*G0_8_5 + 0.000231197374054625*G0_8_6 + 2.85428856857558e-06*G0_8_7 - 0.00103325246182437*G0_8_8 - 0.000787783644926871*G0_8_9 + 6.27943485086638e-05*G0_9_0 + 9.51429522858518e-06*G0_9_1 - 0.000232148803577484*G0_9_2 - 0.000171257314114536*G0_9_3 + 0.000188383045525991*G0_9_4 - 0.000102754388468723*G0_9_5 + 5.13771942343608e-05*G0_9_6 - 0.000171257314114537*G0_9_7 - 0.000787783644926871*G0_9_8 - 0.0009247894962185*G0_9_9;
    A[45] = A[47] - 5.76143433286565e-06*G0_0_3 - 1.00428671857291e-05*G0_0_4 + 1.847358990217e-05*G0_0_5 + 1.09942967085876e-05*G0_0_7 - 5.41786256072226e-06*G0_0_8 + 1.42714428428778e-06*G0_0_9 + 1.80066846733597e-05*G0_1_1 + 3.92200392200576e-05*G0_1_3 - 3.16614602329037e-05*G0_1_4 + 1.58571587143093e-07*G0_1_7 - 3.17143174286189e-07*G0_1_9 - 0.000228554514268908*G0_2_2 + 7.8968650397259e-05*G0_2_3 - 0.000177758749187404*G0_2_4 + 5.95172023743734e-05*G0_2_5 - 0.000122364408078752*G0_2_6 + 5.41786256072219e-06*G0_2_8 - 3.45686059971938e-05*G0_2_9 - 5.76143433286565e-06*G0_3_0 + 3.92200392200576e-05*G0_3_1 + 7.89686503972591e-05*G0_3_2 - 0.000241900956186785*G0_3_3 + 0.000106322249179442*G0_3_4 - 5.9464345178659e-06*G0_3_5 + 4.1149326863632e-05*G0_3_6 + 3.40136054421929e-05*G0_3_7 - 3.44893202036224e-05*G0_3_8 - 6.70757813615274e-05*G0_3_9 - 1.00428671857291e-05*G0_4_0 - 3.16614602329037e-05*G0_4_1 - 0.000177758749187404*G0_4_2 + 0.000106322249179442*G0_4_3 - 0.000221920936206755*G0_4_4 + 4.68579040007833e-05*G0_4_5 - 8.80072308644153e-05*G0_4_6 - 1.66500166500245e-06*G0_4_7 + 4.75714761429363e-07*G0_4_8 + 9.99000999001473e-06*G0_4_9 + 1.847358990217e-05*G0_5_0 + 5.95172023743734e-05*G0_5_2 - 5.9464345178659e-06*G0_5_3 + 4.68579040007833e-05*G0_5_4 - 4.59064744779247e-05*G0_5_5 + 5.11393368536467e-05*G0_5_6 + 4.28143285286349e-06*G0_5_8 - 1.28442985585903e-05*G0_5_9 - 0.000122364408078752*G0_6_2 + 4.1149326863632e-05*G0_6_3 - 8.80072308644153e-05*G0_6_4 + 5.11393368536468e-05*G0_6_5 - 6.58864944579542e-05*G0_6_6 - 4.28143285286342e-06*G0_6_8 + 2.14071642643172e-05*G0_6_9 + 1.09942967085876e-05*G0_7_0 + 1.58571587143096e-07*G0_7_1 + 3.40136054421929e-05*G0_7_3 - 1.66500166500245e-06*G0_7_4 - 1.18928690357336e-06*G0_7_7 - 4.75714761429092e-07*G0_7_8 - 4.28143285286339e-06*G0_7_9 - 5.41786256072226e-06*G0_8_0 + 5.41786256072219e-06*G0_8_2 - 3.44893202036224e-05*G0_8_3 + 4.75714761429363e-07*G0_8_4 + 4.28143285286349e-06*G0_8_5 - 4.28143285286342e-06*G0_8_6 - 4.75714761429105e-07*G0_8_7 + 3.44893202036218e-05*G0_8_8 + 1.42714428428778e-06*G0_9_0 - 3.17143174286189e-07*G0_9_1 - 3.45686059971938e-05*G0_9_2 - 6.70757813615274e-05*G0_9_3 + 9.99000999001473e-06*G0_9_4 - 1.28442985585903e-05*G0_9_5 + 2.14071642643172e-05*G0_9_6 - 4.28143285286339e-06*G0_9_7 + 8.56286570572652e-06*G0_9_9;
    A[120] = A[8];
    A[92] = A[36];
    A[179] = A[85] - 2.70276460752778e-05*G0_0_0 - 8.24572253144069e-06*G0_0_1 - 2.9952410904806e-06*G0_0_2 - 3.71057513914831e-05*G0_0_3 + 1.99800199800294e-05*G0_0_4 - 5.89886304172296e-05*G0_0_5 + 3.13971742543319e-05*G0_0_6 - 7.29429300858215e-06*G0_0_7 - 4.24971853543481e-05*G0_0_8 - 0.000108462965605874*G0_0_9 - 8.24572253144068e-06*G0_1_0 + 4.78533811867372e-05*G0_1_1 + 1.40952521904934e-07*G0_1_2 + 4.34486148772068e-05*G0_1_3 + 7.29429300858208e-06*G0_1_4 + 7.7065791351542e-05*G0_1_6 + 1.49057291914504e-05*G0_1_7 - 7.92857935715452e-06*G0_1_8 + 0.000159840159840235*G0_1_9 - 2.9952410904806e-06*G0_2_0 + 1.40952521904934e-07*G0_2_1 - 6.16667283334251e-06*G0_2_2 - 1.45885860171641e-05*G0_2_3 + 3.01286015571867e-05*G0_2_4 - 3.45686059971936e-05*G0_2_5 - 2.85428856857562e-06*G0_2_7 - 0.0001170258313116*G0_2_8 - 0.000119880119880176*G0_2_9 - 3.71057513914831e-05*G0_3_0 + 4.34486148772068e-05*G0_3_1 - 1.45885860171641e-05*G0_3_2 - 0.000122734408448751*G0_3_3 - 2.85428856857561e-05*G0_3_4 + 4.28143285286345e-05*G0_3_5 - 0.000196945911231718*G0_3_6 + 0.000145568716997357*G0_3_7 - 0.000530897673755065*G0_3_8 - 0.000770657913515418*G0_3_9 + 1.99800199800294e-05*G0_4_0 + 7.29429300858209e-06*G0_4_1 + 3.01286015571867e-05*G0_4_2 - 2.85428856857562e-05*G0_4_3 - 1.14171542743031e-05*G0_4_4 - 2.56885971171807e-05*G0_4_5 + 0.000222634508348899*G0_4_6 - 4.28143285286344e-05*G0_4_7 + 0.000385328956757709*G0_4_8 + 0.00041101755387489*G0_4_9 - 5.89886304172296e-05*G0_5_0 - 3.45686059971936e-05*G0_5_2 + 4.28143285286345e-05*G0_5_3 - 2.56885971171808e-05*G0_5_4 + 0.000108462965605874*G0_5_5 + 3.13971742543317e-05*G0_5_6 - 8.56286570572688e-05*G0_5_7 + 4.28143285286347e-05*G0_5_8 + 0.000239760239760352*G0_5_9 + 3.13971742543319e-05*G0_6_0 + 7.7065791351542e-05*G0_6_1 - 0.000196945911231718*G0_6_3 + 0.000222634508348899*G0_6_4 + 3.13971742543317e-05*G0_6_5 + 0.00072498929641821*G0_6_6 + 4.28143285286342e-05*G0_6_7 + 4.28143285286341e-05*G0_6_8 + 0.000753532182103966*G0_6_9 - 7.29429300858213e-06*G0_7_0 + 1.49057291914504e-05*G0_7_1 - 2.85428856857562e-06*G0_7_2 + 0.000145568716997357*G0_7_3 - 4.28143285286344e-05*G0_7_4 - 8.56286570572688e-05*G0_7_5 + 4.28143285286343e-05*G0_7_6 - 0.000331097473954772*G0_7_7 + 0.00031968031968047*G0_7_8 + 0.000239760239760352*G0_7_9 - 4.24971853543481e-05*G0_8_0 - 7.92857935715446e-06*G0_8_1 - 0.0001170258313116*G0_8_2 - 0.000530897673755065*G0_8_3 + 0.000385328956757709*G0_8_4 + 4.28143285286347e-05*G0_8_5 + 4.28143285286342e-05*G0_8_6 + 0.00031968031968047*G0_8_7 - 0.00229199372056623*G0_8_8 - 0.00125017839303612*G0_8_9 - 0.000108462965605874*G0_9_0 + 0.000159840159840235*G0_9_1 - 0.000119880119880176*G0_9_2 - 0.000770657913515418*G0_9_3 + 0.00041101755387489*G0_9_4 + 0.000239760239760352*G0_9_5 + 0.000753532182103966*G0_9_6 + 0.000239760239760352*G0_9_7 - 0.00125017839303612*G0_9_8 - 0.00051377194234361*G0_9_9;
    A[191] = A[179] + 0.000158994444708805*G0_0_0 + 2.48076438552745e-05*G0_0_1 + 3.49562254324323e-05*G0_0_2 + 1.01485815771576e-05*G0_0_3 - 5.07429078857889e-05*G0_0_4 + 0.000243565957851786*G0_0_5 - 0.00018267446838884*G0_0_6 + 0.000334903192046207*G0_0_7 - 3.04457447314733e-05*G0_0_8 + 0.00018267446838884*G0_0_9 + 2.48076438552744e-05*G0_1_0 + 3.94667061333909e-05*G0_1_1 + 2.02971631543156e-05*G0_1_2 - 6.08914894629467e-05*G0_1_4 + 0.000223268794697471*G0_1_5 - 0.000142080142080209*G0_1_6 + 0.000152228723657367*G0_1_7 + 0.000121782978925894*G0_1_9 + 3.49562254324323e-05*G0_2_0 + 2.02971631543156e-05*G0_2_1 - 1.01485815771579e-05*G0_2_3 - 4.0594326308631e-05*G0_2_4 + 0.000152228723657367*G0_2_5 - 6.08914894629467e-05*G0_2_6 + 4.05943263086313e-05*G0_2_7 + 1.01485815771573e-05*G0_2_8 + 1.01485815771576e-05*G0_3_0 - 1.01485815771579e-05*G0_3_2 - 0.000365348936777681*G0_3_3 + 0.000182674468388841*G0_3_4 - 0.00027401170258326*G0_3_5 + 0.000274011702583261*G0_3_6 - 0.00018267446838884*G0_3_7 + 0.000365348936777678*G0_3_8 - 5.07429078857889e-05*G0_4_0 - 6.08914894629467e-05*G0_4_1 - 4.0594326308631e-05*G0_4_2 + 0.000182674468388841*G0_4_3 - 9.13372341944216e-05*G0_4_4 - 0.000274011702583261*G0_4_6 + 9.13372341944198e-05*G0_4_7 - 0.000182674468388839*G0_4_8 + 0.000243565957851786*G0_5_0 + 0.000223268794697471*G0_5_1 + 0.000152228723657367*G0_5_2 - 0.00027401170258326*G0_5_3 + 0.00200941915227724*G0_5_5 - 0.0004566861709721*G0_5_6 + 0.00109604681033304*G0_5_7 - 0.00082203510774978*G0_5_8 + 0.00109604681033304*G0_5_9 - 0.00018267446838884*G0_6_0 - 0.000142080142080209*G0_6_1 - 6.08914894629467e-05*G0_6_2 + 0.000274011702583261*G0_6_3 - 0.000274011702583261*G0_6_4 - 0.0004566861709721*G0_6_5 - 0.000456686170972101*G0_6_6 - 0.00027401170258326*G0_6_7 + 0.000274011702583261*G0_6_8 - 0.000548023405166521*G0_6_9 + 0.000334903192046207*G0_7_0 + 0.000152228723657367*G0_7_1 + 4.05943263086313e-05*G0_7_2 - 0.00018267446838884*G0_7_3 + 9.13372341944198e-05*G0_7_4 + 0.00109604681033304*G0_7_5 - 0.00027401170258326*G0_7_6 + 0.000548023405166521*G0_7_7 - 0.00109604681033304*G0_7_8 - 3.04457447314733e-05*G0_8_0 + 1.01485815771573e-05*G0_8_2 + 0.000365348936777678*G0_8_3 - 0.000182674468388839*G0_8_4 - 0.000822035107749781*G0_8_5 + 0.000274011702583261*G0_8_6 - 0.00109604681033304*G0_8_7 + 0.00219209362066608*G0_8_8 + 0.00018267446838884*G0_9_0 + 0.000121782978925894*G0_9_1 + 0.00109604681033304*G0_9_5 - 0.000548023405166521*G0_9_6;
    A[169] = A[179] + 2.17419265038414e-05*G0_0_0 - 3.84095622191041e-05*G0_0_1 - 6.73048292096228e-06*G0_0_2 - 5.80372008943709e-05*G0_0_3 + 2.85428856857551e-06*G0_0_4 + 0.000112268683697308*G0_0_5 - 5.80372008943711e-05*G0_0_6 + 0.000143031571603067*G0_0_7 - 0.00011290297004588*G0_0_8 + 6.27943485086637e-05*G0_0_9 - 3.84095622191041e-05*G0_1_0 - 0.000397133730467251*G0_1_1 - 3.77047996095792e-05*G0_1_2 - 0.000366300366300538*G0_1_3 + 0.000136054421768771*G0_1_4 + 2.94943152086149e-05*G0_1_5 - 9.99000999001471e-05*G0_1_6 + 0.000224854510568902*G0_1_7 - 0.000410700410700604*G0_1_8 - 0.000232148803577484*G0_1_9 - 6.73048292096228e-06*G0_2_0 - 3.77047996095792e-05*G0_2_1 - 3.77400377400556e-05*G0_2_2 - 8.24572253144069e-05*G0_2_3 + 9.83143840287153e-06*G0_2_4 + 6.12086326372329e-05*G0_2_5 + 4.09114694829173e-05*G0_2_7 - 8.08715094429761e-05*G0_2_8 + 9.51429522858553e-06*G0_2_9 - 5.80372008943709e-05*G0_3_0 - 0.000366300366300538*G0_3_1 - 8.24572253144069e-05*G0_3_2 - 0.000842015127729808*G0_3_3 + 0.000536606250892218*G0_3_4 + 2.85428856857539e-06*G0_3_5 + 0.000379620379620559*G0_3_6 + 0.00025403168260323*G0_3_7 - 0.000576566290852276*G0_3_8 + 0.000188383045525992*G0_3_9 + 2.85428856857551e-06*G0_4_0 + 0.000136054421768771*G0_4_1 + 9.83143840287153e-06*G0_4_2 + 0.000536606250892218*G0_4_3 - 0.000422434708149193*G0_4_4 + 7.1357214214391e-05*G0_4_5 - 0.000450977593834949*G0_4_6 - 0.000105608677037298*G0_4_7 + 0.000322534608249046*G0_4_8 - 0.000171257314114539*G0_4_9 + 0.000112268683697308*G0_5_0 + 2.94943152086149e-05*G0_5_1 + 6.12086326372329e-05*G0_5_2 + 2.8542885685754e-06*G0_5_3 + 7.1357214214391e-05*G0_5_4 - 0.000142714428428782*G0_5_5 + 2.85428856857619e-06*G0_5_6 + 5.13771942343612e-05*G0_5_7 - 8.56286570572693e-06*G0_5_8 - 0.000171257314114537*G0_5_9 - 5.80372008943711e-05*G0_6_0 - 9.9900099900147e-05*G0_6_1 + 0.000379620379620559*G0_6_3 - 0.000450977593834949*G0_6_4 + 2.85428856857619e-06*G0_6_5 - 0.00103325246182438*G0_6_6 - 4.28143285286341e-05*G0_6_7 + 0.000231197374054626*G0_6_8 - 0.000787783644926874*G0_6_9 + 0.000143031571603067*G0_7_0 + 0.000224854510568902*G0_7_1 + 4.09114694829173e-05*G0_7_2 + 0.00025403168260323*G0_7_3 - 0.000105608677037298*G0_7_4 + 5.13771942343612e-05*G0_7_5 - 4.28143285286341e-05*G0_7_6 - 0.000171257314114537*G0_7_7 + 0.000205508776937445*G0_7_8 - 0.000102754388468722*G0_7_9 - 0.00011290297004588*G0_8_0 - 0.000410700410700604*G0_8_1 - 8.08715094429761e-05*G0_8_2 - 0.000576566290852276*G0_8_3 + 0.000322534608249046*G0_8_4 - 8.56286570572694e-06*G0_8_5 + 0.000231197374054626*G0_8_6 + 0.000205508776937445*G0_8_7 - 0.000522334808049339*G0_8_8 + 5.13771942343613e-05*G0_8_9 + 6.27943485086637e-05*G0_9_0 - 0.000232148803577484*G0_9_1 + 9.51429522858556e-06*G0_9_2 + 0.000188383045525992*G0_9_3 - 0.000171257314114539*G0_9_4 - 0.000171257314114537*G0_9_5 - 0.000787783644926874*G0_9_6 - 0.000102754388468722*G0_9_7 + 5.13771942343613e-05*G0_9_8 - 0.000924789496218505*G0_9_9;
    A[71] = A[169];
    A[116] = A[158] - 2.46666913333694e-06*G0_0_1 + 2.46666913333698e-06*G0_0_2 + 2.66400266400393e-05*G0_0_3 - 2.66400266400393e-05*G0_0_4 - 3.74228945657691e-05*G0_0_5 - 4.31314717029207e-05*G0_0_6 + 3.74228945657693e-05*G0_0_7 + 4.31314717029207e-05*G0_0_8 - 2.46666913333694e-06*G0_1_0 + 2.36800236800352e-05*G0_1_1 + 3.42514628229078e-05*G0_1_3 - 3.04457447314735e-05*G0_1_4 + 3.42514628229075e-05*G0_1_5 + 7.61143618286829e-06*G0_1_6 + 1.2685726971447e-05*G0_1_7 + 7.16743573886773e-05*G0_1_8 + 8.7531516102986e-05*G0_1_9 + 2.46666913333698e-06*G0_2_0 - 2.36800236800349e-05*G0_2_2 + 3.04457447314736e-05*G0_2_3 - 3.42514628229077e-05*G0_2_4 - 1.2685726971447e-05*G0_2_5 - 7.1674357388677e-05*G0_2_6 - 3.42514628229075e-05*G0_2_7 - 7.61143618286817e-06*G0_2_8 - 8.75315161029858e-05*G0_2_9 + 2.66400266400393e-05*G0_3_0 + 3.42514628229078e-05*G0_3_1 + 3.04457447314736e-05*G0_3_2 + 6.85029256458162e-05*G0_3_3 - 9.13372341944202e-05*G0_3_5 - 2.28343085486051e-05*G0_3_6 - 7.99200799201179e-05*G0_3_7 + 5.70857713715137e-05*G0_3_8 - 0.000102754388468722*G0_3_9 - 2.66400266400393e-05*G0_4_0 - 3.04457447314735e-05*G0_4_1 - 3.42514628229077e-05*G0_4_2 - 6.85029256458154e-05*G0_4_4 + 7.99200799201178e-05*G0_4_5 - 5.70857713715127e-05*G0_4_6 + 9.13372341944203e-05*G0_4_7 + 2.28343085486044e-05*G0_4_8 + 0.000102754388468722*G0_4_9 - 3.74228945657691e-05*G0_5_0 + 3.42514628229075e-05*G0_5_1 - 1.2685726971447e-05*G0_5_2 - 9.13372341944202e-05*G0_5_3 + 7.99200799201178e-05*G0_5_4 + 0.000251177394034655*G0_5_5 + 0.000268303125446109*G0_5_6 - 0.000102754388468723*G0_5_8 + 0.000205508776937445*G0_5_9 - 4.31314717029207e-05*G0_6_0 + 7.61143618286829e-06*G0_6_1 - 7.1674357388677e-05*G0_6_2 - 2.28343085486051e-05*G0_6_3 - 5.70857713715127e-05*G0_6_4 + 0.000268303125446109*G0_6_5 + 0.00018267446838884*G0_6_6 + 0.000102754388468722*G0_6_7 + 0.000308263165406167*G0_6_9 + 3.74228945657693e-05*G0_7_0 + 1.2685726971447e-05*G0_7_1 - 3.42514628229075e-05*G0_7_2 - 7.99200799201179e-05*G0_7_3 + 9.13372341944203e-05*G0_7_4 + 0.000102754388468722*G0_7_6 - 0.000251177394034654*G0_7_7 - 0.00026830312544611*G0_7_8 - 0.000205508776937445*G0_7_9 + 4.31314717029208e-05*G0_8_0 + 7.16743573886773e-05*G0_8_1 - 7.61143618286816e-06*G0_8_2 + 5.70857713715137e-05*G0_8_3 + 2.28343085486044e-05*G0_8_4 - 0.000102754388468723*G0_8_5 - 0.00026830312544611*G0_8_7 - 0.000182674468388838*G0_8_8 - 0.000308263165406166*G0_8_9 + 8.7531516102986e-05*G0_9_1 - 8.75315161029858e-05*G0_9_2 - 0.000102754388468722*G0_9_3 + 0.000102754388468722*G0_9_4 + 0.000205508776937445*G0_9_5 + 0.000308263165406167*G0_9_6 - 0.000205508776937445*G0_9_7 - 0.000308263165406166*G0_9_8;
    A[103] = A[116] + 4.78533811867368e-05*G0_0_0 + 1.40952521904927e-07*G0_0_1 - 8.24572253144069e-06*G0_0_2 + 7.70657913515417e-05*G0_0_3 - 7.92857935715436e-06*G0_0_5 + 1.49057291914505e-05*G0_0_6 + 4.34486148772067e-05*G0_0_7 + 7.29429300858197e-06*G0_0_8 + 0.000159840159840235*G0_0_9 + 1.40952521904927e-07*G0_1_0 - 6.1666728333429e-06*G0_1_1 - 2.99524109048062e-06*G0_1_2 - 3.45686059971935e-05*G0_1_4 - 0.000117025831311601*G0_1_5 - 2.85428856857565e-06*G0_1_6 - 1.45885860171641e-05*G0_1_7 + 3.01286015571867e-05*G0_1_8 - 0.000119880119880176*G0_1_9 - 8.2457225314407e-06*G0_2_0 - 2.99524109048062e-06*G0_2_1 - 2.70276460752777e-05*G0_2_2 + 3.13971742543316e-05*G0_2_3 - 5.89886304172293e-05*G0_2_4 - 4.24971853543483e-05*G0_2_5 - 7.29429300858198e-06*G0_2_6 - 3.7105751391483e-05*G0_2_7 + 1.99800199800291e-05*G0_2_8 - 0.000108462965605874*G0_2_9 + 7.70657913515417e-05*G0_3_0 + 3.13971742543316e-05*G0_3_2 + 0.000724989296418207*G0_3_3 + 3.13971742543328e-05*G0_3_4 + 4.28143285286348e-05*G0_3_5 + 4.28143285286347e-05*G0_3_6 - 0.000196945911231717*G0_3_7 + 0.000222634508348897*G0_3_8 + 0.000753532182103964*G0_3_9 - 3.45686059971935e-05*G0_4_1 - 5.89886304172293e-05*G0_4_2 + 3.13971742543328e-05*G0_4_3 + 0.000108462965605874*G0_4_4 + 4.28143285286342e-05*G0_4_5 - 8.56286570572688e-05*G0_4_6 + 4.2814328528634e-05*G0_4_7 - 2.56885971171796e-05*G0_4_8 + 0.000239760239760353*G0_4_9 - 7.92857935715436e-06*G0_5_0 - 0.000117025831311601*G0_5_1 - 4.24971853543483e-05*G0_5_2 + 4.28143285286348e-05*G0_5_3 + 4.28143285286341e-05*G0_5_4 - 0.00229199372056622*G0_5_5 + 0.000319680319680469*G0_5_6 - 0.000530897673755066*G0_5_7 + 0.00038532895675771*G0_5_8 - 0.00125017839303612*G0_5_9 + 1.49057291914505e-05*G0_6_0 - 2.85428856857565e-06*G0_6_1 - 7.29429300858197e-06*G0_6_2 + 4.28143285286347e-05*G0_6_3 - 8.56286570572688e-05*G0_6_4 + 0.00031968031968047*G0_6_5 - 0.000331097473954773*G0_6_6 + 0.000145568716997357*G0_6_7 - 4.28143285286342e-05*G0_6_8 + 0.000239760239760353*G0_6_9 + 4.34486148772067e-05*G0_7_0 - 1.45885860171641e-05*G0_7_1 - 3.7105751391483e-05*G0_7_2 - 0.000196945911231717*G0_7_3 + 4.2814328528634e-05*G0_7_4 - 0.000530897673755066*G0_7_5 + 0.000145568716997357*G0_7_6 - 0.000122734408448752*G0_7_7 - 2.85428856857552e-05*G0_7_8 - 0.000770657913515418*G0_7_9 + 7.29429300858197e-06*G0_8_0 + 3.01286015571867e-05*G0_8_1 + 1.99800199800291e-05*G0_8_2 + 0.000222634508348897*G0_8_3 - 2.56885971171796e-05*G0_8_4 + 0.00038532895675771*G0_8_5 - 4.28143285286342e-05*G0_8_6 - 2.85428856857551e-05*G0_8_7 - 1.1417154274306e-05*G0_8_8 + 0.000411017553874889*G0_8_9 + 0.000159840159840235*G0_9_0 - 0.000119880119880176*G0_9_1 - 0.000108462965605874*G0_9_2 + 0.000753532182103964*G0_9_3 + 0.000239760239760353*G0_9_4 - 0.00125017839303612*G0_9_5 + 0.000239760239760353*G0_9_6 - 0.000770657913515418*G0_9_7 + 0.000411017553874889*G0_9_8 - 0.000513771942343618*G0_9_9;
    A[100] = A[103] - 0.00039713373046725*G0_0_0 - 3.77047996095792e-05*G0_0_1 - 3.8409562219104e-05*G0_0_2 - 9.99000999001468e-05*G0_0_3 + 2.94943152086147e-05*G0_0_4 - 0.000410700410700604*G0_0_5 + 0.000224854510568902*G0_0_6 - 0.000366300366300538*G0_0_7 + 0.000136054421768771*G0_0_8 - 0.000232148803577484*G0_0_9 - 3.77047996095792e-05*G0_1_0 - 3.77400377400554e-05*G0_1_1 - 6.73048292096227e-06*G0_1_2 + 6.12086326372328e-05*G0_1_4 - 8.0871509442976e-05*G0_1_5 + 4.09114694829173e-05*G0_1_6 - 8.2457225314407e-05*G0_1_7 + 9.83143840287168e-06*G0_1_8 + 9.5142952285854e-06*G0_1_9 - 3.8409562219104e-05*G0_2_0 - 6.73048292096227e-06*G0_2_1 + 2.17419265038415e-05*G0_2_2 - 5.80372008943709e-05*G0_2_3 + 0.000112268683697308*G0_2_4 - 0.00011290297004588*G0_2_5 + 0.000143031571603067*G0_2_6 - 5.80372008943712e-05*G0_2_7 + 2.85428856857572e-06*G0_2_8 + 6.27943485086639e-05*G0_2_9 - 9.99000999001468e-05*G0_3_0 - 5.80372008943709e-05*G0_3_2 - 0.00103325246182437*G0_3_3 + 2.85428856857505e-06*G0_3_4 + 0.000231197374054626*G0_3_5 - 4.28143285286347e-05*G0_3_6 + 0.000379620379620558*G0_3_7 - 0.000450977593834948*G0_3_8 - 0.000787783644926871*G0_3_9 + 2.94943152086147e-05*G0_4_0 + 6.12086326372328e-05*G0_4_1 + 0.000112268683697308*G0_4_2 + 2.85428856857507e-06*G0_4_3 - 0.000142714428428781*G0_4_4 - 8.56286570572681e-06*G0_4_5 + 5.13771942343613e-05*G0_4_6 + 2.8542885685758e-06*G0_4_7 + 7.13572142143901e-05*G0_4_8 - 0.000171257314114538*G0_4_9 - 0.000410700410700604*G0_5_0 - 8.0871509442976e-05*G0_5_1 - 0.00011290297004588*G0_5_2 + 0.000231197374054626*G0_5_3 - 8.56286570572682e-06*G0_5_4 - 0.000522334808049343*G0_5_5 + 0.000205508776937446*G0_5_6 - 0.000576566290852276*G0_5_7 + 0.000322534608249046*G0_5_8 + 5.13771942343606e-05*G0_5_9 + 0.000224854510568902*G0_6_0 + 4.09114694829173e-05*G0_6_1 + 0.000143031571603067*G0_6_2 - 4.28143285286347e-05*G0_6_3 + 5.13771942343613e-05*G0_6_4 + 0.000205508776937446*G0_6_5 - 0.000171257314114538*G0_6_6 + 0.000254031682603231*G0_6_7 - 0.000105608677037298*G0_6_8 - 0.000102754388468722*G0_6_9 - 0.000366300366300538*G0_7_0 - 8.2457225314407e-05*G0_7_1 - 5.80372008943712e-05*G0_7_2 + 0.000379620379620558*G0_7_3 + 2.85428856857578e-06*G0_7_4 - 0.000576566290852276*G0_7_5 + 0.000254031682603231*G0_7_6 - 0.00084201512772981*G0_7_7 + 0.000536606250892217*G0_7_8 + 0.000188383045525991*G0_7_9 + 0.000136054421768771*G0_8_0 + 9.83143840287168e-06*G0_8_1 + 2.85428856857574e-06*G0_8_2 - 0.000450977593834948*G0_8_3 + 7.13572142143901e-05*G0_8_4 + 0.000322534608249046*G0_8_5 - 0.000105608677037298*G0_8_6 + 0.000536606250892217*G0_8_7 - 0.000422434708149192*G0_8_8 - 0.000171257314114537*G0_8_9 - 0.000232148803577484*G0_9_0 + 9.51429522858541e-06*G0_9_1 + 6.2794348508664e-05*G0_9_2 - 0.000787783644926871*G0_9_3 - 0.000171257314114538*G0_9_4 + 5.13771942343606e-05*G0_9_5 - 0.000102754388468722*G0_9_6 + 0.000188383045525991*G0_9_7 - 0.000171257314114537*G0_9_8 - 0.0009247894962185*G0_9_9;
    A[129] = -A[116] + 8.04134137467848e-05*G0_0_0 + 1.19809643619224e-05*G0_0_1 + 1.0031121142237e-05*G0_0_2 + 1.13114398828739e-05*G0_0_3 - 6.87143544286697e-06*G0_0_5 - 4.4928616357209e-05*G0_0_6 + 0.000119351547923032*G0_0_7 - 3.73171801743402e-05*G0_0_8 - 2.28343085486048e-05*G0_0_9 + 1.19809643619224e-05*G0_1_0 + 2.74505036409931e-05*G0_1_1 + 3.98190874381539e-06*G0_1_2 + 5.82486296772285e-05*G0_1_5 + 1.5117157974308e-05*G0_1_6 + 6.0257203114374e-05*G0_1_7 + 1.5857158714314e-06*G0_1_8 + 0.00010212010212015*G0_1_9 + 1.0031121142237e-05*G0_2_0 + 3.98190874381539e-06*G0_2_1 + 1.37311248422423e-05*G0_2_2 + 1.1311439882874e-05*G0_2_3 - 1.12057254914452e-05*G0_2_4 + 2.11428782857583e-07*G0_2_5 - 5.40200540200796e-05*G0_2_6 + 6.96657839515308e-05*G0_2_7 - 7.71715057429688e-06*G0_2_8 - 6.34286348572384e-07*G0_2_9 + 1.13114398828739e-05*G0_3_0 + 1.1311439882874e-05*G0_3_2 + 8.94343751487042e-05*G0_3_3 - 7.32600732601082e-05*G0_3_4 - 8.46772275344104e-05*G0_3_5 - 8.46772275344104e-05*G0_3_6 - 7.32600732601083e-05*G0_3_7 + 8.9434375148704e-05*G0_3_8 - 0.000159840159840234*G0_3_9 - 1.12057254914452e-05*G0_4_2 - 7.32600732601081e-05*G0_4_3 + 0.000157937300794518*G0_4_4 - 3.90086104372e-05*G0_4_5 + 0.00012368583797161*G0_4_6 - 8.46772275344097e-05*G0_4_7 - 1.61743018885958e-05*G0_4_8 + 7.99200799201171e-05*G0_4_9 - 6.87143544286697e-06*G0_5_0 + 5.82486296772285e-05*G0_5_1 + 2.1142878285757e-07*G0_5_2 - 8.46772275344104e-05*G0_5_3 - 3.90086104372e-05*G0_5_4 + 0.000575614861329417*G0_5_5 + 7.61143618286833e-05*G0_5_6 + 0.00046239474810925*G0_5_7 - 0.000214071642643172*G0_5_8 + 0.000496646210932159*G0_5_9 - 4.4928616357209e-05*G0_6_0 + 1.5117157974308e-05*G0_6_1 - 5.40200540200796e-05*G0_6_2 - 8.46772275344104e-05*G0_6_3 + 0.00012368583797161*G0_6_4 + 7.61143618286833e-05*G0_6_5 + 0.000407211835783456*G0_6_6 - 0.000248323105466079*G0_6_7 + 8.56286570572682e-06*G0_6_8 + 0.000171257314114538*G0_6_9 + 0.000119351547923033*G0_7_0 + 6.0257203114374e-05*G0_7_1 + 6.96657839515308e-05*G0_7_2 - 7.32600732601083e-05*G0_7_3 - 8.46772275344097e-05*G0_7_4 + 0.00046239474810925*G0_7_5 - 0.000248323105466079*G0_7_6 + 0.00139003853289633*G0_7_7 - 0.000382474668189135*G0_7_8 + 0.000565149136577973*G0_7_9 - 3.73171801743403e-05*G0_8_0 + 1.5857158714314e-06*G0_8_1 - 7.71715057429688e-06*G0_8_2 + 8.9434375148704e-05*G0_8_3 - 1.61743018885958e-05*G0_8_4 - 0.000214071642643172*G0_8_5 + 8.56286570572682e-06*G0_8_6 - 0.000382474668189134*G0_8_7 + 0.000148423005565935*G0_8_8 - 0.000274011702583259*G0_8_9 - 2.28343085486049e-05*G0_9_0 + 0.00010212010212015*G0_9_1 - 6.34286348572384e-07*G0_9_2 - 0.000159840159840234*G0_9_3 + 7.99200799201171e-05*G0_9_4 + 0.000496646210932159*G0_9_5 + 0.000171257314114538*G0_9_6 + 0.000565149136577973*G0_9_7 - 0.000274011702583259*G0_9_8 + 0.000924789496218503*G0_9_9;
    A[104] = A[103] + 3.94667061333912e-05*G0_0_0 + 2.02971631543155e-05*G0_0_1 + 2.48076438552745e-05*G0_0_2 - 0.000142080142080209*G0_0_3 + 0.000223268794697471*G0_0_4 + 0.000152228723657367*G0_0_6 - 6.08914894629465e-05*G0_0_8 + 0.000121782978925893*G0_0_9 + 2.02971631543155e-05*G0_1_0 + 3.49562254324323e-05*G0_1_2 - 6.08914894629466e-05*G0_1_3 + 0.000152228723657367*G0_1_4 + 1.01485815771577e-05*G0_1_5 + 4.05943263086312e-05*G0_1_6 - 1.01485815771577e-05*G0_1_7 - 4.05943263086312e-05*G0_1_8 + 2.48076438552745e-05*G0_2_0 + 3.49562254324323e-05*G0_2_1 + 0.000158994444708805*G0_2_2 - 0.00018267446838884*G0_2_3 + 0.000243565957851787*G0_2_4 - 3.04457447314736e-05*G0_2_5 + 0.000334903192046207*G0_2_6 + 1.01485815771576e-05*G0_2_7 - 5.07429078857886e-05*G0_2_8 + 0.00018267446838884*G0_2_9 - 0.000142080142080209*G0_3_0 - 6.08914894629466e-05*G0_3_1 - 0.00018267446838884*G0_3_2 - 0.000456686170972099*G0_3_3 - 0.000456686170972101*G0_3_4 + 0.00027401170258326*G0_3_5 - 0.00027401170258326*G0_3_6 + 0.00027401170258326*G0_3_7 - 0.000274011702583259*G0_3_8 - 0.00054802340516652*G0_3_9 + 0.000223268794697471*G0_4_0 + 0.000152228723657367*G0_4_1 + 0.000243565957851787*G0_4_2 - 0.000456686170972101*G0_4_3 + 0.00200941915227724*G0_4_4 - 0.00082203510774978*G0_4_5 + 0.00109604681033304*G0_4_6 - 0.00027401170258326*G0_4_7 + 0.00109604681033304*G0_4_9 + 1.01485815771577e-05*G0_5_1 - 3.04457447314737e-05*G0_5_2 + 0.00027401170258326*G0_5_3 - 0.00082203510774978*G0_5_4 + 0.00219209362066607*G0_5_5 - 0.00109604681033304*G0_5_6 + 0.00036534893677768*G0_5_7 - 0.00018267446838884*G0_5_8 + 0.000152228723657367*G0_6_0 + 4.05943263086312e-05*G0_6_1 + 0.000334903192046207*G0_6_2 - 0.00027401170258326*G0_6_3 + 0.00109604681033304*G0_6_4 - 0.00109604681033304*G0_6_5 + 0.00054802340516652*G0_6_6 - 0.00018267446838884*G0_6_7 + 9.13372341944197e-05*G0_6_8 - 1.01485815771577e-05*G0_7_1 + 1.01485815771576e-05*G0_7_2 + 0.00027401170258326*G0_7_3 - 0.00027401170258326*G0_7_4 + 0.00036534893677768*G0_7_5 - 0.00018267446838884*G0_7_6 - 0.000365348936777679*G0_7_7 + 0.00018267446838884*G0_7_8 - 6.08914894629465e-05*G0_8_0 - 4.05943263086312e-05*G0_8_1 - 5.07429078857886e-05*G0_8_2 - 0.000274011702583259*G0_8_3 - 0.00018267446838884*G0_8_5 + 9.13372341944197e-05*G0_8_6 + 0.00018267446838884*G0_8_7 - 9.13372341944189e-05*G0_8_8 + 0.000121782978925893*G0_9_0 + 0.00018267446838884*G0_9_2 - 0.00054802340516652*G0_9_3 + 0.00109604681033304*G0_9_4;
    A[216] = A[104];
    A[201] = A[103];
    A[143] = A[129];
    A[219] = A[149];
    A[189] = A[186] + 1.32495370590671e-05*G0_0_1 - 1.3249537059067e-05*G0_0_2 - 4.56686170972102e-05*G0_0_3 + 4.566861709721e-05*G0_0_4 - 0.000266400266400391*G0_0_5 + 0.000106560106560156*G0_0_6 + 0.000266400266400392*G0_0_7 - 0.000106560106560157*G0_0_8 + 1.32495370590671e-05*G0_1_0 - 2.98819346438536e-05*G0_1_1 - 4.566861709721e-05*G0_1_3 + 4.566861709721e-05*G0_1_4 - 0.00013700585129163*G0_1_5 + 4.56686170972101e-05*G0_1_6 + 0.000142080142080209*G0_1_7 - 4.82057624914993e-05*G0_1_8 + 4.56686170972099e-05*G0_1_9 - 1.3249537059067e-05*G0_2_0 + 2.98819346438535e-05*G0_2_2 - 4.56686170972101e-05*G0_2_3 + 4.56686170972101e-05*G0_2_4 - 0.000142080142080209*G0_2_5 + 4.82057624914997e-05*G0_2_6 + 0.00013700585129163*G0_2_7 - 4.56686170972101e-05*G0_2_8 - 4.56686170972104e-05*G0_2_9 - 4.56686170972101e-05*G0_3_0 - 4.56686170972099e-05*G0_3_1 - 4.56686170972101e-05*G0_3_2 - 0.00041101755387489*G0_3_3 + 0.000274011702583261*G0_3_5 - 0.00013700585129163*G0_3_6 + 0.00013700585129163*G0_3_7 - 0.00027401170258326*G0_3_8 - 0.00041101755387489*G0_3_9 + 4.566861709721e-05*G0_4_0 + 4.566861709721e-05*G0_4_1 + 4.56686170972101e-05*G0_4_2 + 0.00041101755387489*G0_4_4 - 0.00013700585129163*G0_4_5 + 0.00027401170258326*G0_4_6 - 0.00027401170258326*G0_4_7 + 0.00013700585129163*G0_4_8 + 0.00041101755387489*G0_4_9 - 0.000266400266400391*G0_5_0 - 0.00013700585129163*G0_5_1 - 0.000142080142080209*G0_5_2 + 0.000274011702583261*G0_5_3 - 0.00013700585129163*G0_5_4 - 0.0031968031968047*G0_5_5 + 0.000570857713715125*G0_5_6 + 0.00041101755387489*G0_5_8 - 0.000822035107749782*G0_5_9 + 0.000106560106560156*G0_6_0 + 4.56686170972101e-05*G0_6_1 + 4.82057624914997e-05*G0_6_2 - 0.00013700585129163*G0_6_3 + 0.00027401170258326*G0_6_4 + 0.000570857713715125*G0_6_5 + 0.00022834308548605*G0_6_6 - 0.00041101755387489*G0_6_7 + 0.00041101755387489*G0_6_9 + 0.000266400266400392*G0_7_0 + 0.000142080142080209*G0_7_1 + 0.00013700585129163*G0_7_2 + 0.00013700585129163*G0_7_3 - 0.00027401170258326*G0_7_4 - 0.00041101755387489*G0_7_6 + 0.0031968031968047*G0_7_7 - 0.000570857713715127*G0_7_8 + 0.000822035107749777*G0_7_9 - 0.000106560106560157*G0_8_0 - 4.82057624914993e-05*G0_8_1 - 4.56686170972101e-05*G0_8_2 - 0.00027401170258326*G0_8_3 + 0.00013700585129163*G0_8_4 + 0.000411017553874891*G0_8_5 - 0.000570857713715127*G0_8_7 - 0.00022834308548605*G0_8_8 - 0.00041101755387489*G0_8_9 + 4.56686170972099e-05*G0_9_1 - 4.56686170972105e-05*G0_9_2 - 0.00041101755387489*G0_9_3 + 0.00041101755387489*G0_9_4 - 0.000822035107749782*G0_9_5 + 0.00041101755387489*G0_9_6 + 0.000822035107749777*G0_9_7 - 0.00041101755387489*G0_9_8;
    A[55] = A[153];
    A[29] = A[211];
    A[130] = A[158];
    A[73] = A[199];
    A[43] = A[45] + 1.0175010175015e-05*G0_0_3 + 8.6157229014412e-06*G0_0_5 + 1.36900136900201e-05*G0_0_7 - 9.14429485858484e-06*G0_0_8 + 3.61543218686247e-05*G0_0_9 + 2.35155790711458e-05*G0_1_1 + 2.30985945271768e-05*G0_1_3 - 1.65443022585957e-05*G0_1_4 + 5.3385767671507e-06*G0_1_7 + 2.53185967471801e-05*G0_1_8 + 1.77600177600261e-05*G0_1_9 - 3.5379082998147e-05*G0_2_2 + 5.81429152857975e-07*G0_2_3 - 3.54143211286221e-06*G0_2_4 + 1.63328734757382e-05*G0_2_5 - 1.82357325214553e-05*G0_2_6 + 1.2950012950019e-06*G0_2_7 - 3.92993250136292e-05*G0_2_8 - 4.31314717029205e-05*G0_2_9 + 1.0175010175015e-05*G0_3_0 + 2.30985945271769e-05*G0_3_1 + 5.81429152857965e-07*G0_3_2 + 0.000280909566623985*G0_3_3 - 5.94643451786608e-06*G0_3_4 - 1.45093002235928e-05*G0_3_5 - 1.66500166500253e-06*G0_3_6 - 3.591646448791e-05*G0_3_7 - 7.65900765901123e-05*G0_3_8 + 1.85528756957419e-05*G0_3_9 - 1.65443022585957e-05*G0_4_1 - 3.54143211286221e-06*G0_4_2 - 5.94643451786608e-06*G0_4_3 - 4.44793301936365e-05*G0_4_4 + 1.47471576043075e-05*G0_4_6 - 3.09214594929024e-06*G0_4_7 + 0.000112506541078022*G0_4_8 + 0.000155558726987371*G0_4_9 + 8.6157229014412e-06*G0_5_0 + 1.63328734757382e-05*G0_5_2 - 1.45093002235928e-05*G0_5_3 + 1.92664478378856e-05*G0_5_5 - 4.49550449550662e-05*G0_5_6 - 9.27643784787077e-06*G0_5_8 - 8.99100899101322e-05*G0_5_9 - 1.82357325214553e-05*G0_6_2 - 1.66500166500253e-06*G0_6_3 + 1.47471576043075e-05*G0_6_4 - 4.49550449550662e-05*G0_6_5 + 7.92065077779738e-05*G0_6_6 - 9.27643784787083e-06*G0_6_7 + 6.35079206508076e-05*G0_6_8 + 0.000132724418438767*G0_6_9 + 1.36900136900201e-05*G0_7_0 + 5.3385767671507e-06*G0_7_1 + 1.2950012950019e-06*G0_7_2 - 3.59164644879101e-05*G0_7_3 - 3.09214594929024e-06*G0_7_4 - 9.27643784787083e-06*G0_7_6 - 4.54307597164952e-05*G0_7_7 + 4.51929023357788e-06*G0_7_8 - 8.99100899101323e-05*G0_7_9 - 9.14429485858484e-06*G0_8_0 + 2.53185967471801e-05*G0_8_1 - 3.92993250136292e-05*G0_8_2 - 7.65900765901123e-05*G0_8_3 + 0.000112506541078022*G0_8_4 - 9.27643784787077e-06*G0_8_5 + 6.35079206508076e-05*G0_8_6 + 4.51929023357787e-06*G0_8_7 - 0.000390799676514146*G0_8_8 - 0.000278293135436123*G0_8_9 + 3.61543218686247e-05*G0_9_0 + 1.77600177600261e-05*G0_9_1 - 4.31314717029205e-05*G0_9_2 + 1.85528756957419e-05*G0_9_3 + 0.000155558726987371*G0_9_4 - 8.99100899101322e-05*G0_9_5 + 0.000132724418438767*G0_9_6 - 8.99100899101323e-05*G0_9_7 - 0.000278293135436123*G0_9_8 - 7.70657913515408e-05*G0_9_9;
    A[146] = A[174];
    A[75] = A[5];
    A[150] = A[10];
    A[183] = A[57];
    A[178] = A[218] + 3.41105103010025e-05*G0_0_1 - 3.41105103010026e-05*G0_0_2 + 0.000532800532800783*G0_0_3 - 0.000532800532800783*G0_0_4 + 0.000164914450628814*G0_0_5 - 0.000512503369646468*G0_0_6 - 0.000164914450628814*G0_0_7 + 0.000512503369646468*G0_0_8 + 3.41105103010025e-05*G0_1_0 + 0.00036365750651482*G0_1_1 + 0.000695177838035308*G0_1_3 - 0.000613989185418046*G0_1_4 + 0.00013700585129163*G0_1_5 - 0.000532800532800783*G0_1_6 - 0.000304457447314733*G0_1_7 + 0.000799200799201175*G0_1_8 - 0.000167451596023103*G0_1_9 - 3.41105103010026e-05*G0_2_0 - 0.00036365750651482*G0_2_2 + 0.000613989185418045*G0_2_3 - 0.000695177838035308*G0_2_4 + 0.000304457447314734*G0_2_5 - 0.000799200799201175*G0_2_6 - 0.00013700585129163*G0_2_7 + 0.000532800532800783*G0_2_8 + 0.000167451596023103*G0_2_9 + 0.000532800532800783*G0_3_0 + 0.000695177838035308*G0_3_1 + 0.000613989185418045*G0_3_2 + 0.00260311117454097*G0_3_3 - 0.00100470957613862*G0_3_5 + 0.00159840159840235*G0_3_6 - 0.00159840159840235*G0_3_7 + 0.0031968031968047*G0_3_8 + 0.00369915798487401*G0_3_9 - 0.000532800532800783*G0_4_0 - 0.000613989185418046*G0_4_1 - 0.000695177838035308*G0_4_2 - 0.00260311117454097*G0_4_4 + 0.00159840159840235*G0_4_5 - 0.0031968031968047*G0_4_6 + 0.00100470957613862*G0_4_7 - 0.00159840159840235*G0_4_8 - 0.00369915798487401*G0_4_9 + 0.000164914450628814*G0_5_0 + 0.00013700585129163*G0_5_1 + 0.000304457447314734*G0_5_2 - 0.00100470957613862*G0_5_3 + 0.00159840159840235*G0_5_4 - 0.00118738404452746*G0_5_5 + 0.00216925931211748*G0_5_6 - 0.000411017553874891*G0_5_8 + 0.000822035107749779*G0_5_9 - 0.000512503369646468*G0_6_0 - 0.000532800532800783*G0_6_1 - 0.000799200799201175*G0_6_2 + 0.00159840159840235*G0_6_3 - 0.0031968031968047*G0_6_4 + 0.00216925931211748*G0_6_5 - 0.00680462394748429*G0_6_6 + 0.000411017553874892*G0_6_7 - 0.00369915798487401*G0_6_9 - 0.000164914450628814*G0_7_0 - 0.000304457447314733*G0_7_1 - 0.00013700585129163*G0_7_2 - 0.00159840159840235*G0_7_3 + 0.00100470957613862*G0_7_4 + 0.000411017553874892*G0_7_6 + 0.00118738404452746*G0_7_7 - 0.00216925931211748*G0_7_8 - 0.000822035107749782*G0_7_9 + 0.000512503369646468*G0_8_0 + 0.000799200799201175*G0_8_1 + 0.000532800532800783*G0_8_2 + 0.0031968031968047*G0_8_3 - 0.00159840159840235*G0_8_4 - 0.00041101755387489*G0_8_5 - 0.00216925931211748*G0_8_7 + 0.00680462394748429*G0_8_8 + 0.00369915798487401*G0_8_9 - 0.000167451596023103*G0_9_1 + 0.000167451596023103*G0_9_2 + 0.00369915798487401*G0_9_3 - 0.00369915798487401*G0_9_4 + 0.000822035107749778*G0_9_5 - 0.00369915798487401*G0_9_6 - 0.000822035107749781*G0_9_7 + 0.00369915798487401*G0_9_8;
    A[119] = A[163] - 9.51429522858544e-06*G0_0_1 + 9.51429522858544e-06*G0_0_2 + 0.000468103325246403*G0_0_3 - 0.000468103325246402*G0_0_4 + 2.0931449502888e-05*G0_0_5 - 0.000395794681509153*G0_0_6 - 2.09314495028878e-05*G0_0_7 + 0.000395794681509154*G0_0_8 - 9.51429522858545e-06*G0_1_0 + 0.000249485963771795*G0_1_1 + 0.00043004614433206*G0_1_3 - 0.000449074734789231*G0_1_4 + 0.000171257314114537*G0_1_5 - 9.13372341944196e-05*G0_1_6 - 5.32800532800783e-05*G0_1_7 + 0.000614623471766618*G0_1_8 + 0.000422434708149193*G0_1_9 + 9.51429522858543e-06*G0_2_0 - 0.000249485963771795*G0_2_2 + 0.000449074734789232*G0_2_3 - 0.000430046144332061*G0_2_4 + 5.32800532800785e-05*G0_2_5 - 0.000614623471766618*G0_2_6 - 0.000171257314114537*G0_2_7 + 9.13372341944198e-05*G0_2_8 - 0.000422434708149193*G0_2_9 + 0.000468103325246403*G0_3_0 + 0.00043004614433206*G0_3_1 + 0.000449074734789232*G0_3_2 + 0.00287712287712423*G0_3_3 - 0.000959040959041409*G0_3_5 + 0.000274011702583259*G0_3_6 - 0.00140430997573921*G0_3_7 + 0.00167832167832247*G0_3_8 + 0.00154131582703084*G0_3_9 - 0.000468103325246402*G0_4_0 - 0.000449074734789231*G0_4_1 - 0.000430046144332061*G0_4_2 - 0.00287712287712422*G0_4_4 + 0.00140430997573921*G0_4_5 - 0.00167832167832246*G0_4_6 + 0.00095904095904141*G0_4_7 - 0.000274011702583261*G0_4_8 - 0.00154131582703083*G0_4_9 + 2.09314495028881e-05*G0_5_0 + 0.000171257314114537*G0_5_1 + 5.32800532800785e-05*G0_5_2 - 0.000959040959041409*G0_5_3 + 0.00140430997573921*G0_5_4 - 0.000205508776937447*G0_5_5 + 0.00179820179820264*G0_5_6 - 0.000513771942343611*G0_5_8 + 0.00102754388468722*G0_5_9 - 0.000395794681509153*G0_6_0 - 9.13372341944197e-05*G0_6_1 - 0.000614623471766618*G0_6_2 + 0.000274011702583259*G0_6_3 - 0.00167832167832246*G0_6_4 + 0.00179820179820264*G0_6_5 - 0.000205508776937442*G0_6_6 + 0.000513771942343613*G0_6_7 + 0.000719280719281064*G0_6_9 - 2.09314495028878e-05*G0_7_0 - 5.32800532800783e-05*G0_7_1 - 0.000171257314114537*G0_7_2 - 0.00140430997573921*G0_7_3 + 0.00095904095904141*G0_7_4 + 0.000513771942343613*G0_7_6 + 0.000205508776937442*G0_7_7 - 0.00179820179820264*G0_7_8 - 0.00102754388468723*G0_7_9 + 0.000395794681509154*G0_8_0 + 0.000614623471766618*G0_8_1 + 9.13372341944198e-05*G0_8_2 + 0.00167832167832247*G0_8_3 - 0.00027401170258326*G0_8_4 - 0.000513771942343612*G0_8_5 - 0.00179820179820264*G0_8_7 + 0.000205508776937444*G0_8_8 - 0.000719280719281057*G0_8_9 + 0.000422434708149193*G0_9_1 - 0.000422434708149193*G0_9_2 + 0.00154131582703084*G0_9_3 - 0.00154131582703083*G0_9_4 + 0.00102754388468722*G0_9_5 + 0.000719280719281064*G0_9_6 - 0.00102754388468723*G0_9_7 - 0.000719280719281058*G0_9_8;
    A[220] = A[164];
    A[197] = A[43];
    A[19] = A[61];
    A[12] = A[36] + 0.000226645782201444*G0_0_0 + 2.22910540370962e-05*G0_0_1 + 1.02542959685864e-05*G0_0_2 + 0.000247213104356077*G0_0_5 - 0.000118770118770175*G0_0_6 + 0.000189757332614564*G0_0_7 - 8.64743721886984e-05*G0_0_8 + 8.49943707086964e-05*G0_0_9 + 2.22910540370962e-05*G0_1_0 - 6.60714946429631e-07*G0_1_5 - 1.13642970785877e-06*G0_1_6 + 2.72214557928965e-06*G0_1_7 - 1.5698587127166e-05*G0_1_9 + 1.02542959685864e-05*G0_2_0 - 0.000201755916041726*G0_2_2 + 5.3650053650079e-05*G0_2_3 - 0.000103335817621581*G0_2_4 + 8.4782941925839e-05*G0_2_5 - 0.00015941730227452*G0_2_6 + 1.00428671857291e-06*G0_2_7 + 1.13114398828738e-05*G0_2_8 - 3.86914672629141e-05*G0_2_9 + 5.3650053650079e-05*G0_3_2 + 0.000210265924551738*G0_3_3 - 3.52028923457661e-05*G0_3_4 - 6.18429189858049e-06*G0_3_5 - 1.18928690357318e-05*G0_3_6 - 4.49550449550662e-05*G0_3_7 + 9.41915227629957e-05*G0_3_8 + 0.00013700585129163*G0_3_9 - 0.000103335817621581*G0_4_2 - 3.52028923457661e-05*G0_4_3 + 0.000194567337424572*G0_4_4 - 2.33100233100343e-05*G0_4_5 + 3.52028923457662e-05*G0_4_6 + 2.14071642643174e-06*G0_4_7 - 4.92364778079295e-05*G0_4_8 + 0.000162694448408811*G0_4_9 + 0.000247213104356077*G0_5_0 - 6.60714946429628e-07*G0_5_1 + 8.47829419258391e-05*G0_5_2 - 6.18429189858048e-06*G0_5_3 - 2.33100233100343e-05*G0_5_4 + 2.04557347414575e-05*G0_5_5 - 4.23386137672048e-05*G0_5_6 + 3.16350316350461e-05*G0_5_7 - 1.33200133200193e-05*G0_5_8 - 0.00022834308548605*G0_5_9 - 0.000118770118770175*G0_6_0 - 1.13642970785877e-06*G0_6_1 - 0.00015941730227452*G0_6_2 - 1.18928690357318e-05*G0_6_3 + 3.52028923457662e-05*G0_6_4 - 4.23386137672047e-05*G0_6_5 - 7.08814994529614e-05*G0_6_6 - 1.83150183150267e-05*G0_6_7 - 7.61143618286843e-06*G0_6_8 + 0.000139860139860206*G0_6_9 + 0.000189757332614564*G0_7_0 + 2.72214557928965e-06*G0_7_1 + 1.00428671857291e-06*G0_7_2 - 4.49550449550662e-05*G0_7_3 + 2.14071642643174e-06*G0_7_4 + 3.1635031635046e-05*G0_7_5 - 1.83150183150267e-05*G0_7_6 + 1.61743018885948e-05*G0_7_7 - 6.87407830265296e-05*G0_7_8 - 0.000218353075496036*G0_7_9 - 8.64743721886984e-05*G0_8_0 + 1.13114398828738e-05*G0_8_2 + 9.41915227629957e-05*G0_8_3 - 4.92364778079295e-05*G0_8_4 - 1.33200133200193e-05*G0_8_5 - 7.61143618286842e-06*G0_8_6 - 6.87407830265296e-05*G0_8_7 + 0.000116074401788742*G0_8_8 + 0.000145568716997357*G0_8_9 + 8.49943707086964e-05*G0_9_0 - 1.5698587127166e-05*G0_9_1 - 3.86914672629141e-05*G0_9_2 + 0.00013700585129163*G0_9_3 + 0.000162694448408811*G0_9_4 - 0.00022834308548605*G0_9_5 + 0.000139860139860206*G0_9_6 - 0.000218353075496036*G0_9_7 + 0.000145568716997357*G0_9_8 + 0.000548023405166521*G0_9_9;
    A[54] = A[138];
    A[33] = A[47];
    A[24] = A[137] - 1.80066846733599e-05*G0_0_0 - 1.58571587143049e-07*G0_0_6 - 3.92200392200577e-05*G0_0_7 + 3.16614602329037e-05*G0_0_8 + 3.17143174286182e-07*G0_0_9 + 0.000228554514268908*G0_1_1 + 0.000122364408078751*G0_1_3 - 5.95172023743732e-05*G0_1_4 - 5.41786256072233e-06*G0_1_5 - 7.89686503972592e-05*G0_1_7 + 0.000177758749187404*G0_1_8 + 3.45686059971936e-05*G0_1_9 - 1.847358990217e-05*G0_2_4 + 5.4178625607222e-06*G0_2_5 - 1.09942967085875e-05*G0_2_6 + 5.76143433286554e-06*G0_2_7 + 1.00428671857291e-05*G0_2_8 - 1.42714428428785e-06*G0_2_9 + 0.000122364408078751*G0_3_1 + 6.5886494457954e-05*G0_3_3 - 5.11393368536466e-05*G0_3_4 + 4.28143285286345e-06*G0_3_5 - 4.1149326863632e-05*G0_3_7 + 8.80072308644151e-05*G0_3_8 - 2.14071642643171e-05*G0_3_9 - 5.95172023743732e-05*G0_4_1 - 1.847358990217e-05*G0_4_2 - 5.11393368536466e-05*G0_4_3 + 4.59064744779247e-05*G0_4_4 - 4.28143285286342e-06*G0_4_5 + 5.94643451786598e-06*G0_4_7 - 4.68579040007832e-05*G0_4_8 + 1.28442985585904e-05*G0_4_9 - 5.41786256072233e-06*G0_5_1 + 5.4178625607222e-06*G0_5_2 + 4.28143285286345e-06*G0_5_3 - 4.28143285286342e-06*G0_5_4 - 3.44893202036225e-05*G0_5_5 + 4.75714761429363e-07*G0_5_6 + 3.44893202036217e-05*G0_5_7 - 4.75714761429159e-07*G0_5_8 - 1.58571587143055e-07*G0_6_0 - 1.09942967085875e-05*G0_6_2 + 4.75714761429363e-07*G0_6_5 + 1.18928690357313e-06*G0_6_6 - 3.40136054421927e-05*G0_6_7 + 1.66500166500238e-06*G0_6_8 + 4.28143285286359e-06*G0_6_9 - 3.92200392200577e-05*G0_7_0 - 7.89686503972592e-05*G0_7_1 + 5.76143433286554e-06*G0_7_2 - 4.11493268636319e-05*G0_7_3 + 5.94643451786598e-06*G0_7_4 + 3.44893202036217e-05*G0_7_5 - 3.40136054421927e-05*G0_7_6 + 0.000241900956186783*G0_7_7 - 0.000106322249179442*G0_7_8 + 6.70757813615267e-05*G0_7_9 + 3.16614602329037e-05*G0_8_0 + 0.000177758749187404*G0_8_1 + 1.00428671857291e-05*G0_8_2 + 8.80072308644151e-05*G0_8_3 - 4.68579040007832e-05*G0_8_4 - 4.75714761429159e-07*G0_8_5 + 1.66500166500238e-06*G0_8_6 - 0.000106322249179442*G0_8_7 + 0.000221920936206755*G0_8_8 - 9.99000999001454e-06*G0_8_9 + 3.17143174286182e-07*G0_9_0 + 3.45686059971936e-05*G0_9_1 - 1.42714428428784e-06*G0_9_2 - 2.14071642643171e-05*G0_9_3 + 1.28442985585904e-05*G0_9_4 + 4.28143285286359e-06*G0_9_6 + 6.70757813615267e-05*G0_9_7 - 9.99000999001454e-06*G0_9_8 - 8.5628657057273e-06*G0_9_9;
    A[25] = -A[24] - 2.41630797186467e-05*G0_0_0 - 2.36359760169395e-05*G0_0_1 - 5.74161288447271e-06*G0_0_3 - 1.78657321514549e-05*G0_0_5 + 7.78322206894004e-06*G0_0_6 - 4.26953998382771e-05*G0_0_7 - 4.83643340786422e-06*G0_0_8 - 1.81564467278839e-05*G0_0_9 - 2.36359760169395e-05*G0_1_0 - 0.000263625263625388*G0_1_1 - 1.37957280814489e-05*G0_1_2 - 0.000111925111925165*G0_1_3 + 5.45750545750803e-05*G0_1_4 + 4.30786145072064e-06*G0_1_5 + 7.86250786251157e-05*G0_1_7 - 0.000193325193325284*G0_1_8 - 2.22000222000326e-05*G0_1_9 - 1.37957280814489e-05*G0_2_1 - 6.93089978804591e-06*G0_2_3 + 2.70893128036093e-07*G0_2_5 + 7.57840043554682e-06*G0_2_7 - 8.71483014340566e-06*G0_2_8 - 3.56786071071975e-07*G0_2_9 - 5.74161288447271e-06*G0_3_0 - 0.000111925111925165*G0_3_1 - 6.93089978804591e-06*G0_3_2 - 7.57575757576114e-05*G0_3_3 + 4.59064744779247e-05*G0_3_4 - 8.02768659911895e-06*G0_3_5 + 3.75814661529124e-05*G0_3_7 - 8.40825840826235e-05*G0_3_8 + 5.45750545750803e-05*G0_4_1 + 4.59064744779247e-05*G0_4_3 - 2.18828790257465e-05*G0_4_4 - 3.09214594929026e-05*G0_4_7 + 4.65011179297112e-05*G0_4_8 - 2.14071642643171e-06*G0_4_9 - 1.78657321514549e-05*G0_5_0 + 4.30786145072063e-06*G0_5_1 + 2.70893128036094e-07*G0_5_2 - 8.02768659911895e-06*G0_5_3 + 2.84239569953989e-05*G0_5_5 + 1.43309071880568e-05*G0_5_6 - 5.0544693401862e-06*G0_5_7 + 7.43304314733242e-06*G0_5_8 + 3.96032538889867e-05*G0_5_9 + 7.78322206894003e-06*G0_6_0 + 1.43309071880568e-05*G0_6_5 + 6.6600066600097e-06*G0_6_6 - 2.37857380714624e-06*G0_6_7 - 7.0167927310818e-06*G0_6_8 - 4.26953998382771e-05*G0_7_0 + 7.86250786251157e-05*G0_7_1 + 7.57840043554682e-06*G0_7_2 + 3.75814661529124e-05*G0_7_3 - 3.09214594929026e-05*G0_7_4 - 5.05446934018623e-06*G0_7_5 - 2.37857380714623e-06*G0_7_6 + 1.16550116550166e-05*G0_7_7 + 0.000154726226154871*G0_7_8 + 5.92264877979439e-05*G0_7_9 - 4.83643340786422e-06*G0_8_0 - 0.000193325193325284*G0_8_1 - 8.71483014340566e-06*G0_8_2 - 8.40825840826235e-05*G0_8_3 + 4.65011179297112e-05*G0_8_4 + 7.43304314733242e-06*G0_8_5 - 7.0167927310818e-06*G0_8_6 + 0.000154726226154871*G0_8_7 - 0.000330502830502986*G0_8_8 - 2.64021692593244e-05*G0_8_9 - 1.81564467278839e-05*G0_9_0 - 2.22000222000326e-05*G0_9_1 - 3.56786071071973e-07*G0_9_2 - 2.14071642643172e-06*G0_9_4 + 3.96032538889867e-05*G0_9_5 + 5.92264877979439e-05*G0_9_7 - 2.64021692593244e-05*G0_9_8 + 0.000132724418438766*G0_9_9;
    A[26] = -A[25] + 2.74549084073022e-05*G0_0_0 + 2.24672446894775e-05*G0_0_1 + 6.73268530411704e-06*G0_0_3 - 5.2196480767934e-06*G0_0_4 + 1.9345733631457e-05*G0_0_5 - 1.03467960610867e-05*G0_0_6 + 1.74032316889541e-05*G0_0_7 + 8.48357991215537e-06*G0_0_8 + 2.24672446894775e-05*G0_1_0 + 0.000211208544541977*G0_1_1 + 9.41445385890274e-06*G0_1_2 + 7.12250712251049e-05*G0_1_3 - 3.97750397750586e-05*G0_1_4 + 4.25500425500624e-06*G0_1_5 - 9.62000962001415e-06*G0_1_6 - 8.23250823251212e-05*G0_1_7 + 0.000211825211825312*G0_1_8 + 2.22000222000326e-05*G0_1_9 + 9.41445385890274e-06*G0_2_1 + 3.16482459339754e-06*G0_2_3 + 8.51661565947681e-06*G0_2_5 + 7.0498284784032e-06*G0_2_7 - 5.7548271834013e-06*G0_2_8 + 4.71750471750697e-06*G0_2_9 + 6.73268530411704e-06*G0_3_0 + 7.12250712251049e-05*G0_3_1 + 3.16482459339754e-06*G0_3_2 + 5.41125541125797e-05*G0_3_3 - 8.3250083250123e-06*G0_3_4 - 9.93054564483607e-06*G0_3_5 + 1.57580514723446e-05*G0_3_6 - 3.3300033300049e-05*G0_3_7 + 2.91375291375431e-05*G0_3_8 - 5.2196480767934e-06*G0_4_0 - 3.97750397750586e-05*G0_4_1 - 8.3250083250123e-06*G0_4_3 - 1.61743018885952e-05*G0_4_4 + 2.55696684268236e-06*G0_4_5 - 1.8315018315027e-05*G0_4_6 + 3.80571809143424e-06*G0_4_7 + 4.16250416250595e-06*G0_4_8 - 1.92664478378856e-05*G0_4_9 + 1.9345733631457e-05*G0_5_0 + 4.25500425500624e-06*G0_5_1 + 8.51661565947682e-06*G0_5_2 - 9.93054564483607e-06*G0_5_3 + 2.55696684268236e-06*G0_5_4 + 6.64811379097407e-05*G0_5_5 - 2.18234146805678e-05*G0_5_6 + 6.01184529756241e-05*G0_5_7 - 2.58669901527167e-05*G0_5_8 + 5.3874696731865e-05*G0_5_9 - 1.03467960610867e-05*G0_6_0 - 9.62000962001414e-06*G0_6_1 + 1.57580514723446e-05*G0_6_3 - 1.8315018315027e-05*G0_6_4 - 2.18234146805678e-05*G0_6_5 - 2.66400266400392e-05*G0_6_6 - 3.42514628229076e-05*G0_6_7 + 2.96132438989721e-05*G0_6_8 - 4.56686170972101e-05*G0_6_9 + 1.74032316889541e-05*G0_7_0 - 8.23250823251212e-05*G0_7_1 + 7.04982847840321e-06*G0_7_2 - 3.33000333000491e-05*G0_7_3 + 3.80571809143424e-06*G0_7_4 + 6.01184529756241e-05*G0_7_5 - 3.42514628229076e-05*G0_7_6 + 0.000201940916226726*G0_7_7 - 0.000137362637362702*G0_7_8 + 7.06436420722467e-05*G0_7_9 + 8.48357991215537e-06*G0_8_0 + 0.000211825211825312*G0_8_1 - 5.7548271834013e-06*G0_8_2 + 2.91375291375431e-05*G0_8_3 + 4.16250416250596e-06*G0_8_4 - 2.58669901527167e-05*G0_8_5 + 2.96132438989721e-05*G0_8_6 - 0.000137362637362702*G0_8_7 + 1.24875124875192e-05*G0_8_8 - 7.492507492511e-05*G0_8_9 + 2.22000222000326e-05*G0_9_1 + 4.71750471750697e-06*G0_9_2 - 1.92664478378856e-05*G0_9_4 + 5.3874696731865e-05*G0_9_5 - 4.56686170972101e-05*G0_9_6 + 7.06436420722467e-05*G0_9_7 - 7.492507492511e-05*G0_9_8 - 2.14071642643171e-05*G0_9_9;
    A[46] = A[26] + 1.51993802787525e-05*G0_0_0 - 2.02677980455853e-05*G0_0_1 - 7.05643562786754e-06*G0_0_4 + 1.86057328914559e-05*G0_0_5 + 3.99336113622016e-05*G0_0_7 - 5.12450512450754e-05*G0_0_8 - 2.02677980455853e-05*G0_1_0 + 2.02677980455853e-05*G0_1_2 + 0.000284900284900419*G0_1_3 - 0.000114700114700168*G0_1_4 + 7.77000777001144e-06*G0_1_5 - 7.77000777001147e-06*G0_1_6 + 0.000114700114700169*G0_1_7 - 0.000284900284900419*G0_1_8 + 2.02677980455853e-05*G0_2_1 - 1.51993802787525e-05*G0_2_2 + 5.12450512450753e-05*G0_2_3 - 3.99336113622016e-05*G0_2_4 - 1.8605732891456e-05*G0_2_6 + 7.05643562786752e-06*G0_2_7 + 0.000284900284900419*G0_3_1 + 5.12450512450754e-05*G0_3_2 + 0.00033300033300049*G0_3_3 - 0.000166500166500245*G0_3_4 - 1.16550116550172e-05*G0_3_5 + 2.33100233100343e-05*G0_3_6 - 7.05643562786754e-06*G0_4_0 - 0.000114700114700168*G0_4_1 - 3.99336113622016e-05*G0_4_2 - 0.000166500166500245*G0_4_3 - 6.66000666000998e-06*G0_4_4 + 2.11693068836026e-05*G0_4_5 - 4.44793301936368e-05*G0_4_6 - 5.99400599400881e-05*G0_4_9 + 1.86057328914559e-05*G0_5_0 + 7.77000777001144e-06*G0_5_1 - 1.16550116550172e-05*G0_5_3 + 2.11693068836026e-05*G0_5_4 + 6.42214927929516e-05*G0_5_5 + 4.44793301936369e-05*G0_5_7 - 2.33100233100343e-05*G0_5_8 + 6.42214927929516e-05*G0_5_9 - 7.77000777001147e-06*G0_6_1 - 1.8605732891456e-05*G0_6_2 + 2.33100233100343e-05*G0_6_3 - 4.44793301936368e-05*G0_6_4 - 6.42214927929515e-05*G0_6_6 - 2.11693068836026e-05*G0_6_7 + 1.16550116550171e-05*G0_6_8 - 6.42214927929516e-05*G0_6_9 + 3.99336113622016e-05*G0_7_0 + 0.000114700114700169*G0_7_1 + 7.05643562786752e-06*G0_7_2 + 4.44793301936369e-05*G0_7_5 - 2.11693068836026e-05*G0_7_6 + 6.66000666000977e-06*G0_7_7 + 0.000166500166500245*G0_7_8 + 5.99400599400882e-05*G0_7_9 - 5.12450512450754e-05*G0_8_0 - 0.000284900284900419*G0_8_1 - 2.33100233100343e-05*G0_8_5 + 1.16550116550171e-05*G0_8_6 + 0.000166500166500245*G0_8_7 - 0.00033300033300049*G0_8_8 - 5.99400599400881e-05*G0_9_4 + 6.42214927929516e-05*G0_9_5 - 6.42214927929516e-05*G0_9_6 + 5.99400599400882e-05*G0_9_7;
    A[18] = A[46];
    A[62] = -A[47] - 1.37957280814489e-05*G0_0_2 + 7.57840043554686e-06*G0_0_3 - 8.71483014340568e-06*G0_0_4 - 6.93089978804591e-06*G0_0_6 + 2.708931280361e-07*G0_0_8 - 3.56786071071954e-07*G0_0_9 - 2.41630797186467e-05*G0_1_1 - 2.36359760169395e-05*G0_1_2 - 4.26953998382771e-05*G0_1_3 - 4.83643340786425e-06*G0_1_4 - 5.74161288447274e-06*G0_1_6 + 7.78322206894004e-06*G0_1_7 - 1.78657321514549e-05*G0_1_8 - 1.81564467278838e-05*G0_1_9 - 1.37957280814489e-05*G0_2_0 - 2.36359760169395e-05*G0_2_1 - 0.000263625263625388*G0_2_2 + 7.86250786251157e-05*G0_2_3 - 0.000193325193325284*G0_2_4 + 5.45750545750804e-05*G0_2_5 - 0.000111925111925165*G0_2_6 + 4.30786145072057e-06*G0_2_8 - 2.22000222000327e-05*G0_2_9 + 7.57840043554686e-06*G0_3_0 - 4.26953998382771e-05*G0_3_1 + 7.86250786251157e-05*G0_3_2 + 1.16550116550169e-05*G0_3_3 + 0.00015472622615487*G0_3_4 - 3.09214594929026e-05*G0_3_5 + 3.75814661529124e-05*G0_3_6 - 2.37857380714633e-06*G0_3_7 - 5.05446934018604e-06*G0_3_8 + 5.92264877979442e-05*G0_3_9 - 8.71483014340567e-06*G0_4_0 - 4.83643340786426e-06*G0_4_1 - 0.000193325193325284*G0_4_2 + 0.00015472622615487*G0_4_3 - 0.000330502830502986*G0_4_4 + 4.65011179297113e-05*G0_4_5 - 8.40825840826237e-05*G0_4_6 - 7.01679273108171e-06*G0_4_7 + 7.43304314733235e-06*G0_4_8 - 2.64021692593245e-05*G0_4_9 + 5.45750545750804e-05*G0_5_2 - 3.09214594929026e-05*G0_5_3 + 4.65011179297113e-05*G0_5_4 - 2.18828790257465e-05*G0_5_5 + 4.59064744779247e-05*G0_5_6 - 2.14071642643171e-06*G0_5_9 - 6.93089978804591e-06*G0_6_0 - 5.74161288447274e-06*G0_6_1 - 0.000111925111925165*G0_6_2 + 3.75814661529125e-05*G0_6_3 - 8.40825840826237e-05*G0_6_4 + 4.59064744779247e-05*G0_6_5 - 7.57575757576114e-05*G0_6_6 - 8.02768659911895e-06*G0_6_8 + 7.78322206894004e-06*G0_7_1 - 2.37857380714631e-06*G0_7_3 - 7.01679273108171e-06*G0_7_4 + 6.66000666000979e-06*G0_7_7 + 1.43309071880568e-05*G0_7_8 + 2.70893128036101e-07*G0_8_0 - 1.78657321514549e-05*G0_8_1 + 4.30786145072057e-06*G0_8_2 - 5.05446934018604e-06*G0_8_3 + 7.43304314733235e-06*G0_8_4 - 8.02768659911895e-06*G0_8_6 + 1.43309071880568e-05*G0_8_7 + 2.84239569953989e-05*G0_8_8 + 3.96032538889867e-05*G0_8_9 - 3.56786071071954e-07*G0_9_0 - 1.81564467278838e-05*G0_9_1 - 2.22000222000327e-05*G0_9_2 + 5.92264877979442e-05*G0_9_3 - 2.64021692593245e-05*G0_9_4 - 2.14071642643171e-06*G0_9_5 + 3.96032538889867e-05*G0_9_8 + 0.000132724418438766*G0_9_9;
    A[35] = -A[62] + 9.41445385890274e-06*G0_0_2 + 7.04982847840322e-06*G0_0_3 - 5.75482718340132e-06*G0_0_4 + 3.1648245933975e-06*G0_0_6 + 8.5166156594768e-06*G0_0_8 + 4.71750471750694e-06*G0_0_9 + 2.74549084073022e-05*G0_1_1 + 2.24672446894775e-05*G0_1_2 + 1.74032316889541e-05*G0_1_3 + 8.4835799121554e-06*G0_1_4 - 5.21964807679339e-06*G0_1_5 + 6.73268530411704e-06*G0_1_6 - 1.03467960610867e-05*G0_1_7 + 1.9345733631457e-05*G0_1_8 + 9.41445385890274e-06*G0_2_0 + 2.24672446894775e-05*G0_2_1 + 0.000211208544541977*G0_2_2 - 8.23250823251212e-05*G0_2_3 + 0.000211825211825312*G0_2_4 - 3.97750397750585e-05*G0_2_5 + 7.12250712251048e-05*G0_2_6 - 9.62000962001419e-06*G0_2_7 + 4.25500425500628e-06*G0_2_8 + 2.22000222000327e-05*G0_2_9 + 7.04982847840321e-06*G0_3_0 + 1.74032316889541e-05*G0_3_1 - 8.23250823251212e-05*G0_3_2 + 0.000201940916226725*G0_3_3 - 0.000137362637362702*G0_3_4 + 3.80571809143417e-06*G0_3_5 - 3.33000333000489e-05*G0_3_6 - 3.42514628229075e-05*G0_3_7 + 6.0118452975624e-05*G0_3_8 + 7.06436420722467e-05*G0_3_9 - 5.75482718340132e-06*G0_4_0 + 8.48357991215539e-06*G0_4_1 + 0.000211825211825312*G0_4_2 - 0.000137362637362702*G0_4_3 + 1.24875124875181e-05*G0_4_4 + 4.16250416250613e-06*G0_4_5 + 2.91375291375428e-05*G0_4_6 + 2.96132438989721e-05*G0_4_7 - 2.58669901527165e-05*G0_4_8 - 7.49250749251101e-05*G0_4_9 - 5.21964807679339e-06*G0_5_1 - 3.97750397750585e-05*G0_5_2 + 3.80571809143418e-06*G0_5_3 + 4.16250416250613e-06*G0_5_4 - 1.61743018885952e-05*G0_5_5 - 8.32500832501219e-06*G0_5_6 - 1.83150183150269e-05*G0_5_7 + 2.5569668426823e-06*G0_5_8 - 1.92664478378855e-05*G0_5_9 + 3.1648245933975e-06*G0_6_0 + 6.73268530411704e-06*G0_6_1 + 7.12250712251048e-05*G0_6_2 - 3.33000333000489e-05*G0_6_3 + 2.91375291375429e-05*G0_6_4 - 8.3250083250122e-06*G0_6_5 + 5.41125541125795e-05*G0_6_6 + 1.57580514723446e-05*G0_6_7 - 9.93054564483601e-06*G0_6_8 - 1.03467960610867e-05*G0_7_1 - 9.62000962001419e-06*G0_7_2 - 3.42514628229075e-05*G0_7_3 + 2.96132438989721e-05*G0_7_4 - 1.83150183150269e-05*G0_7_5 + 1.57580514723446e-05*G0_7_6 - 2.66400266400391e-05*G0_7_7 - 2.18234146805678e-05*G0_7_8 - 4.566861709721e-05*G0_7_9 + 8.51661565947681e-06*G0_8_0 + 1.9345733631457e-05*G0_8_1 + 4.25500425500627e-06*G0_8_2 + 6.0118452975624e-05*G0_8_3 - 2.58669901527165e-05*G0_8_4 + 2.55696684268231e-06*G0_8_5 - 9.93054564483601e-06*G0_8_6 - 2.18234146805678e-05*G0_8_7 + 6.64811379097405e-05*G0_8_8 + 5.38746967318649e-05*G0_8_9 + 4.71750471750694e-06*G0_9_0 + 2.22000222000327e-05*G0_9_2 + 7.06436420722467e-05*G0_9_3 - 7.49250749251101e-05*G0_9_4 - 1.92664478378855e-05*G0_9_5 - 4.566861709721e-05*G0_9_7 + 5.38746967318649e-05*G0_9_8 - 2.14071642643173e-05*G0_9_9;
    A[122] = A[35] - 1.51993802787525e-05*G0_0_0 + 2.02677980455854e-05*G0_0_2 + 7.05643562786752e-06*G0_0_3 - 3.99336113622016e-05*G0_0_5 + 5.12450512450753e-05*G0_0_6 - 1.86057328914559e-05*G0_0_7 + 1.51993802787525e-05*G0_1_1 - 2.02677980455854e-05*G0_1_2 + 3.99336113622016e-05*G0_1_3 - 5.12450512450754e-05*G0_1_4 - 7.05643562786752e-06*G0_1_5 + 1.86057328914559e-05*G0_1_8 + 2.02677980455854e-05*G0_2_0 - 2.02677980455854e-05*G0_2_1 + 0.000114700114700169*G0_2_3 - 0.000284900284900419*G0_2_4 - 0.000114700114700169*G0_2_5 + 0.000284900284900419*G0_2_6 - 7.77000777001144e-06*G0_2_7 + 7.77000777001142e-06*G0_2_8 + 7.05643562786752e-06*G0_3_0 + 3.99336113622016e-05*G0_3_1 + 0.000114700114700169*G0_3_2 + 6.66000666000962e-06*G0_3_3 + 0.000166500166500245*G0_3_4 - 2.11693068836026e-05*G0_3_7 + 4.44793301936368e-05*G0_3_8 + 5.99400599400881e-05*G0_3_9 - 5.12450512450754e-05*G0_4_1 - 0.000284900284900419*G0_4_2 + 0.000166500166500245*G0_4_3 - 0.00033300033300049*G0_4_4 + 1.16550116550172e-05*G0_4_7 - 2.33100233100343e-05*G0_4_8 - 3.99336113622016e-05*G0_5_0 - 7.05643562786752e-06*G0_5_1 - 0.000114700114700169*G0_5_2 - 6.6600066600096e-06*G0_5_5 - 0.000166500166500245*G0_5_6 - 4.44793301936367e-05*G0_5_7 + 2.11693068836025e-05*G0_5_8 - 5.99400599400881e-05*G0_5_9 + 5.12450512450753e-05*G0_6_0 + 0.000284900284900419*G0_6_2 - 0.000166500166500245*G0_6_5 + 0.00033300033300049*G0_6_6 + 2.33100233100342e-05*G0_6_7 - 1.16550116550171e-05*G0_6_8 - 1.86057328914559e-05*G0_7_0 - 7.77000777001144e-06*G0_7_2 - 2.11693068836026e-05*G0_7_3 + 1.16550116550172e-05*G0_7_4 - 4.44793301936367e-05*G0_7_5 + 2.33100233100342e-05*G0_7_6 - 6.42214927929514e-05*G0_7_7 - 6.42214927929516e-05*G0_7_9 + 1.86057328914559e-05*G0_8_1 + 7.77000777001142e-06*G0_8_2 + 4.44793301936368e-05*G0_8_3 - 2.33100233100343e-05*G0_8_4 + 2.11693068836025e-05*G0_8_5 - 1.16550116550171e-05*G0_8_6 + 6.42214927929516e-05*G0_8_8 + 6.42214927929515e-05*G0_8_9 + 5.99400599400881e-05*G0_9_3 - 5.99400599400881e-05*G0_9_5 - 6.42214927929516e-05*G0_9_7 + 6.42214927929515e-05*G0_9_8;
    A[160] = -A[35] + 0.000589052335084357*G0_0_0 + 0.00016648548394588*G0_0_1 + 6.79714171777983e-05*G0_0_2 + 7.95765081479741e-05*G0_0_3 - 2.80143137286112e-06*G0_0_4 + 0.000322904608619046*G0_0_5 - 0.000127676556248045*G0_0_6 + 0.000292855292855429*G0_0_7 - 0.000396455396455582*G0_0_8 + 0.00016648548394588*G0_1_0 + 0.000573852954805606*G0_1_1 + 8.82392152233837e-05*G0_1_2 + 0.000282970997256844*G0_1_3 - 7.64315050029692e-05*G0_1_4 + 8.66329437758416e-05*G0_1_5 - 2.8014313728611e-06*G0_1_6 - 0.00038326752612485*G0_1_7 + 0.000274249559963974*G0_1_8 + 6.79714171777983e-05*G0_2_0 + 8.82392152233837e-05*G0_2_1 + 0.000736318355366321*G0_2_2 - 0.000117527974670888*G0_2_3 + 0.000447541876113516*G0_2_4 - 2.8278599707188e-06*G0_2_5 + 0.000162641591213097*G0_2_6 + 0.000242429528143928*G0_2_7 + 0.000234659520373917*G0_2_8 + 0.000403723260866308*G0_2_9 + 7.95765081479741e-05*G0_3_0 + 0.000282970997256844*G0_3_1 - 0.000117527974670888*G0_3_2 + 0.00147994862280646*G0_3_3 - 0.000825602968460499*G0_3_4 - 0.000151039436753794*G0_3_5 - 0.000188145188145276*G0_3_6 - 0.000435279006707784*G0_3_7 + 0.00133580705009339*G0_3_8 + 0.000877693734837004*G0_3_9 - 2.80143137286112e-06*G0_4_0 - 7.64315050029692e-05*G0_4_1 + 0.000447541876113516*G0_4_2 - 0.000825602968460499*G0_4_3 + 0.000893392321964171*G0_4_4 - 0.000188145188145277*G0_4_5 + 0.000376290376290553*G0_4_6 - 0.00026116740402467*G0_4_7 - 0.00090052804338561*G0_4_8 - 0.000834879406308371*G0_4_9 + 0.000322904608619046*G0_5_0 + 8.66329437758416e-05*G0_5_1 - 2.82785997071877e-06*G0_5_2 - 0.000151039436753794*G0_5_3 - 0.000188145188145277*G0_5_4 + 0.00148660862946647*G0_5_5 - 0.000659102801960254*G0_5_6 + 0.00138028638028703*G0_5_7 - 0.000456448313591386*G0_5_8 + 0.000937633794777093*G0_5_9 - 0.000127676556248045*G0_6_0 - 2.8014313728611e-06*G0_6_1 + 0.000162641591213097*G0_6_2 - 0.000188145188145276*G0_6_3 + 0.000376290376290553*G0_6_4 - 0.000659102801960255*G0_6_5 + 0.000560391988963681*G0_6_6 - 0.000923838066695645*G0_6_7 - 0.000249512392369653*G0_6_8 - 0.000834879406308372*G0_6_9 + 0.000292855292855429*G0_7_0 - 0.00038326752612485*G0_7_1 + 0.000242429528143928*G0_7_2 - 0.000435279006707784*G0_7_3 - 0.00026116740402467*G0_7_4 + 0.00138028638028703*G0_7_5 - 0.000923838066695645*G0_7_6 + 0.00568193711051122*G0_7_7 + 0.000576328433471563*G0_7_8 + 0.00187241330098561*G0_7_9 - 0.000396455396455582*G0_8_0 + 0.000274249559963974*G0_8_1 + 0.000234659520373917*G0_8_2 + 0.00133580705009339*G0_8_3 - 0.00090052804338561*G0_8_4 - 0.000456448313591386*G0_8_5 - 0.000249512392369653*G0_8_6 + 0.000576328433471563*G0_8_7 + 0.00561771561771826*G0_8_8 + 0.00180819180819266*G0_8_9 + 0.000403723260866308*G0_9_2 + 0.000877693734837004*G0_9_3 - 0.000834879406308371*G0_9_4 + 0.000937633794777093*G0_9_5 - 0.000834879406308372*G0_9_6 + 0.00187241330098561*G0_9_7 + 0.00180819180819266*G0_9_8 + 0.00315113457970749*G0_9_9;
    A[38] = A[122];
    A[44] = A[212];
    A[141] = A[99];
    A[95] = -A[108] + 1.37311248422425e-05*G0_0_0 + 3.98190874381543e-06*G0_0_1 + 1.0031121142237e-05*G0_0_2 - 7.71715057429697e-06*G0_0_3 + 6.9665783951531e-05*G0_0_4 - 5.40200540200793e-05*G0_0_5 + 2.11428782857448e-07*G0_0_6 - 1.12057254914451e-05*G0_0_7 + 1.13114398828738e-05*G0_0_8 - 6.34286348572249e-07*G0_0_9 + 3.98190874381543e-06*G0_1_0 + 2.74505036409932e-05*G0_1_1 + 1.19809643619225e-05*G0_1_2 + 1.58571587143156e-06*G0_1_3 + 6.02572031143741e-05*G0_1_4 + 1.51171579743079e-05*G0_1_5 + 5.82486296772286e-05*G0_1_6 + 0.00010212010212015*G0_1_9 + 1.0031121142237e-05*G0_2_0 + 1.19809643619225e-05*G0_2_1 + 8.04134137467851e-05*G0_2_2 - 3.73171801743405e-05*G0_2_3 + 0.000119351547923033*G0_2_4 - 4.49286163572089e-05*G0_2_5 - 6.87143544286724e-06*G0_2_6 + 1.13114398828739e-05*G0_2_8 - 2.28343085486048e-05*G0_2_9 - 7.71715057429696e-06*G0_3_0 + 1.58571587143157e-06*G0_3_1 - 3.73171801743405e-05*G0_3_2 + 0.000148423005565937*G0_3_3 - 0.000382474668189135*G0_3_4 + 8.56286570572685e-06*G0_3_5 - 0.000214071642643172*G0_3_6 - 1.61743018885958e-05*G0_3_7 + 8.94343751487041e-05*G0_3_8 - 0.000274011702583259*G0_3_9 + 6.9665783951531e-05*G0_4_0 + 6.02572031143741e-05*G0_4_1 + 0.000119351547923033*G0_4_2 - 0.000382474668189135*G0_4_3 + 0.00139003853289633*G0_4_4 - 0.00024832310546608*G0_4_5 + 0.000462394748109252*G0_4_6 - 8.467722753441e-05*G0_4_7 - 7.32600732601081e-05*G0_4_8 + 0.000565149136577974*G0_4_9 - 5.40200540200793e-05*G0_5_0 + 1.51171579743079e-05*G0_5_1 - 4.49286163572089e-05*G0_5_2 + 8.56286570572685e-06*G0_5_3 - 0.00024832310546608*G0_5_4 + 0.000407211835783456*G0_5_5 + 7.61143618286826e-05*G0_5_6 + 0.000123685837971611*G0_5_7 - 8.46772275344103e-05*G0_5_8 + 0.000171257314114537*G0_5_9 + 2.11428782857434e-07*G0_6_0 + 5.82486296772285e-05*G0_6_1 - 6.87143544286724e-06*G0_6_2 - 0.000214071642643172*G0_6_3 + 0.000462394748109252*G0_6_4 + 7.61143618286826e-05*G0_6_5 + 0.000575614861329418*G0_6_6 - 3.90086104372004e-05*G0_6_7 - 8.46772275344102e-05*G0_6_8 + 0.000496646210932159*G0_6_9 - 1.12057254914451e-05*G0_7_0 - 1.61743018885958e-05*G0_7_3 - 8.467722753441e-05*G0_7_4 + 0.000123685837971611*G0_7_5 - 3.90086104372004e-05*G0_7_6 + 0.000157937300794518*G0_7_7 - 7.32600732601082e-05*G0_7_8 + 7.99200799201171e-05*G0_7_9 + 1.13114398828739e-05*G0_8_0 + 1.13114398828739e-05*G0_8_2 + 8.94343751487041e-05*G0_8_3 - 7.32600732601081e-05*G0_8_4 - 8.46772275344103e-05*G0_8_5 - 8.46772275344102e-05*G0_8_6 - 7.32600732601082e-05*G0_8_7 + 8.94343751487039e-05*G0_8_8 - 0.000159840159840234*G0_8_9 - 6.34286348572249e-07*G0_9_0 + 0.00010212010212015*G0_9_1 - 2.28343085486048e-05*G0_9_2 - 0.000274011702583259*G0_9_3 + 0.000565149136577974*G0_9_4 + 0.000171257314114537*G0_9_5 + 0.000496646210932159*G0_9_6 + 7.99200799201171e-05*G0_9_7 - 0.000159840159840234*G0_9_8 + 0.000924789496218503*G0_9_9;
    A[126] = A[95] + 0.000347635903191621*G0_0_0 + 2.65930424660708e-05*G0_0_1 + 6.65295903391454e-05*G0_0_2 - 7.61143618286833e-06*G0_0_3 - 4.44000444000653e-05*G0_0_4 + 0.000501509072937879*G0_0_5 - 0.000163223020365954*G0_0_6 + 0.000235531664103203*G0_0_7 - 0.000122205836491608*G0_0_8 + 8.1188652617262e-05*G0_0_9 + 2.65930424660708e-05*G0_1_0 - 1.83238278476459e-06*G0_1_1 + 3.61778139556086e-06*G0_1_2 - 5.4971483542937e-06*G0_1_3 - 4.86286200572144e-05*G0_1_4 + 6.34286348572359e-05*G0_1_5 - 3.29828901257627e-05*G0_1_6 + 6.59657802515254e-05*G0_1_7 - 3.55200355200521e-05*G0_1_8 + 7.61143618286829e-06*G0_1_9 + 6.65295903391454e-05*G0_2_0 + 3.61778139556086e-06*G0_2_1 + 0.000128266794933522*G0_2_2 + 1.14171542743026e-05*G0_2_3 - 8.88000888001308e-05*G0_2_4 + 1.73371601943108e-05*G0_2_5 + 0.000236800236800348*G0_2_6 + 6.72343529486701e-05*G0_2_7 - 3.80571809143416e-05*G0_2_8 + 4.82057624914995e-05*G0_2_9 - 7.61143618286833e-06*G0_3_0 - 5.4971483542937e-06*G0_3_1 + 1.14171542743027e-05*G0_3_2 - 4.56686170972099e-05*G0_3_3 + 0.000262594548308958*G0_3_4 - 4.94743351886441e-05*G0_3_5 + 3.04457447314734e-05*G0_3_6 - 4.56686170972101e-05*G0_3_7 + 6.85029256458152e-05*G0_3_9 - 4.44000444000653e-05*G0_4_0 - 4.86286200572144e-05*G0_4_1 - 8.88000888001308e-05*G0_4_2 + 0.000262594548308958*G0_4_3 - 0.000970458113315713*G0_4_4 + 6.4697207554381e-05*G0_4_5 - 9.51429522858544e-05*G0_4_6 + 4.56686170972099e-05*G0_4_8 - 0.000274011702583261*G0_4_9 + 0.000501509072937879*G0_5_0 + 6.34286348572358e-05*G0_5_1 + 1.73371601943108e-05*G0_5_2 - 4.94743351886441e-05*G0_5_3 + 6.4697207554381e-05*G0_5_4 + 0.000974263831407142*G0_5_5 - 0.000783977926835437*G0_5_6 + 0.000528994814709348*G0_5_7 - 0.000258788830217522*G0_5_8 + 0.000274011702583259*G0_5_9 - 0.000163223020365954*G0_6_0 - 3.29828901257627e-05*G0_6_1 + 0.000236800236800348*G0_6_2 + 3.04457447314734e-05*G0_6_3 - 9.51429522858544e-05*G0_6_4 - 0.000783977926835437*G0_6_5 + 0.000574663431806559*G0_6_6 - 0.000270205984491825*G0_6_7 + 0.000140811569383064*G0_6_8 - 0.000205508776937445*G0_6_9 + 0.000235531664103203*G0_7_0 + 6.59657802515254e-05*G0_7_1 + 6.723435294867e-05*G0_7_2 - 4.56686170972101e-05*G0_7_3 + 0.000528994814709348*G0_7_5 - 0.000270205984491826*G0_7_6 + 0.000578469149897992*G0_7_7 - 0.000243565957851786*G0_7_8 + 0.000296846011131865*G0_7_9 - 0.000122205836491608*G0_8_0 - 3.55200355200521e-05*G0_8_1 - 3.80571809143416e-05*G0_8_2 + 4.56686170972099e-05*G0_8_4 - 0.000258788830217522*G0_8_5 + 0.000140811569383064*G0_8_6 - 0.000243565957851786*G0_8_7 + 9.89486703772882e-05*G0_8_8 - 0.000114171542743025*G0_8_9 + 8.11886526172621e-05*G0_9_0 + 7.6114361828683e-06*G0_9_1 + 4.82057624914995e-05*G0_9_2 + 6.85029256458152e-05*G0_9_3 - 0.00027401170258326*G0_9_4 + 0.000274011702583259*G0_9_5 - 0.000205508776937445*G0_9_6 + 0.000296846011131865*G0_9_7 - 0.000114171542743025*G0_9_8 + 0.00013700585129163*G0_9_9;
    A[97] = -A[126] - 0.000458800458800674*G0_0_0 - 3.30651124302073e-05*G0_0_1 - 4.50813149226059e-05*G0_0_2 + 3.70000370000544e-06*G0_0_3 + 2.05085919371731e-05*G0_0_4 - 0.000743700743701092*G0_0_5 + 0.000356468927897667*G0_0_6 - 0.000292300292300429*G0_0_7 + 0.000150748722177364*G0_0_8 - 0.000113537256394452*G0_0_9 - 3.30651124302073e-05*G0_1_0 - 9.23239018477545e-06*G0_1_1 + 3.86444830889462e-06*G0_1_2 + 1.41657284514494e-05*G0_1_3 + 8.77429448858438e-06*G0_1_4 - 8.7002944145842e-05*G0_1_5 + 2.33628805057486e-05*G0_1_6 - 7.11457854315331e-05*G0_1_7 + 4.08057550914885e-05*G0_1_8 - 5.20114805829335e-05*G0_1_9 - 4.50813149226059e-05*G0_2_0 + 3.86444830889462e-06*G0_2_1 + 0.000104586771253488*G0_2_2 - 4.01714687429163e-05*G0_2_3 + 9.5248666677283e-05*G0_2_4 - 0.000244200244200359*G0_2_5 + 0.000347271775843368*G0_2_6 - 8.41486555772665e-05*G0_2_7 + 2.65343122486105e-05*G0_2_8 + 3.86914672629141e-05*G0_2_9 + 3.70000370000544e-06*G0_3_0 + 1.41657284514494e-05*G0_3_1 - 4.01714687429162e-05*G0_3_2 - 3.4251462822907e-05*G0_3_3 - 4.28143285286347e-05*G0_3_4 + 9.32400932401371e-05*G0_3_5 - 6.66000666001008e-06*G0_3_6 + 5.23286237572198e-05*G0_3_7 - 3.61543218686245e-05*G0_3_8 + 5.13771942343616e-05*G0_3_9 + 2.05085919371731e-05*G0_4_0 + 8.7742944885844e-06*G0_4_1 + 9.5248666677283e-05*G0_4_2 - 4.28143285286347e-05*G0_4_3 - 8.56286570572675e-05*G0_4_4 + 1.90285904571669e-06*G0_4_5 + 4.75714761429327e-06*G0_4_6 + 6.37457780315221e-05*G0_4_7 - 1.61743018885952e-05*G0_4_8 - 0.000119880119880176*G0_4_9 - 0.000743700743701092*G0_5_0 - 8.7002944145842e-05*G0_5_1 - 0.000244200244200359*G0_5_2 + 9.32400932401371e-05*G0_5_3 + 1.90285904571669e-06*G0_5_4 - 0.000764949336378264*G0_5_5 + 0.00041672613101204*G0_5_6 - 0.000640312068883797*G0_5_7 + 0.000324437467294763*G0_5_8 - 0.000308263165406167*G0_5_9 + 0.000356468927897667*G0_6_0 + 2.33628805057486e-05*G0_6_1 + 0.000347271775843368*G0_6_2 - 6.66000666001008e-06*G0_6_3 + 4.75714761429327e-06*G0_6_4 + 0.00041672613101204*G0_6_5 - 0.000696446410732451*G0_6_6 + 0.000315874601589035*G0_6_7 - 0.000106560106560157*G0_6_8 - 0.000102754388468722*G0_6_9 - 0.000292300292300429*G0_7_0 - 7.11457854315331e-05*G0_7_1 - 8.41486555772665e-05*G0_7_2 + 5.23286237572198e-05*G0_7_3 + 6.37457780315221e-05*G0_7_4 - 0.000640312068883797*G0_7_5 + 0.000315874601589035*G0_7_6 - 0.000645069216498091*G0_7_7 + 0.000288283145426138*G0_7_8 - 0.000291137433994714*G0_7_9 + 0.000150748722177364*G0_8_0 + 4.08057550914885e-05*G0_8_1 + 2.65343122486105e-05*G0_8_2 - 3.61543218686245e-05*G0_8_3 - 1.61743018885953e-05*G0_8_4 + 0.000324437467294763*G0_8_5 - 0.000106560106560157*G0_8_6 + 0.000288283145426138*G0_8_7 - 0.000148423005565932*G0_8_8 + 0.000188383045525991*G0_8_9 - 0.000113537256394452*G0_9_0 - 5.20114805829335e-05*G0_9_1 + 3.86914672629141e-05*G0_9_2 + 5.13771942343615e-05*G0_9_3 - 0.000119880119880176*G0_9_4 - 0.000308263165406167*G0_9_5 - 0.000102754388468722*G0_9_6 - 0.000291137433994714*G0_9_7 + 0.000188383045525991*G0_9_8 - 0.000685029256458149*G0_9_9;
    A[111] = A[97];
    A[113] = -A[126] + 0.000104586771253487*G0_0_0 + 3.86444830889459e-06*G0_0_1 - 4.50813149226059e-05*G0_0_2 + 2.65343122486104e-05*G0_0_3 - 8.41486555772664e-05*G0_0_4 + 0.000347271775843368*G0_0_5 - 0.000244200244200359*G0_0_6 + 9.52486666772828e-05*G0_0_7 - 4.01714687429162e-05*G0_0_8 + 3.86914672629141e-05*G0_0_9 + 3.86444830889459e-06*G0_1_0 - 9.23239018477548e-06*G0_1_1 - 3.30651124302073e-05*G0_1_2 + 4.08057550914885e-05*G0_1_3 - 7.11457854315331e-05*G0_1_4 + 2.33628805057484e-05*G0_1_5 - 8.7002944145842e-05*G0_1_6 + 8.77429448858435e-06*G0_1_7 + 1.41657284514494e-05*G0_1_8 - 5.20114805829335e-05*G0_1_9 - 4.50813149226059e-05*G0_2_0 - 3.30651124302073e-05*G0_2_1 - 0.000458800458800674*G0_2_2 + 0.000150748722177364*G0_2_3 - 0.00029230029230043*G0_2_4 + 0.000356468927897667*G0_2_5 - 0.000743700743701093*G0_2_6 + 2.05085919371732e-05*G0_2_7 + 3.70000370000532e-06*G0_2_8 - 0.000113537256394453*G0_2_9 + 2.65343122486104e-05*G0_3_0 + 4.08057550914885e-05*G0_3_1 + 0.000150748722177365*G0_3_2 - 0.000148423005565932*G0_3_3 + 0.000288283145426137*G0_3_4 - 0.000106560106560156*G0_3_5 + 0.000324437467294762*G0_3_6 - 1.61743018885952e-05*G0_3_7 - 3.61543218686244e-05*G0_3_8 + 0.000188383045525991*G0_3_9 - 8.41486555772664e-05*G0_4_0 - 7.11457854315331e-05*G0_4_1 - 0.00029230029230043*G0_4_2 + 0.000288283145426137*G0_4_3 - 0.000645069216498089*G0_4_4 + 0.000315874601589035*G0_4_5 - 0.000640312068883798*G0_4_6 + 6.37457780315222e-05*G0_4_7 + 5.23286237572195e-05*G0_4_8 - 0.000291137433994713*G0_4_9 + 0.000347271775843368*G0_5_0 + 2.33628805057484e-05*G0_5_1 + 0.000356468927897667*G0_5_2 - 0.000106560106560156*G0_5_3 + 0.000315874601589035*G0_5_4 - 0.000696446410732455*G0_5_5 + 0.00041672613101204*G0_5_6 + 4.75714761429252e-06*G0_5_7 - 6.6600066600091e-06*G0_5_8 - 0.000102754388468724*G0_5_9 - 0.000244200244200359*G0_6_0 - 8.70029441458419e-05*G0_6_1 - 0.000743700743701093*G0_6_2 + 0.000324437467294762*G0_6_3 - 0.000640312068883798*G0_6_4 + 0.00041672613101204*G0_6_5 - 0.000764949336378263*G0_6_6 + 1.90285904571713e-06*G0_6_7 + 9.32400932401367e-05*G0_6_8 - 0.000308263165406166*G0_6_9 + 9.52486666772828e-05*G0_7_0 + 8.77429448858435e-06*G0_7_1 + 2.05085919371732e-05*G0_7_2 - 1.61743018885952e-05*G0_7_3 + 6.37457780315222e-05*G0_7_4 + 4.75714761429262e-06*G0_7_5 + 1.90285904571702e-06*G0_7_6 - 8.56286570572679e-05*G0_7_7 - 4.28143285286344e-05*G0_7_8 - 0.000119880119880176*G0_7_9 - 4.01714687429162e-05*G0_8_0 + 1.41657284514494e-05*G0_8_1 + 3.70000370000532e-06*G0_8_2 - 3.61543218686244e-05*G0_8_3 + 5.23286237572195e-05*G0_8_4 - 6.6600066600091e-06*G0_8_5 + 9.32400932401367e-05*G0_8_6 - 4.28143285286344e-05*G0_8_7 - 3.42514628229073e-05*G0_8_8 + 5.13771942343613e-05*G0_8_9 + 3.86914672629141e-05*G0_9_0 - 5.20114805829335e-05*G0_9_1 - 0.000113537256394453*G0_9_2 + 0.000188383045525991*G0_9_3 - 0.000291137433994713*G0_9_4 - 0.000102754388468724*G0_9_5 - 0.000308263165406166*G0_9_6 - 0.000119880119880176*G0_9_7 + 5.13771942343613e-05*G0_9_8 - 0.000685029256458149*G0_9_9;
    A[127] = A[113];
    A[78] = A[50];
    A[172] = A[116];
    A[155] = A[85];
    A[105] = A[7];
    A[98] = A[126];
    A[180] = A[12];
    A[173] = -A[41] + 6.49438744677143e-05*G0_0_0 + 8.34262739025032e-06*G0_0_1 + 1.40864426578778e-05*G0_0_2 - 1.45621574193072e-05*G0_0_3 + 7.87572216144012e-05*G0_0_5 - 1.09942967085874e-05*G0_0_6 + 8.62629434058409e-05*G0_0_7 - 3.96428967857725e-05*G0_0_8 + 5.26457669315059e-05*G0_0_9 + 8.34262739025032e-06*G0_1_0 - 2.28989117878116e-05*G0_1_1 - 3.49386063671943e-05*G0_1_3 + 2.5160025160037e-05*G0_1_4 + 1.90550190550281e-05*G0_1_6 + 3.11328882757601e-05*G0_1_7 - 3.49914635629087e-05*G0_1_8 + 9.19715205429923e-06*G0_1_9 + 1.40864426578778e-05*G0_2_0 + 3.19433652767139e-05*G0_2_2 - 1.99800199800295e-05*G0_2_3 + 3.12386026671889e-05*G0_2_4 + 4.60914746629252e-05*G0_2_6 - 8.85358028215589e-06*G0_2_8 + 1.744287458574e-05*G0_2_9 - 1.45621574193072e-05*G0_3_0 - 3.49386063671943e-05*G0_3_1 - 1.99800199800295e-05*G0_3_2 - 2.14071642643175e-06*G0_3_3 - 4.21007563864905e-05*G0_3_4 + 3.59164644879101e-05*G0_3_5 - 9.68079539508568e-05*G0_3_6 + 4.04357547214891e-06*G0_3_7 + 9.03858046715595e-06*G0_3_8 - 3.56786071071955e-05*G0_3_9 + 2.5160025160037e-05*G0_4_1 + 3.12386026671889e-05*G0_4_2 - 4.21007563864905e-05*G0_4_3 + 9.77593834737153e-05*G0_4_4 - 6.82650682651005e-05*G0_4_5 + 0.000165073022215957*G0_4_6 - 1.16550116550172e-05*G0_4_7 - 1.30821559393048e-05*G0_4_8 + 8.42015127729812e-05*G0_4_9 + 7.87572216144012e-05*G0_5_0 + 3.59164644879101e-05*G0_5_3 - 6.82650682651005e-05*G0_5_4 + 0.000149612292469505*G0_5_5 - 0.000221445221445326*G0_5_6 + 0.000125112982255898*G0_5_7 - 5.11393368536464e-05*G0_5_8 - 5.56586270872251e-05*G0_5_9 - 1.09942967085874e-05*G0_6_0 + 1.90550190550281e-05*G0_6_1 + 4.60914746629252e-05*G0_6_2 - 9.68079539508568e-05*G0_6_3 + 0.000165073022215957*G0_6_4 - 0.000221445221445326*G0_6_5 + 0.000507825507825748*G0_6_6 - 7.39736454022517e-05*G0_6_7 + 4.51929023357806e-06*G0_6_8 + 0.000141287284144494*G0_6_9 + 8.62629434058409e-05*G0_7_0 + 3.11328882757601e-05*G0_7_1 + 4.0435754721489e-06*G0_7_3 - 1.16550116550172e-05*G0_7_4 + 0.000125112982255898*G0_7_5 - 7.39736454022517e-05*G0_7_6 + 0.000113457970600881*G0_7_7 - 9.49050949051393e-05*G0_7_8 - 9.99000999001471e-06*G0_7_9 - 3.96428967857725e-05*G0_8_0 - 3.49914635629087e-05*G0_8_1 - 8.85358028215589e-06*G0_8_2 + 9.03858046715595e-06*G0_8_3 - 1.30821559393048e-05*G0_8_4 - 5.11393368536464e-05*G0_8_5 + 4.51929023357806e-06*G0_8_6 - 9.49050949051393e-05*G0_8_7 + 0.000120593692022319*G0_8_8 - 1.42714428428802e-06*G0_8_9 + 5.26457669315059e-05*G0_9_0 + 9.19715205429923e-06*G0_9_1 + 1.744287458574e-05*G0_9_2 - 3.56786071071955e-05*G0_9_3 + 8.42015127729812e-05*G0_9_4 - 5.56586270872251e-05*G0_9_5 + 0.000141287284144494*G0_9_6 - 9.99000999001473e-06*G0_9_7 - 1.42714428428797e-06*G0_9_8 + 5.99400599400879e-05*G0_9_9;
    A[118] = A[202];
    A[217] = A[119];
    A[6] = A[90];
    A[22] = A[106];
    A[9] = A[135];
    A[49] = -A[50] - 9.23239018477547e-06*G0_0_0 - 3.30651124302074e-05*G0_0_1 + 3.86444830889459e-06*G0_0_2 - 8.7002944145842e-05*G0_0_3 + 2.33628805057486e-05*G0_0_4 + 1.41657284514494e-05*G0_0_5 + 8.77429448858432e-06*G0_0_6 + 4.08057550914885e-05*G0_0_7 - 7.1145785431533e-05*G0_0_8 - 5.20114805829335e-05*G0_0_9 - 3.30651124302074e-05*G0_1_0 - 0.000458800458800674*G0_1_1 - 4.50813149226059e-05*G0_1_2 - 0.000743700743701092*G0_1_3 + 0.000356468927897667*G0_1_4 + 3.70000370000544e-06*G0_1_5 + 2.0508591937173e-05*G0_1_6 + 0.000150748722177365*G0_1_7 - 0.00029230029230043*G0_1_8 - 0.000113537256394453*G0_1_9 + 3.86444830889458e-06*G0_2_0 - 4.50813149226059e-05*G0_2_1 + 0.000104586771253487*G0_2_2 - 0.000244200244200359*G0_2_3 + 0.000347271775843368*G0_2_4 - 4.01714687429163e-05*G0_2_5 + 9.5248666677283e-05*G0_2_6 + 2.65343122486104e-05*G0_2_7 - 8.41486555772664e-05*G0_2_8 + 3.86914672629141e-05*G0_2_9 - 8.7002944145842e-05*G0_3_0 - 0.000743700743701092*G0_3_1 - 0.000244200244200359*G0_3_2 - 0.000764949336378263*G0_3_3 + 0.00041672613101204*G0_3_4 + 9.32400932401372e-05*G0_3_5 + 1.90285904571707e-06*G0_3_6 + 0.000324437467294762*G0_3_7 - 0.000640312068883798*G0_3_8 - 0.000308263165406167*G0_3_9 + 2.33628805057486e-05*G0_4_0 + 0.000356468927897667*G0_4_1 + 0.000347271775843368*G0_4_2 + 0.00041672613101204*G0_4_3 - 0.000696446410732453*G0_4_4 - 6.66000666000986e-06*G0_4_5 + 4.75714761429284e-06*G0_4_6 - 0.000106560106560157*G0_4_7 + 0.000315874601589035*G0_4_8 - 0.000102754388468722*G0_4_9 + 1.41657284514494e-05*G0_5_0 + 3.70000370000545e-06*G0_5_1 - 4.01714687429163e-05*G0_5_2 + 9.32400932401372e-05*G0_5_3 - 6.66000666000986e-06*G0_5_4 - 3.42514628229076e-05*G0_5_5 - 4.28143285286345e-05*G0_5_6 - 3.61543218686246e-05*G0_5_7 + 5.23286237572198e-05*G0_5_8 + 5.13771942343611e-05*G0_5_9 + 8.77429448858432e-06*G0_6_0 + 2.0508591937173e-05*G0_6_1 + 9.5248666677283e-05*G0_6_2 + 1.90285904571707e-06*G0_6_3 + 4.75714761429295e-06*G0_6_4 - 4.28143285286345e-05*G0_6_5 - 8.56286570572691e-05*G0_6_6 - 1.61743018885951e-05*G0_6_7 + 6.37457780315222e-05*G0_6_8 - 0.000119880119880176*G0_6_9 + 4.08057550914885e-05*G0_7_0 + 0.000150748722177365*G0_7_1 + 2.65343122486104e-05*G0_7_2 + 0.000324437467294762*G0_7_3 - 0.000106560106560157*G0_7_4 - 3.61543218686247e-05*G0_7_5 - 1.61743018885951e-05*G0_7_6 - 0.000148423005565933*G0_7_7 + 0.000288283145426138*G0_7_8 + 0.000188383045525991*G0_7_9 - 7.1145785431533e-05*G0_8_0 - 0.00029230029230043*G0_8_1 - 8.41486555772664e-05*G0_8_2 - 0.000640312068883798*G0_8_3 + 0.000315874601589035*G0_8_4 + 5.23286237572198e-05*G0_8_5 + 6.37457780315222e-05*G0_8_6 + 0.000288283145426138*G0_8_7 - 0.000645069216498091*G0_8_8 - 0.000291137433994713*G0_8_9 - 5.20114805829335e-05*G0_9_0 - 0.000113537256394453*G0_9_1 + 3.86914672629141e-05*G0_9_2 - 0.000308263165406167*G0_9_3 - 0.000102754388468722*G0_9_4 + 5.1377194234361e-05*G0_9_5 - 0.000119880119880176*G0_9_6 + 0.000188383045525991*G0_9_7 - 0.000291137433994713*G0_9_8 - 0.000685029256458149*G0_9_9;
    A[34] = A[62];
    A[147] = A[189];
    A[124] = A[68];
    A[84] = -A[137] - 2.28989117878115e-05*G0_0_0 + 8.34262739025035e-06*G0_0_1 + 1.9055019055028e-05*G0_0_4 - 3.49386063671942e-05*G0_0_5 + 2.5160025160037e-05*G0_0_6 - 3.49914635629086e-05*G0_0_7 + 3.11328882757601e-05*G0_0_8 + 9.19715205429921e-06*G0_0_9 + 8.34262739025035e-06*G0_1_0 + 6.49438744677145e-05*G0_1_1 + 1.40864426578778e-05*G0_1_2 + 7.87572216144014e-05*G0_1_3 - 1.09942967085876e-05*G0_1_4 - 1.45621574193071e-05*G0_1_5 - 3.96428967857726e-05*G0_1_7 + 8.62629434058411e-05*G0_1_8 + 5.26457669315059e-05*G0_1_9 + 1.40864426578778e-05*G0_2_1 + 3.19433652767135e-05*G0_2_2 + 4.60914746629247e-05*G0_2_4 - 1.99800199800294e-05*G0_2_5 + 3.12386026671887e-05*G0_2_6 - 8.85358028215592e-06*G0_2_7 + 1.74428745857399e-05*G0_2_9 + 7.87572216144014e-05*G0_3_1 + 0.000149612292469505*G0_3_3 - 0.000221445221445325*G0_3_4 + 3.591646448791e-05*G0_3_5 - 6.82650682651003e-05*G0_3_6 - 5.11393368536465e-05*G0_3_7 + 0.000125112982255898*G0_3_8 - 5.56586270872248e-05*G0_3_9 + 1.9055019055028e-05*G0_4_0 - 1.09942967085876e-05*G0_4_1 + 4.60914746629247e-05*G0_4_2 - 0.000221445221445325*G0_4_3 + 0.000507825507825745*G0_4_4 - 9.68079539508565e-05*G0_4_5 + 0.000165073022215957*G0_4_6 + 4.51929023357809e-06*G0_4_7 - 7.39736454022515e-05*G0_4_8 + 0.000141287284144493*G0_4_9 - 3.49386063671942e-05*G0_5_0 - 1.45621574193071e-05*G0_5_1 - 1.99800199800294e-05*G0_5_2 + 3.591646448791e-05*G0_5_3 - 9.68079539508565e-05*G0_5_4 - 2.14071642643183e-06*G0_5_5 - 4.21007563864903e-05*G0_5_6 + 9.03858046715598e-06*G0_5_7 + 4.04357547214883e-06*G0_5_8 - 3.56786071071955e-05*G0_5_9 + 2.5160025160037e-05*G0_6_0 + 3.12386026671887e-05*G0_6_2 - 6.82650682651003e-05*G0_6_3 + 0.000165073022215957*G0_6_4 - 4.21007563864903e-05*G0_6_5 + 9.7759383473715e-05*G0_6_6 - 1.30821559393047e-05*G0_6_7 - 1.16550116550171e-05*G0_6_8 + 8.4201512772981e-05*G0_6_9 - 3.49914635629086e-05*G0_7_0 - 3.96428967857726e-05*G0_7_1 - 8.85358028215592e-06*G0_7_2 - 5.11393368536465e-05*G0_7_3 + 4.51929023357809e-06*G0_7_4 + 9.03858046715595e-06*G0_7_5 - 1.30821559393047e-05*G0_7_6 + 0.00012059369202232*G0_7_7 - 9.49050949051395e-05*G0_7_8 - 1.42714428428805e-06*G0_7_9 + 3.11328882757601e-05*G0_8_0 + 8.62629434058411e-05*G0_8_1 + 0.000125112982255898*G0_8_3 - 7.39736454022515e-05*G0_8_4 + 4.04357547214884e-06*G0_8_5 - 1.16550116550171e-05*G0_8_6 - 9.49050949051395e-05*G0_8_7 + 0.000113457970600881*G0_8_8 - 9.99000999001457e-06*G0_8_9 + 9.19715205429922e-06*G0_9_0 + 5.26457669315059e-05*G0_9_1 + 1.74428745857399e-05*G0_9_2 - 5.56586270872248e-05*G0_9_3 + 0.000141287284144493*G0_9_4 - 3.56786071071955e-05*G0_9_5 + 8.4201512772981e-05*G0_9_6 - 1.42714428428805e-06*G0_9_7 - 9.99000999001457e-06*G0_9_8 + 5.99400599400879e-05*G0_9_9;
    A[67] = A[109];
    A[161] = A[175];
    A[136] = A[24];
    A[96] = A[144] - 0.000114124558569057*G0_0_1 + 0.000114124558569057*G0_0_2 - 6.21600621600913e-05*G0_0_3 + 6.21600621600913e-05*G0_0_4 + 0.00162800162800239*G0_0_5 - 0.000503200503200739*G0_0_6 - 0.0016280016280024*G0_0_7 + 0.000503200503200741*G0_0_8 - 0.000114124558569057*G0_1_0 - 0.000126011554583042*G0_1_1 - 0.000106137248994442*G0_1_3 + 8.41486555772665e-05*G0_1_4 + 0.000186480186480274*G0_1_5 + 2.02971631543157e-05*G0_1_6 - 0.000393680393680579*G0_1_7 - 4.22857565715058e-07*G0_1_8 + 1.26857269714473e-05*G0_1_9 + 0.000114124558569057*G0_2_0 + 0.000126011554583043*G0_2_2 - 8.41486555772666e-05*G0_2_3 + 0.000106137248994442*G0_2_4 + 0.000393680393680579*G0_2_5 + 4.22857565715113e-07*G0_2_6 - 0.000186480186480275*G0_2_7 - 2.02971631543153e-05*G0_2_8 - 1.26857269714471e-05*G0_2_9 - 6.21600621600913e-05*G0_3_0 - 0.000106137248994442*G0_3_1 - 8.41486555772666e-05*G0_3_2 - 0.000342514628229075*G0_3_3 - 0.000186480186480274*G0_3_5 - 6.08914894629468e-05*G0_3_6 + 0.000186480186480275*G0_3_7 - 0.000247371675943221*G0_3_8 - 0.00041101755387489*G0_3_9 + 6.21600621600913e-05*G0_4_0 + 8.41486555772665e-05*G0_4_1 + 0.000106137248994442*G0_4_2 + 0.000342514628229075*G0_4_4 - 0.000186480186480274*G0_4_5 + 0.000247371675943221*G0_4_6 + 0.000186480186480274*G0_4_7 + 6.08914894629467e-05*G0_4_8 + 0.00041101755387489*G0_4_9 + 0.00162800162800239*G0_5_0 + 0.000186480186480274*G0_5_1 + 0.000393680393680579*G0_5_2 - 0.000186480186480274*G0_5_3 - 0.000186480186480274*G0_5_4 + 0.00932400932401371*G0_5_5 - 0.00242424242424356*G0_5_6 - 0.000559440559440822*G0_5_8 + 0.00111888111888164*G0_5_9 - 0.000503200503200739*G0_6_0 + 2.02971631543157e-05*G0_6_1 + 4.2285756571514e-07*G0_6_2 - 6.08914894629468e-05*G0_6_3 + 0.000247371675943221*G0_6_4 - 0.00242424242424356*G0_6_5 + 0.00117216117216172*G0_6_6 + 0.000559440559440825*G0_6_7 + 0.000159840159840235*G0_6_9 - 0.0016280016280024*G0_7_0 - 0.000393680393680578*G0_7_1 - 0.000186480186480275*G0_7_2 + 0.000186480186480275*G0_7_3 + 0.000186480186480274*G0_7_4 + 0.000559440559440825*G0_7_6 - 0.0093240093240137*G0_7_7 + 0.00242424242424357*G0_7_8 - 0.00111888111888164*G0_7_9 + 0.000503200503200741*G0_8_0 - 4.22857565715031e-07*G0_8_1 - 2.02971631543153e-05*G0_8_2 - 0.000247371675943221*G0_8_3 + 6.08914894629467e-05*G0_8_4 - 0.000559440559440822*G0_8_5 + 0.00242424242424357*G0_8_7 - 0.00117216117216172*G0_8_8 - 0.000159840159840235*G0_8_9 + 1.26857269714473e-05*G0_9_1 - 1.26857269714471e-05*G0_9_2 - 0.00041101755387489*G0_9_3 + 0.00041101755387489*G0_9_4 + 0.00111888111888164*G0_9_5 + 0.000159840159840235*G0_9_6 - 0.00111888111888165*G0_9_7 - 0.000159840159840235*G0_9_8;
    A[81] = A[95];
    A[167] = A[41];
    A[156] = A[100];
    A[112] = A[160] - 0.000130372273229477*G0_0_1 + 0.000130372273229477*G0_0_2 - 0.00012059369202232*G0_0_3 + 0.00012059369202232*G0_0_4 - 4.32900432900643e-05*G0_0_5 - 0.000243090243090357*G0_0_6 + 4.32900432900639e-05*G0_0_7 + 0.000243090243090358*G0_0_8 - 0.000130372273229477*G0_1_0 - 0.000539196253482221*G0_1_1 - 0.000453594025022809*G0_1_3 + 0.000287093858522565*G0_1_4 + 0.000156272299129515*G0_1_5 + 0.000276865991151835*G0_1_6 + 0.000530184101612923*G0_1_7 - 0.000410303981732746*G0_1_8 + 0.000349650349650514*G0_1_9 + 0.000130372273229477*G0_2_0 + 0.000539196253482221*G0_2_2 - 0.000287093858522565*G0_2_3 + 0.000453594025022809*G0_2_4 - 0.000530184101612922*G0_2_5 + 0.000410303981732746*G0_2_6 - 0.000156272299129516*G0_2_7 - 0.000276865991151836*G0_2_8 - 0.000349650349650514*G0_2_9 - 0.00012059369202232*G0_3_0 - 0.000453594025022809*G0_3_1 - 0.000287093858522565*G0_3_2 - 0.001066076780363*G0_3_3 - 5.35179106607927e-05*G0_3_5 - 0.000830597973455507*G0_3_6 + 0.000361781076066962*G0_3_7 - 0.00119237904952247*G0_3_8 - 0.00177251320108546*G0_3_9 + 0.00012059369202232*G0_4_0 + 0.000287093858522565*G0_4_1 + 0.000453594025022809*G0_4_2 + 0.00106607678036299*G0_4_4 - 0.000361781076066959*G0_4_5 + 0.00119237904952247*G0_4_6 + 5.35179106607934e-05*G0_4_7 + 0.000830597973455507*G0_4_8 + 0.00177251320108546*G0_4_9 - 4.32900432900643e-05*G0_5_0 + 0.000156272299129515*G0_5_1 - 0.000530184101612922*G0_5_2 - 5.35179106607927e-05*G0_5_3 - 0.000361781076066959*G0_5_4 + 0.00428571428571629*G0_5_5 + 0.00111959469102379*G0_5_6 - 0.000468816897388545*G0_5_8 + 0.000937633794777092*G0_5_9 - 0.000243090243090357*G0_6_0 + 0.000276865991151835*G0_6_1 + 0.000410303981732746*G0_6_2 - 0.000830597973455507*G0_6_3 + 0.00119237904952247*G0_6_4 + 0.00111959469102379*G0_6_5 + 0.00535179106607929*G0_6_6 + 0.000468816897388547*G0_6_7 + 0.00271014699586256*G0_6_9 + 4.32900432900639e-05*G0_7_0 + 0.000530184101612923*G0_7_1 - 0.000156272299129516*G0_7_2 + 0.000361781076066962*G0_7_3 + 5.35179106607934e-05*G0_7_4 + 0.000468816897388547*G0_7_6 - 0.00428571428571631*G0_7_7 - 0.00111959469102379*G0_7_8 - 0.000937633794777095*G0_7_9 + 0.000243090243090358*G0_8_0 - 0.000410303981732746*G0_8_1 - 0.000276865991151836*G0_8_2 - 0.00119237904952247*G0_8_3 + 0.000830597973455507*G0_8_4 - 0.000468816897388545*G0_8_5 - 0.00111959469102379*G0_8_7 - 0.0053517910660793*G0_8_8 - 0.00271014699586256*G0_8_9 + 0.000349650349650514*G0_9_1 - 0.000349650349650514*G0_9_2 - 0.00177251320108546*G0_9_3 + 0.00177251320108546*G0_9_4 + 0.000937633794777092*G0_9_5 + 0.00271014699586256*G0_9_6 - 0.000937633794777095*G0_9_7 - 0.00271014699586256*G0_9_8;
    A[185] = A[94] - 6.16667283334225e-06*G0_0_0 - 2.99524109048059e-06*G0_0_1 + 1.40952521904998e-07*G0_0_2 - 2.85428856857557e-06*G0_0_3 - 0.000117025831311601*G0_0_4 + 3.01286015571876e-05*G0_0_5 - 1.45885860171646e-05*G0_0_6 - 3.45686059971938e-05*G0_0_8 - 0.000119880119880176*G0_0_9 - 2.99524109048059e-06*G0_1_0 - 2.7027646075278e-05*G0_1_1 - 8.24572253144074e-06*G0_1_2 - 7.29429300858213e-06*G0_1_3 - 4.24971853543484e-05*G0_1_4 + 1.99800199800294e-05*G0_1_5 - 3.71057513914832e-05*G0_1_6 + 3.13971742543318e-05*G0_1_7 - 5.89886304172296e-05*G0_1_8 - 0.000108462965605874*G0_1_9 + 1.40952521904995e-07*G0_2_0 - 8.24572253144074e-06*G0_2_1 + 4.7853381186737e-05*G0_2_2 + 1.49057291914506e-05*G0_2_3 - 7.92857935715479e-06*G0_2_4 + 7.29429300858212e-06*G0_2_5 + 4.34486148772067e-05*G0_2_6 + 7.70657913515417e-05*G0_2_7 + 0.000159840159840235*G0_2_9 - 2.85428856857557e-06*G0_3_0 - 7.29429300858213e-06*G0_3_1 + 1.49057291914506e-05*G0_3_2 - 0.000331097473954773*G0_3_3 + 0.000319680319680471*G0_3_4 - 4.28143285286346e-05*G0_3_5 + 0.000145568716997357*G0_3_6 + 4.28143285286343e-05*G0_3_7 - 8.5628657057269e-05*G0_3_8 + 0.000239760239760353*G0_3_9 - 0.000117025831311601*G0_4_0 - 4.24971853543484e-05*G0_4_1 - 7.92857935715484e-06*G0_4_2 + 0.000319680319680471*G0_4_3 - 0.00229199372056623*G0_4_4 + 0.00038532895675771*G0_4_5 - 0.000530897673755067*G0_4_6 + 4.28143285286349e-05*G0_4_7 + 4.28143285286345e-05*G0_4_8 - 0.00125017839303612*G0_4_9 + 3.01286015571877e-05*G0_5_0 + 1.99800199800294e-05*G0_5_1 + 7.29429300858213e-06*G0_5_2 - 4.28143285286347e-05*G0_5_3 + 0.00038532895675771*G0_5_4 - 1.1417154274302e-05*G0_5_5 - 2.85428856857557e-05*G0_5_6 + 0.000222634508348898*G0_5_7 - 2.56885971171805e-05*G0_5_8 + 0.000411017553874889*G0_5_9 - 1.45885860171646e-05*G0_6_0 - 3.71057513914832e-05*G0_6_1 + 4.34486148772068e-05*G0_6_2 + 0.000145568716997357*G0_6_3 - 0.000530897673755067*G0_6_4 - 2.85428856857558e-05*G0_6_5 - 0.000122734408448753*G0_6_6 - 0.000196945911231718*G0_6_7 + 4.28143285286344e-05*G0_6_8 - 0.000770657913515419*G0_6_9 + 3.13971742543318e-05*G0_7_1 + 7.70657913515417e-05*G0_7_2 + 4.28143285286343e-05*G0_7_3 + 4.28143285286349e-05*G0_7_4 + 0.000222634508348898*G0_7_5 - 0.000196945911231718*G0_7_6 + 0.000724989296418207*G0_7_7 + 3.13971742543323e-05*G0_7_8 + 0.000753532182103963*G0_7_9 - 3.45686059971938e-05*G0_8_0 - 5.89886304172296e-05*G0_8_1 - 8.5628657057269e-05*G0_8_3 + 4.28143285286344e-05*G0_8_4 - 2.56885971171805e-05*G0_8_5 + 4.28143285286344e-05*G0_8_6 + 3.13971742543323e-05*G0_8_7 + 0.000108462965605873*G0_8_8 + 0.000239760239760352*G0_8_9 - 0.000119880119880176*G0_9_0 - 0.000108462965605874*G0_9_1 + 0.000159840159840235*G0_9_2 + 0.000239760239760353*G0_9_3 - 0.00125017839303612*G0_9_4 + 0.000411017553874889*G0_9_5 - 0.000770657913515419*G0_9_6 + 0.000753532182103963*G0_9_7 + 0.000239760239760353*G0_9_8 - 0.000513771942343616*G0_9_9;
    A[110] = A[185] - 3.77400377400554e-05*G0_0_0 - 6.73048292096223e-06*G0_0_1 - 3.77047996095792e-05*G0_0_2 + 4.09114694829172e-05*G0_0_3 - 8.08715094429757e-05*G0_0_4 + 9.83143840287139e-06*G0_0_5 - 8.24572253144067e-05*G0_0_6 + 6.12086326372329e-05*G0_0_8 + 9.5142952285854e-06*G0_0_9 - 6.73048292096224e-06*G0_1_0 + 2.17419265038417e-05*G0_1_1 - 3.8409562219104e-05*G0_1_2 + 0.000143031571603067*G0_1_3 - 0.00011290297004588*G0_1_4 + 2.85428856857563e-06*G0_1_5 - 5.80372008943709e-05*G0_1_6 - 5.80372008943709e-05*G0_1_7 + 0.000112268683697308*G0_1_8 + 6.27943485086641e-05*G0_1_9 - 3.77047996095792e-05*G0_2_0 - 3.8409562219104e-05*G0_2_1 - 0.00039713373046725*G0_2_2 + 0.000224854510568902*G0_2_3 - 0.000410700410700603*G0_2_4 + 0.000136054421768772*G0_2_5 - 0.000366300366300538*G0_2_6 - 9.99000999001465e-05*G0_2_7 + 2.94943152086147e-05*G0_2_8 - 0.000232148803577484*G0_2_9 + 4.09114694829172e-05*G0_3_0 + 0.000143031571603067*G0_3_1 + 0.000224854510568902*G0_3_2 - 0.000171257314114537*G0_3_3 + 0.000205508776937443*G0_3_4 - 0.000105608677037298*G0_3_5 + 0.000254031682603229*G0_3_6 - 4.28143285286344e-05*G0_3_7 + 5.13771942343617e-05*G0_3_8 - 0.000102754388468723*G0_3_9 - 8.08715094429757e-05*G0_4_0 - 0.00011290297004588*G0_4_1 - 0.000410700410700603*G0_4_2 + 0.000205508776937443*G0_4_3 - 0.000522334808049333*G0_4_4 + 0.000322534608249045*G0_4_5 - 0.000576566290852274*G0_4_6 + 0.000231197374054625*G0_4_7 - 8.56286570572744e-06*G0_4_8 + 5.13771942343628e-05*G0_4_9 + 9.83143840287138e-06*G0_5_0 + 2.85428856857563e-06*G0_5_1 + 0.000136054421768772*G0_5_2 - 0.000105608677037298*G0_5_3 + 0.000322534608249044*G0_5_4 - 0.000422434708149191*G0_5_5 + 0.000536606250892216*G0_5_6 - 0.000450977593834947*G0_5_7 + 7.13572142143904e-05*G0_5_8 - 0.000171257314114537*G0_5_9 - 8.24572253144067e-05*G0_6_0 - 5.80372008943709e-05*G0_6_1 - 0.000366300366300538*G0_6_2 + 0.000254031682603229*G0_6_3 - 0.000576566290852274*G0_6_4 + 0.000536606250892216*G0_6_5 - 0.000842015127729807*G0_6_6 + 0.000379620379620557*G0_6_7 + 2.85428856857531e-06*G0_6_8 + 0.000188383045525992*G0_6_9 - 5.80372008943709e-05*G0_7_1 - 9.99000999001465e-05*G0_7_2 - 4.28143285286344e-05*G0_7_3 + 0.000231197374054625*G0_7_4 - 0.000450977593834947*G0_7_5 + 0.000379620379620557*G0_7_6 - 0.00103325246182437*G0_7_7 + 2.85428856857502e-06*G0_7_8 - 0.00078778364492687*G0_7_9 + 6.12086326372329e-05*G0_8_0 + 0.000112268683697308*G0_8_1 + 2.94943152086147e-05*G0_8_2 + 5.13771942343617e-05*G0_8_3 - 8.56286570572743e-06*G0_8_4 + 7.13572142143904e-05*G0_8_5 + 2.85428856857531e-06*G0_8_6 + 2.85428856857504e-06*G0_8_7 - 0.00014271442842878*G0_8_8 - 0.000171257314114538*G0_8_9 + 9.51429522858541e-06*G0_9_0 + 6.27943485086641e-05*G0_9_1 - 0.000232148803577484*G0_9_2 - 0.000102754388468723*G0_9_3 + 5.13771942343628e-05*G0_9_4 - 0.000171257314114537*G0_9_5 + 0.000188383045525992*G0_9_6 - 0.00078778364492687*G0_9_7 - 0.000171257314114538*G0_9_8 - 0.000924789496218498*G0_9_9;
    A[82] = A[110];
    A[88] = A[185] + 3.49562254324324e-05*G0_0_1 + 2.02971631543156e-05*G0_0_2 + 4.05943263086308e-05*G0_0_3 + 1.0148581577158e-05*G0_0_4 - 4.05943263086312e-05*G0_0_5 - 1.01485815771576e-05*G0_0_6 - 6.08914894629467e-05*G0_0_7 + 0.000152228723657367*G0_0_8 + 3.49562254324324e-05*G0_1_0 + 0.000158994444708805*G0_1_1 + 2.48076438552747e-05*G0_1_2 + 0.000334903192046206*G0_1_3 - 3.0445744731473e-05*G0_1_4 - 5.07429078857889e-05*G0_1_5 + 1.01485815771579e-05*G0_1_6 - 0.00018267446838884*G0_1_7 + 0.000243565957851787*G0_1_8 + 0.00018267446838884*G0_1_9 + 2.02971631543156e-05*G0_2_0 + 2.48076438552747e-05*G0_2_1 + 3.94667061333919e-05*G0_2_2 + 0.000152228723657366*G0_2_3 - 6.08914894629467e-05*G0_2_5 - 0.000142080142080209*G0_2_7 + 0.000223268794697471*G0_2_8 + 0.000121782978925893*G0_2_9 + 4.05943263086308e-05*G0_3_0 + 0.000334903192046206*G0_3_1 + 0.000152228723657366*G0_3_2 + 0.000548023405166519*G0_3_3 - 0.00109604681033304*G0_3_4 + 9.13372341944203e-05*G0_3_5 - 0.000182674468388841*G0_3_6 - 0.00027401170258326*G0_3_7 + 0.00109604681033304*G0_3_8 + 1.0148581577158e-05*G0_4_0 - 3.0445744731473e-05*G0_4_1 - 0.00109604681033304*G0_4_3 + 0.00219209362066608*G0_4_4 - 0.000182674468388841*G0_4_5 + 0.000365348936777681*G0_4_6 + 0.000274011702583259*G0_4_7 - 0.00082203510774978*G0_4_8 - 4.05943263086312e-05*G0_5_0 - 5.07429078857889e-05*G0_5_1 - 6.08914894629467e-05*G0_5_2 + 9.13372341944203e-05*G0_5_3 - 0.000182674468388841*G0_5_4 - 9.13372341944189e-05*G0_5_5 + 0.000182674468388839*G0_5_6 - 0.000274011702583259*G0_5_7 - 1.01485815771576e-05*G0_6_0 + 1.01485815771579e-05*G0_6_1 - 0.000182674468388841*G0_6_3 + 0.000365348936777681*G0_6_4 + 0.000182674468388839*G0_6_5 - 0.000365348936777679*G0_6_6 + 0.000274011702583259*G0_6_7 - 0.00027401170258326*G0_6_8 - 6.08914894629467e-05*G0_7_0 - 0.00018267446838884*G0_7_1 - 0.000142080142080209*G0_7_2 - 0.00027401170258326*G0_7_3 + 0.000274011702583259*G0_7_4 - 0.000274011702583259*G0_7_5 + 0.00027401170258326*G0_7_6 - 0.000456686170972098*G0_7_7 - 0.0004566861709721*G0_7_8 - 0.000548023405166518*G0_7_9 + 0.000152228723657367*G0_8_0 + 0.000243565957851787*G0_8_1 + 0.000223268794697471*G0_8_2 + 0.00109604681033304*G0_8_3 - 0.00082203510774978*G0_8_4 - 0.00027401170258326*G0_8_6 - 0.0004566861709721*G0_8_7 + 0.00200941915227724*G0_8_8 + 0.00109604681033304*G0_8_9 + 0.00018267446838884*G0_9_1 + 0.000121782978925893*G0_9_2 - 0.000548023405166518*G0_9_7 + 0.00109604681033304*G0_9_8;
    A[200] = A[88];
    A[203] = A[133];
    A[3] = A[45];
    A[59] = A[213];
    A[17] = A[31];
    A[134] = A[218];
    A[69] = A[139];
    A[48] = A[176] - 0.000126011554583042*G0_0_0 - 0.000114124558569057*G0_0_1 + 0.000186480186480274*G0_0_3 + 2.02971631543154e-05*G0_0_4 - 0.000106137248994442*G0_0_5 + 8.41486555772665e-05*G0_0_6 - 4.22857565714679e-07*G0_0_7 - 0.000393680393680579*G0_0_8 + 1.26857269714474e-05*G0_0_9 - 0.000114124558569057*G0_1_0 + 0.000114124558569057*G0_1_2 + 0.00162800162800239*G0_1_3 - 0.00050320050320074*G0_1_4 - 6.21600621600913e-05*G0_1_5 + 6.21600621600913e-05*G0_1_6 + 0.00050320050320074*G0_1_7 - 0.00162800162800239*G0_1_8 + 0.000114124558569057*G0_2_1 + 0.000126011554583043*G0_2_2 + 0.000393680393680579*G0_2_3 + 4.22857565715004e-07*G0_2_4 - 8.41486555772666e-05*G0_2_5 + 0.000106137248994442*G0_2_6 - 2.02971631543156e-05*G0_2_7 - 0.000186480186480274*G0_2_8 - 1.2685726971447e-05*G0_2_9 + 0.000186480186480274*G0_3_0 + 0.00162800162800239*G0_3_1 + 0.000393680393680579*G0_3_2 + 0.00932400932401372*G0_3_3 - 0.00242424242424357*G0_3_4 - 0.000186480186480274*G0_3_5 - 0.000186480186480274*G0_3_6 - 0.000559440559440823*G0_3_7 + 0.00111888111888165*G0_3_9 + 2.02971631543154e-05*G0_4_0 - 0.00050320050320074*G0_4_1 + 4.22857565715004e-07*G0_4_2 - 0.00242424242424357*G0_4_3 + 0.00117216117216172*G0_4_4 - 6.08914894629469e-05*G0_4_5 + 0.000247371675943221*G0_4_6 + 0.000559440559440823*G0_4_8 + 0.000159840159840235*G0_4_9 - 0.000106137248994442*G0_5_0 - 6.21600621600913e-05*G0_5_1 - 8.41486555772666e-05*G0_5_2 - 0.000186480186480274*G0_5_3 - 6.08914894629469e-05*G0_5_4 - 0.000342514628229075*G0_5_5 - 0.000247371675943221*G0_5_7 + 0.000186480186480275*G0_5_8 - 0.00041101755387489*G0_5_9 + 8.41486555772665e-05*G0_6_0 + 6.21600621600913e-05*G0_6_1 + 0.000106137248994442*G0_6_2 - 0.000186480186480274*G0_6_3 + 0.000247371675943221*G0_6_4 + 0.000342514628229075*G0_6_6 + 6.08914894629466e-05*G0_6_7 + 0.000186480186480274*G0_6_8 + 0.00041101755387489*G0_6_9 - 4.22857565714733e-07*G0_7_0 + 0.00050320050320074*G0_7_1 - 2.02971631543156e-05*G0_7_2 - 0.000559440559440823*G0_7_3 - 0.000247371675943221*G0_7_5 + 6.08914894629466e-05*G0_7_6 - 0.00117216117216172*G0_7_7 + 0.00242424242424357*G0_7_8 - 0.000159840159840236*G0_7_9 - 0.000393680393680579*G0_8_0 - 0.00162800162800239*G0_8_1 - 0.000186480186480274*G0_8_2 + 0.000559440559440822*G0_8_4 + 0.000186480186480275*G0_8_5 + 0.000186480186480274*G0_8_6 + 0.00242424242424357*G0_8_7 - 0.00932400932401371*G0_8_8 - 0.00111888111888164*G0_8_9 + 1.26857269714474e-05*G0_9_0 - 1.2685726971447e-05*G0_9_2 + 0.00111888111888165*G0_9_3 + 0.000159840159840235*G0_9_4 - 0.00041101755387489*G0_9_5 + 0.00041101755387489*G0_9_6 - 0.000159840159840236*G0_9_7 - 0.00111888111888164*G0_9_8;
    A[39] = A[137];
    A[121] = A[8] - 0.000228554514268907*G0_0_0 + 5.41786256072226e-06*G0_0_4 - 0.000177758749187404*G0_0_5 + 7.89686503972588e-05*G0_0_6 - 0.000122364408078751*G0_0_7 + 5.95172023743731e-05*G0_0_8 - 3.45686059971936e-05*G0_0_9 + 1.09942967085876e-05*G0_1_3 - 5.41786256072223e-06*G0_1_4 - 1.0042867185729e-05*G0_1_5 - 5.7614343328656e-06*G0_1_6 + 1.84735899021699e-05*G0_1_8 + 1.42714428428782e-06*G0_1_9 + 1.80066846733599e-05*G0_2_2 + 1.58571587143076e-07*G0_2_3 - 3.16614602329037e-05*G0_2_5 + 3.92200392200577e-05*G0_2_6 - 3.17143174286168e-07*G0_2_9 + 1.09942967085876e-05*G0_3_1 + 1.58571587143076e-07*G0_3_2 - 1.18928690357316e-06*G0_3_3 - 4.75714761429336e-07*G0_3_4 - 1.66500166500244e-06*G0_3_5 + 3.40136054421928e-05*G0_3_6 - 4.28143285286346e-06*G0_3_9 + 5.41786256072226e-06*G0_4_0 - 5.41786256072223e-06*G0_4_1 - 4.75714761429349e-07*G0_4_3 + 3.44893202036223e-05*G0_4_4 + 4.75714761429173e-07*G0_4_5 - 3.4489320203622e-05*G0_4_6 - 4.28143285286342e-06*G0_4_7 + 4.28143285286339e-06*G0_4_8 - 0.000177758749187404*G0_5_0 - 1.0042867185729e-05*G0_5_1 - 3.16614602329037e-05*G0_5_2 - 1.66500166500245e-06*G0_5_3 + 4.75714761429187e-07*G0_5_4 - 0.000221920936206754*G0_5_5 + 0.000106322249179442*G0_5_6 - 8.80072308644149e-05*G0_5_7 + 4.68579040007831e-05*G0_5_8 + 9.99000999001473e-06*G0_5_9 + 7.89686503972588e-05*G0_6_0 - 5.7614343328656e-06*G0_6_1 + 3.92200392200577e-05*G0_6_2 + 3.40136054421928e-05*G0_6_3 - 3.4489320203622e-05*G0_6_4 + 0.000106322249179442*G0_6_5 - 0.000241900956186784*G0_6_6 + 4.11493268636319e-05*G0_6_7 - 5.94643451786589e-06*G0_6_8 - 6.70757813615272e-05*G0_6_9 - 0.000122364408078751*G0_7_0 - 4.28143285286342e-06*G0_7_4 - 8.80072308644149e-05*G0_7_5 + 4.11493268636319e-05*G0_7_6 - 6.58864944579539e-05*G0_7_7 + 5.11393368536465e-05*G0_7_8 + 2.14071642643171e-05*G0_7_9 + 5.95172023743731e-05*G0_8_0 + 1.84735899021699e-05*G0_8_1 + 4.28143285286339e-06*G0_8_4 + 4.68579040007831e-05*G0_8_5 - 5.94643451786589e-06*G0_8_6 + 5.11393368536465e-05*G0_8_7 - 4.59064744779245e-05*G0_8_8 - 1.28442985585903e-05*G0_8_9 - 3.45686059971936e-05*G0_9_0 + 1.42714428428782e-06*G0_9_1 - 3.17143174286168e-07*G0_9_2 - 4.28143285286346e-06*G0_9_3 + 9.99000999001473e-06*G0_9_5 - 6.70757813615272e-05*G0_9_6 + 2.14071642643171e-05*G0_9_7 - 1.28442985585903e-05*G0_9_8 + 8.56286570572696e-06*G0_9_9;
    A[14] = A[121] - 3.53790829981471e-05*G0_0_0 + 1.29500129500191e-06*G0_0_3 - 3.92993250136292e-05*G0_0_4 - 3.54143211286229e-06*G0_0_5 + 5.81429152857961e-07*G0_0_6 - 1.82357325214553e-05*G0_0_7 + 1.63328734757382e-05*G0_0_8 - 4.31314717029206e-05*G0_0_9 + 1.36900136900202e-05*G0_1_3 - 9.14429485858491e-06*G0_1_4 + 1.01750101750149e-05*G0_1_6 + 8.61572290144129e-06*G0_1_8 + 3.61543218686245e-05*G0_1_9 + 2.35155790711457e-05*G0_2_2 + 5.33857676715069e-06*G0_2_3 + 2.53185967471801e-05*G0_2_4 - 1.65443022585957e-05*G0_2_5 + 2.30985945271768e-05*G0_2_6 + 1.77600177600261e-05*G0_2_9 + 1.29500129500191e-06*G0_3_0 + 1.36900136900202e-05*G0_3_1 + 5.3385767671507e-06*G0_3_2 - 4.54307597164955e-05*G0_3_3 + 4.51929023357825e-06*G0_3_4 - 3.0921459492903e-06*G0_3_5 - 3.59164644879098e-05*G0_3_6 - 9.27643784787079e-06*G0_3_7 - 8.99100899101321e-05*G0_3_9 - 3.92993250136293e-05*G0_4_0 - 9.14429485858491e-06*G0_4_1 + 2.53185967471801e-05*G0_4_2 + 4.51929023357826e-06*G0_4_3 - 0.000390799676514146*G0_4_4 + 0.000112506541078023*G0_4_5 - 7.65900765901128e-05*G0_4_6 + 6.35079206508077e-05*G0_4_7 - 9.27643784787083e-06*G0_4_8 - 0.000278293135436124*G0_4_9 - 3.54143211286229e-06*G0_5_0 - 1.65443022585958e-05*G0_5_2 - 3.09214594929029e-06*G0_5_3 + 0.000112506541078023*G0_5_4 - 4.44793301936369e-05*G0_5_5 - 5.94643451786597e-06*G0_5_6 + 1.47471576043075e-05*G0_5_7 + 0.000155558726987372*G0_5_9 + 5.81429152857968e-07*G0_6_0 + 1.01750101750149e-05*G0_6_1 + 2.30985945271768e-05*G0_6_2 - 3.59164644879098e-05*G0_6_3 - 7.65900765901127e-05*G0_6_4 - 5.94643451786594e-06*G0_6_5 + 0.000280909566623984*G0_6_6 - 1.66500166500257e-06*G0_6_7 - 1.45093002235927e-05*G0_6_8 + 1.85528756957414e-05*G0_6_9 - 1.82357325214553e-05*G0_7_0 - 9.27643784787079e-06*G0_7_3 + 6.35079206508077e-05*G0_7_4 + 1.47471576043075e-05*G0_7_5 - 1.66500166500257e-06*G0_7_6 + 7.92065077779739e-05*G0_7_7 - 4.49550449550662e-05*G0_7_8 + 0.000132724418438767*G0_7_9 + 1.63328734757382e-05*G0_8_0 + 8.61572290144129e-06*G0_8_1 - 9.27643784787085e-06*G0_8_4 - 1.45093002235927e-05*G0_8_6 - 4.49550449550662e-05*G0_8_7 + 1.92664478378857e-05*G0_8_8 - 8.99100899101321e-05*G0_8_9 - 4.31314717029206e-05*G0_9_0 + 3.61543218686245e-05*G0_9_1 + 1.77600177600261e-05*G0_9_2 - 8.9910089910132e-05*G0_9_3 - 0.000278293135436124*G0_9_4 + 0.000155558726987372*G0_9_5 + 1.85528756957413e-05*G0_9_6 + 0.000132724418438767*G0_9_7 - 8.99100899101321e-05*G0_9_8 - 7.7065791351542e-05*G0_9_9;
    A[210] = A[14];
    A[87] = A[185];
    A[64] = A[160] - 0.00053919625348222*G0_0_0 - 0.000130372273229477*G0_0_1 + 0.000156272299129515*G0_0_3 + 0.000276865991151836*G0_0_4 - 0.000453594025022809*G0_0_5 + 0.000287093858522565*G0_0_6 - 0.000410303981732745*G0_0_7 + 0.000530184101612922*G0_0_8 + 0.000349650349650514*G0_0_9 - 0.000130372273229477*G0_1_0 + 0.000130372273229477*G0_1_2 - 4.32900432900645e-05*G0_1_3 - 0.000243090243090357*G0_1_4 - 0.00012059369202232*G0_1_5 + 0.00012059369202232*G0_1_6 + 0.000243090243090358*G0_1_7 + 4.32900432900637e-05*G0_1_8 + 0.000130372273229477*G0_2_1 + 0.000539196253482222*G0_2_2 - 0.000530184101612923*G0_2_3 + 0.000410303981732746*G0_2_4 - 0.000287093858522565*G0_2_5 + 0.00045359402502281*G0_2_6 - 0.000276865991151836*G0_2_7 - 0.000156272299129516*G0_2_8 - 0.000349650349650514*G0_2_9 + 0.000156272299129515*G0_3_0 - 4.32900432900644e-05*G0_3_1 - 0.000530184101612923*G0_3_2 + 0.0042857142857163*G0_3_3 + 0.00111959469102379*G0_3_4 - 5.35179106607921e-05*G0_3_5 - 0.00036178107606696*G0_3_6 - 0.000468816897388544*G0_3_7 + 0.00093763379477709*G0_3_9 + 0.000276865991151836*G0_4_0 - 0.000243090243090357*G0_4_1 + 0.000410303981732746*G0_4_2 + 0.00111959469102379*G0_4_3 + 0.0053517910660793*G0_4_4 - 0.000830597973455507*G0_4_5 + 0.00119237904952247*G0_4_6 + 0.000468816897388548*G0_4_8 + 0.00271014699586256*G0_4_9 - 0.000453594025022809*G0_5_0 - 0.00012059369202232*G0_5_1 - 0.000287093858522565*G0_5_2 - 5.3517910660792e-05*G0_5_3 - 0.000830597973455507*G0_5_4 - 0.001066076780363*G0_5_5 - 0.00119237904952247*G0_5_7 + 0.000361781076066961*G0_5_8 - 0.00177251320108546*G0_5_9 + 0.000287093858522565*G0_6_0 + 0.00012059369202232*G0_6_1 + 0.00045359402502281*G0_6_2 - 0.00036178107606696*G0_6_3 + 0.00119237904952247*G0_6_4 + 0.001066076780363*G0_6_6 + 0.000830597973455507*G0_6_7 + 5.3517910660794e-05*G0_6_8 + 0.00177251320108546*G0_6_9 - 0.000410303981732745*G0_7_0 + 0.000243090243090358*G0_7_1 - 0.000276865991151836*G0_7_2 - 0.000468816897388544*G0_7_3 - 0.00119237904952247*G0_7_5 + 0.000830597973455507*G0_7_6 - 0.0053517910660793*G0_7_7 - 0.00111959469102379*G0_7_8 - 0.00271014699586256*G0_7_9 + 0.000530184101612922*G0_8_0 + 4.32900432900637e-05*G0_8_1 - 0.000156272299129516*G0_8_2 + 0.000468816897388548*G0_8_4 + 0.000361781076066961*G0_8_5 + 5.35179106607941e-05*G0_8_6 - 0.00111959469102379*G0_8_7 - 0.00428571428571631*G0_8_8 - 0.000937633794777095*G0_8_9 + 0.000349650349650514*G0_9_0 - 0.000349650349650514*G0_9_2 + 0.00093763379477709*G0_9_3 + 0.00271014699586256*G0_9_4 - 0.00177251320108546*G0_9_5 + 0.00177251320108546*G0_9_6 - 0.00271014699586256*G0_9_7 - 0.000937633794777095*G0_9_8;
    A[162] = A[214] - 0.000249485963771795*G0_0_0 + 9.51429522858552e-06*G0_0_1 - 0.000171257314114537*G0_0_3 + 9.133723419442e-05*G0_0_4 - 0.00043004614433206*G0_0_5 + 0.000449074734789232*G0_0_6 - 0.000614623471766618*G0_0_7 + 5.32800532800782e-05*G0_0_8 - 0.000422434708149192*G0_0_9 + 9.51429522858554e-06*G0_1_0 - 9.51429522858542e-06*G0_1_2 - 2.09314495028879e-05*G0_1_3 + 0.000395794681509153*G0_1_4 - 0.000468103325246403*G0_1_5 + 0.000468103325246403*G0_1_6 - 0.000395794681509154*G0_1_7 + 2.09314495028881e-05*G0_1_8 - 9.51429522858542e-06*G0_2_1 + 0.000249485963771795*G0_2_2 - 5.32800532800784e-05*G0_2_3 + 0.000614623471766617*G0_2_4 - 0.000449074734789232*G0_2_5 + 0.000430046144332061*G0_2_6 - 9.13372341944205e-05*G0_2_7 + 0.000171257314114538*G0_2_8 + 0.000422434708149192*G0_2_9 - 0.000171257314114537*G0_3_0 - 2.09314495028879e-05*G0_3_1 - 5.32800532800784e-05*G0_3_2 + 0.000205508776937448*G0_3_3 - 0.00179820179820264*G0_3_4 + 0.000959040959041411*G0_3_5 - 0.00140430997573921*G0_3_6 + 0.000513771942343612*G0_3_7 - 0.00102754388468722*G0_3_9 + 9.133723419442e-05*G0_4_0 + 0.000395794681509153*G0_4_1 + 0.000614623471766617*G0_4_2 - 0.00179820179820264*G0_4_3 + 0.000205508776937446*G0_4_4 - 0.00027401170258326*G0_4_5 + 0.00167832167832247*G0_4_6 - 0.000513771942343613*G0_4_8 - 0.000719280719281057*G0_4_9 - 0.00043004614433206*G0_5_0 - 0.000468103325246403*G0_5_1 - 0.000449074734789232*G0_5_2 + 0.00095904095904141*G0_5_3 - 0.00027401170258326*G0_5_4 - 0.00287712287712423*G0_5_5 - 0.00167832167832247*G0_5_7 + 0.00140430997573921*G0_5_8 - 0.00154131582703084*G0_5_9 + 0.000449074734789232*G0_6_0 + 0.000468103325246403*G0_6_1 + 0.000430046144332061*G0_6_2 - 0.00140430997573921*G0_6_3 + 0.00167832167832247*G0_6_4 + 0.00287712287712423*G0_6_6 + 0.00027401170258326*G0_6_7 - 0.00095904095904141*G0_6_8 + 0.00154131582703084*G0_6_9 - 0.000614623471766618*G0_7_0 - 0.000395794681509154*G0_7_1 - 9.13372341944205e-05*G0_7_2 + 0.000513771942343612*G0_7_3 - 0.00167832167832247*G0_7_5 + 0.00027401170258326*G0_7_6 - 0.000205508776937449*G0_7_7 + 0.00179820179820264*G0_7_8 + 0.000719280719281054*G0_7_9 + 5.32800532800782e-05*G0_8_0 + 2.09314495028881e-05*G0_8_1 + 0.000171257314114538*G0_8_2 - 0.000513771942343613*G0_8_4 + 0.00140430997573921*G0_8_5 - 0.00095904095904141*G0_8_6 + 0.00179820179820264*G0_8_7 - 0.000205508776937443*G0_8_8 + 0.00102754388468723*G0_8_9 - 0.000422434708149192*G0_9_0 + 0.000422434708149192*G0_9_2 - 0.00102754388468722*G0_9_3 - 0.000719280719281057*G0_9_4 - 0.00154131582703084*G0_9_5 + 0.00154131582703084*G0_9_6 + 0.000719280719281054*G0_9_7 + 0.00102754388468723*G0_9_8;
    A[93] = A[51];
    A[166] = A[26];
    A[115] = A[157];
    A[190] = A[162];
    A[206] = A[178];
    A[0] = 0.000999386416053554*G0_0_0 + 3.59208692542194e-05*G0_0_1 + 3.59208692542195e-05*G0_0_2 - 3.00625300625435e-06*G0_0_3 - 3.00625300625442e-06*G0_0_4 + 0.000332306582306739*G0_0_5 - 0.000157134532134606*G0_0_6 + 0.000332306582306738*G0_0_7 - 0.000157134532134606*G0_0_8 + 3.60750360750529e-05*G0_0_9 + 3.59208692542194e-05*G0_1_0 + 6.98449111147853e-06*G0_1_1 + 2.56228926863968e-06*G0_1_2 + 1.15790294361778e-06*G0_1_3 + 1.55862655862729e-05*G0_1_5 - 6.23219373219664e-06*G0_1_6 + 2.37840862840974e-05*G0_1_7 - 7.7121952121988e-06*G0_1_8 + 4.92562992563224e-06*G0_1_9 + 3.59208692542195e-05*G0_2_0 + 2.56228926863968e-06*G0_2_1 + 6.98449111147854e-06*G0_2_2 + 1.15790294361778e-06*G0_2_4 + 2.37840862840975e-05*G0_2_5 - 7.71219521219882e-06*G0_2_6 + 1.55862655862729e-05*G0_2_7 - 6.23219373219665e-06*G0_2_8 + 4.92562992563224e-06*G0_2_9 - 3.00625300625435e-06*G0_3_0 + 1.15790294361778e-06*G0_3_1 + 3.45785167213902e-05*G0_3_3 - 1.15806812235438e-05*G0_3_4 - 7.38844488844837e-06*G0_3_5 - 4.26656676656879e-06*G0_3_6 - 1.39443889443955e-05*G0_3_7 + 1.82109557109643e-05*G0_3_8 + 1.31118881118943e-05*G0_3_9 - 3.00625300625442e-06*G0_4_0 + 1.15790294361778e-06*G0_4_2 - 1.15806812235438e-05*G0_4_3 + 3.45785167213902e-05*G0_4_4 - 1.39443889443955e-05*G0_4_5 + 1.82109557109643e-05*G0_4_6 - 7.38844488844834e-06*G0_4_7 - 4.26656676656879e-06*G0_4_8 + 1.31118881118943e-05*G0_4_9 + 0.000332306582306739*G0_5_0 + 1.55862655862729e-05*G0_5_1 + 2.37840862840975e-05*G0_5_2 - 7.38844488844837e-06*G0_5_3 - 1.39443889443955e-05*G0_5_4 + 0.00027888777888791*G0_5_5 - 0.000123834498834557*G0_5_6 + 0.000139443889443955*G0_5_7 - 6.97219447219775e-05*G0_5_8 + 3.12187812187958e-05*G0_5_9 - 0.000157134532134606*G0_6_0 - 6.23219373219664e-06*G0_6_1 - 7.71219521219882e-06*G0_6_2 - 4.26656676656879e-06*G0_6_3 + 1.82109557109643e-05*G0_6_4 - 0.000123834498834557*G0_6_5 + 7.28438228438571e-05*G0_6_6 - 6.97219447219774e-05*G0_6_7 + 3.01781551781694e-05*G0_6_8 - 6.24375624375916e-06*G0_6_9 + 0.000332306582306738*G0_7_0 + 2.37840862840974e-05*G0_7_1 + 1.55862655862729e-05*G0_7_2 - 1.39443889443955e-05*G0_7_3 - 7.38844488844834e-06*G0_7_4 + 0.000139443889443955*G0_7_5 - 6.97219447219774e-05*G0_7_6 + 0.00027888777888791*G0_7_7 - 0.000123834498834557*G0_7_8 + 3.12187812187959e-05*G0_7_9 - 0.000157134532134606*G0_8_0 - 7.71219521219879e-06*G0_8_1 - 6.23219373219665e-06*G0_8_2 + 1.82109557109643e-05*G0_8_3 - 4.26656676656879e-06*G0_8_4 - 6.97219447219775e-05*G0_8_5 + 3.01781551781694e-05*G0_8_6 - 0.000123834498834557*G0_8_7 + 7.28438228438571e-05*G0_8_8 - 6.24375624375914e-06*G0_8_9 + 3.60750360750529e-05*G0_9_0 + 4.92562992563224e-06*G0_9_1 + 4.92562992563224e-06*G0_9_2 + 1.31118881118943e-05*G0_9_3 + 1.31118881118943e-05*G0_9_4 + 3.12187812187958e-05*G0_9_5 - 6.24375624375916e-06*G0_9_6 + 3.12187812187959e-05*G0_9_7 - 6.24375624375914e-06*G0_9_8 + 7.49250749251103e-05*G0_9_9;
    A[58] = A[198];
    A[28] = A[165] - 0.000201755916041725*G0_0_0 + 1.02542959685866e-05*G0_0_1 + 1.00428671857297e-06*G0_0_3 + 1.13114398828737e-05*G0_0_4 - 0.00010333581762158*G0_0_5 + 5.36500536500788e-05*G0_0_6 - 0.00015941730227452*G0_0_7 + 8.47829419258389e-05*G0_0_8 - 3.86914672629139e-05*G0_0_9 + 1.02542959685866e-05*G0_1_0 + 0.000226645782201445*G0_1_1 + 2.22910540370963e-05*G0_1_2 + 0.000189757332614565*G0_1_3 - 8.64743721886987e-05*G0_1_4 - 0.000118770118770175*G0_1_7 + 0.000247213104356078*G0_1_8 + 8.49943707086964e-05*G0_1_9 + 2.22910540370963e-05*G0_2_1 + 2.72214557928981e-06*G0_2_3 - 1.13642970785882e-06*G0_2_7 - 6.60714946429425e-07*G0_2_8 - 1.56985871271658e-05*G0_2_9 + 1.00428671857298e-06*G0_3_0 + 0.000189757332614565*G0_3_1 + 2.7221455792898e-06*G0_3_2 + 1.61743018885962e-05*G0_3_3 - 6.87407830265299e-05*G0_3_4 + 2.14071642643157e-06*G0_3_5 - 4.49550449550662e-05*G0_3_6 - 1.83150183150273e-05*G0_3_7 + 3.16350316350472e-05*G0_3_8 - 0.000218353075496035*G0_3_9 + 1.13114398828737e-05*G0_4_0 - 8.64743721886987e-05*G0_4_1 - 6.87407830265299e-05*G0_4_3 + 0.000116074401788742*G0_4_4 - 4.92364778079296e-05*G0_4_5 + 9.41915227629958e-05*G0_4_6 - 7.61143618286827e-06*G0_4_7 - 1.332001332002e-05*G0_4_8 + 0.000145568716997357*G0_4_9 - 0.00010333581762158*G0_5_0 + 2.14071642643156e-06*G0_5_3 - 4.92364778079296e-05*G0_5_4 + 0.000194567337424573*G0_5_5 - 3.52028923457663e-05*G0_5_6 + 3.52028923457664e-05*G0_5_7 - 2.33100233100346e-05*G0_5_8 + 0.000162694448408811*G0_5_9 + 5.36500536500788e-05*G0_6_0 - 4.49550449550662e-05*G0_6_3 + 9.41915227629958e-05*G0_6_4 - 3.52028923457663e-05*G0_6_5 + 0.000210265924551738*G0_6_6 - 1.18928690357319e-05*G0_6_7 - 6.18429189858054e-06*G0_6_8 + 0.00013700585129163*G0_6_9 - 0.00015941730227452*G0_7_0 - 0.000118770118770175*G0_7_1 - 1.13642970785882e-06*G0_7_2 - 1.83150183150273e-05*G0_7_3 - 7.61143618286826e-06*G0_7_4 + 3.52028923457664e-05*G0_7_5 - 1.18928690357319e-05*G0_7_6 - 7.08814994529607e-05*G0_7_7 - 4.23386137672058e-05*G0_7_8 + 0.000139860139860205*G0_7_9 + 8.47829419258389e-05*G0_8_0 + 0.000247213104356078*G0_8_1 - 6.60714946429428e-07*G0_8_2 + 3.16350316350472e-05*G0_8_3 - 1.332001332002e-05*G0_8_4 - 2.33100233100346e-05*G0_8_5 - 6.18429189858053e-06*G0_8_6 - 4.23386137672058e-05*G0_8_7 + 2.04557347414601e-05*G0_8_8 - 0.000228343085486049*G0_8_9 - 3.86914672629139e-05*G0_9_0 + 8.49943707086964e-05*G0_9_1 - 1.56985871271658e-05*G0_9_2 - 0.000218353075496035*G0_9_3 + 0.000145568716997357*G0_9_4 + 0.000162694448408811*G0_9_5 + 0.00013700585129163*G0_9_6 + 0.000139860139860205*G0_9_7 - 0.000228343085486049*G0_9_8 + 0.000548023405166523*G0_9_9;
    A[131] = A[173];
    A[74] = A[214];
    A[40] = 3.32691999358822e-05*G0_0_0 + 8.45054416483384e-06*G0_0_1 + 7.50351940828484e-06*G0_0_2 + 6.79875679875999e-06*G0_0_3 - 9.85125985126449e-06*G0_0_4 + 4.33693290836351e-05*G0_0_5 - 2.28739514453908e-05*G0_0_6 + 5.44296972868657e-05*G0_0_7 + 3.21107463964758e-05*G0_0_9 + 8.45054416483384e-06*G0_1_0 + 3.32691999358822e-05*G0_1_1 + 7.50351940828485e-06*G0_1_2 + 4.33693290836352e-05*G0_1_3 - 2.28739514453908e-05*G0_1_4 + 6.79875679875998e-06*G0_1_5 - 9.85125985126448e-06*G0_1_6 + 5.44296972868657e-05*G0_1_8 + 3.21107463964758e-05*G0_1_9 + 7.50351940828484e-06*G0_2_0 + 7.50351940828485e-06*G0_2_1 + 5.30333863667453e-06*G0_2_2 + 5.47071975643658e-06*G0_2_3 + 3.33000333000496e-06*G0_2_4 + 5.4707197564366e-06*G0_2_5 + 3.33000333000491e-06*G0_2_6 - 7.47268604411812e-06*G0_2_7 - 7.47268604411813e-06*G0_2_8 - 7.61143618286831e-06*G0_2_9 + 6.79875679875999e-06*G0_3_0 + 4.33693290836352e-05*G0_3_1 + 5.47071975643658e-06*G0_3_2 + 7.08220351077827e-05*G0_3_3 - 4.15655772798826e-05*G0_3_4 - 6.24375624375919e-06*G0_3_5 + 1.24875124875182e-06*G0_3_6 - 4.87012987013216e-05*G0_3_7 + 5.45882688740089e-05*G0_3_8 + 1.0703582132159e-06*G0_3_9 - 9.85125985126449e-06*G0_4_0 - 2.28739514453908e-05*G0_4_1 + 3.33000333000496e-06*G0_4_2 - 4.15655772798826e-05*G0_4_3 + 1.62337662337739e-05*G0_4_4 + 1.24875124875182e-06*G0_4_5 - 2.49750249750365e-06*G0_4_6 + 4.01384329955947e-05*G0_4_7 - 5.88697017268723e-06*G0_4_8 + 2.03368060511013e-05*G0_4_9 + 4.33693290836351e-05*G0_5_0 + 6.79875679875998e-06*G0_5_1 + 5.4707197564366e-06*G0_5_2 - 6.24375624375918e-06*G0_5_3 + 1.24875124875182e-06*G0_5_4 + 7.08220351077826e-05*G0_5_5 - 4.15655772798825e-05*G0_5_6 + 5.45882688740089e-05*G0_5_7 - 4.87012987013216e-05*G0_5_8 + 1.07035821321592e-06*G0_5_9 - 2.28739514453908e-05*G0_6_0 - 9.85125985126448e-06*G0_6_1 + 3.33000333000491e-06*G0_6_2 + 1.24875124875182e-06*G0_6_3 - 2.49750249750365e-06*G0_6_4 - 4.15655772798825e-05*G0_6_5 + 1.62337662337739e-05*G0_6_6 - 5.88697017268726e-06*G0_6_7 + 4.01384329955948e-05*G0_6_8 + 2.03368060511013e-05*G0_6_9 + 5.44296972868657e-05*G0_7_0 - 7.47268604411812e-06*G0_7_2 - 4.87012987013216e-05*G0_7_3 + 4.01384329955947e-05*G0_7_4 + 5.45882688740089e-05*G0_7_5 - 5.88697017268726e-06*G0_7_6 - 1.26659055230542e-05*G0_7_7 - 0.000166797488226138*G0_7_8 - 8.45582988440528e-05*G0_7_9 + 5.44296972868658e-05*G0_8_1 - 7.47268604411813e-06*G0_8_2 + 5.45882688740089e-05*G0_8_3 - 5.88697017268724e-06*G0_8_4 - 4.87012987013216e-05*G0_8_5 + 4.01384329955948e-05*G0_8_6 - 0.000166797488226138*G0_8_7 - 1.26659055230542e-05*G0_8_8 - 8.45582988440529e-05*G0_8_9 + 3.21107463964758e-05*G0_9_0 + 3.21107463964758e-05*G0_9_1 - 7.61143618286831e-06*G0_9_2 + 1.07035821321589e-06*G0_9_3 + 2.03368060511013e-05*G0_9_4 + 1.07035821321592e-06*G0_9_5 + 2.03368060511013e-05*G0_9_6 - 8.45582988440528e-05*G0_9_7 - 8.45582988440529e-05*G0_9_8 - 0.000173398030540969*G0_9_9;
    A[193] = -A[40] - 8.51309184642918e-05*G0_0_0 + 4.56620099477458e-05*G0_0_1 - 4.3239388477504e-05*G0_0_2 - 0.000449887414173341*G0_0_3 + 8.14859743431556e-05*G0_0_4 + 0.000104260818546582*G0_0_5 + 0.000175023389309186*G0_0_6 - 6.46179217608046e-06*G0_0_7 - 0.000289631003916855*G0_0_8 - 0.000515912658770045*G0_0_9 + 4.56620099477458e-05*G0_1_0 - 8.51309184642919e-05*G0_1_1 - 4.32393884775041e-05*G0_1_2 + 0.000104260818546582*G0_1_3 + 0.000175023389309186*G0_1_4 - 0.00044988741417334*G0_1_5 + 8.14859743431557e-05*G0_1_6 - 0.000289631003916855*G0_1_7 - 6.46179217608067e-06*G0_1_8 - 0.000515912658770044*G0_1_9 - 4.3239388477504e-05*G0_2_0 - 4.32393884775041e-05*G0_2_1 - 0.00010108938680372*G0_2_3 + 0.000125112982255898*G0_2_4 - 0.00010108938680372*G0_2_5 + 0.000125112982255898*G0_2_6 + 8.38645481503018e-05*G0_2_7 + 8.38645481503018e-05*G0_2_8 + 0.000540411968983651*G0_2_9 - 0.000449887414173341*G0_3_0 + 0.000104260818546582*G0_3_1 - 0.00010108938680372*G0_3_2 - 0.00376534180105786*G0_3_3 + 0.000232446125303378*G0_3_4 + 0.00122680890538091*G0_3_5 + 0.00159536891679824*G0_3_7 - 0.00158948194662555*G0_3_8 - 0.00164299985728635*G0_3_9 + 8.14859743431556e-05*G0_4_0 + 0.000175023389309186*G0_4_1 + 0.000125112982255898*G0_4_2 + 0.000232446125303378*G0_4_3 - 0.000531789638932747*G0_4_4 - 0.000370879120879296*G0_4_7 - 0.00162373340944846*G0_4_9 + 0.000104260818546582*G0_5_0 - 0.00044988741417334*G0_5_1 - 0.00010108938680372*G0_5_2 + 0.00122680890538091*G0_5_3 - 0.00376534180105786*G0_5_5 + 0.000232446125303378*G0_5_6 - 0.00158948194662555*G0_5_7 + 0.00159536891679824*G0_5_8 - 0.00164299985728635*G0_5_9 + 0.000175023389309186*G0_6_0 + 8.14859743431556e-05*G0_6_1 + 0.000125112982255898*G0_6_2 + 0.000232446125303378*G0_6_5 - 0.000531789638932747*G0_6_6 - 0.000370879120879295*G0_6_8 - 0.00162373340944846*G0_6_9 - 6.46179217608045e-06*G0_7_0 - 0.000289631003916855*G0_7_1 + 8.38645481503018e-05*G0_7_2 + 0.00159536891679824*G0_7_3 - 0.000370879120879296*G0_7_4 - 0.00158948194662555*G0_7_5 - 0.000560689310689576*G0_7_7 + 0.00175128442985668*G0_7_8 + 0.00155951191665551*G0_7_9 - 0.000289631003916855*G0_8_0 - 6.46179217608071e-06*G0_8_1 + 8.38645481503018e-05*G0_8_2 - 0.00158948194662555*G0_8_3 + 0.00159536891679824*G0_8_5 - 0.000370879120879296*G0_8_6 + 0.00175128442985668*G0_8_7 - 0.000560689310689577*G0_8_8 + 0.00155951191665551*G0_8_9 - 0.000515912658770045*G0_9_0 - 0.000515912658770044*G0_9_1 + 0.000540411968983651*G0_9_2 - 0.00164299985728635*G0_9_3 - 0.00162373340944846*G0_9_4 - 0.00164299985728635*G0_9_5 - 0.00162373340944846*G0_9_6 + 0.00155951191665551*G0_9_7 + 0.0015595119166555*G0_9_8 - 0.000173398030540973*G0_9_9;
    A[192] = -A[193] + 0.000331520331520487*G0_0_0 - 8.79543736687006e-05*G0_0_2 - 0.00018267446838884*G0_0_3 + 0.00036534893677768*G0_0_4 - 0.000365348936777679*G0_0_5 + 0.00027401170258326*G0_0_6 - 0.000487131915703572*G0_0_7 - 0.000213120213120314*G0_0_8 - 0.00219209362066608*G0_0_9 + 0.000115017257874455*G0_1_1 + 4.0594326308631e-05*G0_1_2 - 0.000304457447314733*G0_1_3 + 0.000152228723657367*G0_1_4 + 0.0009133723419442*G0_1_5 - 0.00018267446838884*G0_1_6 + 0.000761143618286832*G0_1_7 - 0.000791589363018306*G0_1_8 + 0.00109604681033304*G0_1_9 - 8.79543736687007e-05*G0_2_0 + 4.0594326308631e-05*G0_2_1 + 0.000236800236800348*G0_2_2 - 0.000152228723657367*G0_2_3 - 0.000243565957851786*G0_2_4 + 0.000943818086675671*G0_2_5 - 0.000608914894629467*G0_2_6 + 0.00146139574711072*G0_2_7 - 0.00018267446838884*G0_2_8 + 0.00219209362066608*G0_2_9 - 0.00018267446838884*G0_3_0 - 0.000304457447314733*G0_3_1 - 0.000152228723657367*G0_3_2 - 0.00164407021549956*G0_3_3 - 0.000822035107749781*G0_3_5 - 0.00328814043099913*G0_3_9 + 0.00036534893677768*G0_4_0 + 0.000152228723657367*G0_4_1 - 0.000243565957851786*G0_4_2 + 0.00164407021549956*G0_4_4 - 0.00164407021549956*G0_4_5 + 0.00164407021549956*G0_4_6 - 0.00246610532324934*G0_4_7 - 0.00328814043099912*G0_4_9 - 0.00036534893677768*G0_5_0 + 0.000913372341944199*G0_5_1 + 0.000943818086675671*G0_5_2 - 0.000822035107749781*G0_5_3 - 0.00164407021549956*G0_5_4 + 0.00931639788783084*G0_5_5 - 0.00383616383616564*G0_5_6 + 0.0082203510774978*G0_5_7 - 0.00328814043099912*G0_5_8 + 0.0131525617239965*G0_5_9 + 0.00027401170258326*G0_6_0 - 0.00018267446838884*G0_6_1 - 0.000608914894629467*G0_6_2 + 0.00164407021549956*G0_6_4 - 0.00383616383616564*G0_6_5 + 0.0027401170258326*G0_6_6 - 0.00493221064649868*G0_6_7 + 0.000822035107749781*G0_6_8 - 0.00657628086199824*G0_6_9 - 0.000487131915703572*G0_7_0 + 0.000761143618286832*G0_7_1 + 0.00146139574711072*G0_7_2 - 0.00246610532324934*G0_7_4 + 0.0082203510774978*G0_7_5 - 0.00493221064649868*G0_7_6 + 0.01260453831883*G0_7_7 - 0.00219209362066608*G0_7_8 + 0.0164407021549956*G0_7_9 - 0.000213120213120314*G0_8_0 - 0.000791589363018307*G0_8_1 - 0.00018267446838884*G0_8_2 - 0.00328814043099912*G0_8_5 + 0.000822035107749781*G0_8_6 - 0.00219209362066608*G0_8_7 + 0.0027401170258326*G0_8_8 - 0.00328814043099912*G0_8_9 - 0.00219209362066608*G0_9_0 + 0.00109604681033304*G0_9_1 + 0.00219209362066608*G0_9_2 - 0.00328814043099913*G0_9_3 - 0.00328814043099912*G0_9_4 + 0.0131525617239965*G0_9_5 - 0.00657628086199824*G0_9_6 + 0.0164407021549956*G0_9_7 - 0.00328814043099912*G0_9_8 + 0.0394576851719894*G0_9_9;
    A[208] = -A[193] + 0.000115017257874455*G0_0_0 + 4.05943263086311e-05*G0_0_2 + 0.0009133723419442*G0_0_3 - 0.00018267446838884*G0_0_4 - 0.000304457447314733*G0_0_5 + 0.000152228723657367*G0_0_6 - 0.000791589363018307*G0_0_7 + 0.000761143618286833*G0_0_8 + 0.00109604681033304*G0_0_9 + 0.000331520331520488*G0_1_1 - 8.79543736687007e-05*G0_1_2 - 0.00036534893677768*G0_1_3 + 0.00027401170258326*G0_1_4 - 0.00018267446838884*G0_1_5 + 0.00036534893677768*G0_1_6 - 0.000213120213120314*G0_1_7 - 0.000487131915703573*G0_1_8 - 0.00219209362066608*G0_1_9 + 4.05943263086311e-05*G0_2_0 - 8.79543736687007e-05*G0_2_1 + 0.000236800236800348*G0_2_2 + 0.000943818086675672*G0_2_3 - 0.000608914894629466*G0_2_4 - 0.000152228723657367*G0_2_5 - 0.000243565957851786*G0_2_6 - 0.00018267446838884*G0_2_7 + 0.00146139574711072*G0_2_8 + 0.00219209362066608*G0_2_9 + 0.0009133723419442*G0_3_0 - 0.00036534893677768*G0_3_1 + 0.000943818086675672*G0_3_2 + 0.00931639788783084*G0_3_3 - 0.00383616383616564*G0_3_4 - 0.000822035107749781*G0_3_5 - 0.00164407021549956*G0_3_6 - 0.00328814043099912*G0_3_7 + 0.0082203510774978*G0_3_8 + 0.0131525617239965*G0_3_9 - 0.00018267446838884*G0_4_0 + 0.00027401170258326*G0_4_1 - 0.000608914894629466*G0_4_2 - 0.00383616383616564*G0_4_3 + 0.0027401170258326*G0_4_4 + 0.00164407021549956*G0_4_6 + 0.00082203510774978*G0_4_7 - 0.00493221064649868*G0_4_8 - 0.00657628086199824*G0_4_9 - 0.000304457447314733*G0_5_0 - 0.00018267446838884*G0_5_1 - 0.000152228723657367*G0_5_2 - 0.000822035107749782*G0_5_3 - 0.00164407021549956*G0_5_5 - 0.00328814043099913*G0_5_9 + 0.000152228723657367*G0_6_0 + 0.00036534893677768*G0_6_1 - 0.000243565957851786*G0_6_2 - 0.00164407021549956*G0_6_3 + 0.00164407021549956*G0_6_4 + 0.00164407021549956*G0_6_6 - 0.00246610532324934*G0_6_8 - 0.00328814043099912*G0_6_9 - 0.000791589363018307*G0_7_0 - 0.000213120213120314*G0_7_1 - 0.00018267446838884*G0_7_2 - 0.00328814043099912*G0_7_3 + 0.00082203510774978*G0_7_4 + 0.0027401170258326*G0_7_7 - 0.00219209362066608*G0_7_8 - 0.00328814043099912*G0_7_9 + 0.000761143618286834*G0_8_0 - 0.000487131915703573*G0_8_1 + 0.00146139574711072*G0_8_2 + 0.0082203510774978*G0_8_3 - 0.00493221064649868*G0_8_4 - 0.00246610532324934*G0_8_6 - 0.00219209362066608*G0_8_7 + 0.01260453831883*G0_8_8 + 0.0164407021549956*G0_8_9 + 0.00109604681033304*G0_9_0 - 0.00219209362066608*G0_9_1 + 0.00219209362066608*G0_9_2 + 0.0131525617239965*G0_9_3 - 0.00657628086199824*G0_9_4 - 0.00328814043099913*G0_9_5 - 0.00328814043099912*G0_9_6 - 0.00328814043099912*G0_9_7 + 0.0164407021549956*G0_9_8 + 0.0394576851719895*G0_9_9;
    A[222] = A[193] - 8.79543736687009e-05*G0_0_1 + 8.79543736687007e-05*G0_0_2 + 0.000548023405166521*G0_0_3 - 0.00054802340516652*G0_0_4 - 0.000121782978925894*G0_0_5 - 0.000487131915703573*G0_0_6 + 0.000121782978925893*G0_0_7 + 0.000487131915703574*G0_0_8 - 8.79543736687009e-05*G0_1_0 + 0.000121782978925893*G0_1_1 + 6.08914894629463e-05*G0_1_3 - 0.000304457447314734*G0_1_4 + 0.00054802340516652*G0_1_5 + 0.000182674468388841*G0_1_7 + 0.00018267446838884*G0_1_8 + 0.00109604681033304*G0_1_9 + 8.79543736687007e-05*G0_2_0 - 0.000121782978925893*G0_2_2 + 0.000304457447314734*G0_2_3 - 6.0891489462947e-05*G0_2_4 - 0.000182674468388839*G0_2_5 - 0.00018267446838884*G0_2_6 - 0.000548023405166519*G0_2_7 - 0.00109604681033304*G0_2_9 + 0.000548023405166521*G0_3_0 + 6.08914894629463e-05*G0_3_1 + 0.000304457447314734*G0_3_2 + 0.00328814043099912*G0_3_3 - 0.00164407021549956*G0_3_5 - 0.00164407021549956*G0_3_7 + 0.00164407021549956*G0_3_8 - 0.00054802340516652*G0_4_0 - 0.000304457447314734*G0_4_1 - 6.08914894629471e-05*G0_4_2 - 0.00328814043099912*G0_4_4 + 0.00164407021549956*G0_4_5 - 0.00164407021549956*G0_4_6 + 0.00164407021549956*G0_4_7 - 0.000121782978925894*G0_5_0 + 0.00054802340516652*G0_5_1 - 0.000182674468388839*G0_5_2 - 0.00164407021549956*G0_5_3 + 0.00164407021549956*G0_5_4 + 0.00328814043099912*G0_5_5 + 0.00164407021549956*G0_5_6 - 0.00164407021549956*G0_5_8 + 0.00328814043099912*G0_5_9 - 0.000487131915703573*G0_6_0 - 0.00018267446838884*G0_6_2 - 0.00164407021549956*G0_6_4 + 0.00164407021549956*G0_6_5 + 0.00164407021549956*G0_6_7 + 0.00328814043099912*G0_6_9 + 0.000121782978925893*G0_7_0 + 0.000182674468388841*G0_7_1 - 0.000548023405166519*G0_7_2 - 0.00164407021549956*G0_7_3 + 0.00164407021549956*G0_7_4 + 0.00164407021549956*G0_7_6 - 0.00328814043099911*G0_7_7 - 0.00164407021549956*G0_7_8 - 0.00328814043099912*G0_7_9 + 0.000487131915703574*G0_8_0 + 0.00018267446838884*G0_8_1 + 0.00164407021549956*G0_8_3 - 0.00164407021549956*G0_8_5 - 0.00164407021549956*G0_8_7 - 0.00328814043099912*G0_8_9 + 0.00109604681033304*G0_9_1 - 0.00109604681033304*G0_9_2 + 0.00328814043099912*G0_9_5 + 0.00328814043099912*G0_9_6 - 0.00328814043099912*G0_9_7 - 0.00328814043099912*G0_9_8;
    A[207] = A[193];
    A[194] = A[222];
    A[223] = A[193] + 0.000121782978925893*G0_0_0 - 8.79543736687009e-05*G0_0_1 + 0.000548023405166521*G0_0_3 + 6.08914894629459e-05*G0_0_5 - 0.000304457447314733*G0_0_6 + 0.000182674468388839*G0_0_7 + 0.000182674468388841*G0_0_8 + 0.00109604681033304*G0_0_9 - 8.79543736687009e-05*G0_1_0 + 8.79543736687007e-05*G0_1_2 - 0.000121782978925894*G0_1_3 - 0.000487131915703573*G0_1_4 + 0.00054802340516652*G0_1_5 - 0.00054802340516652*G0_1_6 + 0.000487131915703574*G0_1_7 + 0.000121782978925893*G0_1_8 + 8.79543736687007e-05*G0_2_1 - 0.000121782978925893*G0_2_2 - 0.000182674468388839*G0_2_3 - 0.00018267446838884*G0_2_4 + 0.000304457447314733*G0_2_5 - 6.08914894629471e-05*G0_2_6 - 0.000548023405166519*G0_2_8 - 0.00109604681033304*G0_2_9 + 0.000548023405166521*G0_3_0 - 0.000121782978925894*G0_3_1 - 0.000182674468388839*G0_3_2 + 0.00328814043099913*G0_3_3 + 0.00164407021549956*G0_3_4 - 0.00164407021549956*G0_3_5 + 0.00164407021549956*G0_3_6 - 0.00164407021549956*G0_3_7 + 0.00328814043099913*G0_3_9 - 0.000487131915703573*G0_4_1 - 0.00018267446838884*G0_4_2 + 0.00164407021549956*G0_4_3 - 0.00164407021549956*G0_4_6 + 0.00164407021549956*G0_4_8 + 0.00328814043099912*G0_4_9 + 6.08914894629459e-05*G0_5_0 + 0.00054802340516652*G0_5_1 + 0.000304457447314733*G0_5_2 - 0.00164407021549956*G0_5_3 + 0.00328814043099912*G0_5_5 + 0.00164407021549956*G0_5_7 - 0.00164407021549956*G0_5_8 - 0.000304457447314733*G0_6_0 - 0.00054802340516652*G0_6_1 - 6.08914894629471e-05*G0_6_2 + 0.00164407021549956*G0_6_3 - 0.00164407021549956*G0_6_4 - 0.00328814043099912*G0_6_6 + 0.00164407021549956*G0_6_8 + 0.000182674468388839*G0_7_0 + 0.000487131915703574*G0_7_1 - 0.00164407021549956*G0_7_3 + 0.00164407021549956*G0_7_5 - 0.00164407021549956*G0_7_8 - 0.00328814043099912*G0_7_9 + 0.000182674468388841*G0_8_0 + 0.000121782978925893*G0_8_1 - 0.000548023405166519*G0_8_2 + 0.00164407021549956*G0_8_4 - 0.00164407021549956*G0_8_5 + 0.00164407021549956*G0_8_6 - 0.00164407021549956*G0_8_7 - 0.00328814043099912*G0_8_8 - 0.00328814043099912*G0_8_9 + 0.00109604681033304*G0_9_0 - 0.00109604681033304*G0_9_2 + 0.00328814043099913*G0_9_3 + 0.00328814043099912*G0_9_4 - 0.00328814043099912*G0_9_7 - 0.00328814043099911*G0_9_8;
    A[224] = -A[222] + 0.000115017257874455*G0_0_0 + 4.05943263086312e-05*G0_0_1 - 0.00018267446838884*G0_0_3 + 0.000913372341944199*G0_0_4 - 0.000791589363018307*G0_0_5 + 0.000761143618286833*G0_0_6 - 0.000304457447314734*G0_0_7 + 0.000152228723657367*G0_0_8 + 0.00109604681033304*G0_0_9 + 4.05943263086312e-05*G0_1_0 + 0.000236800236800348*G0_1_1 - 8.79543736687007e-05*G0_1_2 - 0.000608914894629466*G0_1_3 + 0.000943818086675673*G0_1_4 - 0.000182674468388841*G0_1_5 + 0.00146139574711072*G0_1_6 - 0.000152228723657367*G0_1_7 - 0.000243565957851786*G0_1_8 + 0.00219209362066608*G0_1_9 - 8.79543736687007e-05*G0_2_1 + 0.000331520331520487*G0_2_2 + 0.00027401170258326*G0_2_3 - 0.000365348936777679*G0_2_4 - 0.000213120213120313*G0_2_5 - 0.000487131915703572*G0_2_6 - 0.00018267446838884*G0_2_7 + 0.00036534893677768*G0_2_8 - 0.00219209362066608*G0_2_9 - 0.00018267446838884*G0_3_0 - 0.000608914894629466*G0_3_1 + 0.00027401170258326*G0_3_2 + 0.0027401170258326*G0_3_3 - 0.00383616383616564*G0_3_4 + 0.000822035107749782*G0_3_5 - 0.00493221064649868*G0_3_6 + 0.00164407021549956*G0_3_8 - 0.00657628086199824*G0_3_9 + 0.000913372341944199*G0_4_0 + 0.000943818086675673*G0_4_1 - 0.000365348936777679*G0_4_2 - 0.00383616383616564*G0_4_3 + 0.00931639788783083*G0_4_4 - 0.00328814043099912*G0_4_5 + 0.0082203510774978*G0_4_6 - 0.000822035107749782*G0_4_7 - 0.00164407021549956*G0_4_8 + 0.0131525617239965*G0_4_9 - 0.000791589363018307*G0_5_0 - 0.000182674468388841*G0_5_1 - 0.000213120213120313*G0_5_2 + 0.000822035107749782*G0_5_3 - 0.00328814043099912*G0_5_4 + 0.0027401170258326*G0_5_5 - 0.00219209362066609*G0_5_6 - 0.00328814043099912*G0_5_9 + 0.000761143618286833*G0_6_0 + 0.00146139574711072*G0_6_1 - 0.000487131915703572*G0_6_2 - 0.00493221064649868*G0_6_3 + 0.0082203510774978*G0_6_4 - 0.00219209362066609*G0_6_5 + 0.01260453831883*G0_6_6 - 0.00246610532324934*G0_6_8 + 0.0164407021549956*G0_6_9 - 0.000304457447314734*G0_7_0 - 0.000152228723657367*G0_7_1 - 0.00018267446838884*G0_7_2 - 0.000822035107749782*G0_7_4 - 0.00164407021549956*G0_7_7 - 0.00328814043099912*G0_7_9 + 0.000152228723657367*G0_8_0 - 0.000243565957851786*G0_8_1 + 0.00036534893677768*G0_8_2 + 0.00164407021549956*G0_8_3 - 0.00164407021549956*G0_8_4 - 0.00246610532324934*G0_8_6 + 0.00164407021549956*G0_8_8 - 0.00328814043099912*G0_8_9 + 0.00109604681033304*G0_9_0 + 0.00219209362066608*G0_9_1 - 0.00219209362066608*G0_9_2 - 0.00657628086199824*G0_9_3 + 0.0131525617239965*G0_9_4 - 0.00328814043099912*G0_9_5 + 0.0164407021549956*G0_9_6 - 0.00328814043099912*G0_9_7 - 0.00328814043099912*G0_9_8 + 0.0394576851719894*G0_9_9;
    A[145] = A[159];
    A[151] = A[25];
    A[102] = A[186];
    A[177] = A[191];
    A[114] = A[142];
    A[221] = A[179];
    A[196] = A[28];
    A[209] = A[223];
    A[13] = A[195];
    A[53] = A[123];
    A[30] = A[2];
    A[23] = A[121];
    A[128] = A[80] + 0.000126011554583042*G0_0_0 + 0.000114124558569057*G0_0_2 - 2.02971631543155e-05*G0_0_3 - 0.000186480186480274*G0_0_4 + 4.22857565714327e-07*G0_0_5 + 0.000393680393680579*G0_0_6 + 0.000106137248994441*G0_0_7 - 8.41486555772664e-05*G0_0_8 - 1.26857269714471e-05*G0_0_9 - 0.000126011554583042*G0_1_1 - 0.000114124558569057*G0_1_2 - 4.22857565714272e-07*G0_1_3 - 0.00039368039368058*G0_1_4 + 2.02971631543156e-05*G0_1_5 + 0.000186480186480274*G0_1_6 + 8.41486555772665e-05*G0_1_7 - 0.000106137248994442*G0_1_8 + 1.2685726971447e-05*G0_1_9 + 0.000114124558569057*G0_2_0 - 0.000114124558569057*G0_2_1 + 0.000503200503200741*G0_2_3 - 0.0016280016280024*G0_2_4 - 0.000503200503200741*G0_2_5 + 0.00162800162800239*G0_2_6 + 6.21600621600911e-05*G0_2_7 - 6.21600621600913e-05*G0_2_8 - 2.02971631543155e-05*G0_3_0 - 4.22857565714299e-07*G0_3_1 + 0.000503200503200741*G0_3_2 - 0.00117216117216172*G0_3_3 + 0.00242424242424357*G0_3_4 - 0.000559440559440822*G0_3_6 + 6.08914894629465e-05*G0_3_7 - 0.00024737167594322*G0_3_8 - 0.000159840159840234*G0_3_9 - 0.000186480186480274*G0_4_0 - 0.00039368039368058*G0_4_1 - 0.0016280016280024*G0_4_2 + 0.00242424242424357*G0_4_3 - 0.00932400932401372*G0_4_4 + 0.000559440559440823*G0_4_5 + 0.000186480186480275*G0_4_7 + 0.000186480186480273*G0_4_8 - 0.00111888111888165*G0_4_9 + 4.22857565714327e-07*G0_5_0 + 2.02971631543156e-05*G0_5_1 - 0.000503200503200741*G0_5_2 + 0.000559440559440823*G0_5_4 + 0.00117216117216172*G0_5_5 - 0.00242424242424357*G0_5_6 + 0.00024737167594322*G0_5_7 - 6.08914894629465e-05*G0_5_8 + 0.000159840159840234*G0_5_9 + 0.000393680393680579*G0_6_0 + 0.000186480186480274*G0_6_1 + 0.00162800162800239*G0_6_2 - 0.000559440559440822*G0_6_3 - 0.00242424242424357*G0_6_5 + 0.00932400932401371*G0_6_6 - 0.000186480186480276*G0_6_7 - 0.000186480186480274*G0_6_8 + 0.00111888111888165*G0_6_9 + 0.000106137248994441*G0_7_0 + 8.41486555772665e-05*G0_7_1 + 6.21600621600911e-05*G0_7_2 + 6.08914894629465e-05*G0_7_3 + 0.000186480186480275*G0_7_4 + 0.00024737167594322*G0_7_5 - 0.000186480186480276*G0_7_6 + 0.000342514628229074*G0_7_7 + 0.000411017553874889*G0_7_9 - 8.41486555772664e-05*G0_8_0 - 0.000106137248994442*G0_8_1 - 6.21600621600913e-05*G0_8_2 - 0.00024737167594322*G0_8_3 + 0.000186480186480273*G0_8_4 - 6.08914894629465e-05*G0_8_5 - 0.000186480186480274*G0_8_6 - 0.000342514628229075*G0_8_8 - 0.00041101755387489*G0_8_9 - 1.26857269714471e-05*G0_9_0 + 1.26857269714471e-05*G0_9_1 - 0.000159840159840234*G0_9_3 - 0.00111888111888165*G0_9_4 + 0.000159840159840234*G0_9_5 + 0.00111888111888165*G0_9_6 + 0.000411017553874889*G0_9_7 - 0.00041101755387489*G0_9_8;
    A[63] = A[49];
    A[140] = A[84];
    A[77] = A[35];
    A[171] = A[101];
    A[152] = A[40];
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class mass_matrix_f2_p3_q4_tensor_form_0: public ufc::form
{
public:

  /// Constructor
  mass_matrix_f2_p3_q4_tensor_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~mass_matrix_f2_p3_q4_tensor_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(Product(Argument(FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None), 0), Argument(FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None), 1)), Product(Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None), 0), Coefficient(FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None), 1))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 2;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f2_p3_q4_tensor_finite_element_1();
        break;
      }
    case 1:
      {
        return new mass_matrix_f2_p3_q4_tensor_finite_element_1();
        break;
      }
    case 2:
      {
        return new mass_matrix_f2_p3_q4_tensor_finite_element_0();
        break;
      }
    case 3:
      {
        return new mass_matrix_f2_p3_q4_tensor_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f2_p3_q4_tensor_dofmap_1();
        break;
      }
    case 1:
      {
        return new mass_matrix_f2_p3_q4_tensor_dofmap_1();
        break;
      }
    case 2:
      {
        return new mass_matrix_f2_p3_q4_tensor_dofmap_0();
        break;
      }
    case 3:
      {
        return new mass_matrix_f2_p3_q4_tensor_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new mass_matrix_f2_p3_q4_tensor_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif

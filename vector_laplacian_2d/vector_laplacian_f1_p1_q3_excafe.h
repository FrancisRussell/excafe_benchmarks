#include <cassert>
#include <cmath>
#include <ufc.h>

// Common sub-expression elimination pass took 0 minutes and 13.61 seconds (wall clock).

class ExcafeCellIntegral_0 : public ufc::cell_integral
{
public:
  void tabulate_tensor(double* const A, const double* const* w, const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;

    A[199] = 0.0000000000000000000000000;
    A[369] = 0.0000000000000000000000000;
    A[13] = 0.0000000000000000000000000;
    const double var_0 = -x[0][1];
    const double var_1 = x[2][1] + var_0;
    const double var_2 = -x[0][0];
    const double var_3 = x[1][0] + var_2;
    const double var_4 = x[1][1] + var_0;
    const double var_5 = x[2][0] + var_2;
    const double var_6 = var_5*w[0][4] + var_4*w[0][2];
    const double var_7 = var_3*w[0][5] + var_1*w[0][1];
    const double var_8 = var_6 + -var_7;
    const double var_9 = -var_5*w[0][3];
    const double var_10 = var_3*w[0][3];
    const double var_11 = var_9 + var_10 + var_8;
    const double var_12 = -var_4*w[0][0];
    const double var_13 = var_1*w[0][0];
    const double var_14 = var_12 + var_8 + var_13;
    const double var_15 = var_1*var_11*var_4 + var_14*var_3*var_5;
    const double var_16 = var_3*var_3*var_5*w[0][3] + -var_1*var_4*var_4*w[0][0];
    const double var_17 = var_1*var_1*var_4*w[0][0] + -var_3*var_5*var_5*w[0][3];
    const double var_18 = var_16 + var_17;
    const double var_19 = var_9 + var_14;
    const double var_20 = var_11 + var_13;
    const double var_21 = var_19*var_5*var_5 + var_1*var_1*var_20;
    const double var_22 = 0.5000000000000000000000000*var_21;
    const double var_23 = var_11 + var_12;
    const double var_24 = var_14 + var_10;
    const double var_25 = var_23*var_4*var_4 + var_24*var_3*var_3;
    const double var_26 = 0.5000000000000000000000000*var_25;
    const double var_27 = var_22 + var_26;
    const double var_28 = 0.5000000000000000000000000*var_18 + var_15 + var_27;
    const double var_29 = var_1*var_3 + -var_4*var_5;
    const double var_30 = var_29;
    const double var_31 = std::abs(var_30);
    const double var_32 = var_29;
    const double var_33 = -var_6 + var_7;
    const double var_34 = -var_1*w[0][0];
    const double var_35 = var_4*w[0][0];
    const double var_36 = var_34 + var_35 + var_33;
    const double var_37 = -var_3*w[0][3];
    const double var_38 = var_36 + var_37;
    const double var_39 = var_5*w[0][3];
    const double var_40 = var_37 + var_33 + var_39;
    const double var_41 = var_40 + var_35;
    const double var_42 = var_3*var_3*var_38 + var_4*var_4*var_41;
    const double var_43 = -var_1*var_1*var_4*w[0][0] + var_3*var_5*var_5*w[0][3];
    const double var_44 = -var_3*var_3*var_5*w[0][3] + var_1*var_4*var_4*w[0][0];
    const double var_45 = var_1*var_4*var_40 + var_3*var_36*var_5;
    const double var_46 = 0.2125000000000000222044605*var_45;
    const double var_47 = 0.4375000000000000000000000*var_43 + 0.2250000000000000055511151*var_21 + 0.0125000000000000006938894*var_42 + 0.2000000000000000111022302*var_44 + var_46;
    A[7] = 3.0000000000000000000000000*var_31*var_47/(var_32*var_32*var_32);
    A[350] = A[7];
    const double var_48 = var_44 + var_26;
    const double var_49 = 0.1000000000000000055511151*var_45;
    const double var_50 = 0.1250000000000000000000000*var_43 + 0.2000000000000000111022302*var_48 + 0.0250000000000000013877788*var_21 + var_49;
    A[106] = 13.5000000000000000000000000*var_31*var_50/(var_32*var_32*var_32);
    const double var_51 = var_15 + var_17;
    const double var_52 = var_51 + var_42;
    const double var_53 = var_16 + 0.5000000000000000000000000*var_52;
    A[67] = 0.6750000000000000444089210*var_31*var_53/(var_32*var_32*var_32);
    const double var_54 = var_40 + var_34;
    const double var_55 = var_36 + var_39;
    const double var_56 = var_1*var_1*var_54 + var_5*var_5*var_55;
    const double var_57 = var_16 + var_15;
    const double var_58 = var_57 + var_56;
    const double var_59 = var_17 + 0.5000000000000000000000000*var_58;
    A[65] = 0.6750000000000000444089210*var_31*var_59/(var_32*var_32*var_32);
    A[103] = A[65];
    A[361] = 0.0000000000000000000000000;
    const double var_60 = var_42 + var_56;
    const double var_61 = 0.5000000000000000000000000*var_60;
    const double var_62 = var_18 + var_61 + 0.5000000000000000000000000*var_15;
    A[189] = 8.0999999999999996447286321*var_31*var_62/(var_32*var_32*var_32);
    const double var_63 = var_43 + var_22;
    const double var_64 = 0.2000000000000000111022302*var_63 + 0.1250000000000000000000000*var_44 + 0.0250000000000000013877788*var_25 + var_49;
    A[148] = 13.5000000000000000000000000*var_31*var_64/(var_32*var_32*var_32);
    A[63] = 3.3750000000000000000000000*var_31*var_62/(var_32*var_32*var_32);
    A[357] = A[63];
    A[135] = 0.0000000000000000000000000;
    const double var_65 = var_45 + var_43;
    const double var_66 = 0.5000000000000000000000000*var_65 + var_48;
    A[89] = 4.0499999999999998223643161*var_31*var_66/(var_32*var_32*var_32);
    A[359] = A[89];
    A[96] = 0.0000000000000000000000000;
    const double var_67 = var_51 + 2.1250000000000000000000000*var_16 + 1.1250000000000000000000000*var_42;
    A[45] = 0.3000000000000000444089210*var_31*var_67/(var_32*var_32*var_32);
    A[102] = A[45];
    const double var_68 = var_44 + var_43;
    const double var_69 = var_27 + var_45 + 1.5000000000000000000000000*var_68;
    A[3] = 0.0750000000000000111022302*var_31*var_69/(var_32*var_32*var_32);
    const double var_70 = var_45 + var_44;
    const double var_71 = 0.5000000000000000000000000*var_70 + var_63;
    A[86] = 3.3750000000000000000000000*var_31*var_71/(var_32*var_32*var_32);
    A[296] = A[86];
    A[156] = 0.0000000000000000000000000;
    A[2] = 0.1750000000000000166533454*var_31*var_66/(var_32*var_32*var_32);
    A[212] = A[2];
    A[133] = 0.0000000000000000000000000;
    A[306] = 0.0000000000000000000000000;
    const double var_72 = var_17 + 0.0500000000000000027755576*var_56 + 0.9500000000000000666133815*var_57;
    A[23] = 0.7500000000000000000000000*var_31*var_72/(var_32*var_32*var_32);
    A[61] = A[23];
    A[244] = 0.0000000000000000000000000;
    const double var_73 = 0.0500000000000000027755576*var_42 + 0.9500000000000000666133815*var_51 + var_16;
    A[44] = 0.7500000000000000000000000*var_31*var_73/(var_32*var_32*var_32);
    A[254] = A[44];
    A[206] = 0.0000000000000000000000000;
    A[117] = 0.0000000000000000000000000;
    A[152] = 0.0000000000000000000000000;
    A[246] = 0.0000000000000000000000000;
    const double var_74 = var_23 + var_13;
    const double var_75 = var_1*var_4 + var_3*var_5;
    A[129] = 2.0249999999999999111821580*var_31*var_74*var_75/(var_32*var_32*var_32);
    A[169] = A[129];
    A[64] = 0.6750000000000000444089210*var_28*var_31/(var_32*var_32*var_32);
    A[293] = A[64];
    A[116] = 0.0000000000000000000000000;
    A[125] = A[106];
    A[285] = 0.0000000000000000000000000;
    const double var_76 = 0.1250000000000000000000000*var_56 + 0.8750000000000000000000000*var_43 + var_70;
    A[24] = 0.3000000000000000444089210*var_31*var_76/(var_32*var_32*var_32);
    A[81] = A[24];
    A[173] = 0.0000000000000000000000000;
    A[113] = 0.0000000000000000000000000;
    A[303] = 0.0000000000000000000000000;
    A[294] = A[63];
    A[297] = A[67];
    A[339] = A[129];
    A[299] = A[89];
    A[57] = 0.0000000000000000000000000;
    A[368] = 0.0000000000000000000000000;
    A[178] = 0.0000000000000000000000000;
    A[292] = A[44];
    A[309] = 0.0000000000000000000000000;
    A[9] = 0.0000000000000000000000000;
    const double var_77 = 18.5000000000000000000000000*var_43 + 9.5000000000000000000000000*var_70 + 9.0000000000000000000000000*var_21;
    A[28] = 0.0750000000000000111022302*var_31*var_77/(var_32*var_32*var_32);
    A[371] = A[28];
    A[139] = 0.0000000000000000000000000;
    A[390] = 0.0000000000000000000000000;
    A[167] = A[148];
    const double var_78 = 0.9000000000000000222044605*var_56 + 1.9000000000000001332267630*var_17 + 1.1000000000000000888178420*var_16 + var_15 + 0.1000000000000000055511151*var_42;
    A[8] = 0.3750000000000000000000000*var_31*var_78/(var_32*var_32*var_32);
    A[218] = A[8];
    A[68] = 3.3750000000000000000000000*var_31*var_66/(var_32*var_32*var_32);
    A[163] = A[68];
    A[176] = 0.0000000000000000000000000;
    A[207] = 0.0000000000000000000000000;
    const double var_79 = var_38 + var_39;
    A[108] = 0.3375000000000000222044605*var_31*var_75*var_79/(var_32*var_32*var_32);
    A[318] = A[108];
    A[10] = 0.0000000000000000000000000;
    A[36] = 0.0000000000000000000000000;
    A[234] = A[24];
    A[313] = A[65];
    A[80] = A[3];
    A[17] = 0.0000000000000000000000000;
    A[105] = A[63];
    const double var_80 = 0.2000000000000000111022302*var_43 + 0.2250000000000000055511151*var_25 + 0.0125000000000000006938894*var_56 + 0.4375000000000000000000000*var_44 + var_46;
    A[5] = 3.0000000000000000000000000*var_31*var_80/(var_32*var_32*var_32);
    A[215] = A[5];
    A[77] = 0.0000000000000000000000000;
    A[344] = 0.0000000000000000000000000;
    const double var_81 = 9.0000000000000000000000000*var_25 + 18.5000000000000000000000000*var_44 + 9.5000000000000000000000000*var_65;
    A[367] = 0.0000000000000000000000000;
    A[168] = A[63];
    A[326] = 0.0000000000000000000000000;
    const double var_82 = var_5*var_5 + var_1*var_1;
    A[25] = 0.0375000000000000055511151*var_31*var_74*var_82/(var_32*var_32*var_32);
    A[235] = A[25];
    A[138] = 0.0000000000000000000000000;
    A[278] = A[68];
    A[73] = 0.0000000000000000000000000;
    A[311] = A[25];
    A[221] = 0.0000000000000000000000000;
    A[69] = 4.0499999999999998223643161*var_31*var_71/(var_32*var_32*var_32);
    A[185] = A[69];
    A[187] = A[89];
    A[267] = 0.0000000000000000000000000;
    A[40] = A[2];
    A[305] = 0.0000000000000000000000000;
    A[280] = 0.0000000000000000000000000;
    A[208] = 0.0000000000000000000000000;
    A[21] = 0.4250000000000000444089210*var_31*var_79*var_82/(var_32*var_32*var_32);
    A[231] = A[21];
    A[312] = A[45];
    A[321] = 0.0000000000000000000000000;
    A[245] = 0.0000000000000000000000000;
    A[291] = A[24];
    A[55] = 0.0000000000000000000000000;
    A[266] = 0.0000000000000000000000000;
    A[225] = 0.0000000000000000000000000;
    A[340] = 0.0000000000000000000000000;
    const double var_83 = var_4*var_4 + var_3*var_3;
    A[47] = 0.0375000000000000055511151*var_31*var_74*var_83/(var_32*var_32*var_32);
    A[257] = A[47];
    A[250] = A[2];
    A[248] = 0.0000000000000000000000000;
    A[384] = 0.0000000000000000000000000;
    const double var_84 = 0.1000000000000000055511151*var_56 + var_15 + 0.9000000000000000222044605*var_42 + 1.1000000000000000888178420*var_17 + 1.9000000000000001332267630*var_16;
    A[6] = 0.3750000000000000000000000*var_31*var_84/(var_32*var_32*var_32);
    A[330] = A[6];
    A[255] = A[45];
    const double var_85 = 1.1250000000000000000000000*var_56 + var_57 + 2.1250000000000000000000000*var_17;
    A[27] = 0.3000000000000000444089210*var_31*var_85/(var_32*var_32*var_32);
    A[283] = 0.0000000000000000000000000;
    A[227] = 0.0000000000000000000000000;
    A[327] = 0.0000000000000000000000000;
    A[83] = A[64];
    A[110] = 0.0000000000000000000000000;
    A[194] = 0.0000000000000000000000000;
    A[380] = 0.0000000000000000000000000;
    A[281] = 0.0000000000000000000000000;
    A[76] = 0.0000000000000000000000000;
    A[216] = A[6];
    A[115] = 0.0000000000000000000000000;
    A[136] = 0.0000000000000000000000000;
    A[14] = 0.0000000000000000000000000;
    A[224] = 0.0000000000000000000000000;
    A[100] = A[5];
    A[22] = 0.0875000000000000083266727*var_31*var_74*var_75/(var_32*var_32*var_32);
    A[41] = A[22];
    A[258] = A[47];
    A[98] = 0.0000000000000000000000000;
    A[302] = 0.0000000000000000000000000;
    A[237] = A[27];
    A[322] = 0.0000000000000000000000000;
    A[389] = 0.0000000000000000000000000;
    A[366] = 0.0000000000000000000000000;
    A[193] = 0.0000000000000000000000000;
    A[120] = A[6];
    A[209] = 0.0000000000000000000000000;
    A[66] = A[65];
    A[1] = 0.1750000000000000166533454*var_31*var_71/(var_32*var_32*var_32);
    A[20] = A[1];
    A[183] = A[69];
    A[114] = 0.0000000000000000000000000;
    A[279] = A[69];
    A[107] = 1.6875000000000000000000000*var_31*var_74*var_75/(var_32*var_32*var_32);
    A[145] = A[107];
    A[157] = 0.0000000000000000000000000;
    A[233] = A[23];
    A[370] = A[8];
    A[42] = 0.4250000000000000444089210*var_31*var_79*var_83/(var_32*var_32*var_32);
    A[252] = A[42];
    A[375] = A[108];
    A[316] = A[106];
    A[239] = 0.0000000000000000000000000;
    A[268] = 0.0000000000000000000000000;
    A[362] = 0.0000000000000000000000000;
    A[374] = A[67];
    A[288] = 0.0000000000000000000000000;
    A[265] = 0.0000000000000000000000000;
    A[214] = A[3];
    A[275] = A[65];
    A[270] = A[3];
    A[247] = 0.0000000000000000000000000;
    A[351] = A[27];
    const double var_86 = 0.8750000000000000000000000*var_44 + 0.1250000000000000000000000*var_42 + var_65;
    A[43] = 0.3000000000000000444089210*var_31*var_86/(var_32*var_32*var_32);
    A[35] = 0.0000000000000000000000000;
    A[34] = 0.0000000000000000000000000;
    A[289] = 0.0000000000000000000000000;
    A[32] = 0.0000000000000000000000000;
    A[341] = 0.0000000000000000000000000;
    A[149] = A[89];
    const double var_87 = 1.5000000000000000000000000*var_18 + var_61 + var_15;
    A[0] = 0.8500000000000000888178420*var_31*var_87/(var_32*var_32*var_32);
    A[352] = A[47];
    A[202] = 0.0000000000000000000000000;
    A[236] = A[25];
    A[295] = A[65];
    A[276] = A[65];
    A[38] = 0.0000000000000000000000000;
    A[132] = 0.0000000000000000000000000;
    A[238] = A[28];
    A[166] = A[108];
    A[118] = 0.0000000000000000000000000;
    A[364] = 0.0000000000000000000000000;
    A[197] = 0.0000000000000000000000000;
    A[301] = 0.0000000000000000000000000;
    A[394] = A[89];
    A[355] = A[107];
    A[29] = 0.0000000000000000000000000;
    A[30] = 0.0000000000000000000000000;
    A[85] = A[65];
    A[328] = 0.0000000000000000000000000;
    A[192] = 0.0000000000000000000000000;
    A[271] = A[23];
    A[203] = 0.0000000000000000000000000;
    A[72] = 0.0000000000000000000000000;
    A[230] = A[1];
    A[60] = A[3];
    A[130] = 0.0000000000000000000000000;
    A[26] = A[25];
    A[337] = A[108];
    A[84] = A[63];
    A[140] = A[7];
    A[153] = 0.0000000000000000000000000;
    A[97] = 0.0000000000000000000000000;
    A[141] = A[27];
    A[354] = A[67];
    A[94] = 0.0000000000000000000000000;
    A[269] = 0.0000000000000000000000000;
    A[109] = A[69];
    A[222] = 0.0000000000000000000000000;
    A[388] = 0.0000000000000000000000000;
    A[217] = A[7];
    A[284] = 0.0000000000000000000000000;
    A[46] = 0.0750000000000000111022302*var_31*var_81/(var_32*var_32*var_32);
    A[122] = A[46];
    A[177] = 0.0000000000000000000000000;
    A[18] = 0.0000000000000000000000000;
    A[188] = A[129];
    A[381] = 0.0000000000000000000000000;
    A[50] = 0.0000000000000000000000000;
    A[286] = 0.0000000000000000000000000;
    A[335] = A[106];
    A[308] = 0.0000000000000000000000000;
    A[241] = 0.0000000000000000000000000;
    A[49] = 0.0000000000000000000000000;
    A[205] = 0.0000000000000000000000000;
    A[232] = A[22];
    A[287] = 0.0000000000000000000000000;
    A[37] = 0.0000000000000000000000000;
    A[319] = A[69];
    A[171] = 0.0000000000000000000000000;
    A[338] = A[108];
    A[243] = 0.0000000000000000000000000;
    A[273] = A[63];
    A[78] = 0.0000000000000000000000000;
    A[277] = A[67];
    A[147] = A[63];
    A[90] = 0.0000000000000000000000000;
    A[378] = A[63];
    A[358] = A[148];
    A[33] = 0.0000000000000000000000000;
    A[121] = A[25];
    A[240] = 0.0000000000000000000000000;
    A[365] = 0.0000000000000000000000000;
    A[200] = 0.0000000000000000000000000;
    A[99] = 0.0000000000000000000000000;
    A[124] = A[86];
    A[150] = 0.0000000000000000000000000;
    A[93] = 0.0000000000000000000000000;
    A[373] = A[68];
    A[317] = A[107];
    A[88] = A[67];
    A[323] = 0.0000000000000000000000000;
    A[75] = 0.0000000000000000000000000;
    A[219] = 0.0000000000000000000000000;
    A[159] = 0.0000000000000000000000000;
    A[92] = 0.0000000000000000000000000;
    A[154] = 0.0000000000000000000000000;
    A[31] = 0.0000000000000000000000000;
    A[261] = 0.0000000000000000000000000;
    A[95] = 0.0000000000000000000000000;
    A[101] = A[25];
    A[345] = 0.0000000000000000000000000;
    A[51] = 0.0000000000000000000000000;
    A[58] = 0.0000000000000000000000000;
    A[264] = 0.0000000000000000000000000;
    A[383] = 0.0000000000000000000000000;
    A[196] = 0.0000000000000000000000000;
    A[151] = 0.0000000000000000000000000;
    A[360] = 0.0000000000000000000000000;
    A[181] = 0.0000000000000000000000000;
    A[71] = 0.0000000000000000000000000;
    A[356] = A[108];
    A[186] = A[129];
    A[204] = 0.0000000000000000000000000;
    A[201] = 0.0000000000000000000000000;
    A[79] = 0.0000000000000000000000000;
    A[391] = 0.0000000000000000000000000;
    A[262] = 0.0000000000000000000000000;
    A[332] = A[46];
    A[387] = 0.0000000000000000000000000;
    A[347] = 0.0000000000000000000000000;
    A[223] = 0.0000000000000000000000000;
    A[377] = A[148];
    A[310] = A[5];
    A[48] = A[47];
    A[211] = A[1];
    A[379] = A[129];
    A[74] = 0.0000000000000000000000000;
    A[19] = 0.0000000000000000000000000;
    A[191] = 0.0000000000000000000000000;
    A[324] = 0.0000000000000000000000000;
    A[282] = 0.0000000000000000000000000;
    A[259] = 0.0000000000000000000000000;
    A[104] = A[65];
    A[260] = 0.0000000000000000000000000;
    A[91] = 0.0000000000000000000000000;
    A[146] = A[108];
    A[399] = A[189];
    A[325] = 0.0000000000000000000000000;
    A[392] = 0.0000000000000000000000000;
    A[162] = A[47];
    A[184] = A[89];
    A[290] = A[3];
    A[127] = A[108];
    A[16] = 0.0000000000000000000000000;
    A[158] = 0.0000000000000000000000000;
    A[123] = A[65];
    A[39] = 0.0000000000000000000000000;
    A[119] = 0.0000000000000000000000000;
    A[300] = 0.0000000000000000000000000;
    A[226] = 0.0000000000000000000000000;
    A[59] = 0.0000000000000000000000000;
    A[170] = 0.0000000000000000000000000;
    A[70] = 0.0000000000000000000000000;
    A[372] = A[47];
    A[143] = A[67];
    A[363] = 0.0000000000000000000000000;
    A[307] = 0.0000000000000000000000000;
    A[11] = 0.0000000000000000000000000;
    A[249] = 0.0000000000000000000000000;
    A[382] = 0.0000000000000000000000000;
    A[220] = 0.0000000000000000000000000;
    A[342] = 0.0000000000000000000000000;
    A[213] = A[3];
    A[274] = A[64];
    A[346] = 0.0000000000000000000000000;
    A[144] = A[67];
    A[161] = A[28];
    A[251] = A[22];
    A[182] = 0.0000000000000000000000000;
    A[87] = A[67];
    A[174] = 0.0000000000000000000000000;
    A[397] = A[89];
    A[190] = 0.0000000000000000000000000;
    A[396] = A[129];
    A[229] = 0.0000000000000000000000000;
    A[12] = 0.0000000000000000000000000;
    A[195] = 0.0000000000000000000000000;
    A[272] = A[43];
    A[333] = A[65];
    A[165] = A[108];
    A[56] = 0.0000000000000000000000000;
    A[331] = A[25];
    A[52] = 0.0000000000000000000000000;
    A[126] = A[63];
    A[210] = A[0];
    A[142] = A[47];
    A[353] = A[67];
    A[343] = 0.0000000000000000000000000;
    A[54] = 0.0000000000000000000000000;
    A[376] = A[108];
    A[386] = 0.0000000000000000000000000;
    A[198] = 0.0000000000000000000000000;
    A[53] = 0.0000000000000000000000000;
    A[82] = A[44];
    A[179] = 0.0000000000000000000000000;
    A[348] = 0.0000000000000000000000000;
    A[315] = A[63];
    A[128] = A[108];
    A[263] = 0.0000000000000000000000000;
    A[175] = 0.0000000000000000000000000;
    A[314] = A[65];
    A[298] = A[67];
    A[334] = A[86];
    A[304] = 0.0000000000000000000000000;
    A[112] = 0.0000000000000000000000000;
    A[256] = A[46];
    A[385] = 0.0000000000000000000000000;
    A[155] = 0.0000000000000000000000000;
    A[228] = 0.0000000000000000000000000;
    A[172] = 0.0000000000000000000000000;
    A[336] = A[63];
    A[395] = A[69];
    A[111] = 0.0000000000000000000000000;
    A[160] = A[8];
    A[131] = 0.0000000000000000000000000;
    A[137] = 0.0000000000000000000000000;
    A[134] = 0.0000000000000000000000000;
    A[4] = A[3];
    A[62] = A[43];
    A[349] = 0.0000000000000000000000000;
    A[164] = A[67];
    A[15] = 0.0000000000000000000000000;
    A[393] = A[69];
    A[398] = A[129];
    A[253] = A[43];
    A[180] = 0.0000000000000000000000000;
    A[242] = 0.0000000000000000000000000;
    A[329] = 0.0000000000000000000000000;
    A[320] = 0.0000000000000000000000000;
  }

  void tabulate_tensor(double* const A,
                       const double* const* w,
                       const ufc::cell& c,
                       unsigned int num_quadrature_points,
                       const double* const* quadrature_points,
                       const double* quadrature_weights) const
  {
    assert(0 && "This function is not implemented!");
  }
};

extern "C" ufc::cell_integral* newExcafeCellIntegral_0()
{
  return new ExcafeCellIntegral_0();
}

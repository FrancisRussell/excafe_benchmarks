#include <cassert>
#include <cmath>
#include <ufc.h>

// Common sub-expression elimination pass took 1 minute and 9.64 seconds (wall clock).

class ExcafeCellIntegral_0 : public ufc::cell_integral
{
public:
  void tabulate_tensor(double* const A, const double* const* w, const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;

    const double var_0 = -x[0][1];
    const double var_1 = x[2][1] + var_0;
    const double var_2 = -x[0][0];
    const double var_3 = x[1][0] + var_2;
    const double var_4 = -var_1*var_3*w[0][0]*w[1][3];
    const double var_5 = x[1][1] + var_0;
    const double var_6 = x[2][0] + var_2;
    const double var_7 = -var_5*var_6*w[0][3]*w[1][0];
    const double var_8 = w[0][0]*w[1][3] + w[0][3]*w[1][0];
    const double var_9 = var_3*var_5*var_8;
    const double var_10 = var_4 + var_9 + var_7;
    const double var_11 = var_1*var_1*var_5*var_5*w[0][0]*w[1][0] + var_3*var_3*var_6*var_6*w[0][3]*w[1][3];
    const double var_12 = var_3*w[0][5] + var_1*w[0][1];
    const double var_13 = var_5*w[0][2] + var_6*w[0][4];
    const double var_14 = var_12 + -var_13;
    const double var_15 = -var_3*w[0][3] + var_14;
    const double var_16 = -var_12 + var_13;
    const double var_17 = -var_5*w[0][0] + var_16;
    const double var_18 = var_1*w[1][1] + var_3*w[1][5];
    const double var_19 = var_6*w[1][4] + var_5*w[1][2];
    const double var_20 = var_3*w[0][3];
    const double var_21 = var_17 + var_20;
    const double var_22 = var_5*w[0][0];
    const double var_23 = var_15 + var_22;
    const double var_24 = var_21*var_3*w[1][3] + var_23*var_5*w[1][0];
    const double var_25 = var_15*var_18 + var_17*var_19 + var_24;
    const double var_26 = var_1*w[1][0] + var_19;
    const double var_27 = -var_18 + var_26;
    const double var_28 = var_3*w[1][3] + var_27;
    const double var_29 = var_16*w[1][0];
    const double var_30 = var_28*w[0][0] + var_29;
    const double var_31 = var_26*var_3*w[0][3] + var_1*var_30 + var_18*var_5*w[0][0];
    const double var_32 = var_6*w[1][3] + var_18;
    const double var_33 = -var_19 + var_32;
    const double var_34 = var_14*w[1][3];
    const double var_35 = var_33*w[0][3] + var_34;
    const double var_36 = var_6*w[0][3]*w[1][0];
    const double var_37 = var_36 + var_32*w[0][0];
    const double var_38 = var_35*var_6 + var_19*var_3*w[0][3] + var_37*var_5;
    const double var_39 = var_3*var_3;
    const double var_40 = var_5*var_5;
    const double var_41 = var_39 + var_40;
    const double var_42 = var_38*var_5*var_5 + var_3*var_3*var_31 + var_25*var_41;
    const double var_43 = var_1*var_5*var_5*var_5*w[0][0]*w[1][0] + var_3*var_3*var_3*var_6*w[0][3]*w[1][3];
    const double var_44 = -var_43 + 0.3333333333333333148296163*var_42;
    const double var_45 = var_44 + var_11;
    const double var_46 = var_33*w[0][0] + var_36;
    const double var_47 = var_22 + var_14;
    const double var_48 = var_46 + var_47*w[1][0];
    const double var_49 = var_1*w[0][0]*w[1][3] + var_27*w[0][3];
    const double var_50 = var_20 + var_16;
    const double var_51 = var_49 + var_50*w[1][3];
    const double var_52 = var_1*var_51 + var_48*var_6;
    const double var_53 = var_1*var_3 + -var_5*var_6;
    const double var_54 = var_53;
    const double var_55 = std::abs(var_54);
    const double var_56 = var_53;
    const double var_57 = -var_26;
    const double var_58 = var_32 + var_57;
    const double var_59 = -var_32;
    const double var_60 = var_26 + var_59;
    const double var_61 = var_58*var_6*w[0][3] + var_1*var_60*w[0][0] + var_16*var_26 + var_14*var_32;
    const double var_62 = var_1*var_5 + var_3*var_6;
    const double var_63 = var_18*w[0][3] + var_15*w[1][3];
    const double var_64 = var_3*var_63;
    const double var_65 = var_19*w[0][0] + var_17*w[1][0];
    const double var_66 = var_5*var_65;
    const double var_67 = var_66 + var_64 + var_9;
    const double var_68 = var_18 + var_57;
    const double var_69 = var_1*var_68*w[0][0] + var_17*var_18;
    const double var_70 = var_4 + var_15*var_26;
    const double var_71 = var_69 + var_70;
    const double var_72 = var_1*var_5*w[0][0]*w[1][0];
    const double var_73 = var_17*w[1][3] + var_49;
    const double var_74 = var_6*var_73;
    const double var_75 = var_7 + var_74 + var_72;
    const double var_76 = -var_1*var_5*var_6*w[0][0]*w[1][0] + var_3*var_75;
    const double var_77 = 2.0000000000000000000000000*var_76 + var_3*var_71 + var_5*var_52;
    const double var_78 = var_3*var_6*w[0][3]*w[1][3];
    const double var_79 = var_15*w[1][0] + var_46;
    const double var_80 = var_1*var_79;
    const double var_81 = var_4 + var_80 + var_78;
    const double var_82 = -var_1*var_3*var_6*w[0][3]*w[1][3] + var_5*var_81;
    const double var_83 = var_19 + var_59;
    const double var_84 = var_15*var_19 + var_6*var_83*w[0][3];
    const double var_85 = var_17*var_32 + var_7;
    const double var_86 = var_84 + var_85;
    const double var_87 = 2.0000000000000000000000000*var_82 + var_5*var_86;
    const double var_88 = var_3*var_77 + var_61*var_62 + var_5*var_87 + var_41*var_67;
    const double var_89 = -var_11;
    const double var_90 = 0.3333333333333333148296163*var_88 + var_89 + var_43;
    A[41] = 4.0000000000000000000000000*var_55*var_90/(var_56*var_56*var_56*var_56);
    A[63] = A[41];
    const double var_91 = var_83*w[0][0] + var_29;
    const double var_92 = var_5*var_91;
    A[31] = 0.0000000000000000000000000;
    const double var_93 = var_1*var_58*w[0][0] + var_6*var_60*w[0][3];
    const double var_94 = var_1*var_1;
    const double var_95 = var_6*var_6;
    const double var_96 = var_94 + var_95;
    const double var_97 = var_68*w[0][3] + var_34;
    const double var_98 = var_3*var_97;
    const double var_99 = var_72 + var_4 + var_98;
    const double var_100 = -var_1*var_3*var_5*w[0][0]*w[1][0] + var_6*var_99;
    const double var_101 = var_7 + var_92 + var_78;
    const double var_102 = -var_3*var_5*var_6*w[0][3]*w[1][3] + var_1*var_101;
    const double var_103 = var_3*var_5*var_8*var_96 + var_100*var_6 + var_1*var_102;
    const double var_104 = var_16*var_32 + var_64;
    const double var_105 = var_70 + var_104;
    const double var_106 = var_1*var_105 + var_38*var_5;
    const double var_107 = var_66 + var_14*var_26;
    const double var_108 = var_85 + var_107;
    const double var_109 = var_108*var_6 + var_3*var_31;
    const double var_110 = var_1*var_106 + var_109*var_6 + var_93*var_96 + var_25*var_62 + 2.0000000000000000000000000*var_103;
    const double var_111 = var_3*var_6*var_6*var_6*w[0][3]*w[1][3] + var_1*var_1*var_1*var_5*w[0][0]*w[1][0];
    const double var_112 = var_111 + 0.3333333333333333148296163*var_110 + var_89;
    A[40] = 4.0000000000000000000000000*var_112*var_55/(var_56*var_56*var_56*var_56);
    A[67] = 0.0000000000000000000000000;
    A[98] = 0.0000000000000000000000000;
    A[19] = 0.0000000000000000000000000;
    A[72] = 0.0000000000000000000000000;
    const double var_113 = var_46*var_5 + var_3*var_49 + var_24 + var_61;
    const double var_114 = var_72 + var_78;
    const double var_115 = 0.5000000000000000000000000*var_113 + -var_114;
    A[14] = 0.3333333333333333148296163*var_115*var_55*var_62/(var_56*var_56*var_56*var_56);
    A[94] = 0.0000000000000000000000000;
    A[4] = 2.0000000000000000000000000*var_55*var_90/(var_56*var_56*var_56*var_56);
    A[126] = A[4];
    A[75] = 0.0000000000000000000000000;
    const double var_116 = var_100*var_3 + var_102*var_5 + var_62*var_9;
    A[121] = 0.0000000000000000000000000;
    A[77] = 0.0000000000000000000000000;
    A[133] = 0.0000000000000000000000000;
    A[49] = 0.0000000000000000000000000;
    A[34] = 0.0000000000000000000000000;
    const double var_117 = w[0][0]*w[1][0] + w[0][3]*w[1][3];
    const double var_118 = 2.0000000000000000000000000*var_1*var_117*var_5 + var_107 + var_69;
    const double var_119 = var_84 + var_104;
    const double var_120 = var_118*var_3*var_6 + var_1*var_119*var_5;
    const double var_121 = var_48*var_5*var_6*var_6 + var_61*var_96 + var_1*var_1*var_3*var_51;
    const double var_122 = 0.3333333333333333148296163*var_121 + -var_111;
    const double var_123 = var_74 + var_98;
    const double var_124 = var_80 + var_92;
    const double var_125 = var_1*var_124*var_5 + var_123*var_3*var_6 + var_10*var_62;
    const double var_126 = var_94 + var_40;
    const double var_127 = var_39 + var_95;
    const double var_128 = -var_126*var_3*var_6*w[0][3]*w[1][3] + -var_1*var_127*var_5*w[0][0]*w[1][0];
    const double var_129 = var_125 + 2.0000000000000000000000000*var_11 + var_128;
    const double var_130 = var_44 + 0.3333333333333333148296163*var_120 + var_122 + 0.6666666666666666296592325*var_129;
    A[39] = 4.0000000000000000000000000*var_130*var_55/(var_56*var_56*var_56*var_56);
    A[55] = 0.0000000000000000000000000;
    A[106] = A[4];
    A[130] = A[39];
    const double var_131 = var_43 + var_111;
    A[140] = 0.0000000000000000000000000;
    A[136] = 0.0000000000000000000000000;
    A[118] = A[40];
    A[119] = A[41];
    A[7] = 0.0000000000000000000000000;
    A[51] = A[40];
    A[123] = 0.0000000000000000000000000;
    A[135] = 0.0000000000000000000000000;
    const double var_132 = var_42 + var_121;
    const double var_133 = -2.0000000000000000000000000*var_131 + 0.5000000000000000000000000*var_132 + 3.0000000000000000000000000*var_11 + var_120 + var_128 + 1.5000000000000000000000000*var_125;
    A[43] = 0.0000000000000000000000000;
    const double var_134 = var_93 + var_67 + var_70 + var_85 + 2.0000000000000000000000000*var_114;
    A[15] = 0.6666666666666666296592325*var_134*var_55*var_62/(var_56*var_56*var_56*var_56);
    A[93] = A[15];
    A[132] = 0.0000000000000000000000000;
    A[65] = A[39];
    A[46] = 0.0000000000000000000000000;
    A[28] = A[4];
    const double var_135 = var_62*var_67 + var_3*var_6*var_71 + var_1*var_5*var_86;
    const double var_136 = var_6*var_76 + var_1*var_82;
    const double var_137 = var_11 + var_122;
    const double var_138 = 0.3333333333333333148296163*var_136 + 0.5000000000000000000000000*var_137 + 0.1666666666666666574148081*var_135;
    A[1] = var_138*var_55/(var_56*var_56*var_56*var_56);
    A[90] = A[1];
    A[53] = 1.3333333333333332593184650*var_134*var_55*var_62/(var_56*var_56*var_56*var_56);
    A[142] = A[53];
    A[73] = 0.0000000000000000000000000;
    A[97] = 0.0000000000000000000000000;
    A[18] = 0.0000000000000000000000000;
    A[107] = 0.0000000000000000000000000;
    A[108] = 0.0000000000000000000000000;
    A[69] = 0.0000000000000000000000000;
    A[27] = A[15];
    A[12] = A[1];
    A[38] = A[15];
    A[42] = 0.0000000000000000000000000;
    A[117] = A[39];
    A[5] = 2.0000000000000000000000000*var_112*var_55/(var_56*var_56*var_56*var_56);
    A[139] = A[5];
    A[37] = A[15];
    A[127] = 0.0000000000000000000000000;
    A[17] = A[5];
    A[86] = 0.0000000000000000000000000;
    A[13] = var_115*var_55*var_96/(var_56*var_56*var_56*var_56);
    A[22] = 0.0000000000000000000000000;
    A[110] = 0.0000000000000000000000000;
    A[109] = 0.0000000000000000000000000;
    A[33] = 0.0000000000000000000000000;
    A[95] = A[5];
    A[111] = 0.0000000000000000000000000;
    const double var_139 = var_1*var_105*var_5 + var_62*var_93 + var_108*var_3*var_6;
    const double var_140 = 0.3333333333333333148296163*var_116 + 0.5000000000000000000000000*var_45 + 0.1666666666666666574148081*var_139;
    A[2] = var_140*var_55/(var_56*var_56*var_56*var_56);
    A[70] = 0.0000000000000000000000000;
    A[24] = A[2];
    A[3] = 0.0000000000000000000000000;
    A[60] = A[5];
    A[116] = A[15];
    A[62] = 0.0000000000000000000000000;
    A[25] = A[14];
    A[141] = A[41];
    A[74] = 0.0000000000000000000000000;
    A[52] = A[39];
    A[54] = 0.0000000000000000000000000;
    A[71] = 0.0000000000000000000000000;
    A[21] = 0.0000000000000000000000000;
    A[114] = 0.0000000000000000000000000;
    A[102] = A[2];
    A[44] = 0.0000000000000000000000000;
    A[81] = 0.0000000000000000000000000;
    A[99] = 0.0000000000000000000000000;
    A[143] = A[39];
    A[61] = A[5];
    A[6] = 0.0000000000000000000000000;
    A[26] = var_115*var_41*var_55/(var_56*var_56*var_56*var_56);
    A[82] = A[4];
    A[120] = 0.0000000000000000000000000;
    A[100] = 0.0000000000000000000000000;
    A[47] = 0.0000000000000000000000000;
    A[134] = 0.0000000000000000000000000;
    A[96] = 0.0000000000000000000000000;
    A[124] = 0.0000000000000000000000000;
    A[9] = 0.0000000000000000000000000;
    A[84] = 0.0000000000000000000000000;
    A[113] = 0.0000000000000000000000000;
    A[57] = 0.0000000000000000000000000;
    A[129] = A[40];
    A[87] = 0.0000000000000000000000000;
    A[85] = 0.0000000000000000000000000;
    A[64] = A[53];
    A[16] = 0.0000000000000000000000000;
    A[59] = 0.0000000000000000000000000;
    A[137] = 0.0000000000000000000000000;
    A[92] = A[14];
    A[101] = 0.0000000000000000000000000;
    A[23] = 0.0000000000000000000000000;
    A[83] = A[5];
    A[56] = 0.0000000000000000000000000;
    A[36] = 0.0000000000000000000000000;
    A[11] = 0.0000000000000000000000000;
    A[79] = A[1];
    A[89] = 0.0000000000000000000000000;
    A[8] = 0.0000000000000000000000000;
    A[103] = A[14];
    A[0] = var_133*var_55/(var_56*var_56*var_56*var_56);
    A[48] = A[4];
    A[112] = 0.0000000000000000000000000;
    A[20] = 0.0000000000000000000000000;
    A[104] = A[26];
    A[10] = 0.0000000000000000000000000;
    A[80] = A[2];
    A[32] = 0.0000000000000000000000000;
    A[105] = A[15];
    A[138] = A[5];
    A[29] = 0.0000000000000000000000000;
    A[122] = 0.0000000000000000000000000;
    A[35] = 0.0000000000000000000000000;
    A[76] = 0.0000000000000000000000000;
    A[78] = A[0];
    A[131] = A[53];
    A[30] = 0.0000000000000000000000000;
    A[50] = A[4];
    A[58] = 0.0000000000000000000000000;
    A[91] = A[13];
    A[66] = 0.0000000000000000000000000;
    A[128] = A[4];
    A[125] = 0.0000000000000000000000000;
    A[115] = A[15];
    A[68] = 0.0000000000000000000000000;
    A[88] = 0.0000000000000000000000000;
    A[45] = 0.0000000000000000000000000;
  }

  void tabulate_tensor(double* const A,
                       const double* const* w,
                       const ufc::cell& c,
                       unsigned int num_quadrature_points,
                       const double* const* quadrature_points,
                       const double* quadrature_weights) const
  {
    assert(0 && "This function is not implemented!");
  }
};

extern "C" ufc::cell_integral* newExcafeCellIntegral_0()
{
  return new ExcafeCellIntegral_0();
}

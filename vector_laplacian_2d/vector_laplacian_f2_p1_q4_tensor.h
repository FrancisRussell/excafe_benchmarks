// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'ufc'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'tensor'
//   split:                          False
//   swig_binary:                    'swig'
//   swig_path:                      ''

#ifndef __VECTOR_LAPLACIAN_F2_P1_Q4_TENSOR_H
#define __VECTOR_LAPLACIAN_F2_P1_Q4_TENSOR_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class vector_laplacian_f2_p1_q4_tensor_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  vector_laplacian_f2_p1_q4_tensor_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f2_p1_q4_tensor_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new vector_laplacian_f2_p1_q4_tensor_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class vector_laplacian_f2_p1_q4_tensor_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  vector_laplacian_f2_p1_q4_tensor_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f2_p1_q4_tensor_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 6;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[3][3] = \
      {{0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0},
      {0.0, 0.0, 0.0}};
      
      static const double dmats1[3][3] = \
      {{0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[3][3] = \
      {{1.0, 0.0, 0.0},
      {0.0, 1.0, 0.0},
      {0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 3; t++)
        {
          for (unsigned int u = 0; u < 3; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 3; t++)
          {
            for (unsigned int u = 0; u < 3; u++)
            {
              for (unsigned int tu = 0; tu < 3; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 3; s++)
        {
          for (unsigned int t = 0; t < 3; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[2*num_derivatives];
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f2_p1_q4_tensor_finite_element_0();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f2_p1_q4_tensor_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new vector_laplacian_f2_p1_q4_tensor_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class vector_laplacian_f2_p1_q4_tensor_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  vector_laplacian_f2_p1_q4_tensor_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f2_p1_q4_tensor_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 15; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 15; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.75*x[1][0] + 0.25*x[2][0];
      y[1] = 0.75*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.25*x[1][0] + 0.75*x[2][0];
      y[1] = 0.25*x[1][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[2][0];
      y[1] = 0.75*x[0][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[2][0];
      y[1] = 0.25*x[0][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[1][0];
      y[1] = 0.75*x[0][1] + 0.25*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[1][0];
      y[1] = 0.25*x[0][1] + 0.75*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
      y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
      y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.75*x[1][0] + 0.25*x[2][0];
    y[1] = 0.75*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.25*x[1][0] + 0.75*x[2][0];
    y[1] = 0.25*x[1][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[2][0];
    y[1] = 0.75*x[0][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[2][0];
    y[1] = 0.25*x[0][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[1][0];
    y[1] = 0.75*x[0][1] + 0.25*x[1][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[1][0];
    y[1] = 0.25*x[0][1] + 0.75*x[1][1];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new vector_laplacian_f2_p1_q4_tensor_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class vector_laplacian_f2_p1_q4_tensor_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  vector_laplacian_f2_p1_q4_tensor_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f2_p1_q4_tensor_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Cell('triangle', Space(2)), 4, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 30;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 30; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 15:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 16:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 17:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 18:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 19:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 20:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 21:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 22:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 23:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 24:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 25:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 26:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 27:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 28:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 29:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[2*num_derivatives];
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 30; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.75*x[1][0] + 0.25*x[2][0];
      y[1] = 0.75*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.25*x[1][0] + 0.75*x[2][0];
      y[1] = 0.25*x[1][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[2][0];
      y[1] = 0.75*x[0][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[2][0];
      y[1] = 0.25*x[0][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[1][0];
      y[1] = 0.75*x[0][1] + 0.25*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[1][0];
      y[1] = 0.25*x[0][1] + 0.75*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
      y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
      y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 16:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 17:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 18:
      {
        y[0] = 0.75*x[1][0] + 0.25*x[2][0];
      y[1] = 0.75*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 19:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 20:
      {
        y[0] = 0.25*x[1][0] + 0.75*x[2][0];
      y[1] = 0.25*x[1][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 21:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[2][0];
      y[1] = 0.75*x[0][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 22:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 23:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[2][0];
      y[1] = 0.25*x[0][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 24:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[1][0];
      y[1] = 0.75*x[0][1] + 0.25*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 25:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 26:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[1][0];
      y[1] = 0.25*x[0][1] + 0.75*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 27:
      {
        y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
      y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 28:
      {
        y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
      y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 29:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.75*x[1][0] + 0.25*x[2][0];
    y[1] = 0.75*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.25*x[1][0] + 0.75*x[2][0];
    y[1] = 0.25*x[1][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[2][0];
    y[1] = 0.75*x[0][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[2][0];
    y[1] = 0.25*x[0][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[1][0];
    y[1] = 0.75*x[0][1] + 0.25*x[1][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[1][0];
    y[1] = 0.25*x[0][1] + 0.75*x[1][1];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[16] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[17] = vals[1];
    y[0] = 0.75*x[1][0] + 0.25*x[2][0];
    y[1] = 0.75*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[18] = vals[1];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[19] = vals[1];
    y[0] = 0.25*x[1][0] + 0.75*x[2][0];
    y[1] = 0.25*x[1][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[20] = vals[1];
    y[0] = 0.75*x[0][0] + 0.25*x[2][0];
    y[1] = 0.75*x[0][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[21] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[22] = vals[1];
    y[0] = 0.25*x[0][0] + 0.75*x[2][0];
    y[1] = 0.25*x[0][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[23] = vals[1];
    y[0] = 0.75*x[0][0] + 0.25*x[1][0];
    y[1] = 0.75*x[0][1] + 0.25*x[1][1];
    f.evaluate(vals, y, c);
    values[24] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[25] = vals[1];
    y[0] = 0.25*x[0][0] + 0.75*x[1][0];
    y[1] = 0.25*x[0][1] + 0.75*x[1][1];
    f.evaluate(vals, y, c);
    values[26] = vals[1];
    y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[15];
    vertex_values[3] = dof_values[16];
    vertex_values[5] = dof_values[17];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f2_p1_q4_tensor_finite_element_2();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f2_p1_q4_tensor_finite_element_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new vector_laplacian_f2_p1_q4_tensor_finite_element_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class vector_laplacian_f2_p1_q4_tensor_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  vector_laplacian_f2_p1_q4_tensor_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~vector_laplacian_f2_p1_q4_tensor_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 3;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new vector_laplacian_f2_p1_q4_tensor_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class vector_laplacian_f2_p1_q4_tensor_dofmap_1: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  vector_laplacian_f2_p1_q4_tensor_dofmap_1() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~vector_laplacian_f2_p1_q4_tensor_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = 2*m.num_entities[0];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 6;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 6;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + c.entity_indices[0][0];
    dofs[4] = offset + c.entity_indices[0][1];
    dofs[5] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = x[0][0];
    coordinates[3][1] = x[0][1];
    coordinates[4][0] = x[1][0];
    coordinates[4][1] = x[1][1];
    coordinates[5][0] = x[2][0];
    coordinates[5][1] = x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f2_p1_q4_tensor_dofmap_0();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f2_p1_q4_tensor_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new vector_laplacian_f2_p1_q4_tensor_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class vector_laplacian_f2_p1_q4_tensor_dofmap_2: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  vector_laplacian_f2_p1_q4_tensor_dofmap_2() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~vector_laplacian_f2_p1_q4_tensor_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 15;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 5;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 3;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset += 3*m.num_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
    offset += 3*m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
          break;
        }
      case 1:
        {
          dofs[0] = 6;
        dofs[1] = 7;
        dofs[2] = 8;
          break;
        }
      case 2:
        {
          dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 12;
      dofs[1] = 13;
      dofs[2] = 14;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[6][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[8][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[8][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[9][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[9][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[11][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[11][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[12][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[12][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[13][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[13][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[14][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[14][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new vector_laplacian_f2_p1_q4_tensor_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class vector_laplacian_f2_p1_q4_tensor_dofmap_3: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  vector_laplacian_f2_p1_q4_tensor_dofmap_3() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~vector_laplacian_f2_p1_q4_tensor_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Cell('triangle', Space(2)), 4, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = 2*m.num_entities[0] + 6*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 30;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 30;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 10;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 6;
        break;
      }
    case 2:
      {
        return 6;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset += 3*m.num_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
    offset += 3*m.num_entities[2];
    dofs[15] = offset + c.entity_indices[0][0];
    dofs[16] = offset + c.entity_indices[0][1];
    dofs[17] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[18] = offset + 3*c.entity_indices[1][0];
    dofs[19] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[20] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[21] = offset + 3*c.entity_indices[1][1];
    dofs[22] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[23] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[24] = offset + 3*c.entity_indices[1][2];
    dofs[25] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[26] = offset + 3*c.entity_indices[1][2] + 2;
    offset += 3*m.num_entities[1];
    dofs[27] = offset + 3*c.entity_indices[2][0];
    dofs[28] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[29] = offset + 3*c.entity_indices[2][0] + 2;
    offset += 3*m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 16;
      dofs[6] = 17;
      dofs[7] = 18;
      dofs[8] = 19;
      dofs[9] = 20;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 15;
      dofs[6] = 17;
      dofs[7] = 21;
      dofs[8] = 22;
      dofs[9] = 23;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 15;
      dofs[6] = 16;
      dofs[7] = 24;
      dofs[8] = 25;
      dofs[9] = 26;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 15;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 16;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 17;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 18;
        dofs[4] = 19;
        dofs[5] = 20;
          break;
        }
      case 1:
        {
          dofs[0] = 6;
        dofs[1] = 7;
        dofs[2] = 8;
        dofs[3] = 21;
        dofs[4] = 22;
        dofs[5] = 23;
          break;
        }
      case 2:
        {
          dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
        dofs[3] = 24;
        dofs[4] = 25;
        dofs[5] = 26;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 12;
      dofs[1] = 13;
      dofs[2] = 14;
      dofs[3] = 27;
      dofs[4] = 28;
      dofs[5] = 29;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[6][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[8][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[8][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[9][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[9][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[11][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[11][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[12][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[12][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[13][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[13][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[14][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[14][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[15][0] = x[0][0];
    coordinates[15][1] = x[0][1];
    coordinates[16][0] = x[1][0];
    coordinates[16][1] = x[1][1];
    coordinates[17][0] = x[2][0];
    coordinates[17][1] = x[2][1];
    coordinates[18][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[18][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[19][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[19][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[20][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[20][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[21][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[21][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[22][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[22][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[23][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[23][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[24][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[24][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[25][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[26][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[27][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[27][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[28][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[28][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[29][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f2_p1_q4_tensor_dofmap_2();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f2_p1_q4_tensor_dofmap_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new vector_laplacian_f2_p1_q4_tensor_dofmap_3();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class vector_laplacian_f2_p1_q4_tensor_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  vector_laplacian_f2_p1_q4_tensor_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f2_p1_q4_tensor_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      11
    // Number of operations (multiply-add pairs) for geometry tensor:    1024
    // Number of operations (multiply-add pairs) for tensor contraction: 14524
    // Total number of operations (multiply-add pairs):                  15559
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0_0_0_0_0_0_0 = det*(w[0][0]*w[1][0]*K_00*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_0_0_0_1 = det*(w[0][0]*w[1][0]*K_00*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_0_1_0_0 = det*(w[0][0]*w[1][1]*K_00*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_0_2_0_1 = det*(w[0][0]*w[1][2]*K_00*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_0_3_1_0 = det*(w[0][0]*w[1][3]*K_00*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_0_3_1_1 = det*(w[0][0]*w[1][3]*K_00*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_0_4_1_0 = det*(w[0][0]*w[1][4]*K_00*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_0_5_1_1 = det*(w[0][0]*w[1][5]*K_00*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_1_0_0_0 = det*(w[0][0]*w[1][0]*K_10*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_1_0_0_1 = det*(w[0][0]*w[1][0]*K_10*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_1_1_0_0 = det*(w[0][0]*w[1][1]*K_10*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_1_2_0_1 = det*(w[0][0]*w[1][2]*K_10*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_1_3_1_0 = det*(w[0][0]*w[1][3]*K_10*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_1_3_1_1 = det*(w[0][0]*w[1][3]*K_10*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_1_4_1_0 = det*(w[0][0]*w[1][4]*K_10*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_1_5_1_1 = det*(w[0][0]*w[1][5]*K_10*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_1_0_0_0_0_0 = det*(w[0][1]*w[1][0]*K_00*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_1_0_0_0_0_1 = det*(w[0][1]*w[1][0]*K_00*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_1_0_0_1_0_0 = det*(w[0][1]*w[1][1]*K_00*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_1_0_0_2_0_1 = det*(w[0][1]*w[1][2]*K_00*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_1_0_0_3_1_0 = det*(w[0][1]*w[1][3]*K_00*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_1_0_0_3_1_1 = det*(w[0][1]*w[1][3]*K_00*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_1_0_0_4_1_0 = det*(w[0][1]*w[1][4]*K_00*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_1_0_0_5_1_1 = det*(w[0][1]*w[1][5]*K_00*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_2_0_1_0_0_0 = det*(w[0][2]*w[1][0]*K_10*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_2_0_1_0_0_1 = det*(w[0][2]*w[1][0]*K_10*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_2_0_1_1_0_0 = det*(w[0][2]*w[1][1]*K_10*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_2_0_1_2_0_1 = det*(w[0][2]*w[1][2]*K_10*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_2_0_1_3_1_0 = det*(w[0][2]*w[1][3]*K_10*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_2_0_1_3_1_1 = det*(w[0][2]*w[1][3]*K_10*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_2_0_1_4_1_0 = det*(w[0][2]*w[1][4]*K_10*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_2_0_1_5_1_1 = det*(w[0][2]*w[1][5]*K_10*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_0_0_0_0 = det*(w[0][3]*w[1][0]*K_01*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_0_0_0_1 = det*(w[0][3]*w[1][0]*K_01*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_0_1_0_0 = det*(w[0][3]*w[1][1]*K_01*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_0_2_0_1 = det*(w[0][3]*w[1][2]*K_01*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_0_3_1_0 = det*(w[0][3]*w[1][3]*K_01*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_0_3_1_1 = det*(w[0][3]*w[1][3]*K_01*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_0_4_1_0 = det*(w[0][3]*w[1][4]*K_01*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_0_5_1_1 = det*(w[0][3]*w[1][5]*K_01*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_1_0_0_0 = det*(w[0][3]*w[1][0]*K_11*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_1_0_0_1 = det*(w[0][3]*w[1][0]*K_11*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_1_1_0_0 = det*(w[0][3]*w[1][1]*K_11*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_1_2_0_1 = det*(w[0][3]*w[1][2]*K_11*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_1_3_1_0 = det*(w[0][3]*w[1][3]*K_11*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_1_3_1_1 = det*(w[0][3]*w[1][3]*K_11*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_1_4_1_0 = det*(w[0][3]*w[1][4]*K_11*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_1_1_5_1_1 = det*(w[0][3]*w[1][5]*K_11*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_4_1_0_0_0_0 = det*(w[0][4]*w[1][0]*K_01*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_4_1_0_0_0_1 = det*(w[0][4]*w[1][0]*K_01*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_4_1_0_1_0_0 = det*(w[0][4]*w[1][1]*K_01*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_4_1_0_2_0_1 = det*(w[0][4]*w[1][2]*K_01*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_4_1_0_3_1_0 = det*(w[0][4]*w[1][3]*K_01*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_4_1_0_3_1_1 = det*(w[0][4]*w[1][3]*K_01*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_4_1_0_4_1_0 = det*(w[0][4]*w[1][4]*K_01*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_4_1_0_5_1_1 = det*(w[0][4]*w[1][5]*K_01*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_5_1_1_0_0_0 = det*(w[0][5]*w[1][0]*K_11*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_5_1_1_0_0_1 = det*(w[0][5]*w[1][0]*K_11*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_5_1_1_1_0_0 = det*(w[0][5]*w[1][1]*K_11*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_5_1_1_2_0_1 = det*(w[0][5]*w[1][2]*K_11*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_5_1_1_3_1_0 = det*(w[0][5]*w[1][3]*K_11*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_5_1_1_3_1_1 = det*(w[0][5]*w[1][3]*K_11*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_5_1_1_4_1_0 = det*(w[0][5]*w[1][4]*K_11*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_5_1_1_5_1_1 = det*(w[0][5]*w[1][5]*K_11*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_1_0_0_0_0_0_0 = det*(w[0][0]*w[1][0]*K_00*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_0_0_0_1 = det*(w[0][0]*w[1][0]*K_00*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_0_1_0_0 = det*(w[0][0]*w[1][1]*K_00*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_0_2_0_1 = det*(w[0][0]*w[1][2]*K_00*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_0_3_1_0 = det*(w[0][0]*w[1][3]*K_00*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_0_3_1_1 = det*(w[0][0]*w[1][3]*K_00*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_0_4_1_0 = det*(w[0][0]*w[1][4]*K_00*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_0_5_1_1 = det*(w[0][0]*w[1][5]*K_00*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_1_0_0_0 = det*(w[0][0]*w[1][0]*K_10*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_1_0_0_1 = det*(w[0][0]*w[1][0]*K_10*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_1_1_0_0 = det*(w[0][0]*w[1][1]*K_10*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_1_2_0_1 = det*(w[0][0]*w[1][2]*K_10*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_1_3_1_0 = det*(w[0][0]*w[1][3]*K_10*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_1_3_1_1 = det*(w[0][0]*w[1][3]*K_10*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_1_4_1_0 = det*(w[0][0]*w[1][4]*K_10*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_1_5_1_1 = det*(w[0][0]*w[1][5]*K_10*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_1_0_0_0_0_0 = det*(w[0][1]*w[1][0]*K_00*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_1_0_0_0_0_1 = det*(w[0][1]*w[1][0]*K_00*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_1_0_0_1_0_0 = det*(w[0][1]*w[1][1]*K_00*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_1_0_0_2_0_1 = det*(w[0][1]*w[1][2]*K_00*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_1_0_0_3_1_0 = det*(w[0][1]*w[1][3]*K_00*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_1_0_0_3_1_1 = det*(w[0][1]*w[1][3]*K_00*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_1_0_0_4_1_0 = det*(w[0][1]*w[1][4]*K_00*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_1_0_0_5_1_1 = det*(w[0][1]*w[1][5]*K_00*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_2_0_1_0_0_0 = det*(w[0][2]*w[1][0]*K_10*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_2_0_1_0_0_1 = det*(w[0][2]*w[1][0]*K_10*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_2_0_1_1_0_0 = det*(w[0][2]*w[1][1]*K_10*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_2_0_1_2_0_1 = det*(w[0][2]*w[1][2]*K_10*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_2_0_1_3_1_0 = det*(w[0][2]*w[1][3]*K_10*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_2_0_1_3_1_1 = det*(w[0][2]*w[1][3]*K_10*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_2_0_1_4_1_0 = det*(w[0][2]*w[1][4]*K_10*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_2_0_1_5_1_1 = det*(w[0][2]*w[1][5]*K_10*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_0_0_0_0 = det*(w[0][3]*w[1][0]*K_01*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_0_0_0_1 = det*(w[0][3]*w[1][0]*K_01*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_0_1_0_0 = det*(w[0][3]*w[1][1]*K_01*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_0_2_0_1 = det*(w[0][3]*w[1][2]*K_01*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_0_3_1_0 = det*(w[0][3]*w[1][3]*K_01*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_0_3_1_1 = det*(w[0][3]*w[1][3]*K_01*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_0_4_1_0 = det*(w[0][3]*w[1][4]*K_01*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_0_5_1_1 = det*(w[0][3]*w[1][5]*K_01*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_1_0_0_0 = det*(w[0][3]*w[1][0]*K_11*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_1_0_0_1 = det*(w[0][3]*w[1][0]*K_11*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_1_1_0_0 = det*(w[0][3]*w[1][1]*K_11*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_1_2_0_1 = det*(w[0][3]*w[1][2]*K_11*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_1_3_1_0 = det*(w[0][3]*w[1][3]*K_11*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_1_3_1_1 = det*(w[0][3]*w[1][3]*K_11*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_1_4_1_0 = det*(w[0][3]*w[1][4]*K_11*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_1_1_5_1_1 = det*(w[0][3]*w[1][5]*K_11*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_4_1_0_0_0_0 = det*(w[0][4]*w[1][0]*K_01*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_4_1_0_0_0_1 = det*(w[0][4]*w[1][0]*K_01*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_4_1_0_1_0_0 = det*(w[0][4]*w[1][1]*K_01*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_4_1_0_2_0_1 = det*(w[0][4]*w[1][2]*K_01*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_4_1_0_3_1_0 = det*(w[0][4]*w[1][3]*K_01*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_4_1_0_3_1_1 = det*(w[0][4]*w[1][3]*K_01*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_4_1_0_4_1_0 = det*(w[0][4]*w[1][4]*K_01*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_4_1_0_5_1_1 = det*(w[0][4]*w[1][5]*K_01*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_5_1_1_0_0_0 = det*(w[0][5]*w[1][0]*K_11*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_5_1_1_0_0_1 = det*(w[0][5]*w[1][0]*K_11*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_5_1_1_1_0_0 = det*(w[0][5]*w[1][1]*K_11*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_5_1_1_2_0_1 = det*(w[0][5]*w[1][2]*K_11*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_5_1_1_3_1_0 = det*(w[0][5]*w[1][3]*K_11*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_5_1_1_3_1_1 = det*(w[0][5]*w[1][3]*K_11*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_5_1_1_4_1_0 = det*(w[0][5]*w[1][4]*K_11*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_5_1_1_5_1_1 = det*(w[0][5]*w[1][5]*K_11*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_1_0_0_0_0_0_0_0 = det*(w[0][0]*w[1][0]*K_00*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_0_0_0_1 = det*(w[0][0]*w[1][0]*K_00*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_0_1_0_0 = det*(w[0][0]*w[1][1]*K_00*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_0_2_0_1 = det*(w[0][0]*w[1][2]*K_00*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_0_3_1_0 = det*(w[0][0]*w[1][3]*K_00*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_0_3_1_1 = det*(w[0][0]*w[1][3]*K_00*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_0_4_1_0 = det*(w[0][0]*w[1][4]*K_00*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_0_5_1_1 = det*(w[0][0]*w[1][5]*K_00*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_1_0_0_0 = det*(w[0][0]*w[1][0]*K_10*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_1_0_0_1 = det*(w[0][0]*w[1][0]*K_10*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_1_1_0_0 = det*(w[0][0]*w[1][1]*K_10*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_1_2_0_1 = det*(w[0][0]*w[1][2]*K_10*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_1_3_1_0 = det*(w[0][0]*w[1][3]*K_10*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_1_3_1_1 = det*(w[0][0]*w[1][3]*K_10*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_1_4_1_0 = det*(w[0][0]*w[1][4]*K_10*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_1_5_1_1 = det*(w[0][0]*w[1][5]*K_10*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_1_0_0_0_0_0 = det*(w[0][1]*w[1][0]*K_00*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_1_0_0_0_0_1 = det*(w[0][1]*w[1][0]*K_00*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_1_0_0_1_0_0 = det*(w[0][1]*w[1][1]*K_00*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_1_0_0_2_0_1 = det*(w[0][1]*w[1][2]*K_00*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_1_0_0_3_1_0 = det*(w[0][1]*w[1][3]*K_00*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_1_0_0_3_1_1 = det*(w[0][1]*w[1][3]*K_00*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_1_0_0_4_1_0 = det*(w[0][1]*w[1][4]*K_00*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_1_0_0_5_1_1 = det*(w[0][1]*w[1][5]*K_00*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_2_0_1_0_0_0 = det*(w[0][2]*w[1][0]*K_10*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_2_0_1_0_0_1 = det*(w[0][2]*w[1][0]*K_10*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_2_0_1_1_0_0 = det*(w[0][2]*w[1][1]*K_10*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_2_0_1_2_0_1 = det*(w[0][2]*w[1][2]*K_10*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_2_0_1_3_1_0 = det*(w[0][2]*w[1][3]*K_10*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_2_0_1_3_1_1 = det*(w[0][2]*w[1][3]*K_10*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_2_0_1_4_1_0 = det*(w[0][2]*w[1][4]*K_10*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_2_0_1_5_1_1 = det*(w[0][2]*w[1][5]*K_10*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_0_0_0_0 = det*(w[0][3]*w[1][0]*K_01*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_0_0_0_1 = det*(w[0][3]*w[1][0]*K_01*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_0_1_0_0 = det*(w[0][3]*w[1][1]*K_01*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_0_2_0_1 = det*(w[0][3]*w[1][2]*K_01*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_0_3_1_0 = det*(w[0][3]*w[1][3]*K_01*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_0_3_1_1 = det*(w[0][3]*w[1][3]*K_01*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_0_4_1_0 = det*(w[0][3]*w[1][4]*K_01*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_0_5_1_1 = det*(w[0][3]*w[1][5]*K_01*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_1_0_0_0 = det*(w[0][3]*w[1][0]*K_11*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_1_0_0_1 = det*(w[0][3]*w[1][0]*K_11*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_1_1_0_0 = det*(w[0][3]*w[1][1]*K_11*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_1_2_0_1 = det*(w[0][3]*w[1][2]*K_11*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_1_3_1_0 = det*(w[0][3]*w[1][3]*K_11*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_1_3_1_1 = det*(w[0][3]*w[1][3]*K_11*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_1_4_1_0 = det*(w[0][3]*w[1][4]*K_11*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_1_1_5_1_1 = det*(w[0][3]*w[1][5]*K_11*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_4_1_0_0_0_0 = det*(w[0][4]*w[1][0]*K_01*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_4_1_0_0_0_1 = det*(w[0][4]*w[1][0]*K_01*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_4_1_0_1_0_0 = det*(w[0][4]*w[1][1]*K_01*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_4_1_0_2_0_1 = det*(w[0][4]*w[1][2]*K_01*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_4_1_0_3_1_0 = det*(w[0][4]*w[1][3]*K_01*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_4_1_0_3_1_1 = det*(w[0][4]*w[1][3]*K_01*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_4_1_0_4_1_0 = det*(w[0][4]*w[1][4]*K_01*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_4_1_0_5_1_1 = det*(w[0][4]*w[1][5]*K_01*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_5_1_1_0_0_0 = det*(w[0][5]*w[1][0]*K_11*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_5_1_1_0_0_1 = det*(w[0][5]*w[1][0]*K_11*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_5_1_1_1_0_0 = det*(w[0][5]*w[1][1]*K_11*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_5_1_1_2_0_1 = det*(w[0][5]*w[1][2]*K_11*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_5_1_1_3_1_0 = det*(w[0][5]*w[1][3]*K_11*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_5_1_1_3_1_1 = det*(w[0][5]*w[1][3]*K_11*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_5_1_1_4_1_0 = det*(w[0][5]*w[1][4]*K_11*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_5_1_1_5_1_1 = det*(w[0][5]*w[1][5]*K_11*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_1_0_0_0_0_0_0 = det*(w[0][0]*w[1][0]*K_00*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_0_0_0_1 = det*(w[0][0]*w[1][0]*K_00*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_0_1_0_0 = det*(w[0][0]*w[1][1]*K_00*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_0_2_0_1 = det*(w[0][0]*w[1][2]*K_00*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_0_3_1_0 = det*(w[0][0]*w[1][3]*K_00*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_0_3_1_1 = det*(w[0][0]*w[1][3]*K_00*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_0_4_1_0 = det*(w[0][0]*w[1][4]*K_00*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_0_5_1_1 = det*(w[0][0]*w[1][5]*K_00*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_1_0_0_0 = det*(w[0][0]*w[1][0]*K_10*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_1_0_0_1 = det*(w[0][0]*w[1][0]*K_10*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_1_1_0_0 = det*(w[0][0]*w[1][1]*K_10*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_1_2_0_1 = det*(w[0][0]*w[1][2]*K_10*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_1_3_1_0 = det*(w[0][0]*w[1][3]*K_10*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_1_3_1_1 = det*(w[0][0]*w[1][3]*K_10*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_1_4_1_0 = det*(w[0][0]*w[1][4]*K_10*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_1_5_1_1 = det*(w[0][0]*w[1][5]*K_10*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_1_0_0_0_0_0 = det*(w[0][1]*w[1][0]*K_00*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_1_0_0_0_0_1 = det*(w[0][1]*w[1][0]*K_00*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_1_0_0_1_0_0 = det*(w[0][1]*w[1][1]*K_00*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_1_0_0_2_0_1 = det*(w[0][1]*w[1][2]*K_00*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_1_0_0_3_1_0 = det*(w[0][1]*w[1][3]*K_00*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_1_0_0_3_1_1 = det*(w[0][1]*w[1][3]*K_00*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_1_0_0_4_1_0 = det*(w[0][1]*w[1][4]*K_00*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_1_0_0_5_1_1 = det*(w[0][1]*w[1][5]*K_00*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_2_0_1_0_0_0 = det*(w[0][2]*w[1][0]*K_10*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_2_0_1_0_0_1 = det*(w[0][2]*w[1][0]*K_10*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_2_0_1_1_0_0 = det*(w[0][2]*w[1][1]*K_10*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_2_0_1_2_0_1 = det*(w[0][2]*w[1][2]*K_10*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_2_0_1_3_1_0 = det*(w[0][2]*w[1][3]*K_10*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_2_0_1_3_1_1 = det*(w[0][2]*w[1][3]*K_10*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_2_0_1_4_1_0 = det*(w[0][2]*w[1][4]*K_10*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_2_0_1_5_1_1 = det*(w[0][2]*w[1][5]*K_10*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_0_0_0_0 = det*(w[0][3]*w[1][0]*K_01*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_0_0_0_1 = det*(w[0][3]*w[1][0]*K_01*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_0_1_0_0 = det*(w[0][3]*w[1][1]*K_01*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_0_2_0_1 = det*(w[0][3]*w[1][2]*K_01*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_0_3_1_0 = det*(w[0][3]*w[1][3]*K_01*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_0_3_1_1 = det*(w[0][3]*w[1][3]*K_01*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_0_4_1_0 = det*(w[0][3]*w[1][4]*K_01*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_0_5_1_1 = det*(w[0][3]*w[1][5]*K_01*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_1_0_0_0 = det*(w[0][3]*w[1][0]*K_11*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_1_0_0_1 = det*(w[0][3]*w[1][0]*K_11*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_1_1_0_0 = det*(w[0][3]*w[1][1]*K_11*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_1_2_0_1 = det*(w[0][3]*w[1][2]*K_11*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_1_3_1_0 = det*(w[0][3]*w[1][3]*K_11*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_1_3_1_1 = det*(w[0][3]*w[1][3]*K_11*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_1_4_1_0 = det*(w[0][3]*w[1][4]*K_11*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_1_1_5_1_1 = det*(w[0][3]*w[1][5]*K_11*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_4_1_0_0_0_0 = det*(w[0][4]*w[1][0]*K_01*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_4_1_0_0_0_1 = det*(w[0][4]*w[1][0]*K_01*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_4_1_0_1_0_0 = det*(w[0][4]*w[1][1]*K_01*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_4_1_0_2_0_1 = det*(w[0][4]*w[1][2]*K_01*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_4_1_0_3_1_0 = det*(w[0][4]*w[1][3]*K_01*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_4_1_0_3_1_1 = det*(w[0][4]*w[1][3]*K_01*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_4_1_0_4_1_0 = det*(w[0][4]*w[1][4]*K_01*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_4_1_0_5_1_1 = det*(w[0][4]*w[1][5]*K_01*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_5_1_1_0_0_0 = det*(w[0][5]*w[1][0]*K_11*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_5_1_1_0_0_1 = det*(w[0][5]*w[1][0]*K_11*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_5_1_1_1_0_0 = det*(w[0][5]*w[1][1]*K_11*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_5_1_1_2_0_1 = det*(w[0][5]*w[1][2]*K_11*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_5_1_1_3_1_0 = det*(w[0][5]*w[1][3]*K_11*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_5_1_1_3_1_1 = det*(w[0][5]*w[1][3]*K_11*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_5_1_1_4_1_0 = det*(w[0][5]*w[1][4]*K_11*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_5_1_1_5_1_1 = det*(w[0][5]*w[1][5]*K_11*K_11*((K_10*K_10 + K_11*K_11)));
    
    // Compute element tensor
    A[213] = -0.152380952380962*G0_0_0_0_0_0_0_0_0 - 0.152380952380962*G0_0_0_0_0_0_0_0_1 + 0.152380952380962*G0_0_0_0_0_0_1_0_0 + 0.152380952380962*G0_0_0_0_0_0_2_0_1 - 0.152380952380962*G0_0_0_0_0_0_3_1_0 - 0.152380952380962*G0_0_0_0_0_0_3_1_1 + 0.152380952380962*G0_0_0_0_0_0_4_1_0 + 0.152380952380962*G0_0_0_0_0_0_5_1_1 - 0.152380952380962*G0_0_0_0_0_1_0_0_0 - 0.152380952380962*G0_0_0_0_0_1_0_0_1 + 0.152380952380962*G0_0_0_0_0_1_1_0_0 + 0.152380952380962*G0_0_0_0_0_1_2_0_1 - 0.152380952380962*G0_0_0_0_0_1_3_1_0 - 0.152380952380962*G0_0_0_0_0_1_3_1_1 + 0.152380952380962*G0_0_0_0_0_1_4_1_0 + 0.152380952380962*G0_0_0_0_0_1_5_1_1 + 0.152380952380962*G0_0_0_1_0_0_0_0_0 + 0.152380952380962*G0_0_0_1_0_0_0_0_1 - 0.152380952380962*G0_0_0_1_0_0_1_0_0 - 0.152380952380962*G0_0_0_1_0_0_2_0_1 + 0.152380952380962*G0_0_0_1_0_0_3_1_0 + 0.152380952380962*G0_0_0_1_0_0_3_1_1 - 0.152380952380962*G0_0_0_1_0_0_4_1_0 - 0.152380952380962*G0_0_0_1_0_0_5_1_1 + 0.152380952380962*G0_0_0_2_0_1_0_0_0 + 0.152380952380962*G0_0_0_2_0_1_0_0_1 - 0.152380952380962*G0_0_0_2_0_1_1_0_0 - 0.152380952380962*G0_0_0_2_0_1_2_0_1 + 0.152380952380962*G0_0_0_2_0_1_3_1_0 + 0.152380952380962*G0_0_0_2_0_1_3_1_1 - 0.152380952380962*G0_0_0_2_0_1_4_1_0 - 0.152380952380962*G0_0_0_2_0_1_5_1_1 - 0.152380952380962*G0_0_0_3_1_0_0_0_0 - 0.152380952380962*G0_0_0_3_1_0_0_0_1 + 0.152380952380962*G0_0_0_3_1_0_1_0_0 + 0.152380952380962*G0_0_0_3_1_0_2_0_1 - 0.152380952380962*G0_0_0_3_1_0_3_1_0 - 0.152380952380962*G0_0_0_3_1_0_3_1_1 + 0.152380952380962*G0_0_0_3_1_0_4_1_0 + 0.152380952380962*G0_0_0_3_1_0_5_1_1 - 0.152380952380962*G0_0_0_3_1_1_0_0_0 - 0.152380952380962*G0_0_0_3_1_1_0_0_1 + 0.152380952380962*G0_0_0_3_1_1_1_0_0 + 0.152380952380962*G0_0_0_3_1_1_2_0_1 - 0.152380952380962*G0_0_0_3_1_1_3_1_0 - 0.152380952380962*G0_0_0_3_1_1_3_1_1 + 0.152380952380962*G0_0_0_3_1_1_4_1_0 + 0.152380952380962*G0_0_0_3_1_1_5_1_1 + 0.152380952380962*G0_0_0_4_1_0_0_0_0 + 0.152380952380962*G0_0_0_4_1_0_0_0_1 - 0.152380952380962*G0_0_0_4_1_0_1_0_0 - 0.152380952380962*G0_0_0_4_1_0_2_0_1 + 0.152380952380962*G0_0_0_4_1_0_3_1_0 + 0.152380952380962*G0_0_0_4_1_0_3_1_1 - 0.152380952380962*G0_0_0_4_1_0_4_1_0 - 0.152380952380962*G0_0_0_4_1_0_5_1_1 + 0.152380952380962*G0_0_0_5_1_1_0_0_0 + 0.152380952380962*G0_0_0_5_1_1_0_0_1 - 0.152380952380962*G0_0_0_5_1_1_1_0_0 - 0.152380952380962*G0_0_0_5_1_1_2_0_1 + 0.152380952380962*G0_0_0_5_1_1_3_1_0 + 0.152380952380962*G0_0_0_5_1_1_3_1_1 - 0.152380952380962*G0_0_0_5_1_1_4_1_0 - 0.152380952380962*G0_0_0_5_1_1_5_1_1 - 0.042328042328044*G0_0_1_0_0_0_0_0_0 - 0.042328042328044*G0_0_1_0_0_0_0_0_1 + 0.042328042328044*G0_0_1_0_0_0_1_0_0 + 0.042328042328044*G0_0_1_0_0_0_2_0_1 - 0.042328042328044*G0_0_1_0_0_0_3_1_0 - 0.042328042328044*G0_0_1_0_0_0_3_1_1 + 0.042328042328044*G0_0_1_0_0_0_4_1_0 + 0.042328042328044*G0_0_1_0_0_0_5_1_1 - 0.042328042328044*G0_0_1_0_0_1_0_0_0 - 0.042328042328044*G0_0_1_0_0_1_0_0_1 + 0.042328042328044*G0_0_1_0_0_1_1_0_0 + 0.042328042328044*G0_0_1_0_0_1_2_0_1 - 0.042328042328044*G0_0_1_0_0_1_3_1_0 - 0.042328042328044*G0_0_1_0_0_1_3_1_1 + 0.042328042328044*G0_0_1_0_0_1_4_1_0 + 0.042328042328044*G0_0_1_0_0_1_5_1_1 + 0.042328042328044*G0_0_1_1_0_0_0_0_0 + 0.042328042328044*G0_0_1_1_0_0_0_0_1 - 0.042328042328044*G0_0_1_1_0_0_1_0_0 - 0.042328042328044*G0_0_1_1_0_0_2_0_1 + 0.042328042328044*G0_0_1_1_0_0_3_1_0 + 0.042328042328044*G0_0_1_1_0_0_3_1_1 - 0.042328042328044*G0_0_1_1_0_0_4_1_0 - 0.042328042328044*G0_0_1_1_0_0_5_1_1 + 0.042328042328044*G0_0_1_2_0_1_0_0_0 + 0.042328042328044*G0_0_1_2_0_1_0_0_1 - 0.042328042328044*G0_0_1_2_0_1_1_0_0 - 0.042328042328044*G0_0_1_2_0_1_2_0_1 + 0.042328042328044*G0_0_1_2_0_1_3_1_0 + 0.042328042328044*G0_0_1_2_0_1_3_1_1 - 0.042328042328044*G0_0_1_2_0_1_4_1_0 - 0.042328042328044*G0_0_1_2_0_1_5_1_1 - 0.042328042328044*G0_0_1_3_1_0_0_0_0 - 0.042328042328044*G0_0_1_3_1_0_0_0_1 + 0.042328042328044*G0_0_1_3_1_0_1_0_0 + 0.042328042328044*G0_0_1_3_1_0_2_0_1 - 0.042328042328044*G0_0_1_3_1_0_3_1_0 - 0.042328042328044*G0_0_1_3_1_0_3_1_1 + 0.042328042328044*G0_0_1_3_1_0_4_1_0 + 0.042328042328044*G0_0_1_3_1_0_5_1_1 - 0.042328042328044*G0_0_1_3_1_1_0_0_0 - 0.042328042328044*G0_0_1_3_1_1_0_0_1 + 0.042328042328044*G0_0_1_3_1_1_1_0_0 + 0.042328042328044*G0_0_1_3_1_1_2_0_1 - 0.042328042328044*G0_0_1_3_1_1_3_1_0 - 0.042328042328044*G0_0_1_3_1_1_3_1_1 + 0.042328042328044*G0_0_1_3_1_1_4_1_0 + 0.042328042328044*G0_0_1_3_1_1_5_1_1 + 0.042328042328044*G0_0_1_4_1_0_0_0_0 + 0.042328042328044*G0_0_1_4_1_0_0_0_1 - 0.042328042328044*G0_0_1_4_1_0_1_0_0 - 0.042328042328044*G0_0_1_4_1_0_2_0_1 + 0.042328042328044*G0_0_1_4_1_0_3_1_0 + 0.042328042328044*G0_0_1_4_1_0_3_1_1 - 0.042328042328044*G0_0_1_4_1_0_4_1_0 - 0.042328042328044*G0_0_1_4_1_0_5_1_1 + 0.042328042328044*G0_0_1_5_1_1_0_0_0 + 0.042328042328044*G0_0_1_5_1_1_0_0_1 - 0.042328042328044*G0_0_1_5_1_1_1_0_0 - 0.042328042328044*G0_0_1_5_1_1_2_0_1 + 0.042328042328044*G0_0_1_5_1_1_3_1_0 + 0.042328042328044*G0_0_1_5_1_1_3_1_1 - 0.042328042328044*G0_0_1_5_1_1_4_1_0 - 0.042328042328044*G0_0_1_5_1_1_5_1_1 - 0.0423280423280468*G0_1_0_0_0_0_0_0_0 - 0.0423280423280468*G0_1_0_0_0_0_0_0_1 + 0.0423280423280468*G0_1_0_0_0_0_1_0_0 + 0.0423280423280468*G0_1_0_0_0_0_2_0_1 - 0.0423280423280468*G0_1_0_0_0_0_3_1_0 - 0.0423280423280468*G0_1_0_0_0_0_3_1_1 + 0.0423280423280468*G0_1_0_0_0_0_4_1_0 + 0.0423280423280468*G0_1_0_0_0_0_5_1_1 - 0.0423280423280468*G0_1_0_0_0_1_0_0_0 - 0.0423280423280468*G0_1_0_0_0_1_0_0_1 + 0.0423280423280468*G0_1_0_0_0_1_1_0_0 + 0.0423280423280468*G0_1_0_0_0_1_2_0_1 - 0.0423280423280468*G0_1_0_0_0_1_3_1_0 - 0.0423280423280468*G0_1_0_0_0_1_3_1_1 + 0.0423280423280468*G0_1_0_0_0_1_4_1_0 + 0.0423280423280468*G0_1_0_0_0_1_5_1_1 + 0.0423280423280468*G0_1_0_1_0_0_0_0_0 + 0.0423280423280468*G0_1_0_1_0_0_0_0_1 - 0.0423280423280468*G0_1_0_1_0_0_1_0_0 - 0.0423280423280468*G0_1_0_1_0_0_2_0_1 + 0.0423280423280468*G0_1_0_1_0_0_3_1_0 + 0.0423280423280468*G0_1_0_1_0_0_3_1_1 - 0.0423280423280468*G0_1_0_1_0_0_4_1_0 - 0.0423280423280468*G0_1_0_1_0_0_5_1_1 + 0.0423280423280468*G0_1_0_2_0_1_0_0_0 + 0.0423280423280468*G0_1_0_2_0_1_0_0_1 - 0.0423280423280468*G0_1_0_2_0_1_1_0_0 - 0.0423280423280468*G0_1_0_2_0_1_2_0_1 + 0.0423280423280468*G0_1_0_2_0_1_3_1_0 + 0.0423280423280468*G0_1_0_2_0_1_3_1_1 - 0.0423280423280468*G0_1_0_2_0_1_4_1_0 - 0.0423280423280468*G0_1_0_2_0_1_5_1_1 - 0.0423280423280468*G0_1_0_3_1_0_0_0_0 - 0.0423280423280468*G0_1_0_3_1_0_0_0_1 + 0.0423280423280468*G0_1_0_3_1_0_1_0_0 + 0.0423280423280468*G0_1_0_3_1_0_2_0_1 - 0.0423280423280468*G0_1_0_3_1_0_3_1_0 - 0.0423280423280468*G0_1_0_3_1_0_3_1_1 + 0.0423280423280468*G0_1_0_3_1_0_4_1_0 + 0.0423280423280468*G0_1_0_3_1_0_5_1_1 - 0.0423280423280468*G0_1_0_3_1_1_0_0_0 - 0.0423280423280468*G0_1_0_3_1_1_0_0_1 + 0.0423280423280468*G0_1_0_3_1_1_1_0_0 + 0.0423280423280468*G0_1_0_3_1_1_2_0_1 - 0.0423280423280468*G0_1_0_3_1_1_3_1_0 - 0.0423280423280468*G0_1_0_3_1_1_3_1_1 + 0.0423280423280468*G0_1_0_3_1_1_4_1_0 + 0.0423280423280468*G0_1_0_3_1_1_5_1_1 + 0.0423280423280468*G0_1_0_4_1_0_0_0_0 + 0.0423280423280468*G0_1_0_4_1_0_0_0_1 - 0.0423280423280468*G0_1_0_4_1_0_1_0_0 - 0.0423280423280468*G0_1_0_4_1_0_2_0_1 + 0.0423280423280468*G0_1_0_4_1_0_3_1_0 + 0.0423280423280468*G0_1_0_4_1_0_3_1_1 - 0.0423280423280468*G0_1_0_4_1_0_4_1_0 - 0.0423280423280468*G0_1_0_4_1_0_5_1_1 + 0.0423280423280468*G0_1_0_5_1_1_0_0_0 + 0.0423280423280468*G0_1_0_5_1_1_0_0_1 - 0.0423280423280468*G0_1_0_5_1_1_1_0_0 - 0.0423280423280468*G0_1_0_5_1_1_2_0_1 + 0.0423280423280468*G0_1_0_5_1_1_3_1_0 + 0.0423280423280468*G0_1_0_5_1_1_3_1_1 - 0.0423280423280468*G0_1_0_5_1_1_4_1_0 - 0.0423280423280468*G0_1_0_5_1_1_5_1_1;
    A[625] = A[213] + 0.152380952380962*G0_0_0_0_0_0_0_0_0 + 0.152380952380962*G0_0_0_0_0_0_0_0_1 - 0.152380952380962*G0_0_0_0_0_0_1_0_0 - 0.152380952380962*G0_0_0_0_0_0_2_0_1 + 0.152380952380962*G0_0_0_0_0_0_3_1_0 + 0.152380952380962*G0_0_0_0_0_0_3_1_1 - 0.152380952380962*G0_0_0_0_0_0_4_1_0 - 0.152380952380962*G0_0_0_0_0_0_5_1_1 + 0.152380952380962*G0_0_0_0_0_1_0_0_0 + 0.152380952380962*G0_0_0_0_0_1_0_0_1 - 0.152380952380962*G0_0_0_0_0_1_1_0_0 - 0.152380952380962*G0_0_0_0_0_1_2_0_1 + 0.152380952380962*G0_0_0_0_0_1_3_1_0 + 0.152380952380962*G0_0_0_0_0_1_3_1_1 - 0.152380952380962*G0_0_0_0_0_1_4_1_0 - 0.152380952380962*G0_0_0_0_0_1_5_1_1 - 0.152380952380962*G0_0_0_1_0_0_0_0_0 - 0.152380952380962*G0_0_0_1_0_0_0_0_1 + 0.152380952380962*G0_0_0_1_0_0_1_0_0 + 0.152380952380962*G0_0_0_1_0_0_2_0_1 - 0.152380952380962*G0_0_0_1_0_0_3_1_0 - 0.152380952380962*G0_0_0_1_0_0_3_1_1 + 0.152380952380962*G0_0_0_1_0_0_4_1_0 + 0.152380952380962*G0_0_0_1_0_0_5_1_1 - 0.152380952380962*G0_0_0_2_0_1_0_0_0 - 0.152380952380962*G0_0_0_2_0_1_0_0_1 + 0.152380952380962*G0_0_0_2_0_1_1_0_0 + 0.152380952380962*G0_0_0_2_0_1_2_0_1 - 0.152380952380962*G0_0_0_2_0_1_3_1_0 - 0.152380952380962*G0_0_0_2_0_1_3_1_1 + 0.152380952380962*G0_0_0_2_0_1_4_1_0 + 0.152380952380962*G0_0_0_2_0_1_5_1_1 + 0.152380952380962*G0_0_0_3_1_0_0_0_0 + 0.152380952380962*G0_0_0_3_1_0_0_0_1 - 0.152380952380962*G0_0_0_3_1_0_1_0_0 - 0.152380952380962*G0_0_0_3_1_0_2_0_1 + 0.152380952380962*G0_0_0_3_1_0_3_1_0 + 0.152380952380962*G0_0_0_3_1_0_3_1_1 - 0.152380952380962*G0_0_0_3_1_0_4_1_0 - 0.152380952380962*G0_0_0_3_1_0_5_1_1 + 0.152380952380962*G0_0_0_3_1_1_0_0_0 + 0.152380952380962*G0_0_0_3_1_1_0_0_1 - 0.152380952380962*G0_0_0_3_1_1_1_0_0 - 0.152380952380962*G0_0_0_3_1_1_2_0_1 + 0.152380952380962*G0_0_0_3_1_1_3_1_0 + 0.152380952380962*G0_0_0_3_1_1_3_1_1 - 0.152380952380962*G0_0_0_3_1_1_4_1_0 - 0.152380952380962*G0_0_0_3_1_1_5_1_1 - 0.152380952380962*G0_0_0_4_1_0_0_0_0 - 0.152380952380962*G0_0_0_4_1_0_0_0_1 + 0.152380952380962*G0_0_0_4_1_0_1_0_0 + 0.152380952380962*G0_0_0_4_1_0_2_0_1 - 0.152380952380962*G0_0_0_4_1_0_3_1_0 - 0.152380952380962*G0_0_0_4_1_0_3_1_1 + 0.152380952380962*G0_0_0_4_1_0_4_1_0 + 0.152380952380962*G0_0_0_4_1_0_5_1_1 - 0.152380952380962*G0_0_0_5_1_1_0_0_0 - 0.152380952380962*G0_0_0_5_1_1_0_0_1 + 0.152380952380962*G0_0_0_5_1_1_1_0_0 + 0.152380952380962*G0_0_0_5_1_1_2_0_1 - 0.152380952380962*G0_0_0_5_1_1_3_1_0 - 0.152380952380962*G0_0_0_5_1_1_3_1_1 + 0.152380952380962*G0_0_0_5_1_1_4_1_0 + 0.152380952380962*G0_0_0_5_1_1_5_1_1 - 0.152380952380961*G0_1_1_0_0_0_0_0_0 - 0.152380952380961*G0_1_1_0_0_0_0_0_1 + 0.152380952380961*G0_1_1_0_0_0_1_0_0 + 0.152380952380961*G0_1_1_0_0_0_2_0_1 - 0.152380952380961*G0_1_1_0_0_0_3_1_0 - 0.152380952380961*G0_1_1_0_0_0_3_1_1 + 0.152380952380961*G0_1_1_0_0_0_4_1_0 + 0.152380952380961*G0_1_1_0_0_0_5_1_1 - 0.152380952380961*G0_1_1_0_0_1_0_0_0 - 0.152380952380961*G0_1_1_0_0_1_0_0_1 + 0.152380952380961*G0_1_1_0_0_1_1_0_0 + 0.152380952380961*G0_1_1_0_0_1_2_0_1 - 0.152380952380961*G0_1_1_0_0_1_3_1_0 - 0.152380952380961*G0_1_1_0_0_1_3_1_1 + 0.152380952380961*G0_1_1_0_0_1_4_1_0 + 0.152380952380961*G0_1_1_0_0_1_5_1_1 + 0.152380952380961*G0_1_1_1_0_0_0_0_0 + 0.152380952380961*G0_1_1_1_0_0_0_0_1 - 0.152380952380961*G0_1_1_1_0_0_1_0_0 - 0.152380952380961*G0_1_1_1_0_0_2_0_1 + 0.152380952380961*G0_1_1_1_0_0_3_1_0 + 0.152380952380961*G0_1_1_1_0_0_3_1_1 - 0.152380952380961*G0_1_1_1_0_0_4_1_0 - 0.152380952380961*G0_1_1_1_0_0_5_1_1 + 0.152380952380961*G0_1_1_2_0_1_0_0_0 + 0.152380952380961*G0_1_1_2_0_1_0_0_1 - 0.152380952380961*G0_1_1_2_0_1_1_0_0 - 0.152380952380961*G0_1_1_2_0_1_2_0_1 + 0.152380952380961*G0_1_1_2_0_1_3_1_0 + 0.152380952380961*G0_1_1_2_0_1_3_1_1 - 0.152380952380961*G0_1_1_2_0_1_4_1_0 - 0.152380952380961*G0_1_1_2_0_1_5_1_1 - 0.152380952380961*G0_1_1_3_1_0_0_0_0 - 0.152380952380961*G0_1_1_3_1_0_0_0_1 + 0.152380952380961*G0_1_1_3_1_0_1_0_0 + 0.152380952380961*G0_1_1_3_1_0_2_0_1 - 0.152380952380961*G0_1_1_3_1_0_3_1_0 - 0.152380952380961*G0_1_1_3_1_0_3_1_1 + 0.152380952380961*G0_1_1_3_1_0_4_1_0 + 0.152380952380961*G0_1_1_3_1_0_5_1_1 - 0.152380952380961*G0_1_1_3_1_1_0_0_0 - 0.152380952380961*G0_1_1_3_1_1_0_0_1 + 0.152380952380961*G0_1_1_3_1_1_1_0_0 + 0.152380952380961*G0_1_1_3_1_1_2_0_1 - 0.152380952380961*G0_1_1_3_1_1_3_1_0 - 0.152380952380961*G0_1_1_3_1_1_3_1_1 + 0.152380952380961*G0_1_1_3_1_1_4_1_0 + 0.152380952380961*G0_1_1_3_1_1_5_1_1 + 0.152380952380961*G0_1_1_4_1_0_0_0_0 + 0.152380952380961*G0_1_1_4_1_0_0_0_1 - 0.152380952380961*G0_1_1_4_1_0_1_0_0 - 0.152380952380961*G0_1_1_4_1_0_2_0_1 + 0.152380952380961*G0_1_1_4_1_0_3_1_0 + 0.152380952380961*G0_1_1_4_1_0_3_1_1 - 0.152380952380961*G0_1_1_4_1_0_4_1_0 - 0.152380952380961*G0_1_1_4_1_0_5_1_1 + 0.152380952380961*G0_1_1_5_1_1_0_0_0 + 0.152380952380961*G0_1_1_5_1_1_0_0_1 - 0.152380952380961*G0_1_1_5_1_1_1_0_0 - 0.152380952380961*G0_1_1_5_1_1_2_0_1 + 0.152380952380961*G0_1_1_5_1_1_3_1_0 + 0.152380952380961*G0_1_1_5_1_1_3_1_1 - 0.152380952380961*G0_1_1_5_1_1_4_1_0 - 0.152380952380961*G0_1_1_5_1_1_5_1_1;
    A[489] = 0.0;
    A[208] = 0.0;
    A[574] = 0.0;
    A[530] = 0.778835978835987*G0_1_0_0_0_0_0_0_0 + 0.778835978835987*G0_1_0_0_0_0_0_0_1 - 0.778835978835987*G0_1_0_0_0_0_1_0_0 - 0.778835978835987*G0_1_0_0_0_0_2_0_1 + 0.778835978835987*G0_1_0_0_0_0_3_1_0 + 0.778835978835987*G0_1_0_0_0_0_3_1_1 - 0.778835978835987*G0_1_0_0_0_0_4_1_0 - 0.778835978835987*G0_1_0_0_0_0_5_1_1 + 0.778835978835987*G0_1_0_0_0_1_0_0_0 + 0.778835978835987*G0_1_0_0_0_1_0_0_1 - 0.778835978835987*G0_1_0_0_0_1_1_0_0 - 0.778835978835987*G0_1_0_0_0_1_2_0_1 + 0.778835978835987*G0_1_0_0_0_1_3_1_0 + 0.778835978835987*G0_1_0_0_0_1_3_1_1 - 0.778835978835987*G0_1_0_0_0_1_4_1_0 - 0.778835978835987*G0_1_0_0_0_1_5_1_1 - 0.778835978835987*G0_1_0_1_0_0_0_0_0 - 0.778835978835987*G0_1_0_1_0_0_0_0_1 + 0.778835978835987*G0_1_0_1_0_0_1_0_0 + 0.778835978835987*G0_1_0_1_0_0_2_0_1 - 0.778835978835987*G0_1_0_1_0_0_3_1_0 - 0.778835978835987*G0_1_0_1_0_0_3_1_1 + 0.778835978835987*G0_1_0_1_0_0_4_1_0 + 0.778835978835987*G0_1_0_1_0_0_5_1_1 - 0.778835978835987*G0_1_0_2_0_1_0_0_0 - 0.778835978835987*G0_1_0_2_0_1_0_0_1 + 0.778835978835987*G0_1_0_2_0_1_1_0_0 + 0.778835978835987*G0_1_0_2_0_1_2_0_1 - 0.778835978835987*G0_1_0_2_0_1_3_1_0 - 0.778835978835987*G0_1_0_2_0_1_3_1_1 + 0.778835978835987*G0_1_0_2_0_1_4_1_0 + 0.778835978835987*G0_1_0_2_0_1_5_1_1 + 0.778835978835987*G0_1_0_3_1_0_0_0_0 + 0.778835978835987*G0_1_0_3_1_0_0_0_1 - 0.778835978835987*G0_1_0_3_1_0_1_0_0 - 0.778835978835987*G0_1_0_3_1_0_2_0_1 + 0.778835978835987*G0_1_0_3_1_0_3_1_0 + 0.778835978835987*G0_1_0_3_1_0_3_1_1 - 0.778835978835987*G0_1_0_3_1_0_4_1_0 - 0.778835978835987*G0_1_0_3_1_0_5_1_1 + 0.778835978835987*G0_1_0_3_1_1_0_0_0 + 0.778835978835987*G0_1_0_3_1_1_0_0_1 - 0.778835978835987*G0_1_0_3_1_1_1_0_0 - 0.778835978835987*G0_1_0_3_1_1_2_0_1 + 0.778835978835987*G0_1_0_3_1_1_3_1_0 + 0.778835978835987*G0_1_0_3_1_1_3_1_1 - 0.778835978835987*G0_1_0_3_1_1_4_1_0 - 0.778835978835987*G0_1_0_3_1_1_5_1_1 - 0.778835978835987*G0_1_0_4_1_0_0_0_0 - 0.778835978835987*G0_1_0_4_1_0_0_0_1 + 0.778835978835987*G0_1_0_4_1_0_1_0_0 + 0.778835978835987*G0_1_0_4_1_0_2_0_1 - 0.778835978835987*G0_1_0_4_1_0_3_1_0 - 0.778835978835987*G0_1_0_4_1_0_3_1_1 + 0.778835978835987*G0_1_0_4_1_0_4_1_0 + 0.778835978835987*G0_1_0_4_1_0_5_1_1 - 0.778835978835987*G0_1_0_5_1_1_0_0_0 - 0.778835978835987*G0_1_0_5_1_1_0_0_1 + 0.778835978835987*G0_1_0_5_1_1_1_0_0 + 0.778835978835987*G0_1_0_5_1_1_2_0_1 - 0.778835978835987*G0_1_0_5_1_1_3_1_0 - 0.778835978835987*G0_1_0_5_1_1_3_1_1 + 0.778835978835987*G0_1_0_5_1_1_4_1_0 + 0.778835978835987*G0_1_0_5_1_1_5_1_1 + 0.126984126984127*G0_1_1_0_0_0_0_0_0 + 0.126984126984127*G0_1_1_0_0_0_0_0_1 - 0.126984126984127*G0_1_1_0_0_0_1_0_0 - 0.126984126984127*G0_1_1_0_0_0_2_0_1 + 0.126984126984127*G0_1_1_0_0_0_3_1_0 + 0.126984126984127*G0_1_1_0_0_0_3_1_1 - 0.126984126984127*G0_1_1_0_0_0_4_1_0 - 0.126984126984127*G0_1_1_0_0_0_5_1_1 + 0.126984126984127*G0_1_1_0_0_1_0_0_0 + 0.126984126984127*G0_1_1_0_0_1_0_0_1 - 0.126984126984127*G0_1_1_0_0_1_1_0_0 - 0.126984126984127*G0_1_1_0_0_1_2_0_1 + 0.126984126984127*G0_1_1_0_0_1_3_1_0 + 0.126984126984127*G0_1_1_0_0_1_3_1_1 - 0.126984126984127*G0_1_1_0_0_1_4_1_0 - 0.126984126984127*G0_1_1_0_0_1_5_1_1 - 0.126984126984127*G0_1_1_1_0_0_0_0_0 - 0.126984126984127*G0_1_1_1_0_0_0_0_1 + 0.126984126984127*G0_1_1_1_0_0_1_0_0 + 0.126984126984127*G0_1_1_1_0_0_2_0_1 - 0.126984126984127*G0_1_1_1_0_0_3_1_0 - 0.126984126984127*G0_1_1_1_0_0_3_1_1 + 0.126984126984127*G0_1_1_1_0_0_4_1_0 + 0.126984126984127*G0_1_1_1_0_0_5_1_1 - 0.126984126984127*G0_1_1_2_0_1_0_0_0 - 0.126984126984127*G0_1_1_2_0_1_0_0_1 + 0.126984126984127*G0_1_1_2_0_1_1_0_0 + 0.126984126984127*G0_1_1_2_0_1_2_0_1 - 0.126984126984127*G0_1_1_2_0_1_3_1_0 - 0.126984126984127*G0_1_1_2_0_1_3_1_1 + 0.126984126984127*G0_1_1_2_0_1_4_1_0 + 0.126984126984127*G0_1_1_2_0_1_5_1_1 + 0.126984126984127*G0_1_1_3_1_0_0_0_0 + 0.126984126984127*G0_1_1_3_1_0_0_0_1 - 0.126984126984127*G0_1_1_3_1_0_1_0_0 - 0.126984126984127*G0_1_1_3_1_0_2_0_1 + 0.126984126984127*G0_1_1_3_1_0_3_1_0 + 0.126984126984127*G0_1_1_3_1_0_3_1_1 - 0.126984126984127*G0_1_1_3_1_0_4_1_0 - 0.126984126984127*G0_1_1_3_1_0_5_1_1 + 0.126984126984127*G0_1_1_3_1_1_0_0_0 + 0.126984126984127*G0_1_1_3_1_1_0_0_1 - 0.126984126984127*G0_1_1_3_1_1_1_0_0 - 0.126984126984127*G0_1_1_3_1_1_2_0_1 + 0.126984126984127*G0_1_1_3_1_1_3_1_0 + 0.126984126984127*G0_1_1_3_1_1_3_1_1 - 0.126984126984127*G0_1_1_3_1_1_4_1_0 - 0.126984126984127*G0_1_1_3_1_1_5_1_1 - 0.126984126984127*G0_1_1_4_1_0_0_0_0 - 0.126984126984127*G0_1_1_4_1_0_0_0_1 + 0.126984126984127*G0_1_1_4_1_0_1_0_0 + 0.126984126984127*G0_1_1_4_1_0_2_0_1 - 0.126984126984127*G0_1_1_4_1_0_3_1_0 - 0.126984126984127*G0_1_1_4_1_0_3_1_1 + 0.126984126984127*G0_1_1_4_1_0_4_1_0 + 0.126984126984127*G0_1_1_4_1_0_5_1_1 - 0.126984126984127*G0_1_1_5_1_1_0_0_0 - 0.126984126984127*G0_1_1_5_1_1_0_0_1 + 0.126984126984127*G0_1_1_5_1_1_1_0_0 + 0.126984126984127*G0_1_1_5_1_1_2_0_1 - 0.126984126984127*G0_1_1_5_1_1_3_1_0 - 0.126984126984127*G0_1_1_5_1_1_3_1_1 + 0.126984126984127*G0_1_1_5_1_1_4_1_0 + 0.126984126984127*G0_1_1_5_1_1_5_1_1;
    A[235] = 0.0;
    A[679] = 0.393650793650818*G0_0_0_0_0_0_0_0_0 + 0.393650793650818*G0_0_0_0_0_0_0_0_1 - 0.393650793650818*G0_0_0_0_0_0_1_0_0 - 0.393650793650818*G0_0_0_0_0_0_2_0_1 + 0.393650793650818*G0_0_0_0_0_0_3_1_0 + 0.393650793650818*G0_0_0_0_0_0_3_1_1 - 0.393650793650818*G0_0_0_0_0_0_4_1_0 - 0.393650793650818*G0_0_0_0_0_0_5_1_1 + 0.393650793650818*G0_0_0_0_0_1_0_0_0 + 0.393650793650818*G0_0_0_0_0_1_0_0_1 - 0.393650793650818*G0_0_0_0_0_1_1_0_0 - 0.393650793650818*G0_0_0_0_0_1_2_0_1 + 0.393650793650818*G0_0_0_0_0_1_3_1_0 + 0.393650793650818*G0_0_0_0_0_1_3_1_1 - 0.393650793650818*G0_0_0_0_0_1_4_1_0 - 0.393650793650818*G0_0_0_0_0_1_5_1_1 - 0.393650793650818*G0_0_0_1_0_0_0_0_0 - 0.393650793650818*G0_0_0_1_0_0_0_0_1 + 0.393650793650818*G0_0_0_1_0_0_1_0_0 + 0.393650793650818*G0_0_0_1_0_0_2_0_1 - 0.393650793650818*G0_0_0_1_0_0_3_1_0 - 0.393650793650818*G0_0_0_1_0_0_3_1_1 + 0.393650793650818*G0_0_0_1_0_0_4_1_0 + 0.393650793650818*G0_0_0_1_0_0_5_1_1 - 0.393650793650818*G0_0_0_2_0_1_0_0_0 - 0.393650793650818*G0_0_0_2_0_1_0_0_1 + 0.393650793650818*G0_0_0_2_0_1_1_0_0 + 0.393650793650818*G0_0_0_2_0_1_2_0_1 - 0.393650793650818*G0_0_0_2_0_1_3_1_0 - 0.393650793650818*G0_0_0_2_0_1_3_1_1 + 0.393650793650818*G0_0_0_2_0_1_4_1_0 + 0.393650793650818*G0_0_0_2_0_1_5_1_1 + 0.393650793650818*G0_0_0_3_1_0_0_0_0 + 0.393650793650818*G0_0_0_3_1_0_0_0_1 - 0.393650793650818*G0_0_0_3_1_0_1_0_0 - 0.393650793650818*G0_0_0_3_1_0_2_0_1 + 0.393650793650818*G0_0_0_3_1_0_3_1_0 + 0.393650793650818*G0_0_0_3_1_0_3_1_1 - 0.393650793650818*G0_0_0_3_1_0_4_1_0 - 0.393650793650818*G0_0_0_3_1_0_5_1_1 + 0.393650793650818*G0_0_0_3_1_1_0_0_0 + 0.393650793650818*G0_0_0_3_1_1_0_0_1 - 0.393650793650818*G0_0_0_3_1_1_1_0_0 - 0.393650793650818*G0_0_0_3_1_1_2_0_1 + 0.393650793650818*G0_0_0_3_1_1_3_1_0 + 0.393650793650818*G0_0_0_3_1_1_3_1_1 - 0.393650793650818*G0_0_0_3_1_1_4_1_0 - 0.393650793650818*G0_0_0_3_1_1_5_1_1 - 0.393650793650818*G0_0_0_4_1_0_0_0_0 - 0.393650793650818*G0_0_0_4_1_0_0_0_1 + 0.393650793650818*G0_0_0_4_1_0_1_0_0 + 0.393650793650818*G0_0_0_4_1_0_2_0_1 - 0.393650793650818*G0_0_0_4_1_0_3_1_0 - 0.393650793650818*G0_0_0_4_1_0_3_1_1 + 0.393650793650818*G0_0_0_4_1_0_4_1_0 + 0.393650793650818*G0_0_0_4_1_0_5_1_1 - 0.393650793650818*G0_0_0_5_1_1_0_0_0 - 0.393650793650818*G0_0_0_5_1_1_0_0_1 + 0.393650793650818*G0_0_0_5_1_1_1_0_0 + 0.393650793650818*G0_0_0_5_1_1_2_0_1 - 0.393650793650818*G0_0_0_5_1_1_3_1_0 - 0.393650793650818*G0_0_0_5_1_1_3_1_1 + 0.393650793650818*G0_0_0_5_1_1_4_1_0 + 0.393650793650818*G0_0_0_5_1_1_5_1_1 + 0.196825396825405*G0_0_1_0_0_0_0_0_0 + 0.196825396825405*G0_0_1_0_0_0_0_0_1 - 0.196825396825405*G0_0_1_0_0_0_1_0_0 - 0.196825396825405*G0_0_1_0_0_0_2_0_1 + 0.196825396825405*G0_0_1_0_0_0_3_1_0 + 0.196825396825405*G0_0_1_0_0_0_3_1_1 - 0.196825396825405*G0_0_1_0_0_0_4_1_0 - 0.196825396825405*G0_0_1_0_0_0_5_1_1 + 0.196825396825405*G0_0_1_0_0_1_0_0_0 + 0.196825396825405*G0_0_1_0_0_1_0_0_1 - 0.196825396825405*G0_0_1_0_0_1_1_0_0 - 0.196825396825405*G0_0_1_0_0_1_2_0_1 + 0.196825396825405*G0_0_1_0_0_1_3_1_0 + 0.196825396825405*G0_0_1_0_0_1_3_1_1 - 0.196825396825405*G0_0_1_0_0_1_4_1_0 - 0.196825396825405*G0_0_1_0_0_1_5_1_1 - 0.196825396825405*G0_0_1_1_0_0_0_0_0 - 0.196825396825405*G0_0_1_1_0_0_0_0_1 + 0.196825396825405*G0_0_1_1_0_0_1_0_0 + 0.196825396825405*G0_0_1_1_0_0_2_0_1 - 0.196825396825405*G0_0_1_1_0_0_3_1_0 - 0.196825396825405*G0_0_1_1_0_0_3_1_1 + 0.196825396825405*G0_0_1_1_0_0_4_1_0 + 0.196825396825405*G0_0_1_1_0_0_5_1_1 - 0.196825396825405*G0_0_1_2_0_1_0_0_0 - 0.196825396825405*G0_0_1_2_0_1_0_0_1 + 0.196825396825405*G0_0_1_2_0_1_1_0_0 + 0.196825396825405*G0_0_1_2_0_1_2_0_1 - 0.196825396825405*G0_0_1_2_0_1_3_1_0 - 0.196825396825405*G0_0_1_2_0_1_3_1_1 + 0.196825396825405*G0_0_1_2_0_1_4_1_0 + 0.196825396825405*G0_0_1_2_0_1_5_1_1 + 0.196825396825405*G0_0_1_3_1_0_0_0_0 + 0.196825396825405*G0_0_1_3_1_0_0_0_1 - 0.196825396825405*G0_0_1_3_1_0_1_0_0 - 0.196825396825405*G0_0_1_3_1_0_2_0_1 + 0.196825396825405*G0_0_1_3_1_0_3_1_0 + 0.196825396825405*G0_0_1_3_1_0_3_1_1 - 0.196825396825405*G0_0_1_3_1_0_4_1_0 - 0.196825396825405*G0_0_1_3_1_0_5_1_1 + 0.196825396825405*G0_0_1_3_1_1_0_0_0 + 0.196825396825405*G0_0_1_3_1_1_0_0_1 - 0.196825396825405*G0_0_1_3_1_1_1_0_0 - 0.196825396825405*G0_0_1_3_1_1_2_0_1 + 0.196825396825405*G0_0_1_3_1_1_3_1_0 + 0.196825396825405*G0_0_1_3_1_1_3_1_1 - 0.196825396825405*G0_0_1_3_1_1_4_1_0 - 0.196825396825405*G0_0_1_3_1_1_5_1_1 - 0.196825396825405*G0_0_1_4_1_0_0_0_0 - 0.196825396825405*G0_0_1_4_1_0_0_0_1 + 0.196825396825405*G0_0_1_4_1_0_1_0_0 + 0.196825396825405*G0_0_1_4_1_0_2_0_1 - 0.196825396825405*G0_0_1_4_1_0_3_1_0 - 0.196825396825405*G0_0_1_4_1_0_3_1_1 + 0.196825396825405*G0_0_1_4_1_0_4_1_0 + 0.196825396825405*G0_0_1_4_1_0_5_1_1 - 0.196825396825405*G0_0_1_5_1_1_0_0_0 - 0.196825396825405*G0_0_1_5_1_1_0_0_1 + 0.196825396825405*G0_0_1_5_1_1_1_0_0 + 0.196825396825405*G0_0_1_5_1_1_2_0_1 - 0.196825396825405*G0_0_1_5_1_1_3_1_0 - 0.196825396825405*G0_0_1_5_1_1_3_1_1 + 0.196825396825405*G0_0_1_5_1_1_4_1_0 + 0.196825396825405*G0_0_1_5_1_1_5_1_1 + 0.196825396825417*G0_1_0_0_0_0_0_0_0 + 0.196825396825417*G0_1_0_0_0_0_0_0_1 - 0.196825396825417*G0_1_0_0_0_0_1_0_0 - 0.196825396825417*G0_1_0_0_0_0_2_0_1 + 0.196825396825417*G0_1_0_0_0_0_3_1_0 + 0.196825396825417*G0_1_0_0_0_0_3_1_1 - 0.196825396825417*G0_1_0_0_0_0_4_1_0 - 0.196825396825417*G0_1_0_0_0_0_5_1_1 + 0.196825396825417*G0_1_0_0_0_1_0_0_0 + 0.196825396825417*G0_1_0_0_0_1_0_0_1 - 0.196825396825417*G0_1_0_0_0_1_1_0_0 - 0.196825396825417*G0_1_0_0_0_1_2_0_1 + 0.196825396825417*G0_1_0_0_0_1_3_1_0 + 0.196825396825417*G0_1_0_0_0_1_3_1_1 - 0.196825396825417*G0_1_0_0_0_1_4_1_0 - 0.196825396825417*G0_1_0_0_0_1_5_1_1 - 0.196825396825417*G0_1_0_1_0_0_0_0_0 - 0.196825396825417*G0_1_0_1_0_0_0_0_1 + 0.196825396825417*G0_1_0_1_0_0_1_0_0 + 0.196825396825417*G0_1_0_1_0_0_2_0_1 - 0.196825396825417*G0_1_0_1_0_0_3_1_0 - 0.196825396825417*G0_1_0_1_0_0_3_1_1 + 0.196825396825417*G0_1_0_1_0_0_4_1_0 + 0.196825396825417*G0_1_0_1_0_0_5_1_1 - 0.196825396825417*G0_1_0_2_0_1_0_0_0 - 0.196825396825417*G0_1_0_2_0_1_0_0_1 + 0.196825396825417*G0_1_0_2_0_1_1_0_0 + 0.196825396825417*G0_1_0_2_0_1_2_0_1 - 0.196825396825417*G0_1_0_2_0_1_3_1_0 - 0.196825396825417*G0_1_0_2_0_1_3_1_1 + 0.196825396825417*G0_1_0_2_0_1_4_1_0 + 0.196825396825417*G0_1_0_2_0_1_5_1_1 + 0.196825396825417*G0_1_0_3_1_0_0_0_0 + 0.196825396825417*G0_1_0_3_1_0_0_0_1 - 0.196825396825417*G0_1_0_3_1_0_1_0_0 - 0.196825396825417*G0_1_0_3_1_0_2_0_1 + 0.196825396825417*G0_1_0_3_1_0_3_1_0 + 0.196825396825417*G0_1_0_3_1_0_3_1_1 - 0.196825396825417*G0_1_0_3_1_0_4_1_0 - 0.196825396825417*G0_1_0_3_1_0_5_1_1 + 0.196825396825417*G0_1_0_3_1_1_0_0_0 + 0.196825396825417*G0_1_0_3_1_1_0_0_1 - 0.196825396825417*G0_1_0_3_1_1_1_0_0 - 0.196825396825417*G0_1_0_3_1_1_2_0_1 + 0.196825396825417*G0_1_0_3_1_1_3_1_0 + 0.196825396825417*G0_1_0_3_1_1_3_1_1 - 0.196825396825417*G0_1_0_3_1_1_4_1_0 - 0.196825396825417*G0_1_0_3_1_1_5_1_1 - 0.196825396825417*G0_1_0_4_1_0_0_0_0 - 0.196825396825417*G0_1_0_4_1_0_0_0_1 + 0.196825396825417*G0_1_0_4_1_0_1_0_0 + 0.196825396825417*G0_1_0_4_1_0_2_0_1 - 0.196825396825417*G0_1_0_4_1_0_3_1_0 - 0.196825396825417*G0_1_0_4_1_0_3_1_1 + 0.196825396825417*G0_1_0_4_1_0_4_1_0 + 0.196825396825417*G0_1_0_4_1_0_5_1_1 - 0.196825396825417*G0_1_0_5_1_1_0_0_0 - 0.196825396825417*G0_1_0_5_1_1_0_0_1 + 0.196825396825417*G0_1_0_5_1_1_1_0_0 + 0.196825396825417*G0_1_0_5_1_1_2_0_1 - 0.196825396825417*G0_1_0_5_1_1_3_1_0 - 0.196825396825417*G0_1_0_5_1_1_3_1_1 + 0.196825396825417*G0_1_0_5_1_1_4_1_0 + 0.196825396825417*G0_1_0_5_1_1_5_1_1 + 0.0507936507936571*G0_1_1_0_0_0_0_0_0 + 0.0507936507936571*G0_1_1_0_0_0_0_0_1 - 0.0507936507936571*G0_1_1_0_0_0_1_0_0 - 0.0507936507936571*G0_1_1_0_0_0_2_0_1 + 0.0507936507936571*G0_1_1_0_0_0_3_1_0 + 0.0507936507936571*G0_1_1_0_0_0_3_1_1 - 0.0507936507936571*G0_1_1_0_0_0_4_1_0 - 0.0507936507936571*G0_1_1_0_0_0_5_1_1 + 0.0507936507936571*G0_1_1_0_0_1_0_0_0 + 0.0507936507936571*G0_1_1_0_0_1_0_0_1 - 0.0507936507936571*G0_1_1_0_0_1_1_0_0 - 0.0507936507936571*G0_1_1_0_0_1_2_0_1 + 0.0507936507936571*G0_1_1_0_0_1_3_1_0 + 0.0507936507936571*G0_1_1_0_0_1_3_1_1 - 0.0507936507936571*G0_1_1_0_0_1_4_1_0 - 0.0507936507936571*G0_1_1_0_0_1_5_1_1 - 0.0507936507936571*G0_1_1_1_0_0_0_0_0 - 0.0507936507936571*G0_1_1_1_0_0_0_0_1 + 0.0507936507936571*G0_1_1_1_0_0_1_0_0 + 0.0507936507936571*G0_1_1_1_0_0_2_0_1 - 0.0507936507936571*G0_1_1_1_0_0_3_1_0 - 0.0507936507936571*G0_1_1_1_0_0_3_1_1 + 0.0507936507936571*G0_1_1_1_0_0_4_1_0 + 0.0507936507936571*G0_1_1_1_0_0_5_1_1 - 0.0507936507936571*G0_1_1_2_0_1_0_0_0 - 0.0507936507936571*G0_1_1_2_0_1_0_0_1 + 0.0507936507936571*G0_1_1_2_0_1_1_0_0 + 0.0507936507936571*G0_1_1_2_0_1_2_0_1 - 0.0507936507936571*G0_1_1_2_0_1_3_1_0 - 0.0507936507936571*G0_1_1_2_0_1_3_1_1 + 0.0507936507936571*G0_1_1_2_0_1_4_1_0 + 0.0507936507936571*G0_1_1_2_0_1_5_1_1 + 0.0507936507936571*G0_1_1_3_1_0_0_0_0 + 0.0507936507936571*G0_1_1_3_1_0_0_0_1 - 0.0507936507936571*G0_1_1_3_1_0_1_0_0 - 0.0507936507936571*G0_1_1_3_1_0_2_0_1 + 0.0507936507936571*G0_1_1_3_1_0_3_1_0 + 0.0507936507936571*G0_1_1_3_1_0_3_1_1 - 0.0507936507936571*G0_1_1_3_1_0_4_1_0 - 0.0507936507936571*G0_1_1_3_1_0_5_1_1 + 0.0507936507936571*G0_1_1_3_1_1_0_0_0 + 0.0507936507936571*G0_1_1_3_1_1_0_0_1 - 0.0507936507936571*G0_1_1_3_1_1_1_0_0 - 0.0507936507936571*G0_1_1_3_1_1_2_0_1 + 0.0507936507936571*G0_1_1_3_1_1_3_1_0 + 0.0507936507936571*G0_1_1_3_1_1_3_1_1 - 0.0507936507936571*G0_1_1_3_1_1_4_1_0 - 0.0507936507936571*G0_1_1_3_1_1_5_1_1 - 0.0507936507936571*G0_1_1_4_1_0_0_0_0 - 0.0507936507936571*G0_1_1_4_1_0_0_0_1 + 0.0507936507936571*G0_1_1_4_1_0_1_0_0 + 0.0507936507936571*G0_1_1_4_1_0_2_0_1 - 0.0507936507936571*G0_1_1_4_1_0_3_1_0 - 0.0507936507936571*G0_1_1_4_1_0_3_1_1 + 0.0507936507936571*G0_1_1_4_1_0_4_1_0 + 0.0507936507936571*G0_1_1_4_1_0_5_1_1 - 0.0507936507936571*G0_1_1_5_1_1_0_0_0 - 0.0507936507936571*G0_1_1_5_1_1_0_0_1 + 0.0507936507936571*G0_1_1_5_1_1_1_0_0 + 0.0507936507936571*G0_1_1_5_1_1_2_0_1 - 0.0507936507936571*G0_1_1_5_1_1_3_1_0 - 0.0507936507936571*G0_1_1_5_1_1_3_1_1 + 0.0507936507936571*G0_1_1_5_1_1_4_1_0 + 0.0507936507936571*G0_1_1_5_1_1_5_1_1;
    A[607] = 0.0;
    A[716] = 0.101587301587301*G0_0_1_0_0_0_0_0_0 + 0.101587301587301*G0_0_1_0_0_0_0_0_1 - 0.101587301587301*G0_0_1_0_0_0_1_0_0 - 0.101587301587301*G0_0_1_0_0_0_2_0_1 + 0.101587301587301*G0_0_1_0_0_0_3_1_0 + 0.101587301587301*G0_0_1_0_0_0_3_1_1 - 0.101587301587301*G0_0_1_0_0_0_4_1_0 - 0.101587301587301*G0_0_1_0_0_0_5_1_1 + 0.101587301587301*G0_0_1_0_0_1_0_0_0 + 0.101587301587301*G0_0_1_0_0_1_0_0_1 - 0.101587301587301*G0_0_1_0_0_1_1_0_0 - 0.101587301587301*G0_0_1_0_0_1_2_0_1 + 0.101587301587301*G0_0_1_0_0_1_3_1_0 + 0.101587301587301*G0_0_1_0_0_1_3_1_1 - 0.101587301587301*G0_0_1_0_0_1_4_1_0 - 0.101587301587301*G0_0_1_0_0_1_5_1_1 - 0.101587301587301*G0_0_1_1_0_0_0_0_0 - 0.101587301587301*G0_0_1_1_0_0_0_0_1 + 0.101587301587301*G0_0_1_1_0_0_1_0_0 + 0.101587301587301*G0_0_1_1_0_0_2_0_1 - 0.101587301587301*G0_0_1_1_0_0_3_1_0 - 0.101587301587301*G0_0_1_1_0_0_3_1_1 + 0.101587301587301*G0_0_1_1_0_0_4_1_0 + 0.101587301587301*G0_0_1_1_0_0_5_1_1 - 0.101587301587301*G0_0_1_2_0_1_0_0_0 - 0.101587301587301*G0_0_1_2_0_1_0_0_1 + 0.101587301587301*G0_0_1_2_0_1_1_0_0 + 0.101587301587301*G0_0_1_2_0_1_2_0_1 - 0.101587301587301*G0_0_1_2_0_1_3_1_0 - 0.101587301587301*G0_0_1_2_0_1_3_1_1 + 0.101587301587301*G0_0_1_2_0_1_4_1_0 + 0.101587301587301*G0_0_1_2_0_1_5_1_1 + 0.101587301587301*G0_0_1_3_1_0_0_0_0 + 0.101587301587301*G0_0_1_3_1_0_0_0_1 - 0.101587301587301*G0_0_1_3_1_0_1_0_0 - 0.101587301587301*G0_0_1_3_1_0_2_0_1 + 0.101587301587301*G0_0_1_3_1_0_3_1_0 + 0.101587301587301*G0_0_1_3_1_0_3_1_1 - 0.101587301587301*G0_0_1_3_1_0_4_1_0 - 0.101587301587301*G0_0_1_3_1_0_5_1_1 + 0.101587301587301*G0_0_1_3_1_1_0_0_0 + 0.101587301587301*G0_0_1_3_1_1_0_0_1 - 0.101587301587301*G0_0_1_3_1_1_1_0_0 - 0.101587301587301*G0_0_1_3_1_1_2_0_1 + 0.101587301587301*G0_0_1_3_1_1_3_1_0 + 0.101587301587301*G0_0_1_3_1_1_3_1_1 - 0.101587301587301*G0_0_1_3_1_1_4_1_0 - 0.101587301587301*G0_0_1_3_1_1_5_1_1 - 0.101587301587301*G0_0_1_4_1_0_0_0_0 - 0.101587301587301*G0_0_1_4_1_0_0_0_1 + 0.101587301587301*G0_0_1_4_1_0_1_0_0 + 0.101587301587301*G0_0_1_4_1_0_2_0_1 - 0.101587301587301*G0_0_1_4_1_0_3_1_0 - 0.101587301587301*G0_0_1_4_1_0_3_1_1 + 0.101587301587301*G0_0_1_4_1_0_4_1_0 + 0.101587301587301*G0_0_1_4_1_0_5_1_1 - 0.101587301587301*G0_0_1_5_1_1_0_0_0 - 0.101587301587301*G0_0_1_5_1_1_0_0_1 + 0.101587301587301*G0_0_1_5_1_1_1_0_0 + 0.101587301587301*G0_0_1_5_1_1_2_0_1 - 0.101587301587301*G0_0_1_5_1_1_3_1_0 - 0.101587301587301*G0_0_1_5_1_1_3_1_1 + 0.101587301587301*G0_0_1_5_1_1_4_1_0 + 0.101587301587301*G0_0_1_5_1_1_5_1_1 + 0.101587301587306*G0_1_0_0_0_0_0_0_0 + 0.101587301587306*G0_1_0_0_0_0_0_0_1 - 0.101587301587306*G0_1_0_0_0_0_1_0_0 - 0.101587301587306*G0_1_0_0_0_0_2_0_1 + 0.101587301587306*G0_1_0_0_0_0_3_1_0 + 0.101587301587306*G0_1_0_0_0_0_3_1_1 - 0.101587301587306*G0_1_0_0_0_0_4_1_0 - 0.101587301587306*G0_1_0_0_0_0_5_1_1 + 0.101587301587306*G0_1_0_0_0_1_0_0_0 + 0.101587301587306*G0_1_0_0_0_1_0_0_1 - 0.101587301587306*G0_1_0_0_0_1_1_0_0 - 0.101587301587306*G0_1_0_0_0_1_2_0_1 + 0.101587301587306*G0_1_0_0_0_1_3_1_0 + 0.101587301587306*G0_1_0_0_0_1_3_1_1 - 0.101587301587306*G0_1_0_0_0_1_4_1_0 - 0.101587301587306*G0_1_0_0_0_1_5_1_1 - 0.101587301587306*G0_1_0_1_0_0_0_0_0 - 0.101587301587306*G0_1_0_1_0_0_0_0_1 + 0.101587301587306*G0_1_0_1_0_0_1_0_0 + 0.101587301587306*G0_1_0_1_0_0_2_0_1 - 0.101587301587306*G0_1_0_1_0_0_3_1_0 - 0.101587301587306*G0_1_0_1_0_0_3_1_1 + 0.101587301587306*G0_1_0_1_0_0_4_1_0 + 0.101587301587306*G0_1_0_1_0_0_5_1_1 - 0.101587301587306*G0_1_0_2_0_1_0_0_0 - 0.101587301587306*G0_1_0_2_0_1_0_0_1 + 0.101587301587306*G0_1_0_2_0_1_1_0_0 + 0.101587301587306*G0_1_0_2_0_1_2_0_1 - 0.101587301587306*G0_1_0_2_0_1_3_1_0 - 0.101587301587306*G0_1_0_2_0_1_3_1_1 + 0.101587301587306*G0_1_0_2_0_1_4_1_0 + 0.101587301587306*G0_1_0_2_0_1_5_1_1 + 0.101587301587306*G0_1_0_3_1_0_0_0_0 + 0.101587301587306*G0_1_0_3_1_0_0_0_1 - 0.101587301587306*G0_1_0_3_1_0_1_0_0 - 0.101587301587306*G0_1_0_3_1_0_2_0_1 + 0.101587301587306*G0_1_0_3_1_0_3_1_0 + 0.101587301587306*G0_1_0_3_1_0_3_1_1 - 0.101587301587306*G0_1_0_3_1_0_4_1_0 - 0.101587301587306*G0_1_0_3_1_0_5_1_1 + 0.101587301587306*G0_1_0_3_1_1_0_0_0 + 0.101587301587306*G0_1_0_3_1_1_0_0_1 - 0.101587301587306*G0_1_0_3_1_1_1_0_0 - 0.101587301587306*G0_1_0_3_1_1_2_0_1 + 0.101587301587306*G0_1_0_3_1_1_3_1_0 + 0.101587301587306*G0_1_0_3_1_1_3_1_1 - 0.101587301587306*G0_1_0_3_1_1_4_1_0 - 0.101587301587306*G0_1_0_3_1_1_5_1_1 - 0.101587301587306*G0_1_0_4_1_0_0_0_0 - 0.101587301587306*G0_1_0_4_1_0_0_0_1 + 0.101587301587306*G0_1_0_4_1_0_1_0_0 + 0.101587301587306*G0_1_0_4_1_0_2_0_1 - 0.101587301587306*G0_1_0_4_1_0_3_1_0 - 0.101587301587306*G0_1_0_4_1_0_3_1_1 + 0.101587301587306*G0_1_0_4_1_0_4_1_0 + 0.101587301587306*G0_1_0_4_1_0_5_1_1 - 0.101587301587306*G0_1_0_5_1_1_0_0_0 - 0.101587301587306*G0_1_0_5_1_1_0_0_1 + 0.101587301587306*G0_1_0_5_1_1_1_0_0 + 0.101587301587306*G0_1_0_5_1_1_2_0_1 - 0.101587301587306*G0_1_0_5_1_1_3_1_0 - 0.101587301587306*G0_1_0_5_1_1_3_1_1 + 0.101587301587306*G0_1_0_5_1_1_4_1_0 + 0.101587301587306*G0_1_0_5_1_1_5_1_1;
    A[636] = 0.0;
    A[270] = A[530] - 0.651851851851859*G0_0_0_0_0_0_0_0_0 - 0.651851851851859*G0_0_0_0_0_0_0_0_1 + 0.651851851851859*G0_0_0_0_0_0_1_0_0 + 0.651851851851859*G0_0_0_0_0_0_2_0_1 - 0.651851851851859*G0_0_0_0_0_0_3_1_0 - 0.651851851851859*G0_0_0_0_0_0_3_1_1 + 0.651851851851859*G0_0_0_0_0_0_4_1_0 + 0.651851851851859*G0_0_0_0_0_0_5_1_1 - 0.651851851851859*G0_0_0_0_0_1_0_0_0 - 0.651851851851859*G0_0_0_0_0_1_0_0_1 + 0.651851851851859*G0_0_0_0_0_1_1_0_0 + 0.651851851851859*G0_0_0_0_0_1_2_0_1 - 0.651851851851859*G0_0_0_0_0_1_3_1_0 - 0.651851851851859*G0_0_0_0_0_1_3_1_1 + 0.651851851851859*G0_0_0_0_0_1_4_1_0 + 0.651851851851859*G0_0_0_0_0_1_5_1_1 + 0.651851851851859*G0_0_0_1_0_0_0_0_0 + 0.651851851851859*G0_0_0_1_0_0_0_0_1 - 0.651851851851859*G0_0_0_1_0_0_1_0_0 - 0.651851851851859*G0_0_0_1_0_0_2_0_1 + 0.651851851851859*G0_0_0_1_0_0_3_1_0 + 0.651851851851859*G0_0_0_1_0_0_3_1_1 - 0.651851851851859*G0_0_0_1_0_0_4_1_0 - 0.651851851851859*G0_0_0_1_0_0_5_1_1 + 0.651851851851859*G0_0_0_2_0_1_0_0_0 + 0.651851851851859*G0_0_0_2_0_1_0_0_1 - 0.651851851851859*G0_0_0_2_0_1_1_0_0 - 0.651851851851859*G0_0_0_2_0_1_2_0_1 + 0.651851851851859*G0_0_0_2_0_1_3_1_0 + 0.651851851851859*G0_0_0_2_0_1_3_1_1 - 0.651851851851859*G0_0_0_2_0_1_4_1_0 - 0.651851851851859*G0_0_0_2_0_1_5_1_1 - 0.651851851851859*G0_0_0_3_1_0_0_0_0 - 0.651851851851859*G0_0_0_3_1_0_0_0_1 + 0.651851851851859*G0_0_0_3_1_0_1_0_0 + 0.651851851851859*G0_0_0_3_1_0_2_0_1 - 0.651851851851859*G0_0_0_3_1_0_3_1_0 - 0.651851851851859*G0_0_0_3_1_0_3_1_1 + 0.651851851851859*G0_0_0_3_1_0_4_1_0 + 0.651851851851859*G0_0_0_3_1_0_5_1_1 - 0.651851851851859*G0_0_0_3_1_1_0_0_0 - 0.651851851851859*G0_0_0_3_1_1_0_0_1 + 0.651851851851859*G0_0_0_3_1_1_1_0_0 + 0.651851851851859*G0_0_0_3_1_1_2_0_1 - 0.651851851851859*G0_0_0_3_1_1_3_1_0 - 0.651851851851859*G0_0_0_3_1_1_3_1_1 + 0.651851851851859*G0_0_0_3_1_1_4_1_0 + 0.651851851851859*G0_0_0_3_1_1_5_1_1 + 0.651851851851859*G0_0_0_4_1_0_0_0_0 + 0.651851851851859*G0_0_0_4_1_0_0_0_1 - 0.651851851851859*G0_0_0_4_1_0_1_0_0 - 0.651851851851859*G0_0_0_4_1_0_2_0_1 + 0.651851851851859*G0_0_0_4_1_0_3_1_0 + 0.651851851851859*G0_0_0_4_1_0_3_1_1 - 0.651851851851859*G0_0_0_4_1_0_4_1_0 - 0.651851851851859*G0_0_0_4_1_0_5_1_1 + 0.651851851851859*G0_0_0_5_1_1_0_0_0 + 0.651851851851859*G0_0_0_5_1_1_0_0_1 - 0.651851851851859*G0_0_0_5_1_1_1_0_0 - 0.651851851851859*G0_0_0_5_1_1_2_0_1 + 0.651851851851859*G0_0_0_5_1_1_3_1_0 + 0.651851851851859*G0_0_0_5_1_1_3_1_1 - 0.651851851851859*G0_0_0_5_1_1_4_1_0 - 0.651851851851859*G0_0_0_5_1_1_5_1_1 - 0.651851851851859*G0_0_1_0_0_0_0_0_0 - 0.651851851851859*G0_0_1_0_0_0_0_0_1 + 0.651851851851859*G0_0_1_0_0_0_1_0_0 + 0.651851851851859*G0_0_1_0_0_0_2_0_1 - 0.651851851851859*G0_0_1_0_0_0_3_1_0 - 0.651851851851859*G0_0_1_0_0_0_3_1_1 + 0.651851851851859*G0_0_1_0_0_0_4_1_0 + 0.651851851851859*G0_0_1_0_0_0_5_1_1 - 0.651851851851859*G0_0_1_0_0_1_0_0_0 - 0.651851851851859*G0_0_1_0_0_1_0_0_1 + 0.651851851851859*G0_0_1_0_0_1_1_0_0 + 0.651851851851859*G0_0_1_0_0_1_2_0_1 - 0.651851851851859*G0_0_1_0_0_1_3_1_0 - 0.651851851851859*G0_0_1_0_0_1_3_1_1 + 0.651851851851859*G0_0_1_0_0_1_4_1_0 + 0.651851851851859*G0_0_1_0_0_1_5_1_1 + 0.651851851851859*G0_0_1_1_0_0_0_0_0 + 0.651851851851859*G0_0_1_1_0_0_0_0_1 - 0.651851851851859*G0_0_1_1_0_0_1_0_0 - 0.651851851851859*G0_0_1_1_0_0_2_0_1 + 0.651851851851859*G0_0_1_1_0_0_3_1_0 + 0.651851851851859*G0_0_1_1_0_0_3_1_1 - 0.651851851851859*G0_0_1_1_0_0_4_1_0 - 0.651851851851859*G0_0_1_1_0_0_5_1_1 + 0.651851851851859*G0_0_1_2_0_1_0_0_0 + 0.651851851851859*G0_0_1_2_0_1_0_0_1 - 0.651851851851859*G0_0_1_2_0_1_1_0_0 - 0.651851851851859*G0_0_1_2_0_1_2_0_1 + 0.651851851851859*G0_0_1_2_0_1_3_1_0 + 0.651851851851859*G0_0_1_2_0_1_3_1_1 - 0.651851851851859*G0_0_1_2_0_1_4_1_0 - 0.651851851851859*G0_0_1_2_0_1_5_1_1 - 0.651851851851859*G0_0_1_3_1_0_0_0_0 - 0.651851851851859*G0_0_1_3_1_0_0_0_1 + 0.651851851851859*G0_0_1_3_1_0_1_0_0 + 0.651851851851859*G0_0_1_3_1_0_2_0_1 - 0.651851851851859*G0_0_1_3_1_0_3_1_0 - 0.651851851851859*G0_0_1_3_1_0_3_1_1 + 0.651851851851859*G0_0_1_3_1_0_4_1_0 + 0.651851851851859*G0_0_1_3_1_0_5_1_1 - 0.651851851851859*G0_0_1_3_1_1_0_0_0 - 0.651851851851859*G0_0_1_3_1_1_0_0_1 + 0.651851851851859*G0_0_1_3_1_1_1_0_0 + 0.651851851851859*G0_0_1_3_1_1_2_0_1 - 0.651851851851859*G0_0_1_3_1_1_3_1_0 - 0.651851851851859*G0_0_1_3_1_1_3_1_1 + 0.651851851851859*G0_0_1_3_1_1_4_1_0 + 0.651851851851859*G0_0_1_3_1_1_5_1_1 + 0.651851851851859*G0_0_1_4_1_0_0_0_0 + 0.651851851851859*G0_0_1_4_1_0_0_0_1 - 0.651851851851859*G0_0_1_4_1_0_1_0_0 - 0.651851851851859*G0_0_1_4_1_0_2_0_1 + 0.651851851851859*G0_0_1_4_1_0_3_1_0 + 0.651851851851859*G0_0_1_4_1_0_3_1_1 - 0.651851851851859*G0_0_1_4_1_0_4_1_0 - 0.651851851851859*G0_0_1_4_1_0_5_1_1 + 0.651851851851859*G0_0_1_5_1_1_0_0_0 + 0.651851851851859*G0_0_1_5_1_1_0_0_1 - 0.651851851851859*G0_0_1_5_1_1_1_0_0 - 0.651851851851859*G0_0_1_5_1_1_2_0_1 + 0.651851851851859*G0_0_1_5_1_1_3_1_0 + 0.651851851851859*G0_0_1_5_1_1_3_1_1 - 0.651851851851859*G0_0_1_5_1_1_4_1_0 - 0.651851851851859*G0_0_1_5_1_1_5_1_1 - 0.65185185185186*G0_1_0_0_0_0_0_0_0 - 0.65185185185186*G0_1_0_0_0_0_0_0_1 + 0.65185185185186*G0_1_0_0_0_0_1_0_0 + 0.65185185185186*G0_1_0_0_0_0_2_0_1 - 0.65185185185186*G0_1_0_0_0_0_3_1_0 - 0.65185185185186*G0_1_0_0_0_0_3_1_1 + 0.65185185185186*G0_1_0_0_0_0_4_1_0 + 0.65185185185186*G0_1_0_0_0_0_5_1_1 - 0.65185185185186*G0_1_0_0_0_1_0_0_0 - 0.65185185185186*G0_1_0_0_0_1_0_0_1 + 0.65185185185186*G0_1_0_0_0_1_1_0_0 + 0.65185185185186*G0_1_0_0_0_1_2_0_1 - 0.65185185185186*G0_1_0_0_0_1_3_1_0 - 0.65185185185186*G0_1_0_0_0_1_3_1_1 + 0.65185185185186*G0_1_0_0_0_1_4_1_0 + 0.65185185185186*G0_1_0_0_0_1_5_1_1 + 0.65185185185186*G0_1_0_1_0_0_0_0_0 + 0.65185185185186*G0_1_0_1_0_0_0_0_1 - 0.65185185185186*G0_1_0_1_0_0_1_0_0 - 0.65185185185186*G0_1_0_1_0_0_2_0_1 + 0.65185185185186*G0_1_0_1_0_0_3_1_0 + 0.65185185185186*G0_1_0_1_0_0_3_1_1 - 0.65185185185186*G0_1_0_1_0_0_4_1_0 - 0.65185185185186*G0_1_0_1_0_0_5_1_1 + 0.65185185185186*G0_1_0_2_0_1_0_0_0 + 0.65185185185186*G0_1_0_2_0_1_0_0_1 - 0.65185185185186*G0_1_0_2_0_1_1_0_0 - 0.65185185185186*G0_1_0_2_0_1_2_0_1 + 0.65185185185186*G0_1_0_2_0_1_3_1_0 + 0.65185185185186*G0_1_0_2_0_1_3_1_1 - 0.65185185185186*G0_1_0_2_0_1_4_1_0 - 0.65185185185186*G0_1_0_2_0_1_5_1_1 - 0.65185185185186*G0_1_0_3_1_0_0_0_0 - 0.65185185185186*G0_1_0_3_1_0_0_0_1 + 0.65185185185186*G0_1_0_3_1_0_1_0_0 + 0.65185185185186*G0_1_0_3_1_0_2_0_1 - 0.65185185185186*G0_1_0_3_1_0_3_1_0 - 0.65185185185186*G0_1_0_3_1_0_3_1_1 + 0.65185185185186*G0_1_0_3_1_0_4_1_0 + 0.65185185185186*G0_1_0_3_1_0_5_1_1 - 0.65185185185186*G0_1_0_3_1_1_0_0_0 - 0.65185185185186*G0_1_0_3_1_1_0_0_1 + 0.65185185185186*G0_1_0_3_1_1_1_0_0 + 0.65185185185186*G0_1_0_3_1_1_2_0_1 - 0.65185185185186*G0_1_0_3_1_1_3_1_0 - 0.65185185185186*G0_1_0_3_1_1_3_1_1 + 0.65185185185186*G0_1_0_3_1_1_4_1_0 + 0.65185185185186*G0_1_0_3_1_1_5_1_1 + 0.65185185185186*G0_1_0_4_1_0_0_0_0 + 0.65185185185186*G0_1_0_4_1_0_0_0_1 - 0.65185185185186*G0_1_0_4_1_0_1_0_0 - 0.65185185185186*G0_1_0_4_1_0_2_0_1 + 0.65185185185186*G0_1_0_4_1_0_3_1_0 + 0.65185185185186*G0_1_0_4_1_0_3_1_1 - 0.65185185185186*G0_1_0_4_1_0_4_1_0 - 0.65185185185186*G0_1_0_4_1_0_5_1_1 + 0.65185185185186*G0_1_0_5_1_1_0_0_0 + 0.65185185185186*G0_1_0_5_1_1_0_0_1 - 0.65185185185186*G0_1_0_5_1_1_1_0_0 - 0.65185185185186*G0_1_0_5_1_1_2_0_1 + 0.65185185185186*G0_1_0_5_1_1_3_1_0 + 0.65185185185186*G0_1_0_5_1_1_3_1_1 - 0.65185185185186*G0_1_0_5_1_1_4_1_0 - 0.65185185185186*G0_1_0_5_1_1_5_1_1;
    A[307] = A[679] - 0.342857142857164*G0_0_0_0_0_0_0_0_0 - 0.342857142857164*G0_0_0_0_0_0_0_0_1 + 0.342857142857164*G0_0_0_0_0_0_1_0_0 + 0.342857142857164*G0_0_0_0_0_0_2_0_1 - 0.342857142857164*G0_0_0_0_0_0_3_1_0 - 0.342857142857164*G0_0_0_0_0_0_3_1_1 + 0.342857142857164*G0_0_0_0_0_0_4_1_0 + 0.342857142857164*G0_0_0_0_0_0_5_1_1 - 0.342857142857164*G0_0_0_0_0_1_0_0_0 - 0.342857142857164*G0_0_0_0_0_1_0_0_1 + 0.342857142857164*G0_0_0_0_0_1_1_0_0 + 0.342857142857164*G0_0_0_0_0_1_2_0_1 - 0.342857142857164*G0_0_0_0_0_1_3_1_0 - 0.342857142857164*G0_0_0_0_0_1_3_1_1 + 0.342857142857164*G0_0_0_0_0_1_4_1_0 + 0.342857142857164*G0_0_0_0_0_1_5_1_1 + 0.342857142857164*G0_0_0_1_0_0_0_0_0 + 0.342857142857164*G0_0_0_1_0_0_0_0_1 - 0.342857142857164*G0_0_0_1_0_0_1_0_0 - 0.342857142857164*G0_0_0_1_0_0_2_0_1 + 0.342857142857164*G0_0_0_1_0_0_3_1_0 + 0.342857142857164*G0_0_0_1_0_0_3_1_1 - 0.342857142857164*G0_0_0_1_0_0_4_1_0 - 0.342857142857164*G0_0_0_1_0_0_5_1_1 + 0.342857142857164*G0_0_0_2_0_1_0_0_0 + 0.342857142857164*G0_0_0_2_0_1_0_0_1 - 0.342857142857164*G0_0_0_2_0_1_1_0_0 - 0.342857142857164*G0_0_0_2_0_1_2_0_1 + 0.342857142857164*G0_0_0_2_0_1_3_1_0 + 0.342857142857164*G0_0_0_2_0_1_3_1_1 - 0.342857142857164*G0_0_0_2_0_1_4_1_0 - 0.342857142857164*G0_0_0_2_0_1_5_1_1 - 0.342857142857164*G0_0_0_3_1_0_0_0_0 - 0.342857142857164*G0_0_0_3_1_0_0_0_1 + 0.342857142857164*G0_0_0_3_1_0_1_0_0 + 0.342857142857164*G0_0_0_3_1_0_2_0_1 - 0.342857142857164*G0_0_0_3_1_0_3_1_0 - 0.342857142857164*G0_0_0_3_1_0_3_1_1 + 0.342857142857164*G0_0_0_3_1_0_4_1_0 + 0.342857142857164*G0_0_0_3_1_0_5_1_1 - 0.342857142857164*G0_0_0_3_1_1_0_0_0 - 0.342857142857164*G0_0_0_3_1_1_0_0_1 + 0.342857142857164*G0_0_0_3_1_1_1_0_0 + 0.342857142857164*G0_0_0_3_1_1_2_0_1 - 0.342857142857164*G0_0_0_3_1_1_3_1_0 - 0.342857142857164*G0_0_0_3_1_1_3_1_1 + 0.342857142857164*G0_0_0_3_1_1_4_1_0 + 0.342857142857164*G0_0_0_3_1_1_5_1_1 + 0.342857142857164*G0_0_0_4_1_0_0_0_0 + 0.342857142857164*G0_0_0_4_1_0_0_0_1 - 0.342857142857164*G0_0_0_4_1_0_1_0_0 - 0.342857142857164*G0_0_0_4_1_0_2_0_1 + 0.342857142857164*G0_0_0_4_1_0_3_1_0 + 0.342857142857164*G0_0_0_4_1_0_3_1_1 - 0.342857142857164*G0_0_0_4_1_0_4_1_0 - 0.342857142857164*G0_0_0_4_1_0_5_1_1 + 0.342857142857164*G0_0_0_5_1_1_0_0_0 + 0.342857142857164*G0_0_0_5_1_1_0_0_1 - 0.342857142857164*G0_0_0_5_1_1_1_0_0 - 0.342857142857164*G0_0_0_5_1_1_2_0_1 + 0.342857142857164*G0_0_0_5_1_1_3_1_0 + 0.342857142857164*G0_0_0_5_1_1_3_1_1 - 0.342857142857164*G0_0_0_5_1_1_4_1_0 - 0.342857142857164*G0_0_0_5_1_1_5_1_1 - 0.342857142857163*G0_0_1_0_0_0_0_0_0 - 0.342857142857163*G0_0_1_0_0_0_0_0_1 + 0.342857142857163*G0_0_1_0_0_0_1_0_0 + 0.342857142857163*G0_0_1_0_0_0_2_0_1 - 0.342857142857163*G0_0_1_0_0_0_3_1_0 - 0.342857142857163*G0_0_1_0_0_0_3_1_1 + 0.342857142857163*G0_0_1_0_0_0_4_1_0 + 0.342857142857163*G0_0_1_0_0_0_5_1_1 - 0.342857142857163*G0_0_1_0_0_1_0_0_0 - 0.342857142857163*G0_0_1_0_0_1_0_0_1 + 0.342857142857163*G0_0_1_0_0_1_1_0_0 + 0.342857142857163*G0_0_1_0_0_1_2_0_1 - 0.342857142857163*G0_0_1_0_0_1_3_1_0 - 0.342857142857163*G0_0_1_0_0_1_3_1_1 + 0.342857142857163*G0_0_1_0_0_1_4_1_0 + 0.342857142857163*G0_0_1_0_0_1_5_1_1 + 0.342857142857163*G0_0_1_1_0_0_0_0_0 + 0.342857142857163*G0_0_1_1_0_0_0_0_1 - 0.342857142857163*G0_0_1_1_0_0_1_0_0 - 0.342857142857163*G0_0_1_1_0_0_2_0_1 + 0.342857142857163*G0_0_1_1_0_0_3_1_0 + 0.342857142857163*G0_0_1_1_0_0_3_1_1 - 0.342857142857163*G0_0_1_1_0_0_4_1_0 - 0.342857142857163*G0_0_1_1_0_0_5_1_1 + 0.342857142857163*G0_0_1_2_0_1_0_0_0 + 0.342857142857163*G0_0_1_2_0_1_0_0_1 - 0.342857142857163*G0_0_1_2_0_1_1_0_0 - 0.342857142857163*G0_0_1_2_0_1_2_0_1 + 0.342857142857163*G0_0_1_2_0_1_3_1_0 + 0.342857142857163*G0_0_1_2_0_1_3_1_1 - 0.342857142857163*G0_0_1_2_0_1_4_1_0 - 0.342857142857163*G0_0_1_2_0_1_5_1_1 - 0.342857142857163*G0_0_1_3_1_0_0_0_0 - 0.342857142857163*G0_0_1_3_1_0_0_0_1 + 0.342857142857163*G0_0_1_3_1_0_1_0_0 + 0.342857142857163*G0_0_1_3_1_0_2_0_1 - 0.342857142857163*G0_0_1_3_1_0_3_1_0 - 0.342857142857163*G0_0_1_3_1_0_3_1_1 + 0.342857142857163*G0_0_1_3_1_0_4_1_0 + 0.342857142857163*G0_0_1_3_1_0_5_1_1 - 0.342857142857163*G0_0_1_3_1_1_0_0_0 - 0.342857142857163*G0_0_1_3_1_1_0_0_1 + 0.342857142857163*G0_0_1_3_1_1_1_0_0 + 0.342857142857163*G0_0_1_3_1_1_2_0_1 - 0.342857142857163*G0_0_1_3_1_1_3_1_0 - 0.342857142857163*G0_0_1_3_1_1_3_1_1 + 0.342857142857163*G0_0_1_3_1_1_4_1_0 + 0.342857142857163*G0_0_1_3_1_1_5_1_1 + 0.342857142857163*G0_0_1_4_1_0_0_0_0 + 0.342857142857163*G0_0_1_4_1_0_0_0_1 - 0.342857142857163*G0_0_1_4_1_0_1_0_0 - 0.342857142857163*G0_0_1_4_1_0_2_0_1 + 0.342857142857163*G0_0_1_4_1_0_3_1_0 + 0.342857142857163*G0_0_1_4_1_0_3_1_1 - 0.342857142857163*G0_0_1_4_1_0_4_1_0 - 0.342857142857163*G0_0_1_4_1_0_5_1_1 + 0.342857142857163*G0_0_1_5_1_1_0_0_0 + 0.342857142857163*G0_0_1_5_1_1_0_0_1 - 0.342857142857163*G0_0_1_5_1_1_1_0_0 - 0.342857142857163*G0_0_1_5_1_1_2_0_1 + 0.342857142857163*G0_0_1_5_1_1_3_1_0 + 0.342857142857163*G0_0_1_5_1_1_3_1_1 - 0.342857142857163*G0_0_1_5_1_1_4_1_0 - 0.342857142857163*G0_0_1_5_1_1_5_1_1 - 0.342857142857163*G0_1_0_0_0_0_0_0_0 - 0.342857142857163*G0_1_0_0_0_0_0_0_1 + 0.342857142857163*G0_1_0_0_0_0_1_0_0 + 0.342857142857163*G0_1_0_0_0_0_2_0_1 - 0.342857142857163*G0_1_0_0_0_0_3_1_0 - 0.342857142857163*G0_1_0_0_0_0_3_1_1 + 0.342857142857163*G0_1_0_0_0_0_4_1_0 + 0.342857142857163*G0_1_0_0_0_0_5_1_1 - 0.342857142857163*G0_1_0_0_0_1_0_0_0 - 0.342857142857163*G0_1_0_0_0_1_0_0_1 + 0.342857142857163*G0_1_0_0_0_1_1_0_0 + 0.342857142857163*G0_1_0_0_0_1_2_0_1 - 0.342857142857163*G0_1_0_0_0_1_3_1_0 - 0.342857142857163*G0_1_0_0_0_1_3_1_1 + 0.342857142857163*G0_1_0_0_0_1_4_1_0 + 0.342857142857163*G0_1_0_0_0_1_5_1_1 + 0.342857142857163*G0_1_0_1_0_0_0_0_0 + 0.342857142857163*G0_1_0_1_0_0_0_0_1 - 0.342857142857163*G0_1_0_1_0_0_1_0_0 - 0.342857142857163*G0_1_0_1_0_0_2_0_1 + 0.342857142857163*G0_1_0_1_0_0_3_1_0 + 0.342857142857163*G0_1_0_1_0_0_3_1_1 - 0.342857142857163*G0_1_0_1_0_0_4_1_0 - 0.342857142857163*G0_1_0_1_0_0_5_1_1 + 0.342857142857163*G0_1_0_2_0_1_0_0_0 + 0.342857142857163*G0_1_0_2_0_1_0_0_1 - 0.342857142857163*G0_1_0_2_0_1_1_0_0 - 0.342857142857163*G0_1_0_2_0_1_2_0_1 + 0.342857142857163*G0_1_0_2_0_1_3_1_0 + 0.342857142857163*G0_1_0_2_0_1_3_1_1 - 0.342857142857163*G0_1_0_2_0_1_4_1_0 - 0.342857142857163*G0_1_0_2_0_1_5_1_1 - 0.342857142857163*G0_1_0_3_1_0_0_0_0 - 0.342857142857163*G0_1_0_3_1_0_0_0_1 + 0.342857142857163*G0_1_0_3_1_0_1_0_0 + 0.342857142857163*G0_1_0_3_1_0_2_0_1 - 0.342857142857163*G0_1_0_3_1_0_3_1_0 - 0.342857142857163*G0_1_0_3_1_0_3_1_1 + 0.342857142857163*G0_1_0_3_1_0_4_1_0 + 0.342857142857163*G0_1_0_3_1_0_5_1_1 - 0.342857142857163*G0_1_0_3_1_1_0_0_0 - 0.342857142857163*G0_1_0_3_1_1_0_0_1 + 0.342857142857163*G0_1_0_3_1_1_1_0_0 + 0.342857142857163*G0_1_0_3_1_1_2_0_1 - 0.342857142857163*G0_1_0_3_1_1_3_1_0 - 0.342857142857163*G0_1_0_3_1_1_3_1_1 + 0.342857142857163*G0_1_0_3_1_1_4_1_0 + 0.342857142857163*G0_1_0_3_1_1_5_1_1 + 0.342857142857163*G0_1_0_4_1_0_0_0_0 + 0.342857142857163*G0_1_0_4_1_0_0_0_1 - 0.342857142857163*G0_1_0_4_1_0_1_0_0 - 0.342857142857163*G0_1_0_4_1_0_2_0_1 + 0.342857142857163*G0_1_0_4_1_0_3_1_0 + 0.342857142857163*G0_1_0_4_1_0_3_1_1 - 0.342857142857163*G0_1_0_4_1_0_4_1_0 - 0.342857142857163*G0_1_0_4_1_0_5_1_1 + 0.342857142857163*G0_1_0_5_1_1_0_0_0 + 0.342857142857163*G0_1_0_5_1_1_0_0_1 - 0.342857142857163*G0_1_0_5_1_1_1_0_0 - 0.342857142857163*G0_1_0_5_1_1_2_0_1 + 0.342857142857163*G0_1_0_5_1_1_3_1_0 + 0.342857142857163*G0_1_0_5_1_1_3_1_1 - 0.342857142857163*G0_1_0_5_1_1_4_1_0 - 0.342857142857163*G0_1_0_5_1_1_5_1_1;
    A[352] = 0.0;
    A[17] = 0.0;
    A[734] = 0.0;
    A[421] = -0.0846560846560889*G0_0_0_0_0_0_0_0_0 - 0.0846560846560889*G0_0_0_0_0_0_0_0_1 + 0.0846560846560889*G0_0_0_0_0_0_1_0_0 + 0.0846560846560889*G0_0_0_0_0_0_2_0_1 - 0.0846560846560889*G0_0_0_0_0_0_3_1_0 - 0.0846560846560889*G0_0_0_0_0_0_3_1_1 + 0.0846560846560889*G0_0_0_0_0_0_4_1_0 + 0.0846560846560889*G0_0_0_0_0_0_5_1_1 - 0.0846560846560889*G0_0_0_0_0_1_0_0_0 - 0.0846560846560889*G0_0_0_0_0_1_0_0_1 + 0.0846560846560889*G0_0_0_0_0_1_1_0_0 + 0.0846560846560889*G0_0_0_0_0_1_2_0_1 - 0.0846560846560889*G0_0_0_0_0_1_3_1_0 - 0.0846560846560889*G0_0_0_0_0_1_3_1_1 + 0.0846560846560889*G0_0_0_0_0_1_4_1_0 + 0.0846560846560889*G0_0_0_0_0_1_5_1_1 + 0.0846560846560889*G0_0_0_1_0_0_0_0_0 + 0.0846560846560889*G0_0_0_1_0_0_0_0_1 - 0.0846560846560889*G0_0_0_1_0_0_1_0_0 - 0.0846560846560889*G0_0_0_1_0_0_2_0_1 + 0.0846560846560889*G0_0_0_1_0_0_3_1_0 + 0.0846560846560889*G0_0_0_1_0_0_3_1_1 - 0.0846560846560889*G0_0_0_1_0_0_4_1_0 - 0.0846560846560889*G0_0_0_1_0_0_5_1_1 + 0.0846560846560889*G0_0_0_2_0_1_0_0_0 + 0.0846560846560889*G0_0_0_2_0_1_0_0_1 - 0.0846560846560889*G0_0_0_2_0_1_1_0_0 - 0.0846560846560889*G0_0_0_2_0_1_2_0_1 + 0.0846560846560889*G0_0_0_2_0_1_3_1_0 + 0.0846560846560889*G0_0_0_2_0_1_3_1_1 - 0.0846560846560889*G0_0_0_2_0_1_4_1_0 - 0.0846560846560889*G0_0_0_2_0_1_5_1_1 - 0.0846560846560889*G0_0_0_3_1_0_0_0_0 - 0.0846560846560889*G0_0_0_3_1_0_0_0_1 + 0.0846560846560889*G0_0_0_3_1_0_1_0_0 + 0.0846560846560889*G0_0_0_3_1_0_2_0_1 - 0.0846560846560889*G0_0_0_3_1_0_3_1_0 - 0.0846560846560889*G0_0_0_3_1_0_3_1_1 + 0.0846560846560889*G0_0_0_3_1_0_4_1_0 + 0.0846560846560889*G0_0_0_3_1_0_5_1_1 - 0.0846560846560889*G0_0_0_3_1_1_0_0_0 - 0.0846560846560889*G0_0_0_3_1_1_0_0_1 + 0.0846560846560889*G0_0_0_3_1_1_1_0_0 + 0.0846560846560889*G0_0_0_3_1_1_2_0_1 - 0.0846560846560889*G0_0_0_3_1_1_3_1_0 - 0.0846560846560889*G0_0_0_3_1_1_3_1_1 + 0.0846560846560889*G0_0_0_3_1_1_4_1_0 + 0.0846560846560889*G0_0_0_3_1_1_5_1_1 + 0.0846560846560889*G0_0_0_4_1_0_0_0_0 + 0.0846560846560889*G0_0_0_4_1_0_0_0_1 - 0.0846560846560889*G0_0_0_4_1_0_1_0_0 - 0.0846560846560889*G0_0_0_4_1_0_2_0_1 + 0.0846560846560889*G0_0_0_4_1_0_3_1_0 + 0.0846560846560889*G0_0_0_4_1_0_3_1_1 - 0.0846560846560889*G0_0_0_4_1_0_4_1_0 - 0.0846560846560889*G0_0_0_4_1_0_5_1_1 + 0.0846560846560889*G0_0_0_5_1_1_0_0_0 + 0.0846560846560889*G0_0_0_5_1_1_0_0_1 - 0.0846560846560889*G0_0_0_5_1_1_1_0_0 - 0.0846560846560889*G0_0_0_5_1_1_2_0_1 + 0.0846560846560889*G0_0_0_5_1_1_3_1_0 + 0.0846560846560889*G0_0_0_5_1_1_3_1_1 - 0.0846560846560889*G0_0_0_5_1_1_4_1_0 - 0.0846560846560889*G0_0_0_5_1_1_5_1_1;
    A[377] = 0.0;
    A[58] = 0.0;
    A[454] = 0.0;
    A[410] = 0.0;
    A[87] = 0.0;
    A[792] = 0.0;
    A[887] = -0.0846560846560837*G0_1_1_0_0_0_0_0_0 - 0.0846560846560837*G0_1_1_0_0_0_0_0_1 + 0.0846560846560837*G0_1_1_0_0_0_1_0_0 + 0.0846560846560837*G0_1_1_0_0_0_2_0_1 - 0.0846560846560837*G0_1_1_0_0_0_3_1_0 - 0.0846560846560837*G0_1_1_0_0_0_3_1_1 + 0.0846560846560837*G0_1_1_0_0_0_4_1_0 + 0.0846560846560837*G0_1_1_0_0_0_5_1_1 - 0.0846560846560837*G0_1_1_0_0_1_0_0_0 - 0.0846560846560837*G0_1_1_0_0_1_0_0_1 + 0.0846560846560837*G0_1_1_0_0_1_1_0_0 + 0.0846560846560837*G0_1_1_0_0_1_2_0_1 - 0.0846560846560837*G0_1_1_0_0_1_3_1_0 - 0.0846560846560837*G0_1_1_0_0_1_3_1_1 + 0.0846560846560837*G0_1_1_0_0_1_4_1_0 + 0.0846560846560837*G0_1_1_0_0_1_5_1_1 + 0.0846560846560837*G0_1_1_1_0_0_0_0_0 + 0.0846560846560837*G0_1_1_1_0_0_0_0_1 - 0.0846560846560837*G0_1_1_1_0_0_1_0_0 - 0.0846560846560837*G0_1_1_1_0_0_2_0_1 + 0.0846560846560837*G0_1_1_1_0_0_3_1_0 + 0.0846560846560837*G0_1_1_1_0_0_3_1_1 - 0.0846560846560837*G0_1_1_1_0_0_4_1_0 - 0.0846560846560837*G0_1_1_1_0_0_5_1_1 + 0.0846560846560837*G0_1_1_2_0_1_0_0_0 + 0.0846560846560837*G0_1_1_2_0_1_0_0_1 - 0.0846560846560837*G0_1_1_2_0_1_1_0_0 - 0.0846560846560837*G0_1_1_2_0_1_2_0_1 + 0.0846560846560837*G0_1_1_2_0_1_3_1_0 + 0.0846560846560837*G0_1_1_2_0_1_3_1_1 - 0.0846560846560837*G0_1_1_2_0_1_4_1_0 - 0.0846560846560837*G0_1_1_2_0_1_5_1_1 - 0.0846560846560837*G0_1_1_3_1_0_0_0_0 - 0.0846560846560837*G0_1_1_3_1_0_0_0_1 + 0.0846560846560837*G0_1_1_3_1_0_1_0_0 + 0.0846560846560837*G0_1_1_3_1_0_2_0_1 - 0.0846560846560837*G0_1_1_3_1_0_3_1_0 - 0.0846560846560837*G0_1_1_3_1_0_3_1_1 + 0.0846560846560837*G0_1_1_3_1_0_4_1_0 + 0.0846560846560837*G0_1_1_3_1_0_5_1_1 - 0.0846560846560837*G0_1_1_3_1_1_0_0_0 - 0.0846560846560837*G0_1_1_3_1_1_0_0_1 + 0.0846560846560837*G0_1_1_3_1_1_1_0_0 + 0.0846560846560837*G0_1_1_3_1_1_2_0_1 - 0.0846560846560837*G0_1_1_3_1_1_3_1_0 - 0.0846560846560837*G0_1_1_3_1_1_3_1_1 + 0.0846560846560837*G0_1_1_3_1_1_4_1_0 + 0.0846560846560837*G0_1_1_3_1_1_5_1_1 + 0.0846560846560837*G0_1_1_4_1_0_0_0_0 + 0.0846560846560837*G0_1_1_4_1_0_0_0_1 - 0.0846560846560837*G0_1_1_4_1_0_1_0_0 - 0.0846560846560837*G0_1_1_4_1_0_2_0_1 + 0.0846560846560837*G0_1_1_4_1_0_3_1_0 + 0.0846560846560837*G0_1_1_4_1_0_3_1_1 - 0.0846560846560837*G0_1_1_4_1_0_4_1_0 - 0.0846560846560837*G0_1_1_4_1_0_5_1_1 + 0.0846560846560837*G0_1_1_5_1_1_0_0_0 + 0.0846560846560837*G0_1_1_5_1_1_0_0_1 - 0.0846560846560837*G0_1_1_5_1_1_1_0_0 - 0.0846560846560837*G0_1_1_5_1_1_2_0_1 + 0.0846560846560837*G0_1_1_5_1_1_3_1_0 + 0.0846560846560837*G0_1_1_5_1_1_3_1_1 - 0.0846560846560837*G0_1_1_5_1_1_4_1_0 - 0.0846560846560837*G0_1_1_5_1_1_5_1_1;
    A[811] = 0.0;
    A[850] = 0.0;
    A[174] = 0.0;
    A[881] = 0.0;
    A[480] = 0.0;
    A[203] = 0.0;
    A[583] = 0.0;
    A[523] = 0.0;
    A[232] = 0.0;
    A[614] = 0.0;
    A[550] = 0.0;
    A[672] = 0.0;
    A[279] = A[530] + 1.82857142857145*G0_0_0_0_0_0_0_0_0 + 1.82857142857145*G0_0_0_0_0_0_0_0_1 - 1.82857142857145*G0_0_0_0_0_0_1_0_0 - 1.82857142857145*G0_0_0_0_0_0_2_0_1 + 1.82857142857145*G0_0_0_0_0_0_3_1_0 + 1.82857142857145*G0_0_0_0_0_0_3_1_1 - 1.82857142857145*G0_0_0_0_0_0_4_1_0 - 1.82857142857145*G0_0_0_0_0_0_5_1_1 + 1.82857142857145*G0_0_0_0_0_1_0_0_0 + 1.82857142857145*G0_0_0_0_0_1_0_0_1 - 1.82857142857145*G0_0_0_0_0_1_1_0_0 - 1.82857142857145*G0_0_0_0_0_1_2_0_1 + 1.82857142857145*G0_0_0_0_0_1_3_1_0 + 1.82857142857145*G0_0_0_0_0_1_3_1_1 - 1.82857142857145*G0_0_0_0_0_1_4_1_0 - 1.82857142857145*G0_0_0_0_0_1_5_1_1 - 1.82857142857145*G0_0_0_1_0_0_0_0_0 - 1.82857142857145*G0_0_0_1_0_0_0_0_1 + 1.82857142857145*G0_0_0_1_0_0_1_0_0 + 1.82857142857145*G0_0_0_1_0_0_2_0_1 - 1.82857142857145*G0_0_0_1_0_0_3_1_0 - 1.82857142857145*G0_0_0_1_0_0_3_1_1 + 1.82857142857145*G0_0_0_1_0_0_4_1_0 + 1.82857142857145*G0_0_0_1_0_0_5_1_1 - 1.82857142857145*G0_0_0_2_0_1_0_0_0 - 1.82857142857145*G0_0_0_2_0_1_0_0_1 + 1.82857142857145*G0_0_0_2_0_1_1_0_0 + 1.82857142857145*G0_0_0_2_0_1_2_0_1 - 1.82857142857145*G0_0_0_2_0_1_3_1_0 - 1.82857142857145*G0_0_0_2_0_1_3_1_1 + 1.82857142857145*G0_0_0_2_0_1_4_1_0 + 1.82857142857145*G0_0_0_2_0_1_5_1_1 + 1.82857142857145*G0_0_0_3_1_0_0_0_0 + 1.82857142857145*G0_0_0_3_1_0_0_0_1 - 1.82857142857145*G0_0_0_3_1_0_1_0_0 - 1.82857142857145*G0_0_0_3_1_0_2_0_1 + 1.82857142857145*G0_0_0_3_1_0_3_1_0 + 1.82857142857145*G0_0_0_3_1_0_3_1_1 - 1.82857142857145*G0_0_0_3_1_0_4_1_0 - 1.82857142857145*G0_0_0_3_1_0_5_1_1 + 1.82857142857145*G0_0_0_3_1_1_0_0_0 + 1.82857142857145*G0_0_0_3_1_1_0_0_1 - 1.82857142857145*G0_0_0_3_1_1_1_0_0 - 1.82857142857145*G0_0_0_3_1_1_2_0_1 + 1.82857142857145*G0_0_0_3_1_1_3_1_0 + 1.82857142857145*G0_0_0_3_1_1_3_1_1 - 1.82857142857145*G0_0_0_3_1_1_4_1_0 - 1.82857142857145*G0_0_0_3_1_1_5_1_1 - 1.82857142857145*G0_0_0_4_1_0_0_0_0 - 1.82857142857145*G0_0_0_4_1_0_0_0_1 + 1.82857142857145*G0_0_0_4_1_0_1_0_0 + 1.82857142857145*G0_0_0_4_1_0_2_0_1 - 1.82857142857145*G0_0_0_4_1_0_3_1_0 - 1.82857142857145*G0_0_0_4_1_0_3_1_1 + 1.82857142857145*G0_0_0_4_1_0_4_1_0 + 1.82857142857145*G0_0_0_4_1_0_5_1_1 - 1.82857142857145*G0_0_0_5_1_1_0_0_0 - 1.82857142857145*G0_0_0_5_1_1_0_0_1 + 1.82857142857145*G0_0_0_5_1_1_1_0_0 + 1.82857142857145*G0_0_0_5_1_1_2_0_1 - 1.82857142857145*G0_0_0_5_1_1_3_1_0 - 1.82857142857145*G0_0_0_5_1_1_3_1_1 + 1.82857142857145*G0_0_0_5_1_1_4_1_0 + 1.82857142857145*G0_0_0_5_1_1_5_1_1 + 0.778835978835992*G0_0_1_0_0_0_0_0_0 + 0.778835978835992*G0_0_1_0_0_0_0_0_1 - 0.778835978835992*G0_0_1_0_0_0_1_0_0 - 0.778835978835992*G0_0_1_0_0_0_2_0_1 + 0.778835978835992*G0_0_1_0_0_0_3_1_0 + 0.778835978835992*G0_0_1_0_0_0_3_1_1 - 0.778835978835992*G0_0_1_0_0_0_4_1_0 - 0.778835978835992*G0_0_1_0_0_0_5_1_1 + 0.778835978835992*G0_0_1_0_0_1_0_0_0 + 0.778835978835992*G0_0_1_0_0_1_0_0_1 - 0.778835978835992*G0_0_1_0_0_1_1_0_0 - 0.778835978835992*G0_0_1_0_0_1_2_0_1 + 0.778835978835992*G0_0_1_0_0_1_3_1_0 + 0.778835978835992*G0_0_1_0_0_1_3_1_1 - 0.778835978835992*G0_0_1_0_0_1_4_1_0 - 0.778835978835992*G0_0_1_0_0_1_5_1_1 - 0.778835978835992*G0_0_1_1_0_0_0_0_0 - 0.778835978835992*G0_0_1_1_0_0_0_0_1 + 0.778835978835992*G0_0_1_1_0_0_1_0_0 + 0.778835978835992*G0_0_1_1_0_0_2_0_1 - 0.778835978835992*G0_0_1_1_0_0_3_1_0 - 0.778835978835992*G0_0_1_1_0_0_3_1_1 + 0.778835978835992*G0_0_1_1_0_0_4_1_0 + 0.778835978835992*G0_0_1_1_0_0_5_1_1 - 0.778835978835992*G0_0_1_2_0_1_0_0_0 - 0.778835978835992*G0_0_1_2_0_1_0_0_1 + 0.778835978835992*G0_0_1_2_0_1_1_0_0 + 0.778835978835992*G0_0_1_2_0_1_2_0_1 - 0.778835978835992*G0_0_1_2_0_1_3_1_0 - 0.778835978835992*G0_0_1_2_0_1_3_1_1 + 0.778835978835992*G0_0_1_2_0_1_4_1_0 + 0.778835978835992*G0_0_1_2_0_1_5_1_1 + 0.778835978835992*G0_0_1_3_1_0_0_0_0 + 0.778835978835992*G0_0_1_3_1_0_0_0_1 - 0.778835978835992*G0_0_1_3_1_0_1_0_0 - 0.778835978835992*G0_0_1_3_1_0_2_0_1 + 0.778835978835992*G0_0_1_3_1_0_3_1_0 + 0.778835978835992*G0_0_1_3_1_0_3_1_1 - 0.778835978835992*G0_0_1_3_1_0_4_1_0 - 0.778835978835992*G0_0_1_3_1_0_5_1_1 + 0.778835978835992*G0_0_1_3_1_1_0_0_0 + 0.778835978835992*G0_0_1_3_1_1_0_0_1 - 0.778835978835992*G0_0_1_3_1_1_1_0_0 - 0.778835978835992*G0_0_1_3_1_1_2_0_1 + 0.778835978835992*G0_0_1_3_1_1_3_1_0 + 0.778835978835992*G0_0_1_3_1_1_3_1_1 - 0.778835978835992*G0_0_1_3_1_1_4_1_0 - 0.778835978835992*G0_0_1_3_1_1_5_1_1 - 0.778835978835992*G0_0_1_4_1_0_0_0_0 - 0.778835978835992*G0_0_1_4_1_0_0_0_1 + 0.778835978835992*G0_0_1_4_1_0_1_0_0 + 0.778835978835992*G0_0_1_4_1_0_2_0_1 - 0.778835978835992*G0_0_1_4_1_0_3_1_0 - 0.778835978835992*G0_0_1_4_1_0_3_1_1 + 0.778835978835992*G0_0_1_4_1_0_4_1_0 + 0.778835978835992*G0_0_1_4_1_0_5_1_1 - 0.778835978835992*G0_0_1_5_1_1_0_0_0 - 0.778835978835992*G0_0_1_5_1_1_0_0_1 + 0.778835978835992*G0_0_1_5_1_1_1_0_0 + 0.778835978835992*G0_0_1_5_1_1_2_0_1 - 0.778835978835992*G0_0_1_5_1_1_3_1_0 - 0.778835978835992*G0_0_1_5_1_1_3_1_1 + 0.778835978835992*G0_0_1_5_1_1_4_1_0 + 0.778835978835992*G0_0_1_5_1_1_5_1_1 + 1.70158730158732*G0_1_1_0_0_0_0_0_0 + 1.70158730158732*G0_1_1_0_0_0_0_0_1 - 1.70158730158732*G0_1_1_0_0_0_1_0_0 - 1.70158730158732*G0_1_1_0_0_0_2_0_1 + 1.70158730158732*G0_1_1_0_0_0_3_1_0 + 1.70158730158732*G0_1_1_0_0_0_3_1_1 - 1.70158730158732*G0_1_1_0_0_0_4_1_0 - 1.70158730158732*G0_1_1_0_0_0_5_1_1 + 1.70158730158732*G0_1_1_0_0_1_0_0_0 + 1.70158730158732*G0_1_1_0_0_1_0_0_1 - 1.70158730158732*G0_1_1_0_0_1_1_0_0 - 1.70158730158732*G0_1_1_0_0_1_2_0_1 + 1.70158730158732*G0_1_1_0_0_1_3_1_0 + 1.70158730158732*G0_1_1_0_0_1_3_1_1 - 1.70158730158732*G0_1_1_0_0_1_4_1_0 - 1.70158730158732*G0_1_1_0_0_1_5_1_1 - 1.70158730158732*G0_1_1_1_0_0_0_0_0 - 1.70158730158732*G0_1_1_1_0_0_0_0_1 + 1.70158730158732*G0_1_1_1_0_0_1_0_0 + 1.70158730158732*G0_1_1_1_0_0_2_0_1 - 1.70158730158732*G0_1_1_1_0_0_3_1_0 - 1.70158730158732*G0_1_1_1_0_0_3_1_1 + 1.70158730158732*G0_1_1_1_0_0_4_1_0 + 1.70158730158732*G0_1_1_1_0_0_5_1_1 - 1.70158730158732*G0_1_1_2_0_1_0_0_0 - 1.70158730158732*G0_1_1_2_0_1_0_0_1 + 1.70158730158732*G0_1_1_2_0_1_1_0_0 + 1.70158730158732*G0_1_1_2_0_1_2_0_1 - 1.70158730158732*G0_1_1_2_0_1_3_1_0 - 1.70158730158732*G0_1_1_2_0_1_3_1_1 + 1.70158730158732*G0_1_1_2_0_1_4_1_0 + 1.70158730158732*G0_1_1_2_0_1_5_1_1 + 1.70158730158732*G0_1_1_3_1_0_0_0_0 + 1.70158730158732*G0_1_1_3_1_0_0_0_1 - 1.70158730158732*G0_1_1_3_1_0_1_0_0 - 1.70158730158732*G0_1_1_3_1_0_2_0_1 + 1.70158730158732*G0_1_1_3_1_0_3_1_0 + 1.70158730158732*G0_1_1_3_1_0_3_1_1 - 1.70158730158732*G0_1_1_3_1_0_4_1_0 - 1.70158730158732*G0_1_1_3_1_0_5_1_1 + 1.70158730158732*G0_1_1_3_1_1_0_0_0 + 1.70158730158732*G0_1_1_3_1_1_0_0_1 - 1.70158730158732*G0_1_1_3_1_1_1_0_0 - 1.70158730158732*G0_1_1_3_1_1_2_0_1 + 1.70158730158732*G0_1_1_3_1_1_3_1_0 + 1.70158730158732*G0_1_1_3_1_1_3_1_1 - 1.70158730158732*G0_1_1_3_1_1_4_1_0 - 1.70158730158732*G0_1_1_3_1_1_5_1_1 - 1.70158730158732*G0_1_1_4_1_0_0_0_0 - 1.70158730158732*G0_1_1_4_1_0_0_0_1 + 1.70158730158732*G0_1_1_4_1_0_1_0_0 + 1.70158730158732*G0_1_1_4_1_0_2_0_1 - 1.70158730158732*G0_1_1_4_1_0_3_1_0 - 1.70158730158732*G0_1_1_4_1_0_3_1_1 + 1.70158730158732*G0_1_1_4_1_0_4_1_0 + 1.70158730158732*G0_1_1_4_1_0_5_1_1 - 1.70158730158732*G0_1_1_5_1_1_0_0_0 - 1.70158730158732*G0_1_1_5_1_1_0_0_1 + 1.70158730158732*G0_1_1_5_1_1_1_0_0 + 1.70158730158732*G0_1_1_5_1_1_2_0_1 - 1.70158730158732*G0_1_1_5_1_1_3_1_0 - 1.70158730158732*G0_1_1_5_1_1_3_1_1 + 1.70158730158732*G0_1_1_5_1_1_4_1_0 + 1.70158730158732*G0_1_1_5_1_1_5_1_1;
    A[699] = 0.0;
    A[258] = 0.0;
    A[345] = 0.0;
    A[289] = 0.0;
    A[51] = 0.0;
    A[463] = 0.0;
    A[403] = 5.68888888888896*G0_0_0_0_0_0_0_0_0 + 5.68888888888896*G0_0_0_0_0_0_0_0_1 - 5.68888888888896*G0_0_0_0_0_0_1_0_0 - 5.68888888888896*G0_0_0_0_0_0_2_0_1 + 5.68888888888896*G0_0_0_0_0_0_3_1_0 + 5.68888888888896*G0_0_0_0_0_0_3_1_1 - 5.68888888888896*G0_0_0_0_0_0_4_1_0 - 5.68888888888896*G0_0_0_0_0_0_5_1_1 + 5.68888888888896*G0_0_0_0_0_1_0_0_0 + 5.68888888888896*G0_0_0_0_0_1_0_0_1 - 5.68888888888896*G0_0_0_0_0_1_1_0_0 - 5.68888888888896*G0_0_0_0_0_1_2_0_1 + 5.68888888888896*G0_0_0_0_0_1_3_1_0 + 5.68888888888896*G0_0_0_0_0_1_3_1_1 - 5.68888888888896*G0_0_0_0_0_1_4_1_0 - 5.68888888888896*G0_0_0_0_0_1_5_1_1 - 5.68888888888896*G0_0_0_1_0_0_0_0_0 - 5.68888888888896*G0_0_0_1_0_0_0_0_1 + 5.68888888888896*G0_0_0_1_0_0_1_0_0 + 5.68888888888896*G0_0_0_1_0_0_2_0_1 - 5.68888888888896*G0_0_0_1_0_0_3_1_0 - 5.68888888888896*G0_0_0_1_0_0_3_1_1 + 5.68888888888896*G0_0_0_1_0_0_4_1_0 + 5.68888888888896*G0_0_0_1_0_0_5_1_1 - 5.68888888888896*G0_0_0_2_0_1_0_0_0 - 5.68888888888896*G0_0_0_2_0_1_0_0_1 + 5.68888888888896*G0_0_0_2_0_1_1_0_0 + 5.68888888888896*G0_0_0_2_0_1_2_0_1 - 5.68888888888896*G0_0_0_2_0_1_3_1_0 - 5.68888888888896*G0_0_0_2_0_1_3_1_1 + 5.68888888888896*G0_0_0_2_0_1_4_1_0 + 5.68888888888896*G0_0_0_2_0_1_5_1_1 + 5.68888888888896*G0_0_0_3_1_0_0_0_0 + 5.68888888888896*G0_0_0_3_1_0_0_0_1 - 5.68888888888896*G0_0_0_3_1_0_1_0_0 - 5.68888888888896*G0_0_0_3_1_0_2_0_1 + 5.68888888888896*G0_0_0_3_1_0_3_1_0 + 5.68888888888896*G0_0_0_3_1_0_3_1_1 - 5.68888888888896*G0_0_0_3_1_0_4_1_0 - 5.68888888888896*G0_0_0_3_1_0_5_1_1 + 5.68888888888896*G0_0_0_3_1_1_0_0_0 + 5.68888888888896*G0_0_0_3_1_1_0_0_1 - 5.68888888888896*G0_0_0_3_1_1_1_0_0 - 5.68888888888896*G0_0_0_3_1_1_2_0_1 + 5.68888888888896*G0_0_0_3_1_1_3_1_0 + 5.68888888888896*G0_0_0_3_1_1_3_1_1 - 5.68888888888896*G0_0_0_3_1_1_4_1_0 - 5.68888888888896*G0_0_0_3_1_1_5_1_1 - 5.68888888888896*G0_0_0_4_1_0_0_0_0 - 5.68888888888896*G0_0_0_4_1_0_0_0_1 + 5.68888888888896*G0_0_0_4_1_0_1_0_0 + 5.68888888888896*G0_0_0_4_1_0_2_0_1 - 5.68888888888896*G0_0_0_4_1_0_3_1_0 - 5.68888888888896*G0_0_0_4_1_0_3_1_1 + 5.68888888888896*G0_0_0_4_1_0_4_1_0 + 5.68888888888896*G0_0_0_4_1_0_5_1_1 - 5.68888888888896*G0_0_0_5_1_1_0_0_0 - 5.68888888888896*G0_0_0_5_1_1_0_0_1 + 5.68888888888896*G0_0_0_5_1_1_1_0_0 + 5.68888888888896*G0_0_0_5_1_1_2_0_1 - 5.68888888888896*G0_0_0_5_1_1_3_1_0 - 5.68888888888896*G0_0_0_5_1_1_3_1_1 + 5.68888888888896*G0_0_0_5_1_1_4_1_0 + 5.68888888888896*G0_0_0_5_1_1_5_1_1 + 2.8444444444445*G0_0_1_0_0_0_0_0_0 + 2.8444444444445*G0_0_1_0_0_0_0_0_1 - 2.8444444444445*G0_0_1_0_0_0_1_0_0 - 2.8444444444445*G0_0_1_0_0_0_2_0_1 + 2.8444444444445*G0_0_1_0_0_0_3_1_0 + 2.8444444444445*G0_0_1_0_0_0_3_1_1 - 2.8444444444445*G0_0_1_0_0_0_4_1_0 - 2.8444444444445*G0_0_1_0_0_0_5_1_1 + 2.8444444444445*G0_0_1_0_0_1_0_0_0 + 2.8444444444445*G0_0_1_0_0_1_0_0_1 - 2.8444444444445*G0_0_1_0_0_1_1_0_0 - 2.8444444444445*G0_0_1_0_0_1_2_0_1 + 2.8444444444445*G0_0_1_0_0_1_3_1_0 + 2.8444444444445*G0_0_1_0_0_1_3_1_1 - 2.8444444444445*G0_0_1_0_0_1_4_1_0 - 2.8444444444445*G0_0_1_0_0_1_5_1_1 - 2.8444444444445*G0_0_1_1_0_0_0_0_0 - 2.8444444444445*G0_0_1_1_0_0_0_0_1 + 2.8444444444445*G0_0_1_1_0_0_1_0_0 + 2.8444444444445*G0_0_1_1_0_0_2_0_1 - 2.8444444444445*G0_0_1_1_0_0_3_1_0 - 2.8444444444445*G0_0_1_1_0_0_3_1_1 + 2.8444444444445*G0_0_1_1_0_0_4_1_0 + 2.8444444444445*G0_0_1_1_0_0_5_1_1 - 2.8444444444445*G0_0_1_2_0_1_0_0_0 - 2.8444444444445*G0_0_1_2_0_1_0_0_1 + 2.8444444444445*G0_0_1_2_0_1_1_0_0 + 2.8444444444445*G0_0_1_2_0_1_2_0_1 - 2.8444444444445*G0_0_1_2_0_1_3_1_0 - 2.8444444444445*G0_0_1_2_0_1_3_1_1 + 2.8444444444445*G0_0_1_2_0_1_4_1_0 + 2.8444444444445*G0_0_1_2_0_1_5_1_1 + 2.8444444444445*G0_0_1_3_1_0_0_0_0 + 2.8444444444445*G0_0_1_3_1_0_0_0_1 - 2.8444444444445*G0_0_1_3_1_0_1_0_0 - 2.8444444444445*G0_0_1_3_1_0_2_0_1 + 2.8444444444445*G0_0_1_3_1_0_3_1_0 + 2.8444444444445*G0_0_1_3_1_0_3_1_1 - 2.8444444444445*G0_0_1_3_1_0_4_1_0 - 2.8444444444445*G0_0_1_3_1_0_5_1_1 + 2.8444444444445*G0_0_1_3_1_1_0_0_0 + 2.8444444444445*G0_0_1_3_1_1_0_0_1 - 2.8444444444445*G0_0_1_3_1_1_1_0_0 - 2.8444444444445*G0_0_1_3_1_1_2_0_1 + 2.8444444444445*G0_0_1_3_1_1_3_1_0 + 2.8444444444445*G0_0_1_3_1_1_3_1_1 - 2.8444444444445*G0_0_1_3_1_1_4_1_0 - 2.8444444444445*G0_0_1_3_1_1_5_1_1 - 2.8444444444445*G0_0_1_4_1_0_0_0_0 - 2.8444444444445*G0_0_1_4_1_0_0_0_1 + 2.8444444444445*G0_0_1_4_1_0_1_0_0 + 2.8444444444445*G0_0_1_4_1_0_2_0_1 - 2.8444444444445*G0_0_1_4_1_0_3_1_0 - 2.8444444444445*G0_0_1_4_1_0_3_1_1 + 2.8444444444445*G0_0_1_4_1_0_4_1_0 + 2.8444444444445*G0_0_1_4_1_0_5_1_1 - 2.8444444444445*G0_0_1_5_1_1_0_0_0 - 2.8444444444445*G0_0_1_5_1_1_0_0_1 + 2.8444444444445*G0_0_1_5_1_1_1_0_0 + 2.8444444444445*G0_0_1_5_1_1_2_0_1 - 2.8444444444445*G0_0_1_5_1_1_3_1_0 - 2.8444444444445*G0_0_1_5_1_1_3_1_1 + 2.8444444444445*G0_0_1_5_1_1_4_1_0 + 2.8444444444445*G0_0_1_5_1_1_5_1_1 + 2.8444444444445*G0_1_0_0_0_0_0_0_0 + 2.8444444444445*G0_1_0_0_0_0_0_0_1 - 2.8444444444445*G0_1_0_0_0_0_1_0_0 - 2.8444444444445*G0_1_0_0_0_0_2_0_1 + 2.8444444444445*G0_1_0_0_0_0_3_1_0 + 2.8444444444445*G0_1_0_0_0_0_3_1_1 - 2.8444444444445*G0_1_0_0_0_0_4_1_0 - 2.8444444444445*G0_1_0_0_0_0_5_1_1 + 2.8444444444445*G0_1_0_0_0_1_0_0_0 + 2.8444444444445*G0_1_0_0_0_1_0_0_1 - 2.8444444444445*G0_1_0_0_0_1_1_0_0 - 2.8444444444445*G0_1_0_0_0_1_2_0_1 + 2.8444444444445*G0_1_0_0_0_1_3_1_0 + 2.8444444444445*G0_1_0_0_0_1_3_1_1 - 2.8444444444445*G0_1_0_0_0_1_4_1_0 - 2.8444444444445*G0_1_0_0_0_1_5_1_1 - 2.8444444444445*G0_1_0_1_0_0_0_0_0 - 2.8444444444445*G0_1_0_1_0_0_0_0_1 + 2.8444444444445*G0_1_0_1_0_0_1_0_0 + 2.8444444444445*G0_1_0_1_0_0_2_0_1 - 2.8444444444445*G0_1_0_1_0_0_3_1_0 - 2.8444444444445*G0_1_0_1_0_0_3_1_1 + 2.8444444444445*G0_1_0_1_0_0_4_1_0 + 2.8444444444445*G0_1_0_1_0_0_5_1_1 - 2.8444444444445*G0_1_0_2_0_1_0_0_0 - 2.8444444444445*G0_1_0_2_0_1_0_0_1 + 2.8444444444445*G0_1_0_2_0_1_1_0_0 + 2.8444444444445*G0_1_0_2_0_1_2_0_1 - 2.8444444444445*G0_1_0_2_0_1_3_1_0 - 2.8444444444445*G0_1_0_2_0_1_3_1_1 + 2.8444444444445*G0_1_0_2_0_1_4_1_0 + 2.8444444444445*G0_1_0_2_0_1_5_1_1 + 2.8444444444445*G0_1_0_3_1_0_0_0_0 + 2.8444444444445*G0_1_0_3_1_0_0_0_1 - 2.8444444444445*G0_1_0_3_1_0_1_0_0 - 2.8444444444445*G0_1_0_3_1_0_2_0_1 + 2.8444444444445*G0_1_0_3_1_0_3_1_0 + 2.8444444444445*G0_1_0_3_1_0_3_1_1 - 2.8444444444445*G0_1_0_3_1_0_4_1_0 - 2.8444444444445*G0_1_0_3_1_0_5_1_1 + 2.8444444444445*G0_1_0_3_1_1_0_0_0 + 2.8444444444445*G0_1_0_3_1_1_0_0_1 - 2.8444444444445*G0_1_0_3_1_1_1_0_0 - 2.8444444444445*G0_1_0_3_1_1_2_0_1 + 2.8444444444445*G0_1_0_3_1_1_3_1_0 + 2.8444444444445*G0_1_0_3_1_1_3_1_1 - 2.8444444444445*G0_1_0_3_1_1_4_1_0 - 2.8444444444445*G0_1_0_3_1_1_5_1_1 - 2.8444444444445*G0_1_0_4_1_0_0_0_0 - 2.8444444444445*G0_1_0_4_1_0_0_0_1 + 2.8444444444445*G0_1_0_4_1_0_1_0_0 + 2.8444444444445*G0_1_0_4_1_0_2_0_1 - 2.8444444444445*G0_1_0_4_1_0_3_1_0 - 2.8444444444445*G0_1_0_4_1_0_3_1_1 + 2.8444444444445*G0_1_0_4_1_0_4_1_0 + 2.8444444444445*G0_1_0_4_1_0_5_1_1 - 2.8444444444445*G0_1_0_5_1_1_0_0_0 - 2.8444444444445*G0_1_0_5_1_1_0_0_1 + 2.8444444444445*G0_1_0_5_1_1_1_0_0 + 2.8444444444445*G0_1_0_5_1_1_2_0_1 - 2.8444444444445*G0_1_0_5_1_1_3_1_0 - 2.8444444444445*G0_1_0_5_1_1_3_1_1 + 2.8444444444445*G0_1_0_5_1_1_4_1_0 + 2.8444444444445*G0_1_0_5_1_1_5_1_1 + 5.688888888889*G0_1_1_0_0_0_0_0_0 + 5.688888888889*G0_1_1_0_0_0_0_0_1 - 5.688888888889*G0_1_1_0_0_0_1_0_0 - 5.688888888889*G0_1_1_0_0_0_2_0_1 + 5.688888888889*G0_1_1_0_0_0_3_1_0 + 5.688888888889*G0_1_1_0_0_0_3_1_1 - 5.688888888889*G0_1_1_0_0_0_4_1_0 - 5.688888888889*G0_1_1_0_0_0_5_1_1 + 5.688888888889*G0_1_1_0_0_1_0_0_0 + 5.688888888889*G0_1_1_0_0_1_0_0_1 - 5.688888888889*G0_1_1_0_0_1_1_0_0 - 5.688888888889*G0_1_1_0_0_1_2_0_1 + 5.688888888889*G0_1_1_0_0_1_3_1_0 + 5.688888888889*G0_1_1_0_0_1_3_1_1 - 5.688888888889*G0_1_1_0_0_1_4_1_0 - 5.688888888889*G0_1_1_0_0_1_5_1_1 - 5.688888888889*G0_1_1_1_0_0_0_0_0 - 5.688888888889*G0_1_1_1_0_0_0_0_1 + 5.688888888889*G0_1_1_1_0_0_1_0_0 + 5.688888888889*G0_1_1_1_0_0_2_0_1 - 5.688888888889*G0_1_1_1_0_0_3_1_0 - 5.688888888889*G0_1_1_1_0_0_3_1_1 + 5.688888888889*G0_1_1_1_0_0_4_1_0 + 5.688888888889*G0_1_1_1_0_0_5_1_1 - 5.688888888889*G0_1_1_2_0_1_0_0_0 - 5.688888888889*G0_1_1_2_0_1_0_0_1 + 5.688888888889*G0_1_1_2_0_1_1_0_0 + 5.688888888889*G0_1_1_2_0_1_2_0_1 - 5.688888888889*G0_1_1_2_0_1_3_1_0 - 5.688888888889*G0_1_1_2_0_1_3_1_1 + 5.688888888889*G0_1_1_2_0_1_4_1_0 + 5.688888888889*G0_1_1_2_0_1_5_1_1 + 5.688888888889*G0_1_1_3_1_0_0_0_0 + 5.688888888889*G0_1_1_3_1_0_0_0_1 - 5.688888888889*G0_1_1_3_1_0_1_0_0 - 5.688888888889*G0_1_1_3_1_0_2_0_1 + 5.688888888889*G0_1_1_3_1_0_3_1_0 + 5.688888888889*G0_1_1_3_1_0_3_1_1 - 5.688888888889*G0_1_1_3_1_0_4_1_0 - 5.688888888889*G0_1_1_3_1_0_5_1_1 + 5.688888888889*G0_1_1_3_1_1_0_0_0 + 5.688888888889*G0_1_1_3_1_1_0_0_1 - 5.688888888889*G0_1_1_3_1_1_1_0_0 - 5.688888888889*G0_1_1_3_1_1_2_0_1 + 5.688888888889*G0_1_1_3_1_1_3_1_0 + 5.688888888889*G0_1_1_3_1_1_3_1_1 - 5.688888888889*G0_1_1_3_1_1_4_1_0 - 5.688888888889*G0_1_1_3_1_1_5_1_1 - 5.688888888889*G0_1_1_4_1_0_0_0_0 - 5.688888888889*G0_1_1_4_1_0_0_0_1 + 5.688888888889*G0_1_1_4_1_0_1_0_0 + 5.688888888889*G0_1_1_4_1_0_2_0_1 - 5.688888888889*G0_1_1_4_1_0_3_1_0 - 5.688888888889*G0_1_1_4_1_0_3_1_1 + 5.688888888889*G0_1_1_4_1_0_4_1_0 + 5.688888888889*G0_1_1_4_1_0_5_1_1 - 5.688888888889*G0_1_1_5_1_1_0_0_0 - 5.688888888889*G0_1_1_5_1_1_0_0_1 + 5.688888888889*G0_1_1_5_1_1_1_0_0 + 5.688888888889*G0_1_1_5_1_1_2_0_1 - 5.688888888889*G0_1_1_5_1_1_3_1_0 - 5.688888888889*G0_1_1_5_1_1_3_1_1 + 5.688888888889*G0_1_1_5_1_1_4_1_0 + 5.688888888889*G0_1_1_5_1_1_5_1_1;
    A[78] = 0.0;
    A[803] = A[716];
    A[816] = 0.0;
    A[45] = 0.0;
    A[841] = 0.0;
    A[72] = A[887];
    A[874] = 0.0;
    A[107] = 0.0;
    A[487] = 0.0;
    A[516] = 0.0;
    A[225] = 0.0;
    A[545] = 0.0;
    A[509] = A[421];
    A[638] = 0.0;
    A[534] = -0.500000000000032*A[887];
    A[92] = -A[534] + 0.203174603174604*G0_0_1_0_0_0_0_0_0 + 0.203174603174604*G0_0_1_0_0_0_0_0_1 - 0.203174603174604*G0_0_1_0_0_0_1_0_0 - 0.203174603174604*G0_0_1_0_0_0_2_0_1 + 0.203174603174604*G0_0_1_0_0_0_3_1_0 + 0.203174603174604*G0_0_1_0_0_0_3_1_1 - 0.203174603174604*G0_0_1_0_0_0_4_1_0 - 0.203174603174604*G0_0_1_0_0_0_5_1_1 + 0.203174603174604*G0_0_1_0_0_1_0_0_0 + 0.203174603174604*G0_0_1_0_0_1_0_0_1 - 0.203174603174604*G0_0_1_0_0_1_1_0_0 - 0.203174603174604*G0_0_1_0_0_1_2_0_1 + 0.203174603174604*G0_0_1_0_0_1_3_1_0 + 0.203174603174604*G0_0_1_0_0_1_3_1_1 - 0.203174603174604*G0_0_1_0_0_1_4_1_0 - 0.203174603174604*G0_0_1_0_0_1_5_1_1 - 0.203174603174604*G0_0_1_1_0_0_0_0_0 - 0.203174603174604*G0_0_1_1_0_0_0_0_1 + 0.203174603174604*G0_0_1_1_0_0_1_0_0 + 0.203174603174604*G0_0_1_1_0_0_2_0_1 - 0.203174603174604*G0_0_1_1_0_0_3_1_0 - 0.203174603174604*G0_0_1_1_0_0_3_1_1 + 0.203174603174604*G0_0_1_1_0_0_4_1_0 + 0.203174603174604*G0_0_1_1_0_0_5_1_1 - 0.203174603174604*G0_0_1_2_0_1_0_0_0 - 0.203174603174604*G0_0_1_2_0_1_0_0_1 + 0.203174603174604*G0_0_1_2_0_1_1_0_0 + 0.203174603174604*G0_0_1_2_0_1_2_0_1 - 0.203174603174604*G0_0_1_2_0_1_3_1_0 - 0.203174603174604*G0_0_1_2_0_1_3_1_1 + 0.203174603174604*G0_0_1_2_0_1_4_1_0 + 0.203174603174604*G0_0_1_2_0_1_5_1_1 + 0.203174603174604*G0_0_1_3_1_0_0_0_0 + 0.203174603174604*G0_0_1_3_1_0_0_0_1 - 0.203174603174604*G0_0_1_3_1_0_1_0_0 - 0.203174603174604*G0_0_1_3_1_0_2_0_1 + 0.203174603174604*G0_0_1_3_1_0_3_1_0 + 0.203174603174604*G0_0_1_3_1_0_3_1_1 - 0.203174603174604*G0_0_1_3_1_0_4_1_0 - 0.203174603174604*G0_0_1_3_1_0_5_1_1 + 0.203174603174604*G0_0_1_3_1_1_0_0_0 + 0.203174603174604*G0_0_1_3_1_1_0_0_1 - 0.203174603174604*G0_0_1_3_1_1_1_0_0 - 0.203174603174604*G0_0_1_3_1_1_2_0_1 + 0.203174603174604*G0_0_1_3_1_1_3_1_0 + 0.203174603174604*G0_0_1_3_1_1_3_1_1 - 0.203174603174604*G0_0_1_3_1_1_4_1_0 - 0.203174603174604*G0_0_1_3_1_1_5_1_1 - 0.203174603174604*G0_0_1_4_1_0_0_0_0 - 0.203174603174604*G0_0_1_4_1_0_0_0_1 + 0.203174603174604*G0_0_1_4_1_0_1_0_0 + 0.203174603174604*G0_0_1_4_1_0_2_0_1 - 0.203174603174604*G0_0_1_4_1_0_3_1_0 - 0.203174603174604*G0_0_1_4_1_0_3_1_1 + 0.203174603174604*G0_0_1_4_1_0_4_1_0 + 0.203174603174604*G0_0_1_4_1_0_5_1_1 - 0.203174603174604*G0_0_1_5_1_1_0_0_0 - 0.203174603174604*G0_0_1_5_1_1_0_0_1 + 0.203174603174604*G0_0_1_5_1_1_1_0_0 + 0.203174603174604*G0_0_1_5_1_1_2_0_1 - 0.203174603174604*G0_0_1_5_1_1_3_1_0 - 0.203174603174604*G0_0_1_5_1_1_3_1_1 + 0.203174603174604*G0_0_1_5_1_1_4_1_0 + 0.203174603174604*G0_0_1_5_1_1_5_1_1;
    A[667] = 0.0;
    A[696] = 0.0;
    A[265] = 0.0;
    A[290] = 0.0;
    A[439] = 0.0;
    A[319] = 0.0;
    A[775] = 2.9587301587302*G0_0_0_0_0_0_0_0_0 + 2.9587301587302*G0_0_0_0_0_0_0_0_1 - 2.9587301587302*G0_0_0_0_0_0_1_0_0 - 2.9587301587302*G0_0_0_0_0_0_2_0_1 + 2.9587301587302*G0_0_0_0_0_0_3_1_0 + 2.9587301587302*G0_0_0_0_0_0_3_1_1 - 2.9587301587302*G0_0_0_0_0_0_4_1_0 - 2.9587301587302*G0_0_0_0_0_0_5_1_1 + 2.9587301587302*G0_0_0_0_0_1_0_0_0 + 2.9587301587302*G0_0_0_0_0_1_0_0_1 - 2.9587301587302*G0_0_0_0_0_1_1_0_0 - 2.9587301587302*G0_0_0_0_0_1_2_0_1 + 2.9587301587302*G0_0_0_0_0_1_3_1_0 + 2.9587301587302*G0_0_0_0_0_1_3_1_1 - 2.9587301587302*G0_0_0_0_0_1_4_1_0 - 2.9587301587302*G0_0_0_0_0_1_5_1_1 - 2.9587301587302*G0_0_0_1_0_0_0_0_0 - 2.9587301587302*G0_0_0_1_0_0_0_0_1 + 2.9587301587302*G0_0_0_1_0_0_1_0_0 + 2.9587301587302*G0_0_0_1_0_0_2_0_1 - 2.9587301587302*G0_0_0_1_0_0_3_1_0 - 2.9587301587302*G0_0_0_1_0_0_3_1_1 + 2.9587301587302*G0_0_0_1_0_0_4_1_0 + 2.9587301587302*G0_0_0_1_0_0_5_1_1 - 2.9587301587302*G0_0_0_2_0_1_0_0_0 - 2.9587301587302*G0_0_0_2_0_1_0_0_1 + 2.9587301587302*G0_0_0_2_0_1_1_0_0 + 2.9587301587302*G0_0_0_2_0_1_2_0_1 - 2.9587301587302*G0_0_0_2_0_1_3_1_0 - 2.9587301587302*G0_0_0_2_0_1_3_1_1 + 2.9587301587302*G0_0_0_2_0_1_4_1_0 + 2.9587301587302*G0_0_0_2_0_1_5_1_1 + 2.9587301587302*G0_0_0_3_1_0_0_0_0 + 2.9587301587302*G0_0_0_3_1_0_0_0_1 - 2.9587301587302*G0_0_0_3_1_0_1_0_0 - 2.9587301587302*G0_0_0_3_1_0_2_0_1 + 2.9587301587302*G0_0_0_3_1_0_3_1_0 + 2.9587301587302*G0_0_0_3_1_0_3_1_1 - 2.9587301587302*G0_0_0_3_1_0_4_1_0 - 2.9587301587302*G0_0_0_3_1_0_5_1_1 + 2.9587301587302*G0_0_0_3_1_1_0_0_0 + 2.9587301587302*G0_0_0_3_1_1_0_0_1 - 2.9587301587302*G0_0_0_3_1_1_1_0_0 - 2.9587301587302*G0_0_0_3_1_1_2_0_1 + 2.9587301587302*G0_0_0_3_1_1_3_1_0 + 2.9587301587302*G0_0_0_3_1_1_3_1_1 - 2.9587301587302*G0_0_0_3_1_1_4_1_0 - 2.9587301587302*G0_0_0_3_1_1_5_1_1 - 2.9587301587302*G0_0_0_4_1_0_0_0_0 - 2.9587301587302*G0_0_0_4_1_0_0_0_1 + 2.9587301587302*G0_0_0_4_1_0_1_0_0 + 2.9587301587302*G0_0_0_4_1_0_2_0_1 - 2.9587301587302*G0_0_0_4_1_0_3_1_0 - 2.9587301587302*G0_0_0_4_1_0_3_1_1 + 2.9587301587302*G0_0_0_4_1_0_4_1_0 + 2.9587301587302*G0_0_0_4_1_0_5_1_1 - 2.9587301587302*G0_0_0_5_1_1_0_0_0 - 2.9587301587302*G0_0_0_5_1_1_0_0_1 + 2.9587301587302*G0_0_0_5_1_1_1_0_0 + 2.9587301587302*G0_0_0_5_1_1_2_0_1 - 2.9587301587302*G0_0_0_5_1_1_3_1_0 - 2.9587301587302*G0_0_0_5_1_1_3_1_1 + 2.9587301587302*G0_0_0_5_1_1_4_1_0 + 2.9587301587302*G0_0_0_5_1_1_5_1_1 + 1.4793650793651*G0_0_1_0_0_0_0_0_0 + 1.4793650793651*G0_0_1_0_0_0_0_0_1 - 1.4793650793651*G0_0_1_0_0_0_1_0_0 - 1.4793650793651*G0_0_1_0_0_0_2_0_1 + 1.4793650793651*G0_0_1_0_0_0_3_1_0 + 1.4793650793651*G0_0_1_0_0_0_3_1_1 - 1.4793650793651*G0_0_1_0_0_0_4_1_0 - 1.4793650793651*G0_0_1_0_0_0_5_1_1 + 1.4793650793651*G0_0_1_0_0_1_0_0_0 + 1.4793650793651*G0_0_1_0_0_1_0_0_1 - 1.4793650793651*G0_0_1_0_0_1_1_0_0 - 1.4793650793651*G0_0_1_0_0_1_2_0_1 + 1.4793650793651*G0_0_1_0_0_1_3_1_0 + 1.4793650793651*G0_0_1_0_0_1_3_1_1 - 1.4793650793651*G0_0_1_0_0_1_4_1_0 - 1.4793650793651*G0_0_1_0_0_1_5_1_1 - 1.4793650793651*G0_0_1_1_0_0_0_0_0 - 1.4793650793651*G0_0_1_1_0_0_0_0_1 + 1.4793650793651*G0_0_1_1_0_0_1_0_0 + 1.4793650793651*G0_0_1_1_0_0_2_0_1 - 1.4793650793651*G0_0_1_1_0_0_3_1_0 - 1.4793650793651*G0_0_1_1_0_0_3_1_1 + 1.4793650793651*G0_0_1_1_0_0_4_1_0 + 1.4793650793651*G0_0_1_1_0_0_5_1_1 - 1.4793650793651*G0_0_1_2_0_1_0_0_0 - 1.4793650793651*G0_0_1_2_0_1_0_0_1 + 1.4793650793651*G0_0_1_2_0_1_1_0_0 + 1.4793650793651*G0_0_1_2_0_1_2_0_1 - 1.4793650793651*G0_0_1_2_0_1_3_1_0 - 1.4793650793651*G0_0_1_2_0_1_3_1_1 + 1.4793650793651*G0_0_1_2_0_1_4_1_0 + 1.4793650793651*G0_0_1_2_0_1_5_1_1 + 1.4793650793651*G0_0_1_3_1_0_0_0_0 + 1.4793650793651*G0_0_1_3_1_0_0_0_1 - 1.4793650793651*G0_0_1_3_1_0_1_0_0 - 1.4793650793651*G0_0_1_3_1_0_2_0_1 + 1.4793650793651*G0_0_1_3_1_0_3_1_0 + 1.4793650793651*G0_0_1_3_1_0_3_1_1 - 1.4793650793651*G0_0_1_3_1_0_4_1_0 - 1.4793650793651*G0_0_1_3_1_0_5_1_1 + 1.4793650793651*G0_0_1_3_1_1_0_0_0 + 1.4793650793651*G0_0_1_3_1_1_0_0_1 - 1.4793650793651*G0_0_1_3_1_1_1_0_0 - 1.4793650793651*G0_0_1_3_1_1_2_0_1 + 1.4793650793651*G0_0_1_3_1_1_3_1_0 + 1.4793650793651*G0_0_1_3_1_1_3_1_1 - 1.4793650793651*G0_0_1_3_1_1_4_1_0 - 1.4793650793651*G0_0_1_3_1_1_5_1_1 - 1.4793650793651*G0_0_1_4_1_0_0_0_0 - 1.4793650793651*G0_0_1_4_1_0_0_0_1 + 1.4793650793651*G0_0_1_4_1_0_1_0_0 + 1.4793650793651*G0_0_1_4_1_0_2_0_1 - 1.4793650793651*G0_0_1_4_1_0_3_1_0 - 1.4793650793651*G0_0_1_4_1_0_3_1_1 + 1.4793650793651*G0_0_1_4_1_0_4_1_0 + 1.4793650793651*G0_0_1_4_1_0_5_1_1 - 1.4793650793651*G0_0_1_5_1_1_0_0_0 - 1.4793650793651*G0_0_1_5_1_1_0_0_1 + 1.4793650793651*G0_0_1_5_1_1_1_0_0 + 1.4793650793651*G0_0_1_5_1_1_2_0_1 - 1.4793650793651*G0_0_1_5_1_1_3_1_0 - 1.4793650793651*G0_0_1_5_1_1_3_1_1 + 1.4793650793651*G0_0_1_5_1_1_4_1_0 + 1.4793650793651*G0_0_1_5_1_1_5_1_1 + 1.4793650793651*G0_1_0_0_0_0_0_0_0 + 1.4793650793651*G0_1_0_0_0_0_0_0_1 - 1.4793650793651*G0_1_0_0_0_0_1_0_0 - 1.4793650793651*G0_1_0_0_0_0_2_0_1 + 1.4793650793651*G0_1_0_0_0_0_3_1_0 + 1.4793650793651*G0_1_0_0_0_0_3_1_1 - 1.4793650793651*G0_1_0_0_0_0_4_1_0 - 1.4793650793651*G0_1_0_0_0_0_5_1_1 + 1.4793650793651*G0_1_0_0_0_1_0_0_0 + 1.4793650793651*G0_1_0_0_0_1_0_0_1 - 1.4793650793651*G0_1_0_0_0_1_1_0_0 - 1.4793650793651*G0_1_0_0_0_1_2_0_1 + 1.4793650793651*G0_1_0_0_0_1_3_1_0 + 1.4793650793651*G0_1_0_0_0_1_3_1_1 - 1.4793650793651*G0_1_0_0_0_1_4_1_0 - 1.4793650793651*G0_1_0_0_0_1_5_1_1 - 1.4793650793651*G0_1_0_1_0_0_0_0_0 - 1.4793650793651*G0_1_0_1_0_0_0_0_1 + 1.4793650793651*G0_1_0_1_0_0_1_0_0 + 1.4793650793651*G0_1_0_1_0_0_2_0_1 - 1.4793650793651*G0_1_0_1_0_0_3_1_0 - 1.4793650793651*G0_1_0_1_0_0_3_1_1 + 1.4793650793651*G0_1_0_1_0_0_4_1_0 + 1.4793650793651*G0_1_0_1_0_0_5_1_1 - 1.4793650793651*G0_1_0_2_0_1_0_0_0 - 1.4793650793651*G0_1_0_2_0_1_0_0_1 + 1.4793650793651*G0_1_0_2_0_1_1_0_0 + 1.4793650793651*G0_1_0_2_0_1_2_0_1 - 1.4793650793651*G0_1_0_2_0_1_3_1_0 - 1.4793650793651*G0_1_0_2_0_1_3_1_1 + 1.4793650793651*G0_1_0_2_0_1_4_1_0 + 1.4793650793651*G0_1_0_2_0_1_5_1_1 + 1.4793650793651*G0_1_0_3_1_0_0_0_0 + 1.4793650793651*G0_1_0_3_1_0_0_0_1 - 1.4793650793651*G0_1_0_3_1_0_1_0_0 - 1.4793650793651*G0_1_0_3_1_0_2_0_1 + 1.4793650793651*G0_1_0_3_1_0_3_1_0 + 1.4793650793651*G0_1_0_3_1_0_3_1_1 - 1.4793650793651*G0_1_0_3_1_0_4_1_0 - 1.4793650793651*G0_1_0_3_1_0_5_1_1 + 1.4793650793651*G0_1_0_3_1_1_0_0_0 + 1.4793650793651*G0_1_0_3_1_1_0_0_1 - 1.4793650793651*G0_1_0_3_1_1_1_0_0 - 1.4793650793651*G0_1_0_3_1_1_2_0_1 + 1.4793650793651*G0_1_0_3_1_1_3_1_0 + 1.4793650793651*G0_1_0_3_1_1_3_1_1 - 1.4793650793651*G0_1_0_3_1_1_4_1_0 - 1.4793650793651*G0_1_0_3_1_1_5_1_1 - 1.4793650793651*G0_1_0_4_1_0_0_0_0 - 1.4793650793651*G0_1_0_4_1_0_0_0_1 + 1.4793650793651*G0_1_0_4_1_0_1_0_0 + 1.4793650793651*G0_1_0_4_1_0_2_0_1 - 1.4793650793651*G0_1_0_4_1_0_3_1_0 - 1.4793650793651*G0_1_0_4_1_0_3_1_1 + 1.4793650793651*G0_1_0_4_1_0_4_1_0 + 1.4793650793651*G0_1_0_4_1_0_5_1_1 - 1.4793650793651*G0_1_0_5_1_1_0_0_0 - 1.4793650793651*G0_1_0_5_1_1_0_0_1 + 1.4793650793651*G0_1_0_5_1_1_1_0_0 + 1.4793650793651*G0_1_0_5_1_1_2_0_1 - 1.4793650793651*G0_1_0_5_1_1_3_1_0 - 1.4793650793651*G0_1_0_5_1_1_3_1_1 + 1.4793650793651*G0_1_0_5_1_1_4_1_0 + 1.4793650793651*G0_1_0_5_1_1_5_1_1 + 2.45079365079369*G0_1_1_0_0_0_0_0_0 + 2.45079365079369*G0_1_1_0_0_0_0_0_1 - 2.45079365079369*G0_1_1_0_0_0_1_0_0 - 2.45079365079369*G0_1_1_0_0_0_2_0_1 + 2.45079365079369*G0_1_1_0_0_0_3_1_0 + 2.45079365079369*G0_1_1_0_0_0_3_1_1 - 2.45079365079369*G0_1_1_0_0_0_4_1_0 - 2.45079365079369*G0_1_1_0_0_0_5_1_1 + 2.45079365079369*G0_1_1_0_0_1_0_0_0 + 2.45079365079369*G0_1_1_0_0_1_0_0_1 - 2.45079365079369*G0_1_1_0_0_1_1_0_0 - 2.45079365079369*G0_1_1_0_0_1_2_0_1 + 2.45079365079369*G0_1_1_0_0_1_3_1_0 + 2.45079365079369*G0_1_1_0_0_1_3_1_1 - 2.45079365079369*G0_1_1_0_0_1_4_1_0 - 2.45079365079369*G0_1_1_0_0_1_5_1_1 - 2.45079365079369*G0_1_1_1_0_0_0_0_0 - 2.45079365079369*G0_1_1_1_0_0_0_0_1 + 2.45079365079369*G0_1_1_1_0_0_1_0_0 + 2.45079365079369*G0_1_1_1_0_0_2_0_1 - 2.45079365079369*G0_1_1_1_0_0_3_1_0 - 2.45079365079369*G0_1_1_1_0_0_3_1_1 + 2.45079365079369*G0_1_1_1_0_0_4_1_0 + 2.45079365079369*G0_1_1_1_0_0_5_1_1 - 2.45079365079369*G0_1_1_2_0_1_0_0_0 - 2.45079365079369*G0_1_1_2_0_1_0_0_1 + 2.45079365079369*G0_1_1_2_0_1_1_0_0 + 2.45079365079369*G0_1_1_2_0_1_2_0_1 - 2.45079365079369*G0_1_1_2_0_1_3_1_0 - 2.45079365079369*G0_1_1_2_0_1_3_1_1 + 2.45079365079369*G0_1_1_2_0_1_4_1_0 + 2.45079365079369*G0_1_1_2_0_1_5_1_1 + 2.45079365079369*G0_1_1_3_1_0_0_0_0 + 2.45079365079369*G0_1_1_3_1_0_0_0_1 - 2.45079365079369*G0_1_1_3_1_0_1_0_0 - 2.45079365079369*G0_1_1_3_1_0_2_0_1 + 2.45079365079369*G0_1_1_3_1_0_3_1_0 + 2.45079365079369*G0_1_1_3_1_0_3_1_1 - 2.45079365079369*G0_1_1_3_1_0_4_1_0 - 2.45079365079369*G0_1_1_3_1_0_5_1_1 + 2.45079365079369*G0_1_1_3_1_1_0_0_0 + 2.45079365079369*G0_1_1_3_1_1_0_0_1 - 2.45079365079369*G0_1_1_3_1_1_1_0_0 - 2.45079365079369*G0_1_1_3_1_1_2_0_1 + 2.45079365079369*G0_1_1_3_1_1_3_1_0 + 2.45079365079369*G0_1_1_3_1_1_3_1_1 - 2.45079365079369*G0_1_1_3_1_1_4_1_0 - 2.45079365079369*G0_1_1_3_1_1_5_1_1 - 2.45079365079369*G0_1_1_4_1_0_0_0_0 - 2.45079365079369*G0_1_1_4_1_0_0_0_1 + 2.45079365079369*G0_1_1_4_1_0_1_0_0 + 2.45079365079369*G0_1_1_4_1_0_2_0_1 - 2.45079365079369*G0_1_1_4_1_0_3_1_0 - 2.45079365079369*G0_1_1_4_1_0_3_1_1 + 2.45079365079369*G0_1_1_4_1_0_4_1_0 + 2.45079365079369*G0_1_1_4_1_0_5_1_1 - 2.45079365079369*G0_1_1_5_1_1_0_0_0 - 2.45079365079369*G0_1_1_5_1_1_0_0_1 + 2.45079365079369*G0_1_1_5_1_1_1_0_0 + 2.45079365079369*G0_1_1_5_1_1_2_0_1 - 2.45079365079369*G0_1_1_5_1_1_3_1_0 - 2.45079365079369*G0_1_1_5_1_1_3_1_1 + 2.45079365079369*G0_1_1_5_1_1_4_1_0 + 2.45079365079369*G0_1_1_5_1_1_5_1_1;
    A[460] = 0.0;
    A[356] = 0.0;
    A[5] = -A[213] - 0.110052910052919*G0_0_0_0_0_0_0_0_0 - 0.110052910052919*G0_0_0_0_0_0_0_0_1 + 0.110052910052919*G0_0_0_0_0_0_1_0_0 + 0.110052910052919*G0_0_0_0_0_0_2_0_1 - 0.110052910052919*G0_0_0_0_0_0_3_1_0 - 0.110052910052919*G0_0_0_0_0_0_3_1_1 + 0.110052910052919*G0_0_0_0_0_0_4_1_0 + 0.110052910052919*G0_0_0_0_0_0_5_1_1 - 0.110052910052919*G0_0_0_0_0_1_0_0_0 - 0.110052910052919*G0_0_0_0_0_1_0_0_1 + 0.110052910052919*G0_0_0_0_0_1_1_0_0 + 0.110052910052919*G0_0_0_0_0_1_2_0_1 - 0.110052910052919*G0_0_0_0_0_1_3_1_0 - 0.110052910052919*G0_0_0_0_0_1_3_1_1 + 0.110052910052919*G0_0_0_0_0_1_4_1_0 + 0.110052910052919*G0_0_0_0_0_1_5_1_1 + 0.110052910052919*G0_0_0_1_0_0_0_0_0 + 0.110052910052919*G0_0_0_1_0_0_0_0_1 - 0.110052910052919*G0_0_0_1_0_0_1_0_0 - 0.110052910052919*G0_0_0_1_0_0_2_0_1 + 0.110052910052919*G0_0_0_1_0_0_3_1_0 + 0.110052910052919*G0_0_0_1_0_0_3_1_1 - 0.110052910052919*G0_0_0_1_0_0_4_1_0 - 0.110052910052919*G0_0_0_1_0_0_5_1_1 + 0.110052910052919*G0_0_0_2_0_1_0_0_0 + 0.110052910052919*G0_0_0_2_0_1_0_0_1 - 0.110052910052919*G0_0_0_2_0_1_1_0_0 - 0.110052910052919*G0_0_0_2_0_1_2_0_1 + 0.110052910052919*G0_0_0_2_0_1_3_1_0 + 0.110052910052919*G0_0_0_2_0_1_3_1_1 - 0.110052910052919*G0_0_0_2_0_1_4_1_0 - 0.110052910052919*G0_0_0_2_0_1_5_1_1 - 0.110052910052919*G0_0_0_3_1_0_0_0_0 - 0.110052910052919*G0_0_0_3_1_0_0_0_1 + 0.110052910052919*G0_0_0_3_1_0_1_0_0 + 0.110052910052919*G0_0_0_3_1_0_2_0_1 - 0.110052910052919*G0_0_0_3_1_0_3_1_0 - 0.110052910052919*G0_0_0_3_1_0_3_1_1 + 0.110052910052919*G0_0_0_3_1_0_4_1_0 + 0.110052910052919*G0_0_0_3_1_0_5_1_1 - 0.110052910052919*G0_0_0_3_1_1_0_0_0 - 0.110052910052919*G0_0_0_3_1_1_0_0_1 + 0.110052910052919*G0_0_0_3_1_1_1_0_0 + 0.110052910052919*G0_0_0_3_1_1_2_0_1 - 0.110052910052919*G0_0_0_3_1_1_3_1_0 - 0.110052910052919*G0_0_0_3_1_1_3_1_1 + 0.110052910052919*G0_0_0_3_1_1_4_1_0 + 0.110052910052919*G0_0_0_3_1_1_5_1_1 + 0.110052910052919*G0_0_0_4_1_0_0_0_0 + 0.110052910052919*G0_0_0_4_1_0_0_0_1 - 0.110052910052919*G0_0_0_4_1_0_1_0_0 - 0.110052910052919*G0_0_0_4_1_0_2_0_1 + 0.110052910052919*G0_0_0_4_1_0_3_1_0 + 0.110052910052919*G0_0_0_4_1_0_3_1_1 - 0.110052910052919*G0_0_0_4_1_0_4_1_0 - 0.110052910052919*G0_0_0_4_1_0_5_1_1 + 0.110052910052919*G0_0_0_5_1_1_0_0_0 + 0.110052910052919*G0_0_0_5_1_1_0_0_1 - 0.110052910052919*G0_0_0_5_1_1_1_0_0 - 0.110052910052919*G0_0_0_5_1_1_2_0_1 + 0.110052910052919*G0_0_0_5_1_1_3_1_0 + 0.110052910052919*G0_0_0_5_1_1_3_1_1 - 0.110052910052919*G0_0_0_5_1_1_4_1_0 - 0.110052910052919*G0_0_0_5_1_1_5_1_1 + 0.0423280423280432*G0_1_1_0_0_0_0_0_0 + 0.0423280423280432*G0_1_1_0_0_0_0_0_1 - 0.0423280423280432*G0_1_1_0_0_0_1_0_0 - 0.0423280423280432*G0_1_1_0_0_0_2_0_1 + 0.0423280423280432*G0_1_1_0_0_0_3_1_0 + 0.0423280423280432*G0_1_1_0_0_0_3_1_1 - 0.0423280423280432*G0_1_1_0_0_0_4_1_0 - 0.0423280423280432*G0_1_1_0_0_0_5_1_1 + 0.0423280423280432*G0_1_1_0_0_1_0_0_0 + 0.0423280423280432*G0_1_1_0_0_1_0_0_1 - 0.0423280423280432*G0_1_1_0_0_1_1_0_0 - 0.0423280423280432*G0_1_1_0_0_1_2_0_1 + 0.0423280423280432*G0_1_1_0_0_1_3_1_0 + 0.0423280423280432*G0_1_1_0_0_1_3_1_1 - 0.0423280423280432*G0_1_1_0_0_1_4_1_0 - 0.0423280423280432*G0_1_1_0_0_1_5_1_1 - 0.0423280423280432*G0_1_1_1_0_0_0_0_0 - 0.0423280423280432*G0_1_1_1_0_0_0_0_1 + 0.0423280423280432*G0_1_1_1_0_0_1_0_0 + 0.0423280423280432*G0_1_1_1_0_0_2_0_1 - 0.0423280423280432*G0_1_1_1_0_0_3_1_0 - 0.0423280423280432*G0_1_1_1_0_0_3_1_1 + 0.0423280423280432*G0_1_1_1_0_0_4_1_0 + 0.0423280423280432*G0_1_1_1_0_0_5_1_1 - 0.0423280423280432*G0_1_1_2_0_1_0_0_0 - 0.0423280423280432*G0_1_1_2_0_1_0_0_1 + 0.0423280423280432*G0_1_1_2_0_1_1_0_0 + 0.0423280423280432*G0_1_1_2_0_1_2_0_1 - 0.0423280423280432*G0_1_1_2_0_1_3_1_0 - 0.0423280423280432*G0_1_1_2_0_1_3_1_1 + 0.0423280423280432*G0_1_1_2_0_1_4_1_0 + 0.0423280423280432*G0_1_1_2_0_1_5_1_1 + 0.0423280423280432*G0_1_1_3_1_0_0_0_0 + 0.0423280423280432*G0_1_1_3_1_0_0_0_1 - 0.0423280423280432*G0_1_1_3_1_0_1_0_0 - 0.0423280423280432*G0_1_1_3_1_0_2_0_1 + 0.0423280423280432*G0_1_1_3_1_0_3_1_0 + 0.0423280423280432*G0_1_1_3_1_0_3_1_1 - 0.0423280423280432*G0_1_1_3_1_0_4_1_0 - 0.0423280423280432*G0_1_1_3_1_0_5_1_1 + 0.0423280423280432*G0_1_1_3_1_1_0_0_0 + 0.0423280423280432*G0_1_1_3_1_1_0_0_1 - 0.0423280423280432*G0_1_1_3_1_1_1_0_0 - 0.0423280423280432*G0_1_1_3_1_1_2_0_1 + 0.0423280423280432*G0_1_1_3_1_1_3_1_0 + 0.0423280423280432*G0_1_1_3_1_1_3_1_1 - 0.0423280423280432*G0_1_1_3_1_1_4_1_0 - 0.0423280423280432*G0_1_1_3_1_1_5_1_1 - 0.0423280423280432*G0_1_1_4_1_0_0_0_0 - 0.0423280423280432*G0_1_1_4_1_0_0_0_1 + 0.0423280423280432*G0_1_1_4_1_0_1_0_0 + 0.0423280423280432*G0_1_1_4_1_0_2_0_1 - 0.0423280423280432*G0_1_1_4_1_0_3_1_0 - 0.0423280423280432*G0_1_1_4_1_0_3_1_1 + 0.0423280423280432*G0_1_1_4_1_0_4_1_0 + 0.0423280423280432*G0_1_1_4_1_0_5_1_1 - 0.0423280423280432*G0_1_1_5_1_1_0_0_0 - 0.0423280423280432*G0_1_1_5_1_1_0_0_1 + 0.0423280423280432*G0_1_1_5_1_1_1_0_0 + 0.0423280423280432*G0_1_1_5_1_1_2_0_1 - 0.0423280423280432*G0_1_1_5_1_1_3_1_0 - 0.0423280423280432*G0_1_1_5_1_1_3_1_1 + 0.0423280423280432*G0_1_1_5_1_1_4_1_0 + 0.0423280423280432*G0_1_1_5_1_1_5_1_1;
    A[765] = A[5] + 0.42539682539683*G0_0_0_0_0_0_0_0_0 + 0.42539682539683*G0_0_0_0_0_0_0_0_1 - 0.42539682539683*G0_0_0_0_0_0_1_0_0 - 0.42539682539683*G0_0_0_0_0_0_2_0_1 + 0.42539682539683*G0_0_0_0_0_0_3_1_0 + 0.42539682539683*G0_0_0_0_0_0_3_1_1 - 0.42539682539683*G0_0_0_0_0_0_4_1_0 - 0.42539682539683*G0_0_0_0_0_0_5_1_1 + 0.42539682539683*G0_0_0_0_0_1_0_0_0 + 0.42539682539683*G0_0_0_0_0_1_0_0_1 - 0.42539682539683*G0_0_0_0_0_1_1_0_0 - 0.42539682539683*G0_0_0_0_0_1_2_0_1 + 0.42539682539683*G0_0_0_0_0_1_3_1_0 + 0.42539682539683*G0_0_0_0_0_1_3_1_1 - 0.42539682539683*G0_0_0_0_0_1_4_1_0 - 0.42539682539683*G0_0_0_0_0_1_5_1_1 - 0.42539682539683*G0_0_0_1_0_0_0_0_0 - 0.42539682539683*G0_0_0_1_0_0_0_0_1 + 0.42539682539683*G0_0_0_1_0_0_1_0_0 + 0.42539682539683*G0_0_0_1_0_0_2_0_1 - 0.42539682539683*G0_0_0_1_0_0_3_1_0 - 0.42539682539683*G0_0_0_1_0_0_3_1_1 + 0.42539682539683*G0_0_0_1_0_0_4_1_0 + 0.42539682539683*G0_0_0_1_0_0_5_1_1 - 0.42539682539683*G0_0_0_2_0_1_0_0_0 - 0.42539682539683*G0_0_0_2_0_1_0_0_1 + 0.42539682539683*G0_0_0_2_0_1_1_0_0 + 0.42539682539683*G0_0_0_2_0_1_2_0_1 - 0.42539682539683*G0_0_0_2_0_1_3_1_0 - 0.42539682539683*G0_0_0_2_0_1_3_1_1 + 0.42539682539683*G0_0_0_2_0_1_4_1_0 + 0.42539682539683*G0_0_0_2_0_1_5_1_1 + 0.42539682539683*G0_0_0_3_1_0_0_0_0 + 0.42539682539683*G0_0_0_3_1_0_0_0_1 - 0.42539682539683*G0_0_0_3_1_0_1_0_0 - 0.42539682539683*G0_0_0_3_1_0_2_0_1 + 0.42539682539683*G0_0_0_3_1_0_3_1_0 + 0.42539682539683*G0_0_0_3_1_0_3_1_1 - 0.42539682539683*G0_0_0_3_1_0_4_1_0 - 0.42539682539683*G0_0_0_3_1_0_5_1_1 + 0.42539682539683*G0_0_0_3_1_1_0_0_0 + 0.42539682539683*G0_0_0_3_1_1_0_0_1 - 0.42539682539683*G0_0_0_3_1_1_1_0_0 - 0.42539682539683*G0_0_0_3_1_1_2_0_1 + 0.42539682539683*G0_0_0_3_1_1_3_1_0 + 0.42539682539683*G0_0_0_3_1_1_3_1_1 - 0.42539682539683*G0_0_0_3_1_1_4_1_0 - 0.42539682539683*G0_0_0_3_1_1_5_1_1 - 0.42539682539683*G0_0_0_4_1_0_0_0_0 - 0.42539682539683*G0_0_0_4_1_0_0_0_1 + 0.42539682539683*G0_0_0_4_1_0_1_0_0 + 0.42539682539683*G0_0_0_4_1_0_2_0_1 - 0.42539682539683*G0_0_0_4_1_0_3_1_0 - 0.42539682539683*G0_0_0_4_1_0_3_1_1 + 0.42539682539683*G0_0_0_4_1_0_4_1_0 + 0.42539682539683*G0_0_0_4_1_0_5_1_1 - 0.42539682539683*G0_0_0_5_1_1_0_0_0 - 0.42539682539683*G0_0_0_5_1_1_0_0_1 + 0.42539682539683*G0_0_0_5_1_1_1_0_0 + 0.42539682539683*G0_0_0_5_1_1_2_0_1 - 0.42539682539683*G0_0_0_5_1_1_3_1_0 - 0.42539682539683*G0_0_0_5_1_1_3_1_1 + 0.42539682539683*G0_0_0_5_1_1_4_1_0 + 0.42539682539683*G0_0_0_5_1_1_5_1_1 + 0.425396825396828*G0_0_1_0_0_0_0_0_0 + 0.425396825396828*G0_0_1_0_0_0_0_0_1 - 0.425396825396828*G0_0_1_0_0_0_1_0_0 - 0.425396825396828*G0_0_1_0_0_0_2_0_1 + 0.425396825396828*G0_0_1_0_0_0_3_1_0 + 0.425396825396828*G0_0_1_0_0_0_3_1_1 - 0.425396825396828*G0_0_1_0_0_0_4_1_0 - 0.425396825396828*G0_0_1_0_0_0_5_1_1 + 0.425396825396828*G0_0_1_0_0_1_0_0_0 + 0.425396825396828*G0_0_1_0_0_1_0_0_1 - 0.425396825396828*G0_0_1_0_0_1_1_0_0 - 0.425396825396828*G0_0_1_0_0_1_2_0_1 + 0.425396825396828*G0_0_1_0_0_1_3_1_0 + 0.425396825396828*G0_0_1_0_0_1_3_1_1 - 0.425396825396828*G0_0_1_0_0_1_4_1_0 - 0.425396825396828*G0_0_1_0_0_1_5_1_1 - 0.425396825396828*G0_0_1_1_0_0_0_0_0 - 0.425396825396828*G0_0_1_1_0_0_0_0_1 + 0.425396825396828*G0_0_1_1_0_0_1_0_0 + 0.425396825396828*G0_0_1_1_0_0_2_0_1 - 0.425396825396828*G0_0_1_1_0_0_3_1_0 - 0.425396825396828*G0_0_1_1_0_0_3_1_1 + 0.425396825396828*G0_0_1_1_0_0_4_1_0 + 0.425396825396828*G0_0_1_1_0_0_5_1_1 - 0.425396825396828*G0_0_1_2_0_1_0_0_0 - 0.425396825396828*G0_0_1_2_0_1_0_0_1 + 0.425396825396828*G0_0_1_2_0_1_1_0_0 + 0.425396825396828*G0_0_1_2_0_1_2_0_1 - 0.425396825396828*G0_0_1_2_0_1_3_1_0 - 0.425396825396828*G0_0_1_2_0_1_3_1_1 + 0.425396825396828*G0_0_1_2_0_1_4_1_0 + 0.425396825396828*G0_0_1_2_0_1_5_1_1 + 0.425396825396828*G0_0_1_3_1_0_0_0_0 + 0.425396825396828*G0_0_1_3_1_0_0_0_1 - 0.425396825396828*G0_0_1_3_1_0_1_0_0 - 0.425396825396828*G0_0_1_3_1_0_2_0_1 + 0.425396825396828*G0_0_1_3_1_0_3_1_0 + 0.425396825396828*G0_0_1_3_1_0_3_1_1 - 0.425396825396828*G0_0_1_3_1_0_4_1_0 - 0.425396825396828*G0_0_1_3_1_0_5_1_1 + 0.425396825396828*G0_0_1_3_1_1_0_0_0 + 0.425396825396828*G0_0_1_3_1_1_0_0_1 - 0.425396825396828*G0_0_1_3_1_1_1_0_0 - 0.425396825396828*G0_0_1_3_1_1_2_0_1 + 0.425396825396828*G0_0_1_3_1_1_3_1_0 + 0.425396825396828*G0_0_1_3_1_1_3_1_1 - 0.425396825396828*G0_0_1_3_1_1_4_1_0 - 0.425396825396828*G0_0_1_3_1_1_5_1_1 - 0.425396825396828*G0_0_1_4_1_0_0_0_0 - 0.425396825396828*G0_0_1_4_1_0_0_0_1 + 0.425396825396828*G0_0_1_4_1_0_1_0_0 + 0.425396825396828*G0_0_1_4_1_0_2_0_1 - 0.425396825396828*G0_0_1_4_1_0_3_1_0 - 0.425396825396828*G0_0_1_4_1_0_3_1_1 + 0.425396825396828*G0_0_1_4_1_0_4_1_0 + 0.425396825396828*G0_0_1_4_1_0_5_1_1 - 0.425396825396828*G0_0_1_5_1_1_0_0_0 - 0.425396825396828*G0_0_1_5_1_1_0_0_1 + 0.425396825396828*G0_0_1_5_1_1_1_0_0 + 0.425396825396828*G0_0_1_5_1_1_2_0_1 - 0.425396825396828*G0_0_1_5_1_1_3_1_0 - 0.425396825396828*G0_0_1_5_1_1_3_1_1 + 0.425396825396828*G0_0_1_5_1_1_4_1_0 + 0.425396825396828*G0_0_1_5_1_1_5_1_1;
    A[14] = -2.00000000000004*A[5];
    A[722] = 0.0;
    A[389] = 0.0;
    A[753] = 0.0;
    A[160] = A[625];
    A[899] = A[403];
    A[112] = 0.0;
    A[181] = -0.499999999999998*A[421];
    A[151] = -A[181] + 0.203174603174606*G0_1_0_0_0_0_0_0_0 + 0.203174603174606*G0_1_0_0_0_0_0_0_1 - 0.203174603174606*G0_1_0_0_0_0_1_0_0 - 0.203174603174606*G0_1_0_0_0_0_2_0_1 + 0.203174603174606*G0_1_0_0_0_0_3_1_0 + 0.203174603174606*G0_1_0_0_0_0_3_1_1 - 0.203174603174606*G0_1_0_0_0_0_4_1_0 - 0.203174603174606*G0_1_0_0_0_0_5_1_1 + 0.203174603174606*G0_1_0_0_0_1_0_0_0 + 0.203174603174606*G0_1_0_0_0_1_0_0_1 - 0.203174603174606*G0_1_0_0_0_1_1_0_0 - 0.203174603174606*G0_1_0_0_0_1_2_0_1 + 0.203174603174606*G0_1_0_0_0_1_3_1_0 + 0.203174603174606*G0_1_0_0_0_1_3_1_1 - 0.203174603174606*G0_1_0_0_0_1_4_1_0 - 0.203174603174606*G0_1_0_0_0_1_5_1_1 - 0.203174603174606*G0_1_0_1_0_0_0_0_0 - 0.203174603174606*G0_1_0_1_0_0_0_0_1 + 0.203174603174606*G0_1_0_1_0_0_1_0_0 + 0.203174603174606*G0_1_0_1_0_0_2_0_1 - 0.203174603174606*G0_1_0_1_0_0_3_1_0 - 0.203174603174606*G0_1_0_1_0_0_3_1_1 + 0.203174603174606*G0_1_0_1_0_0_4_1_0 + 0.203174603174606*G0_1_0_1_0_0_5_1_1 - 0.203174603174606*G0_1_0_2_0_1_0_0_0 - 0.203174603174606*G0_1_0_2_0_1_0_0_1 + 0.203174603174606*G0_1_0_2_0_1_1_0_0 + 0.203174603174606*G0_1_0_2_0_1_2_0_1 - 0.203174603174606*G0_1_0_2_0_1_3_1_0 - 0.203174603174606*G0_1_0_2_0_1_3_1_1 + 0.203174603174606*G0_1_0_2_0_1_4_1_0 + 0.203174603174606*G0_1_0_2_0_1_5_1_1 + 0.203174603174606*G0_1_0_3_1_0_0_0_0 + 0.203174603174606*G0_1_0_3_1_0_0_0_1 - 0.203174603174606*G0_1_0_3_1_0_1_0_0 - 0.203174603174606*G0_1_0_3_1_0_2_0_1 + 0.203174603174606*G0_1_0_3_1_0_3_1_0 + 0.203174603174606*G0_1_0_3_1_0_3_1_1 - 0.203174603174606*G0_1_0_3_1_0_4_1_0 - 0.203174603174606*G0_1_0_3_1_0_5_1_1 + 0.203174603174606*G0_1_0_3_1_1_0_0_0 + 0.203174603174606*G0_1_0_3_1_1_0_0_1 - 0.203174603174606*G0_1_0_3_1_1_1_0_0 - 0.203174603174606*G0_1_0_3_1_1_2_0_1 + 0.203174603174606*G0_1_0_3_1_1_3_1_0 + 0.203174603174606*G0_1_0_3_1_1_3_1_1 - 0.203174603174606*G0_1_0_3_1_1_4_1_0 - 0.203174603174606*G0_1_0_3_1_1_5_1_1 - 0.203174603174606*G0_1_0_4_1_0_0_0_0 - 0.203174603174606*G0_1_0_4_1_0_0_0_1 + 0.203174603174606*G0_1_0_4_1_0_1_0_0 + 0.203174603174606*G0_1_0_4_1_0_2_0_1 - 0.203174603174606*G0_1_0_4_1_0_3_1_0 - 0.203174603174606*G0_1_0_4_1_0_3_1_1 + 0.203174603174606*G0_1_0_4_1_0_4_1_0 + 0.203174603174606*G0_1_0_4_1_0_5_1_1 - 0.203174603174606*G0_1_0_5_1_1_0_0_0 - 0.203174603174606*G0_1_0_5_1_1_0_0_1 + 0.203174603174606*G0_1_0_5_1_1_1_0_0 + 0.203174603174606*G0_1_0_5_1_1_2_0_1 - 0.203174603174606*G0_1_0_5_1_1_3_1_0 - 0.203174603174606*G0_1_0_5_1_1_3_1_1 + 0.203174603174606*G0_1_0_5_1_1_4_1_0 + 0.203174603174606*G0_1_0_5_1_1_5_1_1;
    A[137] = 0.0;
    A[214] = A[679];
    A[170] = 0.0;
    A[500] = -A[181] + 0.203174603174605*G0_0_1_0_0_0_0_0_0 + 0.203174603174605*G0_0_1_0_0_0_0_0_1 - 0.203174603174605*G0_0_1_0_0_0_1_0_0 - 0.203174603174605*G0_0_1_0_0_0_2_0_1 + 0.203174603174605*G0_0_1_0_0_0_3_1_0 + 0.203174603174605*G0_0_1_0_0_0_3_1_1 - 0.203174603174605*G0_0_1_0_0_0_4_1_0 - 0.203174603174605*G0_0_1_0_0_0_5_1_1 + 0.203174603174605*G0_0_1_0_0_1_0_0_0 + 0.203174603174605*G0_0_1_0_0_1_0_0_1 - 0.203174603174605*G0_0_1_0_0_1_1_0_0 - 0.203174603174605*G0_0_1_0_0_1_2_0_1 + 0.203174603174605*G0_0_1_0_0_1_3_1_0 + 0.203174603174605*G0_0_1_0_0_1_3_1_1 - 0.203174603174605*G0_0_1_0_0_1_4_1_0 - 0.203174603174605*G0_0_1_0_0_1_5_1_1 - 0.203174603174605*G0_0_1_1_0_0_0_0_0 - 0.203174603174605*G0_0_1_1_0_0_0_0_1 + 0.203174603174605*G0_0_1_1_0_0_1_0_0 + 0.203174603174605*G0_0_1_1_0_0_2_0_1 - 0.203174603174605*G0_0_1_1_0_0_3_1_0 - 0.203174603174605*G0_0_1_1_0_0_3_1_1 + 0.203174603174605*G0_0_1_1_0_0_4_1_0 + 0.203174603174605*G0_0_1_1_0_0_5_1_1 - 0.203174603174605*G0_0_1_2_0_1_0_0_0 - 0.203174603174605*G0_0_1_2_0_1_0_0_1 + 0.203174603174605*G0_0_1_2_0_1_1_0_0 + 0.203174603174605*G0_0_1_2_0_1_2_0_1 - 0.203174603174605*G0_0_1_2_0_1_3_1_0 - 0.203174603174605*G0_0_1_2_0_1_3_1_1 + 0.203174603174605*G0_0_1_2_0_1_4_1_0 + 0.203174603174605*G0_0_1_2_0_1_5_1_1 + 0.203174603174605*G0_0_1_3_1_0_0_0_0 + 0.203174603174605*G0_0_1_3_1_0_0_0_1 - 0.203174603174605*G0_0_1_3_1_0_1_0_0 - 0.203174603174605*G0_0_1_3_1_0_2_0_1 + 0.203174603174605*G0_0_1_3_1_0_3_1_0 + 0.203174603174605*G0_0_1_3_1_0_3_1_1 - 0.203174603174605*G0_0_1_3_1_0_4_1_0 - 0.203174603174605*G0_0_1_3_1_0_5_1_1 + 0.203174603174605*G0_0_1_3_1_1_0_0_0 + 0.203174603174605*G0_0_1_3_1_1_0_0_1 - 0.203174603174605*G0_0_1_3_1_1_1_0_0 - 0.203174603174605*G0_0_1_3_1_1_2_0_1 + 0.203174603174605*G0_0_1_3_1_1_3_1_0 + 0.203174603174605*G0_0_1_3_1_1_3_1_1 - 0.203174603174605*G0_0_1_3_1_1_4_1_0 - 0.203174603174605*G0_0_1_3_1_1_5_1_1 - 0.203174603174605*G0_0_1_4_1_0_0_0_0 - 0.203174603174605*G0_0_1_4_1_0_0_0_1 + 0.203174603174605*G0_0_1_4_1_0_1_0_0 + 0.203174603174605*G0_0_1_4_1_0_2_0_1 - 0.203174603174605*G0_0_1_4_1_0_3_1_0 - 0.203174603174605*G0_0_1_4_1_0_3_1_1 + 0.203174603174605*G0_0_1_4_1_0_4_1_0 + 0.203174603174605*G0_0_1_4_1_0_5_1_1 - 0.203174603174605*G0_0_1_5_1_1_0_0_0 - 0.203174603174605*G0_0_1_5_1_1_0_0_1 + 0.203174603174605*G0_0_1_5_1_1_1_0_0 + 0.203174603174605*G0_0_1_5_1_1_2_0_1 - 0.203174603174605*G0_0_1_5_1_1_3_1_0 - 0.203174603174605*G0_0_1_5_1_1_3_1_1 + 0.203174603174605*G0_0_1_5_1_1_4_1_0 + 0.203174603174605*G0_0_1_5_1_1_5_1_1;
    A[207] = 0.0;
    A[647] = -A[92] - 0.287830687830693*G0_1_1_0_0_0_0_0_0 - 0.287830687830693*G0_1_1_0_0_0_0_0_1 + 0.287830687830693*G0_1_1_0_0_0_1_0_0 + 0.287830687830693*G0_1_1_0_0_0_2_0_1 - 0.287830687830693*G0_1_1_0_0_0_3_1_0 - 0.287830687830693*G0_1_1_0_0_0_3_1_1 + 0.287830687830693*G0_1_1_0_0_0_4_1_0 + 0.287830687830693*G0_1_1_0_0_0_5_1_1 - 0.287830687830693*G0_1_1_0_0_1_0_0_0 - 0.287830687830693*G0_1_1_0_0_1_0_0_1 + 0.287830687830693*G0_1_1_0_0_1_1_0_0 + 0.287830687830693*G0_1_1_0_0_1_2_0_1 - 0.287830687830693*G0_1_1_0_0_1_3_1_0 - 0.287830687830693*G0_1_1_0_0_1_3_1_1 + 0.287830687830693*G0_1_1_0_0_1_4_1_0 + 0.287830687830693*G0_1_1_0_0_1_5_1_1 + 0.287830687830693*G0_1_1_1_0_0_0_0_0 + 0.287830687830693*G0_1_1_1_0_0_0_0_1 - 0.287830687830693*G0_1_1_1_0_0_1_0_0 - 0.287830687830693*G0_1_1_1_0_0_2_0_1 + 0.287830687830693*G0_1_1_1_0_0_3_1_0 + 0.287830687830693*G0_1_1_1_0_0_3_1_1 - 0.287830687830693*G0_1_1_1_0_0_4_1_0 - 0.287830687830693*G0_1_1_1_0_0_5_1_1 + 0.287830687830693*G0_1_1_2_0_1_0_0_0 + 0.287830687830693*G0_1_1_2_0_1_0_0_1 - 0.287830687830693*G0_1_1_2_0_1_1_0_0 - 0.287830687830693*G0_1_1_2_0_1_2_0_1 + 0.287830687830693*G0_1_1_2_0_1_3_1_0 + 0.287830687830693*G0_1_1_2_0_1_3_1_1 - 0.287830687830693*G0_1_1_2_0_1_4_1_0 - 0.287830687830693*G0_1_1_2_0_1_5_1_1 - 0.287830687830693*G0_1_1_3_1_0_0_0_0 - 0.287830687830693*G0_1_1_3_1_0_0_0_1 + 0.287830687830693*G0_1_1_3_1_0_1_0_0 + 0.287830687830693*G0_1_1_3_1_0_2_0_1 - 0.287830687830693*G0_1_1_3_1_0_3_1_0 - 0.287830687830693*G0_1_1_3_1_0_3_1_1 + 0.287830687830693*G0_1_1_3_1_0_4_1_0 + 0.287830687830693*G0_1_1_3_1_0_5_1_1 - 0.287830687830693*G0_1_1_3_1_1_0_0_0 - 0.287830687830693*G0_1_1_3_1_1_0_0_1 + 0.287830687830693*G0_1_1_3_1_1_1_0_0 + 0.287830687830693*G0_1_1_3_1_1_2_0_1 - 0.287830687830693*G0_1_1_3_1_1_3_1_0 - 0.287830687830693*G0_1_1_3_1_1_3_1_1 + 0.287830687830693*G0_1_1_3_1_1_4_1_0 + 0.287830687830693*G0_1_1_3_1_1_5_1_1 + 0.287830687830693*G0_1_1_4_1_0_0_0_0 + 0.287830687830693*G0_1_1_4_1_0_0_0_1 - 0.287830687830693*G0_1_1_4_1_0_1_0_0 - 0.287830687830693*G0_1_1_4_1_0_2_0_1 + 0.287830687830693*G0_1_1_4_1_0_3_1_0 + 0.287830687830693*G0_1_1_4_1_0_3_1_1 - 0.287830687830693*G0_1_1_4_1_0_4_1_0 - 0.287830687830693*G0_1_1_4_1_0_5_1_1 + 0.287830687830693*G0_1_1_5_1_1_0_0_0 + 0.287830687830693*G0_1_1_5_1_1_0_0_1 - 0.287830687830693*G0_1_1_5_1_1_1_0_0 - 0.287830687830693*G0_1_1_5_1_1_2_0_1 + 0.287830687830693*G0_1_1_5_1_1_3_1_0 + 0.287830687830693*G0_1_1_5_1_1_3_1_1 - 0.287830687830693*G0_1_1_5_1_1_4_1_0 - 0.287830687830693*G0_1_1_5_1_1_5_1_1;
    A[571] = 0.0;
    A[527] = -4.4062500000001*A[887];
    A[562] = A[213];
    A[240] = -A[5] - 0.203174603174604*G0_1_0_0_0_0_0_0_0 - 0.203174603174604*G0_1_0_0_0_0_0_0_1 + 0.203174603174604*G0_1_0_0_0_0_1_0_0 + 0.203174603174604*G0_1_0_0_0_0_2_0_1 - 0.203174603174604*G0_1_0_0_0_0_3_1_0 - 0.203174603174604*G0_1_0_0_0_0_3_1_1 + 0.203174603174604*G0_1_0_0_0_0_4_1_0 + 0.203174603174604*G0_1_0_0_0_0_5_1_1 - 0.203174603174604*G0_1_0_0_0_1_0_0_0 - 0.203174603174604*G0_1_0_0_0_1_0_0_1 + 0.203174603174604*G0_1_0_0_0_1_1_0_0 + 0.203174603174604*G0_1_0_0_0_1_2_0_1 - 0.203174603174604*G0_1_0_0_0_1_3_1_0 - 0.203174603174604*G0_1_0_0_0_1_3_1_1 + 0.203174603174604*G0_1_0_0_0_1_4_1_0 + 0.203174603174604*G0_1_0_0_0_1_5_1_1 + 0.203174603174604*G0_1_0_1_0_0_0_0_0 + 0.203174603174604*G0_1_0_1_0_0_0_0_1 - 0.203174603174604*G0_1_0_1_0_0_1_0_0 - 0.203174603174604*G0_1_0_1_0_0_2_0_1 + 0.203174603174604*G0_1_0_1_0_0_3_1_0 + 0.203174603174604*G0_1_0_1_0_0_3_1_1 - 0.203174603174604*G0_1_0_1_0_0_4_1_0 - 0.203174603174604*G0_1_0_1_0_0_5_1_1 + 0.203174603174604*G0_1_0_2_0_1_0_0_0 + 0.203174603174604*G0_1_0_2_0_1_0_0_1 - 0.203174603174604*G0_1_0_2_0_1_1_0_0 - 0.203174603174604*G0_1_0_2_0_1_2_0_1 + 0.203174603174604*G0_1_0_2_0_1_3_1_0 + 0.203174603174604*G0_1_0_2_0_1_3_1_1 - 0.203174603174604*G0_1_0_2_0_1_4_1_0 - 0.203174603174604*G0_1_0_2_0_1_5_1_1 - 0.203174603174604*G0_1_0_3_1_0_0_0_0 - 0.203174603174604*G0_1_0_3_1_0_0_0_1 + 0.203174603174604*G0_1_0_3_1_0_1_0_0 + 0.203174603174604*G0_1_0_3_1_0_2_0_1 - 0.203174603174604*G0_1_0_3_1_0_3_1_0 - 0.203174603174604*G0_1_0_3_1_0_3_1_1 + 0.203174603174604*G0_1_0_3_1_0_4_1_0 + 0.203174603174604*G0_1_0_3_1_0_5_1_1 - 0.203174603174604*G0_1_0_3_1_1_0_0_0 - 0.203174603174604*G0_1_0_3_1_1_0_0_1 + 0.203174603174604*G0_1_0_3_1_1_1_0_0 + 0.203174603174604*G0_1_0_3_1_1_2_0_1 - 0.203174603174604*G0_1_0_3_1_1_3_1_0 - 0.203174603174604*G0_1_0_3_1_1_3_1_1 + 0.203174603174604*G0_1_0_3_1_1_4_1_0 + 0.203174603174604*G0_1_0_3_1_1_5_1_1 + 0.203174603174604*G0_1_0_4_1_0_0_0_0 + 0.203174603174604*G0_1_0_4_1_0_0_0_1 - 0.203174603174604*G0_1_0_4_1_0_1_0_0 - 0.203174603174604*G0_1_0_4_1_0_2_0_1 + 0.203174603174604*G0_1_0_4_1_0_3_1_0 + 0.203174603174604*G0_1_0_4_1_0_3_1_1 - 0.203174603174604*G0_1_0_4_1_0_4_1_0 - 0.203174603174604*G0_1_0_4_1_0_5_1_1 + 0.203174603174604*G0_1_0_5_1_1_0_0_0 + 0.203174603174604*G0_1_0_5_1_1_0_0_1 - 0.203174603174604*G0_1_0_5_1_1_1_0_0 - 0.203174603174604*G0_1_0_5_1_1_2_0_1 + 0.203174603174604*G0_1_0_5_1_1_3_1_0 + 0.203174603174604*G0_1_0_5_1_1_3_1_1 - 0.203174603174604*G0_1_0_5_1_1_4_1_0 - 0.203174603174604*G0_1_0_5_1_1_5_1_1 - 0.203174603174604*G0_1_1_0_0_0_0_0_0 - 0.203174603174604*G0_1_1_0_0_0_0_0_1 + 0.203174603174604*G0_1_1_0_0_0_1_0_0 + 0.203174603174604*G0_1_1_0_0_0_2_0_1 - 0.203174603174604*G0_1_1_0_0_0_3_1_0 - 0.203174603174604*G0_1_1_0_0_0_3_1_1 + 0.203174603174604*G0_1_1_0_0_0_4_1_0 + 0.203174603174604*G0_1_1_0_0_0_5_1_1 - 0.203174603174604*G0_1_1_0_0_1_0_0_0 - 0.203174603174604*G0_1_1_0_0_1_0_0_1 + 0.203174603174604*G0_1_1_0_0_1_1_0_0 + 0.203174603174604*G0_1_1_0_0_1_2_0_1 - 0.203174603174604*G0_1_1_0_0_1_3_1_0 - 0.203174603174604*G0_1_1_0_0_1_3_1_1 + 0.203174603174604*G0_1_1_0_0_1_4_1_0 + 0.203174603174604*G0_1_1_0_0_1_5_1_1 + 0.203174603174604*G0_1_1_1_0_0_0_0_0 + 0.203174603174604*G0_1_1_1_0_0_0_0_1 - 0.203174603174604*G0_1_1_1_0_0_1_0_0 - 0.203174603174604*G0_1_1_1_0_0_2_0_1 + 0.203174603174604*G0_1_1_1_0_0_3_1_0 + 0.203174603174604*G0_1_1_1_0_0_3_1_1 - 0.203174603174604*G0_1_1_1_0_0_4_1_0 - 0.203174603174604*G0_1_1_1_0_0_5_1_1 + 0.203174603174604*G0_1_1_2_0_1_0_0_0 + 0.203174603174604*G0_1_1_2_0_1_0_0_1 - 0.203174603174604*G0_1_1_2_0_1_1_0_0 - 0.203174603174604*G0_1_1_2_0_1_2_0_1 + 0.203174603174604*G0_1_1_2_0_1_3_1_0 + 0.203174603174604*G0_1_1_2_0_1_3_1_1 - 0.203174603174604*G0_1_1_2_0_1_4_1_0 - 0.203174603174604*G0_1_1_2_0_1_5_1_1 - 0.203174603174604*G0_1_1_3_1_0_0_0_0 - 0.203174603174604*G0_1_1_3_1_0_0_0_1 + 0.203174603174604*G0_1_1_3_1_0_1_0_0 + 0.203174603174604*G0_1_1_3_1_0_2_0_1 - 0.203174603174604*G0_1_1_3_1_0_3_1_0 - 0.203174603174604*G0_1_1_3_1_0_3_1_1 + 0.203174603174604*G0_1_1_3_1_0_4_1_0 + 0.203174603174604*G0_1_1_3_1_0_5_1_1 - 0.203174603174604*G0_1_1_3_1_1_0_0_0 - 0.203174603174604*G0_1_1_3_1_1_0_0_1 + 0.203174603174604*G0_1_1_3_1_1_1_0_0 + 0.203174603174604*G0_1_1_3_1_1_2_0_1 - 0.203174603174604*G0_1_1_3_1_1_3_1_0 - 0.203174603174604*G0_1_1_3_1_1_3_1_1 + 0.203174603174604*G0_1_1_3_1_1_4_1_0 + 0.203174603174604*G0_1_1_3_1_1_5_1_1 + 0.203174603174604*G0_1_1_4_1_0_0_0_0 + 0.203174603174604*G0_1_1_4_1_0_0_0_1 - 0.203174603174604*G0_1_1_4_1_0_1_0_0 - 0.203174603174604*G0_1_1_4_1_0_2_0_1 + 0.203174603174604*G0_1_1_4_1_0_3_1_0 + 0.203174603174604*G0_1_1_4_1_0_3_1_1 - 0.203174603174604*G0_1_1_4_1_0_4_1_0 - 0.203174603174604*G0_1_1_4_1_0_5_1_1 + 0.203174603174604*G0_1_1_5_1_1_0_0_0 + 0.203174603174604*G0_1_1_5_1_1_0_0_1 - 0.203174603174604*G0_1_1_5_1_1_1_0_0 - 0.203174603174604*G0_1_1_5_1_1_2_0_1 + 0.203174603174604*G0_1_1_5_1_1_3_1_0 + 0.203174603174604*G0_1_1_5_1_1_3_1_1 - 0.203174603174604*G0_1_1_5_1_1_4_1_0 - 0.203174603174604*G0_1_1_5_1_1_5_1_1;
    A[299] = 0.0;
    A[446] = 0.0;
    A[326] = 0.0;
    A[469] = A[5];
    A[349] = 0.0;
    A[28] = 0.0;
    A[729] = 0.0;
    A[380] = 0.0;
    A[55] = 0.0;
    A[754] = 0.0;
    A[415] = 0.0;
    A[783] = 0.0;
    A[820] = 0.0;
    A[144] = 0.0;
    A[853] = 0.0;
    A[179] = 0.0;
    A[491] = 0.0;
    A[198] = 0.0;
    A[656] = A[716] - 0.135449735449742*G0_0_0_0_0_0_0_0_0 - 0.135449735449742*G0_0_0_0_0_0_0_0_1 + 0.135449735449742*G0_0_0_0_0_0_1_0_0 + 0.135449735449742*G0_0_0_0_0_0_2_0_1 - 0.135449735449742*G0_0_0_0_0_0_3_1_0 - 0.135449735449742*G0_0_0_0_0_0_3_1_1 + 0.135449735449742*G0_0_0_0_0_0_4_1_0 + 0.135449735449742*G0_0_0_0_0_0_5_1_1 - 0.135449735449742*G0_0_0_0_0_1_0_0_0 - 0.135449735449742*G0_0_0_0_0_1_0_0_1 + 0.135449735449742*G0_0_0_0_0_1_1_0_0 + 0.135449735449742*G0_0_0_0_0_1_2_0_1 - 0.135449735449742*G0_0_0_0_0_1_3_1_0 - 0.135449735449742*G0_0_0_0_0_1_3_1_1 + 0.135449735449742*G0_0_0_0_0_1_4_1_0 + 0.135449735449742*G0_0_0_0_0_1_5_1_1 + 0.135449735449742*G0_0_0_1_0_0_0_0_0 + 0.135449735449742*G0_0_0_1_0_0_0_0_1 - 0.135449735449742*G0_0_0_1_0_0_1_0_0 - 0.135449735449742*G0_0_0_1_0_0_2_0_1 + 0.135449735449742*G0_0_0_1_0_0_3_1_0 + 0.135449735449742*G0_0_0_1_0_0_3_1_1 - 0.135449735449742*G0_0_0_1_0_0_4_1_0 - 0.135449735449742*G0_0_0_1_0_0_5_1_1 + 0.135449735449742*G0_0_0_2_0_1_0_0_0 + 0.135449735449742*G0_0_0_2_0_1_0_0_1 - 0.135449735449742*G0_0_0_2_0_1_1_0_0 - 0.135449735449742*G0_0_0_2_0_1_2_0_1 + 0.135449735449742*G0_0_0_2_0_1_3_1_0 + 0.135449735449742*G0_0_0_2_0_1_3_1_1 - 0.135449735449742*G0_0_0_2_0_1_4_1_0 - 0.135449735449742*G0_0_0_2_0_1_5_1_1 - 0.135449735449742*G0_0_0_3_1_0_0_0_0 - 0.135449735449742*G0_0_0_3_1_0_0_0_1 + 0.135449735449742*G0_0_0_3_1_0_1_0_0 + 0.135449735449742*G0_0_0_3_1_0_2_0_1 - 0.135449735449742*G0_0_0_3_1_0_3_1_0 - 0.135449735449742*G0_0_0_3_1_0_3_1_1 + 0.135449735449742*G0_0_0_3_1_0_4_1_0 + 0.135449735449742*G0_0_0_3_1_0_5_1_1 - 0.135449735449742*G0_0_0_3_1_1_0_0_0 - 0.135449735449742*G0_0_0_3_1_1_0_0_1 + 0.135449735449742*G0_0_0_3_1_1_1_0_0 + 0.135449735449742*G0_0_0_3_1_1_2_0_1 - 0.135449735449742*G0_0_0_3_1_1_3_1_0 - 0.135449735449742*G0_0_0_3_1_1_3_1_1 + 0.135449735449742*G0_0_0_3_1_1_4_1_0 + 0.135449735449742*G0_0_0_3_1_1_5_1_1 + 0.135449735449742*G0_0_0_4_1_0_0_0_0 + 0.135449735449742*G0_0_0_4_1_0_0_0_1 - 0.135449735449742*G0_0_0_4_1_0_1_0_0 - 0.135449735449742*G0_0_0_4_1_0_2_0_1 + 0.135449735449742*G0_0_0_4_1_0_3_1_0 + 0.135449735449742*G0_0_0_4_1_0_3_1_1 - 0.135449735449742*G0_0_0_4_1_0_4_1_0 - 0.135449735449742*G0_0_0_4_1_0_5_1_1 + 0.135449735449742*G0_0_0_5_1_1_0_0_0 + 0.135449735449742*G0_0_0_5_1_1_0_0_1 - 0.135449735449742*G0_0_0_5_1_1_1_0_0 - 0.135449735449742*G0_0_0_5_1_1_2_0_1 + 0.135449735449742*G0_0_0_5_1_1_3_1_0 + 0.135449735449742*G0_0_0_5_1_1_3_1_1 - 0.135449735449742*G0_0_0_5_1_1_4_1_0 - 0.135449735449742*G0_0_0_5_1_1_5_1_1;
    A[741] = A[656] + 0.812698412698418*G0_0_1_0_0_0_0_0_0 + 0.812698412698418*G0_0_1_0_0_0_0_0_1 - 0.812698412698418*G0_0_1_0_0_0_1_0_0 - 0.812698412698418*G0_0_1_0_0_0_2_0_1 + 0.812698412698418*G0_0_1_0_0_0_3_1_0 + 0.812698412698418*G0_0_1_0_0_0_3_1_1 - 0.812698412698418*G0_0_1_0_0_0_4_1_0 - 0.812698412698418*G0_0_1_0_0_0_5_1_1 + 0.812698412698418*G0_0_1_0_0_1_0_0_0 + 0.812698412698418*G0_0_1_0_0_1_0_0_1 - 0.812698412698418*G0_0_1_0_0_1_1_0_0 - 0.812698412698418*G0_0_1_0_0_1_2_0_1 + 0.812698412698418*G0_0_1_0_0_1_3_1_0 + 0.812698412698418*G0_0_1_0_0_1_3_1_1 - 0.812698412698418*G0_0_1_0_0_1_4_1_0 - 0.812698412698418*G0_0_1_0_0_1_5_1_1 - 0.812698412698418*G0_0_1_1_0_0_0_0_0 - 0.812698412698418*G0_0_1_1_0_0_0_0_1 + 0.812698412698418*G0_0_1_1_0_0_1_0_0 + 0.812698412698418*G0_0_1_1_0_0_2_0_1 - 0.812698412698418*G0_0_1_1_0_0_3_1_0 - 0.812698412698418*G0_0_1_1_0_0_3_1_1 + 0.812698412698418*G0_0_1_1_0_0_4_1_0 + 0.812698412698418*G0_0_1_1_0_0_5_1_1 - 0.812698412698418*G0_0_1_2_0_1_0_0_0 - 0.812698412698418*G0_0_1_2_0_1_0_0_1 + 0.812698412698418*G0_0_1_2_0_1_1_0_0 + 0.812698412698418*G0_0_1_2_0_1_2_0_1 - 0.812698412698418*G0_0_1_2_0_1_3_1_0 - 0.812698412698418*G0_0_1_2_0_1_3_1_1 + 0.812698412698418*G0_0_1_2_0_1_4_1_0 + 0.812698412698418*G0_0_1_2_0_1_5_1_1 + 0.812698412698418*G0_0_1_3_1_0_0_0_0 + 0.812698412698418*G0_0_1_3_1_0_0_0_1 - 0.812698412698418*G0_0_1_3_1_0_1_0_0 - 0.812698412698418*G0_0_1_3_1_0_2_0_1 + 0.812698412698418*G0_0_1_3_1_0_3_1_0 + 0.812698412698418*G0_0_1_3_1_0_3_1_1 - 0.812698412698418*G0_0_1_3_1_0_4_1_0 - 0.812698412698418*G0_0_1_3_1_0_5_1_1 + 0.812698412698418*G0_0_1_3_1_1_0_0_0 + 0.812698412698418*G0_0_1_3_1_1_0_0_1 - 0.812698412698418*G0_0_1_3_1_1_1_0_0 - 0.812698412698418*G0_0_1_3_1_1_2_0_1 + 0.812698412698418*G0_0_1_3_1_1_3_1_0 + 0.812698412698418*G0_0_1_3_1_1_3_1_1 - 0.812698412698418*G0_0_1_3_1_1_4_1_0 - 0.812698412698418*G0_0_1_3_1_1_5_1_1 - 0.812698412698418*G0_0_1_4_1_0_0_0_0 - 0.812698412698418*G0_0_1_4_1_0_0_0_1 + 0.812698412698418*G0_0_1_4_1_0_1_0_0 + 0.812698412698418*G0_0_1_4_1_0_2_0_1 - 0.812698412698418*G0_0_1_4_1_0_3_1_0 - 0.812698412698418*G0_0_1_4_1_0_3_1_1 + 0.812698412698418*G0_0_1_4_1_0_4_1_0 + 0.812698412698418*G0_0_1_4_1_0_5_1_1 - 0.812698412698418*G0_0_1_5_1_1_0_0_0 - 0.812698412698418*G0_0_1_5_1_1_0_0_1 + 0.812698412698418*G0_0_1_5_1_1_1_0_0 + 0.812698412698418*G0_0_1_5_1_1_2_0_1 - 0.812698412698418*G0_0_1_5_1_1_3_1_0 - 0.812698412698418*G0_0_1_5_1_1_3_1_1 + 0.812698412698418*G0_0_1_5_1_1_4_1_0 + 0.812698412698418*G0_0_1_5_1_1_5_1_1 + 0.812698412698418*G0_1_0_0_0_0_0_0_0 + 0.812698412698418*G0_1_0_0_0_0_0_0_1 - 0.812698412698418*G0_1_0_0_0_0_1_0_0 - 0.812698412698418*G0_1_0_0_0_0_2_0_1 + 0.812698412698418*G0_1_0_0_0_0_3_1_0 + 0.812698412698418*G0_1_0_0_0_0_3_1_1 - 0.812698412698418*G0_1_0_0_0_0_4_1_0 - 0.812698412698418*G0_1_0_0_0_0_5_1_1 + 0.812698412698418*G0_1_0_0_0_1_0_0_0 + 0.812698412698418*G0_1_0_0_0_1_0_0_1 - 0.812698412698418*G0_1_0_0_0_1_1_0_0 - 0.812698412698418*G0_1_0_0_0_1_2_0_1 + 0.812698412698418*G0_1_0_0_0_1_3_1_0 + 0.812698412698418*G0_1_0_0_0_1_3_1_1 - 0.812698412698418*G0_1_0_0_0_1_4_1_0 - 0.812698412698418*G0_1_0_0_0_1_5_1_1 - 0.812698412698418*G0_1_0_1_0_0_0_0_0 - 0.812698412698418*G0_1_0_1_0_0_0_0_1 + 0.812698412698418*G0_1_0_1_0_0_1_0_0 + 0.812698412698418*G0_1_0_1_0_0_2_0_1 - 0.812698412698418*G0_1_0_1_0_0_3_1_0 - 0.812698412698418*G0_1_0_1_0_0_3_1_1 + 0.812698412698418*G0_1_0_1_0_0_4_1_0 + 0.812698412698418*G0_1_0_1_0_0_5_1_1 - 0.812698412698418*G0_1_0_2_0_1_0_0_0 - 0.812698412698418*G0_1_0_2_0_1_0_0_1 + 0.812698412698418*G0_1_0_2_0_1_1_0_0 + 0.812698412698418*G0_1_0_2_0_1_2_0_1 - 0.812698412698418*G0_1_0_2_0_1_3_1_0 - 0.812698412698418*G0_1_0_2_0_1_3_1_1 + 0.812698412698418*G0_1_0_2_0_1_4_1_0 + 0.812698412698418*G0_1_0_2_0_1_5_1_1 + 0.812698412698418*G0_1_0_3_1_0_0_0_0 + 0.812698412698418*G0_1_0_3_1_0_0_0_1 - 0.812698412698418*G0_1_0_3_1_0_1_0_0 - 0.812698412698418*G0_1_0_3_1_0_2_0_1 + 0.812698412698418*G0_1_0_3_1_0_3_1_0 + 0.812698412698418*G0_1_0_3_1_0_3_1_1 - 0.812698412698418*G0_1_0_3_1_0_4_1_0 - 0.812698412698418*G0_1_0_3_1_0_5_1_1 + 0.812698412698418*G0_1_0_3_1_1_0_0_0 + 0.812698412698418*G0_1_0_3_1_1_0_0_1 - 0.812698412698418*G0_1_0_3_1_1_1_0_0 - 0.812698412698418*G0_1_0_3_1_1_2_0_1 + 0.812698412698418*G0_1_0_3_1_1_3_1_0 + 0.812698412698418*G0_1_0_3_1_1_3_1_1 - 0.812698412698418*G0_1_0_3_1_1_4_1_0 - 0.812698412698418*G0_1_0_3_1_1_5_1_1 - 0.812698412698418*G0_1_0_4_1_0_0_0_0 - 0.812698412698418*G0_1_0_4_1_0_0_0_1 + 0.812698412698418*G0_1_0_4_1_0_1_0_0 + 0.812698412698418*G0_1_0_4_1_0_2_0_1 - 0.812698412698418*G0_1_0_4_1_0_3_1_0 - 0.812698412698418*G0_1_0_4_1_0_3_1_1 + 0.812698412698418*G0_1_0_4_1_0_4_1_0 + 0.812698412698418*G0_1_0_4_1_0_5_1_1 - 0.812698412698418*G0_1_0_5_1_1_0_0_0 - 0.812698412698418*G0_1_0_5_1_1_0_0_1 + 0.812698412698418*G0_1_0_5_1_1_1_0_0 + 0.812698412698418*G0_1_0_5_1_1_2_0_1 - 0.812698412698418*G0_1_0_5_1_1_3_1_0 - 0.812698412698418*G0_1_0_5_1_1_3_1_1 + 0.812698412698418*G0_1_0_5_1_1_4_1_0 + 0.812698412698418*G0_1_0_5_1_1_5_1_1 - 0.13544973544974*G0_1_1_0_0_0_0_0_0 - 0.13544973544974*G0_1_1_0_0_0_0_0_1 + 0.13544973544974*G0_1_1_0_0_0_1_0_0 + 0.13544973544974*G0_1_1_0_0_0_2_0_1 - 0.13544973544974*G0_1_1_0_0_0_3_1_0 - 0.13544973544974*G0_1_1_0_0_0_3_1_1 + 0.13544973544974*G0_1_1_0_0_0_4_1_0 + 0.13544973544974*G0_1_1_0_0_0_5_1_1 - 0.13544973544974*G0_1_1_0_0_1_0_0_0 - 0.13544973544974*G0_1_1_0_0_1_0_0_1 + 0.13544973544974*G0_1_1_0_0_1_1_0_0 + 0.13544973544974*G0_1_1_0_0_1_2_0_1 - 0.13544973544974*G0_1_1_0_0_1_3_1_0 - 0.13544973544974*G0_1_1_0_0_1_3_1_1 + 0.13544973544974*G0_1_1_0_0_1_4_1_0 + 0.13544973544974*G0_1_1_0_0_1_5_1_1 + 0.13544973544974*G0_1_1_1_0_0_0_0_0 + 0.13544973544974*G0_1_1_1_0_0_0_0_1 - 0.13544973544974*G0_1_1_1_0_0_1_0_0 - 0.13544973544974*G0_1_1_1_0_0_2_0_1 + 0.13544973544974*G0_1_1_1_0_0_3_1_0 + 0.13544973544974*G0_1_1_1_0_0_3_1_1 - 0.13544973544974*G0_1_1_1_0_0_4_1_0 - 0.13544973544974*G0_1_1_1_0_0_5_1_1 + 0.13544973544974*G0_1_1_2_0_1_0_0_0 + 0.13544973544974*G0_1_1_2_0_1_0_0_1 - 0.13544973544974*G0_1_1_2_0_1_1_0_0 - 0.13544973544974*G0_1_1_2_0_1_2_0_1 + 0.13544973544974*G0_1_1_2_0_1_3_1_0 + 0.13544973544974*G0_1_1_2_0_1_3_1_1 - 0.13544973544974*G0_1_1_2_0_1_4_1_0 - 0.13544973544974*G0_1_1_2_0_1_5_1_1 - 0.13544973544974*G0_1_1_3_1_0_0_0_0 - 0.13544973544974*G0_1_1_3_1_0_0_0_1 + 0.13544973544974*G0_1_1_3_1_0_1_0_0 + 0.13544973544974*G0_1_1_3_1_0_2_0_1 - 0.13544973544974*G0_1_1_3_1_0_3_1_0 - 0.13544973544974*G0_1_1_3_1_0_3_1_1 + 0.13544973544974*G0_1_1_3_1_0_4_1_0 + 0.13544973544974*G0_1_1_3_1_0_5_1_1 - 0.13544973544974*G0_1_1_3_1_1_0_0_0 - 0.13544973544974*G0_1_1_3_1_1_0_0_1 + 0.13544973544974*G0_1_1_3_1_1_1_0_0 + 0.13544973544974*G0_1_1_3_1_1_2_0_1 - 0.13544973544974*G0_1_1_3_1_1_3_1_0 - 0.13544973544974*G0_1_1_3_1_1_3_1_1 + 0.13544973544974*G0_1_1_3_1_1_4_1_0 + 0.13544973544974*G0_1_1_3_1_1_5_1_1 + 0.13544973544974*G0_1_1_4_1_0_0_0_0 + 0.13544973544974*G0_1_1_4_1_0_0_0_1 - 0.13544973544974*G0_1_1_4_1_0_1_0_0 - 0.13544973544974*G0_1_1_4_1_0_2_0_1 + 0.13544973544974*G0_1_1_4_1_0_3_1_0 + 0.13544973544974*G0_1_1_4_1_0_3_1_1 - 0.13544973544974*G0_1_1_4_1_0_4_1_0 - 0.13544973544974*G0_1_1_4_1_0_5_1_1 + 0.13544973544974*G0_1_1_5_1_1_0_0_0 + 0.13544973544974*G0_1_1_5_1_1_0_0_1 - 0.13544973544974*G0_1_1_5_1_1_1_0_0 - 0.13544973544974*G0_1_1_5_1_1_2_0_1 + 0.13544973544974*G0_1_1_5_1_1_3_1_0 + 0.13544973544974*G0_1_1_5_1_1_3_1_1 - 0.13544973544974*G0_1_1_5_1_1_4_1_0 - 0.13544973544974*G0_1_1_5_1_1_5_1_1;
    A[576] = 0.0;
    A[520] = 0.0;
    A[237] = 0.0;
    A[601] = 0.0;
    A[557] = A[92];
    A[634] = 0.0;
    A[671] = 0.0;
    A[276] = A[741];
    A[449] = 0.0;
    A[305] = A[625];
    A[474] = A[270] + 0.778835978835986*G0_0_1_0_0_0_0_0_0 + 0.778835978835986*G0_0_1_0_0_0_0_0_1 - 0.778835978835986*G0_0_1_0_0_0_1_0_0 - 0.778835978835986*G0_0_1_0_0_0_2_0_1 + 0.778835978835986*G0_0_1_0_0_0_3_1_0 + 0.778835978835986*G0_0_1_0_0_0_3_1_1 - 0.778835978835986*G0_0_1_0_0_0_4_1_0 - 0.778835978835986*G0_0_1_0_0_0_5_1_1 + 0.778835978835986*G0_0_1_0_0_1_0_0_0 + 0.778835978835986*G0_0_1_0_0_1_0_0_1 - 0.778835978835986*G0_0_1_0_0_1_1_0_0 - 0.778835978835986*G0_0_1_0_0_1_2_0_1 + 0.778835978835986*G0_0_1_0_0_1_3_1_0 + 0.778835978835986*G0_0_1_0_0_1_3_1_1 - 0.778835978835986*G0_0_1_0_0_1_4_1_0 - 0.778835978835986*G0_0_1_0_0_1_5_1_1 - 0.778835978835986*G0_0_1_1_0_0_0_0_0 - 0.778835978835986*G0_0_1_1_0_0_0_0_1 + 0.778835978835986*G0_0_1_1_0_0_1_0_0 + 0.778835978835986*G0_0_1_1_0_0_2_0_1 - 0.778835978835986*G0_0_1_1_0_0_3_1_0 - 0.778835978835986*G0_0_1_1_0_0_3_1_1 + 0.778835978835986*G0_0_1_1_0_0_4_1_0 + 0.778835978835986*G0_0_1_1_0_0_5_1_1 - 0.778835978835986*G0_0_1_2_0_1_0_0_0 - 0.778835978835986*G0_0_1_2_0_1_0_0_1 + 0.778835978835986*G0_0_1_2_0_1_1_0_0 + 0.778835978835986*G0_0_1_2_0_1_2_0_1 - 0.778835978835986*G0_0_1_2_0_1_3_1_0 - 0.778835978835986*G0_0_1_2_0_1_3_1_1 + 0.778835978835986*G0_0_1_2_0_1_4_1_0 + 0.778835978835986*G0_0_1_2_0_1_5_1_1 + 0.778835978835986*G0_0_1_3_1_0_0_0_0 + 0.778835978835986*G0_0_1_3_1_0_0_0_1 - 0.778835978835986*G0_0_1_3_1_0_1_0_0 - 0.778835978835986*G0_0_1_3_1_0_2_0_1 + 0.778835978835986*G0_0_1_3_1_0_3_1_0 + 0.778835978835986*G0_0_1_3_1_0_3_1_1 - 0.778835978835986*G0_0_1_3_1_0_4_1_0 - 0.778835978835986*G0_0_1_3_1_0_5_1_1 + 0.778835978835986*G0_0_1_3_1_1_0_0_0 + 0.778835978835986*G0_0_1_3_1_1_0_0_1 - 0.778835978835986*G0_0_1_3_1_1_1_0_0 - 0.778835978835986*G0_0_1_3_1_1_2_0_1 + 0.778835978835986*G0_0_1_3_1_1_3_1_0 + 0.778835978835986*G0_0_1_3_1_1_3_1_1 - 0.778835978835986*G0_0_1_3_1_1_4_1_0 - 0.778835978835986*G0_0_1_3_1_1_5_1_1 - 0.778835978835986*G0_0_1_4_1_0_0_0_0 - 0.778835978835986*G0_0_1_4_1_0_0_0_1 + 0.778835978835986*G0_0_1_4_1_0_1_0_0 + 0.778835978835986*G0_0_1_4_1_0_2_0_1 - 0.778835978835986*G0_0_1_4_1_0_3_1_0 - 0.778835978835986*G0_0_1_4_1_0_3_1_1 + 0.778835978835986*G0_0_1_4_1_0_4_1_0 + 0.778835978835986*G0_0_1_4_1_0_5_1_1 - 0.778835978835986*G0_0_1_5_1_1_0_0_0 - 0.778835978835986*G0_0_1_5_1_1_0_0_1 + 0.778835978835986*G0_0_1_5_1_1_1_0_0 + 0.778835978835986*G0_0_1_5_1_1_2_0_1 - 0.778835978835986*G0_0_1_5_1_1_3_1_0 - 0.778835978835986*G0_0_1_5_1_1_3_1_1 + 0.778835978835986*G0_0_1_5_1_1_4_1_0 + 0.778835978835986*G0_0_1_5_1_1_5_1_1 - 0.778835978835986*G0_1_0_0_0_0_0_0_0 - 0.778835978835986*G0_1_0_0_0_0_0_0_1 + 0.778835978835986*G0_1_0_0_0_0_1_0_0 + 0.778835978835986*G0_1_0_0_0_0_2_0_1 - 0.778835978835986*G0_1_0_0_0_0_3_1_0 - 0.778835978835986*G0_1_0_0_0_0_3_1_1 + 0.778835978835986*G0_1_0_0_0_0_4_1_0 + 0.778835978835986*G0_1_0_0_0_0_5_1_1 - 0.778835978835986*G0_1_0_0_0_1_0_0_0 - 0.778835978835986*G0_1_0_0_0_1_0_0_1 + 0.778835978835986*G0_1_0_0_0_1_1_0_0 + 0.778835978835986*G0_1_0_0_0_1_2_0_1 - 0.778835978835986*G0_1_0_0_0_1_3_1_0 - 0.778835978835986*G0_1_0_0_0_1_3_1_1 + 0.778835978835986*G0_1_0_0_0_1_4_1_0 + 0.778835978835986*G0_1_0_0_0_1_5_1_1 + 0.778835978835986*G0_1_0_1_0_0_0_0_0 + 0.778835978835986*G0_1_0_1_0_0_0_0_1 - 0.778835978835986*G0_1_0_1_0_0_1_0_0 - 0.778835978835986*G0_1_0_1_0_0_2_0_1 + 0.778835978835986*G0_1_0_1_0_0_3_1_0 + 0.778835978835986*G0_1_0_1_0_0_3_1_1 - 0.778835978835986*G0_1_0_1_0_0_4_1_0 - 0.778835978835986*G0_1_0_1_0_0_5_1_1 + 0.778835978835986*G0_1_0_2_0_1_0_0_0 + 0.778835978835986*G0_1_0_2_0_1_0_0_1 - 0.778835978835986*G0_1_0_2_0_1_1_0_0 - 0.778835978835986*G0_1_0_2_0_1_2_0_1 + 0.778835978835986*G0_1_0_2_0_1_3_1_0 + 0.778835978835986*G0_1_0_2_0_1_3_1_1 - 0.778835978835986*G0_1_0_2_0_1_4_1_0 - 0.778835978835986*G0_1_0_2_0_1_5_1_1 - 0.778835978835986*G0_1_0_3_1_0_0_0_0 - 0.778835978835986*G0_1_0_3_1_0_0_0_1 + 0.778835978835986*G0_1_0_3_1_0_1_0_0 + 0.778835978835986*G0_1_0_3_1_0_2_0_1 - 0.778835978835986*G0_1_0_3_1_0_3_1_0 - 0.778835978835986*G0_1_0_3_1_0_3_1_1 + 0.778835978835986*G0_1_0_3_1_0_4_1_0 + 0.778835978835986*G0_1_0_3_1_0_5_1_1 - 0.778835978835986*G0_1_0_3_1_1_0_0_0 - 0.778835978835986*G0_1_0_3_1_1_0_0_1 + 0.778835978835986*G0_1_0_3_1_1_1_0_0 + 0.778835978835986*G0_1_0_3_1_1_2_0_1 - 0.778835978835986*G0_1_0_3_1_1_3_1_0 - 0.778835978835986*G0_1_0_3_1_1_3_1_1 + 0.778835978835986*G0_1_0_3_1_1_4_1_0 + 0.778835978835986*G0_1_0_3_1_1_5_1_1 + 0.778835978835986*G0_1_0_4_1_0_0_0_0 + 0.778835978835986*G0_1_0_4_1_0_0_0_1 - 0.778835978835986*G0_1_0_4_1_0_1_0_0 - 0.778835978835986*G0_1_0_4_1_0_2_0_1 + 0.778835978835986*G0_1_0_4_1_0_3_1_0 + 0.778835978835986*G0_1_0_4_1_0_3_1_1 - 0.778835978835986*G0_1_0_4_1_0_4_1_0 - 0.778835978835986*G0_1_0_4_1_0_5_1_1 + 0.778835978835986*G0_1_0_5_1_1_0_0_0 + 0.778835978835986*G0_1_0_5_1_1_0_0_1 - 0.778835978835986*G0_1_0_5_1_1_1_0_0 - 0.778835978835986*G0_1_0_5_1_1_2_0_1 + 0.778835978835986*G0_1_0_5_1_1_3_1_0 + 0.778835978835986*G0_1_0_5_1_1_3_1_1 - 0.778835978835986*G0_1_0_5_1_1_4_1_0 - 0.778835978835986*G0_1_0_5_1_1_5_1_1;
    A[645] = A[474] + 0.778835978835986*G0_0_0_0_0_0_0_0_0 + 0.778835978835986*G0_0_0_0_0_0_0_0_1 - 0.778835978835986*G0_0_0_0_0_0_1_0_0 - 0.778835978835986*G0_0_0_0_0_0_2_0_1 + 0.778835978835986*G0_0_0_0_0_0_3_1_0 + 0.778835978835986*G0_0_0_0_0_0_3_1_1 - 0.778835978835986*G0_0_0_0_0_0_4_1_0 - 0.778835978835986*G0_0_0_0_0_0_5_1_1 + 0.778835978835986*G0_0_0_0_0_1_0_0_0 + 0.778835978835986*G0_0_0_0_0_1_0_0_1 - 0.778835978835986*G0_0_0_0_0_1_1_0_0 - 0.778835978835986*G0_0_0_0_0_1_2_0_1 + 0.778835978835986*G0_0_0_0_0_1_3_1_0 + 0.778835978835986*G0_0_0_0_0_1_3_1_1 - 0.778835978835986*G0_0_0_0_0_1_4_1_0 - 0.778835978835986*G0_0_0_0_0_1_5_1_1 - 0.778835978835986*G0_0_0_1_0_0_0_0_0 - 0.778835978835986*G0_0_0_1_0_0_0_0_1 + 0.778835978835986*G0_0_0_1_0_0_1_0_0 + 0.778835978835986*G0_0_0_1_0_0_2_0_1 - 0.778835978835986*G0_0_0_1_0_0_3_1_0 - 0.778835978835986*G0_0_0_1_0_0_3_1_1 + 0.778835978835986*G0_0_0_1_0_0_4_1_0 + 0.778835978835986*G0_0_0_1_0_0_5_1_1 - 0.778835978835986*G0_0_0_2_0_1_0_0_0 - 0.778835978835986*G0_0_0_2_0_1_0_0_1 + 0.778835978835986*G0_0_0_2_0_1_1_0_0 + 0.778835978835986*G0_0_0_2_0_1_2_0_1 - 0.778835978835986*G0_0_0_2_0_1_3_1_0 - 0.778835978835986*G0_0_0_2_0_1_3_1_1 + 0.778835978835986*G0_0_0_2_0_1_4_1_0 + 0.778835978835986*G0_0_0_2_0_1_5_1_1 + 0.778835978835986*G0_0_0_3_1_0_0_0_0 + 0.778835978835986*G0_0_0_3_1_0_0_0_1 - 0.778835978835986*G0_0_0_3_1_0_1_0_0 - 0.778835978835986*G0_0_0_3_1_0_2_0_1 + 0.778835978835986*G0_0_0_3_1_0_3_1_0 + 0.778835978835986*G0_0_0_3_1_0_3_1_1 - 0.778835978835986*G0_0_0_3_1_0_4_1_0 - 0.778835978835986*G0_0_0_3_1_0_5_1_1 + 0.778835978835986*G0_0_0_3_1_1_0_0_0 + 0.778835978835986*G0_0_0_3_1_1_0_0_1 - 0.778835978835986*G0_0_0_3_1_1_1_0_0 - 0.778835978835986*G0_0_0_3_1_1_2_0_1 + 0.778835978835986*G0_0_0_3_1_1_3_1_0 + 0.778835978835986*G0_0_0_3_1_1_3_1_1 - 0.778835978835986*G0_0_0_3_1_1_4_1_0 - 0.778835978835986*G0_0_0_3_1_1_5_1_1 - 0.778835978835986*G0_0_0_4_1_0_0_0_0 - 0.778835978835986*G0_0_0_4_1_0_0_0_1 + 0.778835978835986*G0_0_0_4_1_0_1_0_0 + 0.778835978835986*G0_0_0_4_1_0_2_0_1 - 0.778835978835986*G0_0_0_4_1_0_3_1_0 - 0.778835978835986*G0_0_0_4_1_0_3_1_1 + 0.778835978835986*G0_0_0_4_1_0_4_1_0 + 0.778835978835986*G0_0_0_4_1_0_5_1_1 - 0.778835978835986*G0_0_0_5_1_1_0_0_0 - 0.778835978835986*G0_0_0_5_1_1_0_0_1 + 0.778835978835986*G0_0_0_5_1_1_1_0_0 + 0.778835978835986*G0_0_0_5_1_1_2_0_1 - 0.778835978835986*G0_0_0_5_1_1_3_1_0 - 0.778835978835986*G0_0_0_5_1_1_3_1_1 + 0.778835978835986*G0_0_0_5_1_1_4_1_0 + 0.778835978835986*G0_0_0_5_1_1_5_1_1 - 0.778835978835986*G0_1_1_0_0_0_0_0_0 - 0.778835978835986*G0_1_1_0_0_0_0_0_1 + 0.778835978835986*G0_1_1_0_0_0_1_0_0 + 0.778835978835986*G0_1_1_0_0_0_2_0_1 - 0.778835978835986*G0_1_1_0_0_0_3_1_0 - 0.778835978835986*G0_1_1_0_0_0_3_1_1 + 0.778835978835986*G0_1_1_0_0_0_4_1_0 + 0.778835978835986*G0_1_1_0_0_0_5_1_1 - 0.778835978835986*G0_1_1_0_0_1_0_0_0 - 0.778835978835986*G0_1_1_0_0_1_0_0_1 + 0.778835978835986*G0_1_1_0_0_1_1_0_0 + 0.778835978835986*G0_1_1_0_0_1_2_0_1 - 0.778835978835986*G0_1_1_0_0_1_3_1_0 - 0.778835978835986*G0_1_1_0_0_1_3_1_1 + 0.778835978835986*G0_1_1_0_0_1_4_1_0 + 0.778835978835986*G0_1_1_0_0_1_5_1_1 + 0.778835978835986*G0_1_1_1_0_0_0_0_0 + 0.778835978835986*G0_1_1_1_0_0_0_0_1 - 0.778835978835986*G0_1_1_1_0_0_1_0_0 - 0.778835978835986*G0_1_1_1_0_0_2_0_1 + 0.778835978835986*G0_1_1_1_0_0_3_1_0 + 0.778835978835986*G0_1_1_1_0_0_3_1_1 - 0.778835978835986*G0_1_1_1_0_0_4_1_0 - 0.778835978835986*G0_1_1_1_0_0_5_1_1 + 0.778835978835986*G0_1_1_2_0_1_0_0_0 + 0.778835978835986*G0_1_1_2_0_1_0_0_1 - 0.778835978835986*G0_1_1_2_0_1_1_0_0 - 0.778835978835986*G0_1_1_2_0_1_2_0_1 + 0.778835978835986*G0_1_1_2_0_1_3_1_0 + 0.778835978835986*G0_1_1_2_0_1_3_1_1 - 0.778835978835986*G0_1_1_2_0_1_4_1_0 - 0.778835978835986*G0_1_1_2_0_1_5_1_1 - 0.778835978835986*G0_1_1_3_1_0_0_0_0 - 0.778835978835986*G0_1_1_3_1_0_0_0_1 + 0.778835978835986*G0_1_1_3_1_0_1_0_0 + 0.778835978835986*G0_1_1_3_1_0_2_0_1 - 0.778835978835986*G0_1_1_3_1_0_3_1_0 - 0.778835978835986*G0_1_1_3_1_0_3_1_1 + 0.778835978835986*G0_1_1_3_1_0_4_1_0 + 0.778835978835986*G0_1_1_3_1_0_5_1_1 - 0.778835978835986*G0_1_1_3_1_1_0_0_0 - 0.778835978835986*G0_1_1_3_1_1_0_0_1 + 0.778835978835986*G0_1_1_3_1_1_1_0_0 + 0.778835978835986*G0_1_1_3_1_1_2_0_1 - 0.778835978835986*G0_1_1_3_1_1_3_1_0 - 0.778835978835986*G0_1_1_3_1_1_3_1_1 + 0.778835978835986*G0_1_1_3_1_1_4_1_0 + 0.778835978835986*G0_1_1_3_1_1_5_1_1 + 0.778835978835986*G0_1_1_4_1_0_0_0_0 + 0.778835978835986*G0_1_1_4_1_0_0_0_1 - 0.778835978835986*G0_1_1_4_1_0_1_0_0 - 0.778835978835986*G0_1_1_4_1_0_2_0_1 + 0.778835978835986*G0_1_1_4_1_0_3_1_0 + 0.778835978835986*G0_1_1_4_1_0_3_1_1 - 0.778835978835986*G0_1_1_4_1_0_4_1_0 - 0.778835978835986*G0_1_1_4_1_0_5_1_1 + 0.778835978835986*G0_1_1_5_1_1_0_0_0 + 0.778835978835986*G0_1_1_5_1_1_0_0_1 - 0.778835978835986*G0_1_1_5_1_1_1_0_0 - 0.778835978835986*G0_1_1_5_1_1_2_0_1 + 0.778835978835986*G0_1_1_5_1_1_3_1_0 + 0.778835978835986*G0_1_1_5_1_1_3_1_1 - 0.778835978835986*G0_1_1_5_1_1_4_1_0 - 0.778835978835986*G0_1_1_5_1_1_5_1_1;
    A[338] = A[716];
    A[19] = 0.0;
    A[736] = -A[151] - 0.287830687830692*G0_0_0_0_0_0_0_0_0 - 0.287830687830692*G0_0_0_0_0_0_0_0_1 + 0.287830687830692*G0_0_0_0_0_0_1_0_0 + 0.287830687830692*G0_0_0_0_0_0_2_0_1 - 0.287830687830692*G0_0_0_0_0_0_3_1_0 - 0.287830687830692*G0_0_0_0_0_0_3_1_1 + 0.287830687830692*G0_0_0_0_0_0_4_1_0 + 0.287830687830692*G0_0_0_0_0_0_5_1_1 - 0.287830687830692*G0_0_0_0_0_1_0_0_0 - 0.287830687830692*G0_0_0_0_0_1_0_0_1 + 0.287830687830692*G0_0_0_0_0_1_1_0_0 + 0.287830687830692*G0_0_0_0_0_1_2_0_1 - 0.287830687830692*G0_0_0_0_0_1_3_1_0 - 0.287830687830692*G0_0_0_0_0_1_3_1_1 + 0.287830687830692*G0_0_0_0_0_1_4_1_0 + 0.287830687830692*G0_0_0_0_0_1_5_1_1 + 0.287830687830692*G0_0_0_1_0_0_0_0_0 + 0.287830687830692*G0_0_0_1_0_0_0_0_1 - 0.287830687830692*G0_0_0_1_0_0_1_0_0 - 0.287830687830692*G0_0_0_1_0_0_2_0_1 + 0.287830687830692*G0_0_0_1_0_0_3_1_0 + 0.287830687830692*G0_0_0_1_0_0_3_1_1 - 0.287830687830692*G0_0_0_1_0_0_4_1_0 - 0.287830687830692*G0_0_0_1_0_0_5_1_1 + 0.287830687830692*G0_0_0_2_0_1_0_0_0 + 0.287830687830692*G0_0_0_2_0_1_0_0_1 - 0.287830687830692*G0_0_0_2_0_1_1_0_0 - 0.287830687830692*G0_0_0_2_0_1_2_0_1 + 0.287830687830692*G0_0_0_2_0_1_3_1_0 + 0.287830687830692*G0_0_0_2_0_1_3_1_1 - 0.287830687830692*G0_0_0_2_0_1_4_1_0 - 0.287830687830692*G0_0_0_2_0_1_5_1_1 - 0.287830687830692*G0_0_0_3_1_0_0_0_0 - 0.287830687830692*G0_0_0_3_1_0_0_0_1 + 0.287830687830692*G0_0_0_3_1_0_1_0_0 + 0.287830687830692*G0_0_0_3_1_0_2_0_1 - 0.287830687830692*G0_0_0_3_1_0_3_1_0 - 0.287830687830692*G0_0_0_3_1_0_3_1_1 + 0.287830687830692*G0_0_0_3_1_0_4_1_0 + 0.287830687830692*G0_0_0_3_1_0_5_1_1 - 0.287830687830692*G0_0_0_3_1_1_0_0_0 - 0.287830687830692*G0_0_0_3_1_1_0_0_1 + 0.287830687830692*G0_0_0_3_1_1_1_0_0 + 0.287830687830692*G0_0_0_3_1_1_2_0_1 - 0.287830687830692*G0_0_0_3_1_1_3_1_0 - 0.287830687830692*G0_0_0_3_1_1_3_1_1 + 0.287830687830692*G0_0_0_3_1_1_4_1_0 + 0.287830687830692*G0_0_0_3_1_1_5_1_1 + 0.287830687830692*G0_0_0_4_1_0_0_0_0 + 0.287830687830692*G0_0_0_4_1_0_0_0_1 - 0.287830687830692*G0_0_0_4_1_0_1_0_0 - 0.287830687830692*G0_0_0_4_1_0_2_0_1 + 0.287830687830692*G0_0_0_4_1_0_3_1_0 + 0.287830687830692*G0_0_0_4_1_0_3_1_1 - 0.287830687830692*G0_0_0_4_1_0_4_1_0 - 0.287830687830692*G0_0_0_4_1_0_5_1_1 + 0.287830687830692*G0_0_0_5_1_1_0_0_0 + 0.287830687830692*G0_0_0_5_1_1_0_0_1 - 0.287830687830692*G0_0_0_5_1_1_1_0_0 - 0.287830687830692*G0_0_0_5_1_1_2_0_1 + 0.287830687830692*G0_0_0_5_1_1_3_1_0 + 0.287830687830692*G0_0_0_5_1_1_3_1_1 - 0.287830687830692*G0_0_0_5_1_1_4_1_0 - 0.287830687830692*G0_0_0_5_1_1_5_1_1;
    A[379] = 0.0;
    A[48] = 0.0;
    A[763] = 0.0;
    A[456] = 0.0;
    A[408] = 0.0;
    A[85] = 0.0;
    A[790] = 0.0;
    A[9] = A[474];
    A[813] = 0.0;
    A[127] = A[679];
    A[844] = 0.0;
    A[879] = 0.0;
    A[482] = 0.0;
    A[201] = 0.0;
    A[585] = A[5];
    A[513] = 0.0;
    A[226] = 0.0;
    A[608] = 0.0;
    A[548] = 0.0;
    A[504] = -A[500] - 0.287830687830692*G0_0_0_0_0_0_0_0_0 - 0.287830687830692*G0_0_0_0_0_0_0_0_1 + 0.287830687830692*G0_0_0_0_0_0_1_0_0 + 0.287830687830692*G0_0_0_0_0_0_2_0_1 - 0.287830687830692*G0_0_0_0_0_0_3_1_0 - 0.287830687830692*G0_0_0_0_0_0_3_1_1 + 0.287830687830692*G0_0_0_0_0_0_4_1_0 + 0.287830687830692*G0_0_0_0_0_0_5_1_1 - 0.287830687830692*G0_0_0_0_0_1_0_0_0 - 0.287830687830692*G0_0_0_0_0_1_0_0_1 + 0.287830687830692*G0_0_0_0_0_1_1_0_0 + 0.287830687830692*G0_0_0_0_0_1_2_0_1 - 0.287830687830692*G0_0_0_0_0_1_3_1_0 - 0.287830687830692*G0_0_0_0_0_1_3_1_1 + 0.287830687830692*G0_0_0_0_0_1_4_1_0 + 0.287830687830692*G0_0_0_0_0_1_5_1_1 + 0.287830687830692*G0_0_0_1_0_0_0_0_0 + 0.287830687830692*G0_0_0_1_0_0_0_0_1 - 0.287830687830692*G0_0_0_1_0_0_1_0_0 - 0.287830687830692*G0_0_0_1_0_0_2_0_1 + 0.287830687830692*G0_0_0_1_0_0_3_1_0 + 0.287830687830692*G0_0_0_1_0_0_3_1_1 - 0.287830687830692*G0_0_0_1_0_0_4_1_0 - 0.287830687830692*G0_0_0_1_0_0_5_1_1 + 0.287830687830692*G0_0_0_2_0_1_0_0_0 + 0.287830687830692*G0_0_0_2_0_1_0_0_1 - 0.287830687830692*G0_0_0_2_0_1_1_0_0 - 0.287830687830692*G0_0_0_2_0_1_2_0_1 + 0.287830687830692*G0_0_0_2_0_1_3_1_0 + 0.287830687830692*G0_0_0_2_0_1_3_1_1 - 0.287830687830692*G0_0_0_2_0_1_4_1_0 - 0.287830687830692*G0_0_0_2_0_1_5_1_1 - 0.287830687830692*G0_0_0_3_1_0_0_0_0 - 0.287830687830692*G0_0_0_3_1_0_0_0_1 + 0.287830687830692*G0_0_0_3_1_0_1_0_0 + 0.287830687830692*G0_0_0_3_1_0_2_0_1 - 0.287830687830692*G0_0_0_3_1_0_3_1_0 - 0.287830687830692*G0_0_0_3_1_0_3_1_1 + 0.287830687830692*G0_0_0_3_1_0_4_1_0 + 0.287830687830692*G0_0_0_3_1_0_5_1_1 - 0.287830687830692*G0_0_0_3_1_1_0_0_0 - 0.287830687830692*G0_0_0_3_1_1_0_0_1 + 0.287830687830692*G0_0_0_3_1_1_1_0_0 + 0.287830687830692*G0_0_0_3_1_1_2_0_1 - 0.287830687830692*G0_0_0_3_1_1_3_1_0 - 0.287830687830692*G0_0_0_3_1_1_3_1_1 + 0.287830687830692*G0_0_0_3_1_1_4_1_0 + 0.287830687830692*G0_0_0_3_1_1_5_1_1 + 0.287830687830692*G0_0_0_4_1_0_0_0_0 + 0.287830687830692*G0_0_0_4_1_0_0_0_1 - 0.287830687830692*G0_0_0_4_1_0_1_0_0 - 0.287830687830692*G0_0_0_4_1_0_2_0_1 + 0.287830687830692*G0_0_0_4_1_0_3_1_0 + 0.287830687830692*G0_0_0_4_1_0_3_1_1 - 0.287830687830692*G0_0_0_4_1_0_4_1_0 - 0.287830687830692*G0_0_0_4_1_0_5_1_1 + 0.287830687830692*G0_0_0_5_1_1_0_0_0 + 0.287830687830692*G0_0_0_5_1_1_0_0_1 - 0.287830687830692*G0_0_0_5_1_1_1_0_0 - 0.287830687830692*G0_0_0_5_1_1_2_0_1 + 0.287830687830692*G0_0_0_5_1_1_3_1_0 + 0.287830687830692*G0_0_0_5_1_1_3_1_1 - 0.287830687830692*G0_0_0_5_1_1_4_1_0 - 0.287830687830692*G0_0_0_5_1_1_5_1_1;
    A[643] = 0.0;
    A[662] = 0.0;
    A[285] = 0.0;
    A[701] = 0.0;
    A[260] = 0.0;
    A[331] = -0.651851851851859*G0_0_0_0_0_0_0_0_0 - 0.651851851851859*G0_0_0_0_0_0_0_0_1 + 0.651851851851859*G0_0_0_0_0_0_1_0_0 + 0.651851851851859*G0_0_0_0_0_0_2_0_1 - 0.651851851851859*G0_0_0_0_0_0_3_1_0 - 0.651851851851859*G0_0_0_0_0_0_3_1_1 + 0.651851851851859*G0_0_0_0_0_0_4_1_0 + 0.651851851851859*G0_0_0_0_0_0_5_1_1 - 0.651851851851859*G0_0_0_0_0_1_0_0_0 - 0.651851851851859*G0_0_0_0_0_1_0_0_1 + 0.651851851851859*G0_0_0_0_0_1_1_0_0 + 0.651851851851859*G0_0_0_0_0_1_2_0_1 - 0.651851851851859*G0_0_0_0_0_1_3_1_0 - 0.651851851851859*G0_0_0_0_0_1_3_1_1 + 0.651851851851859*G0_0_0_0_0_1_4_1_0 + 0.651851851851859*G0_0_0_0_0_1_5_1_1 + 0.651851851851859*G0_0_0_1_0_0_0_0_0 + 0.651851851851859*G0_0_0_1_0_0_0_0_1 - 0.651851851851859*G0_0_0_1_0_0_1_0_0 - 0.651851851851859*G0_0_0_1_0_0_2_0_1 + 0.651851851851859*G0_0_0_1_0_0_3_1_0 + 0.651851851851859*G0_0_0_1_0_0_3_1_1 - 0.651851851851859*G0_0_0_1_0_0_4_1_0 - 0.651851851851859*G0_0_0_1_0_0_5_1_1 + 0.651851851851859*G0_0_0_2_0_1_0_0_0 + 0.651851851851859*G0_0_0_2_0_1_0_0_1 - 0.651851851851859*G0_0_0_2_0_1_1_0_0 - 0.651851851851859*G0_0_0_2_0_1_2_0_1 + 0.651851851851859*G0_0_0_2_0_1_3_1_0 + 0.651851851851859*G0_0_0_2_0_1_3_1_1 - 0.651851851851859*G0_0_0_2_0_1_4_1_0 - 0.651851851851859*G0_0_0_2_0_1_5_1_1 - 0.651851851851859*G0_0_0_3_1_0_0_0_0 - 0.651851851851859*G0_0_0_3_1_0_0_0_1 + 0.651851851851859*G0_0_0_3_1_0_1_0_0 + 0.651851851851859*G0_0_0_3_1_0_2_0_1 - 0.651851851851859*G0_0_0_3_1_0_3_1_0 - 0.651851851851859*G0_0_0_3_1_0_3_1_1 + 0.651851851851859*G0_0_0_3_1_0_4_1_0 + 0.651851851851859*G0_0_0_3_1_0_5_1_1 - 0.651851851851859*G0_0_0_3_1_1_0_0_0 - 0.651851851851859*G0_0_0_3_1_1_0_0_1 + 0.651851851851859*G0_0_0_3_1_1_1_0_0 + 0.651851851851859*G0_0_0_3_1_1_2_0_1 - 0.651851851851859*G0_0_0_3_1_1_3_1_0 - 0.651851851851859*G0_0_0_3_1_1_3_1_1 + 0.651851851851859*G0_0_0_3_1_1_4_1_0 + 0.651851851851859*G0_0_0_3_1_1_5_1_1 + 0.651851851851859*G0_0_0_4_1_0_0_0_0 + 0.651851851851859*G0_0_0_4_1_0_0_0_1 - 0.651851851851859*G0_0_0_4_1_0_1_0_0 - 0.651851851851859*G0_0_0_4_1_0_2_0_1 + 0.651851851851859*G0_0_0_4_1_0_3_1_0 + 0.651851851851859*G0_0_0_4_1_0_3_1_1 - 0.651851851851859*G0_0_0_4_1_0_4_1_0 - 0.651851851851859*G0_0_0_4_1_0_5_1_1 + 0.651851851851859*G0_0_0_5_1_1_0_0_0 + 0.651851851851859*G0_0_0_5_1_1_0_0_1 - 0.651851851851859*G0_0_0_5_1_1_1_0_0 - 0.651851851851859*G0_0_0_5_1_1_2_0_1 + 0.651851851851859*G0_0_0_5_1_1_3_1_0 + 0.651851851851859*G0_0_0_5_1_1_3_1_1 - 0.651851851851859*G0_0_0_5_1_1_4_1_0 - 0.651851851851859*G0_0_0_5_1_1_5_1_1 - 0.778835978835987*G0_1_0_0_0_0_0_0_0 - 0.778835978835987*G0_1_0_0_0_0_0_0_1 + 0.778835978835987*G0_1_0_0_0_0_1_0_0 + 0.778835978835987*G0_1_0_0_0_0_2_0_1 - 0.778835978835987*G0_1_0_0_0_0_3_1_0 - 0.778835978835987*G0_1_0_0_0_0_3_1_1 + 0.778835978835987*G0_1_0_0_0_0_4_1_0 + 0.778835978835987*G0_1_0_0_0_0_5_1_1 - 0.778835978835987*G0_1_0_0_0_1_0_0_0 - 0.778835978835987*G0_1_0_0_0_1_0_0_1 + 0.778835978835987*G0_1_0_0_0_1_1_0_0 + 0.778835978835987*G0_1_0_0_0_1_2_0_1 - 0.778835978835987*G0_1_0_0_0_1_3_1_0 - 0.778835978835987*G0_1_0_0_0_1_3_1_1 + 0.778835978835987*G0_1_0_0_0_1_4_1_0 + 0.778835978835987*G0_1_0_0_0_1_5_1_1 + 0.778835978835987*G0_1_0_1_0_0_0_0_0 + 0.778835978835987*G0_1_0_1_0_0_0_0_1 - 0.778835978835987*G0_1_0_1_0_0_1_0_0 - 0.778835978835987*G0_1_0_1_0_0_2_0_1 + 0.778835978835987*G0_1_0_1_0_0_3_1_0 + 0.778835978835987*G0_1_0_1_0_0_3_1_1 - 0.778835978835987*G0_1_0_1_0_0_4_1_0 - 0.778835978835987*G0_1_0_1_0_0_5_1_1 + 0.778835978835987*G0_1_0_2_0_1_0_0_0 + 0.778835978835987*G0_1_0_2_0_1_0_0_1 - 0.778835978835987*G0_1_0_2_0_1_1_0_0 - 0.778835978835987*G0_1_0_2_0_1_2_0_1 + 0.778835978835987*G0_1_0_2_0_1_3_1_0 + 0.778835978835987*G0_1_0_2_0_1_3_1_1 - 0.778835978835987*G0_1_0_2_0_1_4_1_0 - 0.778835978835987*G0_1_0_2_0_1_5_1_1 - 0.778835978835987*G0_1_0_3_1_0_0_0_0 - 0.778835978835987*G0_1_0_3_1_0_0_0_1 + 0.778835978835987*G0_1_0_3_1_0_1_0_0 + 0.778835978835987*G0_1_0_3_1_0_2_0_1 - 0.778835978835987*G0_1_0_3_1_0_3_1_0 - 0.778835978835987*G0_1_0_3_1_0_3_1_1 + 0.778835978835987*G0_1_0_3_1_0_4_1_0 + 0.778835978835987*G0_1_0_3_1_0_5_1_1 - 0.778835978835987*G0_1_0_3_1_1_0_0_0 - 0.778835978835987*G0_1_0_3_1_1_0_0_1 + 0.778835978835987*G0_1_0_3_1_1_1_0_0 + 0.778835978835987*G0_1_0_3_1_1_2_0_1 - 0.778835978835987*G0_1_0_3_1_1_3_1_0 - 0.778835978835987*G0_1_0_3_1_1_3_1_1 + 0.778835978835987*G0_1_0_3_1_1_4_1_0 + 0.778835978835987*G0_1_0_3_1_1_5_1_1 + 0.778835978835987*G0_1_0_4_1_0_0_0_0 + 0.778835978835987*G0_1_0_4_1_0_0_0_1 - 0.778835978835987*G0_1_0_4_1_0_1_0_0 - 0.778835978835987*G0_1_0_4_1_0_2_0_1 + 0.778835978835987*G0_1_0_4_1_0_3_1_0 + 0.778835978835987*G0_1_0_4_1_0_3_1_1 - 0.778835978835987*G0_1_0_4_1_0_4_1_0 - 0.778835978835987*G0_1_0_4_1_0_5_1_1 + 0.778835978835987*G0_1_0_5_1_1_0_0_0 + 0.778835978835987*G0_1_0_5_1_1_0_0_1 - 0.778835978835987*G0_1_0_5_1_1_1_0_0 - 0.778835978835987*G0_1_0_5_1_1_2_0_1 + 0.778835978835987*G0_1_0_5_1_1_3_1_0 + 0.778835978835987*G0_1_0_5_1_1_3_1_1 - 0.778835978835987*G0_1_0_5_1_1_4_1_0 - 0.778835978835987*G0_1_0_5_1_1_5_1_1;
    A[287] = 0.0;
    A[743] = A[716] - 0.135449735449742*G0_1_1_0_0_0_0_0_0 - 0.135449735449742*G0_1_1_0_0_0_0_0_1 + 0.135449735449742*G0_1_1_0_0_0_1_0_0 + 0.135449735449742*G0_1_1_0_0_0_2_0_1 - 0.135449735449742*G0_1_1_0_0_0_3_1_0 - 0.135449735449742*G0_1_1_0_0_0_3_1_1 + 0.135449735449742*G0_1_1_0_0_0_4_1_0 + 0.135449735449742*G0_1_1_0_0_0_5_1_1 - 0.135449735449742*G0_1_1_0_0_1_0_0_0 - 0.135449735449742*G0_1_1_0_0_1_0_0_1 + 0.135449735449742*G0_1_1_0_0_1_1_0_0 + 0.135449735449742*G0_1_1_0_0_1_2_0_1 - 0.135449735449742*G0_1_1_0_0_1_3_1_0 - 0.135449735449742*G0_1_1_0_0_1_3_1_1 + 0.135449735449742*G0_1_1_0_0_1_4_1_0 + 0.135449735449742*G0_1_1_0_0_1_5_1_1 + 0.135449735449742*G0_1_1_1_0_0_0_0_0 + 0.135449735449742*G0_1_1_1_0_0_0_0_1 - 0.135449735449742*G0_1_1_1_0_0_1_0_0 - 0.135449735449742*G0_1_1_1_0_0_2_0_1 + 0.135449735449742*G0_1_1_1_0_0_3_1_0 + 0.135449735449742*G0_1_1_1_0_0_3_1_1 - 0.135449735449742*G0_1_1_1_0_0_4_1_0 - 0.135449735449742*G0_1_1_1_0_0_5_1_1 + 0.135449735449742*G0_1_1_2_0_1_0_0_0 + 0.135449735449742*G0_1_1_2_0_1_0_0_1 - 0.135449735449742*G0_1_1_2_0_1_1_0_0 - 0.135449735449742*G0_1_1_2_0_1_2_0_1 + 0.135449735449742*G0_1_1_2_0_1_3_1_0 + 0.135449735449742*G0_1_1_2_0_1_3_1_1 - 0.135449735449742*G0_1_1_2_0_1_4_1_0 - 0.135449735449742*G0_1_1_2_0_1_5_1_1 - 0.135449735449742*G0_1_1_3_1_0_0_0_0 - 0.135449735449742*G0_1_1_3_1_0_0_0_1 + 0.135449735449742*G0_1_1_3_1_0_1_0_0 + 0.135449735449742*G0_1_1_3_1_0_2_0_1 - 0.135449735449742*G0_1_1_3_1_0_3_1_0 - 0.135449735449742*G0_1_1_3_1_0_3_1_1 + 0.135449735449742*G0_1_1_3_1_0_4_1_0 + 0.135449735449742*G0_1_1_3_1_0_5_1_1 - 0.135449735449742*G0_1_1_3_1_1_0_0_0 - 0.135449735449742*G0_1_1_3_1_1_0_0_1 + 0.135449735449742*G0_1_1_3_1_1_1_0_0 + 0.135449735449742*G0_1_1_3_1_1_2_0_1 - 0.135449735449742*G0_1_1_3_1_1_3_1_0 - 0.135449735449742*G0_1_1_3_1_1_3_1_1 + 0.135449735449742*G0_1_1_3_1_1_4_1_0 + 0.135449735449742*G0_1_1_3_1_1_5_1_1 + 0.135449735449742*G0_1_1_4_1_0_0_0_0 + 0.135449735449742*G0_1_1_4_1_0_0_0_1 - 0.135449735449742*G0_1_1_4_1_0_1_0_0 - 0.135449735449742*G0_1_1_4_1_0_2_0_1 + 0.135449735449742*G0_1_1_4_1_0_3_1_0 + 0.135449735449742*G0_1_1_4_1_0_3_1_1 - 0.135449735449742*G0_1_1_4_1_0_4_1_0 - 0.135449735449742*G0_1_1_4_1_0_5_1_1 + 0.135449735449742*G0_1_1_5_1_1_0_0_0 + 0.135449735449742*G0_1_1_5_1_1_0_0_1 - 0.135449735449742*G0_1_1_5_1_1_1_0_0 - 0.135449735449742*G0_1_1_5_1_1_2_0_1 + 0.135449735449742*G0_1_1_5_1_1_3_1_0 + 0.135449735449742*G0_1_1_5_1_1_3_1_1 - 0.135449735449742*G0_1_1_5_1_1_4_1_0 - 0.135449735449742*G0_1_1_5_1_1_5_1_1;
    A[658] = -A[743] + 0.812698412698439*G0_0_0_0_0_0_0_0_0 + 0.812698412698439*G0_0_0_0_0_0_0_0_1 - 0.812698412698439*G0_0_0_0_0_0_1_0_0 - 0.812698412698439*G0_0_0_0_0_0_2_0_1 + 0.812698412698439*G0_0_0_0_0_0_3_1_0 + 0.812698412698439*G0_0_0_0_0_0_3_1_1 - 0.812698412698439*G0_0_0_0_0_0_4_1_0 - 0.812698412698439*G0_0_0_0_0_0_5_1_1 + 0.812698412698439*G0_0_0_0_0_1_0_0_0 + 0.812698412698439*G0_0_0_0_0_1_0_0_1 - 0.812698412698439*G0_0_0_0_0_1_1_0_0 - 0.812698412698439*G0_0_0_0_0_1_2_0_1 + 0.812698412698439*G0_0_0_0_0_1_3_1_0 + 0.812698412698439*G0_0_0_0_0_1_3_1_1 - 0.812698412698439*G0_0_0_0_0_1_4_1_0 - 0.812698412698439*G0_0_0_0_0_1_5_1_1 - 0.812698412698439*G0_0_0_1_0_0_0_0_0 - 0.812698412698439*G0_0_0_1_0_0_0_0_1 + 0.812698412698439*G0_0_0_1_0_0_1_0_0 + 0.812698412698439*G0_0_0_1_0_0_2_0_1 - 0.812698412698439*G0_0_0_1_0_0_3_1_0 - 0.812698412698439*G0_0_0_1_0_0_3_1_1 + 0.812698412698439*G0_0_0_1_0_0_4_1_0 + 0.812698412698439*G0_0_0_1_0_0_5_1_1 - 0.812698412698439*G0_0_0_2_0_1_0_0_0 - 0.812698412698439*G0_0_0_2_0_1_0_0_1 + 0.812698412698439*G0_0_0_2_0_1_1_0_0 + 0.812698412698439*G0_0_0_2_0_1_2_0_1 - 0.812698412698439*G0_0_0_2_0_1_3_1_0 - 0.812698412698439*G0_0_0_2_0_1_3_1_1 + 0.812698412698439*G0_0_0_2_0_1_4_1_0 + 0.812698412698439*G0_0_0_2_0_1_5_1_1 + 0.812698412698439*G0_0_0_3_1_0_0_0_0 + 0.812698412698439*G0_0_0_3_1_0_0_0_1 - 0.812698412698439*G0_0_0_3_1_0_1_0_0 - 0.812698412698439*G0_0_0_3_1_0_2_0_1 + 0.812698412698439*G0_0_0_3_1_0_3_1_0 + 0.812698412698439*G0_0_0_3_1_0_3_1_1 - 0.812698412698439*G0_0_0_3_1_0_4_1_0 - 0.812698412698439*G0_0_0_3_1_0_5_1_1 + 0.812698412698439*G0_0_0_3_1_1_0_0_0 + 0.812698412698439*G0_0_0_3_1_1_0_0_1 - 0.812698412698439*G0_0_0_3_1_1_1_0_0 - 0.812698412698439*G0_0_0_3_1_1_2_0_1 + 0.812698412698439*G0_0_0_3_1_1_3_1_0 + 0.812698412698439*G0_0_0_3_1_1_3_1_1 - 0.812698412698439*G0_0_0_3_1_1_4_1_0 - 0.812698412698439*G0_0_0_3_1_1_5_1_1 - 0.812698412698439*G0_0_0_4_1_0_0_0_0 - 0.812698412698439*G0_0_0_4_1_0_0_0_1 + 0.812698412698439*G0_0_0_4_1_0_1_0_0 + 0.812698412698439*G0_0_0_4_1_0_2_0_1 - 0.812698412698439*G0_0_0_4_1_0_3_1_0 - 0.812698412698439*G0_0_0_4_1_0_3_1_1 + 0.812698412698439*G0_0_0_4_1_0_4_1_0 + 0.812698412698439*G0_0_0_4_1_0_5_1_1 - 0.812698412698439*G0_0_0_5_1_1_0_0_0 - 0.812698412698439*G0_0_0_5_1_1_0_0_1 + 0.812698412698439*G0_0_0_5_1_1_1_0_0 + 0.812698412698439*G0_0_0_5_1_1_2_0_1 - 0.812698412698439*G0_0_0_5_1_1_3_1_0 - 0.812698412698439*G0_0_0_5_1_1_3_1_1 + 0.812698412698439*G0_0_0_5_1_1_4_1_0 + 0.812698412698439*G0_0_0_5_1_1_5_1_1 + 0.575661375661385*G0_0_1_0_0_0_0_0_0 + 0.575661375661385*G0_0_1_0_0_0_0_0_1 - 0.575661375661385*G0_0_1_0_0_0_1_0_0 - 0.575661375661385*G0_0_1_0_0_0_2_0_1 + 0.575661375661385*G0_0_1_0_0_0_3_1_0 + 0.575661375661385*G0_0_1_0_0_0_3_1_1 - 0.575661375661385*G0_0_1_0_0_0_4_1_0 - 0.575661375661385*G0_0_1_0_0_0_5_1_1 + 0.575661375661385*G0_0_1_0_0_1_0_0_0 + 0.575661375661385*G0_0_1_0_0_1_0_0_1 - 0.575661375661385*G0_0_1_0_0_1_1_0_0 - 0.575661375661385*G0_0_1_0_0_1_2_0_1 + 0.575661375661385*G0_0_1_0_0_1_3_1_0 + 0.575661375661385*G0_0_1_0_0_1_3_1_1 - 0.575661375661385*G0_0_1_0_0_1_4_1_0 - 0.575661375661385*G0_0_1_0_0_1_5_1_1 - 0.575661375661385*G0_0_1_1_0_0_0_0_0 - 0.575661375661385*G0_0_1_1_0_0_0_0_1 + 0.575661375661385*G0_0_1_1_0_0_1_0_0 + 0.575661375661385*G0_0_1_1_0_0_2_0_1 - 0.575661375661385*G0_0_1_1_0_0_3_1_0 - 0.575661375661385*G0_0_1_1_0_0_3_1_1 + 0.575661375661385*G0_0_1_1_0_0_4_1_0 + 0.575661375661385*G0_0_1_1_0_0_5_1_1 - 0.575661375661385*G0_0_1_2_0_1_0_0_0 - 0.575661375661385*G0_0_1_2_0_1_0_0_1 + 0.575661375661385*G0_0_1_2_0_1_1_0_0 + 0.575661375661385*G0_0_1_2_0_1_2_0_1 - 0.575661375661385*G0_0_1_2_0_1_3_1_0 - 0.575661375661385*G0_0_1_2_0_1_3_1_1 + 0.575661375661385*G0_0_1_2_0_1_4_1_0 + 0.575661375661385*G0_0_1_2_0_1_5_1_1 + 0.575661375661385*G0_0_1_3_1_0_0_0_0 + 0.575661375661385*G0_0_1_3_1_0_0_0_1 - 0.575661375661385*G0_0_1_3_1_0_1_0_0 - 0.575661375661385*G0_0_1_3_1_0_2_0_1 + 0.575661375661385*G0_0_1_3_1_0_3_1_0 + 0.575661375661385*G0_0_1_3_1_0_3_1_1 - 0.575661375661385*G0_0_1_3_1_0_4_1_0 - 0.575661375661385*G0_0_1_3_1_0_5_1_1 + 0.575661375661385*G0_0_1_3_1_1_0_0_0 + 0.575661375661385*G0_0_1_3_1_1_0_0_1 - 0.575661375661385*G0_0_1_3_1_1_1_0_0 - 0.575661375661385*G0_0_1_3_1_1_2_0_1 + 0.575661375661385*G0_0_1_3_1_1_3_1_0 + 0.575661375661385*G0_0_1_3_1_1_3_1_1 - 0.575661375661385*G0_0_1_3_1_1_4_1_0 - 0.575661375661385*G0_0_1_3_1_1_5_1_1 - 0.575661375661385*G0_0_1_4_1_0_0_0_0 - 0.575661375661385*G0_0_1_4_1_0_0_0_1 + 0.575661375661385*G0_0_1_4_1_0_1_0_0 + 0.575661375661385*G0_0_1_4_1_0_2_0_1 - 0.575661375661385*G0_0_1_4_1_0_3_1_0 - 0.575661375661385*G0_0_1_4_1_0_3_1_1 + 0.575661375661385*G0_0_1_4_1_0_4_1_0 + 0.575661375661385*G0_0_1_4_1_0_5_1_1 - 0.575661375661385*G0_0_1_5_1_1_0_0_0 - 0.575661375661385*G0_0_1_5_1_1_0_0_1 + 0.575661375661385*G0_0_1_5_1_1_1_0_0 + 0.575661375661385*G0_0_1_5_1_1_2_0_1 - 0.575661375661385*G0_0_1_5_1_1_3_1_0 - 0.575661375661385*G0_0_1_5_1_1_3_1_1 + 0.575661375661385*G0_0_1_5_1_1_4_1_0 + 0.575661375661385*G0_0_1_5_1_1_5_1_1 + 0.575661375661395*G0_1_0_0_0_0_0_0_0 + 0.575661375661395*G0_1_0_0_0_0_0_0_1 - 0.575661375661395*G0_1_0_0_0_0_1_0_0 - 0.575661375661395*G0_1_0_0_0_0_2_0_1 + 0.575661375661395*G0_1_0_0_0_0_3_1_0 + 0.575661375661395*G0_1_0_0_0_0_3_1_1 - 0.575661375661395*G0_1_0_0_0_0_4_1_0 - 0.575661375661395*G0_1_0_0_0_0_5_1_1 + 0.575661375661395*G0_1_0_0_0_1_0_0_0 + 0.575661375661395*G0_1_0_0_0_1_0_0_1 - 0.575661375661395*G0_1_0_0_0_1_1_0_0 - 0.575661375661395*G0_1_0_0_0_1_2_0_1 + 0.575661375661395*G0_1_0_0_0_1_3_1_0 + 0.575661375661395*G0_1_0_0_0_1_3_1_1 - 0.575661375661395*G0_1_0_0_0_1_4_1_0 - 0.575661375661395*G0_1_0_0_0_1_5_1_1 - 0.575661375661395*G0_1_0_1_0_0_0_0_0 - 0.575661375661395*G0_1_0_1_0_0_0_0_1 + 0.575661375661395*G0_1_0_1_0_0_1_0_0 + 0.575661375661395*G0_1_0_1_0_0_2_0_1 - 0.575661375661395*G0_1_0_1_0_0_3_1_0 - 0.575661375661395*G0_1_0_1_0_0_3_1_1 + 0.575661375661395*G0_1_0_1_0_0_4_1_0 + 0.575661375661395*G0_1_0_1_0_0_5_1_1 - 0.575661375661395*G0_1_0_2_0_1_0_0_0 - 0.575661375661395*G0_1_0_2_0_1_0_0_1 + 0.575661375661395*G0_1_0_2_0_1_1_0_0 + 0.575661375661395*G0_1_0_2_0_1_2_0_1 - 0.575661375661395*G0_1_0_2_0_1_3_1_0 - 0.575661375661395*G0_1_0_2_0_1_3_1_1 + 0.575661375661395*G0_1_0_2_0_1_4_1_0 + 0.575661375661395*G0_1_0_2_0_1_5_1_1 + 0.575661375661395*G0_1_0_3_1_0_0_0_0 + 0.575661375661395*G0_1_0_3_1_0_0_0_1 - 0.575661375661395*G0_1_0_3_1_0_1_0_0 - 0.575661375661395*G0_1_0_3_1_0_2_0_1 + 0.575661375661395*G0_1_0_3_1_0_3_1_0 + 0.575661375661395*G0_1_0_3_1_0_3_1_1 - 0.575661375661395*G0_1_0_3_1_0_4_1_0 - 0.575661375661395*G0_1_0_3_1_0_5_1_1 + 0.575661375661395*G0_1_0_3_1_1_0_0_0 + 0.575661375661395*G0_1_0_3_1_1_0_0_1 - 0.575661375661395*G0_1_0_3_1_1_1_0_0 - 0.575661375661395*G0_1_0_3_1_1_2_0_1 + 0.575661375661395*G0_1_0_3_1_1_3_1_0 + 0.575661375661395*G0_1_0_3_1_1_3_1_1 - 0.575661375661395*G0_1_0_3_1_1_4_1_0 - 0.575661375661395*G0_1_0_3_1_1_5_1_1 - 0.575661375661395*G0_1_0_4_1_0_0_0_0 - 0.575661375661395*G0_1_0_4_1_0_0_0_1 + 0.575661375661395*G0_1_0_4_1_0_1_0_0 + 0.575661375661395*G0_1_0_4_1_0_2_0_1 - 0.575661375661395*G0_1_0_4_1_0_3_1_0 - 0.575661375661395*G0_1_0_4_1_0_3_1_1 + 0.575661375661395*G0_1_0_4_1_0_4_1_0 + 0.575661375661395*G0_1_0_4_1_0_5_1_1 - 0.575661375661395*G0_1_0_5_1_1_0_0_0 - 0.575661375661395*G0_1_0_5_1_1_0_0_1 + 0.575661375661395*G0_1_0_5_1_1_1_0_0 + 0.575661375661395*G0_1_0_5_1_1_2_0_1 - 0.575661375661395*G0_1_0_5_1_1_3_1_0 - 0.575661375661395*G0_1_0_5_1_1_3_1_1 + 0.575661375661395*G0_1_0_5_1_1_4_1_0 + 0.575661375661395*G0_1_0_5_1_1_5_1_1;
    A[245] = A[743] - 2.09947089947092*G0_0_0_0_0_0_0_0_0 - 2.09947089947092*G0_0_0_0_0_0_0_0_1 + 2.09947089947092*G0_0_0_0_0_0_1_0_0 + 2.09947089947092*G0_0_0_0_0_0_2_0_1 - 2.09947089947092*G0_0_0_0_0_0_3_1_0 - 2.09947089947092*G0_0_0_0_0_0_3_1_1 + 2.09947089947092*G0_0_0_0_0_0_4_1_0 + 2.09947089947092*G0_0_0_0_0_0_5_1_1 - 2.09947089947092*G0_0_0_0_0_1_0_0_0 - 2.09947089947092*G0_0_0_0_0_1_0_0_1 + 2.09947089947092*G0_0_0_0_0_1_1_0_0 + 2.09947089947092*G0_0_0_0_0_1_2_0_1 - 2.09947089947092*G0_0_0_0_0_1_3_1_0 - 2.09947089947092*G0_0_0_0_0_1_3_1_1 + 2.09947089947092*G0_0_0_0_0_1_4_1_0 + 2.09947089947092*G0_0_0_0_0_1_5_1_1 + 2.09947089947092*G0_0_0_1_0_0_0_0_0 + 2.09947089947092*G0_0_0_1_0_0_0_0_1 - 2.09947089947092*G0_0_0_1_0_0_1_0_0 - 2.09947089947092*G0_0_0_1_0_0_2_0_1 + 2.09947089947092*G0_0_0_1_0_0_3_1_0 + 2.09947089947092*G0_0_0_1_0_0_3_1_1 - 2.09947089947092*G0_0_0_1_0_0_4_1_0 - 2.09947089947092*G0_0_0_1_0_0_5_1_1 + 2.09947089947092*G0_0_0_2_0_1_0_0_0 + 2.09947089947092*G0_0_0_2_0_1_0_0_1 - 2.09947089947092*G0_0_0_2_0_1_1_0_0 - 2.09947089947092*G0_0_0_2_0_1_2_0_1 + 2.09947089947092*G0_0_0_2_0_1_3_1_0 + 2.09947089947092*G0_0_0_2_0_1_3_1_1 - 2.09947089947092*G0_0_0_2_0_1_4_1_0 - 2.09947089947092*G0_0_0_2_0_1_5_1_1 - 2.09947089947092*G0_0_0_3_1_0_0_0_0 - 2.09947089947092*G0_0_0_3_1_0_0_0_1 + 2.09947089947092*G0_0_0_3_1_0_1_0_0 + 2.09947089947092*G0_0_0_3_1_0_2_0_1 - 2.09947089947092*G0_0_0_3_1_0_3_1_0 - 2.09947089947092*G0_0_0_3_1_0_3_1_1 + 2.09947089947092*G0_0_0_3_1_0_4_1_0 + 2.09947089947092*G0_0_0_3_1_0_5_1_1 - 2.09947089947092*G0_0_0_3_1_1_0_0_0 - 2.09947089947092*G0_0_0_3_1_1_0_0_1 + 2.09947089947092*G0_0_0_3_1_1_1_0_0 + 2.09947089947092*G0_0_0_3_1_1_2_0_1 - 2.09947089947092*G0_0_0_3_1_1_3_1_0 - 2.09947089947092*G0_0_0_3_1_1_3_1_1 + 2.09947089947092*G0_0_0_3_1_1_4_1_0 + 2.09947089947092*G0_0_0_3_1_1_5_1_1 + 2.09947089947092*G0_0_0_4_1_0_0_0_0 + 2.09947089947092*G0_0_0_4_1_0_0_0_1 - 2.09947089947092*G0_0_0_4_1_0_1_0_0 - 2.09947089947092*G0_0_0_4_1_0_2_0_1 + 2.09947089947092*G0_0_0_4_1_0_3_1_0 + 2.09947089947092*G0_0_0_4_1_0_3_1_1 - 2.09947089947092*G0_0_0_4_1_0_4_1_0 - 2.09947089947092*G0_0_0_4_1_0_5_1_1 + 2.09947089947092*G0_0_0_5_1_1_0_0_0 + 2.09947089947092*G0_0_0_5_1_1_0_0_1 - 2.09947089947092*G0_0_0_5_1_1_1_0_0 - 2.09947089947092*G0_0_0_5_1_1_2_0_1 + 2.09947089947092*G0_0_0_5_1_1_3_1_0 + 2.09947089947092*G0_0_0_5_1_1_3_1_1 - 2.09947089947092*G0_0_0_5_1_1_4_1_0 - 2.09947089947092*G0_0_0_5_1_1_5_1_1 - 1.15132275132275*G0_0_1_0_0_0_0_0_0 - 1.15132275132275*G0_0_1_0_0_0_0_0_1 + 1.15132275132275*G0_0_1_0_0_0_1_0_0 + 1.15132275132275*G0_0_1_0_0_0_2_0_1 - 1.15132275132275*G0_0_1_0_0_0_3_1_0 - 1.15132275132275*G0_0_1_0_0_0_3_1_1 + 1.15132275132275*G0_0_1_0_0_0_4_1_0 + 1.15132275132275*G0_0_1_0_0_0_5_1_1 - 1.15132275132275*G0_0_1_0_0_1_0_0_0 - 1.15132275132275*G0_0_1_0_0_1_0_0_1 + 1.15132275132275*G0_0_1_0_0_1_1_0_0 + 1.15132275132275*G0_0_1_0_0_1_2_0_1 - 1.15132275132275*G0_0_1_0_0_1_3_1_0 - 1.15132275132275*G0_0_1_0_0_1_3_1_1 + 1.15132275132275*G0_0_1_0_0_1_4_1_0 + 1.15132275132275*G0_0_1_0_0_1_5_1_1 + 1.15132275132275*G0_0_1_1_0_0_0_0_0 + 1.15132275132275*G0_0_1_1_0_0_0_0_1 - 1.15132275132275*G0_0_1_1_0_0_1_0_0 - 1.15132275132275*G0_0_1_1_0_0_2_0_1 + 1.15132275132275*G0_0_1_1_0_0_3_1_0 + 1.15132275132275*G0_0_1_1_0_0_3_1_1 - 1.15132275132275*G0_0_1_1_0_0_4_1_0 - 1.15132275132275*G0_0_1_1_0_0_5_1_1 + 1.15132275132275*G0_0_1_2_0_1_0_0_0 + 1.15132275132275*G0_0_1_2_0_1_0_0_1 - 1.15132275132275*G0_0_1_2_0_1_1_0_0 - 1.15132275132275*G0_0_1_2_0_1_2_0_1 + 1.15132275132275*G0_0_1_2_0_1_3_1_0 + 1.15132275132275*G0_0_1_2_0_1_3_1_1 - 1.15132275132275*G0_0_1_2_0_1_4_1_0 - 1.15132275132275*G0_0_1_2_0_1_5_1_1 - 1.15132275132275*G0_0_1_3_1_0_0_0_0 - 1.15132275132275*G0_0_1_3_1_0_0_0_1 + 1.15132275132275*G0_0_1_3_1_0_1_0_0 + 1.15132275132275*G0_0_1_3_1_0_2_0_1 - 1.15132275132275*G0_0_1_3_1_0_3_1_0 - 1.15132275132275*G0_0_1_3_1_0_3_1_1 + 1.15132275132275*G0_0_1_3_1_0_4_1_0 + 1.15132275132275*G0_0_1_3_1_0_5_1_1 - 1.15132275132275*G0_0_1_3_1_1_0_0_0 - 1.15132275132275*G0_0_1_3_1_1_0_0_1 + 1.15132275132275*G0_0_1_3_1_1_1_0_0 + 1.15132275132275*G0_0_1_3_1_1_2_0_1 - 1.15132275132275*G0_0_1_3_1_1_3_1_0 - 1.15132275132275*G0_0_1_3_1_1_3_1_1 + 1.15132275132275*G0_0_1_3_1_1_4_1_0 + 1.15132275132275*G0_0_1_3_1_1_5_1_1 + 1.15132275132275*G0_0_1_4_1_0_0_0_0 + 1.15132275132275*G0_0_1_4_1_0_0_0_1 - 1.15132275132275*G0_0_1_4_1_0_1_0_0 - 1.15132275132275*G0_0_1_4_1_0_2_0_1 + 1.15132275132275*G0_0_1_4_1_0_3_1_0 + 1.15132275132275*G0_0_1_4_1_0_3_1_1 - 1.15132275132275*G0_0_1_4_1_0_4_1_0 - 1.15132275132275*G0_0_1_4_1_0_5_1_1 + 1.15132275132275*G0_0_1_5_1_1_0_0_0 + 1.15132275132275*G0_0_1_5_1_1_0_0_1 - 1.15132275132275*G0_0_1_5_1_1_1_0_0 - 1.15132275132275*G0_0_1_5_1_1_2_0_1 + 1.15132275132275*G0_0_1_5_1_1_3_1_0 + 1.15132275132275*G0_0_1_5_1_1_3_1_1 - 1.15132275132275*G0_0_1_5_1_1_4_1_0 - 1.15132275132275*G0_0_1_5_1_1_5_1_1 - 1.15132275132276*G0_1_0_0_0_0_0_0_0 - 1.15132275132276*G0_1_0_0_0_0_0_0_1 + 1.15132275132276*G0_1_0_0_0_0_1_0_0 + 1.15132275132276*G0_1_0_0_0_0_2_0_1 - 1.15132275132276*G0_1_0_0_0_0_3_1_0 - 1.15132275132276*G0_1_0_0_0_0_3_1_1 + 1.15132275132276*G0_1_0_0_0_0_4_1_0 + 1.15132275132276*G0_1_0_0_0_0_5_1_1 - 1.15132275132276*G0_1_0_0_0_1_0_0_0 - 1.15132275132276*G0_1_0_0_0_1_0_0_1 + 1.15132275132276*G0_1_0_0_0_1_1_0_0 + 1.15132275132276*G0_1_0_0_0_1_2_0_1 - 1.15132275132276*G0_1_0_0_0_1_3_1_0 - 1.15132275132276*G0_1_0_0_0_1_3_1_1 + 1.15132275132276*G0_1_0_0_0_1_4_1_0 + 1.15132275132276*G0_1_0_0_0_1_5_1_1 + 1.15132275132276*G0_1_0_1_0_0_0_0_0 + 1.15132275132276*G0_1_0_1_0_0_0_0_1 - 1.15132275132276*G0_1_0_1_0_0_1_0_0 - 1.15132275132276*G0_1_0_1_0_0_2_0_1 + 1.15132275132276*G0_1_0_1_0_0_3_1_0 + 1.15132275132276*G0_1_0_1_0_0_3_1_1 - 1.15132275132276*G0_1_0_1_0_0_4_1_0 - 1.15132275132276*G0_1_0_1_0_0_5_1_1 + 1.15132275132276*G0_1_0_2_0_1_0_0_0 + 1.15132275132276*G0_1_0_2_0_1_0_0_1 - 1.15132275132276*G0_1_0_2_0_1_1_0_0 - 1.15132275132276*G0_1_0_2_0_1_2_0_1 + 1.15132275132276*G0_1_0_2_0_1_3_1_0 + 1.15132275132276*G0_1_0_2_0_1_3_1_1 - 1.15132275132276*G0_1_0_2_0_1_4_1_0 - 1.15132275132276*G0_1_0_2_0_1_5_1_1 - 1.15132275132276*G0_1_0_3_1_0_0_0_0 - 1.15132275132276*G0_1_0_3_1_0_0_0_1 + 1.15132275132276*G0_1_0_3_1_0_1_0_0 + 1.15132275132276*G0_1_0_3_1_0_2_0_1 - 1.15132275132276*G0_1_0_3_1_0_3_1_0 - 1.15132275132276*G0_1_0_3_1_0_3_1_1 + 1.15132275132276*G0_1_0_3_1_0_4_1_0 + 1.15132275132276*G0_1_0_3_1_0_5_1_1 - 1.15132275132276*G0_1_0_3_1_1_0_0_0 - 1.15132275132276*G0_1_0_3_1_1_0_0_1 + 1.15132275132276*G0_1_0_3_1_1_1_0_0 + 1.15132275132276*G0_1_0_3_1_1_2_0_1 - 1.15132275132276*G0_1_0_3_1_1_3_1_0 - 1.15132275132276*G0_1_0_3_1_1_3_1_1 + 1.15132275132276*G0_1_0_3_1_1_4_1_0 + 1.15132275132276*G0_1_0_3_1_1_5_1_1 + 1.15132275132276*G0_1_0_4_1_0_0_0_0 + 1.15132275132276*G0_1_0_4_1_0_0_0_1 - 1.15132275132276*G0_1_0_4_1_0_1_0_0 - 1.15132275132276*G0_1_0_4_1_0_2_0_1 + 1.15132275132276*G0_1_0_4_1_0_3_1_0 + 1.15132275132276*G0_1_0_4_1_0_3_1_1 - 1.15132275132276*G0_1_0_4_1_0_4_1_0 - 1.15132275132276*G0_1_0_4_1_0_5_1_1 + 1.15132275132276*G0_1_0_5_1_1_0_0_0 + 1.15132275132276*G0_1_0_5_1_1_0_0_1 - 1.15132275132276*G0_1_0_5_1_1_1_0_0 - 1.15132275132276*G0_1_0_5_1_1_2_0_1 + 1.15132275132276*G0_1_0_5_1_1_3_1_0 + 1.15132275132276*G0_1_0_5_1_1_3_1_1 - 1.15132275132276*G0_1_0_5_1_1_4_1_0 - 1.15132275132276*G0_1_0_5_1_1_5_1_1;
    A[252] = -A[743] - 0.23703703703705*G0_0_1_0_0_0_0_0_0 - 0.23703703703705*G0_0_1_0_0_0_0_0_1 + 0.23703703703705*G0_0_1_0_0_0_1_0_0 + 0.23703703703705*G0_0_1_0_0_0_2_0_1 - 0.23703703703705*G0_0_1_0_0_0_3_1_0 - 0.23703703703705*G0_0_1_0_0_0_3_1_1 + 0.23703703703705*G0_0_1_0_0_0_4_1_0 + 0.23703703703705*G0_0_1_0_0_0_5_1_1 - 0.23703703703705*G0_0_1_0_0_1_0_0_0 - 0.23703703703705*G0_0_1_0_0_1_0_0_1 + 0.23703703703705*G0_0_1_0_0_1_1_0_0 + 0.23703703703705*G0_0_1_0_0_1_2_0_1 - 0.23703703703705*G0_0_1_0_0_1_3_1_0 - 0.23703703703705*G0_0_1_0_0_1_3_1_1 + 0.23703703703705*G0_0_1_0_0_1_4_1_0 + 0.23703703703705*G0_0_1_0_0_1_5_1_1 + 0.23703703703705*G0_0_1_1_0_0_0_0_0 + 0.23703703703705*G0_0_1_1_0_0_0_0_1 - 0.23703703703705*G0_0_1_1_0_0_1_0_0 - 0.23703703703705*G0_0_1_1_0_0_2_0_1 + 0.23703703703705*G0_0_1_1_0_0_3_1_0 + 0.23703703703705*G0_0_1_1_0_0_3_1_1 - 0.23703703703705*G0_0_1_1_0_0_4_1_0 - 0.23703703703705*G0_0_1_1_0_0_5_1_1 + 0.23703703703705*G0_0_1_2_0_1_0_0_0 + 0.23703703703705*G0_0_1_2_0_1_0_0_1 - 0.23703703703705*G0_0_1_2_0_1_1_0_0 - 0.23703703703705*G0_0_1_2_0_1_2_0_1 + 0.23703703703705*G0_0_1_2_0_1_3_1_0 + 0.23703703703705*G0_0_1_2_0_1_3_1_1 - 0.23703703703705*G0_0_1_2_0_1_4_1_0 - 0.23703703703705*G0_0_1_2_0_1_5_1_1 - 0.23703703703705*G0_0_1_3_1_0_0_0_0 - 0.23703703703705*G0_0_1_3_1_0_0_0_1 + 0.23703703703705*G0_0_1_3_1_0_1_0_0 + 0.23703703703705*G0_0_1_3_1_0_2_0_1 - 0.23703703703705*G0_0_1_3_1_0_3_1_0 - 0.23703703703705*G0_0_1_3_1_0_3_1_1 + 0.23703703703705*G0_0_1_3_1_0_4_1_0 + 0.23703703703705*G0_0_1_3_1_0_5_1_1 - 0.23703703703705*G0_0_1_3_1_1_0_0_0 - 0.23703703703705*G0_0_1_3_1_1_0_0_1 + 0.23703703703705*G0_0_1_3_1_1_1_0_0 + 0.23703703703705*G0_0_1_3_1_1_2_0_1 - 0.23703703703705*G0_0_1_3_1_1_3_1_0 - 0.23703703703705*G0_0_1_3_1_1_3_1_1 + 0.23703703703705*G0_0_1_3_1_1_4_1_0 + 0.23703703703705*G0_0_1_3_1_1_5_1_1 + 0.23703703703705*G0_0_1_4_1_0_0_0_0 + 0.23703703703705*G0_0_1_4_1_0_0_0_1 - 0.23703703703705*G0_0_1_4_1_0_1_0_0 - 0.23703703703705*G0_0_1_4_1_0_2_0_1 + 0.23703703703705*G0_0_1_4_1_0_3_1_0 + 0.23703703703705*G0_0_1_4_1_0_3_1_1 - 0.23703703703705*G0_0_1_4_1_0_4_1_0 - 0.23703703703705*G0_0_1_4_1_0_5_1_1 + 0.23703703703705*G0_0_1_5_1_1_0_0_0 + 0.23703703703705*G0_0_1_5_1_1_0_0_1 - 0.23703703703705*G0_0_1_5_1_1_1_0_0 - 0.23703703703705*G0_0_1_5_1_1_2_0_1 + 0.23703703703705*G0_0_1_5_1_1_3_1_0 + 0.23703703703705*G0_0_1_5_1_1_3_1_1 - 0.23703703703705*G0_0_1_5_1_1_4_1_0 - 0.23703703703705*G0_0_1_5_1_1_5_1_1 - 0.237037037037039*G0_1_0_0_0_0_0_0_0 - 0.237037037037039*G0_1_0_0_0_0_0_0_1 + 0.237037037037039*G0_1_0_0_0_0_1_0_0 + 0.237037037037039*G0_1_0_0_0_0_2_0_1 - 0.237037037037039*G0_1_0_0_0_0_3_1_0 - 0.237037037037039*G0_1_0_0_0_0_3_1_1 + 0.237037037037039*G0_1_0_0_0_0_4_1_0 + 0.237037037037039*G0_1_0_0_0_0_5_1_1 - 0.237037037037039*G0_1_0_0_0_1_0_0_0 - 0.237037037037039*G0_1_0_0_0_1_0_0_1 + 0.237037037037039*G0_1_0_0_0_1_1_0_0 + 0.237037037037039*G0_1_0_0_0_1_2_0_1 - 0.237037037037039*G0_1_0_0_0_1_3_1_0 - 0.237037037037039*G0_1_0_0_0_1_3_1_1 + 0.237037037037039*G0_1_0_0_0_1_4_1_0 + 0.237037037037039*G0_1_0_0_0_1_5_1_1 + 0.237037037037039*G0_1_0_1_0_0_0_0_0 + 0.237037037037039*G0_1_0_1_0_0_0_0_1 - 0.237037037037039*G0_1_0_1_0_0_1_0_0 - 0.237037037037039*G0_1_0_1_0_0_2_0_1 + 0.237037037037039*G0_1_0_1_0_0_3_1_0 + 0.237037037037039*G0_1_0_1_0_0_3_1_1 - 0.237037037037039*G0_1_0_1_0_0_4_1_0 - 0.237037037037039*G0_1_0_1_0_0_5_1_1 + 0.237037037037039*G0_1_0_2_0_1_0_0_0 + 0.237037037037039*G0_1_0_2_0_1_0_0_1 - 0.237037037037039*G0_1_0_2_0_1_1_0_0 - 0.237037037037039*G0_1_0_2_0_1_2_0_1 + 0.237037037037039*G0_1_0_2_0_1_3_1_0 + 0.237037037037039*G0_1_0_2_0_1_3_1_1 - 0.237037037037039*G0_1_0_2_0_1_4_1_0 - 0.237037037037039*G0_1_0_2_0_1_5_1_1 - 0.237037037037039*G0_1_0_3_1_0_0_0_0 - 0.237037037037039*G0_1_0_3_1_0_0_0_1 + 0.237037037037039*G0_1_0_3_1_0_1_0_0 + 0.237037037037039*G0_1_0_3_1_0_2_0_1 - 0.237037037037039*G0_1_0_3_1_0_3_1_0 - 0.237037037037039*G0_1_0_3_1_0_3_1_1 + 0.237037037037039*G0_1_0_3_1_0_4_1_0 + 0.237037037037039*G0_1_0_3_1_0_5_1_1 - 0.237037037037039*G0_1_0_3_1_1_0_0_0 - 0.237037037037039*G0_1_0_3_1_1_0_0_1 + 0.237037037037039*G0_1_0_3_1_1_1_0_0 + 0.237037037037039*G0_1_0_3_1_1_2_0_1 - 0.237037037037039*G0_1_0_3_1_1_3_1_0 - 0.237037037037039*G0_1_0_3_1_1_3_1_1 + 0.237037037037039*G0_1_0_3_1_1_4_1_0 + 0.237037037037039*G0_1_0_3_1_1_5_1_1 + 0.237037037037039*G0_1_0_4_1_0_0_0_0 + 0.237037037037039*G0_1_0_4_1_0_0_0_1 - 0.237037037037039*G0_1_0_4_1_0_1_0_0 - 0.237037037037039*G0_1_0_4_1_0_2_0_1 + 0.237037037037039*G0_1_0_4_1_0_3_1_0 + 0.237037037037039*G0_1_0_4_1_0_3_1_1 - 0.237037037037039*G0_1_0_4_1_0_4_1_0 - 0.237037037037039*G0_1_0_4_1_0_5_1_1 + 0.237037037037039*G0_1_0_5_1_1_0_0_0 + 0.237037037037039*G0_1_0_5_1_1_0_0_1 - 0.237037037037039*G0_1_0_5_1_1_1_0_0 - 0.237037037037039*G0_1_0_5_1_1_2_0_1 + 0.237037037037039*G0_1_0_5_1_1_3_1_0 + 0.237037037037039*G0_1_0_5_1_1_3_1_1 - 0.237037037037039*G0_1_0_5_1_1_4_1_0 - 0.237037037037039*G0_1_0_5_1_1_5_1_1;
    A[428] = -A[743] + 1.38835978835982*G0_0_1_0_0_0_0_0_0 + 1.38835978835982*G0_0_1_0_0_0_0_0_1 - 1.38835978835982*G0_0_1_0_0_0_1_0_0 - 1.38835978835982*G0_0_1_0_0_0_2_0_1 + 1.38835978835982*G0_0_1_0_0_0_3_1_0 + 1.38835978835982*G0_0_1_0_0_0_3_1_1 - 1.38835978835982*G0_0_1_0_0_0_4_1_0 - 1.38835978835982*G0_0_1_0_0_0_5_1_1 + 1.38835978835982*G0_0_1_0_0_1_0_0_0 + 1.38835978835982*G0_0_1_0_0_1_0_0_1 - 1.38835978835982*G0_0_1_0_0_1_1_0_0 - 1.38835978835982*G0_0_1_0_0_1_2_0_1 + 1.38835978835982*G0_0_1_0_0_1_3_1_0 + 1.38835978835982*G0_0_1_0_0_1_3_1_1 - 1.38835978835982*G0_0_1_0_0_1_4_1_0 - 1.38835978835982*G0_0_1_0_0_1_5_1_1 - 1.38835978835982*G0_0_1_1_0_0_0_0_0 - 1.38835978835982*G0_0_1_1_0_0_0_0_1 + 1.38835978835982*G0_0_1_1_0_0_1_0_0 + 1.38835978835982*G0_0_1_1_0_0_2_0_1 - 1.38835978835982*G0_0_1_1_0_0_3_1_0 - 1.38835978835982*G0_0_1_1_0_0_3_1_1 + 1.38835978835982*G0_0_1_1_0_0_4_1_0 + 1.38835978835982*G0_0_1_1_0_0_5_1_1 - 1.38835978835982*G0_0_1_2_0_1_0_0_0 - 1.38835978835982*G0_0_1_2_0_1_0_0_1 + 1.38835978835982*G0_0_1_2_0_1_1_0_0 + 1.38835978835982*G0_0_1_2_0_1_2_0_1 - 1.38835978835982*G0_0_1_2_0_1_3_1_0 - 1.38835978835982*G0_0_1_2_0_1_3_1_1 + 1.38835978835982*G0_0_1_2_0_1_4_1_0 + 1.38835978835982*G0_0_1_2_0_1_5_1_1 + 1.38835978835982*G0_0_1_3_1_0_0_0_0 + 1.38835978835982*G0_0_1_3_1_0_0_0_1 - 1.38835978835982*G0_0_1_3_1_0_1_0_0 - 1.38835978835982*G0_0_1_3_1_0_2_0_1 + 1.38835978835982*G0_0_1_3_1_0_3_1_0 + 1.38835978835982*G0_0_1_3_1_0_3_1_1 - 1.38835978835982*G0_0_1_3_1_0_4_1_0 - 1.38835978835982*G0_0_1_3_1_0_5_1_1 + 1.38835978835982*G0_0_1_3_1_1_0_0_0 + 1.38835978835982*G0_0_1_3_1_1_0_0_1 - 1.38835978835982*G0_0_1_3_1_1_1_0_0 - 1.38835978835982*G0_0_1_3_1_1_2_0_1 + 1.38835978835982*G0_0_1_3_1_1_3_1_0 + 1.38835978835982*G0_0_1_3_1_1_3_1_1 - 1.38835978835982*G0_0_1_3_1_1_4_1_0 - 1.38835978835982*G0_0_1_3_1_1_5_1_1 - 1.38835978835982*G0_0_1_4_1_0_0_0_0 - 1.38835978835982*G0_0_1_4_1_0_0_0_1 + 1.38835978835982*G0_0_1_4_1_0_1_0_0 + 1.38835978835982*G0_0_1_4_1_0_2_0_1 - 1.38835978835982*G0_0_1_4_1_0_3_1_0 - 1.38835978835982*G0_0_1_4_1_0_3_1_1 + 1.38835978835982*G0_0_1_4_1_0_4_1_0 + 1.38835978835982*G0_0_1_4_1_0_5_1_1 - 1.38835978835982*G0_0_1_5_1_1_0_0_0 - 1.38835978835982*G0_0_1_5_1_1_0_0_1 + 1.38835978835982*G0_0_1_5_1_1_1_0_0 + 1.38835978835982*G0_0_1_5_1_1_2_0_1 - 1.38835978835982*G0_0_1_5_1_1_3_1_0 - 1.38835978835982*G0_0_1_5_1_1_3_1_1 + 1.38835978835982*G0_0_1_5_1_1_4_1_0 + 1.38835978835982*G0_0_1_5_1_1_5_1_1 + 1.3883597883598*G0_1_0_0_0_0_0_0_0 + 1.3883597883598*G0_1_0_0_0_0_0_0_1 - 1.3883597883598*G0_1_0_0_0_0_1_0_0 - 1.3883597883598*G0_1_0_0_0_0_2_0_1 + 1.3883597883598*G0_1_0_0_0_0_3_1_0 + 1.3883597883598*G0_1_0_0_0_0_3_1_1 - 1.3883597883598*G0_1_0_0_0_0_4_1_0 - 1.3883597883598*G0_1_0_0_0_0_5_1_1 + 1.3883597883598*G0_1_0_0_0_1_0_0_0 + 1.3883597883598*G0_1_0_0_0_1_0_0_1 - 1.3883597883598*G0_1_0_0_0_1_1_0_0 - 1.3883597883598*G0_1_0_0_0_1_2_0_1 + 1.3883597883598*G0_1_0_0_0_1_3_1_0 + 1.3883597883598*G0_1_0_0_0_1_3_1_1 - 1.3883597883598*G0_1_0_0_0_1_4_1_0 - 1.3883597883598*G0_1_0_0_0_1_5_1_1 - 1.3883597883598*G0_1_0_1_0_0_0_0_0 - 1.3883597883598*G0_1_0_1_0_0_0_0_1 + 1.3883597883598*G0_1_0_1_0_0_1_0_0 + 1.3883597883598*G0_1_0_1_0_0_2_0_1 - 1.3883597883598*G0_1_0_1_0_0_3_1_0 - 1.3883597883598*G0_1_0_1_0_0_3_1_1 + 1.3883597883598*G0_1_0_1_0_0_4_1_0 + 1.3883597883598*G0_1_0_1_0_0_5_1_1 - 1.3883597883598*G0_1_0_2_0_1_0_0_0 - 1.3883597883598*G0_1_0_2_0_1_0_0_1 + 1.3883597883598*G0_1_0_2_0_1_1_0_0 + 1.3883597883598*G0_1_0_2_0_1_2_0_1 - 1.3883597883598*G0_1_0_2_0_1_3_1_0 - 1.3883597883598*G0_1_0_2_0_1_3_1_1 + 1.3883597883598*G0_1_0_2_0_1_4_1_0 + 1.3883597883598*G0_1_0_2_0_1_5_1_1 + 1.3883597883598*G0_1_0_3_1_0_0_0_0 + 1.3883597883598*G0_1_0_3_1_0_0_0_1 - 1.3883597883598*G0_1_0_3_1_0_1_0_0 - 1.3883597883598*G0_1_0_3_1_0_2_0_1 + 1.3883597883598*G0_1_0_3_1_0_3_1_0 + 1.3883597883598*G0_1_0_3_1_0_3_1_1 - 1.3883597883598*G0_1_0_3_1_0_4_1_0 - 1.3883597883598*G0_1_0_3_1_0_5_1_1 + 1.3883597883598*G0_1_0_3_1_1_0_0_0 + 1.3883597883598*G0_1_0_3_1_1_0_0_1 - 1.3883597883598*G0_1_0_3_1_1_1_0_0 - 1.3883597883598*G0_1_0_3_1_1_2_0_1 + 1.3883597883598*G0_1_0_3_1_1_3_1_0 + 1.3883597883598*G0_1_0_3_1_1_3_1_1 - 1.3883597883598*G0_1_0_3_1_1_4_1_0 - 1.3883597883598*G0_1_0_3_1_1_5_1_1 - 1.3883597883598*G0_1_0_4_1_0_0_0_0 - 1.3883597883598*G0_1_0_4_1_0_0_0_1 + 1.3883597883598*G0_1_0_4_1_0_1_0_0 + 1.3883597883598*G0_1_0_4_1_0_2_0_1 - 1.3883597883598*G0_1_0_4_1_0_3_1_0 - 1.3883597883598*G0_1_0_4_1_0_3_1_1 + 1.3883597883598*G0_1_0_4_1_0_4_1_0 + 1.3883597883598*G0_1_0_4_1_0_5_1_1 - 1.3883597883598*G0_1_0_5_1_1_0_0_0 - 1.3883597883598*G0_1_0_5_1_1_0_0_1 + 1.3883597883598*G0_1_0_5_1_1_1_0_0 + 1.3883597883598*G0_1_0_5_1_1_2_0_1 - 1.3883597883598*G0_1_0_5_1_1_3_1_0 - 1.3883597883598*G0_1_0_5_1_1_3_1_1 + 1.3883597883598*G0_1_0_5_1_1_4_1_0 + 1.3883597883598*G0_1_0_5_1_1_5_1_1;
    A[368] = A[252];
    A[101] = A[245] + 1.96402116402118*G0_0_0_0_0_0_0_0_0 + 1.96402116402118*G0_0_0_0_0_0_0_0_1 - 1.96402116402118*G0_0_0_0_0_0_1_0_0 - 1.96402116402118*G0_0_0_0_0_0_2_0_1 + 1.96402116402118*G0_0_0_0_0_0_3_1_0 + 1.96402116402118*G0_0_0_0_0_0_3_1_1 - 1.96402116402118*G0_0_0_0_0_0_4_1_0 - 1.96402116402118*G0_0_0_0_0_0_5_1_1 + 1.96402116402118*G0_0_0_0_0_1_0_0_0 + 1.96402116402118*G0_0_0_0_0_1_0_0_1 - 1.96402116402118*G0_0_0_0_0_1_1_0_0 - 1.96402116402118*G0_0_0_0_0_1_2_0_1 + 1.96402116402118*G0_0_0_0_0_1_3_1_0 + 1.96402116402118*G0_0_0_0_0_1_3_1_1 - 1.96402116402118*G0_0_0_0_0_1_4_1_0 - 1.96402116402118*G0_0_0_0_0_1_5_1_1 - 1.96402116402118*G0_0_0_1_0_0_0_0_0 - 1.96402116402118*G0_0_0_1_0_0_0_0_1 + 1.96402116402118*G0_0_0_1_0_0_1_0_0 + 1.96402116402118*G0_0_0_1_0_0_2_0_1 - 1.96402116402118*G0_0_0_1_0_0_3_1_0 - 1.96402116402118*G0_0_0_1_0_0_3_1_1 + 1.96402116402118*G0_0_0_1_0_0_4_1_0 + 1.96402116402118*G0_0_0_1_0_0_5_1_1 - 1.96402116402118*G0_0_0_2_0_1_0_0_0 - 1.96402116402118*G0_0_0_2_0_1_0_0_1 + 1.96402116402118*G0_0_0_2_0_1_1_0_0 + 1.96402116402118*G0_0_0_2_0_1_2_0_1 - 1.96402116402118*G0_0_0_2_0_1_3_1_0 - 1.96402116402118*G0_0_0_2_0_1_3_1_1 + 1.96402116402118*G0_0_0_2_0_1_4_1_0 + 1.96402116402118*G0_0_0_2_0_1_5_1_1 + 1.96402116402118*G0_0_0_3_1_0_0_0_0 + 1.96402116402118*G0_0_0_3_1_0_0_0_1 - 1.96402116402118*G0_0_0_3_1_0_1_0_0 - 1.96402116402118*G0_0_0_3_1_0_2_0_1 + 1.96402116402118*G0_0_0_3_1_0_3_1_0 + 1.96402116402118*G0_0_0_3_1_0_3_1_1 - 1.96402116402118*G0_0_0_3_1_0_4_1_0 - 1.96402116402118*G0_0_0_3_1_0_5_1_1 + 1.96402116402118*G0_0_0_3_1_1_0_0_0 + 1.96402116402118*G0_0_0_3_1_1_0_0_1 - 1.96402116402118*G0_0_0_3_1_1_1_0_0 - 1.96402116402118*G0_0_0_3_1_1_2_0_1 + 1.96402116402118*G0_0_0_3_1_1_3_1_0 + 1.96402116402118*G0_0_0_3_1_1_3_1_1 - 1.96402116402118*G0_0_0_3_1_1_4_1_0 - 1.96402116402118*G0_0_0_3_1_1_5_1_1 - 1.96402116402118*G0_0_0_4_1_0_0_0_0 - 1.96402116402118*G0_0_0_4_1_0_0_0_1 + 1.96402116402118*G0_0_0_4_1_0_1_0_0 + 1.96402116402118*G0_0_0_4_1_0_2_0_1 - 1.96402116402118*G0_0_0_4_1_0_3_1_0 - 1.96402116402118*G0_0_0_4_1_0_3_1_1 + 1.96402116402118*G0_0_0_4_1_0_4_1_0 + 1.96402116402118*G0_0_0_4_1_0_5_1_1 - 1.96402116402118*G0_0_0_5_1_1_0_0_0 - 1.96402116402118*G0_0_0_5_1_1_0_0_1 + 1.96402116402118*G0_0_0_5_1_1_1_0_0 + 1.96402116402118*G0_0_0_5_1_1_2_0_1 - 1.96402116402118*G0_0_0_5_1_1_3_1_0 - 1.96402116402118*G0_0_0_5_1_1_3_1_1 + 1.96402116402118*G0_0_0_5_1_1_4_1_0 + 1.96402116402118*G0_0_0_5_1_1_5_1_1 - 1.96402116402118*G0_1_1_0_0_0_0_0_0 - 1.96402116402118*G0_1_1_0_0_0_0_0_1 + 1.96402116402118*G0_1_1_0_0_0_1_0_0 + 1.96402116402118*G0_1_1_0_0_0_2_0_1 - 1.96402116402118*G0_1_1_0_0_0_3_1_0 - 1.96402116402118*G0_1_1_0_0_0_3_1_1 + 1.96402116402118*G0_1_1_0_0_0_4_1_0 + 1.96402116402118*G0_1_1_0_0_0_5_1_1 - 1.96402116402118*G0_1_1_0_0_1_0_0_0 - 1.96402116402118*G0_1_1_0_0_1_0_0_1 + 1.96402116402118*G0_1_1_0_0_1_1_0_0 + 1.96402116402118*G0_1_1_0_0_1_2_0_1 - 1.96402116402118*G0_1_1_0_0_1_3_1_0 - 1.96402116402118*G0_1_1_0_0_1_3_1_1 + 1.96402116402118*G0_1_1_0_0_1_4_1_0 + 1.96402116402118*G0_1_1_0_0_1_5_1_1 + 1.96402116402118*G0_1_1_1_0_0_0_0_0 + 1.96402116402118*G0_1_1_1_0_0_0_0_1 - 1.96402116402118*G0_1_1_1_0_0_1_0_0 - 1.96402116402118*G0_1_1_1_0_0_2_0_1 + 1.96402116402118*G0_1_1_1_0_0_3_1_0 + 1.96402116402118*G0_1_1_1_0_0_3_1_1 - 1.96402116402118*G0_1_1_1_0_0_4_1_0 - 1.96402116402118*G0_1_1_1_0_0_5_1_1 + 1.96402116402118*G0_1_1_2_0_1_0_0_0 + 1.96402116402118*G0_1_1_2_0_1_0_0_1 - 1.96402116402118*G0_1_1_2_0_1_1_0_0 - 1.96402116402118*G0_1_1_2_0_1_2_0_1 + 1.96402116402118*G0_1_1_2_0_1_3_1_0 + 1.96402116402118*G0_1_1_2_0_1_3_1_1 - 1.96402116402118*G0_1_1_2_0_1_4_1_0 - 1.96402116402118*G0_1_1_2_0_1_5_1_1 - 1.96402116402118*G0_1_1_3_1_0_0_0_0 - 1.96402116402118*G0_1_1_3_1_0_0_0_1 + 1.96402116402118*G0_1_1_3_1_0_1_0_0 + 1.96402116402118*G0_1_1_3_1_0_2_0_1 - 1.96402116402118*G0_1_1_3_1_0_3_1_0 - 1.96402116402118*G0_1_1_3_1_0_3_1_1 + 1.96402116402118*G0_1_1_3_1_0_4_1_0 + 1.96402116402118*G0_1_1_3_1_0_5_1_1 - 1.96402116402118*G0_1_1_3_1_1_0_0_0 - 1.96402116402118*G0_1_1_3_1_1_0_0_1 + 1.96402116402118*G0_1_1_3_1_1_1_0_0 + 1.96402116402118*G0_1_1_3_1_1_2_0_1 - 1.96402116402118*G0_1_1_3_1_1_3_1_0 - 1.96402116402118*G0_1_1_3_1_1_3_1_1 + 1.96402116402118*G0_1_1_3_1_1_4_1_0 + 1.96402116402118*G0_1_1_3_1_1_5_1_1 + 1.96402116402118*G0_1_1_4_1_0_0_0_0 + 1.96402116402118*G0_1_1_4_1_0_0_0_1 - 1.96402116402118*G0_1_1_4_1_0_1_0_0 - 1.96402116402118*G0_1_1_4_1_0_2_0_1 + 1.96402116402118*G0_1_1_4_1_0_3_1_0 + 1.96402116402118*G0_1_1_4_1_0_3_1_1 - 1.96402116402118*G0_1_1_4_1_0_4_1_0 - 1.96402116402118*G0_1_1_4_1_0_5_1_1 + 1.96402116402118*G0_1_1_5_1_1_0_0_0 + 1.96402116402118*G0_1_1_5_1_1_0_0_1 - 1.96402116402118*G0_1_1_5_1_1_1_0_0 - 1.96402116402118*G0_1_1_5_1_1_2_0_1 + 1.96402116402118*G0_1_1_5_1_1_3_1_0 + 1.96402116402118*G0_1_1_5_1_1_3_1_1 - 1.96402116402118*G0_1_1_5_1_1_4_1_0 - 1.96402116402118*G0_1_1_5_1_1_5_1_1;
    A[194] = A[658];
    A[621] = A[743] - 0.338624338624344*G0_0_0_0_0_0_0_0_0 - 0.338624338624344*G0_0_0_0_0_0_0_0_1 + 0.338624338624344*G0_0_0_0_0_0_1_0_0 + 0.338624338624344*G0_0_0_0_0_0_2_0_1 - 0.338624338624344*G0_0_0_0_0_0_3_1_0 - 0.338624338624344*G0_0_0_0_0_0_3_1_1 + 0.338624338624344*G0_0_0_0_0_0_4_1_0 + 0.338624338624344*G0_0_0_0_0_0_5_1_1 - 0.338624338624344*G0_0_0_0_0_1_0_0_0 - 0.338624338624344*G0_0_0_0_0_1_0_0_1 + 0.338624338624344*G0_0_0_0_0_1_1_0_0 + 0.338624338624344*G0_0_0_0_0_1_2_0_1 - 0.338624338624344*G0_0_0_0_0_1_3_1_0 - 0.338624338624344*G0_0_0_0_0_1_3_1_1 + 0.338624338624344*G0_0_0_0_0_1_4_1_0 + 0.338624338624344*G0_0_0_0_0_1_5_1_1 + 0.338624338624344*G0_0_0_1_0_0_0_0_0 + 0.338624338624344*G0_0_0_1_0_0_0_0_1 - 0.338624338624344*G0_0_0_1_0_0_1_0_0 - 0.338624338624344*G0_0_0_1_0_0_2_0_1 + 0.338624338624344*G0_0_0_1_0_0_3_1_0 + 0.338624338624344*G0_0_0_1_0_0_3_1_1 - 0.338624338624344*G0_0_0_1_0_0_4_1_0 - 0.338624338624344*G0_0_0_1_0_0_5_1_1 + 0.338624338624344*G0_0_0_2_0_1_0_0_0 + 0.338624338624344*G0_0_0_2_0_1_0_0_1 - 0.338624338624344*G0_0_0_2_0_1_1_0_0 - 0.338624338624344*G0_0_0_2_0_1_2_0_1 + 0.338624338624344*G0_0_0_2_0_1_3_1_0 + 0.338624338624344*G0_0_0_2_0_1_3_1_1 - 0.338624338624344*G0_0_0_2_0_1_4_1_0 - 0.338624338624344*G0_0_0_2_0_1_5_1_1 - 0.338624338624344*G0_0_0_3_1_0_0_0_0 - 0.338624338624344*G0_0_0_3_1_0_0_0_1 + 0.338624338624344*G0_0_0_3_1_0_1_0_0 + 0.338624338624344*G0_0_0_3_1_0_2_0_1 - 0.338624338624344*G0_0_0_3_1_0_3_1_0 - 0.338624338624344*G0_0_0_3_1_0_3_1_1 + 0.338624338624344*G0_0_0_3_1_0_4_1_0 + 0.338624338624344*G0_0_0_3_1_0_5_1_1 - 0.338624338624344*G0_0_0_3_1_1_0_0_0 - 0.338624338624344*G0_0_0_3_1_1_0_0_1 + 0.338624338624344*G0_0_0_3_1_1_1_0_0 + 0.338624338624344*G0_0_0_3_1_1_2_0_1 - 0.338624338624344*G0_0_0_3_1_1_3_1_0 - 0.338624338624344*G0_0_0_3_1_1_3_1_1 + 0.338624338624344*G0_0_0_3_1_1_4_1_0 + 0.338624338624344*G0_0_0_3_1_1_5_1_1 + 0.338624338624344*G0_0_0_4_1_0_0_0_0 + 0.338624338624344*G0_0_0_4_1_0_0_0_1 - 0.338624338624344*G0_0_0_4_1_0_1_0_0 - 0.338624338624344*G0_0_0_4_1_0_2_0_1 + 0.338624338624344*G0_0_0_4_1_0_3_1_0 + 0.338624338624344*G0_0_0_4_1_0_3_1_1 - 0.338624338624344*G0_0_0_4_1_0_4_1_0 - 0.338624338624344*G0_0_0_4_1_0_5_1_1 + 0.338624338624344*G0_0_0_5_1_1_0_0_0 + 0.338624338624344*G0_0_0_5_1_1_0_0_1 - 0.338624338624344*G0_0_0_5_1_1_1_0_0 - 0.338624338624344*G0_0_0_5_1_1_2_0_1 + 0.338624338624344*G0_0_0_5_1_1_3_1_0 + 0.338624338624344*G0_0_0_5_1_1_3_1_1 - 0.338624338624344*G0_0_0_5_1_1_4_1_0 - 0.338624338624344*G0_0_0_5_1_1_5_1_1 - 0.33862433862434*G0_0_1_0_0_0_0_0_0 - 0.33862433862434*G0_0_1_0_0_0_0_0_1 + 0.33862433862434*G0_0_1_0_0_0_1_0_0 + 0.33862433862434*G0_0_1_0_0_0_2_0_1 - 0.33862433862434*G0_0_1_0_0_0_3_1_0 - 0.33862433862434*G0_0_1_0_0_0_3_1_1 + 0.33862433862434*G0_0_1_0_0_0_4_1_0 + 0.33862433862434*G0_0_1_0_0_0_5_1_1 - 0.33862433862434*G0_0_1_0_0_1_0_0_0 - 0.33862433862434*G0_0_1_0_0_1_0_0_1 + 0.33862433862434*G0_0_1_0_0_1_1_0_0 + 0.33862433862434*G0_0_1_0_0_1_2_0_1 - 0.33862433862434*G0_0_1_0_0_1_3_1_0 - 0.33862433862434*G0_0_1_0_0_1_3_1_1 + 0.33862433862434*G0_0_1_0_0_1_4_1_0 + 0.33862433862434*G0_0_1_0_0_1_5_1_1 + 0.33862433862434*G0_0_1_1_0_0_0_0_0 + 0.33862433862434*G0_0_1_1_0_0_0_0_1 - 0.33862433862434*G0_0_1_1_0_0_1_0_0 - 0.33862433862434*G0_0_1_1_0_0_2_0_1 + 0.33862433862434*G0_0_1_1_0_0_3_1_0 + 0.33862433862434*G0_0_1_1_0_0_3_1_1 - 0.33862433862434*G0_0_1_1_0_0_4_1_0 - 0.33862433862434*G0_0_1_1_0_0_5_1_1 + 0.33862433862434*G0_0_1_2_0_1_0_0_0 + 0.33862433862434*G0_0_1_2_0_1_0_0_1 - 0.33862433862434*G0_0_1_2_0_1_1_0_0 - 0.33862433862434*G0_0_1_2_0_1_2_0_1 + 0.33862433862434*G0_0_1_2_0_1_3_1_0 + 0.33862433862434*G0_0_1_2_0_1_3_1_1 - 0.33862433862434*G0_0_1_2_0_1_4_1_0 - 0.33862433862434*G0_0_1_2_0_1_5_1_1 - 0.33862433862434*G0_0_1_3_1_0_0_0_0 - 0.33862433862434*G0_0_1_3_1_0_0_0_1 + 0.33862433862434*G0_0_1_3_1_0_1_0_0 + 0.33862433862434*G0_0_1_3_1_0_2_0_1 - 0.33862433862434*G0_0_1_3_1_0_3_1_0 - 0.33862433862434*G0_0_1_3_1_0_3_1_1 + 0.33862433862434*G0_0_1_3_1_0_4_1_0 + 0.33862433862434*G0_0_1_3_1_0_5_1_1 - 0.33862433862434*G0_0_1_3_1_1_0_0_0 - 0.33862433862434*G0_0_1_3_1_1_0_0_1 + 0.33862433862434*G0_0_1_3_1_1_1_0_0 + 0.33862433862434*G0_0_1_3_1_1_2_0_1 - 0.33862433862434*G0_0_1_3_1_1_3_1_0 - 0.33862433862434*G0_0_1_3_1_1_3_1_1 + 0.33862433862434*G0_0_1_3_1_1_4_1_0 + 0.33862433862434*G0_0_1_3_1_1_5_1_1 + 0.33862433862434*G0_0_1_4_1_0_0_0_0 + 0.33862433862434*G0_0_1_4_1_0_0_0_1 - 0.33862433862434*G0_0_1_4_1_0_1_0_0 - 0.33862433862434*G0_0_1_4_1_0_2_0_1 + 0.33862433862434*G0_0_1_4_1_0_3_1_0 + 0.33862433862434*G0_0_1_4_1_0_3_1_1 - 0.33862433862434*G0_0_1_4_1_0_4_1_0 - 0.33862433862434*G0_0_1_4_1_0_5_1_1 + 0.33862433862434*G0_0_1_5_1_1_0_0_0 + 0.33862433862434*G0_0_1_5_1_1_0_0_1 - 0.33862433862434*G0_0_1_5_1_1_1_0_0 - 0.33862433862434*G0_0_1_5_1_1_2_0_1 + 0.33862433862434*G0_0_1_5_1_1_3_1_0 + 0.33862433862434*G0_0_1_5_1_1_3_1_1 - 0.33862433862434*G0_0_1_5_1_1_4_1_0 - 0.33862433862434*G0_0_1_5_1_1_5_1_1 - 0.33862433862435*G0_1_0_0_0_0_0_0_0 - 0.33862433862435*G0_1_0_0_0_0_0_0_1 + 0.33862433862435*G0_1_0_0_0_0_1_0_0 + 0.33862433862435*G0_1_0_0_0_0_2_0_1 - 0.33862433862435*G0_1_0_0_0_0_3_1_0 - 0.33862433862435*G0_1_0_0_0_0_3_1_1 + 0.33862433862435*G0_1_0_0_0_0_4_1_0 + 0.33862433862435*G0_1_0_0_0_0_5_1_1 - 0.33862433862435*G0_1_0_0_0_1_0_0_0 - 0.33862433862435*G0_1_0_0_0_1_0_0_1 + 0.33862433862435*G0_1_0_0_0_1_1_0_0 + 0.33862433862435*G0_1_0_0_0_1_2_0_1 - 0.33862433862435*G0_1_0_0_0_1_3_1_0 - 0.33862433862435*G0_1_0_0_0_1_3_1_1 + 0.33862433862435*G0_1_0_0_0_1_4_1_0 + 0.33862433862435*G0_1_0_0_0_1_5_1_1 + 0.33862433862435*G0_1_0_1_0_0_0_0_0 + 0.33862433862435*G0_1_0_1_0_0_0_0_1 - 0.33862433862435*G0_1_0_1_0_0_1_0_0 - 0.33862433862435*G0_1_0_1_0_0_2_0_1 + 0.33862433862435*G0_1_0_1_0_0_3_1_0 + 0.33862433862435*G0_1_0_1_0_0_3_1_1 - 0.33862433862435*G0_1_0_1_0_0_4_1_0 - 0.33862433862435*G0_1_0_1_0_0_5_1_1 + 0.33862433862435*G0_1_0_2_0_1_0_0_0 + 0.33862433862435*G0_1_0_2_0_1_0_0_1 - 0.33862433862435*G0_1_0_2_0_1_1_0_0 - 0.33862433862435*G0_1_0_2_0_1_2_0_1 + 0.33862433862435*G0_1_0_2_0_1_3_1_0 + 0.33862433862435*G0_1_0_2_0_1_3_1_1 - 0.33862433862435*G0_1_0_2_0_1_4_1_0 - 0.33862433862435*G0_1_0_2_0_1_5_1_1 - 0.33862433862435*G0_1_0_3_1_0_0_0_0 - 0.33862433862435*G0_1_0_3_1_0_0_0_1 + 0.33862433862435*G0_1_0_3_1_0_1_0_0 + 0.33862433862435*G0_1_0_3_1_0_2_0_1 - 0.33862433862435*G0_1_0_3_1_0_3_1_0 - 0.33862433862435*G0_1_0_3_1_0_3_1_1 + 0.33862433862435*G0_1_0_3_1_0_4_1_0 + 0.33862433862435*G0_1_0_3_1_0_5_1_1 - 0.33862433862435*G0_1_0_3_1_1_0_0_0 - 0.33862433862435*G0_1_0_3_1_1_0_0_1 + 0.33862433862435*G0_1_0_3_1_1_1_0_0 + 0.33862433862435*G0_1_0_3_1_1_2_0_1 - 0.33862433862435*G0_1_0_3_1_1_3_1_0 - 0.33862433862435*G0_1_0_3_1_1_3_1_1 + 0.33862433862435*G0_1_0_3_1_1_4_1_0 + 0.33862433862435*G0_1_0_3_1_1_5_1_1 + 0.33862433862435*G0_1_0_4_1_0_0_0_0 + 0.33862433862435*G0_1_0_4_1_0_0_0_1 - 0.33862433862435*G0_1_0_4_1_0_1_0_0 - 0.33862433862435*G0_1_0_4_1_0_2_0_1 + 0.33862433862435*G0_1_0_4_1_0_3_1_0 + 0.33862433862435*G0_1_0_4_1_0_3_1_1 - 0.33862433862435*G0_1_0_4_1_0_4_1_0 - 0.33862433862435*G0_1_0_4_1_0_5_1_1 + 0.33862433862435*G0_1_0_5_1_1_0_0_0 + 0.33862433862435*G0_1_0_5_1_1_0_0_1 - 0.33862433862435*G0_1_0_5_1_1_1_0_0 - 0.33862433862435*G0_1_0_5_1_1_2_0_1 + 0.33862433862435*G0_1_0_5_1_1_3_1_0 + 0.33862433862435*G0_1_0_5_1_1_3_1_1 - 0.33862433862435*G0_1_0_5_1_1_4_1_0 - 0.33862433862435*G0_1_0_5_1_1_5_1_1;
    A[748] = A[658] - 0.67724867724869*G0_0_0_0_0_0_0_0_0 - 0.67724867724869*G0_0_0_0_0_0_0_0_1 + 0.67724867724869*G0_0_0_0_0_0_1_0_0 + 0.67724867724869*G0_0_0_0_0_0_2_0_1 - 0.67724867724869*G0_0_0_0_0_0_3_1_0 - 0.67724867724869*G0_0_0_0_0_0_3_1_1 + 0.67724867724869*G0_0_0_0_0_0_4_1_0 + 0.67724867724869*G0_0_0_0_0_0_5_1_1 - 0.67724867724869*G0_0_0_0_0_1_0_0_0 - 0.67724867724869*G0_0_0_0_0_1_0_0_1 + 0.67724867724869*G0_0_0_0_0_1_1_0_0 + 0.67724867724869*G0_0_0_0_0_1_2_0_1 - 0.67724867724869*G0_0_0_0_0_1_3_1_0 - 0.67724867724869*G0_0_0_0_0_1_3_1_1 + 0.67724867724869*G0_0_0_0_0_1_4_1_0 + 0.67724867724869*G0_0_0_0_0_1_5_1_1 + 0.67724867724869*G0_0_0_1_0_0_0_0_0 + 0.67724867724869*G0_0_0_1_0_0_0_0_1 - 0.67724867724869*G0_0_0_1_0_0_1_0_0 - 0.67724867724869*G0_0_0_1_0_0_2_0_1 + 0.67724867724869*G0_0_0_1_0_0_3_1_0 + 0.67724867724869*G0_0_0_1_0_0_3_1_1 - 0.67724867724869*G0_0_0_1_0_0_4_1_0 - 0.67724867724869*G0_0_0_1_0_0_5_1_1 + 0.67724867724869*G0_0_0_2_0_1_0_0_0 + 0.67724867724869*G0_0_0_2_0_1_0_0_1 - 0.67724867724869*G0_0_0_2_0_1_1_0_0 - 0.67724867724869*G0_0_0_2_0_1_2_0_1 + 0.67724867724869*G0_0_0_2_0_1_3_1_0 + 0.67724867724869*G0_0_0_2_0_1_3_1_1 - 0.67724867724869*G0_0_0_2_0_1_4_1_0 - 0.67724867724869*G0_0_0_2_0_1_5_1_1 - 0.67724867724869*G0_0_0_3_1_0_0_0_0 - 0.67724867724869*G0_0_0_3_1_0_0_0_1 + 0.67724867724869*G0_0_0_3_1_0_1_0_0 + 0.67724867724869*G0_0_0_3_1_0_2_0_1 - 0.67724867724869*G0_0_0_3_1_0_3_1_0 - 0.67724867724869*G0_0_0_3_1_0_3_1_1 + 0.67724867724869*G0_0_0_3_1_0_4_1_0 + 0.67724867724869*G0_0_0_3_1_0_5_1_1 - 0.67724867724869*G0_0_0_3_1_1_0_0_0 - 0.67724867724869*G0_0_0_3_1_1_0_0_1 + 0.67724867724869*G0_0_0_3_1_1_1_0_0 + 0.67724867724869*G0_0_0_3_1_1_2_0_1 - 0.67724867724869*G0_0_0_3_1_1_3_1_0 - 0.67724867724869*G0_0_0_3_1_1_3_1_1 + 0.67724867724869*G0_0_0_3_1_1_4_1_0 + 0.67724867724869*G0_0_0_3_1_1_5_1_1 + 0.67724867724869*G0_0_0_4_1_0_0_0_0 + 0.67724867724869*G0_0_0_4_1_0_0_0_1 - 0.67724867724869*G0_0_0_4_1_0_1_0_0 - 0.67724867724869*G0_0_0_4_1_0_2_0_1 + 0.67724867724869*G0_0_0_4_1_0_3_1_0 + 0.67724867724869*G0_0_0_4_1_0_3_1_1 - 0.67724867724869*G0_0_0_4_1_0_4_1_0 - 0.67724867724869*G0_0_0_4_1_0_5_1_1 + 0.67724867724869*G0_0_0_5_1_1_0_0_0 + 0.67724867724869*G0_0_0_5_1_1_0_0_1 - 0.67724867724869*G0_0_0_5_1_1_1_0_0 - 0.67724867724869*G0_0_0_5_1_1_2_0_1 + 0.67724867724869*G0_0_0_5_1_1_3_1_0 + 0.67724867724869*G0_0_0_5_1_1_3_1_1 - 0.67724867724869*G0_0_0_5_1_1_4_1_0 - 0.67724867724869*G0_0_0_5_1_1_5_1_1 + 0.677248677248681*G0_1_1_0_0_0_0_0_0 + 0.677248677248681*G0_1_1_0_0_0_0_0_1 - 0.677248677248681*G0_1_1_0_0_0_1_0_0 - 0.677248677248681*G0_1_1_0_0_0_2_0_1 + 0.677248677248681*G0_1_1_0_0_0_3_1_0 + 0.677248677248681*G0_1_1_0_0_0_3_1_1 - 0.677248677248681*G0_1_1_0_0_0_4_1_0 - 0.677248677248681*G0_1_1_0_0_0_5_1_1 + 0.677248677248681*G0_1_1_0_0_1_0_0_0 + 0.677248677248681*G0_1_1_0_0_1_0_0_1 - 0.677248677248681*G0_1_1_0_0_1_1_0_0 - 0.677248677248681*G0_1_1_0_0_1_2_0_1 + 0.677248677248681*G0_1_1_0_0_1_3_1_0 + 0.677248677248681*G0_1_1_0_0_1_3_1_1 - 0.677248677248681*G0_1_1_0_0_1_4_1_0 - 0.677248677248681*G0_1_1_0_0_1_5_1_1 - 0.677248677248681*G0_1_1_1_0_0_0_0_0 - 0.677248677248681*G0_1_1_1_0_0_0_0_1 + 0.677248677248681*G0_1_1_1_0_0_1_0_0 + 0.677248677248681*G0_1_1_1_0_0_2_0_1 - 0.677248677248681*G0_1_1_1_0_0_3_1_0 - 0.677248677248681*G0_1_1_1_0_0_3_1_1 + 0.677248677248681*G0_1_1_1_0_0_4_1_0 + 0.677248677248681*G0_1_1_1_0_0_5_1_1 - 0.677248677248681*G0_1_1_2_0_1_0_0_0 - 0.677248677248681*G0_1_1_2_0_1_0_0_1 + 0.677248677248681*G0_1_1_2_0_1_1_0_0 + 0.677248677248681*G0_1_1_2_0_1_2_0_1 - 0.677248677248681*G0_1_1_2_0_1_3_1_0 - 0.677248677248681*G0_1_1_2_0_1_3_1_1 + 0.677248677248681*G0_1_1_2_0_1_4_1_0 + 0.677248677248681*G0_1_1_2_0_1_5_1_1 + 0.677248677248681*G0_1_1_3_1_0_0_0_0 + 0.677248677248681*G0_1_1_3_1_0_0_0_1 - 0.677248677248681*G0_1_1_3_1_0_1_0_0 - 0.677248677248681*G0_1_1_3_1_0_2_0_1 + 0.677248677248681*G0_1_1_3_1_0_3_1_0 + 0.677248677248681*G0_1_1_3_1_0_3_1_1 - 0.677248677248681*G0_1_1_3_1_0_4_1_0 - 0.677248677248681*G0_1_1_3_1_0_5_1_1 + 0.677248677248681*G0_1_1_3_1_1_0_0_0 + 0.677248677248681*G0_1_1_3_1_1_0_0_1 - 0.677248677248681*G0_1_1_3_1_1_1_0_0 - 0.677248677248681*G0_1_1_3_1_1_2_0_1 + 0.677248677248681*G0_1_1_3_1_1_3_1_0 + 0.677248677248681*G0_1_1_3_1_1_3_1_1 - 0.677248677248681*G0_1_1_3_1_1_4_1_0 - 0.677248677248681*G0_1_1_3_1_1_5_1_1 - 0.677248677248681*G0_1_1_4_1_0_0_0_0 - 0.677248677248681*G0_1_1_4_1_0_0_0_1 + 0.677248677248681*G0_1_1_4_1_0_1_0_0 + 0.677248677248681*G0_1_1_4_1_0_2_0_1 - 0.677248677248681*G0_1_1_4_1_0_3_1_0 - 0.677248677248681*G0_1_1_4_1_0_3_1_1 + 0.677248677248681*G0_1_1_4_1_0_4_1_0 + 0.677248677248681*G0_1_1_4_1_0_5_1_1 - 0.677248677248681*G0_1_1_5_1_1_0_0_0 - 0.677248677248681*G0_1_1_5_1_1_0_0_1 + 0.677248677248681*G0_1_1_5_1_1_1_0_0 + 0.677248677248681*G0_1_1_5_1_1_2_0_1 - 0.677248677248681*G0_1_1_5_1_1_3_1_0 - 0.677248677248681*G0_1_1_5_1_1_3_1_1 + 0.677248677248681*G0_1_1_5_1_1_4_1_0 + 0.677248677248681*G0_1_1_5_1_1_5_1_1;
    A[396] = A[658];
    A[864] = A[748];
    A[628] = -A[252] + 0.948148148148172*G0_1_1_0_0_0_0_0_0 + 0.948148148148172*G0_1_1_0_0_0_0_0_1 - 0.948148148148172*G0_1_1_0_0_0_1_0_0 - 0.948148148148172*G0_1_1_0_0_0_2_0_1 + 0.948148148148172*G0_1_1_0_0_0_3_1_0 + 0.948148148148172*G0_1_1_0_0_0_3_1_1 - 0.948148148148172*G0_1_1_0_0_0_4_1_0 - 0.948148148148172*G0_1_1_0_0_0_5_1_1 + 0.948148148148172*G0_1_1_0_0_1_0_0_0 + 0.948148148148172*G0_1_1_0_0_1_0_0_1 - 0.948148148148172*G0_1_1_0_0_1_1_0_0 - 0.948148148148172*G0_1_1_0_0_1_2_0_1 + 0.948148148148172*G0_1_1_0_0_1_3_1_0 + 0.948148148148172*G0_1_1_0_0_1_3_1_1 - 0.948148148148172*G0_1_1_0_0_1_4_1_0 - 0.948148148148172*G0_1_1_0_0_1_5_1_1 - 0.948148148148172*G0_1_1_1_0_0_0_0_0 - 0.948148148148172*G0_1_1_1_0_0_0_0_1 + 0.948148148148172*G0_1_1_1_0_0_1_0_0 + 0.948148148148172*G0_1_1_1_0_0_2_0_1 - 0.948148148148172*G0_1_1_1_0_0_3_1_0 - 0.948148148148172*G0_1_1_1_0_0_3_1_1 + 0.948148148148172*G0_1_1_1_0_0_4_1_0 + 0.948148148148172*G0_1_1_1_0_0_5_1_1 - 0.948148148148172*G0_1_1_2_0_1_0_0_0 - 0.948148148148172*G0_1_1_2_0_1_0_0_1 + 0.948148148148172*G0_1_1_2_0_1_1_0_0 + 0.948148148148172*G0_1_1_2_0_1_2_0_1 - 0.948148148148172*G0_1_1_2_0_1_3_1_0 - 0.948148148148172*G0_1_1_2_0_1_3_1_1 + 0.948148148148172*G0_1_1_2_0_1_4_1_0 + 0.948148148148172*G0_1_1_2_0_1_5_1_1 + 0.948148148148172*G0_1_1_3_1_0_0_0_0 + 0.948148148148172*G0_1_1_3_1_0_0_0_1 - 0.948148148148172*G0_1_1_3_1_0_1_0_0 - 0.948148148148172*G0_1_1_3_1_0_2_0_1 + 0.948148148148172*G0_1_1_3_1_0_3_1_0 + 0.948148148148172*G0_1_1_3_1_0_3_1_1 - 0.948148148148172*G0_1_1_3_1_0_4_1_0 - 0.948148148148172*G0_1_1_3_1_0_5_1_1 + 0.948148148148172*G0_1_1_3_1_1_0_0_0 + 0.948148148148172*G0_1_1_3_1_1_0_0_1 - 0.948148148148172*G0_1_1_3_1_1_1_0_0 - 0.948148148148172*G0_1_1_3_1_1_2_0_1 + 0.948148148148172*G0_1_1_3_1_1_3_1_0 + 0.948148148148172*G0_1_1_3_1_1_3_1_1 - 0.948148148148172*G0_1_1_3_1_1_4_1_0 - 0.948148148148172*G0_1_1_3_1_1_5_1_1 - 0.948148148148172*G0_1_1_4_1_0_0_0_0 - 0.948148148148172*G0_1_1_4_1_0_0_0_1 + 0.948148148148172*G0_1_1_4_1_0_1_0_0 + 0.948148148148172*G0_1_1_4_1_0_2_0_1 - 0.948148148148172*G0_1_1_4_1_0_3_1_0 - 0.948148148148172*G0_1_1_4_1_0_3_1_1 + 0.948148148148172*G0_1_1_4_1_0_4_1_0 + 0.948148148148172*G0_1_1_4_1_0_5_1_1 - 0.948148148148172*G0_1_1_5_1_1_0_0_0 - 0.948148148148172*G0_1_1_5_1_1_0_0_1 + 0.948148148148172*G0_1_1_5_1_1_1_0_0 + 0.948148148148172*G0_1_1_5_1_1_2_0_1 - 0.948148148148172*G0_1_1_5_1_1_3_1_0 - 0.948148148148172*G0_1_1_5_1_1_3_1_1 + 0.948148148148172*G0_1_1_5_1_1_4_1_0 + 0.948148148148172*G0_1_1_5_1_1_5_1_1;
    A[830] = A[628];
    A[863] = A[252];
    A[627] = A[628];
    A[710] = A[245];
    A[156] = A[621];
    A[254] = A[428];
    A[434] = A[403];
    A[322] = 0.0;
    A[772] = A[307];
    A[465] = 8.81249999999981*A[5];
    A[401] = -A[656] + 1.3883597883598*G0_0_1_0_0_0_0_0_0 + 1.3883597883598*G0_0_1_0_0_0_0_0_1 - 1.3883597883598*G0_0_1_0_0_0_1_0_0 - 1.3883597883598*G0_0_1_0_0_0_2_0_1 + 1.3883597883598*G0_0_1_0_0_0_3_1_0 + 1.3883597883598*G0_0_1_0_0_0_3_1_1 - 1.3883597883598*G0_0_1_0_0_0_4_1_0 - 1.3883597883598*G0_0_1_0_0_0_5_1_1 + 1.3883597883598*G0_0_1_0_0_1_0_0_0 + 1.3883597883598*G0_0_1_0_0_1_0_0_1 - 1.3883597883598*G0_0_1_0_0_1_1_0_0 - 1.3883597883598*G0_0_1_0_0_1_2_0_1 + 1.3883597883598*G0_0_1_0_0_1_3_1_0 + 1.3883597883598*G0_0_1_0_0_1_3_1_1 - 1.3883597883598*G0_0_1_0_0_1_4_1_0 - 1.3883597883598*G0_0_1_0_0_1_5_1_1 - 1.3883597883598*G0_0_1_1_0_0_0_0_0 - 1.3883597883598*G0_0_1_1_0_0_0_0_1 + 1.3883597883598*G0_0_1_1_0_0_1_0_0 + 1.3883597883598*G0_0_1_1_0_0_2_0_1 - 1.3883597883598*G0_0_1_1_0_0_3_1_0 - 1.3883597883598*G0_0_1_1_0_0_3_1_1 + 1.3883597883598*G0_0_1_1_0_0_4_1_0 + 1.3883597883598*G0_0_1_1_0_0_5_1_1 - 1.3883597883598*G0_0_1_2_0_1_0_0_0 - 1.3883597883598*G0_0_1_2_0_1_0_0_1 + 1.3883597883598*G0_0_1_2_0_1_1_0_0 + 1.3883597883598*G0_0_1_2_0_1_2_0_1 - 1.3883597883598*G0_0_1_2_0_1_3_1_0 - 1.3883597883598*G0_0_1_2_0_1_3_1_1 + 1.3883597883598*G0_0_1_2_0_1_4_1_0 + 1.3883597883598*G0_0_1_2_0_1_5_1_1 + 1.3883597883598*G0_0_1_3_1_0_0_0_0 + 1.3883597883598*G0_0_1_3_1_0_0_0_1 - 1.3883597883598*G0_0_1_3_1_0_1_0_0 - 1.3883597883598*G0_0_1_3_1_0_2_0_1 + 1.3883597883598*G0_0_1_3_1_0_3_1_0 + 1.3883597883598*G0_0_1_3_1_0_3_1_1 - 1.3883597883598*G0_0_1_3_1_0_4_1_0 - 1.3883597883598*G0_0_1_3_1_0_5_1_1 + 1.3883597883598*G0_0_1_3_1_1_0_0_0 + 1.3883597883598*G0_0_1_3_1_1_0_0_1 - 1.3883597883598*G0_0_1_3_1_1_1_0_0 - 1.3883597883598*G0_0_1_3_1_1_2_0_1 + 1.3883597883598*G0_0_1_3_1_1_3_1_0 + 1.3883597883598*G0_0_1_3_1_1_3_1_1 - 1.3883597883598*G0_0_1_3_1_1_4_1_0 - 1.3883597883598*G0_0_1_3_1_1_5_1_1 - 1.3883597883598*G0_0_1_4_1_0_0_0_0 - 1.3883597883598*G0_0_1_4_1_0_0_0_1 + 1.3883597883598*G0_0_1_4_1_0_1_0_0 + 1.3883597883598*G0_0_1_4_1_0_2_0_1 - 1.3883597883598*G0_0_1_4_1_0_3_1_0 - 1.3883597883598*G0_0_1_4_1_0_3_1_1 + 1.3883597883598*G0_0_1_4_1_0_4_1_0 + 1.3883597883598*G0_0_1_4_1_0_5_1_1 - 1.3883597883598*G0_0_1_5_1_1_0_0_0 - 1.3883597883598*G0_0_1_5_1_1_0_0_1 + 1.3883597883598*G0_0_1_5_1_1_1_0_0 + 1.3883597883598*G0_0_1_5_1_1_2_0_1 - 1.3883597883598*G0_0_1_5_1_1_3_1_0 - 1.3883597883598*G0_0_1_5_1_1_3_1_1 + 1.3883597883598*G0_0_1_5_1_1_4_1_0 + 1.3883597883598*G0_0_1_5_1_1_5_1_1 + 1.38835978835981*G0_1_0_0_0_0_0_0_0 + 1.38835978835981*G0_1_0_0_0_0_0_0_1 - 1.38835978835981*G0_1_0_0_0_0_1_0_0 - 1.38835978835981*G0_1_0_0_0_0_2_0_1 + 1.38835978835981*G0_1_0_0_0_0_3_1_0 + 1.38835978835981*G0_1_0_0_0_0_3_1_1 - 1.38835978835981*G0_1_0_0_0_0_4_1_0 - 1.38835978835981*G0_1_0_0_0_0_5_1_1 + 1.38835978835981*G0_1_0_0_0_1_0_0_0 + 1.38835978835981*G0_1_0_0_0_1_0_0_1 - 1.38835978835981*G0_1_0_0_0_1_1_0_0 - 1.38835978835981*G0_1_0_0_0_1_2_0_1 + 1.38835978835981*G0_1_0_0_0_1_3_1_0 + 1.38835978835981*G0_1_0_0_0_1_3_1_1 - 1.38835978835981*G0_1_0_0_0_1_4_1_0 - 1.38835978835981*G0_1_0_0_0_1_5_1_1 - 1.38835978835981*G0_1_0_1_0_0_0_0_0 - 1.38835978835981*G0_1_0_1_0_0_0_0_1 + 1.38835978835981*G0_1_0_1_0_0_1_0_0 + 1.38835978835981*G0_1_0_1_0_0_2_0_1 - 1.38835978835981*G0_1_0_1_0_0_3_1_0 - 1.38835978835981*G0_1_0_1_0_0_3_1_1 + 1.38835978835981*G0_1_0_1_0_0_4_1_0 + 1.38835978835981*G0_1_0_1_0_0_5_1_1 - 1.38835978835981*G0_1_0_2_0_1_0_0_0 - 1.38835978835981*G0_1_0_2_0_1_0_0_1 + 1.38835978835981*G0_1_0_2_0_1_1_0_0 + 1.38835978835981*G0_1_0_2_0_1_2_0_1 - 1.38835978835981*G0_1_0_2_0_1_3_1_0 - 1.38835978835981*G0_1_0_2_0_1_3_1_1 + 1.38835978835981*G0_1_0_2_0_1_4_1_0 + 1.38835978835981*G0_1_0_2_0_1_5_1_1 + 1.38835978835981*G0_1_0_3_1_0_0_0_0 + 1.38835978835981*G0_1_0_3_1_0_0_0_1 - 1.38835978835981*G0_1_0_3_1_0_1_0_0 - 1.38835978835981*G0_1_0_3_1_0_2_0_1 + 1.38835978835981*G0_1_0_3_1_0_3_1_0 + 1.38835978835981*G0_1_0_3_1_0_3_1_1 - 1.38835978835981*G0_1_0_3_1_0_4_1_0 - 1.38835978835981*G0_1_0_3_1_0_5_1_1 + 1.38835978835981*G0_1_0_3_1_1_0_0_0 + 1.38835978835981*G0_1_0_3_1_1_0_0_1 - 1.38835978835981*G0_1_0_3_1_1_1_0_0 - 1.38835978835981*G0_1_0_3_1_1_2_0_1 + 1.38835978835981*G0_1_0_3_1_1_3_1_0 + 1.38835978835981*G0_1_0_3_1_1_3_1_1 - 1.38835978835981*G0_1_0_3_1_1_4_1_0 - 1.38835978835981*G0_1_0_3_1_1_5_1_1 - 1.38835978835981*G0_1_0_4_1_0_0_0_0 - 1.38835978835981*G0_1_0_4_1_0_0_0_1 + 1.38835978835981*G0_1_0_4_1_0_1_0_0 + 1.38835978835981*G0_1_0_4_1_0_2_0_1 - 1.38835978835981*G0_1_0_4_1_0_3_1_0 - 1.38835978835981*G0_1_0_4_1_0_3_1_1 + 1.38835978835981*G0_1_0_4_1_0_4_1_0 + 1.38835978835981*G0_1_0_4_1_0_5_1_1 - 1.38835978835981*G0_1_0_5_1_1_0_0_0 - 1.38835978835981*G0_1_0_5_1_1_0_0_1 + 1.38835978835981*G0_1_0_5_1_1_1_0_0 + 1.38835978835981*G0_1_0_5_1_1_2_0_1 - 1.38835978835981*G0_1_0_5_1_1_3_1_0 - 1.38835978835981*G0_1_0_5_1_1_3_1_1 + 1.38835978835981*G0_1_0_5_1_1_4_1_0 + 1.38835978835981*G0_1_0_5_1_1_5_1_1;
    A[76] = 0.0;
    A[801] = A[656];
    A[0] = A[465];
    A[103] = -A[401] - 2.30264550264554*G0_0_0_0_0_0_0_0_0 - 2.30264550264554*G0_0_0_0_0_0_0_0_1 + 2.30264550264554*G0_0_0_0_0_0_1_0_0 + 2.30264550264554*G0_0_0_0_0_0_2_0_1 - 2.30264550264554*G0_0_0_0_0_0_3_1_0 - 2.30264550264554*G0_0_0_0_0_0_3_1_1 + 2.30264550264554*G0_0_0_0_0_0_4_1_0 + 2.30264550264554*G0_0_0_0_0_0_5_1_1 - 2.30264550264554*G0_0_0_0_0_1_0_0_0 - 2.30264550264554*G0_0_0_0_0_1_0_0_1 + 2.30264550264554*G0_0_0_0_0_1_1_0_0 + 2.30264550264554*G0_0_0_0_0_1_2_0_1 - 2.30264550264554*G0_0_0_0_0_1_3_1_0 - 2.30264550264554*G0_0_0_0_0_1_3_1_1 + 2.30264550264554*G0_0_0_0_0_1_4_1_0 + 2.30264550264554*G0_0_0_0_0_1_5_1_1 + 2.30264550264554*G0_0_0_1_0_0_0_0_0 + 2.30264550264554*G0_0_0_1_0_0_0_0_1 - 2.30264550264554*G0_0_0_1_0_0_1_0_0 - 2.30264550264554*G0_0_0_1_0_0_2_0_1 + 2.30264550264554*G0_0_0_1_0_0_3_1_0 + 2.30264550264554*G0_0_0_1_0_0_3_1_1 - 2.30264550264554*G0_0_0_1_0_0_4_1_0 - 2.30264550264554*G0_0_0_1_0_0_5_1_1 + 2.30264550264554*G0_0_0_2_0_1_0_0_0 + 2.30264550264554*G0_0_0_2_0_1_0_0_1 - 2.30264550264554*G0_0_0_2_0_1_1_0_0 - 2.30264550264554*G0_0_0_2_0_1_2_0_1 + 2.30264550264554*G0_0_0_2_0_1_3_1_0 + 2.30264550264554*G0_0_0_2_0_1_3_1_1 - 2.30264550264554*G0_0_0_2_0_1_4_1_0 - 2.30264550264554*G0_0_0_2_0_1_5_1_1 - 2.30264550264554*G0_0_0_3_1_0_0_0_0 - 2.30264550264554*G0_0_0_3_1_0_0_0_1 + 2.30264550264554*G0_0_0_3_1_0_1_0_0 + 2.30264550264554*G0_0_0_3_1_0_2_0_1 - 2.30264550264554*G0_0_0_3_1_0_3_1_0 - 2.30264550264554*G0_0_0_3_1_0_3_1_1 + 2.30264550264554*G0_0_0_3_1_0_4_1_0 + 2.30264550264554*G0_0_0_3_1_0_5_1_1 - 2.30264550264554*G0_0_0_3_1_1_0_0_0 - 2.30264550264554*G0_0_0_3_1_1_0_0_1 + 2.30264550264554*G0_0_0_3_1_1_1_0_0 + 2.30264550264554*G0_0_0_3_1_1_2_0_1 - 2.30264550264554*G0_0_0_3_1_1_3_1_0 - 2.30264550264554*G0_0_0_3_1_1_3_1_1 + 2.30264550264554*G0_0_0_3_1_1_4_1_0 + 2.30264550264554*G0_0_0_3_1_1_5_1_1 + 2.30264550264554*G0_0_0_4_1_0_0_0_0 + 2.30264550264554*G0_0_0_4_1_0_0_0_1 - 2.30264550264554*G0_0_0_4_1_0_1_0_0 - 2.30264550264554*G0_0_0_4_1_0_2_0_1 + 2.30264550264554*G0_0_0_4_1_0_3_1_0 + 2.30264550264554*G0_0_0_4_1_0_3_1_1 - 2.30264550264554*G0_0_0_4_1_0_4_1_0 - 2.30264550264554*G0_0_0_4_1_0_5_1_1 + 2.30264550264554*G0_0_0_5_1_1_0_0_0 + 2.30264550264554*G0_0_0_5_1_1_0_0_1 - 2.30264550264554*G0_0_0_5_1_1_1_0_0 - 2.30264550264554*G0_0_0_5_1_1_2_0_1 + 2.30264550264554*G0_0_0_5_1_1_3_1_0 + 2.30264550264554*G0_0_0_5_1_1_3_1_1 - 2.30264550264554*G0_0_0_5_1_1_4_1_0 - 2.30264550264554*G0_0_0_5_1_1_5_1_1;
    A[834] = -A[656] - 1.04973544973546*G0_0_1_0_0_0_0_0_0 - 1.04973544973546*G0_0_1_0_0_0_0_0_1 + 1.04973544973546*G0_0_1_0_0_0_1_0_0 + 1.04973544973546*G0_0_1_0_0_0_2_0_1 - 1.04973544973546*G0_0_1_0_0_0_3_1_0 - 1.04973544973546*G0_0_1_0_0_0_3_1_1 + 1.04973544973546*G0_0_1_0_0_0_4_1_0 + 1.04973544973546*G0_0_1_0_0_0_5_1_1 - 1.04973544973546*G0_0_1_0_0_1_0_0_0 - 1.04973544973546*G0_0_1_0_0_1_0_0_1 + 1.04973544973546*G0_0_1_0_0_1_1_0_0 + 1.04973544973546*G0_0_1_0_0_1_2_0_1 - 1.04973544973546*G0_0_1_0_0_1_3_1_0 - 1.04973544973546*G0_0_1_0_0_1_3_1_1 + 1.04973544973546*G0_0_1_0_0_1_4_1_0 + 1.04973544973546*G0_0_1_0_0_1_5_1_1 + 1.04973544973546*G0_0_1_1_0_0_0_0_0 + 1.04973544973546*G0_0_1_1_0_0_0_0_1 - 1.04973544973546*G0_0_1_1_0_0_1_0_0 - 1.04973544973546*G0_0_1_1_0_0_2_0_1 + 1.04973544973546*G0_0_1_1_0_0_3_1_0 + 1.04973544973546*G0_0_1_1_0_0_3_1_1 - 1.04973544973546*G0_0_1_1_0_0_4_1_0 - 1.04973544973546*G0_0_1_1_0_0_5_1_1 + 1.04973544973546*G0_0_1_2_0_1_0_0_0 + 1.04973544973546*G0_0_1_2_0_1_0_0_1 - 1.04973544973546*G0_0_1_2_0_1_1_0_0 - 1.04973544973546*G0_0_1_2_0_1_2_0_1 + 1.04973544973546*G0_0_1_2_0_1_3_1_0 + 1.04973544973546*G0_0_1_2_0_1_3_1_1 - 1.04973544973546*G0_0_1_2_0_1_4_1_0 - 1.04973544973546*G0_0_1_2_0_1_5_1_1 - 1.04973544973546*G0_0_1_3_1_0_0_0_0 - 1.04973544973546*G0_0_1_3_1_0_0_0_1 + 1.04973544973546*G0_0_1_3_1_0_1_0_0 + 1.04973544973546*G0_0_1_3_1_0_2_0_1 - 1.04973544973546*G0_0_1_3_1_0_3_1_0 - 1.04973544973546*G0_0_1_3_1_0_3_1_1 + 1.04973544973546*G0_0_1_3_1_0_4_1_0 + 1.04973544973546*G0_0_1_3_1_0_5_1_1 - 1.04973544973546*G0_0_1_3_1_1_0_0_0 - 1.04973544973546*G0_0_1_3_1_1_0_0_1 + 1.04973544973546*G0_0_1_3_1_1_1_0_0 + 1.04973544973546*G0_0_1_3_1_1_2_0_1 - 1.04973544973546*G0_0_1_3_1_1_3_1_0 - 1.04973544973546*G0_0_1_3_1_1_3_1_1 + 1.04973544973546*G0_0_1_3_1_1_4_1_0 + 1.04973544973546*G0_0_1_3_1_1_5_1_1 + 1.04973544973546*G0_0_1_4_1_0_0_0_0 + 1.04973544973546*G0_0_1_4_1_0_0_0_1 - 1.04973544973546*G0_0_1_4_1_0_1_0_0 - 1.04973544973546*G0_0_1_4_1_0_2_0_1 + 1.04973544973546*G0_0_1_4_1_0_3_1_0 + 1.04973544973546*G0_0_1_4_1_0_3_1_1 - 1.04973544973546*G0_0_1_4_1_0_4_1_0 - 1.04973544973546*G0_0_1_4_1_0_5_1_1 + 1.04973544973546*G0_0_1_5_1_1_0_0_0 + 1.04973544973546*G0_0_1_5_1_1_0_0_1 - 1.04973544973546*G0_0_1_5_1_1_1_0_0 - 1.04973544973546*G0_0_1_5_1_1_2_0_1 + 1.04973544973546*G0_0_1_5_1_1_3_1_0 + 1.04973544973546*G0_0_1_5_1_1_3_1_1 - 1.04973544973546*G0_0_1_5_1_1_4_1_0 - 1.04973544973546*G0_0_1_5_1_1_5_1_1 - 1.04973544973548*G0_1_0_0_0_0_0_0_0 - 1.04973544973548*G0_1_0_0_0_0_0_0_1 + 1.04973544973548*G0_1_0_0_0_0_1_0_0 + 1.04973544973548*G0_1_0_0_0_0_2_0_1 - 1.04973544973548*G0_1_0_0_0_0_3_1_0 - 1.04973544973548*G0_1_0_0_0_0_3_1_1 + 1.04973544973548*G0_1_0_0_0_0_4_1_0 + 1.04973544973548*G0_1_0_0_0_0_5_1_1 - 1.04973544973548*G0_1_0_0_0_1_0_0_0 - 1.04973544973548*G0_1_0_0_0_1_0_0_1 + 1.04973544973548*G0_1_0_0_0_1_1_0_0 + 1.04973544973548*G0_1_0_0_0_1_2_0_1 - 1.04973544973548*G0_1_0_0_0_1_3_1_0 - 1.04973544973548*G0_1_0_0_0_1_3_1_1 + 1.04973544973548*G0_1_0_0_0_1_4_1_0 + 1.04973544973548*G0_1_0_0_0_1_5_1_1 + 1.04973544973548*G0_1_0_1_0_0_0_0_0 + 1.04973544973548*G0_1_0_1_0_0_0_0_1 - 1.04973544973548*G0_1_0_1_0_0_1_0_0 - 1.04973544973548*G0_1_0_1_0_0_2_0_1 + 1.04973544973548*G0_1_0_1_0_0_3_1_0 + 1.04973544973548*G0_1_0_1_0_0_3_1_1 - 1.04973544973548*G0_1_0_1_0_0_4_1_0 - 1.04973544973548*G0_1_0_1_0_0_5_1_1 + 1.04973544973548*G0_1_0_2_0_1_0_0_0 + 1.04973544973548*G0_1_0_2_0_1_0_0_1 - 1.04973544973548*G0_1_0_2_0_1_1_0_0 - 1.04973544973548*G0_1_0_2_0_1_2_0_1 + 1.04973544973548*G0_1_0_2_0_1_3_1_0 + 1.04973544973548*G0_1_0_2_0_1_3_1_1 - 1.04973544973548*G0_1_0_2_0_1_4_1_0 - 1.04973544973548*G0_1_0_2_0_1_5_1_1 - 1.04973544973548*G0_1_0_3_1_0_0_0_0 - 1.04973544973548*G0_1_0_3_1_0_0_0_1 + 1.04973544973548*G0_1_0_3_1_0_1_0_0 + 1.04973544973548*G0_1_0_3_1_0_2_0_1 - 1.04973544973548*G0_1_0_3_1_0_3_1_0 - 1.04973544973548*G0_1_0_3_1_0_3_1_1 + 1.04973544973548*G0_1_0_3_1_0_4_1_0 + 1.04973544973548*G0_1_0_3_1_0_5_1_1 - 1.04973544973548*G0_1_0_3_1_1_0_0_0 - 1.04973544973548*G0_1_0_3_1_1_0_0_1 + 1.04973544973548*G0_1_0_3_1_1_1_0_0 + 1.04973544973548*G0_1_0_3_1_1_2_0_1 - 1.04973544973548*G0_1_0_3_1_1_3_1_0 - 1.04973544973548*G0_1_0_3_1_1_3_1_1 + 1.04973544973548*G0_1_0_3_1_1_4_1_0 + 1.04973544973548*G0_1_0_3_1_1_5_1_1 + 1.04973544973548*G0_1_0_4_1_0_0_0_0 + 1.04973544973548*G0_1_0_4_1_0_0_0_1 - 1.04973544973548*G0_1_0_4_1_0_1_0_0 - 1.04973544973548*G0_1_0_4_1_0_2_0_1 + 1.04973544973548*G0_1_0_4_1_0_3_1_0 + 1.04973544973548*G0_1_0_4_1_0_3_1_1 - 1.04973544973548*G0_1_0_4_1_0_4_1_0 - 1.04973544973548*G0_1_0_4_1_0_5_1_1 + 1.04973544973548*G0_1_0_5_1_1_0_0_0 + 1.04973544973548*G0_1_0_5_1_1_0_0_1 - 1.04973544973548*G0_1_0_5_1_1_1_0_0 - 1.04973544973548*G0_1_0_5_1_1_2_0_1 + 1.04973544973548*G0_1_0_5_1_1_3_1_0 + 1.04973544973548*G0_1_0_5_1_1_3_1_1 - 1.04973544973548*G0_1_0_5_1_1_4_1_0 - 1.04973544973548*G0_1_0_5_1_1_5_1_1 - 2.43809523809528*G0_1_1_0_0_0_0_0_0 - 2.43809523809528*G0_1_1_0_0_0_0_0_1 + 2.43809523809528*G0_1_1_0_0_0_1_0_0 + 2.43809523809528*G0_1_1_0_0_0_2_0_1 - 2.43809523809528*G0_1_1_0_0_0_3_1_0 - 2.43809523809528*G0_1_1_0_0_0_3_1_1 + 2.43809523809528*G0_1_1_0_0_0_4_1_0 + 2.43809523809528*G0_1_1_0_0_0_5_1_1 - 2.43809523809528*G0_1_1_0_0_1_0_0_0 - 2.43809523809528*G0_1_1_0_0_1_0_0_1 + 2.43809523809528*G0_1_1_0_0_1_1_0_0 + 2.43809523809528*G0_1_1_0_0_1_2_0_1 - 2.43809523809528*G0_1_1_0_0_1_3_1_0 - 2.43809523809528*G0_1_1_0_0_1_3_1_1 + 2.43809523809528*G0_1_1_0_0_1_4_1_0 + 2.43809523809528*G0_1_1_0_0_1_5_1_1 + 2.43809523809528*G0_1_1_1_0_0_0_0_0 + 2.43809523809528*G0_1_1_1_0_0_0_0_1 - 2.43809523809528*G0_1_1_1_0_0_1_0_0 - 2.43809523809528*G0_1_1_1_0_0_2_0_1 + 2.43809523809528*G0_1_1_1_0_0_3_1_0 + 2.43809523809528*G0_1_1_1_0_0_3_1_1 - 2.43809523809528*G0_1_1_1_0_0_4_1_0 - 2.43809523809528*G0_1_1_1_0_0_5_1_1 + 2.43809523809528*G0_1_1_2_0_1_0_0_0 + 2.43809523809528*G0_1_1_2_0_1_0_0_1 - 2.43809523809528*G0_1_1_2_0_1_1_0_0 - 2.43809523809528*G0_1_1_2_0_1_2_0_1 + 2.43809523809528*G0_1_1_2_0_1_3_1_0 + 2.43809523809528*G0_1_1_2_0_1_3_1_1 - 2.43809523809528*G0_1_1_2_0_1_4_1_0 - 2.43809523809528*G0_1_1_2_0_1_5_1_1 - 2.43809523809528*G0_1_1_3_1_0_0_0_0 - 2.43809523809528*G0_1_1_3_1_0_0_0_1 + 2.43809523809528*G0_1_1_3_1_0_1_0_0 + 2.43809523809528*G0_1_1_3_1_0_2_0_1 - 2.43809523809528*G0_1_1_3_1_0_3_1_0 - 2.43809523809528*G0_1_1_3_1_0_3_1_1 + 2.43809523809528*G0_1_1_3_1_0_4_1_0 + 2.43809523809528*G0_1_1_3_1_0_5_1_1 - 2.43809523809528*G0_1_1_3_1_1_0_0_0 - 2.43809523809528*G0_1_1_3_1_1_0_0_1 + 2.43809523809528*G0_1_1_3_1_1_1_0_0 + 2.43809523809528*G0_1_1_3_1_1_2_0_1 - 2.43809523809528*G0_1_1_3_1_1_3_1_0 - 2.43809523809528*G0_1_1_3_1_1_3_1_1 + 2.43809523809528*G0_1_1_3_1_1_4_1_0 + 2.43809523809528*G0_1_1_3_1_1_5_1_1 + 2.43809523809528*G0_1_1_4_1_0_0_0_0 + 2.43809523809528*G0_1_1_4_1_0_0_0_1 - 2.43809523809528*G0_1_1_4_1_0_1_0_0 - 2.43809523809528*G0_1_1_4_1_0_2_0_1 + 2.43809523809528*G0_1_1_4_1_0_3_1_0 + 2.43809523809528*G0_1_1_4_1_0_3_1_1 - 2.43809523809528*G0_1_1_4_1_0_4_1_0 - 2.43809523809528*G0_1_1_4_1_0_5_1_1 + 2.43809523809528*G0_1_1_5_1_1_0_0_0 + 2.43809523809528*G0_1_1_5_1_1_0_0_1 - 2.43809523809528*G0_1_1_5_1_1_1_0_0 - 2.43809523809528*G0_1_1_5_1_1_2_0_1 + 2.43809523809528*G0_1_1_5_1_1_3_1_0 + 2.43809523809528*G0_1_1_5_1_1_3_1_1 - 2.43809523809528*G0_1_1_5_1_1_4_1_0 - 2.43809523809528*G0_1_1_5_1_1_5_1_1;
    A[43] = A[421];
    A[843] = 0.0;
    A[70] = A[534];
    A[165] = 0.0;
    A[872] = 0.0;
    A[109] = 0.0;
    A[192] = A[834] - 2.57354497354501*G0_0_0_0_0_0_0_0_0 - 2.57354497354501*G0_0_0_0_0_0_0_0_1 + 2.57354497354501*G0_0_0_0_0_0_1_0_0 + 2.57354497354501*G0_0_0_0_0_0_2_0_1 - 2.57354497354501*G0_0_0_0_0_0_3_1_0 - 2.57354497354501*G0_0_0_0_0_0_3_1_1 + 2.57354497354501*G0_0_0_0_0_0_4_1_0 + 2.57354497354501*G0_0_0_0_0_0_5_1_1 - 2.57354497354501*G0_0_0_0_0_1_0_0_0 - 2.57354497354501*G0_0_0_0_0_1_0_0_1 + 2.57354497354501*G0_0_0_0_0_1_1_0_0 + 2.57354497354501*G0_0_0_0_0_1_2_0_1 - 2.57354497354501*G0_0_0_0_0_1_3_1_0 - 2.57354497354501*G0_0_0_0_0_1_3_1_1 + 2.57354497354501*G0_0_0_0_0_1_4_1_0 + 2.57354497354501*G0_0_0_0_0_1_5_1_1 + 2.57354497354501*G0_0_0_1_0_0_0_0_0 + 2.57354497354501*G0_0_0_1_0_0_0_0_1 - 2.57354497354501*G0_0_0_1_0_0_1_0_0 - 2.57354497354501*G0_0_0_1_0_0_2_0_1 + 2.57354497354501*G0_0_0_1_0_0_3_1_0 + 2.57354497354501*G0_0_0_1_0_0_3_1_1 - 2.57354497354501*G0_0_0_1_0_0_4_1_0 - 2.57354497354501*G0_0_0_1_0_0_5_1_1 + 2.57354497354501*G0_0_0_2_0_1_0_0_0 + 2.57354497354501*G0_0_0_2_0_1_0_0_1 - 2.57354497354501*G0_0_0_2_0_1_1_0_0 - 2.57354497354501*G0_0_0_2_0_1_2_0_1 + 2.57354497354501*G0_0_0_2_0_1_3_1_0 + 2.57354497354501*G0_0_0_2_0_1_3_1_1 - 2.57354497354501*G0_0_0_2_0_1_4_1_0 - 2.57354497354501*G0_0_0_2_0_1_5_1_1 - 2.57354497354501*G0_0_0_3_1_0_0_0_0 - 2.57354497354501*G0_0_0_3_1_0_0_0_1 + 2.57354497354501*G0_0_0_3_1_0_1_0_0 + 2.57354497354501*G0_0_0_3_1_0_2_0_1 - 2.57354497354501*G0_0_0_3_1_0_3_1_0 - 2.57354497354501*G0_0_0_3_1_0_3_1_1 + 2.57354497354501*G0_0_0_3_1_0_4_1_0 + 2.57354497354501*G0_0_0_3_1_0_5_1_1 - 2.57354497354501*G0_0_0_3_1_1_0_0_0 - 2.57354497354501*G0_0_0_3_1_1_0_0_1 + 2.57354497354501*G0_0_0_3_1_1_1_0_0 + 2.57354497354501*G0_0_0_3_1_1_2_0_1 - 2.57354497354501*G0_0_0_3_1_1_3_1_0 - 2.57354497354501*G0_0_0_3_1_1_3_1_1 + 2.57354497354501*G0_0_0_3_1_1_4_1_0 + 2.57354497354501*G0_0_0_3_1_1_5_1_1 + 2.57354497354501*G0_0_0_4_1_0_0_0_0 + 2.57354497354501*G0_0_0_4_1_0_0_0_1 - 2.57354497354501*G0_0_0_4_1_0_1_0_0 - 2.57354497354501*G0_0_0_4_1_0_2_0_1 + 2.57354497354501*G0_0_0_4_1_0_3_1_0 + 2.57354497354501*G0_0_0_4_1_0_3_1_1 - 2.57354497354501*G0_0_0_4_1_0_4_1_0 - 2.57354497354501*G0_0_0_4_1_0_5_1_1 + 2.57354497354501*G0_0_0_5_1_1_0_0_0 + 2.57354497354501*G0_0_0_5_1_1_0_0_1 - 2.57354497354501*G0_0_0_5_1_1_1_0_0 - 2.57354497354501*G0_0_0_5_1_1_2_0_1 + 2.57354497354501*G0_0_0_5_1_1_3_1_0 + 2.57354497354501*G0_0_0_5_1_1_3_1_1 - 2.57354497354501*G0_0_0_5_1_1_4_1_0 - 2.57354497354501*G0_0_0_5_1_1_5_1_1 + 2.57354497354501*G0_1_1_0_0_0_0_0_0 + 2.57354497354501*G0_1_1_0_0_0_0_0_1 - 2.57354497354501*G0_1_1_0_0_0_1_0_0 - 2.57354497354501*G0_1_1_0_0_0_2_0_1 + 2.57354497354501*G0_1_1_0_0_0_3_1_0 + 2.57354497354501*G0_1_1_0_0_0_3_1_1 - 2.57354497354501*G0_1_1_0_0_0_4_1_0 - 2.57354497354501*G0_1_1_0_0_0_5_1_1 + 2.57354497354501*G0_1_1_0_0_1_0_0_0 + 2.57354497354501*G0_1_1_0_0_1_0_0_1 - 2.57354497354501*G0_1_1_0_0_1_1_0_0 - 2.57354497354501*G0_1_1_0_0_1_2_0_1 + 2.57354497354501*G0_1_1_0_0_1_3_1_0 + 2.57354497354501*G0_1_1_0_0_1_3_1_1 - 2.57354497354501*G0_1_1_0_0_1_4_1_0 - 2.57354497354501*G0_1_1_0_0_1_5_1_1 - 2.57354497354501*G0_1_1_1_0_0_0_0_0 - 2.57354497354501*G0_1_1_1_0_0_0_0_1 + 2.57354497354501*G0_1_1_1_0_0_1_0_0 + 2.57354497354501*G0_1_1_1_0_0_2_0_1 - 2.57354497354501*G0_1_1_1_0_0_3_1_0 - 2.57354497354501*G0_1_1_1_0_0_3_1_1 + 2.57354497354501*G0_1_1_1_0_0_4_1_0 + 2.57354497354501*G0_1_1_1_0_0_5_1_1 - 2.57354497354501*G0_1_1_2_0_1_0_0_0 - 2.57354497354501*G0_1_1_2_0_1_0_0_1 + 2.57354497354501*G0_1_1_2_0_1_1_0_0 + 2.57354497354501*G0_1_1_2_0_1_2_0_1 - 2.57354497354501*G0_1_1_2_0_1_3_1_0 - 2.57354497354501*G0_1_1_2_0_1_3_1_1 + 2.57354497354501*G0_1_1_2_0_1_4_1_0 + 2.57354497354501*G0_1_1_2_0_1_5_1_1 + 2.57354497354501*G0_1_1_3_1_0_0_0_0 + 2.57354497354501*G0_1_1_3_1_0_0_0_1 - 2.57354497354501*G0_1_1_3_1_0_1_0_0 - 2.57354497354501*G0_1_1_3_1_0_2_0_1 + 2.57354497354501*G0_1_1_3_1_0_3_1_0 + 2.57354497354501*G0_1_1_3_1_0_3_1_1 - 2.57354497354501*G0_1_1_3_1_0_4_1_0 - 2.57354497354501*G0_1_1_3_1_0_5_1_1 + 2.57354497354501*G0_1_1_3_1_1_0_0_0 + 2.57354497354501*G0_1_1_3_1_1_0_0_1 - 2.57354497354501*G0_1_1_3_1_1_1_0_0 - 2.57354497354501*G0_1_1_3_1_1_2_0_1 + 2.57354497354501*G0_1_1_3_1_1_3_1_0 + 2.57354497354501*G0_1_1_3_1_1_3_1_1 - 2.57354497354501*G0_1_1_3_1_1_4_1_0 - 2.57354497354501*G0_1_1_3_1_1_5_1_1 - 2.57354497354501*G0_1_1_4_1_0_0_0_0 - 2.57354497354501*G0_1_1_4_1_0_0_0_1 + 2.57354497354501*G0_1_1_4_1_0_1_0_0 + 2.57354497354501*G0_1_1_4_1_0_2_0_1 - 2.57354497354501*G0_1_1_4_1_0_3_1_0 - 2.57354497354501*G0_1_1_4_1_0_3_1_1 + 2.57354497354501*G0_1_1_4_1_0_4_1_0 + 2.57354497354501*G0_1_1_4_1_0_5_1_1 - 2.57354497354501*G0_1_1_5_1_1_0_0_0 - 2.57354497354501*G0_1_1_5_1_1_0_0_1 + 2.57354497354501*G0_1_1_5_1_1_1_0_0 + 2.57354497354501*G0_1_1_5_1_1_2_0_1 - 2.57354497354501*G0_1_1_5_1_1_3_1_0 - 2.57354497354501*G0_1_1_5_1_1_3_1_1 + 2.57354497354501*G0_1_1_5_1_1_4_1_0 + 2.57354497354501*G0_1_1_5_1_1_5_1_1;
    A[140] = 0.0;
    A[514] = 0.0;
    A[623] = A[245];
    A[543] = 0.0;
    A[665] = 0.0;
    A[569] = -A[252] + 0.812698412698417*G0_0_0_0_0_0_0_0_0 + 0.812698412698417*G0_0_0_0_0_0_0_0_1 - 0.812698412698417*G0_0_0_0_0_0_1_0_0 - 0.812698412698417*G0_0_0_0_0_0_2_0_1 + 0.812698412698417*G0_0_0_0_0_0_3_1_0 + 0.812698412698417*G0_0_0_0_0_0_3_1_1 - 0.812698412698417*G0_0_0_0_0_0_4_1_0 - 0.812698412698417*G0_0_0_0_0_0_5_1_1 + 0.812698412698417*G0_0_0_0_0_1_0_0_0 + 0.812698412698417*G0_0_0_0_0_1_0_0_1 - 0.812698412698417*G0_0_0_0_0_1_1_0_0 - 0.812698412698417*G0_0_0_0_0_1_2_0_1 + 0.812698412698417*G0_0_0_0_0_1_3_1_0 + 0.812698412698417*G0_0_0_0_0_1_3_1_1 - 0.812698412698417*G0_0_0_0_0_1_4_1_0 - 0.812698412698417*G0_0_0_0_0_1_5_1_1 - 0.812698412698417*G0_0_0_1_0_0_0_0_0 - 0.812698412698417*G0_0_0_1_0_0_0_0_1 + 0.812698412698417*G0_0_0_1_0_0_1_0_0 + 0.812698412698417*G0_0_0_1_0_0_2_0_1 - 0.812698412698417*G0_0_0_1_0_0_3_1_0 - 0.812698412698417*G0_0_0_1_0_0_3_1_1 + 0.812698412698417*G0_0_0_1_0_0_4_1_0 + 0.812698412698417*G0_0_0_1_0_0_5_1_1 - 0.812698412698417*G0_0_0_2_0_1_0_0_0 - 0.812698412698417*G0_0_0_2_0_1_0_0_1 + 0.812698412698417*G0_0_0_2_0_1_1_0_0 + 0.812698412698417*G0_0_0_2_0_1_2_0_1 - 0.812698412698417*G0_0_0_2_0_1_3_1_0 - 0.812698412698417*G0_0_0_2_0_1_3_1_1 + 0.812698412698417*G0_0_0_2_0_1_4_1_0 + 0.812698412698417*G0_0_0_2_0_1_5_1_1 + 0.812698412698417*G0_0_0_3_1_0_0_0_0 + 0.812698412698417*G0_0_0_3_1_0_0_0_1 - 0.812698412698417*G0_0_0_3_1_0_1_0_0 - 0.812698412698417*G0_0_0_3_1_0_2_0_1 + 0.812698412698417*G0_0_0_3_1_0_3_1_0 + 0.812698412698417*G0_0_0_3_1_0_3_1_1 - 0.812698412698417*G0_0_0_3_1_0_4_1_0 - 0.812698412698417*G0_0_0_3_1_0_5_1_1 + 0.812698412698417*G0_0_0_3_1_1_0_0_0 + 0.812698412698417*G0_0_0_3_1_1_0_0_1 - 0.812698412698417*G0_0_0_3_1_1_1_0_0 - 0.812698412698417*G0_0_0_3_1_1_2_0_1 + 0.812698412698417*G0_0_0_3_1_1_3_1_0 + 0.812698412698417*G0_0_0_3_1_1_3_1_1 - 0.812698412698417*G0_0_0_3_1_1_4_1_0 - 0.812698412698417*G0_0_0_3_1_1_5_1_1 - 0.812698412698417*G0_0_0_4_1_0_0_0_0 - 0.812698412698417*G0_0_0_4_1_0_0_0_1 + 0.812698412698417*G0_0_0_4_1_0_1_0_0 + 0.812698412698417*G0_0_0_4_1_0_2_0_1 - 0.812698412698417*G0_0_0_4_1_0_3_1_0 - 0.812698412698417*G0_0_0_4_1_0_3_1_1 + 0.812698412698417*G0_0_0_4_1_0_4_1_0 + 0.812698412698417*G0_0_0_4_1_0_5_1_1 - 0.812698412698417*G0_0_0_5_1_1_0_0_0 - 0.812698412698417*G0_0_0_5_1_1_0_0_1 + 0.812698412698417*G0_0_0_5_1_1_1_0_0 + 0.812698412698417*G0_0_0_5_1_1_2_0_1 - 0.812698412698417*G0_0_0_5_1_1_3_1_0 - 0.812698412698417*G0_0_0_5_1_1_3_1_1 + 0.812698412698417*G0_0_0_5_1_1_4_1_0 + 0.812698412698417*G0_0_0_5_1_1_5_1_1 + 0.13544973544974*G0_1_1_0_0_0_0_0_0 + 0.13544973544974*G0_1_1_0_0_0_0_0_1 - 0.13544973544974*G0_1_1_0_0_0_1_0_0 - 0.13544973544974*G0_1_1_0_0_0_2_0_1 + 0.13544973544974*G0_1_1_0_0_0_3_1_0 + 0.13544973544974*G0_1_1_0_0_0_3_1_1 - 0.13544973544974*G0_1_1_0_0_0_4_1_0 - 0.13544973544974*G0_1_1_0_0_0_5_1_1 + 0.13544973544974*G0_1_1_0_0_1_0_0_0 + 0.13544973544974*G0_1_1_0_0_1_0_0_1 - 0.13544973544974*G0_1_1_0_0_1_1_0_0 - 0.13544973544974*G0_1_1_0_0_1_2_0_1 + 0.13544973544974*G0_1_1_0_0_1_3_1_0 + 0.13544973544974*G0_1_1_0_0_1_3_1_1 - 0.13544973544974*G0_1_1_0_0_1_4_1_0 - 0.13544973544974*G0_1_1_0_0_1_5_1_1 - 0.13544973544974*G0_1_1_1_0_0_0_0_0 - 0.13544973544974*G0_1_1_1_0_0_0_0_1 + 0.13544973544974*G0_1_1_1_0_0_1_0_0 + 0.13544973544974*G0_1_1_1_0_0_2_0_1 - 0.13544973544974*G0_1_1_1_0_0_3_1_0 - 0.13544973544974*G0_1_1_1_0_0_3_1_1 + 0.13544973544974*G0_1_1_1_0_0_4_1_0 + 0.13544973544974*G0_1_1_1_0_0_5_1_1 - 0.13544973544974*G0_1_1_2_0_1_0_0_0 - 0.13544973544974*G0_1_1_2_0_1_0_0_1 + 0.13544973544974*G0_1_1_2_0_1_1_0_0 + 0.13544973544974*G0_1_1_2_0_1_2_0_1 - 0.13544973544974*G0_1_1_2_0_1_3_1_0 - 0.13544973544974*G0_1_1_2_0_1_3_1_1 + 0.13544973544974*G0_1_1_2_0_1_4_1_0 + 0.13544973544974*G0_1_1_2_0_1_5_1_1 + 0.13544973544974*G0_1_1_3_1_0_0_0_0 + 0.13544973544974*G0_1_1_3_1_0_0_0_1 - 0.13544973544974*G0_1_1_3_1_0_1_0_0 - 0.13544973544974*G0_1_1_3_1_0_2_0_1 + 0.13544973544974*G0_1_1_3_1_0_3_1_0 + 0.13544973544974*G0_1_1_3_1_0_3_1_1 - 0.13544973544974*G0_1_1_3_1_0_4_1_0 - 0.13544973544974*G0_1_1_3_1_0_5_1_1 + 0.13544973544974*G0_1_1_3_1_1_0_0_0 + 0.13544973544974*G0_1_1_3_1_1_0_0_1 - 0.13544973544974*G0_1_1_3_1_1_1_0_0 - 0.13544973544974*G0_1_1_3_1_1_2_0_1 + 0.13544973544974*G0_1_1_3_1_1_3_1_0 + 0.13544973544974*G0_1_1_3_1_1_3_1_1 - 0.13544973544974*G0_1_1_3_1_1_4_1_0 - 0.13544973544974*G0_1_1_3_1_1_5_1_1 - 0.13544973544974*G0_1_1_4_1_0_0_0_0 - 0.13544973544974*G0_1_1_4_1_0_0_0_1 + 0.13544973544974*G0_1_1_4_1_0_1_0_0 + 0.13544973544974*G0_1_1_4_1_0_2_0_1 - 0.13544973544974*G0_1_1_4_1_0_3_1_0 - 0.13544973544974*G0_1_1_4_1_0_3_1_1 + 0.13544973544974*G0_1_1_4_1_0_4_1_0 + 0.13544973544974*G0_1_1_4_1_0_5_1_1 - 0.13544973544974*G0_1_1_5_1_1_0_0_0 - 0.13544973544974*G0_1_1_5_1_1_0_0_1 + 0.13544973544974*G0_1_1_5_1_1_1_0_0 + 0.13544973544974*G0_1_1_5_1_1_2_0_1 - 0.13544973544974*G0_1_1_5_1_1_3_1_0 - 0.13544973544974*G0_1_1_5_1_1_3_1_1 + 0.13544973544974*G0_1_1_5_1_1_4_1_0 + 0.13544973544974*G0_1_1_5_1_1_5_1_1;
    A[690] = 0.0;
    A[267] = 0.0;
    A[336] = A[656];
    A[296] = 0.0;
    A[437] = 0.0;
    A[361] = A[421];
    A[317] = 0.0;
    A[470] = A[5];
    A[358] = 0.0;
    A[808] = A[401];
    A[7] = A[5] + 0.425396825396828*G0_0_1_0_0_0_0_0_0 + 0.425396825396828*G0_0_1_0_0_0_0_0_1 - 0.425396825396828*G0_0_1_0_0_0_1_0_0 - 0.425396825396828*G0_0_1_0_0_0_2_0_1 + 0.425396825396828*G0_0_1_0_0_0_3_1_0 + 0.425396825396828*G0_0_1_0_0_0_3_1_1 - 0.425396825396828*G0_0_1_0_0_0_4_1_0 - 0.425396825396828*G0_0_1_0_0_0_5_1_1 + 0.425396825396828*G0_0_1_0_0_1_0_0_0 + 0.425396825396828*G0_0_1_0_0_1_0_0_1 - 0.425396825396828*G0_0_1_0_0_1_1_0_0 - 0.425396825396828*G0_0_1_0_0_1_2_0_1 + 0.425396825396828*G0_0_1_0_0_1_3_1_0 + 0.425396825396828*G0_0_1_0_0_1_3_1_1 - 0.425396825396828*G0_0_1_0_0_1_4_1_0 - 0.425396825396828*G0_0_1_0_0_1_5_1_1 - 0.425396825396828*G0_0_1_1_0_0_0_0_0 - 0.425396825396828*G0_0_1_1_0_0_0_0_1 + 0.425396825396828*G0_0_1_1_0_0_1_0_0 + 0.425396825396828*G0_0_1_1_0_0_2_0_1 - 0.425396825396828*G0_0_1_1_0_0_3_1_0 - 0.425396825396828*G0_0_1_1_0_0_3_1_1 + 0.425396825396828*G0_0_1_1_0_0_4_1_0 + 0.425396825396828*G0_0_1_1_0_0_5_1_1 - 0.425396825396828*G0_0_1_2_0_1_0_0_0 - 0.425396825396828*G0_0_1_2_0_1_0_0_1 + 0.425396825396828*G0_0_1_2_0_1_1_0_0 + 0.425396825396828*G0_0_1_2_0_1_2_0_1 - 0.425396825396828*G0_0_1_2_0_1_3_1_0 - 0.425396825396828*G0_0_1_2_0_1_3_1_1 + 0.425396825396828*G0_0_1_2_0_1_4_1_0 + 0.425396825396828*G0_0_1_2_0_1_5_1_1 + 0.425396825396828*G0_0_1_3_1_0_0_0_0 + 0.425396825396828*G0_0_1_3_1_0_0_0_1 - 0.425396825396828*G0_0_1_3_1_0_1_0_0 - 0.425396825396828*G0_0_1_3_1_0_2_0_1 + 0.425396825396828*G0_0_1_3_1_0_3_1_0 + 0.425396825396828*G0_0_1_3_1_0_3_1_1 - 0.425396825396828*G0_0_1_3_1_0_4_1_0 - 0.425396825396828*G0_0_1_3_1_0_5_1_1 + 0.425396825396828*G0_0_1_3_1_1_0_0_0 + 0.425396825396828*G0_0_1_3_1_1_0_0_1 - 0.425396825396828*G0_0_1_3_1_1_1_0_0 - 0.425396825396828*G0_0_1_3_1_1_2_0_1 + 0.425396825396828*G0_0_1_3_1_1_3_1_0 + 0.425396825396828*G0_0_1_3_1_1_3_1_1 - 0.425396825396828*G0_0_1_3_1_1_4_1_0 - 0.425396825396828*G0_0_1_3_1_1_5_1_1 - 0.425396825396828*G0_0_1_4_1_0_0_0_0 - 0.425396825396828*G0_0_1_4_1_0_0_0_1 + 0.425396825396828*G0_0_1_4_1_0_1_0_0 + 0.425396825396828*G0_0_1_4_1_0_2_0_1 - 0.425396825396828*G0_0_1_4_1_0_3_1_0 - 0.425396825396828*G0_0_1_4_1_0_3_1_1 + 0.425396825396828*G0_0_1_4_1_0_4_1_0 + 0.425396825396828*G0_0_1_4_1_0_5_1_1 - 0.425396825396828*G0_0_1_5_1_1_0_0_0 - 0.425396825396828*G0_0_1_5_1_1_0_0_1 + 0.425396825396828*G0_0_1_5_1_1_1_0_0 + 0.425396825396828*G0_0_1_5_1_1_2_0_1 - 0.425396825396828*G0_0_1_5_1_1_3_1_0 - 0.425396825396828*G0_0_1_5_1_1_3_1_1 + 0.425396825396828*G0_0_1_5_1_1_4_1_0 + 0.425396825396828*G0_0_1_5_1_1_5_1_1 + 0.425396825396829*G0_1_1_0_0_0_0_0_0 + 0.425396825396829*G0_1_1_0_0_0_0_0_1 - 0.425396825396829*G0_1_1_0_0_0_1_0_0 - 0.425396825396829*G0_1_1_0_0_0_2_0_1 + 0.425396825396829*G0_1_1_0_0_0_3_1_0 + 0.425396825396829*G0_1_1_0_0_0_3_1_1 - 0.425396825396829*G0_1_1_0_0_0_4_1_0 - 0.425396825396829*G0_1_1_0_0_0_5_1_1 + 0.425396825396829*G0_1_1_0_0_1_0_0_0 + 0.425396825396829*G0_1_1_0_0_1_0_0_1 - 0.425396825396829*G0_1_1_0_0_1_1_0_0 - 0.425396825396829*G0_1_1_0_0_1_2_0_1 + 0.425396825396829*G0_1_1_0_0_1_3_1_0 + 0.425396825396829*G0_1_1_0_0_1_3_1_1 - 0.425396825396829*G0_1_1_0_0_1_4_1_0 - 0.425396825396829*G0_1_1_0_0_1_5_1_1 - 0.425396825396829*G0_1_1_1_0_0_0_0_0 - 0.425396825396829*G0_1_1_1_0_0_0_0_1 + 0.425396825396829*G0_1_1_1_0_0_1_0_0 + 0.425396825396829*G0_1_1_1_0_0_2_0_1 - 0.425396825396829*G0_1_1_1_0_0_3_1_0 - 0.425396825396829*G0_1_1_1_0_0_3_1_1 + 0.425396825396829*G0_1_1_1_0_0_4_1_0 + 0.425396825396829*G0_1_1_1_0_0_5_1_1 - 0.425396825396829*G0_1_1_2_0_1_0_0_0 - 0.425396825396829*G0_1_1_2_0_1_0_0_1 + 0.425396825396829*G0_1_1_2_0_1_1_0_0 + 0.425396825396829*G0_1_1_2_0_1_2_0_1 - 0.425396825396829*G0_1_1_2_0_1_3_1_0 - 0.425396825396829*G0_1_1_2_0_1_3_1_1 + 0.425396825396829*G0_1_1_2_0_1_4_1_0 + 0.425396825396829*G0_1_1_2_0_1_5_1_1 + 0.425396825396829*G0_1_1_3_1_0_0_0_0 + 0.425396825396829*G0_1_1_3_1_0_0_0_1 - 0.425396825396829*G0_1_1_3_1_0_1_0_0 - 0.425396825396829*G0_1_1_3_1_0_2_0_1 + 0.425396825396829*G0_1_1_3_1_0_3_1_0 + 0.425396825396829*G0_1_1_3_1_0_3_1_1 - 0.425396825396829*G0_1_1_3_1_0_4_1_0 - 0.425396825396829*G0_1_1_3_1_0_5_1_1 + 0.425396825396829*G0_1_1_3_1_1_0_0_0 + 0.425396825396829*G0_1_1_3_1_1_0_0_1 - 0.425396825396829*G0_1_1_3_1_1_1_0_0 - 0.425396825396829*G0_1_1_3_1_1_2_0_1 + 0.425396825396829*G0_1_1_3_1_1_3_1_0 + 0.425396825396829*G0_1_1_3_1_1_3_1_1 - 0.425396825396829*G0_1_1_3_1_1_4_1_0 - 0.425396825396829*G0_1_1_3_1_1_5_1_1 - 0.425396825396829*G0_1_1_4_1_0_0_0_0 - 0.425396825396829*G0_1_1_4_1_0_0_0_1 + 0.425396825396829*G0_1_1_4_1_0_1_0_0 + 0.425396825396829*G0_1_1_4_1_0_2_0_1 - 0.425396825396829*G0_1_1_4_1_0_3_1_0 - 0.425396825396829*G0_1_1_4_1_0_3_1_1 + 0.425396825396829*G0_1_1_4_1_0_4_1_0 + 0.425396825396829*G0_1_1_4_1_0_5_1_1 - 0.425396825396829*G0_1_1_5_1_1_0_0_0 - 0.425396825396829*G0_1_1_5_1_1_0_0_1 + 0.425396825396829*G0_1_1_5_1_1_1_0_0 + 0.425396825396829*G0_1_1_5_1_1_2_0_1 - 0.425396825396829*G0_1_1_5_1_1_3_1_0 - 0.425396825396829*G0_1_1_5_1_1_3_1_1 + 0.425396825396829*G0_1_1_5_1_1_4_1_0 + 0.425396825396829*G0_1_1_5_1_1_5_1_1;
    A[724] = 0.0;
    A[827] = A[887];
    A[36] = A[181];
    A[751] = 0.0;
    A[866] = A[401];
    A[65] = A[530];
    A[786] = 0.0;
    A[158] = A[245];
    A[897] = -A[569] - 1.69312169312175*G0_0_1_0_0_0_0_0_0 - 1.69312169312175*G0_0_1_0_0_0_0_0_1 + 1.69312169312175*G0_0_1_0_0_0_1_0_0 + 1.69312169312175*G0_0_1_0_0_0_2_0_1 - 1.69312169312175*G0_0_1_0_0_0_3_1_0 - 1.69312169312175*G0_0_1_0_0_0_3_1_1 + 1.69312169312175*G0_0_1_0_0_0_4_1_0 + 1.69312169312175*G0_0_1_0_0_0_5_1_1 - 1.69312169312175*G0_0_1_0_0_1_0_0_0 - 1.69312169312175*G0_0_1_0_0_1_0_0_1 + 1.69312169312175*G0_0_1_0_0_1_1_0_0 + 1.69312169312175*G0_0_1_0_0_1_2_0_1 - 1.69312169312175*G0_0_1_0_0_1_3_1_0 - 1.69312169312175*G0_0_1_0_0_1_3_1_1 + 1.69312169312175*G0_0_1_0_0_1_4_1_0 + 1.69312169312175*G0_0_1_0_0_1_5_1_1 + 1.69312169312175*G0_0_1_1_0_0_0_0_0 + 1.69312169312175*G0_0_1_1_0_0_0_0_1 - 1.69312169312175*G0_0_1_1_0_0_1_0_0 - 1.69312169312175*G0_0_1_1_0_0_2_0_1 + 1.69312169312175*G0_0_1_1_0_0_3_1_0 + 1.69312169312175*G0_0_1_1_0_0_3_1_1 - 1.69312169312175*G0_0_1_1_0_0_4_1_0 - 1.69312169312175*G0_0_1_1_0_0_5_1_1 + 1.69312169312175*G0_0_1_2_0_1_0_0_0 + 1.69312169312175*G0_0_1_2_0_1_0_0_1 - 1.69312169312175*G0_0_1_2_0_1_1_0_0 - 1.69312169312175*G0_0_1_2_0_1_2_0_1 + 1.69312169312175*G0_0_1_2_0_1_3_1_0 + 1.69312169312175*G0_0_1_2_0_1_3_1_1 - 1.69312169312175*G0_0_1_2_0_1_4_1_0 - 1.69312169312175*G0_0_1_2_0_1_5_1_1 - 1.69312169312175*G0_0_1_3_1_0_0_0_0 - 1.69312169312175*G0_0_1_3_1_0_0_0_1 + 1.69312169312175*G0_0_1_3_1_0_1_0_0 + 1.69312169312175*G0_0_1_3_1_0_2_0_1 - 1.69312169312175*G0_0_1_3_1_0_3_1_0 - 1.69312169312175*G0_0_1_3_1_0_3_1_1 + 1.69312169312175*G0_0_1_3_1_0_4_1_0 + 1.69312169312175*G0_0_1_3_1_0_5_1_1 - 1.69312169312175*G0_0_1_3_1_1_0_0_0 - 1.69312169312175*G0_0_1_3_1_1_0_0_1 + 1.69312169312175*G0_0_1_3_1_1_1_0_0 + 1.69312169312175*G0_0_1_3_1_1_2_0_1 - 1.69312169312175*G0_0_1_3_1_1_3_1_0 - 1.69312169312175*G0_0_1_3_1_1_3_1_1 + 1.69312169312175*G0_0_1_3_1_1_4_1_0 + 1.69312169312175*G0_0_1_3_1_1_5_1_1 + 1.69312169312175*G0_0_1_4_1_0_0_0_0 + 1.69312169312175*G0_0_1_4_1_0_0_0_1 - 1.69312169312175*G0_0_1_4_1_0_1_0_0 - 1.69312169312175*G0_0_1_4_1_0_2_0_1 + 1.69312169312175*G0_0_1_4_1_0_3_1_0 + 1.69312169312175*G0_0_1_4_1_0_3_1_1 - 1.69312169312175*G0_0_1_4_1_0_4_1_0 - 1.69312169312175*G0_0_1_4_1_0_5_1_1 + 1.69312169312175*G0_0_1_5_1_1_0_0_0 + 1.69312169312175*G0_0_1_5_1_1_0_0_1 - 1.69312169312175*G0_0_1_5_1_1_1_0_0 - 1.69312169312175*G0_0_1_5_1_1_2_0_1 + 1.69312169312175*G0_0_1_5_1_1_3_1_0 + 1.69312169312175*G0_0_1_5_1_1_3_1_1 - 1.69312169312175*G0_0_1_5_1_1_4_1_0 - 1.69312169312175*G0_0_1_5_1_1_5_1_1 - 1.69312169312172*G0_1_0_0_0_0_0_0_0 - 1.69312169312172*G0_1_0_0_0_0_0_0_1 + 1.69312169312172*G0_1_0_0_0_0_1_0_0 + 1.69312169312172*G0_1_0_0_0_0_2_0_1 - 1.69312169312172*G0_1_0_0_0_0_3_1_0 - 1.69312169312172*G0_1_0_0_0_0_3_1_1 + 1.69312169312172*G0_1_0_0_0_0_4_1_0 + 1.69312169312172*G0_1_0_0_0_0_5_1_1 - 1.69312169312172*G0_1_0_0_0_1_0_0_0 - 1.69312169312172*G0_1_0_0_0_1_0_0_1 + 1.69312169312172*G0_1_0_0_0_1_1_0_0 + 1.69312169312172*G0_1_0_0_0_1_2_0_1 - 1.69312169312172*G0_1_0_0_0_1_3_1_0 - 1.69312169312172*G0_1_0_0_0_1_3_1_1 + 1.69312169312172*G0_1_0_0_0_1_4_1_0 + 1.69312169312172*G0_1_0_0_0_1_5_1_1 + 1.69312169312172*G0_1_0_1_0_0_0_0_0 + 1.69312169312172*G0_1_0_1_0_0_0_0_1 - 1.69312169312172*G0_1_0_1_0_0_1_0_0 - 1.69312169312172*G0_1_0_1_0_0_2_0_1 + 1.69312169312172*G0_1_0_1_0_0_3_1_0 + 1.69312169312172*G0_1_0_1_0_0_3_1_1 - 1.69312169312172*G0_1_0_1_0_0_4_1_0 - 1.69312169312172*G0_1_0_1_0_0_5_1_1 + 1.69312169312172*G0_1_0_2_0_1_0_0_0 + 1.69312169312172*G0_1_0_2_0_1_0_0_1 - 1.69312169312172*G0_1_0_2_0_1_1_0_0 - 1.69312169312172*G0_1_0_2_0_1_2_0_1 + 1.69312169312172*G0_1_0_2_0_1_3_1_0 + 1.69312169312172*G0_1_0_2_0_1_3_1_1 - 1.69312169312172*G0_1_0_2_0_1_4_1_0 - 1.69312169312172*G0_1_0_2_0_1_5_1_1 - 1.69312169312172*G0_1_0_3_1_0_0_0_0 - 1.69312169312172*G0_1_0_3_1_0_0_0_1 + 1.69312169312172*G0_1_0_3_1_0_1_0_0 + 1.69312169312172*G0_1_0_3_1_0_2_0_1 - 1.69312169312172*G0_1_0_3_1_0_3_1_0 - 1.69312169312172*G0_1_0_3_1_0_3_1_1 + 1.69312169312172*G0_1_0_3_1_0_4_1_0 + 1.69312169312172*G0_1_0_3_1_0_5_1_1 - 1.69312169312172*G0_1_0_3_1_1_0_0_0 - 1.69312169312172*G0_1_0_3_1_1_0_0_1 + 1.69312169312172*G0_1_0_3_1_1_1_0_0 + 1.69312169312172*G0_1_0_3_1_1_2_0_1 - 1.69312169312172*G0_1_0_3_1_1_3_1_0 - 1.69312169312172*G0_1_0_3_1_1_3_1_1 + 1.69312169312172*G0_1_0_3_1_1_4_1_0 + 1.69312169312172*G0_1_0_3_1_1_5_1_1 + 1.69312169312172*G0_1_0_4_1_0_0_0_0 + 1.69312169312172*G0_1_0_4_1_0_0_0_1 - 1.69312169312172*G0_1_0_4_1_0_1_0_0 - 1.69312169312172*G0_1_0_4_1_0_2_0_1 + 1.69312169312172*G0_1_0_4_1_0_3_1_0 + 1.69312169312172*G0_1_0_4_1_0_3_1_1 - 1.69312169312172*G0_1_0_4_1_0_4_1_0 - 1.69312169312172*G0_1_0_4_1_0_5_1_1 + 1.69312169312172*G0_1_0_5_1_1_0_0_0 + 1.69312169312172*G0_1_0_5_1_1_0_0_1 - 1.69312169312172*G0_1_0_5_1_1_1_0_0 - 1.69312169312172*G0_1_0_5_1_1_2_0_1 + 1.69312169312172*G0_1_0_5_1_1_3_1_0 + 1.69312169312172*G0_1_0_5_1_1_3_1_1 - 1.69312169312172*G0_1_0_5_1_1_4_1_0 - 1.69312169312172*G0_1_0_5_1_1_5_1_1 - 4.06349206349214*G0_1_1_0_0_0_0_0_0 - 4.06349206349214*G0_1_1_0_0_0_0_0_1 + 4.06349206349214*G0_1_1_0_0_0_1_0_0 + 4.06349206349214*G0_1_1_0_0_0_2_0_1 - 4.06349206349214*G0_1_1_0_0_0_3_1_0 - 4.06349206349214*G0_1_1_0_0_0_3_1_1 + 4.06349206349214*G0_1_1_0_0_0_4_1_0 + 4.06349206349214*G0_1_1_0_0_0_5_1_1 - 4.06349206349214*G0_1_1_0_0_1_0_0_0 - 4.06349206349214*G0_1_1_0_0_1_0_0_1 + 4.06349206349214*G0_1_1_0_0_1_1_0_0 + 4.06349206349214*G0_1_1_0_0_1_2_0_1 - 4.06349206349214*G0_1_1_0_0_1_3_1_0 - 4.06349206349214*G0_1_1_0_0_1_3_1_1 + 4.06349206349214*G0_1_1_0_0_1_4_1_0 + 4.06349206349214*G0_1_1_0_0_1_5_1_1 + 4.06349206349214*G0_1_1_1_0_0_0_0_0 + 4.06349206349214*G0_1_1_1_0_0_0_0_1 - 4.06349206349214*G0_1_1_1_0_0_1_0_0 - 4.06349206349214*G0_1_1_1_0_0_2_0_1 + 4.06349206349214*G0_1_1_1_0_0_3_1_0 + 4.06349206349214*G0_1_1_1_0_0_3_1_1 - 4.06349206349214*G0_1_1_1_0_0_4_1_0 - 4.06349206349214*G0_1_1_1_0_0_5_1_1 + 4.06349206349214*G0_1_1_2_0_1_0_0_0 + 4.06349206349214*G0_1_1_2_0_1_0_0_1 - 4.06349206349214*G0_1_1_2_0_1_1_0_0 - 4.06349206349214*G0_1_1_2_0_1_2_0_1 + 4.06349206349214*G0_1_1_2_0_1_3_1_0 + 4.06349206349214*G0_1_1_2_0_1_3_1_1 - 4.06349206349214*G0_1_1_2_0_1_4_1_0 - 4.06349206349214*G0_1_1_2_0_1_5_1_1 - 4.06349206349214*G0_1_1_3_1_0_0_0_0 - 4.06349206349214*G0_1_1_3_1_0_0_0_1 + 4.06349206349214*G0_1_1_3_1_0_1_0_0 + 4.06349206349214*G0_1_1_3_1_0_2_0_1 - 4.06349206349214*G0_1_1_3_1_0_3_1_0 - 4.06349206349214*G0_1_1_3_1_0_3_1_1 + 4.06349206349214*G0_1_1_3_1_0_4_1_0 + 4.06349206349214*G0_1_1_3_1_0_5_1_1 - 4.06349206349214*G0_1_1_3_1_1_0_0_0 - 4.06349206349214*G0_1_1_3_1_1_0_0_1 + 4.06349206349214*G0_1_1_3_1_1_1_0_0 + 4.06349206349214*G0_1_1_3_1_1_2_0_1 - 4.06349206349214*G0_1_1_3_1_1_3_1_0 - 4.06349206349214*G0_1_1_3_1_1_3_1_1 + 4.06349206349214*G0_1_1_3_1_1_4_1_0 + 4.06349206349214*G0_1_1_3_1_1_5_1_1 + 4.06349206349214*G0_1_1_4_1_0_0_0_0 + 4.06349206349214*G0_1_1_4_1_0_0_0_1 - 4.06349206349214*G0_1_1_4_1_0_1_0_0 - 4.06349206349214*G0_1_1_4_1_0_2_0_1 + 4.06349206349214*G0_1_1_4_1_0_3_1_0 + 4.06349206349214*G0_1_1_4_1_0_3_1_1 - 4.06349206349214*G0_1_1_4_1_0_4_1_0 - 4.06349206349214*G0_1_1_4_1_0_5_1_1 + 4.06349206349214*G0_1_1_5_1_1_0_0_0 + 4.06349206349214*G0_1_1_5_1_1_0_0_1 - 4.06349206349214*G0_1_1_5_1_1_1_0_0 - 4.06349206349214*G0_1_1_5_1_1_2_0_1 + 4.06349206349214*G0_1_1_5_1_1_3_1_0 + 4.06349206349214*G0_1_1_5_1_1_3_1_1 - 4.06349206349214*G0_1_1_5_1_1_4_1_0 - 4.06349206349214*G0_1_1_5_1_1_5_1_1;
    A[114] = 0.0;
    A[139] = 0.0;
    A[168] = 0.0;
    A[502] = A[181];
    A[205] = 0.0;
    A[573] = 0.0;
    A[533] = -A[530] - 0.524867724867732*G0_1_1_0_0_0_0_0_0 - 0.524867724867732*G0_1_1_0_0_0_0_0_1 + 0.524867724867732*G0_1_1_0_0_0_1_0_0 + 0.524867724867732*G0_1_1_0_0_0_2_0_1 - 0.524867724867732*G0_1_1_0_0_0_3_1_0 - 0.524867724867732*G0_1_1_0_0_0_3_1_1 + 0.524867724867732*G0_1_1_0_0_0_4_1_0 + 0.524867724867732*G0_1_1_0_0_0_5_1_1 - 0.524867724867732*G0_1_1_0_0_1_0_0_0 - 0.524867724867732*G0_1_1_0_0_1_0_0_1 + 0.524867724867732*G0_1_1_0_0_1_1_0_0 + 0.524867724867732*G0_1_1_0_0_1_2_0_1 - 0.524867724867732*G0_1_1_0_0_1_3_1_0 - 0.524867724867732*G0_1_1_0_0_1_3_1_1 + 0.524867724867732*G0_1_1_0_0_1_4_1_0 + 0.524867724867732*G0_1_1_0_0_1_5_1_1 + 0.524867724867732*G0_1_1_1_0_0_0_0_0 + 0.524867724867732*G0_1_1_1_0_0_0_0_1 - 0.524867724867732*G0_1_1_1_0_0_1_0_0 - 0.524867724867732*G0_1_1_1_0_0_2_0_1 + 0.524867724867732*G0_1_1_1_0_0_3_1_0 + 0.524867724867732*G0_1_1_1_0_0_3_1_1 - 0.524867724867732*G0_1_1_1_0_0_4_1_0 - 0.524867724867732*G0_1_1_1_0_0_5_1_1 + 0.524867724867732*G0_1_1_2_0_1_0_0_0 + 0.524867724867732*G0_1_1_2_0_1_0_0_1 - 0.524867724867732*G0_1_1_2_0_1_1_0_0 - 0.524867724867732*G0_1_1_2_0_1_2_0_1 + 0.524867724867732*G0_1_1_2_0_1_3_1_0 + 0.524867724867732*G0_1_1_2_0_1_3_1_1 - 0.524867724867732*G0_1_1_2_0_1_4_1_0 - 0.524867724867732*G0_1_1_2_0_1_5_1_1 - 0.524867724867732*G0_1_1_3_1_0_0_0_0 - 0.524867724867732*G0_1_1_3_1_0_0_0_1 + 0.524867724867732*G0_1_1_3_1_0_1_0_0 + 0.524867724867732*G0_1_1_3_1_0_2_0_1 - 0.524867724867732*G0_1_1_3_1_0_3_1_0 - 0.524867724867732*G0_1_1_3_1_0_3_1_1 + 0.524867724867732*G0_1_1_3_1_0_4_1_0 + 0.524867724867732*G0_1_1_3_1_0_5_1_1 - 0.524867724867732*G0_1_1_3_1_1_0_0_0 - 0.524867724867732*G0_1_1_3_1_1_0_0_1 + 0.524867724867732*G0_1_1_3_1_1_1_0_0 + 0.524867724867732*G0_1_1_3_1_1_2_0_1 - 0.524867724867732*G0_1_1_3_1_1_3_1_0 - 0.524867724867732*G0_1_1_3_1_1_3_1_1 + 0.524867724867732*G0_1_1_3_1_1_4_1_0 + 0.524867724867732*G0_1_1_3_1_1_5_1_1 + 0.524867724867732*G0_1_1_4_1_0_0_0_0 + 0.524867724867732*G0_1_1_4_1_0_0_0_1 - 0.524867724867732*G0_1_1_4_1_0_1_0_0 - 0.524867724867732*G0_1_1_4_1_0_2_0_1 + 0.524867724867732*G0_1_1_4_1_0_3_1_0 + 0.524867724867732*G0_1_1_4_1_0_3_1_1 - 0.524867724867732*G0_1_1_4_1_0_4_1_0 - 0.524867724867732*G0_1_1_4_1_0_5_1_1 + 0.524867724867732*G0_1_1_5_1_1_0_0_0 + 0.524867724867732*G0_1_1_5_1_1_0_0_1 - 0.524867724867732*G0_1_1_5_1_1_1_0_0 - 0.524867724867732*G0_1_1_5_1_1_2_0_1 + 0.524867724867732*G0_1_1_5_1_1_3_1_0 + 0.524867724867732*G0_1_1_5_1_1_3_1_1 - 0.524867724867732*G0_1_1_5_1_1_4_1_0 - 0.524867724867732*G0_1_1_5_1_1_5_1_1;
    A[238] = 0.0;
    A[604] = 0.0;
    A[715] = -A[625] - 0.220105820105839*G0_1_1_0_0_0_0_0_0 - 0.220105820105839*G0_1_1_0_0_0_0_0_1 + 0.220105820105839*G0_1_1_0_0_0_1_0_0 + 0.220105820105839*G0_1_1_0_0_0_2_0_1 - 0.220105820105839*G0_1_1_0_0_0_3_1_0 - 0.220105820105839*G0_1_1_0_0_0_3_1_1 + 0.220105820105839*G0_1_1_0_0_0_4_1_0 + 0.220105820105839*G0_1_1_0_0_0_5_1_1 - 0.220105820105839*G0_1_1_0_0_1_0_0_0 - 0.220105820105839*G0_1_1_0_0_1_0_0_1 + 0.220105820105839*G0_1_1_0_0_1_1_0_0 + 0.220105820105839*G0_1_1_0_0_1_2_0_1 - 0.220105820105839*G0_1_1_0_0_1_3_1_0 - 0.220105820105839*G0_1_1_0_0_1_3_1_1 + 0.220105820105839*G0_1_1_0_0_1_4_1_0 + 0.220105820105839*G0_1_1_0_0_1_5_1_1 + 0.220105820105839*G0_1_1_1_0_0_0_0_0 + 0.220105820105839*G0_1_1_1_0_0_0_0_1 - 0.220105820105839*G0_1_1_1_0_0_1_0_0 - 0.220105820105839*G0_1_1_1_0_0_2_0_1 + 0.220105820105839*G0_1_1_1_0_0_3_1_0 + 0.220105820105839*G0_1_1_1_0_0_3_1_1 - 0.220105820105839*G0_1_1_1_0_0_4_1_0 - 0.220105820105839*G0_1_1_1_0_0_5_1_1 + 0.220105820105839*G0_1_1_2_0_1_0_0_0 + 0.220105820105839*G0_1_1_2_0_1_0_0_1 - 0.220105820105839*G0_1_1_2_0_1_1_0_0 - 0.220105820105839*G0_1_1_2_0_1_2_0_1 + 0.220105820105839*G0_1_1_2_0_1_3_1_0 + 0.220105820105839*G0_1_1_2_0_1_3_1_1 - 0.220105820105839*G0_1_1_2_0_1_4_1_0 - 0.220105820105839*G0_1_1_2_0_1_5_1_1 - 0.220105820105839*G0_1_1_3_1_0_0_0_0 - 0.220105820105839*G0_1_1_3_1_0_0_0_1 + 0.220105820105839*G0_1_1_3_1_0_1_0_0 + 0.220105820105839*G0_1_1_3_1_0_2_0_1 - 0.220105820105839*G0_1_1_3_1_0_3_1_0 - 0.220105820105839*G0_1_1_3_1_0_3_1_1 + 0.220105820105839*G0_1_1_3_1_0_4_1_0 + 0.220105820105839*G0_1_1_3_1_0_5_1_1 - 0.220105820105839*G0_1_1_3_1_1_0_0_0 - 0.220105820105839*G0_1_1_3_1_1_0_0_1 + 0.220105820105839*G0_1_1_3_1_1_1_0_0 + 0.220105820105839*G0_1_1_3_1_1_2_0_1 - 0.220105820105839*G0_1_1_3_1_1_3_1_0 - 0.220105820105839*G0_1_1_3_1_1_3_1_1 + 0.220105820105839*G0_1_1_3_1_1_4_1_0 + 0.220105820105839*G0_1_1_3_1_1_5_1_1 + 0.220105820105839*G0_1_1_4_1_0_0_0_0 + 0.220105820105839*G0_1_1_4_1_0_0_0_1 - 0.220105820105839*G0_1_1_4_1_0_1_0_0 - 0.220105820105839*G0_1_1_4_1_0_2_0_1 + 0.220105820105839*G0_1_1_4_1_0_3_1_0 + 0.220105820105839*G0_1_1_4_1_0_3_1_1 - 0.220105820105839*G0_1_1_4_1_0_4_1_0 - 0.220105820105839*G0_1_1_4_1_0_5_1_1 + 0.220105820105839*G0_1_1_5_1_1_0_0_0 + 0.220105820105839*G0_1_1_5_1_1_0_0_1 - 0.220105820105839*G0_1_1_5_1_1_1_0_0 - 0.220105820105839*G0_1_1_5_1_1_2_0_1 + 0.220105820105839*G0_1_1_5_1_1_3_1_0 + 0.220105820105839*G0_1_1_5_1_1_3_1_1 - 0.220105820105839*G0_1_1_5_1_1_4_1_0 - 0.220105820105839*G0_1_1_5_1_1_5_1_1;
    A[709] = A[715] + 0.761904761904767*G0_0_0_0_0_0_0_0_0 + 0.761904761904767*G0_0_0_0_0_0_0_0_1 - 0.761904761904767*G0_0_0_0_0_0_1_0_0 - 0.761904761904767*G0_0_0_0_0_0_2_0_1 + 0.761904761904767*G0_0_0_0_0_0_3_1_0 + 0.761904761904767*G0_0_0_0_0_0_3_1_1 - 0.761904761904767*G0_0_0_0_0_0_4_1_0 - 0.761904761904767*G0_0_0_0_0_0_5_1_1 + 0.761904761904767*G0_0_0_0_0_1_0_0_0 + 0.761904761904767*G0_0_0_0_0_1_0_0_1 - 0.761904761904767*G0_0_0_0_0_1_1_0_0 - 0.761904761904767*G0_0_0_0_0_1_2_0_1 + 0.761904761904767*G0_0_0_0_0_1_3_1_0 + 0.761904761904767*G0_0_0_0_0_1_3_1_1 - 0.761904761904767*G0_0_0_0_0_1_4_1_0 - 0.761904761904767*G0_0_0_0_0_1_5_1_1 - 0.761904761904767*G0_0_0_1_0_0_0_0_0 - 0.761904761904767*G0_0_0_1_0_0_0_0_1 + 0.761904761904767*G0_0_0_1_0_0_1_0_0 + 0.761904761904767*G0_0_0_1_0_0_2_0_1 - 0.761904761904767*G0_0_0_1_0_0_3_1_0 - 0.761904761904767*G0_0_0_1_0_0_3_1_1 + 0.761904761904767*G0_0_0_1_0_0_4_1_0 + 0.761904761904767*G0_0_0_1_0_0_5_1_1 - 0.761904761904767*G0_0_0_2_0_1_0_0_0 - 0.761904761904767*G0_0_0_2_0_1_0_0_1 + 0.761904761904767*G0_0_0_2_0_1_1_0_0 + 0.761904761904767*G0_0_0_2_0_1_2_0_1 - 0.761904761904767*G0_0_0_2_0_1_3_1_0 - 0.761904761904767*G0_0_0_2_0_1_3_1_1 + 0.761904761904767*G0_0_0_2_0_1_4_1_0 + 0.761904761904767*G0_0_0_2_0_1_5_1_1 + 0.761904761904767*G0_0_0_3_1_0_0_0_0 + 0.761904761904767*G0_0_0_3_1_0_0_0_1 - 0.761904761904767*G0_0_0_3_1_0_1_0_0 - 0.761904761904767*G0_0_0_3_1_0_2_0_1 + 0.761904761904767*G0_0_0_3_1_0_3_1_0 + 0.761904761904767*G0_0_0_3_1_0_3_1_1 - 0.761904761904767*G0_0_0_3_1_0_4_1_0 - 0.761904761904767*G0_0_0_3_1_0_5_1_1 + 0.761904761904767*G0_0_0_3_1_1_0_0_0 + 0.761904761904767*G0_0_0_3_1_1_0_0_1 - 0.761904761904767*G0_0_0_3_1_1_1_0_0 - 0.761904761904767*G0_0_0_3_1_1_2_0_1 + 0.761904761904767*G0_0_0_3_1_1_3_1_0 + 0.761904761904767*G0_0_0_3_1_1_3_1_1 - 0.761904761904767*G0_0_0_3_1_1_4_1_0 - 0.761904761904767*G0_0_0_3_1_1_5_1_1 - 0.761904761904767*G0_0_0_4_1_0_0_0_0 - 0.761904761904767*G0_0_0_4_1_0_0_0_1 + 0.761904761904767*G0_0_0_4_1_0_1_0_0 + 0.761904761904767*G0_0_0_4_1_0_2_0_1 - 0.761904761904767*G0_0_0_4_1_0_3_1_0 - 0.761904761904767*G0_0_0_4_1_0_3_1_1 + 0.761904761904767*G0_0_0_4_1_0_4_1_0 + 0.761904761904767*G0_0_0_4_1_0_5_1_1 - 0.761904761904767*G0_0_0_5_1_1_0_0_0 - 0.761904761904767*G0_0_0_5_1_1_0_0_1 + 0.761904761904767*G0_0_0_5_1_1_1_0_0 + 0.761904761904767*G0_0_0_5_1_1_2_0_1 - 0.761904761904767*G0_0_0_5_1_1_3_1_0 - 0.761904761904767*G0_0_0_5_1_1_3_1_1 + 0.761904761904767*G0_0_0_5_1_1_4_1_0 + 0.761904761904767*G0_0_0_5_1_1_5_1_1 + 0.253968253968253*G0_0_1_0_0_0_0_0_0 + 0.253968253968253*G0_0_1_0_0_0_0_0_1 - 0.253968253968253*G0_0_1_0_0_0_1_0_0 - 0.253968253968253*G0_0_1_0_0_0_2_0_1 + 0.253968253968253*G0_0_1_0_0_0_3_1_0 + 0.253968253968253*G0_0_1_0_0_0_3_1_1 - 0.253968253968253*G0_0_1_0_0_0_4_1_0 - 0.253968253968253*G0_0_1_0_0_0_5_1_1 + 0.253968253968253*G0_0_1_0_0_1_0_0_0 + 0.253968253968253*G0_0_1_0_0_1_0_0_1 - 0.253968253968253*G0_0_1_0_0_1_1_0_0 - 0.253968253968253*G0_0_1_0_0_1_2_0_1 + 0.253968253968253*G0_0_1_0_0_1_3_1_0 + 0.253968253968253*G0_0_1_0_0_1_3_1_1 - 0.253968253968253*G0_0_1_0_0_1_4_1_0 - 0.253968253968253*G0_0_1_0_0_1_5_1_1 - 0.253968253968253*G0_0_1_1_0_0_0_0_0 - 0.253968253968253*G0_0_1_1_0_0_0_0_1 + 0.253968253968253*G0_0_1_1_0_0_1_0_0 + 0.253968253968253*G0_0_1_1_0_0_2_0_1 - 0.253968253968253*G0_0_1_1_0_0_3_1_0 - 0.253968253968253*G0_0_1_1_0_0_3_1_1 + 0.253968253968253*G0_0_1_1_0_0_4_1_0 + 0.253968253968253*G0_0_1_1_0_0_5_1_1 - 0.253968253968253*G0_0_1_2_0_1_0_0_0 - 0.253968253968253*G0_0_1_2_0_1_0_0_1 + 0.253968253968253*G0_0_1_2_0_1_1_0_0 + 0.253968253968253*G0_0_1_2_0_1_2_0_1 - 0.253968253968253*G0_0_1_2_0_1_3_1_0 - 0.253968253968253*G0_0_1_2_0_1_3_1_1 + 0.253968253968253*G0_0_1_2_0_1_4_1_0 + 0.253968253968253*G0_0_1_2_0_1_5_1_1 + 0.253968253968253*G0_0_1_3_1_0_0_0_0 + 0.253968253968253*G0_0_1_3_1_0_0_0_1 - 0.253968253968253*G0_0_1_3_1_0_1_0_0 - 0.253968253968253*G0_0_1_3_1_0_2_0_1 + 0.253968253968253*G0_0_1_3_1_0_3_1_0 + 0.253968253968253*G0_0_1_3_1_0_3_1_1 - 0.253968253968253*G0_0_1_3_1_0_4_1_0 - 0.253968253968253*G0_0_1_3_1_0_5_1_1 + 0.253968253968253*G0_0_1_3_1_1_0_0_0 + 0.253968253968253*G0_0_1_3_1_1_0_0_1 - 0.253968253968253*G0_0_1_3_1_1_1_0_0 - 0.253968253968253*G0_0_1_3_1_1_2_0_1 + 0.253968253968253*G0_0_1_3_1_1_3_1_0 + 0.253968253968253*G0_0_1_3_1_1_3_1_1 - 0.253968253968253*G0_0_1_3_1_1_4_1_0 - 0.253968253968253*G0_0_1_3_1_1_5_1_1 - 0.253968253968253*G0_0_1_4_1_0_0_0_0 - 0.253968253968253*G0_0_1_4_1_0_0_0_1 + 0.253968253968253*G0_0_1_4_1_0_1_0_0 + 0.253968253968253*G0_0_1_4_1_0_2_0_1 - 0.253968253968253*G0_0_1_4_1_0_3_1_0 - 0.253968253968253*G0_0_1_4_1_0_3_1_1 + 0.253968253968253*G0_0_1_4_1_0_4_1_0 + 0.253968253968253*G0_0_1_4_1_0_5_1_1 - 0.253968253968253*G0_0_1_5_1_1_0_0_0 - 0.253968253968253*G0_0_1_5_1_1_0_0_1 + 0.253968253968253*G0_0_1_5_1_1_1_0_0 + 0.253968253968253*G0_0_1_5_1_1_2_0_1 - 0.253968253968253*G0_0_1_5_1_1_3_1_0 - 0.253968253968253*G0_0_1_5_1_1_3_1_1 + 0.253968253968253*G0_0_1_5_1_1_4_1_0 + 0.253968253968253*G0_0_1_5_1_1_5_1_1 + 0.253968253968242*G0_1_0_0_0_0_0_0_0 + 0.253968253968242*G0_1_0_0_0_0_0_0_1 - 0.253968253968242*G0_1_0_0_0_0_1_0_0 - 0.253968253968242*G0_1_0_0_0_0_2_0_1 + 0.253968253968242*G0_1_0_0_0_0_3_1_0 + 0.253968253968242*G0_1_0_0_0_0_3_1_1 - 0.253968253968242*G0_1_0_0_0_0_4_1_0 - 0.253968253968242*G0_1_0_0_0_0_5_1_1 + 0.253968253968242*G0_1_0_0_0_1_0_0_0 + 0.253968253968242*G0_1_0_0_0_1_0_0_1 - 0.253968253968242*G0_1_0_0_0_1_1_0_0 - 0.253968253968242*G0_1_0_0_0_1_2_0_1 + 0.253968253968242*G0_1_0_0_0_1_3_1_0 + 0.253968253968242*G0_1_0_0_0_1_3_1_1 - 0.253968253968242*G0_1_0_0_0_1_4_1_0 - 0.253968253968242*G0_1_0_0_0_1_5_1_1 - 0.253968253968242*G0_1_0_1_0_0_0_0_0 - 0.253968253968242*G0_1_0_1_0_0_0_0_1 + 0.253968253968242*G0_1_0_1_0_0_1_0_0 + 0.253968253968242*G0_1_0_1_0_0_2_0_1 - 0.253968253968242*G0_1_0_1_0_0_3_1_0 - 0.253968253968242*G0_1_0_1_0_0_3_1_1 + 0.253968253968242*G0_1_0_1_0_0_4_1_0 + 0.253968253968242*G0_1_0_1_0_0_5_1_1 - 0.253968253968242*G0_1_0_2_0_1_0_0_0 - 0.253968253968242*G0_1_0_2_0_1_0_0_1 + 0.253968253968242*G0_1_0_2_0_1_1_0_0 + 0.253968253968242*G0_1_0_2_0_1_2_0_1 - 0.253968253968242*G0_1_0_2_0_1_3_1_0 - 0.253968253968242*G0_1_0_2_0_1_3_1_1 + 0.253968253968242*G0_1_0_2_0_1_4_1_0 + 0.253968253968242*G0_1_0_2_0_1_5_1_1 + 0.253968253968242*G0_1_0_3_1_0_0_0_0 + 0.253968253968242*G0_1_0_3_1_0_0_0_1 - 0.253968253968242*G0_1_0_3_1_0_1_0_0 - 0.253968253968242*G0_1_0_3_1_0_2_0_1 + 0.253968253968242*G0_1_0_3_1_0_3_1_0 + 0.253968253968242*G0_1_0_3_1_0_3_1_1 - 0.253968253968242*G0_1_0_3_1_0_4_1_0 - 0.253968253968242*G0_1_0_3_1_0_5_1_1 + 0.253968253968242*G0_1_0_3_1_1_0_0_0 + 0.253968253968242*G0_1_0_3_1_1_0_0_1 - 0.253968253968242*G0_1_0_3_1_1_1_0_0 - 0.253968253968242*G0_1_0_3_1_1_2_0_1 + 0.253968253968242*G0_1_0_3_1_1_3_1_0 + 0.253968253968242*G0_1_0_3_1_1_3_1_1 - 0.253968253968242*G0_1_0_3_1_1_4_1_0 - 0.253968253968242*G0_1_0_3_1_1_5_1_1 - 0.253968253968242*G0_1_0_4_1_0_0_0_0 - 0.253968253968242*G0_1_0_4_1_0_0_0_1 + 0.253968253968242*G0_1_0_4_1_0_1_0_0 + 0.253968253968242*G0_1_0_4_1_0_2_0_1 - 0.253968253968242*G0_1_0_4_1_0_3_1_0 - 0.253968253968242*G0_1_0_4_1_0_3_1_1 + 0.253968253968242*G0_1_0_4_1_0_4_1_0 + 0.253968253968242*G0_1_0_4_1_0_5_1_1 - 0.253968253968242*G0_1_0_5_1_1_0_0_0 - 0.253968253968242*G0_1_0_5_1_1_0_0_1 + 0.253968253968242*G0_1_0_5_1_1_1_0_0 + 0.253968253968242*G0_1_0_5_1_1_2_0_1 - 0.253968253968242*G0_1_0_5_1_1_3_1_0 - 0.253968253968242*G0_1_0_5_1_1_3_1_1 + 0.253968253968242*G0_1_0_5_1_1_4_1_0 + 0.253968253968242*G0_1_0_5_1_1_5_1_1;
    A[125] = -A[709] + 1.11746031746033*G0_0_1_0_0_0_0_0_0 + 1.11746031746033*G0_0_1_0_0_0_0_0_1 - 1.11746031746033*G0_0_1_0_0_0_1_0_0 - 1.11746031746033*G0_0_1_0_0_0_2_0_1 + 1.11746031746033*G0_0_1_0_0_0_3_1_0 + 1.11746031746033*G0_0_1_0_0_0_3_1_1 - 1.11746031746033*G0_0_1_0_0_0_4_1_0 - 1.11746031746033*G0_0_1_0_0_0_5_1_1 + 1.11746031746033*G0_0_1_0_0_1_0_0_0 + 1.11746031746033*G0_0_1_0_0_1_0_0_1 - 1.11746031746033*G0_0_1_0_0_1_1_0_0 - 1.11746031746033*G0_0_1_0_0_1_2_0_1 + 1.11746031746033*G0_0_1_0_0_1_3_1_0 + 1.11746031746033*G0_0_1_0_0_1_3_1_1 - 1.11746031746033*G0_0_1_0_0_1_4_1_0 - 1.11746031746033*G0_0_1_0_0_1_5_1_1 - 1.11746031746033*G0_0_1_1_0_0_0_0_0 - 1.11746031746033*G0_0_1_1_0_0_0_0_1 + 1.11746031746033*G0_0_1_1_0_0_1_0_0 + 1.11746031746033*G0_0_1_1_0_0_2_0_1 - 1.11746031746033*G0_0_1_1_0_0_3_1_0 - 1.11746031746033*G0_0_1_1_0_0_3_1_1 + 1.11746031746033*G0_0_1_1_0_0_4_1_0 + 1.11746031746033*G0_0_1_1_0_0_5_1_1 - 1.11746031746033*G0_0_1_2_0_1_0_0_0 - 1.11746031746033*G0_0_1_2_0_1_0_0_1 + 1.11746031746033*G0_0_1_2_0_1_1_0_0 + 1.11746031746033*G0_0_1_2_0_1_2_0_1 - 1.11746031746033*G0_0_1_2_0_1_3_1_0 - 1.11746031746033*G0_0_1_2_0_1_3_1_1 + 1.11746031746033*G0_0_1_2_0_1_4_1_0 + 1.11746031746033*G0_0_1_2_0_1_5_1_1 + 1.11746031746033*G0_0_1_3_1_0_0_0_0 + 1.11746031746033*G0_0_1_3_1_0_0_0_1 - 1.11746031746033*G0_0_1_3_1_0_1_0_0 - 1.11746031746033*G0_0_1_3_1_0_2_0_1 + 1.11746031746033*G0_0_1_3_1_0_3_1_0 + 1.11746031746033*G0_0_1_3_1_0_3_1_1 - 1.11746031746033*G0_0_1_3_1_0_4_1_0 - 1.11746031746033*G0_0_1_3_1_0_5_1_1 + 1.11746031746033*G0_0_1_3_1_1_0_0_0 + 1.11746031746033*G0_0_1_3_1_1_0_0_1 - 1.11746031746033*G0_0_1_3_1_1_1_0_0 - 1.11746031746033*G0_0_1_3_1_1_2_0_1 + 1.11746031746033*G0_0_1_3_1_1_3_1_0 + 1.11746031746033*G0_0_1_3_1_1_3_1_1 - 1.11746031746033*G0_0_1_3_1_1_4_1_0 - 1.11746031746033*G0_0_1_3_1_1_5_1_1 - 1.11746031746033*G0_0_1_4_1_0_0_0_0 - 1.11746031746033*G0_0_1_4_1_0_0_0_1 + 1.11746031746033*G0_0_1_4_1_0_1_0_0 + 1.11746031746033*G0_0_1_4_1_0_2_0_1 - 1.11746031746033*G0_0_1_4_1_0_3_1_0 - 1.11746031746033*G0_0_1_4_1_0_3_1_1 + 1.11746031746033*G0_0_1_4_1_0_4_1_0 + 1.11746031746033*G0_0_1_4_1_0_5_1_1 - 1.11746031746033*G0_0_1_5_1_1_0_0_0 - 1.11746031746033*G0_0_1_5_1_1_0_0_1 + 1.11746031746033*G0_0_1_5_1_1_1_0_0 + 1.11746031746033*G0_0_1_5_1_1_2_0_1 - 1.11746031746033*G0_0_1_5_1_1_3_1_0 - 1.11746031746033*G0_0_1_5_1_1_3_1_1 + 1.11746031746033*G0_0_1_5_1_1_4_1_0 + 1.11746031746033*G0_0_1_5_1_1_5_1_1 - 0.728042328042336*G0_1_1_0_0_0_0_0_0 - 0.728042328042336*G0_1_1_0_0_0_0_0_1 + 0.728042328042336*G0_1_1_0_0_0_1_0_0 + 0.728042328042336*G0_1_1_0_0_0_2_0_1 - 0.728042328042336*G0_1_1_0_0_0_3_1_0 - 0.728042328042336*G0_1_1_0_0_0_3_1_1 + 0.728042328042336*G0_1_1_0_0_0_4_1_0 + 0.728042328042336*G0_1_1_0_0_0_5_1_1 - 0.728042328042336*G0_1_1_0_0_1_0_0_0 - 0.728042328042336*G0_1_1_0_0_1_0_0_1 + 0.728042328042336*G0_1_1_0_0_1_1_0_0 + 0.728042328042336*G0_1_1_0_0_1_2_0_1 - 0.728042328042336*G0_1_1_0_0_1_3_1_0 - 0.728042328042336*G0_1_1_0_0_1_3_1_1 + 0.728042328042336*G0_1_1_0_0_1_4_1_0 + 0.728042328042336*G0_1_1_0_0_1_5_1_1 + 0.728042328042336*G0_1_1_1_0_0_0_0_0 + 0.728042328042336*G0_1_1_1_0_0_0_0_1 - 0.728042328042336*G0_1_1_1_0_0_1_0_0 - 0.728042328042336*G0_1_1_1_0_0_2_0_1 + 0.728042328042336*G0_1_1_1_0_0_3_1_0 + 0.728042328042336*G0_1_1_1_0_0_3_1_1 - 0.728042328042336*G0_1_1_1_0_0_4_1_0 - 0.728042328042336*G0_1_1_1_0_0_5_1_1 + 0.728042328042336*G0_1_1_2_0_1_0_0_0 + 0.728042328042336*G0_1_1_2_0_1_0_0_1 - 0.728042328042336*G0_1_1_2_0_1_1_0_0 - 0.728042328042336*G0_1_1_2_0_1_2_0_1 + 0.728042328042336*G0_1_1_2_0_1_3_1_0 + 0.728042328042336*G0_1_1_2_0_1_3_1_1 - 0.728042328042336*G0_1_1_2_0_1_4_1_0 - 0.728042328042336*G0_1_1_2_0_1_5_1_1 - 0.728042328042336*G0_1_1_3_1_0_0_0_0 - 0.728042328042336*G0_1_1_3_1_0_0_0_1 + 0.728042328042336*G0_1_1_3_1_0_1_0_0 + 0.728042328042336*G0_1_1_3_1_0_2_0_1 - 0.728042328042336*G0_1_1_3_1_0_3_1_0 - 0.728042328042336*G0_1_1_3_1_0_3_1_1 + 0.728042328042336*G0_1_1_3_1_0_4_1_0 + 0.728042328042336*G0_1_1_3_1_0_5_1_1 - 0.728042328042336*G0_1_1_3_1_1_0_0_0 - 0.728042328042336*G0_1_1_3_1_1_0_0_1 + 0.728042328042336*G0_1_1_3_1_1_1_0_0 + 0.728042328042336*G0_1_1_3_1_1_2_0_1 - 0.728042328042336*G0_1_1_3_1_1_3_1_0 - 0.728042328042336*G0_1_1_3_1_1_3_1_1 + 0.728042328042336*G0_1_1_3_1_1_4_1_0 + 0.728042328042336*G0_1_1_3_1_1_5_1_1 + 0.728042328042336*G0_1_1_4_1_0_0_0_0 + 0.728042328042336*G0_1_1_4_1_0_0_0_1 - 0.728042328042336*G0_1_1_4_1_0_1_0_0 - 0.728042328042336*G0_1_1_4_1_0_2_0_1 + 0.728042328042336*G0_1_1_4_1_0_3_1_0 + 0.728042328042336*G0_1_1_4_1_0_3_1_1 - 0.728042328042336*G0_1_1_4_1_0_4_1_0 - 0.728042328042336*G0_1_1_4_1_0_5_1_1 + 0.728042328042336*G0_1_1_5_1_1_0_0_0 + 0.728042328042336*G0_1_1_5_1_1_0_0_1 - 0.728042328042336*G0_1_1_5_1_1_1_0_0 - 0.728042328042336*G0_1_1_5_1_1_2_0_1 + 0.728042328042336*G0_1_1_5_1_1_3_1_0 + 0.728042328042336*G0_1_1_5_1_1_3_1_1 - 0.728042328042336*G0_1_1_5_1_1_4_1_0 - 0.728042328042336*G0_1_1_5_1_1_5_1_1;
    A[559] = A[125] + 0.101587301587305*G0_0_0_0_0_0_0_0_0 + 0.101587301587305*G0_0_0_0_0_0_0_0_1 - 0.101587301587305*G0_0_0_0_0_0_1_0_0 - 0.101587301587305*G0_0_0_0_0_0_2_0_1 + 0.101587301587305*G0_0_0_0_0_0_3_1_0 + 0.101587301587305*G0_0_0_0_0_0_3_1_1 - 0.101587301587305*G0_0_0_0_0_0_4_1_0 - 0.101587301587305*G0_0_0_0_0_0_5_1_1 + 0.101587301587305*G0_0_0_0_0_1_0_0_0 + 0.101587301587305*G0_0_0_0_0_1_0_0_1 - 0.101587301587305*G0_0_0_0_0_1_1_0_0 - 0.101587301587305*G0_0_0_0_0_1_2_0_1 + 0.101587301587305*G0_0_0_0_0_1_3_1_0 + 0.101587301587305*G0_0_0_0_0_1_3_1_1 - 0.101587301587305*G0_0_0_0_0_1_4_1_0 - 0.101587301587305*G0_0_0_0_0_1_5_1_1 - 0.101587301587305*G0_0_0_1_0_0_0_0_0 - 0.101587301587305*G0_0_0_1_0_0_0_0_1 + 0.101587301587305*G0_0_0_1_0_0_1_0_0 + 0.101587301587305*G0_0_0_1_0_0_2_0_1 - 0.101587301587305*G0_0_0_1_0_0_3_1_0 - 0.101587301587305*G0_0_0_1_0_0_3_1_1 + 0.101587301587305*G0_0_0_1_0_0_4_1_0 + 0.101587301587305*G0_0_0_1_0_0_5_1_1 - 0.101587301587305*G0_0_0_2_0_1_0_0_0 - 0.101587301587305*G0_0_0_2_0_1_0_0_1 + 0.101587301587305*G0_0_0_2_0_1_1_0_0 + 0.101587301587305*G0_0_0_2_0_1_2_0_1 - 0.101587301587305*G0_0_0_2_0_1_3_1_0 - 0.101587301587305*G0_0_0_2_0_1_3_1_1 + 0.101587301587305*G0_0_0_2_0_1_4_1_0 + 0.101587301587305*G0_0_0_2_0_1_5_1_1 + 0.101587301587305*G0_0_0_3_1_0_0_0_0 + 0.101587301587305*G0_0_0_3_1_0_0_0_1 - 0.101587301587305*G0_0_0_3_1_0_1_0_0 - 0.101587301587305*G0_0_0_3_1_0_2_0_1 + 0.101587301587305*G0_0_0_3_1_0_3_1_0 + 0.101587301587305*G0_0_0_3_1_0_3_1_1 - 0.101587301587305*G0_0_0_3_1_0_4_1_0 - 0.101587301587305*G0_0_0_3_1_0_5_1_1 + 0.101587301587305*G0_0_0_3_1_1_0_0_0 + 0.101587301587305*G0_0_0_3_1_1_0_0_1 - 0.101587301587305*G0_0_0_3_1_1_1_0_0 - 0.101587301587305*G0_0_0_3_1_1_2_0_1 + 0.101587301587305*G0_0_0_3_1_1_3_1_0 + 0.101587301587305*G0_0_0_3_1_1_3_1_1 - 0.101587301587305*G0_0_0_3_1_1_4_1_0 - 0.101587301587305*G0_0_0_3_1_1_5_1_1 - 0.101587301587305*G0_0_0_4_1_0_0_0_0 - 0.101587301587305*G0_0_0_4_1_0_0_0_1 + 0.101587301587305*G0_0_0_4_1_0_1_0_0 + 0.101587301587305*G0_0_0_4_1_0_2_0_1 - 0.101587301587305*G0_0_0_4_1_0_3_1_0 - 0.101587301587305*G0_0_0_4_1_0_3_1_1 + 0.101587301587305*G0_0_0_4_1_0_4_1_0 + 0.101587301587305*G0_0_0_4_1_0_5_1_1 - 0.101587301587305*G0_0_0_5_1_1_0_0_0 - 0.101587301587305*G0_0_0_5_1_1_0_0_1 + 0.101587301587305*G0_0_0_5_1_1_1_0_0 + 0.101587301587305*G0_0_0_5_1_1_2_0_1 - 0.101587301587305*G0_0_0_5_1_1_3_1_0 - 0.101587301587305*G0_0_0_5_1_1_3_1_1 + 0.101587301587305*G0_0_0_5_1_1_4_1_0 + 0.101587301587305*G0_0_0_5_1_1_5_1_1 - 0.101587301587309*G0_1_1_0_0_0_0_0_0 - 0.101587301587309*G0_1_1_0_0_0_0_0_1 + 0.101587301587309*G0_1_1_0_0_0_1_0_0 + 0.101587301587309*G0_1_1_0_0_0_2_0_1 - 0.101587301587309*G0_1_1_0_0_0_3_1_0 - 0.101587301587309*G0_1_1_0_0_0_3_1_1 + 0.101587301587309*G0_1_1_0_0_0_4_1_0 + 0.101587301587309*G0_1_1_0_0_0_5_1_1 - 0.101587301587309*G0_1_1_0_0_1_0_0_0 - 0.101587301587309*G0_1_1_0_0_1_0_0_1 + 0.101587301587309*G0_1_1_0_0_1_1_0_0 + 0.101587301587309*G0_1_1_0_0_1_2_0_1 - 0.101587301587309*G0_1_1_0_0_1_3_1_0 - 0.101587301587309*G0_1_1_0_0_1_3_1_1 + 0.101587301587309*G0_1_1_0_0_1_4_1_0 + 0.101587301587309*G0_1_1_0_0_1_5_1_1 + 0.101587301587309*G0_1_1_1_0_0_0_0_0 + 0.101587301587309*G0_1_1_1_0_0_0_0_1 - 0.101587301587309*G0_1_1_1_0_0_1_0_0 - 0.101587301587309*G0_1_1_1_0_0_2_0_1 + 0.101587301587309*G0_1_1_1_0_0_3_1_0 + 0.101587301587309*G0_1_1_1_0_0_3_1_1 - 0.101587301587309*G0_1_1_1_0_0_4_1_0 - 0.101587301587309*G0_1_1_1_0_0_5_1_1 + 0.101587301587309*G0_1_1_2_0_1_0_0_0 + 0.101587301587309*G0_1_1_2_0_1_0_0_1 - 0.101587301587309*G0_1_1_2_0_1_1_0_0 - 0.101587301587309*G0_1_1_2_0_1_2_0_1 + 0.101587301587309*G0_1_1_2_0_1_3_1_0 + 0.101587301587309*G0_1_1_2_0_1_3_1_1 - 0.101587301587309*G0_1_1_2_0_1_4_1_0 - 0.101587301587309*G0_1_1_2_0_1_5_1_1 - 0.101587301587309*G0_1_1_3_1_0_0_0_0 - 0.101587301587309*G0_1_1_3_1_0_0_0_1 + 0.101587301587309*G0_1_1_3_1_0_1_0_0 + 0.101587301587309*G0_1_1_3_1_0_2_0_1 - 0.101587301587309*G0_1_1_3_1_0_3_1_0 - 0.101587301587309*G0_1_1_3_1_0_3_1_1 + 0.101587301587309*G0_1_1_3_1_0_4_1_0 + 0.101587301587309*G0_1_1_3_1_0_5_1_1 - 0.101587301587309*G0_1_1_3_1_1_0_0_0 - 0.101587301587309*G0_1_1_3_1_1_0_0_1 + 0.101587301587309*G0_1_1_3_1_1_1_0_0 + 0.101587301587309*G0_1_1_3_1_1_2_0_1 - 0.101587301587309*G0_1_1_3_1_1_3_1_0 - 0.101587301587309*G0_1_1_3_1_1_3_1_1 + 0.101587301587309*G0_1_1_3_1_1_4_1_0 + 0.101587301587309*G0_1_1_3_1_1_5_1_1 + 0.101587301587309*G0_1_1_4_1_0_0_0_0 + 0.101587301587309*G0_1_1_4_1_0_0_0_1 - 0.101587301587309*G0_1_1_4_1_0_1_0_0 - 0.101587301587309*G0_1_1_4_1_0_2_0_1 + 0.101587301587309*G0_1_1_4_1_0_3_1_0 + 0.101587301587309*G0_1_1_4_1_0_3_1_1 - 0.101587301587309*G0_1_1_4_1_0_4_1_0 - 0.101587301587309*G0_1_1_4_1_0_5_1_1 + 0.101587301587309*G0_1_1_5_1_1_0_0_0 + 0.101587301587309*G0_1_1_5_1_1_0_0_1 - 0.101587301587309*G0_1_1_5_1_1_1_0_0 - 0.101587301587309*G0_1_1_5_1_1_2_0_1 + 0.101587301587309*G0_1_1_5_1_1_3_1_0 + 0.101587301587309*G0_1_1_5_1_1_3_1_1 - 0.101587301587309*G0_1_1_5_1_1_4_1_0 - 0.101587301587309*G0_1_1_5_1_1_5_1_1;
    A[588] = A[559] - 1.11746031746033*G0_0_1_0_0_0_0_0_0 - 1.11746031746033*G0_0_1_0_0_0_0_0_1 + 1.11746031746033*G0_0_1_0_0_0_1_0_0 + 1.11746031746033*G0_0_1_0_0_0_2_0_1 - 1.11746031746033*G0_0_1_0_0_0_3_1_0 - 1.11746031746033*G0_0_1_0_0_0_3_1_1 + 1.11746031746033*G0_0_1_0_0_0_4_1_0 + 1.11746031746033*G0_0_1_0_0_0_5_1_1 - 1.11746031746033*G0_0_1_0_0_1_0_0_0 - 1.11746031746033*G0_0_1_0_0_1_0_0_1 + 1.11746031746033*G0_0_1_0_0_1_1_0_0 + 1.11746031746033*G0_0_1_0_0_1_2_0_1 - 1.11746031746033*G0_0_1_0_0_1_3_1_0 - 1.11746031746033*G0_0_1_0_0_1_3_1_1 + 1.11746031746033*G0_0_1_0_0_1_4_1_0 + 1.11746031746033*G0_0_1_0_0_1_5_1_1 + 1.11746031746033*G0_0_1_1_0_0_0_0_0 + 1.11746031746033*G0_0_1_1_0_0_0_0_1 - 1.11746031746033*G0_0_1_1_0_0_1_0_0 - 1.11746031746033*G0_0_1_1_0_0_2_0_1 + 1.11746031746033*G0_0_1_1_0_0_3_1_0 + 1.11746031746033*G0_0_1_1_0_0_3_1_1 - 1.11746031746033*G0_0_1_1_0_0_4_1_0 - 1.11746031746033*G0_0_1_1_0_0_5_1_1 + 1.11746031746033*G0_0_1_2_0_1_0_0_0 + 1.11746031746033*G0_0_1_2_0_1_0_0_1 - 1.11746031746033*G0_0_1_2_0_1_1_0_0 - 1.11746031746033*G0_0_1_2_0_1_2_0_1 + 1.11746031746033*G0_0_1_2_0_1_3_1_0 + 1.11746031746033*G0_0_1_2_0_1_3_1_1 - 1.11746031746033*G0_0_1_2_0_1_4_1_0 - 1.11746031746033*G0_0_1_2_0_1_5_1_1 - 1.11746031746033*G0_0_1_3_1_0_0_0_0 - 1.11746031746033*G0_0_1_3_1_0_0_0_1 + 1.11746031746033*G0_0_1_3_1_0_1_0_0 + 1.11746031746033*G0_0_1_3_1_0_2_0_1 - 1.11746031746033*G0_0_1_3_1_0_3_1_0 - 1.11746031746033*G0_0_1_3_1_0_3_1_1 + 1.11746031746033*G0_0_1_3_1_0_4_1_0 + 1.11746031746033*G0_0_1_3_1_0_5_1_1 - 1.11746031746033*G0_0_1_3_1_1_0_0_0 - 1.11746031746033*G0_0_1_3_1_1_0_0_1 + 1.11746031746033*G0_0_1_3_1_1_1_0_0 + 1.11746031746033*G0_0_1_3_1_1_2_0_1 - 1.11746031746033*G0_0_1_3_1_1_3_1_0 - 1.11746031746033*G0_0_1_3_1_1_3_1_1 + 1.11746031746033*G0_0_1_3_1_1_4_1_0 + 1.11746031746033*G0_0_1_3_1_1_5_1_1 + 1.11746031746033*G0_0_1_4_1_0_0_0_0 + 1.11746031746033*G0_0_1_4_1_0_0_0_1 - 1.11746031746033*G0_0_1_4_1_0_1_0_0 - 1.11746031746033*G0_0_1_4_1_0_2_0_1 + 1.11746031746033*G0_0_1_4_1_0_3_1_0 + 1.11746031746033*G0_0_1_4_1_0_3_1_1 - 1.11746031746033*G0_0_1_4_1_0_4_1_0 - 1.11746031746033*G0_0_1_4_1_0_5_1_1 + 1.11746031746033*G0_0_1_5_1_1_0_0_0 + 1.11746031746033*G0_0_1_5_1_1_0_0_1 - 1.11746031746033*G0_0_1_5_1_1_1_0_0 - 1.11746031746033*G0_0_1_5_1_1_2_0_1 + 1.11746031746033*G0_0_1_5_1_1_3_1_0 + 1.11746031746033*G0_0_1_5_1_1_3_1_1 - 1.11746031746033*G0_0_1_5_1_1_4_1_0 - 1.11746031746033*G0_0_1_5_1_1_5_1_1 + 1.11746031746033*G0_1_0_0_0_0_0_0_0 + 1.11746031746033*G0_1_0_0_0_0_0_0_1 - 1.11746031746033*G0_1_0_0_0_0_1_0_0 - 1.11746031746033*G0_1_0_0_0_0_2_0_1 + 1.11746031746033*G0_1_0_0_0_0_3_1_0 + 1.11746031746033*G0_1_0_0_0_0_3_1_1 - 1.11746031746033*G0_1_0_0_0_0_4_1_0 - 1.11746031746033*G0_1_0_0_0_0_5_1_1 + 1.11746031746033*G0_1_0_0_0_1_0_0_0 + 1.11746031746033*G0_1_0_0_0_1_0_0_1 - 1.11746031746033*G0_1_0_0_0_1_1_0_0 - 1.11746031746033*G0_1_0_0_0_1_2_0_1 + 1.11746031746033*G0_1_0_0_0_1_3_1_0 + 1.11746031746033*G0_1_0_0_0_1_3_1_1 - 1.11746031746033*G0_1_0_0_0_1_4_1_0 - 1.11746031746033*G0_1_0_0_0_1_5_1_1 - 1.11746031746033*G0_1_0_1_0_0_0_0_0 - 1.11746031746033*G0_1_0_1_0_0_0_0_1 + 1.11746031746033*G0_1_0_1_0_0_1_0_0 + 1.11746031746033*G0_1_0_1_0_0_2_0_1 - 1.11746031746033*G0_1_0_1_0_0_3_1_0 - 1.11746031746033*G0_1_0_1_0_0_3_1_1 + 1.11746031746033*G0_1_0_1_0_0_4_1_0 + 1.11746031746033*G0_1_0_1_0_0_5_1_1 - 1.11746031746033*G0_1_0_2_0_1_0_0_0 - 1.11746031746033*G0_1_0_2_0_1_0_0_1 + 1.11746031746033*G0_1_0_2_0_1_1_0_0 + 1.11746031746033*G0_1_0_2_0_1_2_0_1 - 1.11746031746033*G0_1_0_2_0_1_3_1_0 - 1.11746031746033*G0_1_0_2_0_1_3_1_1 + 1.11746031746033*G0_1_0_2_0_1_4_1_0 + 1.11746031746033*G0_1_0_2_0_1_5_1_1 + 1.11746031746033*G0_1_0_3_1_0_0_0_0 + 1.11746031746033*G0_1_0_3_1_0_0_0_1 - 1.11746031746033*G0_1_0_3_1_0_1_0_0 - 1.11746031746033*G0_1_0_3_1_0_2_0_1 + 1.11746031746033*G0_1_0_3_1_0_3_1_0 + 1.11746031746033*G0_1_0_3_1_0_3_1_1 - 1.11746031746033*G0_1_0_3_1_0_4_1_0 - 1.11746031746033*G0_1_0_3_1_0_5_1_1 + 1.11746031746033*G0_1_0_3_1_1_0_0_0 + 1.11746031746033*G0_1_0_3_1_1_0_0_1 - 1.11746031746033*G0_1_0_3_1_1_1_0_0 - 1.11746031746033*G0_1_0_3_1_1_2_0_1 + 1.11746031746033*G0_1_0_3_1_1_3_1_0 + 1.11746031746033*G0_1_0_3_1_1_3_1_1 - 1.11746031746033*G0_1_0_3_1_1_4_1_0 - 1.11746031746033*G0_1_0_3_1_1_5_1_1 - 1.11746031746033*G0_1_0_4_1_0_0_0_0 - 1.11746031746033*G0_1_0_4_1_0_0_0_1 + 1.11746031746033*G0_1_0_4_1_0_1_0_0 + 1.11746031746033*G0_1_0_4_1_0_2_0_1 - 1.11746031746033*G0_1_0_4_1_0_3_1_0 - 1.11746031746033*G0_1_0_4_1_0_3_1_1 + 1.11746031746033*G0_1_0_4_1_0_4_1_0 + 1.11746031746033*G0_1_0_4_1_0_5_1_1 - 1.11746031746033*G0_1_0_5_1_1_0_0_0 - 1.11746031746033*G0_1_0_5_1_1_0_0_1 + 1.11746031746033*G0_1_0_5_1_1_1_0_0 + 1.11746031746033*G0_1_0_5_1_1_2_0_1 - 1.11746031746033*G0_1_0_5_1_1_3_1_0 - 1.11746031746033*G0_1_0_5_1_1_3_1_1 + 1.11746031746033*G0_1_0_5_1_1_4_1_0 + 1.11746031746033*G0_1_0_5_1_1_5_1_1;
    A[309] = A[125] - 1.1851851851852*G0_0_0_0_0_0_0_0_0 - 1.1851851851852*G0_0_0_0_0_0_0_0_1 + 1.1851851851852*G0_0_0_0_0_0_1_0_0 + 1.1851851851852*G0_0_0_0_0_0_2_0_1 - 1.1851851851852*G0_0_0_0_0_0_3_1_0 - 1.1851851851852*G0_0_0_0_0_0_3_1_1 + 1.1851851851852*G0_0_0_0_0_0_4_1_0 + 1.1851851851852*G0_0_0_0_0_0_5_1_1 - 1.1851851851852*G0_0_0_0_0_1_0_0_0 - 1.1851851851852*G0_0_0_0_0_1_0_0_1 + 1.1851851851852*G0_0_0_0_0_1_1_0_0 + 1.1851851851852*G0_0_0_0_0_1_2_0_1 - 1.1851851851852*G0_0_0_0_0_1_3_1_0 - 1.1851851851852*G0_0_0_0_0_1_3_1_1 + 1.1851851851852*G0_0_0_0_0_1_4_1_0 + 1.1851851851852*G0_0_0_0_0_1_5_1_1 + 1.1851851851852*G0_0_0_1_0_0_0_0_0 + 1.1851851851852*G0_0_0_1_0_0_0_0_1 - 1.1851851851852*G0_0_0_1_0_0_1_0_0 - 1.1851851851852*G0_0_0_1_0_0_2_0_1 + 1.1851851851852*G0_0_0_1_0_0_3_1_0 + 1.1851851851852*G0_0_0_1_0_0_3_1_1 - 1.1851851851852*G0_0_0_1_0_0_4_1_0 - 1.1851851851852*G0_0_0_1_0_0_5_1_1 + 1.1851851851852*G0_0_0_2_0_1_0_0_0 + 1.1851851851852*G0_0_0_2_0_1_0_0_1 - 1.1851851851852*G0_0_0_2_0_1_1_0_0 - 1.1851851851852*G0_0_0_2_0_1_2_0_1 + 1.1851851851852*G0_0_0_2_0_1_3_1_0 + 1.1851851851852*G0_0_0_2_0_1_3_1_1 - 1.1851851851852*G0_0_0_2_0_1_4_1_0 - 1.1851851851852*G0_0_0_2_0_1_5_1_1 - 1.1851851851852*G0_0_0_3_1_0_0_0_0 - 1.1851851851852*G0_0_0_3_1_0_0_0_1 + 1.1851851851852*G0_0_0_3_1_0_1_0_0 + 1.1851851851852*G0_0_0_3_1_0_2_0_1 - 1.1851851851852*G0_0_0_3_1_0_3_1_0 - 1.1851851851852*G0_0_0_3_1_0_3_1_1 + 1.1851851851852*G0_0_0_3_1_0_4_1_0 + 1.1851851851852*G0_0_0_3_1_0_5_1_1 - 1.1851851851852*G0_0_0_3_1_1_0_0_0 - 1.1851851851852*G0_0_0_3_1_1_0_0_1 + 1.1851851851852*G0_0_0_3_1_1_1_0_0 + 1.1851851851852*G0_0_0_3_1_1_2_0_1 - 1.1851851851852*G0_0_0_3_1_1_3_1_0 - 1.1851851851852*G0_0_0_3_1_1_3_1_1 + 1.1851851851852*G0_0_0_3_1_1_4_1_0 + 1.1851851851852*G0_0_0_3_1_1_5_1_1 + 1.1851851851852*G0_0_0_4_1_0_0_0_0 + 1.1851851851852*G0_0_0_4_1_0_0_0_1 - 1.1851851851852*G0_0_0_4_1_0_1_0_0 - 1.1851851851852*G0_0_0_4_1_0_2_0_1 + 1.1851851851852*G0_0_0_4_1_0_3_1_0 + 1.1851851851852*G0_0_0_4_1_0_3_1_1 - 1.1851851851852*G0_0_0_4_1_0_4_1_0 - 1.1851851851852*G0_0_0_4_1_0_5_1_1 + 1.1851851851852*G0_0_0_5_1_1_0_0_0 + 1.1851851851852*G0_0_0_5_1_1_0_0_1 - 1.1851851851852*G0_0_0_5_1_1_1_0_0 - 1.1851851851852*G0_0_0_5_1_1_2_0_1 + 1.1851851851852*G0_0_0_5_1_1_3_1_0 + 1.1851851851852*G0_0_0_5_1_1_3_1_1 - 1.1851851851852*G0_0_0_5_1_1_4_1_0 - 1.1851851851852*G0_0_0_5_1_1_5_1_1 - 2.30264550264553*G0_0_1_0_0_0_0_0_0 - 2.30264550264553*G0_0_1_0_0_0_0_0_1 + 2.30264550264553*G0_0_1_0_0_0_1_0_0 + 2.30264550264553*G0_0_1_0_0_0_2_0_1 - 2.30264550264553*G0_0_1_0_0_0_3_1_0 - 2.30264550264553*G0_0_1_0_0_0_3_1_1 + 2.30264550264553*G0_0_1_0_0_0_4_1_0 + 2.30264550264553*G0_0_1_0_0_0_5_1_1 - 2.30264550264553*G0_0_1_0_0_1_0_0_0 - 2.30264550264553*G0_0_1_0_0_1_0_0_1 + 2.30264550264553*G0_0_1_0_0_1_1_0_0 + 2.30264550264553*G0_0_1_0_0_1_2_0_1 - 2.30264550264553*G0_0_1_0_0_1_3_1_0 - 2.30264550264553*G0_0_1_0_0_1_3_1_1 + 2.30264550264553*G0_0_1_0_0_1_4_1_0 + 2.30264550264553*G0_0_1_0_0_1_5_1_1 + 2.30264550264553*G0_0_1_1_0_0_0_0_0 + 2.30264550264553*G0_0_1_1_0_0_0_0_1 - 2.30264550264553*G0_0_1_1_0_0_1_0_0 - 2.30264550264553*G0_0_1_1_0_0_2_0_1 + 2.30264550264553*G0_0_1_1_0_0_3_1_0 + 2.30264550264553*G0_0_1_1_0_0_3_1_1 - 2.30264550264553*G0_0_1_1_0_0_4_1_0 - 2.30264550264553*G0_0_1_1_0_0_5_1_1 + 2.30264550264553*G0_0_1_2_0_1_0_0_0 + 2.30264550264553*G0_0_1_2_0_1_0_0_1 - 2.30264550264553*G0_0_1_2_0_1_1_0_0 - 2.30264550264553*G0_0_1_2_0_1_2_0_1 + 2.30264550264553*G0_0_1_2_0_1_3_1_0 + 2.30264550264553*G0_0_1_2_0_1_3_1_1 - 2.30264550264553*G0_0_1_2_0_1_4_1_0 - 2.30264550264553*G0_0_1_2_0_1_5_1_1 - 2.30264550264553*G0_0_1_3_1_0_0_0_0 - 2.30264550264553*G0_0_1_3_1_0_0_0_1 + 2.30264550264553*G0_0_1_3_1_0_1_0_0 + 2.30264550264553*G0_0_1_3_1_0_2_0_1 - 2.30264550264553*G0_0_1_3_1_0_3_1_0 - 2.30264550264553*G0_0_1_3_1_0_3_1_1 + 2.30264550264553*G0_0_1_3_1_0_4_1_0 + 2.30264550264553*G0_0_1_3_1_0_5_1_1 - 2.30264550264553*G0_0_1_3_1_1_0_0_0 - 2.30264550264553*G0_0_1_3_1_1_0_0_1 + 2.30264550264553*G0_0_1_3_1_1_1_0_0 + 2.30264550264553*G0_0_1_3_1_1_2_0_1 - 2.30264550264553*G0_0_1_3_1_1_3_1_0 - 2.30264550264553*G0_0_1_3_1_1_3_1_1 + 2.30264550264553*G0_0_1_3_1_1_4_1_0 + 2.30264550264553*G0_0_1_3_1_1_5_1_1 + 2.30264550264553*G0_0_1_4_1_0_0_0_0 + 2.30264550264553*G0_0_1_4_1_0_0_0_1 - 2.30264550264553*G0_0_1_4_1_0_1_0_0 - 2.30264550264553*G0_0_1_4_1_0_2_0_1 + 2.30264550264553*G0_0_1_4_1_0_3_1_0 + 2.30264550264553*G0_0_1_4_1_0_3_1_1 - 2.30264550264553*G0_0_1_4_1_0_4_1_0 - 2.30264550264553*G0_0_1_4_1_0_5_1_1 + 2.30264550264553*G0_0_1_5_1_1_0_0_0 + 2.30264550264553*G0_0_1_5_1_1_0_0_1 - 2.30264550264553*G0_0_1_5_1_1_1_0_0 - 2.30264550264553*G0_0_1_5_1_1_2_0_1 + 2.30264550264553*G0_0_1_5_1_1_3_1_0 + 2.30264550264553*G0_0_1_5_1_1_3_1_1 - 2.30264550264553*G0_0_1_5_1_1_4_1_0 - 2.30264550264553*G0_0_1_5_1_1_5_1_1 - 0.0677248677248741*G0_1_0_0_0_0_0_0_0 - 0.0677248677248741*G0_1_0_0_0_0_0_0_1 + 0.0677248677248741*G0_1_0_0_0_0_1_0_0 + 0.0677248677248741*G0_1_0_0_0_0_2_0_1 - 0.0677248677248741*G0_1_0_0_0_0_3_1_0 - 0.0677248677248741*G0_1_0_0_0_0_3_1_1 + 0.0677248677248741*G0_1_0_0_0_0_4_1_0 + 0.0677248677248741*G0_1_0_0_0_0_5_1_1 - 0.0677248677248741*G0_1_0_0_0_1_0_0_0 - 0.0677248677248741*G0_1_0_0_0_1_0_0_1 + 0.0677248677248741*G0_1_0_0_0_1_1_0_0 + 0.0677248677248741*G0_1_0_0_0_1_2_0_1 - 0.0677248677248741*G0_1_0_0_0_1_3_1_0 - 0.0677248677248741*G0_1_0_0_0_1_3_1_1 + 0.0677248677248741*G0_1_0_0_0_1_4_1_0 + 0.0677248677248741*G0_1_0_0_0_1_5_1_1 + 0.0677248677248741*G0_1_0_1_0_0_0_0_0 + 0.0677248677248741*G0_1_0_1_0_0_0_0_1 - 0.0677248677248741*G0_1_0_1_0_0_1_0_0 - 0.0677248677248741*G0_1_0_1_0_0_2_0_1 + 0.0677248677248741*G0_1_0_1_0_0_3_1_0 + 0.0677248677248741*G0_1_0_1_0_0_3_1_1 - 0.0677248677248741*G0_1_0_1_0_0_4_1_0 - 0.0677248677248741*G0_1_0_1_0_0_5_1_1 + 0.0677248677248741*G0_1_0_2_0_1_0_0_0 + 0.0677248677248741*G0_1_0_2_0_1_0_0_1 - 0.0677248677248741*G0_1_0_2_0_1_1_0_0 - 0.0677248677248741*G0_1_0_2_0_1_2_0_1 + 0.0677248677248741*G0_1_0_2_0_1_3_1_0 + 0.0677248677248741*G0_1_0_2_0_1_3_1_1 - 0.0677248677248741*G0_1_0_2_0_1_4_1_0 - 0.0677248677248741*G0_1_0_2_0_1_5_1_1 - 0.0677248677248741*G0_1_0_3_1_0_0_0_0 - 0.0677248677248741*G0_1_0_3_1_0_0_0_1 + 0.0677248677248741*G0_1_0_3_1_0_1_0_0 + 0.0677248677248741*G0_1_0_3_1_0_2_0_1 - 0.0677248677248741*G0_1_0_3_1_0_3_1_0 - 0.0677248677248741*G0_1_0_3_1_0_3_1_1 + 0.0677248677248741*G0_1_0_3_1_0_4_1_0 + 0.0677248677248741*G0_1_0_3_1_0_5_1_1 - 0.0677248677248741*G0_1_0_3_1_1_0_0_0 - 0.0677248677248741*G0_1_0_3_1_1_0_0_1 + 0.0677248677248741*G0_1_0_3_1_1_1_0_0 + 0.0677248677248741*G0_1_0_3_1_1_2_0_1 - 0.0677248677248741*G0_1_0_3_1_1_3_1_0 - 0.0677248677248741*G0_1_0_3_1_1_3_1_1 + 0.0677248677248741*G0_1_0_3_1_1_4_1_0 + 0.0677248677248741*G0_1_0_3_1_1_5_1_1 + 0.0677248677248741*G0_1_0_4_1_0_0_0_0 + 0.0677248677248741*G0_1_0_4_1_0_0_0_1 - 0.0677248677248741*G0_1_0_4_1_0_1_0_0 - 0.0677248677248741*G0_1_0_4_1_0_2_0_1 + 0.0677248677248741*G0_1_0_4_1_0_3_1_0 + 0.0677248677248741*G0_1_0_4_1_0_3_1_1 - 0.0677248677248741*G0_1_0_4_1_0_4_1_0 - 0.0677248677248741*G0_1_0_4_1_0_5_1_1 + 0.0677248677248741*G0_1_0_5_1_1_0_0_0 + 0.0677248677248741*G0_1_0_5_1_1_0_0_1 - 0.0677248677248741*G0_1_0_5_1_1_1_0_0 - 0.0677248677248741*G0_1_0_5_1_1_2_0_1 + 0.0677248677248741*G0_1_0_5_1_1_3_1_0 + 0.0677248677248741*G0_1_0_5_1_1_3_1_1 - 0.0677248677248741*G0_1_0_5_1_1_4_1_0 - 0.0677248677248741*G0_1_0_5_1_1_5_1_1;
    A[334] = A[709] - 0.829629629629638*G0_0_0_0_0_0_0_0_0 - 0.829629629629638*G0_0_0_0_0_0_0_0_1 + 0.829629629629638*G0_0_0_0_0_0_1_0_0 + 0.829629629629638*G0_0_0_0_0_0_2_0_1 - 0.829629629629638*G0_0_0_0_0_0_3_1_0 - 0.829629629629638*G0_0_0_0_0_0_3_1_1 + 0.829629629629638*G0_0_0_0_0_0_4_1_0 + 0.829629629629638*G0_0_0_0_0_0_5_1_1 - 0.829629629629638*G0_0_0_0_0_1_0_0_0 - 0.829629629629638*G0_0_0_0_0_1_0_0_1 + 0.829629629629638*G0_0_0_0_0_1_1_0_0 + 0.829629629629638*G0_0_0_0_0_1_2_0_1 - 0.829629629629638*G0_0_0_0_0_1_3_1_0 - 0.829629629629638*G0_0_0_0_0_1_3_1_1 + 0.829629629629638*G0_0_0_0_0_1_4_1_0 + 0.829629629629638*G0_0_0_0_0_1_5_1_1 + 0.829629629629638*G0_0_0_1_0_0_0_0_0 + 0.829629629629638*G0_0_0_1_0_0_0_0_1 - 0.829629629629638*G0_0_0_1_0_0_1_0_0 - 0.829629629629638*G0_0_0_1_0_0_2_0_1 + 0.829629629629638*G0_0_0_1_0_0_3_1_0 + 0.829629629629638*G0_0_0_1_0_0_3_1_1 - 0.829629629629638*G0_0_0_1_0_0_4_1_0 - 0.829629629629638*G0_0_0_1_0_0_5_1_1 + 0.829629629629638*G0_0_0_2_0_1_0_0_0 + 0.829629629629638*G0_0_0_2_0_1_0_0_1 - 0.829629629629638*G0_0_0_2_0_1_1_0_0 - 0.829629629629638*G0_0_0_2_0_1_2_0_1 + 0.829629629629638*G0_0_0_2_0_1_3_1_0 + 0.829629629629638*G0_0_0_2_0_1_3_1_1 - 0.829629629629638*G0_0_0_2_0_1_4_1_0 - 0.829629629629638*G0_0_0_2_0_1_5_1_1 - 0.829629629629638*G0_0_0_3_1_0_0_0_0 - 0.829629629629638*G0_0_0_3_1_0_0_0_1 + 0.829629629629638*G0_0_0_3_1_0_1_0_0 + 0.829629629629638*G0_0_0_3_1_0_2_0_1 - 0.829629629629638*G0_0_0_3_1_0_3_1_0 - 0.829629629629638*G0_0_0_3_1_0_3_1_1 + 0.829629629629638*G0_0_0_3_1_0_4_1_0 + 0.829629629629638*G0_0_0_3_1_0_5_1_1 - 0.829629629629638*G0_0_0_3_1_1_0_0_0 - 0.829629629629638*G0_0_0_3_1_1_0_0_1 + 0.829629629629638*G0_0_0_3_1_1_1_0_0 + 0.829629629629638*G0_0_0_3_1_1_2_0_1 - 0.829629629629638*G0_0_0_3_1_1_3_1_0 - 0.829629629629638*G0_0_0_3_1_1_3_1_1 + 0.829629629629638*G0_0_0_3_1_1_4_1_0 + 0.829629629629638*G0_0_0_3_1_1_5_1_1 + 0.829629629629638*G0_0_0_4_1_0_0_0_0 + 0.829629629629638*G0_0_0_4_1_0_0_0_1 - 0.829629629629638*G0_0_0_4_1_0_1_0_0 - 0.829629629629638*G0_0_0_4_1_0_2_0_1 + 0.829629629629638*G0_0_0_4_1_0_3_1_0 + 0.829629629629638*G0_0_0_4_1_0_3_1_1 - 0.829629629629638*G0_0_0_4_1_0_4_1_0 - 0.829629629629638*G0_0_0_4_1_0_5_1_1 + 0.829629629629638*G0_0_0_5_1_1_0_0_0 + 0.829629629629638*G0_0_0_5_1_1_0_0_1 - 0.829629629629638*G0_0_0_5_1_1_1_0_0 - 0.829629629629638*G0_0_0_5_1_1_2_0_1 + 0.829629629629638*G0_0_0_5_1_1_3_1_0 + 0.829629629629638*G0_0_0_5_1_1_3_1_1 - 0.829629629629638*G0_0_0_5_1_1_4_1_0 - 0.829629629629638*G0_0_0_5_1_1_5_1_1 + 0.829629629629645*G0_1_1_0_0_0_0_0_0 + 0.829629629629645*G0_1_1_0_0_0_0_0_1 - 0.829629629629645*G0_1_1_0_0_0_1_0_0 - 0.829629629629645*G0_1_1_0_0_0_2_0_1 + 0.829629629629645*G0_1_1_0_0_0_3_1_0 + 0.829629629629645*G0_1_1_0_0_0_3_1_1 - 0.829629629629645*G0_1_1_0_0_0_4_1_0 - 0.829629629629645*G0_1_1_0_0_0_5_1_1 + 0.829629629629645*G0_1_1_0_0_1_0_0_0 + 0.829629629629645*G0_1_1_0_0_1_0_0_1 - 0.829629629629645*G0_1_1_0_0_1_1_0_0 - 0.829629629629645*G0_1_1_0_0_1_2_0_1 + 0.829629629629645*G0_1_1_0_0_1_3_1_0 + 0.829629629629645*G0_1_1_0_0_1_3_1_1 - 0.829629629629645*G0_1_1_0_0_1_4_1_0 - 0.829629629629645*G0_1_1_0_0_1_5_1_1 - 0.829629629629645*G0_1_1_1_0_0_0_0_0 - 0.829629629629645*G0_1_1_1_0_0_0_0_1 + 0.829629629629645*G0_1_1_1_0_0_1_0_0 + 0.829629629629645*G0_1_1_1_0_0_2_0_1 - 0.829629629629645*G0_1_1_1_0_0_3_1_0 - 0.829629629629645*G0_1_1_1_0_0_3_1_1 + 0.829629629629645*G0_1_1_1_0_0_4_1_0 + 0.829629629629645*G0_1_1_1_0_0_5_1_1 - 0.829629629629645*G0_1_1_2_0_1_0_0_0 - 0.829629629629645*G0_1_1_2_0_1_0_0_1 + 0.829629629629645*G0_1_1_2_0_1_1_0_0 + 0.829629629629645*G0_1_1_2_0_1_2_0_1 - 0.829629629629645*G0_1_1_2_0_1_3_1_0 - 0.829629629629645*G0_1_1_2_0_1_3_1_1 + 0.829629629629645*G0_1_1_2_0_1_4_1_0 + 0.829629629629645*G0_1_1_2_0_1_5_1_1 + 0.829629629629645*G0_1_1_3_1_0_0_0_0 + 0.829629629629645*G0_1_1_3_1_0_0_0_1 - 0.829629629629645*G0_1_1_3_1_0_1_0_0 - 0.829629629629645*G0_1_1_3_1_0_2_0_1 + 0.829629629629645*G0_1_1_3_1_0_3_1_0 + 0.829629629629645*G0_1_1_3_1_0_3_1_1 - 0.829629629629645*G0_1_1_3_1_0_4_1_0 - 0.829629629629645*G0_1_1_3_1_0_5_1_1 + 0.829629629629645*G0_1_1_3_1_1_0_0_0 + 0.829629629629645*G0_1_1_3_1_1_0_0_1 - 0.829629629629645*G0_1_1_3_1_1_1_0_0 - 0.829629629629645*G0_1_1_3_1_1_2_0_1 + 0.829629629629645*G0_1_1_3_1_1_3_1_0 + 0.829629629629645*G0_1_1_3_1_1_3_1_1 - 0.829629629629645*G0_1_1_3_1_1_4_1_0 - 0.829629629629645*G0_1_1_3_1_1_5_1_1 - 0.829629629629645*G0_1_1_4_1_0_0_0_0 - 0.829629629629645*G0_1_1_4_1_0_0_0_1 + 0.829629629629645*G0_1_1_4_1_0_1_0_0 + 0.829629629629645*G0_1_1_4_1_0_2_0_1 - 0.829629629629645*G0_1_1_4_1_0_3_1_0 - 0.829629629629645*G0_1_1_4_1_0_3_1_1 + 0.829629629629645*G0_1_1_4_1_0_4_1_0 + 0.829629629629645*G0_1_1_4_1_0_5_1_1 - 0.829629629629645*G0_1_1_5_1_1_0_0_0 - 0.829629629629645*G0_1_1_5_1_1_0_0_1 + 0.829629629629645*G0_1_1_5_1_1_1_0_0 + 0.829629629629645*G0_1_1_5_1_1_2_0_1 - 0.829629629629645*G0_1_1_5_1_1_3_1_0 - 0.829629629629645*G0_1_1_5_1_1_3_1_1 + 0.829629629629645*G0_1_1_5_1_1_4_1_0 + 0.829629629629645*G0_1_1_5_1_1_5_1_1;
    A[131] = A[334];
    A[805] = A[559] - 1.28677248677251*G0_0_0_0_0_0_0_0_0 - 1.28677248677251*G0_0_0_0_0_0_0_0_1 + 1.28677248677251*G0_0_0_0_0_0_1_0_0 + 1.28677248677251*G0_0_0_0_0_0_2_0_1 - 1.28677248677251*G0_0_0_0_0_0_3_1_0 - 1.28677248677251*G0_0_0_0_0_0_3_1_1 + 1.28677248677251*G0_0_0_0_0_0_4_1_0 + 1.28677248677251*G0_0_0_0_0_0_5_1_1 - 1.28677248677251*G0_0_0_0_0_1_0_0_0 - 1.28677248677251*G0_0_0_0_0_1_0_0_1 + 1.28677248677251*G0_0_0_0_0_1_1_0_0 + 1.28677248677251*G0_0_0_0_0_1_2_0_1 - 1.28677248677251*G0_0_0_0_0_1_3_1_0 - 1.28677248677251*G0_0_0_0_0_1_3_1_1 + 1.28677248677251*G0_0_0_0_0_1_4_1_0 + 1.28677248677251*G0_0_0_0_0_1_5_1_1 + 1.28677248677251*G0_0_0_1_0_0_0_0_0 + 1.28677248677251*G0_0_0_1_0_0_0_0_1 - 1.28677248677251*G0_0_0_1_0_0_1_0_0 - 1.28677248677251*G0_0_0_1_0_0_2_0_1 + 1.28677248677251*G0_0_0_1_0_0_3_1_0 + 1.28677248677251*G0_0_0_1_0_0_3_1_1 - 1.28677248677251*G0_0_0_1_0_0_4_1_0 - 1.28677248677251*G0_0_0_1_0_0_5_1_1 + 1.28677248677251*G0_0_0_2_0_1_0_0_0 + 1.28677248677251*G0_0_0_2_0_1_0_0_1 - 1.28677248677251*G0_0_0_2_0_1_1_0_0 - 1.28677248677251*G0_0_0_2_0_1_2_0_1 + 1.28677248677251*G0_0_0_2_0_1_3_1_0 + 1.28677248677251*G0_0_0_2_0_1_3_1_1 - 1.28677248677251*G0_0_0_2_0_1_4_1_0 - 1.28677248677251*G0_0_0_2_0_1_5_1_1 - 1.28677248677251*G0_0_0_3_1_0_0_0_0 - 1.28677248677251*G0_0_0_3_1_0_0_0_1 + 1.28677248677251*G0_0_0_3_1_0_1_0_0 + 1.28677248677251*G0_0_0_3_1_0_2_0_1 - 1.28677248677251*G0_0_0_3_1_0_3_1_0 - 1.28677248677251*G0_0_0_3_1_0_3_1_1 + 1.28677248677251*G0_0_0_3_1_0_4_1_0 + 1.28677248677251*G0_0_0_3_1_0_5_1_1 - 1.28677248677251*G0_0_0_3_1_1_0_0_0 - 1.28677248677251*G0_0_0_3_1_1_0_0_1 + 1.28677248677251*G0_0_0_3_1_1_1_0_0 + 1.28677248677251*G0_0_0_3_1_1_2_0_1 - 1.28677248677251*G0_0_0_3_1_1_3_1_0 - 1.28677248677251*G0_0_0_3_1_1_3_1_1 + 1.28677248677251*G0_0_0_3_1_1_4_1_0 + 1.28677248677251*G0_0_0_3_1_1_5_1_1 + 1.28677248677251*G0_0_0_4_1_0_0_0_0 + 1.28677248677251*G0_0_0_4_1_0_0_0_1 - 1.28677248677251*G0_0_0_4_1_0_1_0_0 - 1.28677248677251*G0_0_0_4_1_0_2_0_1 + 1.28677248677251*G0_0_0_4_1_0_3_1_0 + 1.28677248677251*G0_0_0_4_1_0_3_1_1 - 1.28677248677251*G0_0_0_4_1_0_4_1_0 - 1.28677248677251*G0_0_0_4_1_0_5_1_1 + 1.28677248677251*G0_0_0_5_1_1_0_0_0 + 1.28677248677251*G0_0_0_5_1_1_0_0_1 - 1.28677248677251*G0_0_0_5_1_1_1_0_0 - 1.28677248677251*G0_0_0_5_1_1_2_0_1 + 1.28677248677251*G0_0_0_5_1_1_3_1_0 + 1.28677248677251*G0_0_0_5_1_1_3_1_1 - 1.28677248677251*G0_0_0_5_1_1_4_1_0 - 1.28677248677251*G0_0_0_5_1_1_5_1_1 - 2.40423280423284*G0_0_1_0_0_0_0_0_0 - 2.40423280423284*G0_0_1_0_0_0_0_0_1 + 2.40423280423284*G0_0_1_0_0_0_1_0_0 + 2.40423280423284*G0_0_1_0_0_0_2_0_1 - 2.40423280423284*G0_0_1_0_0_0_3_1_0 - 2.40423280423284*G0_0_1_0_0_0_3_1_1 + 2.40423280423284*G0_0_1_0_0_0_4_1_0 + 2.40423280423284*G0_0_1_0_0_0_5_1_1 - 2.40423280423284*G0_0_1_0_0_1_0_0_0 - 2.40423280423284*G0_0_1_0_0_1_0_0_1 + 2.40423280423284*G0_0_1_0_0_1_1_0_0 + 2.40423280423284*G0_0_1_0_0_1_2_0_1 - 2.40423280423284*G0_0_1_0_0_1_3_1_0 - 2.40423280423284*G0_0_1_0_0_1_3_1_1 + 2.40423280423284*G0_0_1_0_0_1_4_1_0 + 2.40423280423284*G0_0_1_0_0_1_5_1_1 + 2.40423280423284*G0_0_1_1_0_0_0_0_0 + 2.40423280423284*G0_0_1_1_0_0_0_0_1 - 2.40423280423284*G0_0_1_1_0_0_1_0_0 - 2.40423280423284*G0_0_1_1_0_0_2_0_1 + 2.40423280423284*G0_0_1_1_0_0_3_1_0 + 2.40423280423284*G0_0_1_1_0_0_3_1_1 - 2.40423280423284*G0_0_1_1_0_0_4_1_0 - 2.40423280423284*G0_0_1_1_0_0_5_1_1 + 2.40423280423284*G0_0_1_2_0_1_0_0_0 + 2.40423280423284*G0_0_1_2_0_1_0_0_1 - 2.40423280423284*G0_0_1_2_0_1_1_0_0 - 2.40423280423284*G0_0_1_2_0_1_2_0_1 + 2.40423280423284*G0_0_1_2_0_1_3_1_0 + 2.40423280423284*G0_0_1_2_0_1_3_1_1 - 2.40423280423284*G0_0_1_2_0_1_4_1_0 - 2.40423280423284*G0_0_1_2_0_1_5_1_1 - 2.40423280423284*G0_0_1_3_1_0_0_0_0 - 2.40423280423284*G0_0_1_3_1_0_0_0_1 + 2.40423280423284*G0_0_1_3_1_0_1_0_0 + 2.40423280423284*G0_0_1_3_1_0_2_0_1 - 2.40423280423284*G0_0_1_3_1_0_3_1_0 - 2.40423280423284*G0_0_1_3_1_0_3_1_1 + 2.40423280423284*G0_0_1_3_1_0_4_1_0 + 2.40423280423284*G0_0_1_3_1_0_5_1_1 - 2.40423280423284*G0_0_1_3_1_1_0_0_0 - 2.40423280423284*G0_0_1_3_1_1_0_0_1 + 2.40423280423284*G0_0_1_3_1_1_1_0_0 + 2.40423280423284*G0_0_1_3_1_1_2_0_1 - 2.40423280423284*G0_0_1_3_1_1_3_1_0 - 2.40423280423284*G0_0_1_3_1_1_3_1_1 + 2.40423280423284*G0_0_1_3_1_1_4_1_0 + 2.40423280423284*G0_0_1_3_1_1_5_1_1 + 2.40423280423284*G0_0_1_4_1_0_0_0_0 + 2.40423280423284*G0_0_1_4_1_0_0_0_1 - 2.40423280423284*G0_0_1_4_1_0_1_0_0 - 2.40423280423284*G0_0_1_4_1_0_2_0_1 + 2.40423280423284*G0_0_1_4_1_0_3_1_0 + 2.40423280423284*G0_0_1_4_1_0_3_1_1 - 2.40423280423284*G0_0_1_4_1_0_4_1_0 - 2.40423280423284*G0_0_1_4_1_0_5_1_1 + 2.40423280423284*G0_0_1_5_1_1_0_0_0 + 2.40423280423284*G0_0_1_5_1_1_0_0_1 - 2.40423280423284*G0_0_1_5_1_1_1_0_0 - 2.40423280423284*G0_0_1_5_1_1_2_0_1 + 2.40423280423284*G0_0_1_5_1_1_3_1_0 + 2.40423280423284*G0_0_1_5_1_1_3_1_1 - 2.40423280423284*G0_0_1_5_1_1_4_1_0 - 2.40423280423284*G0_0_1_5_1_1_5_1_1 - 0.169312169312178*G0_1_0_0_0_0_0_0_0 - 0.169312169312178*G0_1_0_0_0_0_0_0_1 + 0.169312169312178*G0_1_0_0_0_0_1_0_0 + 0.169312169312178*G0_1_0_0_0_0_2_0_1 - 0.169312169312178*G0_1_0_0_0_0_3_1_0 - 0.169312169312178*G0_1_0_0_0_0_3_1_1 + 0.169312169312178*G0_1_0_0_0_0_4_1_0 + 0.169312169312178*G0_1_0_0_0_0_5_1_1 - 0.169312169312178*G0_1_0_0_0_1_0_0_0 - 0.169312169312178*G0_1_0_0_0_1_0_0_1 + 0.169312169312178*G0_1_0_0_0_1_1_0_0 + 0.169312169312178*G0_1_0_0_0_1_2_0_1 - 0.169312169312178*G0_1_0_0_0_1_3_1_0 - 0.169312169312178*G0_1_0_0_0_1_3_1_1 + 0.169312169312178*G0_1_0_0_0_1_4_1_0 + 0.169312169312178*G0_1_0_0_0_1_5_1_1 + 0.169312169312178*G0_1_0_1_0_0_0_0_0 + 0.169312169312178*G0_1_0_1_0_0_0_0_1 - 0.169312169312178*G0_1_0_1_0_0_1_0_0 - 0.169312169312178*G0_1_0_1_0_0_2_0_1 + 0.169312169312178*G0_1_0_1_0_0_3_1_0 + 0.169312169312178*G0_1_0_1_0_0_3_1_1 - 0.169312169312178*G0_1_0_1_0_0_4_1_0 - 0.169312169312178*G0_1_0_1_0_0_5_1_1 + 0.169312169312178*G0_1_0_2_0_1_0_0_0 + 0.169312169312178*G0_1_0_2_0_1_0_0_1 - 0.169312169312178*G0_1_0_2_0_1_1_0_0 - 0.169312169312178*G0_1_0_2_0_1_2_0_1 + 0.169312169312178*G0_1_0_2_0_1_3_1_0 + 0.169312169312178*G0_1_0_2_0_1_3_1_1 - 0.169312169312178*G0_1_0_2_0_1_4_1_0 - 0.169312169312178*G0_1_0_2_0_1_5_1_1 - 0.169312169312178*G0_1_0_3_1_0_0_0_0 - 0.169312169312178*G0_1_0_3_1_0_0_0_1 + 0.169312169312178*G0_1_0_3_1_0_1_0_0 + 0.169312169312178*G0_1_0_3_1_0_2_0_1 - 0.169312169312178*G0_1_0_3_1_0_3_1_0 - 0.169312169312178*G0_1_0_3_1_0_3_1_1 + 0.169312169312178*G0_1_0_3_1_0_4_1_0 + 0.169312169312178*G0_1_0_3_1_0_5_1_1 - 0.169312169312178*G0_1_0_3_1_1_0_0_0 - 0.169312169312178*G0_1_0_3_1_1_0_0_1 + 0.169312169312178*G0_1_0_3_1_1_1_0_0 + 0.169312169312178*G0_1_0_3_1_1_2_0_1 - 0.169312169312178*G0_1_0_3_1_1_3_1_0 - 0.169312169312178*G0_1_0_3_1_1_3_1_1 + 0.169312169312178*G0_1_0_3_1_1_4_1_0 + 0.169312169312178*G0_1_0_3_1_1_5_1_1 + 0.169312169312178*G0_1_0_4_1_0_0_0_0 + 0.169312169312178*G0_1_0_4_1_0_0_0_1 - 0.169312169312178*G0_1_0_4_1_0_1_0_0 - 0.169312169312178*G0_1_0_4_1_0_2_0_1 + 0.169312169312178*G0_1_0_4_1_0_3_1_0 + 0.169312169312178*G0_1_0_4_1_0_3_1_1 - 0.169312169312178*G0_1_0_4_1_0_4_1_0 - 0.169312169312178*G0_1_0_4_1_0_5_1_1 + 0.169312169312178*G0_1_0_5_1_1_0_0_0 + 0.169312169312178*G0_1_0_5_1_1_0_0_1 - 0.169312169312178*G0_1_0_5_1_1_1_0_0 - 0.169312169312178*G0_1_0_5_1_1_2_0_1 + 0.169312169312178*G0_1_0_5_1_1_3_1_0 + 0.169312169312178*G0_1_0_5_1_1_3_1_1 - 0.169312169312178*G0_1_0_5_1_1_4_1_0 - 0.169312169312178*G0_1_0_5_1_1_5_1_1;
    A[94] = A[559];
    A[590] = A[125];
    A[652] = A[309] + 1.28677248677251*G0_0_0_0_0_0_0_0_0 + 1.28677248677251*G0_0_0_0_0_0_0_0_1 - 1.28677248677251*G0_0_0_0_0_0_1_0_0 - 1.28677248677251*G0_0_0_0_0_0_2_0_1 + 1.28677248677251*G0_0_0_0_0_0_3_1_0 + 1.28677248677251*G0_0_0_0_0_0_3_1_1 - 1.28677248677251*G0_0_0_0_0_0_4_1_0 - 1.28677248677251*G0_0_0_0_0_0_5_1_1 + 1.28677248677251*G0_0_0_0_0_1_0_0_0 + 1.28677248677251*G0_0_0_0_0_1_0_0_1 - 1.28677248677251*G0_0_0_0_0_1_1_0_0 - 1.28677248677251*G0_0_0_0_0_1_2_0_1 + 1.28677248677251*G0_0_0_0_0_1_3_1_0 + 1.28677248677251*G0_0_0_0_0_1_3_1_1 - 1.28677248677251*G0_0_0_0_0_1_4_1_0 - 1.28677248677251*G0_0_0_0_0_1_5_1_1 - 1.28677248677251*G0_0_0_1_0_0_0_0_0 - 1.28677248677251*G0_0_0_1_0_0_0_0_1 + 1.28677248677251*G0_0_0_1_0_0_1_0_0 + 1.28677248677251*G0_0_0_1_0_0_2_0_1 - 1.28677248677251*G0_0_0_1_0_0_3_1_0 - 1.28677248677251*G0_0_0_1_0_0_3_1_1 + 1.28677248677251*G0_0_0_1_0_0_4_1_0 + 1.28677248677251*G0_0_0_1_0_0_5_1_1 - 1.28677248677251*G0_0_0_2_0_1_0_0_0 - 1.28677248677251*G0_0_0_2_0_1_0_0_1 + 1.28677248677251*G0_0_0_2_0_1_1_0_0 + 1.28677248677251*G0_0_0_2_0_1_2_0_1 - 1.28677248677251*G0_0_0_2_0_1_3_1_0 - 1.28677248677251*G0_0_0_2_0_1_3_1_1 + 1.28677248677251*G0_0_0_2_0_1_4_1_0 + 1.28677248677251*G0_0_0_2_0_1_5_1_1 + 1.28677248677251*G0_0_0_3_1_0_0_0_0 + 1.28677248677251*G0_0_0_3_1_0_0_0_1 - 1.28677248677251*G0_0_0_3_1_0_1_0_0 - 1.28677248677251*G0_0_0_3_1_0_2_0_1 + 1.28677248677251*G0_0_0_3_1_0_3_1_0 + 1.28677248677251*G0_0_0_3_1_0_3_1_1 - 1.28677248677251*G0_0_0_3_1_0_4_1_0 - 1.28677248677251*G0_0_0_3_1_0_5_1_1 + 1.28677248677251*G0_0_0_3_1_1_0_0_0 + 1.28677248677251*G0_0_0_3_1_1_0_0_1 - 1.28677248677251*G0_0_0_3_1_1_1_0_0 - 1.28677248677251*G0_0_0_3_1_1_2_0_1 + 1.28677248677251*G0_0_0_3_1_1_3_1_0 + 1.28677248677251*G0_0_0_3_1_1_3_1_1 - 1.28677248677251*G0_0_0_3_1_1_4_1_0 - 1.28677248677251*G0_0_0_3_1_1_5_1_1 - 1.28677248677251*G0_0_0_4_1_0_0_0_0 - 1.28677248677251*G0_0_0_4_1_0_0_0_1 + 1.28677248677251*G0_0_0_4_1_0_1_0_0 + 1.28677248677251*G0_0_0_4_1_0_2_0_1 - 1.28677248677251*G0_0_0_4_1_0_3_1_0 - 1.28677248677251*G0_0_0_4_1_0_3_1_1 + 1.28677248677251*G0_0_0_4_1_0_4_1_0 + 1.28677248677251*G0_0_0_4_1_0_5_1_1 - 1.28677248677251*G0_0_0_5_1_1_0_0_0 - 1.28677248677251*G0_0_0_5_1_1_0_0_1 + 1.28677248677251*G0_0_0_5_1_1_1_0_0 + 1.28677248677251*G0_0_0_5_1_1_2_0_1 - 1.28677248677251*G0_0_0_5_1_1_3_1_0 - 1.28677248677251*G0_0_0_5_1_1_3_1_1 + 1.28677248677251*G0_0_0_5_1_1_4_1_0 + 1.28677248677251*G0_0_0_5_1_1_5_1_1 - 1.28677248677251*G0_1_1_0_0_0_0_0_0 - 1.28677248677251*G0_1_1_0_0_0_0_0_1 + 1.28677248677251*G0_1_1_0_0_0_1_0_0 + 1.28677248677251*G0_1_1_0_0_0_2_0_1 - 1.28677248677251*G0_1_1_0_0_0_3_1_0 - 1.28677248677251*G0_1_1_0_0_0_3_1_1 + 1.28677248677251*G0_1_1_0_0_0_4_1_0 + 1.28677248677251*G0_1_1_0_0_0_5_1_1 - 1.28677248677251*G0_1_1_0_0_1_0_0_0 - 1.28677248677251*G0_1_1_0_0_1_0_0_1 + 1.28677248677251*G0_1_1_0_0_1_1_0_0 + 1.28677248677251*G0_1_1_0_0_1_2_0_1 - 1.28677248677251*G0_1_1_0_0_1_3_1_0 - 1.28677248677251*G0_1_1_0_0_1_3_1_1 + 1.28677248677251*G0_1_1_0_0_1_4_1_0 + 1.28677248677251*G0_1_1_0_0_1_5_1_1 + 1.28677248677251*G0_1_1_1_0_0_0_0_0 + 1.28677248677251*G0_1_1_1_0_0_0_0_1 - 1.28677248677251*G0_1_1_1_0_0_1_0_0 - 1.28677248677251*G0_1_1_1_0_0_2_0_1 + 1.28677248677251*G0_1_1_1_0_0_3_1_0 + 1.28677248677251*G0_1_1_1_0_0_3_1_1 - 1.28677248677251*G0_1_1_1_0_0_4_1_0 - 1.28677248677251*G0_1_1_1_0_0_5_1_1 + 1.28677248677251*G0_1_1_2_0_1_0_0_0 + 1.28677248677251*G0_1_1_2_0_1_0_0_1 - 1.28677248677251*G0_1_1_2_0_1_1_0_0 - 1.28677248677251*G0_1_1_2_0_1_2_0_1 + 1.28677248677251*G0_1_1_2_0_1_3_1_0 + 1.28677248677251*G0_1_1_2_0_1_3_1_1 - 1.28677248677251*G0_1_1_2_0_1_4_1_0 - 1.28677248677251*G0_1_1_2_0_1_5_1_1 - 1.28677248677251*G0_1_1_3_1_0_0_0_0 - 1.28677248677251*G0_1_1_3_1_0_0_0_1 + 1.28677248677251*G0_1_1_3_1_0_1_0_0 + 1.28677248677251*G0_1_1_3_1_0_2_0_1 - 1.28677248677251*G0_1_1_3_1_0_3_1_0 - 1.28677248677251*G0_1_1_3_1_0_3_1_1 + 1.28677248677251*G0_1_1_3_1_0_4_1_0 + 1.28677248677251*G0_1_1_3_1_0_5_1_1 - 1.28677248677251*G0_1_1_3_1_1_0_0_0 - 1.28677248677251*G0_1_1_3_1_1_0_0_1 + 1.28677248677251*G0_1_1_3_1_1_1_0_0 + 1.28677248677251*G0_1_1_3_1_1_2_0_1 - 1.28677248677251*G0_1_1_3_1_1_3_1_0 - 1.28677248677251*G0_1_1_3_1_1_3_1_1 + 1.28677248677251*G0_1_1_3_1_1_4_1_0 + 1.28677248677251*G0_1_1_3_1_1_5_1_1 + 1.28677248677251*G0_1_1_4_1_0_0_0_0 + 1.28677248677251*G0_1_1_4_1_0_0_0_1 - 1.28677248677251*G0_1_1_4_1_0_1_0_0 - 1.28677248677251*G0_1_1_4_1_0_2_0_1 + 1.28677248677251*G0_1_1_4_1_0_3_1_0 + 1.28677248677251*G0_1_1_4_1_0_3_1_1 - 1.28677248677251*G0_1_1_4_1_0_4_1_0 - 1.28677248677251*G0_1_1_4_1_0_5_1_1 + 1.28677248677251*G0_1_1_5_1_1_0_0_0 + 1.28677248677251*G0_1_1_5_1_1_0_0_1 - 1.28677248677251*G0_1_1_5_1_1_1_0_0 - 1.28677248677251*G0_1_1_5_1_1_2_0_1 + 1.28677248677251*G0_1_1_5_1_1_3_1_0 + 1.28677248677251*G0_1_1_5_1_1_3_1_1 - 1.28677248677251*G0_1_1_5_1_1_4_1_0 - 1.28677248677251*G0_1_1_5_1_1_5_1_1;
    A[187] = A[652];
    A[216] = A[652] + 1.11746031746033*G0_0_1_0_0_0_0_0_0 + 1.11746031746033*G0_0_1_0_0_0_0_0_1 - 1.11746031746033*G0_0_1_0_0_0_1_0_0 - 1.11746031746033*G0_0_1_0_0_0_2_0_1 + 1.11746031746033*G0_0_1_0_0_0_3_1_0 + 1.11746031746033*G0_0_1_0_0_0_3_1_1 - 1.11746031746033*G0_0_1_0_0_0_4_1_0 - 1.11746031746033*G0_0_1_0_0_0_5_1_1 + 1.11746031746033*G0_0_1_0_0_1_0_0_0 + 1.11746031746033*G0_0_1_0_0_1_0_0_1 - 1.11746031746033*G0_0_1_0_0_1_1_0_0 - 1.11746031746033*G0_0_1_0_0_1_2_0_1 + 1.11746031746033*G0_0_1_0_0_1_3_1_0 + 1.11746031746033*G0_0_1_0_0_1_3_1_1 - 1.11746031746033*G0_0_1_0_0_1_4_1_0 - 1.11746031746033*G0_0_1_0_0_1_5_1_1 - 1.11746031746033*G0_0_1_1_0_0_0_0_0 - 1.11746031746033*G0_0_1_1_0_0_0_0_1 + 1.11746031746033*G0_0_1_1_0_0_1_0_0 + 1.11746031746033*G0_0_1_1_0_0_2_0_1 - 1.11746031746033*G0_0_1_1_0_0_3_1_0 - 1.11746031746033*G0_0_1_1_0_0_3_1_1 + 1.11746031746033*G0_0_1_1_0_0_4_1_0 + 1.11746031746033*G0_0_1_1_0_0_5_1_1 - 1.11746031746033*G0_0_1_2_0_1_0_0_0 - 1.11746031746033*G0_0_1_2_0_1_0_0_1 + 1.11746031746033*G0_0_1_2_0_1_1_0_0 + 1.11746031746033*G0_0_1_2_0_1_2_0_1 - 1.11746031746033*G0_0_1_2_0_1_3_1_0 - 1.11746031746033*G0_0_1_2_0_1_3_1_1 + 1.11746031746033*G0_0_1_2_0_1_4_1_0 + 1.11746031746033*G0_0_1_2_0_1_5_1_1 + 1.11746031746033*G0_0_1_3_1_0_0_0_0 + 1.11746031746033*G0_0_1_3_1_0_0_0_1 - 1.11746031746033*G0_0_1_3_1_0_1_0_0 - 1.11746031746033*G0_0_1_3_1_0_2_0_1 + 1.11746031746033*G0_0_1_3_1_0_3_1_0 + 1.11746031746033*G0_0_1_3_1_0_3_1_1 - 1.11746031746033*G0_0_1_3_1_0_4_1_0 - 1.11746031746033*G0_0_1_3_1_0_5_1_1 + 1.11746031746033*G0_0_1_3_1_1_0_0_0 + 1.11746031746033*G0_0_1_3_1_1_0_0_1 - 1.11746031746033*G0_0_1_3_1_1_1_0_0 - 1.11746031746033*G0_0_1_3_1_1_2_0_1 + 1.11746031746033*G0_0_1_3_1_1_3_1_0 + 1.11746031746033*G0_0_1_3_1_1_3_1_1 - 1.11746031746033*G0_0_1_3_1_1_4_1_0 - 1.11746031746033*G0_0_1_3_1_1_5_1_1 - 1.11746031746033*G0_0_1_4_1_0_0_0_0 - 1.11746031746033*G0_0_1_4_1_0_0_0_1 + 1.11746031746033*G0_0_1_4_1_0_1_0_0 + 1.11746031746033*G0_0_1_4_1_0_2_0_1 - 1.11746031746033*G0_0_1_4_1_0_3_1_0 - 1.11746031746033*G0_0_1_4_1_0_3_1_1 + 1.11746031746033*G0_0_1_4_1_0_4_1_0 + 1.11746031746033*G0_0_1_4_1_0_5_1_1 - 1.11746031746033*G0_0_1_5_1_1_0_0_0 - 1.11746031746033*G0_0_1_5_1_1_0_0_1 + 1.11746031746033*G0_0_1_5_1_1_1_0_0 + 1.11746031746033*G0_0_1_5_1_1_2_0_1 - 1.11746031746033*G0_0_1_5_1_1_3_1_0 - 1.11746031746033*G0_0_1_5_1_1_3_1_1 + 1.11746031746033*G0_0_1_5_1_1_4_1_0 + 1.11746031746033*G0_0_1_5_1_1_5_1_1 - 1.11746031746033*G0_1_0_0_0_0_0_0_0 - 1.11746031746033*G0_1_0_0_0_0_0_0_1 + 1.11746031746033*G0_1_0_0_0_0_1_0_0 + 1.11746031746033*G0_1_0_0_0_0_2_0_1 - 1.11746031746033*G0_1_0_0_0_0_3_1_0 - 1.11746031746033*G0_1_0_0_0_0_3_1_1 + 1.11746031746033*G0_1_0_0_0_0_4_1_0 + 1.11746031746033*G0_1_0_0_0_0_5_1_1 - 1.11746031746033*G0_1_0_0_0_1_0_0_0 - 1.11746031746033*G0_1_0_0_0_1_0_0_1 + 1.11746031746033*G0_1_0_0_0_1_1_0_0 + 1.11746031746033*G0_1_0_0_0_1_2_0_1 - 1.11746031746033*G0_1_0_0_0_1_3_1_0 - 1.11746031746033*G0_1_0_0_0_1_3_1_1 + 1.11746031746033*G0_1_0_0_0_1_4_1_0 + 1.11746031746033*G0_1_0_0_0_1_5_1_1 + 1.11746031746033*G0_1_0_1_0_0_0_0_0 + 1.11746031746033*G0_1_0_1_0_0_0_0_1 - 1.11746031746033*G0_1_0_1_0_0_1_0_0 - 1.11746031746033*G0_1_0_1_0_0_2_0_1 + 1.11746031746033*G0_1_0_1_0_0_3_1_0 + 1.11746031746033*G0_1_0_1_0_0_3_1_1 - 1.11746031746033*G0_1_0_1_0_0_4_1_0 - 1.11746031746033*G0_1_0_1_0_0_5_1_1 + 1.11746031746033*G0_1_0_2_0_1_0_0_0 + 1.11746031746033*G0_1_0_2_0_1_0_0_1 - 1.11746031746033*G0_1_0_2_0_1_1_0_0 - 1.11746031746033*G0_1_0_2_0_1_2_0_1 + 1.11746031746033*G0_1_0_2_0_1_3_1_0 + 1.11746031746033*G0_1_0_2_0_1_3_1_1 - 1.11746031746033*G0_1_0_2_0_1_4_1_0 - 1.11746031746033*G0_1_0_2_0_1_5_1_1 - 1.11746031746033*G0_1_0_3_1_0_0_0_0 - 1.11746031746033*G0_1_0_3_1_0_0_0_1 + 1.11746031746033*G0_1_0_3_1_0_1_0_0 + 1.11746031746033*G0_1_0_3_1_0_2_0_1 - 1.11746031746033*G0_1_0_3_1_0_3_1_0 - 1.11746031746033*G0_1_0_3_1_0_3_1_1 + 1.11746031746033*G0_1_0_3_1_0_4_1_0 + 1.11746031746033*G0_1_0_3_1_0_5_1_1 - 1.11746031746033*G0_1_0_3_1_1_0_0_0 - 1.11746031746033*G0_1_0_3_1_1_0_0_1 + 1.11746031746033*G0_1_0_3_1_1_1_0_0 + 1.11746031746033*G0_1_0_3_1_1_2_0_1 - 1.11746031746033*G0_1_0_3_1_1_3_1_0 - 1.11746031746033*G0_1_0_3_1_1_3_1_1 + 1.11746031746033*G0_1_0_3_1_1_4_1_0 + 1.11746031746033*G0_1_0_3_1_1_5_1_1 + 1.11746031746033*G0_1_0_4_1_0_0_0_0 + 1.11746031746033*G0_1_0_4_1_0_0_0_1 - 1.11746031746033*G0_1_0_4_1_0_1_0_0 - 1.11746031746033*G0_1_0_4_1_0_2_0_1 + 1.11746031746033*G0_1_0_4_1_0_3_1_0 + 1.11746031746033*G0_1_0_4_1_0_3_1_1 - 1.11746031746033*G0_1_0_4_1_0_4_1_0 - 1.11746031746033*G0_1_0_4_1_0_5_1_1 + 1.11746031746033*G0_1_0_5_1_1_0_0_0 + 1.11746031746033*G0_1_0_5_1_1_0_0_1 - 1.11746031746033*G0_1_0_5_1_1_1_0_0 - 1.11746031746033*G0_1_0_5_1_1_2_0_1 + 1.11746031746033*G0_1_0_5_1_1_3_1_0 + 1.11746031746033*G0_1_0_5_1_1_3_1_1 - 1.11746031746033*G0_1_0_5_1_1_4_1_0 - 1.11746031746033*G0_1_0_5_1_1_5_1_1;
    A[242] = -0.778835978835986*G0_0_1_0_0_0_0_0_0 - 0.778835978835986*G0_0_1_0_0_0_0_0_1 + 0.778835978835986*G0_0_1_0_0_0_1_0_0 + 0.778835978835986*G0_0_1_0_0_0_2_0_1 - 0.778835978835986*G0_0_1_0_0_0_3_1_0 - 0.778835978835986*G0_0_1_0_0_0_3_1_1 + 0.778835978835986*G0_0_1_0_0_0_4_1_0 + 0.778835978835986*G0_0_1_0_0_0_5_1_1 - 0.778835978835986*G0_0_1_0_0_1_0_0_0 - 0.778835978835986*G0_0_1_0_0_1_0_0_1 + 0.778835978835986*G0_0_1_0_0_1_1_0_0 + 0.778835978835986*G0_0_1_0_0_1_2_0_1 - 0.778835978835986*G0_0_1_0_0_1_3_1_0 - 0.778835978835986*G0_0_1_0_0_1_3_1_1 + 0.778835978835986*G0_0_1_0_0_1_4_1_0 + 0.778835978835986*G0_0_1_0_0_1_5_1_1 + 0.778835978835986*G0_0_1_1_0_0_0_0_0 + 0.778835978835986*G0_0_1_1_0_0_0_0_1 - 0.778835978835986*G0_0_1_1_0_0_1_0_0 - 0.778835978835986*G0_0_1_1_0_0_2_0_1 + 0.778835978835986*G0_0_1_1_0_0_3_1_0 + 0.778835978835986*G0_0_1_1_0_0_3_1_1 - 0.778835978835986*G0_0_1_1_0_0_4_1_0 - 0.778835978835986*G0_0_1_1_0_0_5_1_1 + 0.778835978835986*G0_0_1_2_0_1_0_0_0 + 0.778835978835986*G0_0_1_2_0_1_0_0_1 - 0.778835978835986*G0_0_1_2_0_1_1_0_0 - 0.778835978835986*G0_0_1_2_0_1_2_0_1 + 0.778835978835986*G0_0_1_2_0_1_3_1_0 + 0.778835978835986*G0_0_1_2_0_1_3_1_1 - 0.778835978835986*G0_0_1_2_0_1_4_1_0 - 0.778835978835986*G0_0_1_2_0_1_5_1_1 - 0.778835978835986*G0_0_1_3_1_0_0_0_0 - 0.778835978835986*G0_0_1_3_1_0_0_0_1 + 0.778835978835986*G0_0_1_3_1_0_1_0_0 + 0.778835978835986*G0_0_1_3_1_0_2_0_1 - 0.778835978835986*G0_0_1_3_1_0_3_1_0 - 0.778835978835986*G0_0_1_3_1_0_3_1_1 + 0.778835978835986*G0_0_1_3_1_0_4_1_0 + 0.778835978835986*G0_0_1_3_1_0_5_1_1 - 0.778835978835986*G0_0_1_3_1_1_0_0_0 - 0.778835978835986*G0_0_1_3_1_1_0_0_1 + 0.778835978835986*G0_0_1_3_1_1_1_0_0 + 0.778835978835986*G0_0_1_3_1_1_2_0_1 - 0.778835978835986*G0_0_1_3_1_1_3_1_0 - 0.778835978835986*G0_0_1_3_1_1_3_1_1 + 0.778835978835986*G0_0_1_3_1_1_4_1_0 + 0.778835978835986*G0_0_1_3_1_1_5_1_1 + 0.778835978835986*G0_0_1_4_1_0_0_0_0 + 0.778835978835986*G0_0_1_4_1_0_0_0_1 - 0.778835978835986*G0_0_1_4_1_0_1_0_0 - 0.778835978835986*G0_0_1_4_1_0_2_0_1 + 0.778835978835986*G0_0_1_4_1_0_3_1_0 + 0.778835978835986*G0_0_1_4_1_0_3_1_1 - 0.778835978835986*G0_0_1_4_1_0_4_1_0 - 0.778835978835986*G0_0_1_4_1_0_5_1_1 + 0.778835978835986*G0_0_1_5_1_1_0_0_0 + 0.778835978835986*G0_0_1_5_1_1_0_0_1 - 0.778835978835986*G0_0_1_5_1_1_1_0_0 - 0.778835978835986*G0_0_1_5_1_1_2_0_1 + 0.778835978835986*G0_0_1_5_1_1_3_1_0 + 0.778835978835986*G0_0_1_5_1_1_3_1_1 - 0.778835978835986*G0_0_1_5_1_1_4_1_0 - 0.778835978835986*G0_0_1_5_1_1_5_1_1 - 0.65185185185186*G0_1_1_0_0_0_0_0_0 - 0.65185185185186*G0_1_1_0_0_0_0_0_1 + 0.65185185185186*G0_1_1_0_0_0_1_0_0 + 0.65185185185186*G0_1_1_0_0_0_2_0_1 - 0.65185185185186*G0_1_1_0_0_0_3_1_0 - 0.65185185185186*G0_1_1_0_0_0_3_1_1 + 0.65185185185186*G0_1_1_0_0_0_4_1_0 + 0.65185185185186*G0_1_1_0_0_0_5_1_1 - 0.65185185185186*G0_1_1_0_0_1_0_0_0 - 0.65185185185186*G0_1_1_0_0_1_0_0_1 + 0.65185185185186*G0_1_1_0_0_1_1_0_0 + 0.65185185185186*G0_1_1_0_0_1_2_0_1 - 0.65185185185186*G0_1_1_0_0_1_3_1_0 - 0.65185185185186*G0_1_1_0_0_1_3_1_1 + 0.65185185185186*G0_1_1_0_0_1_4_1_0 + 0.65185185185186*G0_1_1_0_0_1_5_1_1 + 0.65185185185186*G0_1_1_1_0_0_0_0_0 + 0.65185185185186*G0_1_1_1_0_0_0_0_1 - 0.65185185185186*G0_1_1_1_0_0_1_0_0 - 0.65185185185186*G0_1_1_1_0_0_2_0_1 + 0.65185185185186*G0_1_1_1_0_0_3_1_0 + 0.65185185185186*G0_1_1_1_0_0_3_1_1 - 0.65185185185186*G0_1_1_1_0_0_4_1_0 - 0.65185185185186*G0_1_1_1_0_0_5_1_1 + 0.65185185185186*G0_1_1_2_0_1_0_0_0 + 0.65185185185186*G0_1_1_2_0_1_0_0_1 - 0.65185185185186*G0_1_1_2_0_1_1_0_0 - 0.65185185185186*G0_1_1_2_0_1_2_0_1 + 0.65185185185186*G0_1_1_2_0_1_3_1_0 + 0.65185185185186*G0_1_1_2_0_1_3_1_1 - 0.65185185185186*G0_1_1_2_0_1_4_1_0 - 0.65185185185186*G0_1_1_2_0_1_5_1_1 - 0.65185185185186*G0_1_1_3_1_0_0_0_0 - 0.65185185185186*G0_1_1_3_1_0_0_0_1 + 0.65185185185186*G0_1_1_3_1_0_1_0_0 + 0.65185185185186*G0_1_1_3_1_0_2_0_1 - 0.65185185185186*G0_1_1_3_1_0_3_1_0 - 0.65185185185186*G0_1_1_3_1_0_3_1_1 + 0.65185185185186*G0_1_1_3_1_0_4_1_0 + 0.65185185185186*G0_1_1_3_1_0_5_1_1 - 0.65185185185186*G0_1_1_3_1_1_0_0_0 - 0.65185185185186*G0_1_1_3_1_1_0_0_1 + 0.65185185185186*G0_1_1_3_1_1_1_0_0 + 0.65185185185186*G0_1_1_3_1_1_2_0_1 - 0.65185185185186*G0_1_1_3_1_1_3_1_0 - 0.65185185185186*G0_1_1_3_1_1_3_1_1 + 0.65185185185186*G0_1_1_3_1_1_4_1_0 + 0.65185185185186*G0_1_1_3_1_1_5_1_1 + 0.65185185185186*G0_1_1_4_1_0_0_0_0 + 0.65185185185186*G0_1_1_4_1_0_0_0_1 - 0.65185185185186*G0_1_1_4_1_0_1_0_0 - 0.65185185185186*G0_1_1_4_1_0_2_0_1 + 0.65185185185186*G0_1_1_4_1_0_3_1_0 + 0.65185185185186*G0_1_1_4_1_0_3_1_1 - 0.65185185185186*G0_1_1_4_1_0_4_1_0 - 0.65185185185186*G0_1_1_4_1_0_5_1_1 + 0.65185185185186*G0_1_1_5_1_1_0_0_0 + 0.65185185185186*G0_1_1_5_1_1_0_0_1 - 0.65185185185186*G0_1_1_5_1_1_1_0_0 - 0.65185185185186*G0_1_1_5_1_1_2_0_1 + 0.65185185185186*G0_1_1_5_1_1_3_1_0 + 0.65185185185186*G0_1_1_5_1_1_3_1_1 - 0.65185185185186*G0_1_1_5_1_1_4_1_0 - 0.65185185185186*G0_1_1_5_1_1_5_1_1;
    A[273] = A[621] + 0.203174603174598*G0_0_0_0_0_0_0_0_0 + 0.203174603174598*G0_0_0_0_0_0_0_0_1 - 0.203174603174598*G0_0_0_0_0_0_1_0_0 - 0.203174603174598*G0_0_0_0_0_0_2_0_1 + 0.203174603174598*G0_0_0_0_0_0_3_1_0 + 0.203174603174598*G0_0_0_0_0_0_3_1_1 - 0.203174603174598*G0_0_0_0_0_0_4_1_0 - 0.203174603174598*G0_0_0_0_0_0_5_1_1 + 0.203174603174598*G0_0_0_0_0_1_0_0_0 + 0.203174603174598*G0_0_0_0_0_1_0_0_1 - 0.203174603174598*G0_0_0_0_0_1_1_0_0 - 0.203174603174598*G0_0_0_0_0_1_2_0_1 + 0.203174603174598*G0_0_0_0_0_1_3_1_0 + 0.203174603174598*G0_0_0_0_0_1_3_1_1 - 0.203174603174598*G0_0_0_0_0_1_4_1_0 - 0.203174603174598*G0_0_0_0_0_1_5_1_1 - 0.203174603174598*G0_0_0_1_0_0_0_0_0 - 0.203174603174598*G0_0_0_1_0_0_0_0_1 + 0.203174603174598*G0_0_0_1_0_0_1_0_0 + 0.203174603174598*G0_0_0_1_0_0_2_0_1 - 0.203174603174598*G0_0_0_1_0_0_3_1_0 - 0.203174603174598*G0_0_0_1_0_0_3_1_1 + 0.203174603174598*G0_0_0_1_0_0_4_1_0 + 0.203174603174598*G0_0_0_1_0_0_5_1_1 - 0.203174603174598*G0_0_0_2_0_1_0_0_0 - 0.203174603174598*G0_0_0_2_0_1_0_0_1 + 0.203174603174598*G0_0_0_2_0_1_1_0_0 + 0.203174603174598*G0_0_0_2_0_1_2_0_1 - 0.203174603174598*G0_0_0_2_0_1_3_1_0 - 0.203174603174598*G0_0_0_2_0_1_3_1_1 + 0.203174603174598*G0_0_0_2_0_1_4_1_0 + 0.203174603174598*G0_0_0_2_0_1_5_1_1 + 0.203174603174598*G0_0_0_3_1_0_0_0_0 + 0.203174603174598*G0_0_0_3_1_0_0_0_1 - 0.203174603174598*G0_0_0_3_1_0_1_0_0 - 0.203174603174598*G0_0_0_3_1_0_2_0_1 + 0.203174603174598*G0_0_0_3_1_0_3_1_0 + 0.203174603174598*G0_0_0_3_1_0_3_1_1 - 0.203174603174598*G0_0_0_3_1_0_4_1_0 - 0.203174603174598*G0_0_0_3_1_0_5_1_1 + 0.203174603174598*G0_0_0_3_1_1_0_0_0 + 0.203174603174598*G0_0_0_3_1_1_0_0_1 - 0.203174603174598*G0_0_0_3_1_1_1_0_0 - 0.203174603174598*G0_0_0_3_1_1_2_0_1 + 0.203174603174598*G0_0_0_3_1_1_3_1_0 + 0.203174603174598*G0_0_0_3_1_1_3_1_1 - 0.203174603174598*G0_0_0_3_1_1_4_1_0 - 0.203174603174598*G0_0_0_3_1_1_5_1_1 - 0.203174603174598*G0_0_0_4_1_0_0_0_0 - 0.203174603174598*G0_0_0_4_1_0_0_0_1 + 0.203174603174598*G0_0_0_4_1_0_1_0_0 + 0.203174603174598*G0_0_0_4_1_0_2_0_1 - 0.203174603174598*G0_0_0_4_1_0_3_1_0 - 0.203174603174598*G0_0_0_4_1_0_3_1_1 + 0.203174603174598*G0_0_0_4_1_0_4_1_0 + 0.203174603174598*G0_0_0_4_1_0_5_1_1 - 0.203174603174598*G0_0_0_5_1_1_0_0_0 - 0.203174603174598*G0_0_0_5_1_1_0_0_1 + 0.203174603174598*G0_0_0_5_1_1_1_0_0 + 0.203174603174598*G0_0_0_5_1_1_2_0_1 - 0.203174603174598*G0_0_0_5_1_1_3_1_0 - 0.203174603174598*G0_0_0_5_1_1_3_1_1 + 0.203174603174598*G0_0_0_5_1_1_4_1_0 + 0.203174603174598*G0_0_0_5_1_1_5_1_1 - 0.203174603174598*G0_1_1_0_0_0_0_0_0 - 0.203174603174598*G0_1_1_0_0_0_0_0_1 + 0.203174603174598*G0_1_1_0_0_0_1_0_0 + 0.203174603174598*G0_1_1_0_0_0_2_0_1 - 0.203174603174598*G0_1_1_0_0_0_3_1_0 - 0.203174603174598*G0_1_1_0_0_0_3_1_1 + 0.203174603174598*G0_1_1_0_0_0_4_1_0 + 0.203174603174598*G0_1_1_0_0_0_5_1_1 - 0.203174603174598*G0_1_1_0_0_1_0_0_0 - 0.203174603174598*G0_1_1_0_0_1_0_0_1 + 0.203174603174598*G0_1_1_0_0_1_1_0_0 + 0.203174603174598*G0_1_1_0_0_1_2_0_1 - 0.203174603174598*G0_1_1_0_0_1_3_1_0 - 0.203174603174598*G0_1_1_0_0_1_3_1_1 + 0.203174603174598*G0_1_1_0_0_1_4_1_0 + 0.203174603174598*G0_1_1_0_0_1_5_1_1 + 0.203174603174598*G0_1_1_1_0_0_0_0_0 + 0.203174603174598*G0_1_1_1_0_0_0_0_1 - 0.203174603174598*G0_1_1_1_0_0_1_0_0 - 0.203174603174598*G0_1_1_1_0_0_2_0_1 + 0.203174603174598*G0_1_1_1_0_0_3_1_0 + 0.203174603174598*G0_1_1_1_0_0_3_1_1 - 0.203174603174598*G0_1_1_1_0_0_4_1_0 - 0.203174603174598*G0_1_1_1_0_0_5_1_1 + 0.203174603174598*G0_1_1_2_0_1_0_0_0 + 0.203174603174598*G0_1_1_2_0_1_0_0_1 - 0.203174603174598*G0_1_1_2_0_1_1_0_0 - 0.203174603174598*G0_1_1_2_0_1_2_0_1 + 0.203174603174598*G0_1_1_2_0_1_3_1_0 + 0.203174603174598*G0_1_1_2_0_1_3_1_1 - 0.203174603174598*G0_1_1_2_0_1_4_1_0 - 0.203174603174598*G0_1_1_2_0_1_5_1_1 - 0.203174603174598*G0_1_1_3_1_0_0_0_0 - 0.203174603174598*G0_1_1_3_1_0_0_0_1 + 0.203174603174598*G0_1_1_3_1_0_1_0_0 + 0.203174603174598*G0_1_1_3_1_0_2_0_1 - 0.203174603174598*G0_1_1_3_1_0_3_1_0 - 0.203174603174598*G0_1_1_3_1_0_3_1_1 + 0.203174603174598*G0_1_1_3_1_0_4_1_0 + 0.203174603174598*G0_1_1_3_1_0_5_1_1 - 0.203174603174598*G0_1_1_3_1_1_0_0_0 - 0.203174603174598*G0_1_1_3_1_1_0_0_1 + 0.203174603174598*G0_1_1_3_1_1_1_0_0 + 0.203174603174598*G0_1_1_3_1_1_2_0_1 - 0.203174603174598*G0_1_1_3_1_1_3_1_0 - 0.203174603174598*G0_1_1_3_1_1_3_1_1 + 0.203174603174598*G0_1_1_3_1_1_4_1_0 + 0.203174603174598*G0_1_1_3_1_1_5_1_1 + 0.203174603174598*G0_1_1_4_1_0_0_0_0 + 0.203174603174598*G0_1_1_4_1_0_0_0_1 - 0.203174603174598*G0_1_1_4_1_0_1_0_0 - 0.203174603174598*G0_1_1_4_1_0_2_0_1 + 0.203174603174598*G0_1_1_4_1_0_3_1_0 + 0.203174603174598*G0_1_1_4_1_0_3_1_1 - 0.203174603174598*G0_1_1_4_1_0_4_1_0 - 0.203174603174598*G0_1_1_4_1_0_5_1_1 + 0.203174603174598*G0_1_1_5_1_1_0_0_0 + 0.203174603174598*G0_1_1_5_1_1_0_0_1 - 0.203174603174598*G0_1_1_5_1_1_1_0_0 - 0.203174603174598*G0_1_1_5_1_1_2_0_1 + 0.203174603174598*G0_1_1_5_1_1_3_1_0 + 0.203174603174598*G0_1_1_5_1_1_3_1_1 - 0.203174603174598*G0_1_1_5_1_1_4_1_0 - 0.203174603174598*G0_1_1_5_1_1_5_1_1;
    A[444] = 0.0;
    A[324] = 0.0;
    A[479] = A[14];
    A[351] = 0.0;
    A[731] = 0.0;
    A[422] = A[887];
    A[382] = 0.0;
    A[760] = 0.0;
    A[413] = 0.0;
    A[857] = A[887];
    A[88] = 0.0;
    A[781] = 0.0;
    A[890] = -A[428] - 2.30264550264554*G0_1_1_0_0_0_0_0_0 - 2.30264550264554*G0_1_1_0_0_0_0_0_1 + 2.30264550264554*G0_1_1_0_0_0_1_0_0 + 2.30264550264554*G0_1_1_0_0_0_2_0_1 - 2.30264550264554*G0_1_1_0_0_0_3_1_0 - 2.30264550264554*G0_1_1_0_0_0_3_1_1 + 2.30264550264554*G0_1_1_0_0_0_4_1_0 + 2.30264550264554*G0_1_1_0_0_0_5_1_1 - 2.30264550264554*G0_1_1_0_0_1_0_0_0 - 2.30264550264554*G0_1_1_0_0_1_0_0_1 + 2.30264550264554*G0_1_1_0_0_1_1_0_0 + 2.30264550264554*G0_1_1_0_0_1_2_0_1 - 2.30264550264554*G0_1_1_0_0_1_3_1_0 - 2.30264550264554*G0_1_1_0_0_1_3_1_1 + 2.30264550264554*G0_1_1_0_0_1_4_1_0 + 2.30264550264554*G0_1_1_0_0_1_5_1_1 + 2.30264550264554*G0_1_1_1_0_0_0_0_0 + 2.30264550264554*G0_1_1_1_0_0_0_0_1 - 2.30264550264554*G0_1_1_1_0_0_1_0_0 - 2.30264550264554*G0_1_1_1_0_0_2_0_1 + 2.30264550264554*G0_1_1_1_0_0_3_1_0 + 2.30264550264554*G0_1_1_1_0_0_3_1_1 - 2.30264550264554*G0_1_1_1_0_0_4_1_0 - 2.30264550264554*G0_1_1_1_0_0_5_1_1 + 2.30264550264554*G0_1_1_2_0_1_0_0_0 + 2.30264550264554*G0_1_1_2_0_1_0_0_1 - 2.30264550264554*G0_1_1_2_0_1_1_0_0 - 2.30264550264554*G0_1_1_2_0_1_2_0_1 + 2.30264550264554*G0_1_1_2_0_1_3_1_0 + 2.30264550264554*G0_1_1_2_0_1_3_1_1 - 2.30264550264554*G0_1_1_2_0_1_4_1_0 - 2.30264550264554*G0_1_1_2_0_1_5_1_1 - 2.30264550264554*G0_1_1_3_1_0_0_0_0 - 2.30264550264554*G0_1_1_3_1_0_0_0_1 + 2.30264550264554*G0_1_1_3_1_0_1_0_0 + 2.30264550264554*G0_1_1_3_1_0_2_0_1 - 2.30264550264554*G0_1_1_3_1_0_3_1_0 - 2.30264550264554*G0_1_1_3_1_0_3_1_1 + 2.30264550264554*G0_1_1_3_1_0_4_1_0 + 2.30264550264554*G0_1_1_3_1_0_5_1_1 - 2.30264550264554*G0_1_1_3_1_1_0_0_0 - 2.30264550264554*G0_1_1_3_1_1_0_0_1 + 2.30264550264554*G0_1_1_3_1_1_1_0_0 + 2.30264550264554*G0_1_1_3_1_1_2_0_1 - 2.30264550264554*G0_1_1_3_1_1_3_1_0 - 2.30264550264554*G0_1_1_3_1_1_3_1_1 + 2.30264550264554*G0_1_1_3_1_1_4_1_0 + 2.30264550264554*G0_1_1_3_1_1_5_1_1 + 2.30264550264554*G0_1_1_4_1_0_0_0_0 + 2.30264550264554*G0_1_1_4_1_0_0_0_1 - 2.30264550264554*G0_1_1_4_1_0_1_0_0 - 2.30264550264554*G0_1_1_4_1_0_2_0_1 + 2.30264550264554*G0_1_1_4_1_0_3_1_0 + 2.30264550264554*G0_1_1_4_1_0_3_1_1 - 2.30264550264554*G0_1_1_4_1_0_4_1_0 - 2.30264550264554*G0_1_1_4_1_0_5_1_1 + 2.30264550264554*G0_1_1_5_1_1_0_0_0 + 2.30264550264554*G0_1_1_5_1_1_0_0_1 - 2.30264550264554*G0_1_1_5_1_1_1_0_0 - 2.30264550264554*G0_1_1_5_1_1_2_0_1 + 2.30264550264554*G0_1_1_5_1_1_3_1_0 + 2.30264550264554*G0_1_1_5_1_1_3_1_1 - 2.30264550264554*G0_1_1_5_1_1_4_1_0 - 2.30264550264554*G0_1_1_5_1_1_5_1_1;
    A[91] = -A[331] - 0.524867724867733*G0_0_0_0_0_0_0_0_0 - 0.524867724867733*G0_0_0_0_0_0_0_0_1 + 0.524867724867733*G0_0_0_0_0_0_1_0_0 + 0.524867724867733*G0_0_0_0_0_0_2_0_1 - 0.524867724867733*G0_0_0_0_0_0_3_1_0 - 0.524867724867733*G0_0_0_0_0_0_3_1_1 + 0.524867724867733*G0_0_0_0_0_0_4_1_0 + 0.524867724867733*G0_0_0_0_0_0_5_1_1 - 0.524867724867733*G0_0_0_0_0_1_0_0_0 - 0.524867724867733*G0_0_0_0_0_1_0_0_1 + 0.524867724867733*G0_0_0_0_0_1_1_0_0 + 0.524867724867733*G0_0_0_0_0_1_2_0_1 - 0.524867724867733*G0_0_0_0_0_1_3_1_0 - 0.524867724867733*G0_0_0_0_0_1_3_1_1 + 0.524867724867733*G0_0_0_0_0_1_4_1_0 + 0.524867724867733*G0_0_0_0_0_1_5_1_1 + 0.524867724867733*G0_0_0_1_0_0_0_0_0 + 0.524867724867733*G0_0_0_1_0_0_0_0_1 - 0.524867724867733*G0_0_0_1_0_0_1_0_0 - 0.524867724867733*G0_0_0_1_0_0_2_0_1 + 0.524867724867733*G0_0_0_1_0_0_3_1_0 + 0.524867724867733*G0_0_0_1_0_0_3_1_1 - 0.524867724867733*G0_0_0_1_0_0_4_1_0 - 0.524867724867733*G0_0_0_1_0_0_5_1_1 + 0.524867724867733*G0_0_0_2_0_1_0_0_0 + 0.524867724867733*G0_0_0_2_0_1_0_0_1 - 0.524867724867733*G0_0_0_2_0_1_1_0_0 - 0.524867724867733*G0_0_0_2_0_1_2_0_1 + 0.524867724867733*G0_0_0_2_0_1_3_1_0 + 0.524867724867733*G0_0_0_2_0_1_3_1_1 - 0.524867724867733*G0_0_0_2_0_1_4_1_0 - 0.524867724867733*G0_0_0_2_0_1_5_1_1 - 0.524867724867733*G0_0_0_3_1_0_0_0_0 - 0.524867724867733*G0_0_0_3_1_0_0_0_1 + 0.524867724867733*G0_0_0_3_1_0_1_0_0 + 0.524867724867733*G0_0_0_3_1_0_2_0_1 - 0.524867724867733*G0_0_0_3_1_0_3_1_0 - 0.524867724867733*G0_0_0_3_1_0_3_1_1 + 0.524867724867733*G0_0_0_3_1_0_4_1_0 + 0.524867724867733*G0_0_0_3_1_0_5_1_1 - 0.524867724867733*G0_0_0_3_1_1_0_0_0 - 0.524867724867733*G0_0_0_3_1_1_0_0_1 + 0.524867724867733*G0_0_0_3_1_1_1_0_0 + 0.524867724867733*G0_0_0_3_1_1_2_0_1 - 0.524867724867733*G0_0_0_3_1_1_3_1_0 - 0.524867724867733*G0_0_0_3_1_1_3_1_1 + 0.524867724867733*G0_0_0_3_1_1_4_1_0 + 0.524867724867733*G0_0_0_3_1_1_5_1_1 + 0.524867724867733*G0_0_0_4_1_0_0_0_0 + 0.524867724867733*G0_0_0_4_1_0_0_0_1 - 0.524867724867733*G0_0_0_4_1_0_1_0_0 - 0.524867724867733*G0_0_0_4_1_0_2_0_1 + 0.524867724867733*G0_0_0_4_1_0_3_1_0 + 0.524867724867733*G0_0_0_4_1_0_3_1_1 - 0.524867724867733*G0_0_0_4_1_0_4_1_0 - 0.524867724867733*G0_0_0_4_1_0_5_1_1 + 0.524867724867733*G0_0_0_5_1_1_0_0_0 + 0.524867724867733*G0_0_0_5_1_1_0_0_1 - 0.524867724867733*G0_0_0_5_1_1_1_0_0 - 0.524867724867733*G0_0_0_5_1_1_2_0_1 + 0.524867724867733*G0_0_0_5_1_1_3_1_0 + 0.524867724867733*G0_0_0_5_1_1_3_1_1 - 0.524867724867733*G0_0_0_5_1_1_4_1_0 - 0.524867724867733*G0_0_0_5_1_1_5_1_1;
    A[822] = 0.0;
    A[146] = 0.0;
    A[855] = A[14];
    A[177] = 0.0;
    A[884] = 0.0;
    A[493] = 0.0;
    A[196] = 0.0;
    A[654] = A[741];
    A[578] = 0.0;
    A[518] = 0.0;
    A[231] = 0.0;
    A[683] = A[805] + 1.1851851851852*G0_0_0_0_0_0_0_0_0 + 1.1851851851852*G0_0_0_0_0_0_0_0_1 - 1.1851851851852*G0_0_0_0_0_0_1_0_0 - 1.1851851851852*G0_0_0_0_0_0_2_0_1 + 1.1851851851852*G0_0_0_0_0_0_3_1_0 + 1.1851851851852*G0_0_0_0_0_0_3_1_1 - 1.1851851851852*G0_0_0_0_0_0_4_1_0 - 1.1851851851852*G0_0_0_0_0_0_5_1_1 + 1.1851851851852*G0_0_0_0_0_1_0_0_0 + 1.1851851851852*G0_0_0_0_0_1_0_0_1 - 1.1851851851852*G0_0_0_0_0_1_1_0_0 - 1.1851851851852*G0_0_0_0_0_1_2_0_1 + 1.1851851851852*G0_0_0_0_0_1_3_1_0 + 1.1851851851852*G0_0_0_0_0_1_3_1_1 - 1.1851851851852*G0_0_0_0_0_1_4_1_0 - 1.1851851851852*G0_0_0_0_0_1_5_1_1 - 1.1851851851852*G0_0_0_1_0_0_0_0_0 - 1.1851851851852*G0_0_0_1_0_0_0_0_1 + 1.1851851851852*G0_0_0_1_0_0_1_0_0 + 1.1851851851852*G0_0_0_1_0_0_2_0_1 - 1.1851851851852*G0_0_0_1_0_0_3_1_0 - 1.1851851851852*G0_0_0_1_0_0_3_1_1 + 1.1851851851852*G0_0_0_1_0_0_4_1_0 + 1.1851851851852*G0_0_0_1_0_0_5_1_1 - 1.1851851851852*G0_0_0_2_0_1_0_0_0 - 1.1851851851852*G0_0_0_2_0_1_0_0_1 + 1.1851851851852*G0_0_0_2_0_1_1_0_0 + 1.1851851851852*G0_0_0_2_0_1_2_0_1 - 1.1851851851852*G0_0_0_2_0_1_3_1_0 - 1.1851851851852*G0_0_0_2_0_1_3_1_1 + 1.1851851851852*G0_0_0_2_0_1_4_1_0 + 1.1851851851852*G0_0_0_2_0_1_5_1_1 + 1.1851851851852*G0_0_0_3_1_0_0_0_0 + 1.1851851851852*G0_0_0_3_1_0_0_0_1 - 1.1851851851852*G0_0_0_3_1_0_1_0_0 - 1.1851851851852*G0_0_0_3_1_0_2_0_1 + 1.1851851851852*G0_0_0_3_1_0_3_1_0 + 1.1851851851852*G0_0_0_3_1_0_3_1_1 - 1.1851851851852*G0_0_0_3_1_0_4_1_0 - 1.1851851851852*G0_0_0_3_1_0_5_1_1 + 1.1851851851852*G0_0_0_3_1_1_0_0_0 + 1.1851851851852*G0_0_0_3_1_1_0_0_1 - 1.1851851851852*G0_0_0_3_1_1_1_0_0 - 1.1851851851852*G0_0_0_3_1_1_2_0_1 + 1.1851851851852*G0_0_0_3_1_1_3_1_0 + 1.1851851851852*G0_0_0_3_1_1_3_1_1 - 1.1851851851852*G0_0_0_3_1_1_4_1_0 - 1.1851851851852*G0_0_0_3_1_1_5_1_1 - 1.1851851851852*G0_0_0_4_1_0_0_0_0 - 1.1851851851852*G0_0_0_4_1_0_0_0_1 + 1.1851851851852*G0_0_0_4_1_0_1_0_0 + 1.1851851851852*G0_0_0_4_1_0_2_0_1 - 1.1851851851852*G0_0_0_4_1_0_3_1_0 - 1.1851851851852*G0_0_0_4_1_0_3_1_1 + 1.1851851851852*G0_0_0_4_1_0_4_1_0 + 1.1851851851852*G0_0_0_4_1_0_5_1_1 - 1.1851851851852*G0_0_0_5_1_1_0_0_0 - 1.1851851851852*G0_0_0_5_1_1_0_0_1 + 1.1851851851852*G0_0_0_5_1_1_1_0_0 + 1.1851851851852*G0_0_0_5_1_1_2_0_1 - 1.1851851851852*G0_0_0_5_1_1_3_1_0 - 1.1851851851852*G0_0_0_5_1_1_3_1_1 + 1.1851851851852*G0_0_0_5_1_1_4_1_0 + 1.1851851851852*G0_0_0_5_1_1_5_1_1 - 1.1851851851852*G0_1_1_0_0_0_0_0_0 - 1.1851851851852*G0_1_1_0_0_0_0_0_1 + 1.1851851851852*G0_1_1_0_0_0_1_0_0 + 1.1851851851852*G0_1_1_0_0_0_2_0_1 - 1.1851851851852*G0_1_1_0_0_0_3_1_0 - 1.1851851851852*G0_1_1_0_0_0_3_1_1 + 1.1851851851852*G0_1_1_0_0_0_4_1_0 + 1.1851851851852*G0_1_1_0_0_0_5_1_1 - 1.1851851851852*G0_1_1_0_0_1_0_0_0 - 1.1851851851852*G0_1_1_0_0_1_0_0_1 + 1.1851851851852*G0_1_1_0_0_1_1_0_0 + 1.1851851851852*G0_1_1_0_0_1_2_0_1 - 1.1851851851852*G0_1_1_0_0_1_3_1_0 - 1.1851851851852*G0_1_1_0_0_1_3_1_1 + 1.1851851851852*G0_1_1_0_0_1_4_1_0 + 1.1851851851852*G0_1_1_0_0_1_5_1_1 + 1.1851851851852*G0_1_1_1_0_0_0_0_0 + 1.1851851851852*G0_1_1_1_0_0_0_0_1 - 1.1851851851852*G0_1_1_1_0_0_1_0_0 - 1.1851851851852*G0_1_1_1_0_0_2_0_1 + 1.1851851851852*G0_1_1_1_0_0_3_1_0 + 1.1851851851852*G0_1_1_1_0_0_3_1_1 - 1.1851851851852*G0_1_1_1_0_0_4_1_0 - 1.1851851851852*G0_1_1_1_0_0_5_1_1 + 1.1851851851852*G0_1_1_2_0_1_0_0_0 + 1.1851851851852*G0_1_1_2_0_1_0_0_1 - 1.1851851851852*G0_1_1_2_0_1_1_0_0 - 1.1851851851852*G0_1_1_2_0_1_2_0_1 + 1.1851851851852*G0_1_1_2_0_1_3_1_0 + 1.1851851851852*G0_1_1_2_0_1_3_1_1 - 1.1851851851852*G0_1_1_2_0_1_4_1_0 - 1.1851851851852*G0_1_1_2_0_1_5_1_1 - 1.1851851851852*G0_1_1_3_1_0_0_0_0 - 1.1851851851852*G0_1_1_3_1_0_0_0_1 + 1.1851851851852*G0_1_1_3_1_0_1_0_0 + 1.1851851851852*G0_1_1_3_1_0_2_0_1 - 1.1851851851852*G0_1_1_3_1_0_3_1_0 - 1.1851851851852*G0_1_1_3_1_0_3_1_1 + 1.1851851851852*G0_1_1_3_1_0_4_1_0 + 1.1851851851852*G0_1_1_3_1_0_5_1_1 - 1.1851851851852*G0_1_1_3_1_1_0_0_0 - 1.1851851851852*G0_1_1_3_1_1_0_0_1 + 1.1851851851852*G0_1_1_3_1_1_1_0_0 + 1.1851851851852*G0_1_1_3_1_1_2_0_1 - 1.1851851851852*G0_1_1_3_1_1_3_1_0 - 1.1851851851852*G0_1_1_3_1_1_3_1_1 + 1.1851851851852*G0_1_1_3_1_1_4_1_0 + 1.1851851851852*G0_1_1_3_1_1_5_1_1 + 1.1851851851852*G0_1_1_4_1_0_0_0_0 + 1.1851851851852*G0_1_1_4_1_0_0_0_1 - 1.1851851851852*G0_1_1_4_1_0_1_0_0 - 1.1851851851852*G0_1_1_4_1_0_2_0_1 + 1.1851851851852*G0_1_1_4_1_0_3_1_0 + 1.1851851851852*G0_1_1_4_1_0_3_1_1 - 1.1851851851852*G0_1_1_4_1_0_4_1_0 - 1.1851851851852*G0_1_1_4_1_0_5_1_1 + 1.1851851851852*G0_1_1_5_1_1_0_0_0 + 1.1851851851852*G0_1_1_5_1_1_0_0_1 - 1.1851851851852*G0_1_1_5_1_1_1_0_0 - 1.1851851851852*G0_1_1_5_1_1_2_0_1 + 1.1851851851852*G0_1_1_5_1_1_3_1_0 + 1.1851851851852*G0_1_1_5_1_1_3_1_1 - 1.1851851851852*G0_1_1_5_1_1_4_1_0 - 1.1851851851852*G0_1_1_5_1_1_5_1_1;
    A[247] = A[683] + 1.11746031746033*G0_0_1_0_0_0_0_0_0 + 1.11746031746033*G0_0_1_0_0_0_0_0_1 - 1.11746031746033*G0_0_1_0_0_0_1_0_0 - 1.11746031746033*G0_0_1_0_0_0_2_0_1 + 1.11746031746033*G0_0_1_0_0_0_3_1_0 + 1.11746031746033*G0_0_1_0_0_0_3_1_1 - 1.11746031746033*G0_0_1_0_0_0_4_1_0 - 1.11746031746033*G0_0_1_0_0_0_5_1_1 + 1.11746031746033*G0_0_1_0_0_1_0_0_0 + 1.11746031746033*G0_0_1_0_0_1_0_0_1 - 1.11746031746033*G0_0_1_0_0_1_1_0_0 - 1.11746031746033*G0_0_1_0_0_1_2_0_1 + 1.11746031746033*G0_0_1_0_0_1_3_1_0 + 1.11746031746033*G0_0_1_0_0_1_3_1_1 - 1.11746031746033*G0_0_1_0_0_1_4_1_0 - 1.11746031746033*G0_0_1_0_0_1_5_1_1 - 1.11746031746033*G0_0_1_1_0_0_0_0_0 - 1.11746031746033*G0_0_1_1_0_0_0_0_1 + 1.11746031746033*G0_0_1_1_0_0_1_0_0 + 1.11746031746033*G0_0_1_1_0_0_2_0_1 - 1.11746031746033*G0_0_1_1_0_0_3_1_0 - 1.11746031746033*G0_0_1_1_0_0_3_1_1 + 1.11746031746033*G0_0_1_1_0_0_4_1_0 + 1.11746031746033*G0_0_1_1_0_0_5_1_1 - 1.11746031746033*G0_0_1_2_0_1_0_0_0 - 1.11746031746033*G0_0_1_2_0_1_0_0_1 + 1.11746031746033*G0_0_1_2_0_1_1_0_0 + 1.11746031746033*G0_0_1_2_0_1_2_0_1 - 1.11746031746033*G0_0_1_2_0_1_3_1_0 - 1.11746031746033*G0_0_1_2_0_1_3_1_1 + 1.11746031746033*G0_0_1_2_0_1_4_1_0 + 1.11746031746033*G0_0_1_2_0_1_5_1_1 + 1.11746031746033*G0_0_1_3_1_0_0_0_0 + 1.11746031746033*G0_0_1_3_1_0_0_0_1 - 1.11746031746033*G0_0_1_3_1_0_1_0_0 - 1.11746031746033*G0_0_1_3_1_0_2_0_1 + 1.11746031746033*G0_0_1_3_1_0_3_1_0 + 1.11746031746033*G0_0_1_3_1_0_3_1_1 - 1.11746031746033*G0_0_1_3_1_0_4_1_0 - 1.11746031746033*G0_0_1_3_1_0_5_1_1 + 1.11746031746033*G0_0_1_3_1_1_0_0_0 + 1.11746031746033*G0_0_1_3_1_1_0_0_1 - 1.11746031746033*G0_0_1_3_1_1_1_0_0 - 1.11746031746033*G0_0_1_3_1_1_2_0_1 + 1.11746031746033*G0_0_1_3_1_1_3_1_0 + 1.11746031746033*G0_0_1_3_1_1_3_1_1 - 1.11746031746033*G0_0_1_3_1_1_4_1_0 - 1.11746031746033*G0_0_1_3_1_1_5_1_1 - 1.11746031746033*G0_0_1_4_1_0_0_0_0 - 1.11746031746033*G0_0_1_4_1_0_0_0_1 + 1.11746031746033*G0_0_1_4_1_0_1_0_0 + 1.11746031746033*G0_0_1_4_1_0_2_0_1 - 1.11746031746033*G0_0_1_4_1_0_3_1_0 - 1.11746031746033*G0_0_1_4_1_0_3_1_1 + 1.11746031746033*G0_0_1_4_1_0_4_1_0 + 1.11746031746033*G0_0_1_4_1_0_5_1_1 - 1.11746031746033*G0_0_1_5_1_1_0_0_0 - 1.11746031746033*G0_0_1_5_1_1_0_0_1 + 1.11746031746033*G0_0_1_5_1_1_1_0_0 + 1.11746031746033*G0_0_1_5_1_1_2_0_1 - 1.11746031746033*G0_0_1_5_1_1_3_1_0 - 1.11746031746033*G0_0_1_5_1_1_3_1_1 + 1.11746031746033*G0_0_1_5_1_1_4_1_0 + 1.11746031746033*G0_0_1_5_1_1_5_1_1 - 1.11746031746033*G0_1_0_0_0_0_0_0_0 - 1.11746031746033*G0_1_0_0_0_0_0_0_1 + 1.11746031746033*G0_1_0_0_0_0_1_0_0 + 1.11746031746033*G0_1_0_0_0_0_2_0_1 - 1.11746031746033*G0_1_0_0_0_0_3_1_0 - 1.11746031746033*G0_1_0_0_0_0_3_1_1 + 1.11746031746033*G0_1_0_0_0_0_4_1_0 + 1.11746031746033*G0_1_0_0_0_0_5_1_1 - 1.11746031746033*G0_1_0_0_0_1_0_0_0 - 1.11746031746033*G0_1_0_0_0_1_0_0_1 + 1.11746031746033*G0_1_0_0_0_1_1_0_0 + 1.11746031746033*G0_1_0_0_0_1_2_0_1 - 1.11746031746033*G0_1_0_0_0_1_3_1_0 - 1.11746031746033*G0_1_0_0_0_1_3_1_1 + 1.11746031746033*G0_1_0_0_0_1_4_1_0 + 1.11746031746033*G0_1_0_0_0_1_5_1_1 + 1.11746031746033*G0_1_0_1_0_0_0_0_0 + 1.11746031746033*G0_1_0_1_0_0_0_0_1 - 1.11746031746033*G0_1_0_1_0_0_1_0_0 - 1.11746031746033*G0_1_0_1_0_0_2_0_1 + 1.11746031746033*G0_1_0_1_0_0_3_1_0 + 1.11746031746033*G0_1_0_1_0_0_3_1_1 - 1.11746031746033*G0_1_0_1_0_0_4_1_0 - 1.11746031746033*G0_1_0_1_0_0_5_1_1 + 1.11746031746033*G0_1_0_2_0_1_0_0_0 + 1.11746031746033*G0_1_0_2_0_1_0_0_1 - 1.11746031746033*G0_1_0_2_0_1_1_0_0 - 1.11746031746033*G0_1_0_2_0_1_2_0_1 + 1.11746031746033*G0_1_0_2_0_1_3_1_0 + 1.11746031746033*G0_1_0_2_0_1_3_1_1 - 1.11746031746033*G0_1_0_2_0_1_4_1_0 - 1.11746031746033*G0_1_0_2_0_1_5_1_1 - 1.11746031746033*G0_1_0_3_1_0_0_0_0 - 1.11746031746033*G0_1_0_3_1_0_0_0_1 + 1.11746031746033*G0_1_0_3_1_0_1_0_0 + 1.11746031746033*G0_1_0_3_1_0_2_0_1 - 1.11746031746033*G0_1_0_3_1_0_3_1_0 - 1.11746031746033*G0_1_0_3_1_0_3_1_1 + 1.11746031746033*G0_1_0_3_1_0_4_1_0 + 1.11746031746033*G0_1_0_3_1_0_5_1_1 - 1.11746031746033*G0_1_0_3_1_1_0_0_0 - 1.11746031746033*G0_1_0_3_1_1_0_0_1 + 1.11746031746033*G0_1_0_3_1_1_1_0_0 + 1.11746031746033*G0_1_0_3_1_1_2_0_1 - 1.11746031746033*G0_1_0_3_1_1_3_1_0 - 1.11746031746033*G0_1_0_3_1_1_3_1_1 + 1.11746031746033*G0_1_0_3_1_1_4_1_0 + 1.11746031746033*G0_1_0_3_1_1_5_1_1 + 1.11746031746033*G0_1_0_4_1_0_0_0_0 + 1.11746031746033*G0_1_0_4_1_0_0_0_1 - 1.11746031746033*G0_1_0_4_1_0_1_0_0 - 1.11746031746033*G0_1_0_4_1_0_2_0_1 + 1.11746031746033*G0_1_0_4_1_0_3_1_0 + 1.11746031746033*G0_1_0_4_1_0_3_1_1 - 1.11746031746033*G0_1_0_4_1_0_4_1_0 - 1.11746031746033*G0_1_0_4_1_0_5_1_1 + 1.11746031746033*G0_1_0_5_1_1_0_0_0 + 1.11746031746033*G0_1_0_5_1_1_0_0_1 - 1.11746031746033*G0_1_0_5_1_1_1_0_0 - 1.11746031746033*G0_1_0_5_1_1_2_0_1 + 1.11746031746033*G0_1_0_5_1_1_3_1_0 + 1.11746031746033*G0_1_0_5_1_1_3_1_1 - 1.11746031746033*G0_1_0_5_1_1_4_1_0 - 1.11746031746033*G0_1_0_5_1_1_5_1_1;
    A[603] = 0.0;
    A[555] = A[5];
    A[712] = A[247];
    A[632] = 0.0;
    A[249] = A[743];
    A[669] = 0.0;
    A[702] = 0.0;
    A[303] = -A[805] - 1.84550264550266*G0_0_0_0_0_0_0_0_0 - 1.84550264550266*G0_0_0_0_0_0_0_0_1 + 1.84550264550266*G0_0_0_0_0_0_1_0_0 + 1.84550264550266*G0_0_0_0_0_0_2_0_1 - 1.84550264550266*G0_0_0_0_0_0_3_1_0 - 1.84550264550266*G0_0_0_0_0_0_3_1_1 + 1.84550264550266*G0_0_0_0_0_0_4_1_0 + 1.84550264550266*G0_0_0_0_0_0_5_1_1 - 1.84550264550266*G0_0_0_0_0_1_0_0_0 - 1.84550264550266*G0_0_0_0_0_1_0_0_1 + 1.84550264550266*G0_0_0_0_0_1_1_0_0 + 1.84550264550266*G0_0_0_0_0_1_2_0_1 - 1.84550264550266*G0_0_0_0_0_1_3_1_0 - 1.84550264550266*G0_0_0_0_0_1_3_1_1 + 1.84550264550266*G0_0_0_0_0_1_4_1_0 + 1.84550264550266*G0_0_0_0_0_1_5_1_1 + 1.84550264550266*G0_0_0_1_0_0_0_0_0 + 1.84550264550266*G0_0_0_1_0_0_0_0_1 - 1.84550264550266*G0_0_0_1_0_0_1_0_0 - 1.84550264550266*G0_0_0_1_0_0_2_0_1 + 1.84550264550266*G0_0_0_1_0_0_3_1_0 + 1.84550264550266*G0_0_0_1_0_0_3_1_1 - 1.84550264550266*G0_0_0_1_0_0_4_1_0 - 1.84550264550266*G0_0_0_1_0_0_5_1_1 + 1.84550264550266*G0_0_0_2_0_1_0_0_0 + 1.84550264550266*G0_0_0_2_0_1_0_0_1 - 1.84550264550266*G0_0_0_2_0_1_1_0_0 - 1.84550264550266*G0_0_0_2_0_1_2_0_1 + 1.84550264550266*G0_0_0_2_0_1_3_1_0 + 1.84550264550266*G0_0_0_2_0_1_3_1_1 - 1.84550264550266*G0_0_0_2_0_1_4_1_0 - 1.84550264550266*G0_0_0_2_0_1_5_1_1 - 1.84550264550266*G0_0_0_3_1_0_0_0_0 - 1.84550264550266*G0_0_0_3_1_0_0_0_1 + 1.84550264550266*G0_0_0_3_1_0_1_0_0 + 1.84550264550266*G0_0_0_3_1_0_2_0_1 - 1.84550264550266*G0_0_0_3_1_0_3_1_0 - 1.84550264550266*G0_0_0_3_1_0_3_1_1 + 1.84550264550266*G0_0_0_3_1_0_4_1_0 + 1.84550264550266*G0_0_0_3_1_0_5_1_1 - 1.84550264550266*G0_0_0_3_1_1_0_0_0 - 1.84550264550266*G0_0_0_3_1_1_0_0_1 + 1.84550264550266*G0_0_0_3_1_1_1_0_0 + 1.84550264550266*G0_0_0_3_1_1_2_0_1 - 1.84550264550266*G0_0_0_3_1_1_3_1_0 - 1.84550264550266*G0_0_0_3_1_1_3_1_1 + 1.84550264550266*G0_0_0_3_1_1_4_1_0 + 1.84550264550266*G0_0_0_3_1_1_5_1_1 + 1.84550264550266*G0_0_0_4_1_0_0_0_0 + 1.84550264550266*G0_0_0_4_1_0_0_0_1 - 1.84550264550266*G0_0_0_4_1_0_1_0_0 - 1.84550264550266*G0_0_0_4_1_0_2_0_1 + 1.84550264550266*G0_0_0_4_1_0_3_1_0 + 1.84550264550266*G0_0_0_4_1_0_3_1_1 - 1.84550264550266*G0_0_0_4_1_0_4_1_0 - 1.84550264550266*G0_0_0_4_1_0_5_1_1 + 1.84550264550266*G0_0_0_5_1_1_0_0_0 + 1.84550264550266*G0_0_0_5_1_1_0_0_1 - 1.84550264550266*G0_0_0_5_1_1_1_0_0 - 1.84550264550266*G0_0_0_5_1_1_2_0_1 + 1.84550264550266*G0_0_0_5_1_1_3_1_0 + 1.84550264550266*G0_0_0_5_1_1_3_1_1 - 1.84550264550266*G0_0_0_5_1_1_4_1_0 - 1.84550264550266*G0_0_0_5_1_1_5_1_1 - 1.11746031746033*G0_0_1_0_0_0_0_0_0 - 1.11746031746033*G0_0_1_0_0_0_0_0_1 + 1.11746031746033*G0_0_1_0_0_0_1_0_0 + 1.11746031746033*G0_0_1_0_0_0_2_0_1 - 1.11746031746033*G0_0_1_0_0_0_3_1_0 - 1.11746031746033*G0_0_1_0_0_0_3_1_1 + 1.11746031746033*G0_0_1_0_0_0_4_1_0 + 1.11746031746033*G0_0_1_0_0_0_5_1_1 - 1.11746031746033*G0_0_1_0_0_1_0_0_0 - 1.11746031746033*G0_0_1_0_0_1_0_0_1 + 1.11746031746033*G0_0_1_0_0_1_1_0_0 + 1.11746031746033*G0_0_1_0_0_1_2_0_1 - 1.11746031746033*G0_0_1_0_0_1_3_1_0 - 1.11746031746033*G0_0_1_0_0_1_3_1_1 + 1.11746031746033*G0_0_1_0_0_1_4_1_0 + 1.11746031746033*G0_0_1_0_0_1_5_1_1 + 1.11746031746033*G0_0_1_1_0_0_0_0_0 + 1.11746031746033*G0_0_1_1_0_0_0_0_1 - 1.11746031746033*G0_0_1_1_0_0_1_0_0 - 1.11746031746033*G0_0_1_1_0_0_2_0_1 + 1.11746031746033*G0_0_1_1_0_0_3_1_0 + 1.11746031746033*G0_0_1_1_0_0_3_1_1 - 1.11746031746033*G0_0_1_1_0_0_4_1_0 - 1.11746031746033*G0_0_1_1_0_0_5_1_1 + 1.11746031746033*G0_0_1_2_0_1_0_0_0 + 1.11746031746033*G0_0_1_2_0_1_0_0_1 - 1.11746031746033*G0_0_1_2_0_1_1_0_0 - 1.11746031746033*G0_0_1_2_0_1_2_0_1 + 1.11746031746033*G0_0_1_2_0_1_3_1_0 + 1.11746031746033*G0_0_1_2_0_1_3_1_1 - 1.11746031746033*G0_0_1_2_0_1_4_1_0 - 1.11746031746033*G0_0_1_2_0_1_5_1_1 - 1.11746031746033*G0_0_1_3_1_0_0_0_0 - 1.11746031746033*G0_0_1_3_1_0_0_0_1 + 1.11746031746033*G0_0_1_3_1_0_1_0_0 + 1.11746031746033*G0_0_1_3_1_0_2_0_1 - 1.11746031746033*G0_0_1_3_1_0_3_1_0 - 1.11746031746033*G0_0_1_3_1_0_3_1_1 + 1.11746031746033*G0_0_1_3_1_0_4_1_0 + 1.11746031746033*G0_0_1_3_1_0_5_1_1 - 1.11746031746033*G0_0_1_3_1_1_0_0_0 - 1.11746031746033*G0_0_1_3_1_1_0_0_1 + 1.11746031746033*G0_0_1_3_1_1_1_0_0 + 1.11746031746033*G0_0_1_3_1_1_2_0_1 - 1.11746031746033*G0_0_1_3_1_1_3_1_0 - 1.11746031746033*G0_0_1_3_1_1_3_1_1 + 1.11746031746033*G0_0_1_3_1_1_4_1_0 + 1.11746031746033*G0_0_1_3_1_1_5_1_1 + 1.11746031746033*G0_0_1_4_1_0_0_0_0 + 1.11746031746033*G0_0_1_4_1_0_0_0_1 - 1.11746031746033*G0_0_1_4_1_0_1_0_0 - 1.11746031746033*G0_0_1_4_1_0_2_0_1 + 1.11746031746033*G0_0_1_4_1_0_3_1_0 + 1.11746031746033*G0_0_1_4_1_0_3_1_1 - 1.11746031746033*G0_0_1_4_1_0_4_1_0 - 1.11746031746033*G0_0_1_4_1_0_5_1_1 + 1.11746031746033*G0_0_1_5_1_1_0_0_0 + 1.11746031746033*G0_0_1_5_1_1_0_0_1 - 1.11746031746033*G0_0_1_5_1_1_1_0_0 - 1.11746031746033*G0_0_1_5_1_1_2_0_1 + 1.11746031746033*G0_0_1_5_1_1_3_1_0 + 1.11746031746033*G0_0_1_5_1_1_3_1_1 - 1.11746031746033*G0_0_1_5_1_1_4_1_0 - 1.11746031746033*G0_0_1_5_1_1_5_1_1;
    A[314] = -A[303] + 0.414814814814821*G0_0_1_0_0_0_0_0_0 + 0.414814814814821*G0_0_1_0_0_0_0_0_1 - 0.414814814814821*G0_0_1_0_0_0_1_0_0 - 0.414814814814821*G0_0_1_0_0_0_2_0_1 + 0.414814814814821*G0_0_1_0_0_0_3_1_0 + 0.414814814814821*G0_0_1_0_0_0_3_1_1 - 0.414814814814821*G0_0_1_0_0_0_4_1_0 - 0.414814814814821*G0_0_1_0_0_0_5_1_1 + 0.414814814814821*G0_0_1_0_0_1_0_0_0 + 0.414814814814821*G0_0_1_0_0_1_0_0_1 - 0.414814814814821*G0_0_1_0_0_1_1_0_0 - 0.414814814814821*G0_0_1_0_0_1_2_0_1 + 0.414814814814821*G0_0_1_0_0_1_3_1_0 + 0.414814814814821*G0_0_1_0_0_1_3_1_1 - 0.414814814814821*G0_0_1_0_0_1_4_1_0 - 0.414814814814821*G0_0_1_0_0_1_5_1_1 - 0.414814814814821*G0_0_1_1_0_0_0_0_0 - 0.414814814814821*G0_0_1_1_0_0_0_0_1 + 0.414814814814821*G0_0_1_1_0_0_1_0_0 + 0.414814814814821*G0_0_1_1_0_0_2_0_1 - 0.414814814814821*G0_0_1_1_0_0_3_1_0 - 0.414814814814821*G0_0_1_1_0_0_3_1_1 + 0.414814814814821*G0_0_1_1_0_0_4_1_0 + 0.414814814814821*G0_0_1_1_0_0_5_1_1 - 0.414814814814821*G0_0_1_2_0_1_0_0_0 - 0.414814814814821*G0_0_1_2_0_1_0_0_1 + 0.414814814814821*G0_0_1_2_0_1_1_0_0 + 0.414814814814821*G0_0_1_2_0_1_2_0_1 - 0.414814814814821*G0_0_1_2_0_1_3_1_0 - 0.414814814814821*G0_0_1_2_0_1_3_1_1 + 0.414814814814821*G0_0_1_2_0_1_4_1_0 + 0.414814814814821*G0_0_1_2_0_1_5_1_1 + 0.414814814814821*G0_0_1_3_1_0_0_0_0 + 0.414814814814821*G0_0_1_3_1_0_0_0_1 - 0.414814814814821*G0_0_1_3_1_0_1_0_0 - 0.414814814814821*G0_0_1_3_1_0_2_0_1 + 0.414814814814821*G0_0_1_3_1_0_3_1_0 + 0.414814814814821*G0_0_1_3_1_0_3_1_1 - 0.414814814814821*G0_0_1_3_1_0_4_1_0 - 0.414814814814821*G0_0_1_3_1_0_5_1_1 + 0.414814814814821*G0_0_1_3_1_1_0_0_0 + 0.414814814814821*G0_0_1_3_1_1_0_0_1 - 0.414814814814821*G0_0_1_3_1_1_1_0_0 - 0.414814814814821*G0_0_1_3_1_1_2_0_1 + 0.414814814814821*G0_0_1_3_1_1_3_1_0 + 0.414814814814821*G0_0_1_3_1_1_3_1_1 - 0.414814814814821*G0_0_1_3_1_1_4_1_0 - 0.414814814814821*G0_0_1_3_1_1_5_1_1 - 0.414814814814821*G0_0_1_4_1_0_0_0_0 - 0.414814814814821*G0_0_1_4_1_0_0_0_1 + 0.414814814814821*G0_0_1_4_1_0_1_0_0 + 0.414814814814821*G0_0_1_4_1_0_2_0_1 - 0.414814814814821*G0_0_1_4_1_0_3_1_0 - 0.414814814814821*G0_0_1_4_1_0_3_1_1 + 0.414814814814821*G0_0_1_4_1_0_4_1_0 + 0.414814814814821*G0_0_1_4_1_0_5_1_1 - 0.414814814814821*G0_0_1_5_1_1_0_0_0 - 0.414814814814821*G0_0_1_5_1_1_0_0_1 + 0.414814814814821*G0_0_1_5_1_1_1_0_0 + 0.414814814814821*G0_0_1_5_1_1_2_0_1 - 0.414814814814821*G0_0_1_5_1_1_3_1_0 - 0.414814814814821*G0_0_1_5_1_1_3_1_1 + 0.414814814814821*G0_0_1_5_1_1_4_1_0 + 0.414814814814821*G0_0_1_5_1_1_5_1_1 + 0.414814814814826*G0_1_0_0_0_0_0_0_0 + 0.414814814814826*G0_1_0_0_0_0_0_0_1 - 0.414814814814826*G0_1_0_0_0_0_1_0_0 - 0.414814814814826*G0_1_0_0_0_0_2_0_1 + 0.414814814814826*G0_1_0_0_0_0_3_1_0 + 0.414814814814826*G0_1_0_0_0_0_3_1_1 - 0.414814814814826*G0_1_0_0_0_0_4_1_0 - 0.414814814814826*G0_1_0_0_0_0_5_1_1 + 0.414814814814826*G0_1_0_0_0_1_0_0_0 + 0.414814814814826*G0_1_0_0_0_1_0_0_1 - 0.414814814814826*G0_1_0_0_0_1_1_0_0 - 0.414814814814826*G0_1_0_0_0_1_2_0_1 + 0.414814814814826*G0_1_0_0_0_1_3_1_0 + 0.414814814814826*G0_1_0_0_0_1_3_1_1 - 0.414814814814826*G0_1_0_0_0_1_4_1_0 - 0.414814814814826*G0_1_0_0_0_1_5_1_1 - 0.414814814814826*G0_1_0_1_0_0_0_0_0 - 0.414814814814826*G0_1_0_1_0_0_0_0_1 + 0.414814814814826*G0_1_0_1_0_0_1_0_0 + 0.414814814814826*G0_1_0_1_0_0_2_0_1 - 0.414814814814826*G0_1_0_1_0_0_3_1_0 - 0.414814814814826*G0_1_0_1_0_0_3_1_1 + 0.414814814814826*G0_1_0_1_0_0_4_1_0 + 0.414814814814826*G0_1_0_1_0_0_5_1_1 - 0.414814814814826*G0_1_0_2_0_1_0_0_0 - 0.414814814814826*G0_1_0_2_0_1_0_0_1 + 0.414814814814826*G0_1_0_2_0_1_1_0_0 + 0.414814814814826*G0_1_0_2_0_1_2_0_1 - 0.414814814814826*G0_1_0_2_0_1_3_1_0 - 0.414814814814826*G0_1_0_2_0_1_3_1_1 + 0.414814814814826*G0_1_0_2_0_1_4_1_0 + 0.414814814814826*G0_1_0_2_0_1_5_1_1 + 0.414814814814826*G0_1_0_3_1_0_0_0_0 + 0.414814814814826*G0_1_0_3_1_0_0_0_1 - 0.414814814814826*G0_1_0_3_1_0_1_0_0 - 0.414814814814826*G0_1_0_3_1_0_2_0_1 + 0.414814814814826*G0_1_0_3_1_0_3_1_0 + 0.414814814814826*G0_1_0_3_1_0_3_1_1 - 0.414814814814826*G0_1_0_3_1_0_4_1_0 - 0.414814814814826*G0_1_0_3_1_0_5_1_1 + 0.414814814814826*G0_1_0_3_1_1_0_0_0 + 0.414814814814826*G0_1_0_3_1_1_0_0_1 - 0.414814814814826*G0_1_0_3_1_1_1_0_0 - 0.414814814814826*G0_1_0_3_1_1_2_0_1 + 0.414814814814826*G0_1_0_3_1_1_3_1_0 + 0.414814814814826*G0_1_0_3_1_1_3_1_1 - 0.414814814814826*G0_1_0_3_1_1_4_1_0 - 0.414814814814826*G0_1_0_3_1_1_5_1_1 - 0.414814814814826*G0_1_0_4_1_0_0_0_0 - 0.414814814814826*G0_1_0_4_1_0_0_0_1 + 0.414814814814826*G0_1_0_4_1_0_1_0_0 + 0.414814814814826*G0_1_0_4_1_0_2_0_1 - 0.414814814814826*G0_1_0_4_1_0_3_1_0 - 0.414814814814826*G0_1_0_4_1_0_3_1_1 + 0.414814814814826*G0_1_0_4_1_0_4_1_0 + 0.414814814814826*G0_1_0_4_1_0_5_1_1 - 0.414814814814826*G0_1_0_5_1_1_0_0_0 - 0.414814814814826*G0_1_0_5_1_1_0_0_1 + 0.414814814814826*G0_1_0_5_1_1_1_0_0 + 0.414814814814826*G0_1_0_5_1_1_2_0_1 - 0.414814814814826*G0_1_0_5_1_1_3_1_0 - 0.414814814814826*G0_1_0_5_1_1_3_1_1 + 0.414814814814826*G0_1_0_5_1_1_4_1_0 + 0.414814814814826*G0_1_0_5_1_1_5_1_1 + 1.168253968254*G0_1_1_0_0_0_0_0_0 + 1.168253968254*G0_1_1_0_0_0_0_0_1 - 1.168253968254*G0_1_1_0_0_0_1_0_0 - 1.168253968254*G0_1_1_0_0_0_2_0_1 + 1.168253968254*G0_1_1_0_0_0_3_1_0 + 1.168253968254*G0_1_1_0_0_0_3_1_1 - 1.168253968254*G0_1_1_0_0_0_4_1_0 - 1.168253968254*G0_1_1_0_0_0_5_1_1 + 1.168253968254*G0_1_1_0_0_1_0_0_0 + 1.168253968254*G0_1_1_0_0_1_0_0_1 - 1.168253968254*G0_1_1_0_0_1_1_0_0 - 1.168253968254*G0_1_1_0_0_1_2_0_1 + 1.168253968254*G0_1_1_0_0_1_3_1_0 + 1.168253968254*G0_1_1_0_0_1_3_1_1 - 1.168253968254*G0_1_1_0_0_1_4_1_0 - 1.168253968254*G0_1_1_0_0_1_5_1_1 - 1.168253968254*G0_1_1_1_0_0_0_0_0 - 1.168253968254*G0_1_1_1_0_0_0_0_1 + 1.168253968254*G0_1_1_1_0_0_1_0_0 + 1.168253968254*G0_1_1_1_0_0_2_0_1 - 1.168253968254*G0_1_1_1_0_0_3_1_0 - 1.168253968254*G0_1_1_1_0_0_3_1_1 + 1.168253968254*G0_1_1_1_0_0_4_1_0 + 1.168253968254*G0_1_1_1_0_0_5_1_1 - 1.168253968254*G0_1_1_2_0_1_0_0_0 - 1.168253968254*G0_1_1_2_0_1_0_0_1 + 1.168253968254*G0_1_1_2_0_1_1_0_0 + 1.168253968254*G0_1_1_2_0_1_2_0_1 - 1.168253968254*G0_1_1_2_0_1_3_1_0 - 1.168253968254*G0_1_1_2_0_1_3_1_1 + 1.168253968254*G0_1_1_2_0_1_4_1_0 + 1.168253968254*G0_1_1_2_0_1_5_1_1 + 1.168253968254*G0_1_1_3_1_0_0_0_0 + 1.168253968254*G0_1_1_3_1_0_0_0_1 - 1.168253968254*G0_1_1_3_1_0_1_0_0 - 1.168253968254*G0_1_1_3_1_0_2_0_1 + 1.168253968254*G0_1_1_3_1_0_3_1_0 + 1.168253968254*G0_1_1_3_1_0_3_1_1 - 1.168253968254*G0_1_1_3_1_0_4_1_0 - 1.168253968254*G0_1_1_3_1_0_5_1_1 + 1.168253968254*G0_1_1_3_1_1_0_0_0 + 1.168253968254*G0_1_1_3_1_1_0_0_1 - 1.168253968254*G0_1_1_3_1_1_1_0_0 - 1.168253968254*G0_1_1_3_1_1_2_0_1 + 1.168253968254*G0_1_1_3_1_1_3_1_0 + 1.168253968254*G0_1_1_3_1_1_3_1_1 - 1.168253968254*G0_1_1_3_1_1_4_1_0 - 1.168253968254*G0_1_1_3_1_1_5_1_1 - 1.168253968254*G0_1_1_4_1_0_0_0_0 - 1.168253968254*G0_1_1_4_1_0_0_0_1 + 1.168253968254*G0_1_1_4_1_0_1_0_0 + 1.168253968254*G0_1_1_4_1_0_2_0_1 - 1.168253968254*G0_1_1_4_1_0_3_1_0 - 1.168253968254*G0_1_1_4_1_0_3_1_1 + 1.168253968254*G0_1_1_4_1_0_4_1_0 + 1.168253968254*G0_1_1_4_1_0_5_1_1 - 1.168253968254*G0_1_1_5_1_1_0_0_0 - 1.168253968254*G0_1_1_5_1_1_0_0_1 + 1.168253968254*G0_1_1_5_1_1_1_0_0 + 1.168253968254*G0_1_1_5_1_1_2_0_1 - 1.168253968254*G0_1_1_5_1_1_3_1_0 - 1.168253968254*G0_1_1_5_1_1_3_1_1 + 1.168253968254*G0_1_1_5_1_1_4_1_0 + 1.168253968254*G0_1_1_5_1_1_5_1_1;
    A[132] = A[314] + 0.507936507936544*G0_0_0_0_0_0_0_0_0 + 0.507936507936544*G0_0_0_0_0_0_0_0_1 - 0.507936507936544*G0_0_0_0_0_0_1_0_0 - 0.507936507936544*G0_0_0_0_0_0_2_0_1 + 0.507936507936544*G0_0_0_0_0_0_3_1_0 + 0.507936507936544*G0_0_0_0_0_0_3_1_1 - 0.507936507936544*G0_0_0_0_0_0_4_1_0 - 0.507936507936544*G0_0_0_0_0_0_5_1_1 + 0.507936507936544*G0_0_0_0_0_1_0_0_0 + 0.507936507936544*G0_0_0_0_0_1_0_0_1 - 0.507936507936544*G0_0_0_0_0_1_1_0_0 - 0.507936507936544*G0_0_0_0_0_1_2_0_1 + 0.507936507936544*G0_0_0_0_0_1_3_1_0 + 0.507936507936544*G0_0_0_0_0_1_3_1_1 - 0.507936507936544*G0_0_0_0_0_1_4_1_0 - 0.507936507936544*G0_0_0_0_0_1_5_1_1 - 0.507936507936544*G0_0_0_1_0_0_0_0_0 - 0.507936507936544*G0_0_0_1_0_0_0_0_1 + 0.507936507936544*G0_0_0_1_0_0_1_0_0 + 0.507936507936544*G0_0_0_1_0_0_2_0_1 - 0.507936507936544*G0_0_0_1_0_0_3_1_0 - 0.507936507936544*G0_0_0_1_0_0_3_1_1 + 0.507936507936544*G0_0_0_1_0_0_4_1_0 + 0.507936507936544*G0_0_0_1_0_0_5_1_1 - 0.507936507936544*G0_0_0_2_0_1_0_0_0 - 0.507936507936544*G0_0_0_2_0_1_0_0_1 + 0.507936507936544*G0_0_0_2_0_1_1_0_0 + 0.507936507936544*G0_0_0_2_0_1_2_0_1 - 0.507936507936544*G0_0_0_2_0_1_3_1_0 - 0.507936507936544*G0_0_0_2_0_1_3_1_1 + 0.507936507936544*G0_0_0_2_0_1_4_1_0 + 0.507936507936544*G0_0_0_2_0_1_5_1_1 + 0.507936507936544*G0_0_0_3_1_0_0_0_0 + 0.507936507936544*G0_0_0_3_1_0_0_0_1 - 0.507936507936544*G0_0_0_3_1_0_1_0_0 - 0.507936507936544*G0_0_0_3_1_0_2_0_1 + 0.507936507936544*G0_0_0_3_1_0_3_1_0 + 0.507936507936544*G0_0_0_3_1_0_3_1_1 - 0.507936507936544*G0_0_0_3_1_0_4_1_0 - 0.507936507936544*G0_0_0_3_1_0_5_1_1 + 0.507936507936544*G0_0_0_3_1_1_0_0_0 + 0.507936507936544*G0_0_0_3_1_1_0_0_1 - 0.507936507936544*G0_0_0_3_1_1_1_0_0 - 0.507936507936544*G0_0_0_3_1_1_2_0_1 + 0.507936507936544*G0_0_0_3_1_1_3_1_0 + 0.507936507936544*G0_0_0_3_1_1_3_1_1 - 0.507936507936544*G0_0_0_3_1_1_4_1_0 - 0.507936507936544*G0_0_0_3_1_1_5_1_1 - 0.507936507936544*G0_0_0_4_1_0_0_0_0 - 0.507936507936544*G0_0_0_4_1_0_0_0_1 + 0.507936507936544*G0_0_0_4_1_0_1_0_0 + 0.507936507936544*G0_0_0_4_1_0_2_0_1 - 0.507936507936544*G0_0_0_4_1_0_3_1_0 - 0.507936507936544*G0_0_0_4_1_0_3_1_1 + 0.507936507936544*G0_0_0_4_1_0_4_1_0 + 0.507936507936544*G0_0_0_4_1_0_5_1_1 - 0.507936507936544*G0_0_0_5_1_1_0_0_0 - 0.507936507936544*G0_0_0_5_1_1_0_0_1 + 0.507936507936544*G0_0_0_5_1_1_1_0_0 + 0.507936507936544*G0_0_0_5_1_1_2_0_1 - 0.507936507936544*G0_0_0_5_1_1_3_1_0 - 0.507936507936544*G0_0_0_5_1_1_3_1_1 + 0.507936507936544*G0_0_0_5_1_1_4_1_0 + 0.507936507936544*G0_0_0_5_1_1_5_1_1 + 0.507936507936544*G0_0_1_0_0_0_0_0_0 + 0.507936507936544*G0_0_1_0_0_0_0_0_1 - 0.507936507936544*G0_0_1_0_0_0_1_0_0 - 0.507936507936544*G0_0_1_0_0_0_2_0_1 + 0.507936507936544*G0_0_1_0_0_0_3_1_0 + 0.507936507936544*G0_0_1_0_0_0_3_1_1 - 0.507936507936544*G0_0_1_0_0_0_4_1_0 - 0.507936507936544*G0_0_1_0_0_0_5_1_1 + 0.507936507936544*G0_0_1_0_0_1_0_0_0 + 0.507936507936544*G0_0_1_0_0_1_0_0_1 - 0.507936507936544*G0_0_1_0_0_1_1_0_0 - 0.507936507936544*G0_0_1_0_0_1_2_0_1 + 0.507936507936544*G0_0_1_0_0_1_3_1_0 + 0.507936507936544*G0_0_1_0_0_1_3_1_1 - 0.507936507936544*G0_0_1_0_0_1_4_1_0 - 0.507936507936544*G0_0_1_0_0_1_5_1_1 - 0.507936507936544*G0_0_1_1_0_0_0_0_0 - 0.507936507936544*G0_0_1_1_0_0_0_0_1 + 0.507936507936544*G0_0_1_1_0_0_1_0_0 + 0.507936507936544*G0_0_1_1_0_0_2_0_1 - 0.507936507936544*G0_0_1_1_0_0_3_1_0 - 0.507936507936544*G0_0_1_1_0_0_3_1_1 + 0.507936507936544*G0_0_1_1_0_0_4_1_0 + 0.507936507936544*G0_0_1_1_0_0_5_1_1 - 0.507936507936544*G0_0_1_2_0_1_0_0_0 - 0.507936507936544*G0_0_1_2_0_1_0_0_1 + 0.507936507936544*G0_0_1_2_0_1_1_0_0 + 0.507936507936544*G0_0_1_2_0_1_2_0_1 - 0.507936507936544*G0_0_1_2_0_1_3_1_0 - 0.507936507936544*G0_0_1_2_0_1_3_1_1 + 0.507936507936544*G0_0_1_2_0_1_4_1_0 + 0.507936507936544*G0_0_1_2_0_1_5_1_1 + 0.507936507936544*G0_0_1_3_1_0_0_0_0 + 0.507936507936544*G0_0_1_3_1_0_0_0_1 - 0.507936507936544*G0_0_1_3_1_0_1_0_0 - 0.507936507936544*G0_0_1_3_1_0_2_0_1 + 0.507936507936544*G0_0_1_3_1_0_3_1_0 + 0.507936507936544*G0_0_1_3_1_0_3_1_1 - 0.507936507936544*G0_0_1_3_1_0_4_1_0 - 0.507936507936544*G0_0_1_3_1_0_5_1_1 + 0.507936507936544*G0_0_1_3_1_1_0_0_0 + 0.507936507936544*G0_0_1_3_1_1_0_0_1 - 0.507936507936544*G0_0_1_3_1_1_1_0_0 - 0.507936507936544*G0_0_1_3_1_1_2_0_1 + 0.507936507936544*G0_0_1_3_1_1_3_1_0 + 0.507936507936544*G0_0_1_3_1_1_3_1_1 - 0.507936507936544*G0_0_1_3_1_1_4_1_0 - 0.507936507936544*G0_0_1_3_1_1_5_1_1 - 0.507936507936544*G0_0_1_4_1_0_0_0_0 - 0.507936507936544*G0_0_1_4_1_0_0_0_1 + 0.507936507936544*G0_0_1_4_1_0_1_0_0 + 0.507936507936544*G0_0_1_4_1_0_2_0_1 - 0.507936507936544*G0_0_1_4_1_0_3_1_0 - 0.507936507936544*G0_0_1_4_1_0_3_1_1 + 0.507936507936544*G0_0_1_4_1_0_4_1_0 + 0.507936507936544*G0_0_1_4_1_0_5_1_1 - 0.507936507936544*G0_0_1_5_1_1_0_0_0 - 0.507936507936544*G0_0_1_5_1_1_0_0_1 + 0.507936507936544*G0_0_1_5_1_1_1_0_0 + 0.507936507936544*G0_0_1_5_1_1_2_0_1 - 0.507936507936544*G0_0_1_5_1_1_3_1_0 - 0.507936507936544*G0_0_1_5_1_1_3_1_1 + 0.507936507936544*G0_0_1_5_1_1_4_1_0 + 0.507936507936544*G0_0_1_5_1_1_5_1_1 + 0.50793650793654*G0_1_0_0_0_0_0_0_0 + 0.50793650793654*G0_1_0_0_0_0_0_0_1 - 0.50793650793654*G0_1_0_0_0_0_1_0_0 - 0.50793650793654*G0_1_0_0_0_0_2_0_1 + 0.50793650793654*G0_1_0_0_0_0_3_1_0 + 0.50793650793654*G0_1_0_0_0_0_3_1_1 - 0.50793650793654*G0_1_0_0_0_0_4_1_0 - 0.50793650793654*G0_1_0_0_0_0_5_1_1 + 0.50793650793654*G0_1_0_0_0_1_0_0_0 + 0.50793650793654*G0_1_0_0_0_1_0_0_1 - 0.50793650793654*G0_1_0_0_0_1_1_0_0 - 0.50793650793654*G0_1_0_0_0_1_2_0_1 + 0.50793650793654*G0_1_0_0_0_1_3_1_0 + 0.50793650793654*G0_1_0_0_0_1_3_1_1 - 0.50793650793654*G0_1_0_0_0_1_4_1_0 - 0.50793650793654*G0_1_0_0_0_1_5_1_1 - 0.50793650793654*G0_1_0_1_0_0_0_0_0 - 0.50793650793654*G0_1_0_1_0_0_0_0_1 + 0.50793650793654*G0_1_0_1_0_0_1_0_0 + 0.50793650793654*G0_1_0_1_0_0_2_0_1 - 0.50793650793654*G0_1_0_1_0_0_3_1_0 - 0.50793650793654*G0_1_0_1_0_0_3_1_1 + 0.50793650793654*G0_1_0_1_0_0_4_1_0 + 0.50793650793654*G0_1_0_1_0_0_5_1_1 - 0.50793650793654*G0_1_0_2_0_1_0_0_0 - 0.50793650793654*G0_1_0_2_0_1_0_0_1 + 0.50793650793654*G0_1_0_2_0_1_1_0_0 + 0.50793650793654*G0_1_0_2_0_1_2_0_1 - 0.50793650793654*G0_1_0_2_0_1_3_1_0 - 0.50793650793654*G0_1_0_2_0_1_3_1_1 + 0.50793650793654*G0_1_0_2_0_1_4_1_0 + 0.50793650793654*G0_1_0_2_0_1_5_1_1 + 0.50793650793654*G0_1_0_3_1_0_0_0_0 + 0.50793650793654*G0_1_0_3_1_0_0_0_1 - 0.50793650793654*G0_1_0_3_1_0_1_0_0 - 0.50793650793654*G0_1_0_3_1_0_2_0_1 + 0.50793650793654*G0_1_0_3_1_0_3_1_0 + 0.50793650793654*G0_1_0_3_1_0_3_1_1 - 0.50793650793654*G0_1_0_3_1_0_4_1_0 - 0.50793650793654*G0_1_0_3_1_0_5_1_1 + 0.50793650793654*G0_1_0_3_1_1_0_0_0 + 0.50793650793654*G0_1_0_3_1_1_0_0_1 - 0.50793650793654*G0_1_0_3_1_1_1_0_0 - 0.50793650793654*G0_1_0_3_1_1_2_0_1 + 0.50793650793654*G0_1_0_3_1_1_3_1_0 + 0.50793650793654*G0_1_0_3_1_1_3_1_1 - 0.50793650793654*G0_1_0_3_1_1_4_1_0 - 0.50793650793654*G0_1_0_3_1_1_5_1_1 - 0.50793650793654*G0_1_0_4_1_0_0_0_0 - 0.50793650793654*G0_1_0_4_1_0_0_0_1 + 0.50793650793654*G0_1_0_4_1_0_1_0_0 + 0.50793650793654*G0_1_0_4_1_0_2_0_1 - 0.50793650793654*G0_1_0_4_1_0_3_1_0 - 0.50793650793654*G0_1_0_4_1_0_3_1_1 + 0.50793650793654*G0_1_0_4_1_0_4_1_0 + 0.50793650793654*G0_1_0_4_1_0_5_1_1 - 0.50793650793654*G0_1_0_5_1_1_0_0_0 - 0.50793650793654*G0_1_0_5_1_1_0_0_1 + 0.50793650793654*G0_1_0_5_1_1_1_0_0 + 0.50793650793654*G0_1_0_5_1_1_2_0_1 - 0.50793650793654*G0_1_0_5_1_1_3_1_0 - 0.50793650793654*G0_1_0_5_1_1_3_1_1 + 0.50793650793654*G0_1_0_5_1_1_4_1_0 + 0.50793650793654*G0_1_0_5_1_1_5_1_1;
    A[597] = A[132];
    A[312] = A[314] + 1.62539682539685*G0_0_1_0_0_0_0_0_0 + 1.62539682539685*G0_0_1_0_0_0_0_0_1 - 1.62539682539685*G0_0_1_0_0_0_1_0_0 - 1.62539682539685*G0_0_1_0_0_0_2_0_1 + 1.62539682539685*G0_0_1_0_0_0_3_1_0 + 1.62539682539685*G0_0_1_0_0_0_3_1_1 - 1.62539682539685*G0_0_1_0_0_0_4_1_0 - 1.62539682539685*G0_0_1_0_0_0_5_1_1 + 1.62539682539685*G0_0_1_0_0_1_0_0_0 + 1.62539682539685*G0_0_1_0_0_1_0_0_1 - 1.62539682539685*G0_0_1_0_0_1_1_0_0 - 1.62539682539685*G0_0_1_0_0_1_2_0_1 + 1.62539682539685*G0_0_1_0_0_1_3_1_0 + 1.62539682539685*G0_0_1_0_0_1_3_1_1 - 1.62539682539685*G0_0_1_0_0_1_4_1_0 - 1.62539682539685*G0_0_1_0_0_1_5_1_1 - 1.62539682539685*G0_0_1_1_0_0_0_0_0 - 1.62539682539685*G0_0_1_1_0_0_0_0_1 + 1.62539682539685*G0_0_1_1_0_0_1_0_0 + 1.62539682539685*G0_0_1_1_0_0_2_0_1 - 1.62539682539685*G0_0_1_1_0_0_3_1_0 - 1.62539682539685*G0_0_1_1_0_0_3_1_1 + 1.62539682539685*G0_0_1_1_0_0_4_1_0 + 1.62539682539685*G0_0_1_1_0_0_5_1_1 - 1.62539682539685*G0_0_1_2_0_1_0_0_0 - 1.62539682539685*G0_0_1_2_0_1_0_0_1 + 1.62539682539685*G0_0_1_2_0_1_1_0_0 + 1.62539682539685*G0_0_1_2_0_1_2_0_1 - 1.62539682539685*G0_0_1_2_0_1_3_1_0 - 1.62539682539685*G0_0_1_2_0_1_3_1_1 + 1.62539682539685*G0_0_1_2_0_1_4_1_0 + 1.62539682539685*G0_0_1_2_0_1_5_1_1 + 1.62539682539685*G0_0_1_3_1_0_0_0_0 + 1.62539682539685*G0_0_1_3_1_0_0_0_1 - 1.62539682539685*G0_0_1_3_1_0_1_0_0 - 1.62539682539685*G0_0_1_3_1_0_2_0_1 + 1.62539682539685*G0_0_1_3_1_0_3_1_0 + 1.62539682539685*G0_0_1_3_1_0_3_1_1 - 1.62539682539685*G0_0_1_3_1_0_4_1_0 - 1.62539682539685*G0_0_1_3_1_0_5_1_1 + 1.62539682539685*G0_0_1_3_1_1_0_0_0 + 1.62539682539685*G0_0_1_3_1_1_0_0_1 - 1.62539682539685*G0_0_1_3_1_1_1_0_0 - 1.62539682539685*G0_0_1_3_1_1_2_0_1 + 1.62539682539685*G0_0_1_3_1_1_3_1_0 + 1.62539682539685*G0_0_1_3_1_1_3_1_1 - 1.62539682539685*G0_0_1_3_1_1_4_1_0 - 1.62539682539685*G0_0_1_3_1_1_5_1_1 - 1.62539682539685*G0_0_1_4_1_0_0_0_0 - 1.62539682539685*G0_0_1_4_1_0_0_0_1 + 1.62539682539685*G0_0_1_4_1_0_1_0_0 + 1.62539682539685*G0_0_1_4_1_0_2_0_1 - 1.62539682539685*G0_0_1_4_1_0_3_1_0 - 1.62539682539685*G0_0_1_4_1_0_3_1_1 + 1.62539682539685*G0_0_1_4_1_0_4_1_0 + 1.62539682539685*G0_0_1_4_1_0_5_1_1 - 1.62539682539685*G0_0_1_5_1_1_0_0_0 - 1.62539682539685*G0_0_1_5_1_1_0_0_1 + 1.62539682539685*G0_0_1_5_1_1_1_0_0 + 1.62539682539685*G0_0_1_5_1_1_2_0_1 - 1.62539682539685*G0_0_1_5_1_1_3_1_0 - 1.62539682539685*G0_0_1_5_1_1_3_1_1 + 1.62539682539685*G0_0_1_5_1_1_4_1_0 + 1.62539682539685*G0_0_1_5_1_1_5_1_1 + 1.62539682539684*G0_1_0_0_0_0_0_0_0 + 1.62539682539684*G0_1_0_0_0_0_0_0_1 - 1.62539682539684*G0_1_0_0_0_0_1_0_0 - 1.62539682539684*G0_1_0_0_0_0_2_0_1 + 1.62539682539684*G0_1_0_0_0_0_3_1_0 + 1.62539682539684*G0_1_0_0_0_0_3_1_1 - 1.62539682539684*G0_1_0_0_0_0_4_1_0 - 1.62539682539684*G0_1_0_0_0_0_5_1_1 + 1.62539682539684*G0_1_0_0_0_1_0_0_0 + 1.62539682539684*G0_1_0_0_0_1_0_0_1 - 1.62539682539684*G0_1_0_0_0_1_1_0_0 - 1.62539682539684*G0_1_0_0_0_1_2_0_1 + 1.62539682539684*G0_1_0_0_0_1_3_1_0 + 1.62539682539684*G0_1_0_0_0_1_3_1_1 - 1.62539682539684*G0_1_0_0_0_1_4_1_0 - 1.62539682539684*G0_1_0_0_0_1_5_1_1 - 1.62539682539684*G0_1_0_1_0_0_0_0_0 - 1.62539682539684*G0_1_0_1_0_0_0_0_1 + 1.62539682539684*G0_1_0_1_0_0_1_0_0 + 1.62539682539684*G0_1_0_1_0_0_2_0_1 - 1.62539682539684*G0_1_0_1_0_0_3_1_0 - 1.62539682539684*G0_1_0_1_0_0_3_1_1 + 1.62539682539684*G0_1_0_1_0_0_4_1_0 + 1.62539682539684*G0_1_0_1_0_0_5_1_1 - 1.62539682539684*G0_1_0_2_0_1_0_0_0 - 1.62539682539684*G0_1_0_2_0_1_0_0_1 + 1.62539682539684*G0_1_0_2_0_1_1_0_0 + 1.62539682539684*G0_1_0_2_0_1_2_0_1 - 1.62539682539684*G0_1_0_2_0_1_3_1_0 - 1.62539682539684*G0_1_0_2_0_1_3_1_1 + 1.62539682539684*G0_1_0_2_0_1_4_1_0 + 1.62539682539684*G0_1_0_2_0_1_5_1_1 + 1.62539682539684*G0_1_0_3_1_0_0_0_0 + 1.62539682539684*G0_1_0_3_1_0_0_0_1 - 1.62539682539684*G0_1_0_3_1_0_1_0_0 - 1.62539682539684*G0_1_0_3_1_0_2_0_1 + 1.62539682539684*G0_1_0_3_1_0_3_1_0 + 1.62539682539684*G0_1_0_3_1_0_3_1_1 - 1.62539682539684*G0_1_0_3_1_0_4_1_0 - 1.62539682539684*G0_1_0_3_1_0_5_1_1 + 1.62539682539684*G0_1_0_3_1_1_0_0_0 + 1.62539682539684*G0_1_0_3_1_1_0_0_1 - 1.62539682539684*G0_1_0_3_1_1_1_0_0 - 1.62539682539684*G0_1_0_3_1_1_2_0_1 + 1.62539682539684*G0_1_0_3_1_1_3_1_0 + 1.62539682539684*G0_1_0_3_1_1_3_1_1 - 1.62539682539684*G0_1_0_3_1_1_4_1_0 - 1.62539682539684*G0_1_0_3_1_1_5_1_1 - 1.62539682539684*G0_1_0_4_1_0_0_0_0 - 1.62539682539684*G0_1_0_4_1_0_0_0_1 + 1.62539682539684*G0_1_0_4_1_0_1_0_0 + 1.62539682539684*G0_1_0_4_1_0_2_0_1 - 1.62539682539684*G0_1_0_4_1_0_3_1_0 - 1.62539682539684*G0_1_0_4_1_0_3_1_1 + 1.62539682539684*G0_1_0_4_1_0_4_1_0 + 1.62539682539684*G0_1_0_4_1_0_5_1_1 - 1.62539682539684*G0_1_0_5_1_1_0_0_0 - 1.62539682539684*G0_1_0_5_1_1_0_0_1 + 1.62539682539684*G0_1_0_5_1_1_1_0_0 + 1.62539682539684*G0_1_0_5_1_1_2_0_1 - 1.62539682539684*G0_1_0_5_1_1_3_1_0 - 1.62539682539684*G0_1_0_5_1_1_3_1_1 + 1.62539682539684*G0_1_0_5_1_1_4_1_0 + 1.62539682539684*G0_1_0_5_1_1_5_1_1;
    A[367] = A[312] + 0.507936507936511*G0_0_0_0_0_0_0_0_0 + 0.507936507936511*G0_0_0_0_0_0_0_0_1 - 0.507936507936511*G0_0_0_0_0_0_1_0_0 - 0.507936507936511*G0_0_0_0_0_0_2_0_1 + 0.507936507936511*G0_0_0_0_0_0_3_1_0 + 0.507936507936511*G0_0_0_0_0_0_3_1_1 - 0.507936507936511*G0_0_0_0_0_0_4_1_0 - 0.507936507936511*G0_0_0_0_0_0_5_1_1 + 0.507936507936511*G0_0_0_0_0_1_0_0_0 + 0.507936507936511*G0_0_0_0_0_1_0_0_1 - 0.507936507936511*G0_0_0_0_0_1_1_0_0 - 0.507936507936511*G0_0_0_0_0_1_2_0_1 + 0.507936507936511*G0_0_0_0_0_1_3_1_0 + 0.507936507936511*G0_0_0_0_0_1_3_1_1 - 0.507936507936511*G0_0_0_0_0_1_4_1_0 - 0.507936507936511*G0_0_0_0_0_1_5_1_1 - 0.507936507936511*G0_0_0_1_0_0_0_0_0 - 0.507936507936511*G0_0_0_1_0_0_0_0_1 + 0.507936507936511*G0_0_0_1_0_0_1_0_0 + 0.507936507936511*G0_0_0_1_0_0_2_0_1 - 0.507936507936511*G0_0_0_1_0_0_3_1_0 - 0.507936507936511*G0_0_0_1_0_0_3_1_1 + 0.507936507936511*G0_0_0_1_0_0_4_1_0 + 0.507936507936511*G0_0_0_1_0_0_5_1_1 - 0.507936507936511*G0_0_0_2_0_1_0_0_0 - 0.507936507936511*G0_0_0_2_0_1_0_0_1 + 0.507936507936511*G0_0_0_2_0_1_1_0_0 + 0.507936507936511*G0_0_0_2_0_1_2_0_1 - 0.507936507936511*G0_0_0_2_0_1_3_1_0 - 0.507936507936511*G0_0_0_2_0_1_3_1_1 + 0.507936507936511*G0_0_0_2_0_1_4_1_0 + 0.507936507936511*G0_0_0_2_0_1_5_1_1 + 0.507936507936511*G0_0_0_3_1_0_0_0_0 + 0.507936507936511*G0_0_0_3_1_0_0_0_1 - 0.507936507936511*G0_0_0_3_1_0_1_0_0 - 0.507936507936511*G0_0_0_3_1_0_2_0_1 + 0.507936507936511*G0_0_0_3_1_0_3_1_0 + 0.507936507936511*G0_0_0_3_1_0_3_1_1 - 0.507936507936511*G0_0_0_3_1_0_4_1_0 - 0.507936507936511*G0_0_0_3_1_0_5_1_1 + 0.507936507936511*G0_0_0_3_1_1_0_0_0 + 0.507936507936511*G0_0_0_3_1_1_0_0_1 - 0.507936507936511*G0_0_0_3_1_1_1_0_0 - 0.507936507936511*G0_0_0_3_1_1_2_0_1 + 0.507936507936511*G0_0_0_3_1_1_3_1_0 + 0.507936507936511*G0_0_0_3_1_1_3_1_1 - 0.507936507936511*G0_0_0_3_1_1_4_1_0 - 0.507936507936511*G0_0_0_3_1_1_5_1_1 - 0.507936507936511*G0_0_0_4_1_0_0_0_0 - 0.507936507936511*G0_0_0_4_1_0_0_0_1 + 0.507936507936511*G0_0_0_4_1_0_1_0_0 + 0.507936507936511*G0_0_0_4_1_0_2_0_1 - 0.507936507936511*G0_0_0_4_1_0_3_1_0 - 0.507936507936511*G0_0_0_4_1_0_3_1_1 + 0.507936507936511*G0_0_0_4_1_0_4_1_0 + 0.507936507936511*G0_0_0_4_1_0_5_1_1 - 0.507936507936511*G0_0_0_5_1_1_0_0_0 - 0.507936507936511*G0_0_0_5_1_1_0_0_1 + 0.507936507936511*G0_0_0_5_1_1_1_0_0 + 0.507936507936511*G0_0_0_5_1_1_2_0_1 - 0.507936507936511*G0_0_0_5_1_1_3_1_0 - 0.507936507936511*G0_0_0_5_1_1_3_1_1 + 0.507936507936511*G0_0_0_5_1_1_4_1_0 + 0.507936507936511*G0_0_0_5_1_1_5_1_1 - 0.507936507936506*G0_1_1_0_0_0_0_0_0 - 0.507936507936506*G0_1_1_0_0_0_0_0_1 + 0.507936507936506*G0_1_1_0_0_0_1_0_0 + 0.507936507936506*G0_1_1_0_0_0_2_0_1 - 0.507936507936506*G0_1_1_0_0_0_3_1_0 - 0.507936507936506*G0_1_1_0_0_0_3_1_1 + 0.507936507936506*G0_1_1_0_0_0_4_1_0 + 0.507936507936506*G0_1_1_0_0_0_5_1_1 - 0.507936507936506*G0_1_1_0_0_1_0_0_0 - 0.507936507936506*G0_1_1_0_0_1_0_0_1 + 0.507936507936506*G0_1_1_0_0_1_1_0_0 + 0.507936507936506*G0_1_1_0_0_1_2_0_1 - 0.507936507936506*G0_1_1_0_0_1_3_1_0 - 0.507936507936506*G0_1_1_0_0_1_3_1_1 + 0.507936507936506*G0_1_1_0_0_1_4_1_0 + 0.507936507936506*G0_1_1_0_0_1_5_1_1 + 0.507936507936506*G0_1_1_1_0_0_0_0_0 + 0.507936507936506*G0_1_1_1_0_0_0_0_1 - 0.507936507936506*G0_1_1_1_0_0_1_0_0 - 0.507936507936506*G0_1_1_1_0_0_2_0_1 + 0.507936507936506*G0_1_1_1_0_0_3_1_0 + 0.507936507936506*G0_1_1_1_0_0_3_1_1 - 0.507936507936506*G0_1_1_1_0_0_4_1_0 - 0.507936507936506*G0_1_1_1_0_0_5_1_1 + 0.507936507936506*G0_1_1_2_0_1_0_0_0 + 0.507936507936506*G0_1_1_2_0_1_0_0_1 - 0.507936507936506*G0_1_1_2_0_1_1_0_0 - 0.507936507936506*G0_1_1_2_0_1_2_0_1 + 0.507936507936506*G0_1_1_2_0_1_3_1_0 + 0.507936507936506*G0_1_1_2_0_1_3_1_1 - 0.507936507936506*G0_1_1_2_0_1_4_1_0 - 0.507936507936506*G0_1_1_2_0_1_5_1_1 - 0.507936507936506*G0_1_1_3_1_0_0_0_0 - 0.507936507936506*G0_1_1_3_1_0_0_0_1 + 0.507936507936506*G0_1_1_3_1_0_1_0_0 + 0.507936507936506*G0_1_1_3_1_0_2_0_1 - 0.507936507936506*G0_1_1_3_1_0_3_1_0 - 0.507936507936506*G0_1_1_3_1_0_3_1_1 + 0.507936507936506*G0_1_1_3_1_0_4_1_0 + 0.507936507936506*G0_1_1_3_1_0_5_1_1 - 0.507936507936506*G0_1_1_3_1_1_0_0_0 - 0.507936507936506*G0_1_1_3_1_1_0_0_1 + 0.507936507936506*G0_1_1_3_1_1_1_0_0 + 0.507936507936506*G0_1_1_3_1_1_2_0_1 - 0.507936507936506*G0_1_1_3_1_1_3_1_0 - 0.507936507936506*G0_1_1_3_1_1_3_1_1 + 0.507936507936506*G0_1_1_3_1_1_4_1_0 + 0.507936507936506*G0_1_1_3_1_1_5_1_1 + 0.507936507936506*G0_1_1_4_1_0_0_0_0 + 0.507936507936506*G0_1_1_4_1_0_0_0_1 - 0.507936507936506*G0_1_1_4_1_0_1_0_0 - 0.507936507936506*G0_1_1_4_1_0_2_0_1 + 0.507936507936506*G0_1_1_4_1_0_3_1_0 + 0.507936507936506*G0_1_1_4_1_0_3_1_1 - 0.507936507936506*G0_1_1_4_1_0_4_1_0 - 0.507936507936506*G0_1_1_4_1_0_5_1_1 + 0.507936507936506*G0_1_1_5_1_1_0_0_0 + 0.507936507936506*G0_1_1_5_1_1_0_0_1 - 0.507936507936506*G0_1_1_5_1_1_1_0_0 - 0.507936507936506*G0_1_1_5_1_1_2_0_1 + 0.507936507936506*G0_1_1_5_1_1_3_1_0 + 0.507936507936506*G0_1_1_5_1_1_3_1_1 - 0.507936507936506*G0_1_1_5_1_1_4_1_0 - 0.507936507936506*G0_1_1_5_1_1_5_1_1;
    A[370] = A[312];
    A[134] = A[314] - 2.74285714285719*G0_0_0_0_0_0_0_0_0 - 2.74285714285719*G0_0_0_0_0_0_0_0_1 + 2.74285714285719*G0_0_0_0_0_0_1_0_0 + 2.74285714285719*G0_0_0_0_0_0_2_0_1 - 2.74285714285719*G0_0_0_0_0_0_3_1_0 - 2.74285714285719*G0_0_0_0_0_0_3_1_1 + 2.74285714285719*G0_0_0_0_0_0_4_1_0 + 2.74285714285719*G0_0_0_0_0_0_5_1_1 - 2.74285714285719*G0_0_0_0_0_1_0_0_0 - 2.74285714285719*G0_0_0_0_0_1_0_0_1 + 2.74285714285719*G0_0_0_0_0_1_1_0_0 + 2.74285714285719*G0_0_0_0_0_1_2_0_1 - 2.74285714285719*G0_0_0_0_0_1_3_1_0 - 2.74285714285719*G0_0_0_0_0_1_3_1_1 + 2.74285714285719*G0_0_0_0_0_1_4_1_0 + 2.74285714285719*G0_0_0_0_0_1_5_1_1 + 2.74285714285719*G0_0_0_1_0_0_0_0_0 + 2.74285714285719*G0_0_0_1_0_0_0_0_1 - 2.74285714285719*G0_0_0_1_0_0_1_0_0 - 2.74285714285719*G0_0_0_1_0_0_2_0_1 + 2.74285714285719*G0_0_0_1_0_0_3_1_0 + 2.74285714285719*G0_0_0_1_0_0_3_1_1 - 2.74285714285719*G0_0_0_1_0_0_4_1_0 - 2.74285714285719*G0_0_0_1_0_0_5_1_1 + 2.74285714285719*G0_0_0_2_0_1_0_0_0 + 2.74285714285719*G0_0_0_2_0_1_0_0_1 - 2.74285714285719*G0_0_0_2_0_1_1_0_0 - 2.74285714285719*G0_0_0_2_0_1_2_0_1 + 2.74285714285719*G0_0_0_2_0_1_3_1_0 + 2.74285714285719*G0_0_0_2_0_1_3_1_1 - 2.74285714285719*G0_0_0_2_0_1_4_1_0 - 2.74285714285719*G0_0_0_2_0_1_5_1_1 - 2.74285714285719*G0_0_0_3_1_0_0_0_0 - 2.74285714285719*G0_0_0_3_1_0_0_0_1 + 2.74285714285719*G0_0_0_3_1_0_1_0_0 + 2.74285714285719*G0_0_0_3_1_0_2_0_1 - 2.74285714285719*G0_0_0_3_1_0_3_1_0 - 2.74285714285719*G0_0_0_3_1_0_3_1_1 + 2.74285714285719*G0_0_0_3_1_0_4_1_0 + 2.74285714285719*G0_0_0_3_1_0_5_1_1 - 2.74285714285719*G0_0_0_3_1_1_0_0_0 - 2.74285714285719*G0_0_0_3_1_1_0_0_1 + 2.74285714285719*G0_0_0_3_1_1_1_0_0 + 2.74285714285719*G0_0_0_3_1_1_2_0_1 - 2.74285714285719*G0_0_0_3_1_1_3_1_0 - 2.74285714285719*G0_0_0_3_1_1_3_1_1 + 2.74285714285719*G0_0_0_3_1_1_4_1_0 + 2.74285714285719*G0_0_0_3_1_1_5_1_1 + 2.74285714285719*G0_0_0_4_1_0_0_0_0 + 2.74285714285719*G0_0_0_4_1_0_0_0_1 - 2.74285714285719*G0_0_0_4_1_0_1_0_0 - 2.74285714285719*G0_0_0_4_1_0_2_0_1 + 2.74285714285719*G0_0_0_4_1_0_3_1_0 + 2.74285714285719*G0_0_0_4_1_0_3_1_1 - 2.74285714285719*G0_0_0_4_1_0_4_1_0 - 2.74285714285719*G0_0_0_4_1_0_5_1_1 + 2.74285714285719*G0_0_0_5_1_1_0_0_0 + 2.74285714285719*G0_0_0_5_1_1_0_0_1 - 2.74285714285719*G0_0_0_5_1_1_1_0_0 - 2.74285714285719*G0_0_0_5_1_1_2_0_1 + 2.74285714285719*G0_0_0_5_1_1_3_1_0 + 2.74285714285719*G0_0_0_5_1_1_3_1_1 - 2.74285714285719*G0_0_0_5_1_1_4_1_0 - 2.74285714285719*G0_0_0_5_1_1_5_1_1 - 1.11746031746035*G0_0_1_0_0_0_0_0_0 - 1.11746031746035*G0_0_1_0_0_0_0_0_1 + 1.11746031746035*G0_0_1_0_0_0_1_0_0 + 1.11746031746035*G0_0_1_0_0_0_2_0_1 - 1.11746031746035*G0_0_1_0_0_0_3_1_0 - 1.11746031746035*G0_0_1_0_0_0_3_1_1 + 1.11746031746035*G0_0_1_0_0_0_4_1_0 + 1.11746031746035*G0_0_1_0_0_0_5_1_1 - 1.11746031746035*G0_0_1_0_0_1_0_0_0 - 1.11746031746035*G0_0_1_0_0_1_0_0_1 + 1.11746031746035*G0_0_1_0_0_1_1_0_0 + 1.11746031746035*G0_0_1_0_0_1_2_0_1 - 1.11746031746035*G0_0_1_0_0_1_3_1_0 - 1.11746031746035*G0_0_1_0_0_1_3_1_1 + 1.11746031746035*G0_0_1_0_0_1_4_1_0 + 1.11746031746035*G0_0_1_0_0_1_5_1_1 + 1.11746031746035*G0_0_1_1_0_0_0_0_0 + 1.11746031746035*G0_0_1_1_0_0_0_0_1 - 1.11746031746035*G0_0_1_1_0_0_1_0_0 - 1.11746031746035*G0_0_1_1_0_0_2_0_1 + 1.11746031746035*G0_0_1_1_0_0_3_1_0 + 1.11746031746035*G0_0_1_1_0_0_3_1_1 - 1.11746031746035*G0_0_1_1_0_0_4_1_0 - 1.11746031746035*G0_0_1_1_0_0_5_1_1 + 1.11746031746035*G0_0_1_2_0_1_0_0_0 + 1.11746031746035*G0_0_1_2_0_1_0_0_1 - 1.11746031746035*G0_0_1_2_0_1_1_0_0 - 1.11746031746035*G0_0_1_2_0_1_2_0_1 + 1.11746031746035*G0_0_1_2_0_1_3_1_0 + 1.11746031746035*G0_0_1_2_0_1_3_1_1 - 1.11746031746035*G0_0_1_2_0_1_4_1_0 - 1.11746031746035*G0_0_1_2_0_1_5_1_1 - 1.11746031746035*G0_0_1_3_1_0_0_0_0 - 1.11746031746035*G0_0_1_3_1_0_0_0_1 + 1.11746031746035*G0_0_1_3_1_0_1_0_0 + 1.11746031746035*G0_0_1_3_1_0_2_0_1 - 1.11746031746035*G0_0_1_3_1_0_3_1_0 - 1.11746031746035*G0_0_1_3_1_0_3_1_1 + 1.11746031746035*G0_0_1_3_1_0_4_1_0 + 1.11746031746035*G0_0_1_3_1_0_5_1_1 - 1.11746031746035*G0_0_1_3_1_1_0_0_0 - 1.11746031746035*G0_0_1_3_1_1_0_0_1 + 1.11746031746035*G0_0_1_3_1_1_1_0_0 + 1.11746031746035*G0_0_1_3_1_1_2_0_1 - 1.11746031746035*G0_0_1_3_1_1_3_1_0 - 1.11746031746035*G0_0_1_3_1_1_3_1_1 + 1.11746031746035*G0_0_1_3_1_1_4_1_0 + 1.11746031746035*G0_0_1_3_1_1_5_1_1 + 1.11746031746035*G0_0_1_4_1_0_0_0_0 + 1.11746031746035*G0_0_1_4_1_0_0_0_1 - 1.11746031746035*G0_0_1_4_1_0_1_0_0 - 1.11746031746035*G0_0_1_4_1_0_2_0_1 + 1.11746031746035*G0_0_1_4_1_0_3_1_0 + 1.11746031746035*G0_0_1_4_1_0_3_1_1 - 1.11746031746035*G0_0_1_4_1_0_4_1_0 - 1.11746031746035*G0_0_1_4_1_0_5_1_1 + 1.11746031746035*G0_0_1_5_1_1_0_0_0 + 1.11746031746035*G0_0_1_5_1_1_0_0_1 - 1.11746031746035*G0_0_1_5_1_1_1_0_0 - 1.11746031746035*G0_0_1_5_1_1_2_0_1 + 1.11746031746035*G0_0_1_5_1_1_3_1_0 + 1.11746031746035*G0_0_1_5_1_1_3_1_1 - 1.11746031746035*G0_0_1_5_1_1_4_1_0 - 1.11746031746035*G0_0_1_5_1_1_5_1_1 - 1.11746031746034*G0_1_0_0_0_0_0_0_0 - 1.11746031746034*G0_1_0_0_0_0_0_0_1 + 1.11746031746034*G0_1_0_0_0_0_1_0_0 + 1.11746031746034*G0_1_0_0_0_0_2_0_1 - 1.11746031746034*G0_1_0_0_0_0_3_1_0 - 1.11746031746034*G0_1_0_0_0_0_3_1_1 + 1.11746031746034*G0_1_0_0_0_0_4_1_0 + 1.11746031746034*G0_1_0_0_0_0_5_1_1 - 1.11746031746034*G0_1_0_0_0_1_0_0_0 - 1.11746031746034*G0_1_0_0_0_1_0_0_1 + 1.11746031746034*G0_1_0_0_0_1_1_0_0 + 1.11746031746034*G0_1_0_0_0_1_2_0_1 - 1.11746031746034*G0_1_0_0_0_1_3_1_0 - 1.11746031746034*G0_1_0_0_0_1_3_1_1 + 1.11746031746034*G0_1_0_0_0_1_4_1_0 + 1.11746031746034*G0_1_0_0_0_1_5_1_1 + 1.11746031746034*G0_1_0_1_0_0_0_0_0 + 1.11746031746034*G0_1_0_1_0_0_0_0_1 - 1.11746031746034*G0_1_0_1_0_0_1_0_0 - 1.11746031746034*G0_1_0_1_0_0_2_0_1 + 1.11746031746034*G0_1_0_1_0_0_3_1_0 + 1.11746031746034*G0_1_0_1_0_0_3_1_1 - 1.11746031746034*G0_1_0_1_0_0_4_1_0 - 1.11746031746034*G0_1_0_1_0_0_5_1_1 + 1.11746031746034*G0_1_0_2_0_1_0_0_0 + 1.11746031746034*G0_1_0_2_0_1_0_0_1 - 1.11746031746034*G0_1_0_2_0_1_1_0_0 - 1.11746031746034*G0_1_0_2_0_1_2_0_1 + 1.11746031746034*G0_1_0_2_0_1_3_1_0 + 1.11746031746034*G0_1_0_2_0_1_3_1_1 - 1.11746031746034*G0_1_0_2_0_1_4_1_0 - 1.11746031746034*G0_1_0_2_0_1_5_1_1 - 1.11746031746034*G0_1_0_3_1_0_0_0_0 - 1.11746031746034*G0_1_0_3_1_0_0_0_1 + 1.11746031746034*G0_1_0_3_1_0_1_0_0 + 1.11746031746034*G0_1_0_3_1_0_2_0_1 - 1.11746031746034*G0_1_0_3_1_0_3_1_0 - 1.11746031746034*G0_1_0_3_1_0_3_1_1 + 1.11746031746034*G0_1_0_3_1_0_4_1_0 + 1.11746031746034*G0_1_0_3_1_0_5_1_1 - 1.11746031746034*G0_1_0_3_1_1_0_0_0 - 1.11746031746034*G0_1_0_3_1_1_0_0_1 + 1.11746031746034*G0_1_0_3_1_1_1_0_0 + 1.11746031746034*G0_1_0_3_1_1_2_0_1 - 1.11746031746034*G0_1_0_3_1_1_3_1_0 - 1.11746031746034*G0_1_0_3_1_1_3_1_1 + 1.11746031746034*G0_1_0_3_1_1_4_1_0 + 1.11746031746034*G0_1_0_3_1_1_5_1_1 + 1.11746031746034*G0_1_0_4_1_0_0_0_0 + 1.11746031746034*G0_1_0_4_1_0_0_0_1 - 1.11746031746034*G0_1_0_4_1_0_1_0_0 - 1.11746031746034*G0_1_0_4_1_0_2_0_1 + 1.11746031746034*G0_1_0_4_1_0_3_1_0 + 1.11746031746034*G0_1_0_4_1_0_3_1_1 - 1.11746031746034*G0_1_0_4_1_0_4_1_0 - 1.11746031746034*G0_1_0_4_1_0_5_1_1 + 1.11746031746034*G0_1_0_5_1_1_0_0_0 + 1.11746031746034*G0_1_0_5_1_1_0_0_1 - 1.11746031746034*G0_1_0_5_1_1_1_0_0 - 1.11746031746034*G0_1_0_5_1_1_2_0_1 + 1.11746031746034*G0_1_0_5_1_1_3_1_0 + 1.11746031746034*G0_1_0_5_1_1_3_1_1 - 1.11746031746034*G0_1_0_5_1_1_4_1_0 - 1.11746031746034*G0_1_0_5_1_1_5_1_1;
    A[394] = A[134] + 3.2507936507937*G0_0_0_0_0_0_0_0_0 + 3.2507936507937*G0_0_0_0_0_0_0_0_1 - 3.2507936507937*G0_0_0_0_0_0_1_0_0 - 3.2507936507937*G0_0_0_0_0_0_2_0_1 + 3.2507936507937*G0_0_0_0_0_0_3_1_0 + 3.2507936507937*G0_0_0_0_0_0_3_1_1 - 3.2507936507937*G0_0_0_0_0_0_4_1_0 - 3.2507936507937*G0_0_0_0_0_0_5_1_1 + 3.2507936507937*G0_0_0_0_0_1_0_0_0 + 3.2507936507937*G0_0_0_0_0_1_0_0_1 - 3.2507936507937*G0_0_0_0_0_1_1_0_0 - 3.2507936507937*G0_0_0_0_0_1_2_0_1 + 3.2507936507937*G0_0_0_0_0_1_3_1_0 + 3.2507936507937*G0_0_0_0_0_1_3_1_1 - 3.2507936507937*G0_0_0_0_0_1_4_1_0 - 3.2507936507937*G0_0_0_0_0_1_5_1_1 - 3.2507936507937*G0_0_0_1_0_0_0_0_0 - 3.2507936507937*G0_0_0_1_0_0_0_0_1 + 3.2507936507937*G0_0_0_1_0_0_1_0_0 + 3.2507936507937*G0_0_0_1_0_0_2_0_1 - 3.2507936507937*G0_0_0_1_0_0_3_1_0 - 3.2507936507937*G0_0_0_1_0_0_3_1_1 + 3.2507936507937*G0_0_0_1_0_0_4_1_0 + 3.2507936507937*G0_0_0_1_0_0_5_1_1 - 3.2507936507937*G0_0_0_2_0_1_0_0_0 - 3.2507936507937*G0_0_0_2_0_1_0_0_1 + 3.2507936507937*G0_0_0_2_0_1_1_0_0 + 3.2507936507937*G0_0_0_2_0_1_2_0_1 - 3.2507936507937*G0_0_0_2_0_1_3_1_0 - 3.2507936507937*G0_0_0_2_0_1_3_1_1 + 3.2507936507937*G0_0_0_2_0_1_4_1_0 + 3.2507936507937*G0_0_0_2_0_1_5_1_1 + 3.2507936507937*G0_0_0_3_1_0_0_0_0 + 3.2507936507937*G0_0_0_3_1_0_0_0_1 - 3.2507936507937*G0_0_0_3_1_0_1_0_0 - 3.2507936507937*G0_0_0_3_1_0_2_0_1 + 3.2507936507937*G0_0_0_3_1_0_3_1_0 + 3.2507936507937*G0_0_0_3_1_0_3_1_1 - 3.2507936507937*G0_0_0_3_1_0_4_1_0 - 3.2507936507937*G0_0_0_3_1_0_5_1_1 + 3.2507936507937*G0_0_0_3_1_1_0_0_0 + 3.2507936507937*G0_0_0_3_1_1_0_0_1 - 3.2507936507937*G0_0_0_3_1_1_1_0_0 - 3.2507936507937*G0_0_0_3_1_1_2_0_1 + 3.2507936507937*G0_0_0_3_1_1_3_1_0 + 3.2507936507937*G0_0_0_3_1_1_3_1_1 - 3.2507936507937*G0_0_0_3_1_1_4_1_0 - 3.2507936507937*G0_0_0_3_1_1_5_1_1 - 3.2507936507937*G0_0_0_4_1_0_0_0_0 - 3.2507936507937*G0_0_0_4_1_0_0_0_1 + 3.2507936507937*G0_0_0_4_1_0_1_0_0 + 3.2507936507937*G0_0_0_4_1_0_2_0_1 - 3.2507936507937*G0_0_0_4_1_0_3_1_0 - 3.2507936507937*G0_0_0_4_1_0_3_1_1 + 3.2507936507937*G0_0_0_4_1_0_4_1_0 + 3.2507936507937*G0_0_0_4_1_0_5_1_1 - 3.2507936507937*G0_0_0_5_1_1_0_0_0 - 3.2507936507937*G0_0_0_5_1_1_0_0_1 + 3.2507936507937*G0_0_0_5_1_1_1_0_0 + 3.2507936507937*G0_0_0_5_1_1_2_0_1 - 3.2507936507937*G0_0_0_5_1_1_3_1_0 - 3.2507936507937*G0_0_0_5_1_1_3_1_1 + 3.2507936507937*G0_0_0_5_1_1_4_1_0 + 3.2507936507937*G0_0_0_5_1_1_5_1_1 - 3.25079365079369*G0_1_1_0_0_0_0_0_0 - 3.25079365079369*G0_1_1_0_0_0_0_0_1 + 3.25079365079369*G0_1_1_0_0_0_1_0_0 + 3.25079365079369*G0_1_1_0_0_0_2_0_1 - 3.25079365079369*G0_1_1_0_0_0_3_1_0 - 3.25079365079369*G0_1_1_0_0_0_3_1_1 + 3.25079365079369*G0_1_1_0_0_0_4_1_0 + 3.25079365079369*G0_1_1_0_0_0_5_1_1 - 3.25079365079369*G0_1_1_0_0_1_0_0_0 - 3.25079365079369*G0_1_1_0_0_1_0_0_1 + 3.25079365079369*G0_1_1_0_0_1_1_0_0 + 3.25079365079369*G0_1_1_0_0_1_2_0_1 - 3.25079365079369*G0_1_1_0_0_1_3_1_0 - 3.25079365079369*G0_1_1_0_0_1_3_1_1 + 3.25079365079369*G0_1_1_0_0_1_4_1_0 + 3.25079365079369*G0_1_1_0_0_1_5_1_1 + 3.25079365079369*G0_1_1_1_0_0_0_0_0 + 3.25079365079369*G0_1_1_1_0_0_0_0_1 - 3.25079365079369*G0_1_1_1_0_0_1_0_0 - 3.25079365079369*G0_1_1_1_0_0_2_0_1 + 3.25079365079369*G0_1_1_1_0_0_3_1_0 + 3.25079365079369*G0_1_1_1_0_0_3_1_1 - 3.25079365079369*G0_1_1_1_0_0_4_1_0 - 3.25079365079369*G0_1_1_1_0_0_5_1_1 + 3.25079365079369*G0_1_1_2_0_1_0_0_0 + 3.25079365079369*G0_1_1_2_0_1_0_0_1 - 3.25079365079369*G0_1_1_2_0_1_1_0_0 - 3.25079365079369*G0_1_1_2_0_1_2_0_1 + 3.25079365079369*G0_1_1_2_0_1_3_1_0 + 3.25079365079369*G0_1_1_2_0_1_3_1_1 - 3.25079365079369*G0_1_1_2_0_1_4_1_0 - 3.25079365079369*G0_1_1_2_0_1_5_1_1 - 3.25079365079369*G0_1_1_3_1_0_0_0_0 - 3.25079365079369*G0_1_1_3_1_0_0_0_1 + 3.25079365079369*G0_1_1_3_1_0_1_0_0 + 3.25079365079369*G0_1_1_3_1_0_2_0_1 - 3.25079365079369*G0_1_1_3_1_0_3_1_0 - 3.25079365079369*G0_1_1_3_1_0_3_1_1 + 3.25079365079369*G0_1_1_3_1_0_4_1_0 + 3.25079365079369*G0_1_1_3_1_0_5_1_1 - 3.25079365079369*G0_1_1_3_1_1_0_0_0 - 3.25079365079369*G0_1_1_3_1_1_0_0_1 + 3.25079365079369*G0_1_1_3_1_1_1_0_0 + 3.25079365079369*G0_1_1_3_1_1_2_0_1 - 3.25079365079369*G0_1_1_3_1_1_3_1_0 - 3.25079365079369*G0_1_1_3_1_1_3_1_1 + 3.25079365079369*G0_1_1_3_1_1_4_1_0 + 3.25079365079369*G0_1_1_3_1_1_5_1_1 + 3.25079365079369*G0_1_1_4_1_0_0_0_0 + 3.25079365079369*G0_1_1_4_1_0_0_0_1 - 3.25079365079369*G0_1_1_4_1_0_1_0_0 - 3.25079365079369*G0_1_1_4_1_0_2_0_1 + 3.25079365079369*G0_1_1_4_1_0_3_1_0 + 3.25079365079369*G0_1_1_4_1_0_3_1_1 - 3.25079365079369*G0_1_1_4_1_0_4_1_0 - 3.25079365079369*G0_1_1_4_1_0_5_1_1 + 3.25079365079369*G0_1_1_5_1_1_0_0_0 + 3.25079365079369*G0_1_1_5_1_1_0_0_1 - 3.25079365079369*G0_1_1_5_1_1_1_0_0 - 3.25079365079369*G0_1_1_5_1_1_2_0_1 + 3.25079365079369*G0_1_1_5_1_1_3_1_0 + 3.25079365079369*G0_1_1_5_1_1_3_1_1 - 3.25079365079369*G0_1_1_5_1_1_4_1_0 - 3.25079365079369*G0_1_1_5_1_1_5_1_1;
    A[599] = A[134];
    A[688] = A[314] + 0.507936507936539*G0_0_0_0_0_0_0_0_0 + 0.507936507936539*G0_0_0_0_0_0_0_0_1 - 0.507936507936539*G0_0_0_0_0_0_1_0_0 - 0.507936507936539*G0_0_0_0_0_0_2_0_1 + 0.507936507936539*G0_0_0_0_0_0_3_1_0 + 0.507936507936539*G0_0_0_0_0_0_3_1_1 - 0.507936507936539*G0_0_0_0_0_0_4_1_0 - 0.507936507936539*G0_0_0_0_0_0_5_1_1 + 0.507936507936539*G0_0_0_0_0_1_0_0_0 + 0.507936507936539*G0_0_0_0_0_1_0_0_1 - 0.507936507936539*G0_0_0_0_0_1_1_0_0 - 0.507936507936539*G0_0_0_0_0_1_2_0_1 + 0.507936507936539*G0_0_0_0_0_1_3_1_0 + 0.507936507936539*G0_0_0_0_0_1_3_1_1 - 0.507936507936539*G0_0_0_0_0_1_4_1_0 - 0.507936507936539*G0_0_0_0_0_1_5_1_1 - 0.507936507936539*G0_0_0_1_0_0_0_0_0 - 0.507936507936539*G0_0_0_1_0_0_0_0_1 + 0.507936507936539*G0_0_0_1_0_0_1_0_0 + 0.507936507936539*G0_0_0_1_0_0_2_0_1 - 0.507936507936539*G0_0_0_1_0_0_3_1_0 - 0.507936507936539*G0_0_0_1_0_0_3_1_1 + 0.507936507936539*G0_0_0_1_0_0_4_1_0 + 0.507936507936539*G0_0_0_1_0_0_5_1_1 - 0.507936507936539*G0_0_0_2_0_1_0_0_0 - 0.507936507936539*G0_0_0_2_0_1_0_0_1 + 0.507936507936539*G0_0_0_2_0_1_1_0_0 + 0.507936507936539*G0_0_0_2_0_1_2_0_1 - 0.507936507936539*G0_0_0_2_0_1_3_1_0 - 0.507936507936539*G0_0_0_2_0_1_3_1_1 + 0.507936507936539*G0_0_0_2_0_1_4_1_0 + 0.507936507936539*G0_0_0_2_0_1_5_1_1 + 0.507936507936539*G0_0_0_3_1_0_0_0_0 + 0.507936507936539*G0_0_0_3_1_0_0_0_1 - 0.507936507936539*G0_0_0_3_1_0_1_0_0 - 0.507936507936539*G0_0_0_3_1_0_2_0_1 + 0.507936507936539*G0_0_0_3_1_0_3_1_0 + 0.507936507936539*G0_0_0_3_1_0_3_1_1 - 0.507936507936539*G0_0_0_3_1_0_4_1_0 - 0.507936507936539*G0_0_0_3_1_0_5_1_1 + 0.507936507936539*G0_0_0_3_1_1_0_0_0 + 0.507936507936539*G0_0_0_3_1_1_0_0_1 - 0.507936507936539*G0_0_0_3_1_1_1_0_0 - 0.507936507936539*G0_0_0_3_1_1_2_0_1 + 0.507936507936539*G0_0_0_3_1_1_3_1_0 + 0.507936507936539*G0_0_0_3_1_1_3_1_1 - 0.507936507936539*G0_0_0_3_1_1_4_1_0 - 0.507936507936539*G0_0_0_3_1_1_5_1_1 - 0.507936507936539*G0_0_0_4_1_0_0_0_0 - 0.507936507936539*G0_0_0_4_1_0_0_0_1 + 0.507936507936539*G0_0_0_4_1_0_1_0_0 + 0.507936507936539*G0_0_0_4_1_0_2_0_1 - 0.507936507936539*G0_0_0_4_1_0_3_1_0 - 0.507936507936539*G0_0_0_4_1_0_3_1_1 + 0.507936507936539*G0_0_0_4_1_0_4_1_0 + 0.507936507936539*G0_0_0_4_1_0_5_1_1 - 0.507936507936539*G0_0_0_5_1_1_0_0_0 - 0.507936507936539*G0_0_0_5_1_1_0_0_1 + 0.507936507936539*G0_0_0_5_1_1_1_0_0 + 0.507936507936539*G0_0_0_5_1_1_2_0_1 - 0.507936507936539*G0_0_0_5_1_1_3_1_0 - 0.507936507936539*G0_0_0_5_1_1_3_1_1 + 0.507936507936539*G0_0_0_5_1_1_4_1_0 + 0.507936507936539*G0_0_0_5_1_1_5_1_1 - 0.507936507936546*G0_1_1_0_0_0_0_0_0 - 0.507936507936546*G0_1_1_0_0_0_0_0_1 + 0.507936507936546*G0_1_1_0_0_0_1_0_0 + 0.507936507936546*G0_1_1_0_0_0_2_0_1 - 0.507936507936546*G0_1_1_0_0_0_3_1_0 - 0.507936507936546*G0_1_1_0_0_0_3_1_1 + 0.507936507936546*G0_1_1_0_0_0_4_1_0 + 0.507936507936546*G0_1_1_0_0_0_5_1_1 - 0.507936507936546*G0_1_1_0_0_1_0_0_0 - 0.507936507936546*G0_1_1_0_0_1_0_0_1 + 0.507936507936546*G0_1_1_0_0_1_1_0_0 + 0.507936507936546*G0_1_1_0_0_1_2_0_1 - 0.507936507936546*G0_1_1_0_0_1_3_1_0 - 0.507936507936546*G0_1_1_0_0_1_3_1_1 + 0.507936507936546*G0_1_1_0_0_1_4_1_0 + 0.507936507936546*G0_1_1_0_0_1_5_1_1 + 0.507936507936546*G0_1_1_1_0_0_0_0_0 + 0.507936507936546*G0_1_1_1_0_0_0_0_1 - 0.507936507936546*G0_1_1_1_0_0_1_0_0 - 0.507936507936546*G0_1_1_1_0_0_2_0_1 + 0.507936507936546*G0_1_1_1_0_0_3_1_0 + 0.507936507936546*G0_1_1_1_0_0_3_1_1 - 0.507936507936546*G0_1_1_1_0_0_4_1_0 - 0.507936507936546*G0_1_1_1_0_0_5_1_1 + 0.507936507936546*G0_1_1_2_0_1_0_0_0 + 0.507936507936546*G0_1_1_2_0_1_0_0_1 - 0.507936507936546*G0_1_1_2_0_1_1_0_0 - 0.507936507936546*G0_1_1_2_0_1_2_0_1 + 0.507936507936546*G0_1_1_2_0_1_3_1_0 + 0.507936507936546*G0_1_1_2_0_1_3_1_1 - 0.507936507936546*G0_1_1_2_0_1_4_1_0 - 0.507936507936546*G0_1_1_2_0_1_5_1_1 - 0.507936507936546*G0_1_1_3_1_0_0_0_0 - 0.507936507936546*G0_1_1_3_1_0_0_0_1 + 0.507936507936546*G0_1_1_3_1_0_1_0_0 + 0.507936507936546*G0_1_1_3_1_0_2_0_1 - 0.507936507936546*G0_1_1_3_1_0_3_1_0 - 0.507936507936546*G0_1_1_3_1_0_3_1_1 + 0.507936507936546*G0_1_1_3_1_0_4_1_0 + 0.507936507936546*G0_1_1_3_1_0_5_1_1 - 0.507936507936546*G0_1_1_3_1_1_0_0_0 - 0.507936507936546*G0_1_1_3_1_1_0_0_1 + 0.507936507936546*G0_1_1_3_1_1_1_0_0 + 0.507936507936546*G0_1_1_3_1_1_2_0_1 - 0.507936507936546*G0_1_1_3_1_1_3_1_0 - 0.507936507936546*G0_1_1_3_1_1_3_1_1 + 0.507936507936546*G0_1_1_3_1_1_4_1_0 + 0.507936507936546*G0_1_1_3_1_1_5_1_1 + 0.507936507936546*G0_1_1_4_1_0_0_0_0 + 0.507936507936546*G0_1_1_4_1_0_0_0_1 - 0.507936507936546*G0_1_1_4_1_0_1_0_0 - 0.507936507936546*G0_1_1_4_1_0_2_0_1 + 0.507936507936546*G0_1_1_4_1_0_3_1_0 + 0.507936507936546*G0_1_1_4_1_0_3_1_1 - 0.507936507936546*G0_1_1_4_1_0_4_1_0 - 0.507936507936546*G0_1_1_4_1_0_5_1_1 + 0.507936507936546*G0_1_1_5_1_1_0_0_0 + 0.507936507936546*G0_1_1_5_1_1_0_0_1 - 0.507936507936546*G0_1_1_5_1_1_1_0_0 - 0.507936507936546*G0_1_1_5_1_1_2_0_1 + 0.507936507936546*G0_1_1_5_1_1_3_1_0 + 0.507936507936546*G0_1_1_5_1_1_3_1_1 - 0.507936507936546*G0_1_1_5_1_1_4_1_0 - 0.507936507936546*G0_1_1_5_1_1_5_1_1;
    A[832] = A[367];
    A[476] = -A[5] - 0.203174603174605*G0_0_0_0_0_0_0_0_0 - 0.203174603174605*G0_0_0_0_0_0_0_0_1 + 0.203174603174605*G0_0_0_0_0_0_1_0_0 + 0.203174603174605*G0_0_0_0_0_0_2_0_1 - 0.203174603174605*G0_0_0_0_0_0_3_1_0 - 0.203174603174605*G0_0_0_0_0_0_3_1_1 + 0.203174603174605*G0_0_0_0_0_0_4_1_0 + 0.203174603174605*G0_0_0_0_0_0_5_1_1 - 0.203174603174605*G0_0_0_0_0_1_0_0_0 - 0.203174603174605*G0_0_0_0_0_1_0_0_1 + 0.203174603174605*G0_0_0_0_0_1_1_0_0 + 0.203174603174605*G0_0_0_0_0_1_2_0_1 - 0.203174603174605*G0_0_0_0_0_1_3_1_0 - 0.203174603174605*G0_0_0_0_0_1_3_1_1 + 0.203174603174605*G0_0_0_0_0_1_4_1_0 + 0.203174603174605*G0_0_0_0_0_1_5_1_1 + 0.203174603174605*G0_0_0_1_0_0_0_0_0 + 0.203174603174605*G0_0_0_1_0_0_0_0_1 - 0.203174603174605*G0_0_0_1_0_0_1_0_0 - 0.203174603174605*G0_0_0_1_0_0_2_0_1 + 0.203174603174605*G0_0_0_1_0_0_3_1_0 + 0.203174603174605*G0_0_0_1_0_0_3_1_1 - 0.203174603174605*G0_0_0_1_0_0_4_1_0 - 0.203174603174605*G0_0_0_1_0_0_5_1_1 + 0.203174603174605*G0_0_0_2_0_1_0_0_0 + 0.203174603174605*G0_0_0_2_0_1_0_0_1 - 0.203174603174605*G0_0_0_2_0_1_1_0_0 - 0.203174603174605*G0_0_0_2_0_1_2_0_1 + 0.203174603174605*G0_0_0_2_0_1_3_1_0 + 0.203174603174605*G0_0_0_2_0_1_3_1_1 - 0.203174603174605*G0_0_0_2_0_1_4_1_0 - 0.203174603174605*G0_0_0_2_0_1_5_1_1 - 0.203174603174605*G0_0_0_3_1_0_0_0_0 - 0.203174603174605*G0_0_0_3_1_0_0_0_1 + 0.203174603174605*G0_0_0_3_1_0_1_0_0 + 0.203174603174605*G0_0_0_3_1_0_2_0_1 - 0.203174603174605*G0_0_0_3_1_0_3_1_0 - 0.203174603174605*G0_0_0_3_1_0_3_1_1 + 0.203174603174605*G0_0_0_3_1_0_4_1_0 + 0.203174603174605*G0_0_0_3_1_0_5_1_1 - 0.203174603174605*G0_0_0_3_1_1_0_0_0 - 0.203174603174605*G0_0_0_3_1_1_0_0_1 + 0.203174603174605*G0_0_0_3_1_1_1_0_0 + 0.203174603174605*G0_0_0_3_1_1_2_0_1 - 0.203174603174605*G0_0_0_3_1_1_3_1_0 - 0.203174603174605*G0_0_0_3_1_1_3_1_1 + 0.203174603174605*G0_0_0_3_1_1_4_1_0 + 0.203174603174605*G0_0_0_3_1_1_5_1_1 + 0.203174603174605*G0_0_0_4_1_0_0_0_0 + 0.203174603174605*G0_0_0_4_1_0_0_0_1 - 0.203174603174605*G0_0_0_4_1_0_1_0_0 - 0.203174603174605*G0_0_0_4_1_0_2_0_1 + 0.203174603174605*G0_0_0_4_1_0_3_1_0 + 0.203174603174605*G0_0_0_4_1_0_3_1_1 - 0.203174603174605*G0_0_0_4_1_0_4_1_0 - 0.203174603174605*G0_0_0_4_1_0_5_1_1 + 0.203174603174605*G0_0_0_5_1_1_0_0_0 + 0.203174603174605*G0_0_0_5_1_1_0_0_1 - 0.203174603174605*G0_0_0_5_1_1_1_0_0 - 0.203174603174605*G0_0_0_5_1_1_2_0_1 + 0.203174603174605*G0_0_0_5_1_1_3_1_0 + 0.203174603174605*G0_0_0_5_1_1_3_1_1 - 0.203174603174605*G0_0_0_5_1_1_4_1_0 - 0.203174603174605*G0_0_0_5_1_1_5_1_1 - 0.203174603174604*G0_1_0_0_0_0_0_0_0 - 0.203174603174604*G0_1_0_0_0_0_0_0_1 + 0.203174603174604*G0_1_0_0_0_0_1_0_0 + 0.203174603174604*G0_1_0_0_0_0_2_0_1 - 0.203174603174604*G0_1_0_0_0_0_3_1_0 - 0.203174603174604*G0_1_0_0_0_0_3_1_1 + 0.203174603174604*G0_1_0_0_0_0_4_1_0 + 0.203174603174604*G0_1_0_0_0_0_5_1_1 - 0.203174603174604*G0_1_0_0_0_1_0_0_0 - 0.203174603174604*G0_1_0_0_0_1_0_0_1 + 0.203174603174604*G0_1_0_0_0_1_1_0_0 + 0.203174603174604*G0_1_0_0_0_1_2_0_1 - 0.203174603174604*G0_1_0_0_0_1_3_1_0 - 0.203174603174604*G0_1_0_0_0_1_3_1_1 + 0.203174603174604*G0_1_0_0_0_1_4_1_0 + 0.203174603174604*G0_1_0_0_0_1_5_1_1 + 0.203174603174604*G0_1_0_1_0_0_0_0_0 + 0.203174603174604*G0_1_0_1_0_0_0_0_1 - 0.203174603174604*G0_1_0_1_0_0_1_0_0 - 0.203174603174604*G0_1_0_1_0_0_2_0_1 + 0.203174603174604*G0_1_0_1_0_0_3_1_0 + 0.203174603174604*G0_1_0_1_0_0_3_1_1 - 0.203174603174604*G0_1_0_1_0_0_4_1_0 - 0.203174603174604*G0_1_0_1_0_0_5_1_1 + 0.203174603174604*G0_1_0_2_0_1_0_0_0 + 0.203174603174604*G0_1_0_2_0_1_0_0_1 - 0.203174603174604*G0_1_0_2_0_1_1_0_0 - 0.203174603174604*G0_1_0_2_0_1_2_0_1 + 0.203174603174604*G0_1_0_2_0_1_3_1_0 + 0.203174603174604*G0_1_0_2_0_1_3_1_1 - 0.203174603174604*G0_1_0_2_0_1_4_1_0 - 0.203174603174604*G0_1_0_2_0_1_5_1_1 - 0.203174603174604*G0_1_0_3_1_0_0_0_0 - 0.203174603174604*G0_1_0_3_1_0_0_0_1 + 0.203174603174604*G0_1_0_3_1_0_1_0_0 + 0.203174603174604*G0_1_0_3_1_0_2_0_1 - 0.203174603174604*G0_1_0_3_1_0_3_1_0 - 0.203174603174604*G0_1_0_3_1_0_3_1_1 + 0.203174603174604*G0_1_0_3_1_0_4_1_0 + 0.203174603174604*G0_1_0_3_1_0_5_1_1 - 0.203174603174604*G0_1_0_3_1_1_0_0_0 - 0.203174603174604*G0_1_0_3_1_1_0_0_1 + 0.203174603174604*G0_1_0_3_1_1_1_0_0 + 0.203174603174604*G0_1_0_3_1_1_2_0_1 - 0.203174603174604*G0_1_0_3_1_1_3_1_0 - 0.203174603174604*G0_1_0_3_1_1_3_1_1 + 0.203174603174604*G0_1_0_3_1_1_4_1_0 + 0.203174603174604*G0_1_0_3_1_1_5_1_1 + 0.203174603174604*G0_1_0_4_1_0_0_0_0 + 0.203174603174604*G0_1_0_4_1_0_0_0_1 - 0.203174603174604*G0_1_0_4_1_0_1_0_0 - 0.203174603174604*G0_1_0_4_1_0_2_0_1 + 0.203174603174604*G0_1_0_4_1_0_3_1_0 + 0.203174603174604*G0_1_0_4_1_0_3_1_1 - 0.203174603174604*G0_1_0_4_1_0_4_1_0 - 0.203174603174604*G0_1_0_4_1_0_5_1_1 + 0.203174603174604*G0_1_0_5_1_1_0_0_0 + 0.203174603174604*G0_1_0_5_1_1_0_0_1 - 0.203174603174604*G0_1_0_5_1_1_1_0_0 - 0.203174603174604*G0_1_0_5_1_1_2_0_1 + 0.203174603174604*G0_1_0_5_1_1_3_1_0 + 0.203174603174604*G0_1_0_5_1_1_3_1_1 - 0.203174603174604*G0_1_0_5_1_1_4_1_0 - 0.203174603174604*G0_1_0_5_1_1_5_1_1;
    A[340] = A[805];
    A[21] = 0.0;
    A[738] = A[273];
    A[425] = A[890];
    A[373] = A[897] - 3.2507936507937*G0_0_0_0_0_0_0_0_0 - 3.2507936507937*G0_0_0_0_0_0_0_0_1 + 3.2507936507937*G0_0_0_0_0_0_1_0_0 + 3.2507936507937*G0_0_0_0_0_0_2_0_1 - 3.2507936507937*G0_0_0_0_0_0_3_1_0 - 3.2507936507937*G0_0_0_0_0_0_3_1_1 + 3.2507936507937*G0_0_0_0_0_0_4_1_0 + 3.2507936507937*G0_0_0_0_0_0_5_1_1 - 3.2507936507937*G0_0_0_0_0_1_0_0_0 - 3.2507936507937*G0_0_0_0_0_1_0_0_1 + 3.2507936507937*G0_0_0_0_0_1_1_0_0 + 3.2507936507937*G0_0_0_0_0_1_2_0_1 - 3.2507936507937*G0_0_0_0_0_1_3_1_0 - 3.2507936507937*G0_0_0_0_0_1_3_1_1 + 3.2507936507937*G0_0_0_0_0_1_4_1_0 + 3.2507936507937*G0_0_0_0_0_1_5_1_1 + 3.2507936507937*G0_0_0_1_0_0_0_0_0 + 3.2507936507937*G0_0_0_1_0_0_0_0_1 - 3.2507936507937*G0_0_0_1_0_0_1_0_0 - 3.2507936507937*G0_0_0_1_0_0_2_0_1 + 3.2507936507937*G0_0_0_1_0_0_3_1_0 + 3.2507936507937*G0_0_0_1_0_0_3_1_1 - 3.2507936507937*G0_0_0_1_0_0_4_1_0 - 3.2507936507937*G0_0_0_1_0_0_5_1_1 + 3.2507936507937*G0_0_0_2_0_1_0_0_0 + 3.2507936507937*G0_0_0_2_0_1_0_0_1 - 3.2507936507937*G0_0_0_2_0_1_1_0_0 - 3.2507936507937*G0_0_0_2_0_1_2_0_1 + 3.2507936507937*G0_0_0_2_0_1_3_1_0 + 3.2507936507937*G0_0_0_2_0_1_3_1_1 - 3.2507936507937*G0_0_0_2_0_1_4_1_0 - 3.2507936507937*G0_0_0_2_0_1_5_1_1 - 3.2507936507937*G0_0_0_3_1_0_0_0_0 - 3.2507936507937*G0_0_0_3_1_0_0_0_1 + 3.2507936507937*G0_0_0_3_1_0_1_0_0 + 3.2507936507937*G0_0_0_3_1_0_2_0_1 - 3.2507936507937*G0_0_0_3_1_0_3_1_0 - 3.2507936507937*G0_0_0_3_1_0_3_1_1 + 3.2507936507937*G0_0_0_3_1_0_4_1_0 + 3.2507936507937*G0_0_0_3_1_0_5_1_1 - 3.2507936507937*G0_0_0_3_1_1_0_0_0 - 3.2507936507937*G0_0_0_3_1_1_0_0_1 + 3.2507936507937*G0_0_0_3_1_1_1_0_0 + 3.2507936507937*G0_0_0_3_1_1_2_0_1 - 3.2507936507937*G0_0_0_3_1_1_3_1_0 - 3.2507936507937*G0_0_0_3_1_1_3_1_1 + 3.2507936507937*G0_0_0_3_1_1_4_1_0 + 3.2507936507937*G0_0_0_3_1_1_5_1_1 + 3.2507936507937*G0_0_0_4_1_0_0_0_0 + 3.2507936507937*G0_0_0_4_1_0_0_0_1 - 3.2507936507937*G0_0_0_4_1_0_1_0_0 - 3.2507936507937*G0_0_0_4_1_0_2_0_1 + 3.2507936507937*G0_0_0_4_1_0_3_1_0 + 3.2507936507937*G0_0_0_4_1_0_3_1_1 - 3.2507936507937*G0_0_0_4_1_0_4_1_0 - 3.2507936507937*G0_0_0_4_1_0_5_1_1 + 3.2507936507937*G0_0_0_5_1_1_0_0_0 + 3.2507936507937*G0_0_0_5_1_1_0_0_1 - 3.2507936507937*G0_0_0_5_1_1_1_0_0 - 3.2507936507937*G0_0_0_5_1_1_2_0_1 + 3.2507936507937*G0_0_0_5_1_1_3_1_0 + 3.2507936507937*G0_0_0_5_1_1_3_1_1 - 3.2507936507937*G0_0_0_5_1_1_4_1_0 - 3.2507936507937*G0_0_0_5_1_1_5_1_1 + 3.2507936507937*G0_1_1_0_0_0_0_0_0 + 3.2507936507937*G0_1_1_0_0_0_0_0_1 - 3.2507936507937*G0_1_1_0_0_0_1_0_0 - 3.2507936507937*G0_1_1_0_0_0_2_0_1 + 3.2507936507937*G0_1_1_0_0_0_3_1_0 + 3.2507936507937*G0_1_1_0_0_0_3_1_1 - 3.2507936507937*G0_1_1_0_0_0_4_1_0 - 3.2507936507937*G0_1_1_0_0_0_5_1_1 + 3.2507936507937*G0_1_1_0_0_1_0_0_0 + 3.2507936507937*G0_1_1_0_0_1_0_0_1 - 3.2507936507937*G0_1_1_0_0_1_1_0_0 - 3.2507936507937*G0_1_1_0_0_1_2_0_1 + 3.2507936507937*G0_1_1_0_0_1_3_1_0 + 3.2507936507937*G0_1_1_0_0_1_3_1_1 - 3.2507936507937*G0_1_1_0_0_1_4_1_0 - 3.2507936507937*G0_1_1_0_0_1_5_1_1 - 3.2507936507937*G0_1_1_1_0_0_0_0_0 - 3.2507936507937*G0_1_1_1_0_0_0_0_1 + 3.2507936507937*G0_1_1_1_0_0_1_0_0 + 3.2507936507937*G0_1_1_1_0_0_2_0_1 - 3.2507936507937*G0_1_1_1_0_0_3_1_0 - 3.2507936507937*G0_1_1_1_0_0_3_1_1 + 3.2507936507937*G0_1_1_1_0_0_4_1_0 + 3.2507936507937*G0_1_1_1_0_0_5_1_1 - 3.2507936507937*G0_1_1_2_0_1_0_0_0 - 3.2507936507937*G0_1_1_2_0_1_0_0_1 + 3.2507936507937*G0_1_1_2_0_1_1_0_0 + 3.2507936507937*G0_1_1_2_0_1_2_0_1 - 3.2507936507937*G0_1_1_2_0_1_3_1_0 - 3.2507936507937*G0_1_1_2_0_1_3_1_1 + 3.2507936507937*G0_1_1_2_0_1_4_1_0 + 3.2507936507937*G0_1_1_2_0_1_5_1_1 + 3.2507936507937*G0_1_1_3_1_0_0_0_0 + 3.2507936507937*G0_1_1_3_1_0_0_0_1 - 3.2507936507937*G0_1_1_3_1_0_1_0_0 - 3.2507936507937*G0_1_1_3_1_0_2_0_1 + 3.2507936507937*G0_1_1_3_1_0_3_1_0 + 3.2507936507937*G0_1_1_3_1_0_3_1_1 - 3.2507936507937*G0_1_1_3_1_0_4_1_0 - 3.2507936507937*G0_1_1_3_1_0_5_1_1 + 3.2507936507937*G0_1_1_3_1_1_0_0_0 + 3.2507936507937*G0_1_1_3_1_1_0_0_1 - 3.2507936507937*G0_1_1_3_1_1_1_0_0 - 3.2507936507937*G0_1_1_3_1_1_2_0_1 + 3.2507936507937*G0_1_1_3_1_1_3_1_0 + 3.2507936507937*G0_1_1_3_1_1_3_1_1 - 3.2507936507937*G0_1_1_3_1_1_4_1_0 - 3.2507936507937*G0_1_1_3_1_1_5_1_1 - 3.2507936507937*G0_1_1_4_1_0_0_0_0 - 3.2507936507937*G0_1_1_4_1_0_0_0_1 + 3.2507936507937*G0_1_1_4_1_0_1_0_0 + 3.2507936507937*G0_1_1_4_1_0_2_0_1 - 3.2507936507937*G0_1_1_4_1_0_3_1_0 - 3.2507936507937*G0_1_1_4_1_0_3_1_1 + 3.2507936507937*G0_1_1_4_1_0_4_1_0 + 3.2507936507937*G0_1_1_4_1_0_5_1_1 - 3.2507936507937*G0_1_1_5_1_1_0_0_0 - 3.2507936507937*G0_1_1_5_1_1_0_0_1 + 3.2507936507937*G0_1_1_5_1_1_1_0_0 + 3.2507936507937*G0_1_1_5_1_1_2_0_1 - 3.2507936507937*G0_1_1_5_1_1_3_1_0 - 3.2507936507937*G0_1_1_5_1_1_3_1_1 + 3.2507936507937*G0_1_1_5_1_1_4_1_0 + 3.2507936507937*G0_1_1_5_1_1_5_1_1;
    A[46] = 0.0;
    A[769] = A[679] - 0.342857142857162*G0_0_0_0_0_0_0_0_0 - 0.342857142857162*G0_0_0_0_0_0_0_0_1 + 0.342857142857162*G0_0_0_0_0_0_1_0_0 + 0.342857142857162*G0_0_0_0_0_0_2_0_1 - 0.342857142857162*G0_0_0_0_0_0_3_1_0 - 0.342857142857162*G0_0_0_0_0_0_3_1_1 + 0.342857142857162*G0_0_0_0_0_0_4_1_0 + 0.342857142857162*G0_0_0_0_0_0_5_1_1 - 0.342857142857162*G0_0_0_0_0_1_0_0_0 - 0.342857142857162*G0_0_0_0_0_1_0_0_1 + 0.342857142857162*G0_0_0_0_0_1_1_0_0 + 0.342857142857162*G0_0_0_0_0_1_2_0_1 - 0.342857142857162*G0_0_0_0_0_1_3_1_0 - 0.342857142857162*G0_0_0_0_0_1_3_1_1 + 0.342857142857162*G0_0_0_0_0_1_4_1_0 + 0.342857142857162*G0_0_0_0_0_1_5_1_1 + 0.342857142857162*G0_0_0_1_0_0_0_0_0 + 0.342857142857162*G0_0_0_1_0_0_0_0_1 - 0.342857142857162*G0_0_0_1_0_0_1_0_0 - 0.342857142857162*G0_0_0_1_0_0_2_0_1 + 0.342857142857162*G0_0_0_1_0_0_3_1_0 + 0.342857142857162*G0_0_0_1_0_0_3_1_1 - 0.342857142857162*G0_0_0_1_0_0_4_1_0 - 0.342857142857162*G0_0_0_1_0_0_5_1_1 + 0.342857142857162*G0_0_0_2_0_1_0_0_0 + 0.342857142857162*G0_0_0_2_0_1_0_0_1 - 0.342857142857162*G0_0_0_2_0_1_1_0_0 - 0.342857142857162*G0_0_0_2_0_1_2_0_1 + 0.342857142857162*G0_0_0_2_0_1_3_1_0 + 0.342857142857162*G0_0_0_2_0_1_3_1_1 - 0.342857142857162*G0_0_0_2_0_1_4_1_0 - 0.342857142857162*G0_0_0_2_0_1_5_1_1 - 0.342857142857162*G0_0_0_3_1_0_0_0_0 - 0.342857142857162*G0_0_0_3_1_0_0_0_1 + 0.342857142857162*G0_0_0_3_1_0_1_0_0 + 0.342857142857162*G0_0_0_3_1_0_2_0_1 - 0.342857142857162*G0_0_0_3_1_0_3_1_0 - 0.342857142857162*G0_0_0_3_1_0_3_1_1 + 0.342857142857162*G0_0_0_3_1_0_4_1_0 + 0.342857142857162*G0_0_0_3_1_0_5_1_1 - 0.342857142857162*G0_0_0_3_1_1_0_0_0 - 0.342857142857162*G0_0_0_3_1_1_0_0_1 + 0.342857142857162*G0_0_0_3_1_1_1_0_0 + 0.342857142857162*G0_0_0_3_1_1_2_0_1 - 0.342857142857162*G0_0_0_3_1_1_3_1_0 - 0.342857142857162*G0_0_0_3_1_1_3_1_1 + 0.342857142857162*G0_0_0_3_1_1_4_1_0 + 0.342857142857162*G0_0_0_3_1_1_5_1_1 + 0.342857142857162*G0_0_0_4_1_0_0_0_0 + 0.342857142857162*G0_0_0_4_1_0_0_0_1 - 0.342857142857162*G0_0_0_4_1_0_1_0_0 - 0.342857142857162*G0_0_0_4_1_0_2_0_1 + 0.342857142857162*G0_0_0_4_1_0_3_1_0 + 0.342857142857162*G0_0_0_4_1_0_3_1_1 - 0.342857142857162*G0_0_0_4_1_0_4_1_0 - 0.342857142857162*G0_0_0_4_1_0_5_1_1 + 0.342857142857162*G0_0_0_5_1_1_0_0_0 + 0.342857142857162*G0_0_0_5_1_1_0_0_1 - 0.342857142857162*G0_0_0_5_1_1_1_0_0 - 0.342857142857162*G0_0_0_5_1_1_2_0_1 + 0.342857142857162*G0_0_0_5_1_1_3_1_0 + 0.342857142857162*G0_0_0_5_1_1_3_1_1 - 0.342857142857162*G0_0_0_5_1_1_4_1_0 - 0.342857142857162*G0_0_0_5_1_1_5_1_1 + 0.342857142857158*G0_1_1_0_0_0_0_0_0 + 0.342857142857158*G0_1_1_0_0_0_0_0_1 - 0.342857142857158*G0_1_1_0_0_0_1_0_0 - 0.342857142857158*G0_1_1_0_0_0_2_0_1 + 0.342857142857158*G0_1_1_0_0_0_3_1_0 + 0.342857142857158*G0_1_1_0_0_0_3_1_1 - 0.342857142857158*G0_1_1_0_0_0_4_1_0 - 0.342857142857158*G0_1_1_0_0_0_5_1_1 + 0.342857142857158*G0_1_1_0_0_1_0_0_0 + 0.342857142857158*G0_1_1_0_0_1_0_0_1 - 0.342857142857158*G0_1_1_0_0_1_1_0_0 - 0.342857142857158*G0_1_1_0_0_1_2_0_1 + 0.342857142857158*G0_1_1_0_0_1_3_1_0 + 0.342857142857158*G0_1_1_0_0_1_3_1_1 - 0.342857142857158*G0_1_1_0_0_1_4_1_0 - 0.342857142857158*G0_1_1_0_0_1_5_1_1 - 0.342857142857158*G0_1_1_1_0_0_0_0_0 - 0.342857142857158*G0_1_1_1_0_0_0_0_1 + 0.342857142857158*G0_1_1_1_0_0_1_0_0 + 0.342857142857158*G0_1_1_1_0_0_2_0_1 - 0.342857142857158*G0_1_1_1_0_0_3_1_0 - 0.342857142857158*G0_1_1_1_0_0_3_1_1 + 0.342857142857158*G0_1_1_1_0_0_4_1_0 + 0.342857142857158*G0_1_1_1_0_0_5_1_1 - 0.342857142857158*G0_1_1_2_0_1_0_0_0 - 0.342857142857158*G0_1_1_2_0_1_0_0_1 + 0.342857142857158*G0_1_1_2_0_1_1_0_0 + 0.342857142857158*G0_1_1_2_0_1_2_0_1 - 0.342857142857158*G0_1_1_2_0_1_3_1_0 - 0.342857142857158*G0_1_1_2_0_1_3_1_1 + 0.342857142857158*G0_1_1_2_0_1_4_1_0 + 0.342857142857158*G0_1_1_2_0_1_5_1_1 + 0.342857142857158*G0_1_1_3_1_0_0_0_0 + 0.342857142857158*G0_1_1_3_1_0_0_0_1 - 0.342857142857158*G0_1_1_3_1_0_1_0_0 - 0.342857142857158*G0_1_1_3_1_0_2_0_1 + 0.342857142857158*G0_1_1_3_1_0_3_1_0 + 0.342857142857158*G0_1_1_3_1_0_3_1_1 - 0.342857142857158*G0_1_1_3_1_0_4_1_0 - 0.342857142857158*G0_1_1_3_1_0_5_1_1 + 0.342857142857158*G0_1_1_3_1_1_0_0_0 + 0.342857142857158*G0_1_1_3_1_1_0_0_1 - 0.342857142857158*G0_1_1_3_1_1_1_0_0 - 0.342857142857158*G0_1_1_3_1_1_2_0_1 + 0.342857142857158*G0_1_1_3_1_1_3_1_0 + 0.342857142857158*G0_1_1_3_1_1_3_1_1 - 0.342857142857158*G0_1_1_3_1_1_4_1_0 - 0.342857142857158*G0_1_1_3_1_1_5_1_1 - 0.342857142857158*G0_1_1_4_1_0_0_0_0 - 0.342857142857158*G0_1_1_4_1_0_0_0_1 + 0.342857142857158*G0_1_1_4_1_0_1_0_0 + 0.342857142857158*G0_1_1_4_1_0_2_0_1 - 0.342857142857158*G0_1_1_4_1_0_3_1_0 - 0.342857142857158*G0_1_1_4_1_0_3_1_1 + 0.342857142857158*G0_1_1_4_1_0_4_1_0 + 0.342857142857158*G0_1_1_4_1_0_5_1_1 - 0.342857142857158*G0_1_1_5_1_1_0_0_0 - 0.342857142857158*G0_1_1_5_1_1_0_0_1 + 0.342857142857158*G0_1_1_5_1_1_1_0_0 + 0.342857142857158*G0_1_1_5_1_1_2_0_1 - 0.342857142857158*G0_1_1_5_1_1_3_1_0 - 0.342857142857158*G0_1_1_5_1_1_3_1_1 + 0.342857142857158*G0_1_1_5_1_1_4_1_0 + 0.342857142857158*G0_1_1_5_1_1_5_1_1;
    A[450] = 0.0;
    A[406] = 0.0;
    A[83] = 0.0;
    A[788] = 0.0;
    A[11] = A[476];
    A[96] = -A[716] - 0.203174603174611*G0_0_0_0_0_0_0_0_0 - 0.203174603174611*G0_0_0_0_0_0_0_0_1 + 0.203174603174611*G0_0_0_0_0_0_1_0_0 + 0.203174603174611*G0_0_0_0_0_0_2_0_1 - 0.203174603174611*G0_0_0_0_0_0_3_1_0 - 0.203174603174611*G0_0_0_0_0_0_3_1_1 + 0.203174603174611*G0_0_0_0_0_0_4_1_0 + 0.203174603174611*G0_0_0_0_0_0_5_1_1 - 0.203174603174611*G0_0_0_0_0_1_0_0_0 - 0.203174603174611*G0_0_0_0_0_1_0_0_1 + 0.203174603174611*G0_0_0_0_0_1_1_0_0 + 0.203174603174611*G0_0_0_0_0_1_2_0_1 - 0.203174603174611*G0_0_0_0_0_1_3_1_0 - 0.203174603174611*G0_0_0_0_0_1_3_1_1 + 0.203174603174611*G0_0_0_0_0_1_4_1_0 + 0.203174603174611*G0_0_0_0_0_1_5_1_1 + 0.203174603174611*G0_0_0_1_0_0_0_0_0 + 0.203174603174611*G0_0_0_1_0_0_0_0_1 - 0.203174603174611*G0_0_0_1_0_0_1_0_0 - 0.203174603174611*G0_0_0_1_0_0_2_0_1 + 0.203174603174611*G0_0_0_1_0_0_3_1_0 + 0.203174603174611*G0_0_0_1_0_0_3_1_1 - 0.203174603174611*G0_0_0_1_0_0_4_1_0 - 0.203174603174611*G0_0_0_1_0_0_5_1_1 + 0.203174603174611*G0_0_0_2_0_1_0_0_0 + 0.203174603174611*G0_0_0_2_0_1_0_0_1 - 0.203174603174611*G0_0_0_2_0_1_1_0_0 - 0.203174603174611*G0_0_0_2_0_1_2_0_1 + 0.203174603174611*G0_0_0_2_0_1_3_1_0 + 0.203174603174611*G0_0_0_2_0_1_3_1_1 - 0.203174603174611*G0_0_0_2_0_1_4_1_0 - 0.203174603174611*G0_0_0_2_0_1_5_1_1 - 0.203174603174611*G0_0_0_3_1_0_0_0_0 - 0.203174603174611*G0_0_0_3_1_0_0_0_1 + 0.203174603174611*G0_0_0_3_1_0_1_0_0 + 0.203174603174611*G0_0_0_3_1_0_2_0_1 - 0.203174603174611*G0_0_0_3_1_0_3_1_0 - 0.203174603174611*G0_0_0_3_1_0_3_1_1 + 0.203174603174611*G0_0_0_3_1_0_4_1_0 + 0.203174603174611*G0_0_0_3_1_0_5_1_1 - 0.203174603174611*G0_0_0_3_1_1_0_0_0 - 0.203174603174611*G0_0_0_3_1_1_0_0_1 + 0.203174603174611*G0_0_0_3_1_1_1_0_0 + 0.203174603174611*G0_0_0_3_1_1_2_0_1 - 0.203174603174611*G0_0_0_3_1_1_3_1_0 - 0.203174603174611*G0_0_0_3_1_1_3_1_1 + 0.203174603174611*G0_0_0_3_1_1_4_1_0 + 0.203174603174611*G0_0_0_3_1_1_5_1_1 + 0.203174603174611*G0_0_0_4_1_0_0_0_0 + 0.203174603174611*G0_0_0_4_1_0_0_0_1 - 0.203174603174611*G0_0_0_4_1_0_1_0_0 - 0.203174603174611*G0_0_0_4_1_0_2_0_1 + 0.203174603174611*G0_0_0_4_1_0_3_1_0 + 0.203174603174611*G0_0_0_4_1_0_3_1_1 - 0.203174603174611*G0_0_0_4_1_0_4_1_0 - 0.203174603174611*G0_0_0_4_1_0_5_1_1 + 0.203174603174611*G0_0_0_5_1_1_0_0_0 + 0.203174603174611*G0_0_0_5_1_1_0_0_1 - 0.203174603174611*G0_0_0_5_1_1_1_0_0 - 0.203174603174611*G0_0_0_5_1_1_2_0_1 + 0.203174603174611*G0_0_0_5_1_1_3_1_0 + 0.203174603174611*G0_0_0_5_1_1_3_1_1 - 0.203174603174611*G0_0_0_5_1_1_4_1_0 - 0.203174603174611*G0_0_0_5_1_1_5_1_1;
    A[815] = 0.0;
    A[121] = A[181] - 0.425396825396831*G0_1_0_0_0_0_0_0_0 - 0.425396825396831*G0_1_0_0_0_0_0_0_1 + 0.425396825396831*G0_1_0_0_0_0_1_0_0 + 0.425396825396831*G0_1_0_0_0_0_2_0_1 - 0.425396825396831*G0_1_0_0_0_0_3_1_0 - 0.425396825396831*G0_1_0_0_0_0_3_1_1 + 0.425396825396831*G0_1_0_0_0_0_4_1_0 + 0.425396825396831*G0_1_0_0_0_0_5_1_1 - 0.425396825396831*G0_1_0_0_0_1_0_0_0 - 0.425396825396831*G0_1_0_0_0_1_0_0_1 + 0.425396825396831*G0_1_0_0_0_1_1_0_0 + 0.425396825396831*G0_1_0_0_0_1_2_0_1 - 0.425396825396831*G0_1_0_0_0_1_3_1_0 - 0.425396825396831*G0_1_0_0_0_1_3_1_1 + 0.425396825396831*G0_1_0_0_0_1_4_1_0 + 0.425396825396831*G0_1_0_0_0_1_5_1_1 + 0.425396825396831*G0_1_0_1_0_0_0_0_0 + 0.425396825396831*G0_1_0_1_0_0_0_0_1 - 0.425396825396831*G0_1_0_1_0_0_1_0_0 - 0.425396825396831*G0_1_0_1_0_0_2_0_1 + 0.425396825396831*G0_1_0_1_0_0_3_1_0 + 0.425396825396831*G0_1_0_1_0_0_3_1_1 - 0.425396825396831*G0_1_0_1_0_0_4_1_0 - 0.425396825396831*G0_1_0_1_0_0_5_1_1 + 0.425396825396831*G0_1_0_2_0_1_0_0_0 + 0.425396825396831*G0_1_0_2_0_1_0_0_1 - 0.425396825396831*G0_1_0_2_0_1_1_0_0 - 0.425396825396831*G0_1_0_2_0_1_2_0_1 + 0.425396825396831*G0_1_0_2_0_1_3_1_0 + 0.425396825396831*G0_1_0_2_0_1_3_1_1 - 0.425396825396831*G0_1_0_2_0_1_4_1_0 - 0.425396825396831*G0_1_0_2_0_1_5_1_1 - 0.425396825396831*G0_1_0_3_1_0_0_0_0 - 0.425396825396831*G0_1_0_3_1_0_0_0_1 + 0.425396825396831*G0_1_0_3_1_0_1_0_0 + 0.425396825396831*G0_1_0_3_1_0_2_0_1 - 0.425396825396831*G0_1_0_3_1_0_3_1_0 - 0.425396825396831*G0_1_0_3_1_0_3_1_1 + 0.425396825396831*G0_1_0_3_1_0_4_1_0 + 0.425396825396831*G0_1_0_3_1_0_5_1_1 - 0.425396825396831*G0_1_0_3_1_1_0_0_0 - 0.425396825396831*G0_1_0_3_1_1_0_0_1 + 0.425396825396831*G0_1_0_3_1_1_1_0_0 + 0.425396825396831*G0_1_0_3_1_1_2_0_1 - 0.425396825396831*G0_1_0_3_1_1_3_1_0 - 0.425396825396831*G0_1_0_3_1_1_3_1_1 + 0.425396825396831*G0_1_0_3_1_1_4_1_0 + 0.425396825396831*G0_1_0_3_1_1_5_1_1 + 0.425396825396831*G0_1_0_4_1_0_0_0_0 + 0.425396825396831*G0_1_0_4_1_0_0_0_1 - 0.425396825396831*G0_1_0_4_1_0_1_0_0 - 0.425396825396831*G0_1_0_4_1_0_2_0_1 + 0.425396825396831*G0_1_0_4_1_0_3_1_0 + 0.425396825396831*G0_1_0_4_1_0_3_1_1 - 0.425396825396831*G0_1_0_4_1_0_4_1_0 - 0.425396825396831*G0_1_0_4_1_0_5_1_1 + 0.425396825396831*G0_1_0_5_1_1_0_0_0 + 0.425396825396831*G0_1_0_5_1_1_0_0_1 - 0.425396825396831*G0_1_0_5_1_1_1_0_0 - 0.425396825396831*G0_1_0_5_1_1_2_0_1 + 0.425396825396831*G0_1_0_5_1_1_3_1_0 + 0.425396825396831*G0_1_0_5_1_1_3_1_1 - 0.425396825396831*G0_1_0_5_1_1_4_1_0 - 0.425396825396831*G0_1_0_5_1_1_5_1_1;
    A[766] = -A[121] + 0.510052910052917*G0_0_0_0_0_0_0_0_0 + 0.510052910052917*G0_0_0_0_0_0_0_0_1 - 0.510052910052917*G0_0_0_0_0_0_1_0_0 - 0.510052910052917*G0_0_0_0_0_0_2_0_1 + 0.510052910052917*G0_0_0_0_0_0_3_1_0 + 0.510052910052917*G0_0_0_0_0_0_3_1_1 - 0.510052910052917*G0_0_0_0_0_0_4_1_0 - 0.510052910052917*G0_0_0_0_0_0_5_1_1 + 0.510052910052917*G0_0_0_0_0_1_0_0_0 + 0.510052910052917*G0_0_0_0_0_1_0_0_1 - 0.510052910052917*G0_0_0_0_0_1_1_0_0 - 0.510052910052917*G0_0_0_0_0_1_2_0_1 + 0.510052910052917*G0_0_0_0_0_1_3_1_0 + 0.510052910052917*G0_0_0_0_0_1_3_1_1 - 0.510052910052917*G0_0_0_0_0_1_4_1_0 - 0.510052910052917*G0_0_0_0_0_1_5_1_1 - 0.510052910052917*G0_0_0_1_0_0_0_0_0 - 0.510052910052917*G0_0_0_1_0_0_0_0_1 + 0.510052910052917*G0_0_0_1_0_0_1_0_0 + 0.510052910052917*G0_0_0_1_0_0_2_0_1 - 0.510052910052917*G0_0_0_1_0_0_3_1_0 - 0.510052910052917*G0_0_0_1_0_0_3_1_1 + 0.510052910052917*G0_0_0_1_0_0_4_1_0 + 0.510052910052917*G0_0_0_1_0_0_5_1_1 - 0.510052910052917*G0_0_0_2_0_1_0_0_0 - 0.510052910052917*G0_0_0_2_0_1_0_0_1 + 0.510052910052917*G0_0_0_2_0_1_1_0_0 + 0.510052910052917*G0_0_0_2_0_1_2_0_1 - 0.510052910052917*G0_0_0_2_0_1_3_1_0 - 0.510052910052917*G0_0_0_2_0_1_3_1_1 + 0.510052910052917*G0_0_0_2_0_1_4_1_0 + 0.510052910052917*G0_0_0_2_0_1_5_1_1 + 0.510052910052917*G0_0_0_3_1_0_0_0_0 + 0.510052910052917*G0_0_0_3_1_0_0_0_1 - 0.510052910052917*G0_0_0_3_1_0_1_0_0 - 0.510052910052917*G0_0_0_3_1_0_2_0_1 + 0.510052910052917*G0_0_0_3_1_0_3_1_0 + 0.510052910052917*G0_0_0_3_1_0_3_1_1 - 0.510052910052917*G0_0_0_3_1_0_4_1_0 - 0.510052910052917*G0_0_0_3_1_0_5_1_1 + 0.510052910052917*G0_0_0_3_1_1_0_0_0 + 0.510052910052917*G0_0_0_3_1_1_0_0_1 - 0.510052910052917*G0_0_0_3_1_1_1_0_0 - 0.510052910052917*G0_0_0_3_1_1_2_0_1 + 0.510052910052917*G0_0_0_3_1_1_3_1_0 + 0.510052910052917*G0_0_0_3_1_1_3_1_1 - 0.510052910052917*G0_0_0_3_1_1_4_1_0 - 0.510052910052917*G0_0_0_3_1_1_5_1_1 - 0.510052910052917*G0_0_0_4_1_0_0_0_0 - 0.510052910052917*G0_0_0_4_1_0_0_0_1 + 0.510052910052917*G0_0_0_4_1_0_1_0_0 + 0.510052910052917*G0_0_0_4_1_0_2_0_1 - 0.510052910052917*G0_0_0_4_1_0_3_1_0 - 0.510052910052917*G0_0_0_4_1_0_3_1_1 + 0.510052910052917*G0_0_0_4_1_0_4_1_0 + 0.510052910052917*G0_0_0_4_1_0_5_1_1 - 0.510052910052917*G0_0_0_5_1_1_0_0_0 - 0.510052910052917*G0_0_0_5_1_1_0_0_1 + 0.510052910052917*G0_0_0_5_1_1_1_0_0 + 0.510052910052917*G0_0_0_5_1_1_2_0_1 - 0.510052910052917*G0_0_0_5_1_1_3_1_0 - 0.510052910052917*G0_0_0_5_1_1_3_1_1 + 0.510052910052917*G0_0_0_5_1_1_4_1_0 + 0.510052910052917*G0_0_0_5_1_1_5_1_1;
    A[846] = 0.0;
    A[154] = -A[709] + 1.11746031746032*G0_1_0_0_0_0_0_0_0 + 1.11746031746032*G0_1_0_0_0_0_0_0_1 - 1.11746031746032*G0_1_0_0_0_0_1_0_0 - 1.11746031746032*G0_1_0_0_0_0_2_0_1 + 1.11746031746032*G0_1_0_0_0_0_3_1_0 + 1.11746031746032*G0_1_0_0_0_0_3_1_1 - 1.11746031746032*G0_1_0_0_0_0_4_1_0 - 1.11746031746032*G0_1_0_0_0_0_5_1_1 + 1.11746031746032*G0_1_0_0_0_1_0_0_0 + 1.11746031746032*G0_1_0_0_0_1_0_0_1 - 1.11746031746032*G0_1_0_0_0_1_1_0_0 - 1.11746031746032*G0_1_0_0_0_1_2_0_1 + 1.11746031746032*G0_1_0_0_0_1_3_1_0 + 1.11746031746032*G0_1_0_0_0_1_3_1_1 - 1.11746031746032*G0_1_0_0_0_1_4_1_0 - 1.11746031746032*G0_1_0_0_0_1_5_1_1 - 1.11746031746032*G0_1_0_1_0_0_0_0_0 - 1.11746031746032*G0_1_0_1_0_0_0_0_1 + 1.11746031746032*G0_1_0_1_0_0_1_0_0 + 1.11746031746032*G0_1_0_1_0_0_2_0_1 - 1.11746031746032*G0_1_0_1_0_0_3_1_0 - 1.11746031746032*G0_1_0_1_0_0_3_1_1 + 1.11746031746032*G0_1_0_1_0_0_4_1_0 + 1.11746031746032*G0_1_0_1_0_0_5_1_1 - 1.11746031746032*G0_1_0_2_0_1_0_0_0 - 1.11746031746032*G0_1_0_2_0_1_0_0_1 + 1.11746031746032*G0_1_0_2_0_1_1_0_0 + 1.11746031746032*G0_1_0_2_0_1_2_0_1 - 1.11746031746032*G0_1_0_2_0_1_3_1_0 - 1.11746031746032*G0_1_0_2_0_1_3_1_1 + 1.11746031746032*G0_1_0_2_0_1_4_1_0 + 1.11746031746032*G0_1_0_2_0_1_5_1_1 + 1.11746031746032*G0_1_0_3_1_0_0_0_0 + 1.11746031746032*G0_1_0_3_1_0_0_0_1 - 1.11746031746032*G0_1_0_3_1_0_1_0_0 - 1.11746031746032*G0_1_0_3_1_0_2_0_1 + 1.11746031746032*G0_1_0_3_1_0_3_1_0 + 1.11746031746032*G0_1_0_3_1_0_3_1_1 - 1.11746031746032*G0_1_0_3_1_0_4_1_0 - 1.11746031746032*G0_1_0_3_1_0_5_1_1 + 1.11746031746032*G0_1_0_3_1_1_0_0_0 + 1.11746031746032*G0_1_0_3_1_1_0_0_1 - 1.11746031746032*G0_1_0_3_1_1_1_0_0 - 1.11746031746032*G0_1_0_3_1_1_2_0_1 + 1.11746031746032*G0_1_0_3_1_1_3_1_0 + 1.11746031746032*G0_1_0_3_1_1_3_1_1 - 1.11746031746032*G0_1_0_3_1_1_4_1_0 - 1.11746031746032*G0_1_0_3_1_1_5_1_1 - 1.11746031746032*G0_1_0_4_1_0_0_0_0 - 1.11746031746032*G0_1_0_4_1_0_0_0_1 + 1.11746031746032*G0_1_0_4_1_0_1_0_0 + 1.11746031746032*G0_1_0_4_1_0_2_0_1 - 1.11746031746032*G0_1_0_4_1_0_3_1_0 - 1.11746031746032*G0_1_0_4_1_0_3_1_1 + 1.11746031746032*G0_1_0_4_1_0_4_1_0 + 1.11746031746032*G0_1_0_4_1_0_5_1_1 - 1.11746031746032*G0_1_0_5_1_1_0_0_0 - 1.11746031746032*G0_1_0_5_1_1_0_0_1 + 1.11746031746032*G0_1_0_5_1_1_1_0_0 + 1.11746031746032*G0_1_0_5_1_1_2_0_1 - 1.11746031746032*G0_1_0_5_1_1_3_1_0 - 1.11746031746032*G0_1_0_5_1_1_3_1_1 + 1.11746031746032*G0_1_0_5_1_1_4_1_0 + 1.11746031746032*G0_1_0_5_1_1_5_1_1 - 0.728042328042336*G0_1_1_0_0_0_0_0_0 - 0.728042328042336*G0_1_1_0_0_0_0_0_1 + 0.728042328042336*G0_1_1_0_0_0_1_0_0 + 0.728042328042336*G0_1_1_0_0_0_2_0_1 - 0.728042328042336*G0_1_1_0_0_0_3_1_0 - 0.728042328042336*G0_1_1_0_0_0_3_1_1 + 0.728042328042336*G0_1_1_0_0_0_4_1_0 + 0.728042328042336*G0_1_1_0_0_0_5_1_1 - 0.728042328042336*G0_1_1_0_0_1_0_0_0 - 0.728042328042336*G0_1_1_0_0_1_0_0_1 + 0.728042328042336*G0_1_1_0_0_1_1_0_0 + 0.728042328042336*G0_1_1_0_0_1_2_0_1 - 0.728042328042336*G0_1_1_0_0_1_3_1_0 - 0.728042328042336*G0_1_1_0_0_1_3_1_1 + 0.728042328042336*G0_1_1_0_0_1_4_1_0 + 0.728042328042336*G0_1_1_0_0_1_5_1_1 + 0.728042328042336*G0_1_1_1_0_0_0_0_0 + 0.728042328042336*G0_1_1_1_0_0_0_0_1 - 0.728042328042336*G0_1_1_1_0_0_1_0_0 - 0.728042328042336*G0_1_1_1_0_0_2_0_1 + 0.728042328042336*G0_1_1_1_0_0_3_1_0 + 0.728042328042336*G0_1_1_1_0_0_3_1_1 - 0.728042328042336*G0_1_1_1_0_0_4_1_0 - 0.728042328042336*G0_1_1_1_0_0_5_1_1 + 0.728042328042336*G0_1_1_2_0_1_0_0_0 + 0.728042328042336*G0_1_1_2_0_1_0_0_1 - 0.728042328042336*G0_1_1_2_0_1_1_0_0 - 0.728042328042336*G0_1_1_2_0_1_2_0_1 + 0.728042328042336*G0_1_1_2_0_1_3_1_0 + 0.728042328042336*G0_1_1_2_0_1_3_1_1 - 0.728042328042336*G0_1_1_2_0_1_4_1_0 - 0.728042328042336*G0_1_1_2_0_1_5_1_1 - 0.728042328042336*G0_1_1_3_1_0_0_0_0 - 0.728042328042336*G0_1_1_3_1_0_0_0_1 + 0.728042328042336*G0_1_1_3_1_0_1_0_0 + 0.728042328042336*G0_1_1_3_1_0_2_0_1 - 0.728042328042336*G0_1_1_3_1_0_3_1_0 - 0.728042328042336*G0_1_1_3_1_0_3_1_1 + 0.728042328042336*G0_1_1_3_1_0_4_1_0 + 0.728042328042336*G0_1_1_3_1_0_5_1_1 - 0.728042328042336*G0_1_1_3_1_1_0_0_0 - 0.728042328042336*G0_1_1_3_1_1_0_0_1 + 0.728042328042336*G0_1_1_3_1_1_1_0_0 + 0.728042328042336*G0_1_1_3_1_1_2_0_1 - 0.728042328042336*G0_1_1_3_1_1_3_1_0 - 0.728042328042336*G0_1_1_3_1_1_3_1_1 + 0.728042328042336*G0_1_1_3_1_1_4_1_0 + 0.728042328042336*G0_1_1_3_1_1_5_1_1 + 0.728042328042336*G0_1_1_4_1_0_0_0_0 + 0.728042328042336*G0_1_1_4_1_0_0_0_1 - 0.728042328042336*G0_1_1_4_1_0_1_0_0 - 0.728042328042336*G0_1_1_4_1_0_2_0_1 + 0.728042328042336*G0_1_1_4_1_0_3_1_0 + 0.728042328042336*G0_1_1_4_1_0_3_1_1 - 0.728042328042336*G0_1_1_4_1_0_4_1_0 - 0.728042328042336*G0_1_1_4_1_0_5_1_1 + 0.728042328042336*G0_1_1_5_1_1_0_0_0 + 0.728042328042336*G0_1_1_5_1_1_0_0_1 - 0.728042328042336*G0_1_1_5_1_1_1_0_0 - 0.728042328042336*G0_1_1_5_1_1_2_0_1 + 0.728042328042336*G0_1_1_5_1_1_3_1_0 + 0.728042328042336*G0_1_1_5_1_1_3_1_1 - 0.728042328042336*G0_1_1_5_1_1_4_1_0 - 0.728042328042336*G0_1_1_5_1_1_5_1_1;
    A[877] = 0.0;
    A[484] = 0.0;
    A[191] = A[656];
    A[587] = A[534] - 0.425396825396829*G0_0_1_0_0_0_0_0_0 - 0.425396825396829*G0_0_1_0_0_0_0_0_1 + 0.425396825396829*G0_0_1_0_0_0_1_0_0 + 0.425396825396829*G0_0_1_0_0_0_2_0_1 - 0.425396825396829*G0_0_1_0_0_0_3_1_0 - 0.425396825396829*G0_0_1_0_0_0_3_1_1 + 0.425396825396829*G0_0_1_0_0_0_4_1_0 + 0.425396825396829*G0_0_1_0_0_0_5_1_1 - 0.425396825396829*G0_0_1_0_0_1_0_0_0 - 0.425396825396829*G0_0_1_0_0_1_0_0_1 + 0.425396825396829*G0_0_1_0_0_1_1_0_0 + 0.425396825396829*G0_0_1_0_0_1_2_0_1 - 0.425396825396829*G0_0_1_0_0_1_3_1_0 - 0.425396825396829*G0_0_1_0_0_1_3_1_1 + 0.425396825396829*G0_0_1_0_0_1_4_1_0 + 0.425396825396829*G0_0_1_0_0_1_5_1_1 + 0.425396825396829*G0_0_1_1_0_0_0_0_0 + 0.425396825396829*G0_0_1_1_0_0_0_0_1 - 0.425396825396829*G0_0_1_1_0_0_1_0_0 - 0.425396825396829*G0_0_1_1_0_0_2_0_1 + 0.425396825396829*G0_0_1_1_0_0_3_1_0 + 0.425396825396829*G0_0_1_1_0_0_3_1_1 - 0.425396825396829*G0_0_1_1_0_0_4_1_0 - 0.425396825396829*G0_0_1_1_0_0_5_1_1 + 0.425396825396829*G0_0_1_2_0_1_0_0_0 + 0.425396825396829*G0_0_1_2_0_1_0_0_1 - 0.425396825396829*G0_0_1_2_0_1_1_0_0 - 0.425396825396829*G0_0_1_2_0_1_2_0_1 + 0.425396825396829*G0_0_1_2_0_1_3_1_0 + 0.425396825396829*G0_0_1_2_0_1_3_1_1 - 0.425396825396829*G0_0_1_2_0_1_4_1_0 - 0.425396825396829*G0_0_1_2_0_1_5_1_1 - 0.425396825396829*G0_0_1_3_1_0_0_0_0 - 0.425396825396829*G0_0_1_3_1_0_0_0_1 + 0.425396825396829*G0_0_1_3_1_0_1_0_0 + 0.425396825396829*G0_0_1_3_1_0_2_0_1 - 0.425396825396829*G0_0_1_3_1_0_3_1_0 - 0.425396825396829*G0_0_1_3_1_0_3_1_1 + 0.425396825396829*G0_0_1_3_1_0_4_1_0 + 0.425396825396829*G0_0_1_3_1_0_5_1_1 - 0.425396825396829*G0_0_1_3_1_1_0_0_0 - 0.425396825396829*G0_0_1_3_1_1_0_0_1 + 0.425396825396829*G0_0_1_3_1_1_1_0_0 + 0.425396825396829*G0_0_1_3_1_1_2_0_1 - 0.425396825396829*G0_0_1_3_1_1_3_1_0 - 0.425396825396829*G0_0_1_3_1_1_3_1_1 + 0.425396825396829*G0_0_1_3_1_1_4_1_0 + 0.425396825396829*G0_0_1_3_1_1_5_1_1 + 0.425396825396829*G0_0_1_4_1_0_0_0_0 + 0.425396825396829*G0_0_1_4_1_0_0_0_1 - 0.425396825396829*G0_0_1_4_1_0_1_0_0 - 0.425396825396829*G0_0_1_4_1_0_2_0_1 + 0.425396825396829*G0_0_1_4_1_0_3_1_0 + 0.425396825396829*G0_0_1_4_1_0_3_1_1 - 0.425396825396829*G0_0_1_4_1_0_4_1_0 - 0.425396825396829*G0_0_1_4_1_0_5_1_1 + 0.425396825396829*G0_0_1_5_1_1_0_0_0 + 0.425396825396829*G0_0_1_5_1_1_0_0_1 - 0.425396825396829*G0_0_1_5_1_1_1_0_0 - 0.425396825396829*G0_0_1_5_1_1_2_0_1 + 0.425396825396829*G0_0_1_5_1_1_3_1_0 + 0.425396825396829*G0_0_1_5_1_1_3_1_1 - 0.425396825396829*G0_0_1_5_1_1_4_1_0 - 0.425396825396829*G0_0_1_5_1_1_5_1_1;
    A[677] = -A[587] + 0.510052910052918*G0_1_1_0_0_0_0_0_0 + 0.510052910052918*G0_1_1_0_0_0_0_0_1 - 0.510052910052918*G0_1_1_0_0_0_1_0_0 - 0.510052910052918*G0_1_1_0_0_0_2_0_1 + 0.510052910052918*G0_1_1_0_0_0_3_1_0 + 0.510052910052918*G0_1_1_0_0_0_3_1_1 - 0.510052910052918*G0_1_1_0_0_0_4_1_0 - 0.510052910052918*G0_1_1_0_0_0_5_1_1 + 0.510052910052918*G0_1_1_0_0_1_0_0_0 + 0.510052910052918*G0_1_1_0_0_1_0_0_1 - 0.510052910052918*G0_1_1_0_0_1_1_0_0 - 0.510052910052918*G0_1_1_0_0_1_2_0_1 + 0.510052910052918*G0_1_1_0_0_1_3_1_0 + 0.510052910052918*G0_1_1_0_0_1_3_1_1 - 0.510052910052918*G0_1_1_0_0_1_4_1_0 - 0.510052910052918*G0_1_1_0_0_1_5_1_1 - 0.510052910052918*G0_1_1_1_0_0_0_0_0 - 0.510052910052918*G0_1_1_1_0_0_0_0_1 + 0.510052910052918*G0_1_1_1_0_0_1_0_0 + 0.510052910052918*G0_1_1_1_0_0_2_0_1 - 0.510052910052918*G0_1_1_1_0_0_3_1_0 - 0.510052910052918*G0_1_1_1_0_0_3_1_1 + 0.510052910052918*G0_1_1_1_0_0_4_1_0 + 0.510052910052918*G0_1_1_1_0_0_5_1_1 - 0.510052910052918*G0_1_1_2_0_1_0_0_0 - 0.510052910052918*G0_1_1_2_0_1_0_0_1 + 0.510052910052918*G0_1_1_2_0_1_1_0_0 + 0.510052910052918*G0_1_1_2_0_1_2_0_1 - 0.510052910052918*G0_1_1_2_0_1_3_1_0 - 0.510052910052918*G0_1_1_2_0_1_3_1_1 + 0.510052910052918*G0_1_1_2_0_1_4_1_0 + 0.510052910052918*G0_1_1_2_0_1_5_1_1 + 0.510052910052918*G0_1_1_3_1_0_0_0_0 + 0.510052910052918*G0_1_1_3_1_0_0_0_1 - 0.510052910052918*G0_1_1_3_1_0_1_0_0 - 0.510052910052918*G0_1_1_3_1_0_2_0_1 + 0.510052910052918*G0_1_1_3_1_0_3_1_0 + 0.510052910052918*G0_1_1_3_1_0_3_1_1 - 0.510052910052918*G0_1_1_3_1_0_4_1_0 - 0.510052910052918*G0_1_1_3_1_0_5_1_1 + 0.510052910052918*G0_1_1_3_1_1_0_0_0 + 0.510052910052918*G0_1_1_3_1_1_0_0_1 - 0.510052910052918*G0_1_1_3_1_1_1_0_0 - 0.510052910052918*G0_1_1_3_1_1_2_0_1 + 0.510052910052918*G0_1_1_3_1_1_3_1_0 + 0.510052910052918*G0_1_1_3_1_1_3_1_1 - 0.510052910052918*G0_1_1_3_1_1_4_1_0 - 0.510052910052918*G0_1_1_3_1_1_5_1_1 - 0.510052910052918*G0_1_1_4_1_0_0_0_0 - 0.510052910052918*G0_1_1_4_1_0_0_0_1 + 0.510052910052918*G0_1_1_4_1_0_1_0_0 + 0.510052910052918*G0_1_1_4_1_0_2_0_1 - 0.510052910052918*G0_1_1_4_1_0_3_1_0 - 0.510052910052918*G0_1_1_4_1_0_3_1_1 + 0.510052910052918*G0_1_1_4_1_0_4_1_0 + 0.510052910052918*G0_1_1_4_1_0_5_1_1 - 0.510052910052918*G0_1_1_5_1_1_0_0_0 - 0.510052910052918*G0_1_1_5_1_1_0_0_1 + 0.510052910052918*G0_1_1_5_1_1_1_0_0 + 0.510052910052918*G0_1_1_5_1_1_2_0_1 - 0.510052910052918*G0_1_1_5_1_1_3_1_0 - 0.510052910052918*G0_1_1_5_1_1_3_1_1 + 0.510052910052918*G0_1_1_5_1_1_4_1_0 + 0.510052910052918*G0_1_1_5_1_1_5_1_1;
    A[511] = 0.0;
    A[228] = 0.0;
    A[610] = 0.0;
    A[546] = 0.0;
    A[506] = -0.651851851851859*G0_0_0_0_0_0_0_0_0 - 0.651851851851859*G0_0_0_0_0_0_0_0_1 + 0.651851851851859*G0_0_0_0_0_0_1_0_0 + 0.651851851851859*G0_0_0_0_0_0_2_0_1 - 0.651851851851859*G0_0_0_0_0_0_3_1_0 - 0.651851851851859*G0_0_0_0_0_0_3_1_1 + 0.651851851851859*G0_0_0_0_0_0_4_1_0 + 0.651851851851859*G0_0_0_0_0_0_5_1_1 - 0.651851851851859*G0_0_0_0_0_1_0_0_0 - 0.651851851851859*G0_0_0_0_0_1_0_0_1 + 0.651851851851859*G0_0_0_0_0_1_1_0_0 + 0.651851851851859*G0_0_0_0_0_1_2_0_1 - 0.651851851851859*G0_0_0_0_0_1_3_1_0 - 0.651851851851859*G0_0_0_0_0_1_3_1_1 + 0.651851851851859*G0_0_0_0_0_1_4_1_0 + 0.651851851851859*G0_0_0_0_0_1_5_1_1 + 0.651851851851859*G0_0_0_1_0_0_0_0_0 + 0.651851851851859*G0_0_0_1_0_0_0_0_1 - 0.651851851851859*G0_0_0_1_0_0_1_0_0 - 0.651851851851859*G0_0_0_1_0_0_2_0_1 + 0.651851851851859*G0_0_0_1_0_0_3_1_0 + 0.651851851851859*G0_0_0_1_0_0_3_1_1 - 0.651851851851859*G0_0_0_1_0_0_4_1_0 - 0.651851851851859*G0_0_0_1_0_0_5_1_1 + 0.651851851851859*G0_0_0_2_0_1_0_0_0 + 0.651851851851859*G0_0_0_2_0_1_0_0_1 - 0.651851851851859*G0_0_0_2_0_1_1_0_0 - 0.651851851851859*G0_0_0_2_0_1_2_0_1 + 0.651851851851859*G0_0_0_2_0_1_3_1_0 + 0.651851851851859*G0_0_0_2_0_1_3_1_1 - 0.651851851851859*G0_0_0_2_0_1_4_1_0 - 0.651851851851859*G0_0_0_2_0_1_5_1_1 - 0.651851851851859*G0_0_0_3_1_0_0_0_0 - 0.651851851851859*G0_0_0_3_1_0_0_0_1 + 0.651851851851859*G0_0_0_3_1_0_1_0_0 + 0.651851851851859*G0_0_0_3_1_0_2_0_1 - 0.651851851851859*G0_0_0_3_1_0_3_1_0 - 0.651851851851859*G0_0_0_3_1_0_3_1_1 + 0.651851851851859*G0_0_0_3_1_0_4_1_0 + 0.651851851851859*G0_0_0_3_1_0_5_1_1 - 0.651851851851859*G0_0_0_3_1_1_0_0_0 - 0.651851851851859*G0_0_0_3_1_1_0_0_1 + 0.651851851851859*G0_0_0_3_1_1_1_0_0 + 0.651851851851859*G0_0_0_3_1_1_2_0_1 - 0.651851851851859*G0_0_0_3_1_1_3_1_0 - 0.651851851851859*G0_0_0_3_1_1_3_1_1 + 0.651851851851859*G0_0_0_3_1_1_4_1_0 + 0.651851851851859*G0_0_0_3_1_1_5_1_1 + 0.651851851851859*G0_0_0_4_1_0_0_0_0 + 0.651851851851859*G0_0_0_4_1_0_0_0_1 - 0.651851851851859*G0_0_0_4_1_0_1_0_0 - 0.651851851851859*G0_0_0_4_1_0_2_0_1 + 0.651851851851859*G0_0_0_4_1_0_3_1_0 + 0.651851851851859*G0_0_0_4_1_0_3_1_1 - 0.651851851851859*G0_0_0_4_1_0_4_1_0 - 0.651851851851859*G0_0_0_4_1_0_5_1_1 + 0.651851851851859*G0_0_0_5_1_1_0_0_0 + 0.651851851851859*G0_0_0_5_1_1_0_0_1 - 0.651851851851859*G0_0_0_5_1_1_1_0_0 - 0.651851851851859*G0_0_0_5_1_1_2_0_1 + 0.651851851851859*G0_0_0_5_1_1_3_1_0 + 0.651851851851859*G0_0_0_5_1_1_3_1_1 - 0.651851851851859*G0_0_0_5_1_1_4_1_0 - 0.651851851851859*G0_0_0_5_1_1_5_1_1 - 0.778835978835987*G0_0_1_0_0_0_0_0_0 - 0.778835978835987*G0_0_1_0_0_0_0_0_1 + 0.778835978835987*G0_0_1_0_0_0_1_0_0 + 0.778835978835987*G0_0_1_0_0_0_2_0_1 - 0.778835978835987*G0_0_1_0_0_0_3_1_0 - 0.778835978835987*G0_0_1_0_0_0_3_1_1 + 0.778835978835987*G0_0_1_0_0_0_4_1_0 + 0.778835978835987*G0_0_1_0_0_0_5_1_1 - 0.778835978835987*G0_0_1_0_0_1_0_0_0 - 0.778835978835987*G0_0_1_0_0_1_0_0_1 + 0.778835978835987*G0_0_1_0_0_1_1_0_0 + 0.778835978835987*G0_0_1_0_0_1_2_0_1 - 0.778835978835987*G0_0_1_0_0_1_3_1_0 - 0.778835978835987*G0_0_1_0_0_1_3_1_1 + 0.778835978835987*G0_0_1_0_0_1_4_1_0 + 0.778835978835987*G0_0_1_0_0_1_5_1_1 + 0.778835978835987*G0_0_1_1_0_0_0_0_0 + 0.778835978835987*G0_0_1_1_0_0_0_0_1 - 0.778835978835987*G0_0_1_1_0_0_1_0_0 - 0.778835978835987*G0_0_1_1_0_0_2_0_1 + 0.778835978835987*G0_0_1_1_0_0_3_1_0 + 0.778835978835987*G0_0_1_1_0_0_3_1_1 - 0.778835978835987*G0_0_1_1_0_0_4_1_0 - 0.778835978835987*G0_0_1_1_0_0_5_1_1 + 0.778835978835987*G0_0_1_2_0_1_0_0_0 + 0.778835978835987*G0_0_1_2_0_1_0_0_1 - 0.778835978835987*G0_0_1_2_0_1_1_0_0 - 0.778835978835987*G0_0_1_2_0_1_2_0_1 + 0.778835978835987*G0_0_1_2_0_1_3_1_0 + 0.778835978835987*G0_0_1_2_0_1_3_1_1 - 0.778835978835987*G0_0_1_2_0_1_4_1_0 - 0.778835978835987*G0_0_1_2_0_1_5_1_1 - 0.778835978835987*G0_0_1_3_1_0_0_0_0 - 0.778835978835987*G0_0_1_3_1_0_0_0_1 + 0.778835978835987*G0_0_1_3_1_0_1_0_0 + 0.778835978835987*G0_0_1_3_1_0_2_0_1 - 0.778835978835987*G0_0_1_3_1_0_3_1_0 - 0.778835978835987*G0_0_1_3_1_0_3_1_1 + 0.778835978835987*G0_0_1_3_1_0_4_1_0 + 0.778835978835987*G0_0_1_3_1_0_5_1_1 - 0.778835978835987*G0_0_1_3_1_1_0_0_0 - 0.778835978835987*G0_0_1_3_1_1_0_0_1 + 0.778835978835987*G0_0_1_3_1_1_1_0_0 + 0.778835978835987*G0_0_1_3_1_1_2_0_1 - 0.778835978835987*G0_0_1_3_1_1_3_1_0 - 0.778835978835987*G0_0_1_3_1_1_3_1_1 + 0.778835978835987*G0_0_1_3_1_1_4_1_0 + 0.778835978835987*G0_0_1_3_1_1_5_1_1 + 0.778835978835987*G0_0_1_4_1_0_0_0_0 + 0.778835978835987*G0_0_1_4_1_0_0_0_1 - 0.778835978835987*G0_0_1_4_1_0_1_0_0 - 0.778835978835987*G0_0_1_4_1_0_2_0_1 + 0.778835978835987*G0_0_1_4_1_0_3_1_0 + 0.778835978835987*G0_0_1_4_1_0_3_1_1 - 0.778835978835987*G0_0_1_4_1_0_4_1_0 - 0.778835978835987*G0_0_1_4_1_0_5_1_1 + 0.778835978835987*G0_0_1_5_1_1_0_0_0 + 0.778835978835987*G0_0_1_5_1_1_0_0_1 - 0.778835978835987*G0_0_1_5_1_1_1_0_0 - 0.778835978835987*G0_0_1_5_1_1_2_0_1 + 0.778835978835987*G0_0_1_5_1_1_3_1_0 + 0.778835978835987*G0_0_1_5_1_1_3_1_1 - 0.778835978835987*G0_0_1_5_1_1_4_1_0 - 0.778835978835987*G0_0_1_5_1_1_5_1_1;
    A[641] = 0.0;
    A[537] = A[887];
    A[660] = 0.0;
    A[283] = A[748];
    A[695] = 0.0;
    A[310] = A[775];
    A[262] = 0.0;
    A[333] = A[101];
    A[293] = 0.0;
    A[745] = A[309] + 1.11746031746033*G0_0_1_0_0_0_0_0_0 + 1.11746031746033*G0_0_1_0_0_0_0_0_1 - 1.11746031746033*G0_0_1_0_0_0_1_0_0 - 1.11746031746033*G0_0_1_0_0_0_2_0_1 + 1.11746031746033*G0_0_1_0_0_0_3_1_0 + 1.11746031746033*G0_0_1_0_0_0_3_1_1 - 1.11746031746033*G0_0_1_0_0_0_4_1_0 - 1.11746031746033*G0_0_1_0_0_0_5_1_1 + 1.11746031746033*G0_0_1_0_0_1_0_0_0 + 1.11746031746033*G0_0_1_0_0_1_0_0_1 - 1.11746031746033*G0_0_1_0_0_1_1_0_0 - 1.11746031746033*G0_0_1_0_0_1_2_0_1 + 1.11746031746033*G0_0_1_0_0_1_3_1_0 + 1.11746031746033*G0_0_1_0_0_1_3_1_1 - 1.11746031746033*G0_0_1_0_0_1_4_1_0 - 1.11746031746033*G0_0_1_0_0_1_5_1_1 - 1.11746031746033*G0_0_1_1_0_0_0_0_0 - 1.11746031746033*G0_0_1_1_0_0_0_0_1 + 1.11746031746033*G0_0_1_1_0_0_1_0_0 + 1.11746031746033*G0_0_1_1_0_0_2_0_1 - 1.11746031746033*G0_0_1_1_0_0_3_1_0 - 1.11746031746033*G0_0_1_1_0_0_3_1_1 + 1.11746031746033*G0_0_1_1_0_0_4_1_0 + 1.11746031746033*G0_0_1_1_0_0_5_1_1 - 1.11746031746033*G0_0_1_2_0_1_0_0_0 - 1.11746031746033*G0_0_1_2_0_1_0_0_1 + 1.11746031746033*G0_0_1_2_0_1_1_0_0 + 1.11746031746033*G0_0_1_2_0_1_2_0_1 - 1.11746031746033*G0_0_1_2_0_1_3_1_0 - 1.11746031746033*G0_0_1_2_0_1_3_1_1 + 1.11746031746033*G0_0_1_2_0_1_4_1_0 + 1.11746031746033*G0_0_1_2_0_1_5_1_1 + 1.11746031746033*G0_0_1_3_1_0_0_0_0 + 1.11746031746033*G0_0_1_3_1_0_0_0_1 - 1.11746031746033*G0_0_1_3_1_0_1_0_0 - 1.11746031746033*G0_0_1_3_1_0_2_0_1 + 1.11746031746033*G0_0_1_3_1_0_3_1_0 + 1.11746031746033*G0_0_1_3_1_0_3_1_1 - 1.11746031746033*G0_0_1_3_1_0_4_1_0 - 1.11746031746033*G0_0_1_3_1_0_5_1_1 + 1.11746031746033*G0_0_1_3_1_1_0_0_0 + 1.11746031746033*G0_0_1_3_1_1_0_0_1 - 1.11746031746033*G0_0_1_3_1_1_1_0_0 - 1.11746031746033*G0_0_1_3_1_1_2_0_1 + 1.11746031746033*G0_0_1_3_1_1_3_1_0 + 1.11746031746033*G0_0_1_3_1_1_3_1_1 - 1.11746031746033*G0_0_1_3_1_1_4_1_0 - 1.11746031746033*G0_0_1_3_1_1_5_1_1 - 1.11746031746033*G0_0_1_4_1_0_0_0_0 - 1.11746031746033*G0_0_1_4_1_0_0_0_1 + 1.11746031746033*G0_0_1_4_1_0_1_0_0 + 1.11746031746033*G0_0_1_4_1_0_2_0_1 - 1.11746031746033*G0_0_1_4_1_0_3_1_0 - 1.11746031746033*G0_0_1_4_1_0_3_1_1 + 1.11746031746033*G0_0_1_4_1_0_4_1_0 + 1.11746031746033*G0_0_1_4_1_0_5_1_1 - 1.11746031746033*G0_0_1_5_1_1_0_0_0 - 1.11746031746033*G0_0_1_5_1_1_0_0_1 + 1.11746031746033*G0_0_1_5_1_1_1_0_0 + 1.11746031746033*G0_0_1_5_1_1_2_0_1 - 1.11746031746033*G0_0_1_5_1_1_3_1_0 - 1.11746031746033*G0_0_1_5_1_1_3_1_1 + 1.11746031746033*G0_0_1_5_1_1_4_1_0 + 1.11746031746033*G0_0_1_5_1_1_5_1_1 - 1.11746031746033*G0_1_0_0_0_0_0_0_0 - 1.11746031746033*G0_1_0_0_0_0_0_0_1 + 1.11746031746033*G0_1_0_0_0_0_1_0_0 + 1.11746031746033*G0_1_0_0_0_0_2_0_1 - 1.11746031746033*G0_1_0_0_0_0_3_1_0 - 1.11746031746033*G0_1_0_0_0_0_3_1_1 + 1.11746031746033*G0_1_0_0_0_0_4_1_0 + 1.11746031746033*G0_1_0_0_0_0_5_1_1 - 1.11746031746033*G0_1_0_0_0_1_0_0_0 - 1.11746031746033*G0_1_0_0_0_1_0_0_1 + 1.11746031746033*G0_1_0_0_0_1_1_0_0 + 1.11746031746033*G0_1_0_0_0_1_2_0_1 - 1.11746031746033*G0_1_0_0_0_1_3_1_0 - 1.11746031746033*G0_1_0_0_0_1_3_1_1 + 1.11746031746033*G0_1_0_0_0_1_4_1_0 + 1.11746031746033*G0_1_0_0_0_1_5_1_1 + 1.11746031746033*G0_1_0_1_0_0_0_0_0 + 1.11746031746033*G0_1_0_1_0_0_0_0_1 - 1.11746031746033*G0_1_0_1_0_0_1_0_0 - 1.11746031746033*G0_1_0_1_0_0_2_0_1 + 1.11746031746033*G0_1_0_1_0_0_3_1_0 + 1.11746031746033*G0_1_0_1_0_0_3_1_1 - 1.11746031746033*G0_1_0_1_0_0_4_1_0 - 1.11746031746033*G0_1_0_1_0_0_5_1_1 + 1.11746031746033*G0_1_0_2_0_1_0_0_0 + 1.11746031746033*G0_1_0_2_0_1_0_0_1 - 1.11746031746033*G0_1_0_2_0_1_1_0_0 - 1.11746031746033*G0_1_0_2_0_1_2_0_1 + 1.11746031746033*G0_1_0_2_0_1_3_1_0 + 1.11746031746033*G0_1_0_2_0_1_3_1_1 - 1.11746031746033*G0_1_0_2_0_1_4_1_0 - 1.11746031746033*G0_1_0_2_0_1_5_1_1 - 1.11746031746033*G0_1_0_3_1_0_0_0_0 - 1.11746031746033*G0_1_0_3_1_0_0_0_1 + 1.11746031746033*G0_1_0_3_1_0_1_0_0 + 1.11746031746033*G0_1_0_3_1_0_2_0_1 - 1.11746031746033*G0_1_0_3_1_0_3_1_0 - 1.11746031746033*G0_1_0_3_1_0_3_1_1 + 1.11746031746033*G0_1_0_3_1_0_4_1_0 + 1.11746031746033*G0_1_0_3_1_0_5_1_1 - 1.11746031746033*G0_1_0_3_1_1_0_0_0 - 1.11746031746033*G0_1_0_3_1_1_0_0_1 + 1.11746031746033*G0_1_0_3_1_1_1_0_0 + 1.11746031746033*G0_1_0_3_1_1_2_0_1 - 1.11746031746033*G0_1_0_3_1_1_3_1_0 - 1.11746031746033*G0_1_0_3_1_1_3_1_1 + 1.11746031746033*G0_1_0_3_1_1_4_1_0 + 1.11746031746033*G0_1_0_3_1_1_5_1_1 + 1.11746031746033*G0_1_0_4_1_0_0_0_0 + 1.11746031746033*G0_1_0_4_1_0_0_0_1 - 1.11746031746033*G0_1_0_4_1_0_1_0_0 - 1.11746031746033*G0_1_0_4_1_0_2_0_1 + 1.11746031746033*G0_1_0_4_1_0_3_1_0 + 1.11746031746033*G0_1_0_4_1_0_3_1_1 - 1.11746031746033*G0_1_0_4_1_0_4_1_0 - 1.11746031746033*G0_1_0_4_1_0_5_1_1 + 1.11746031746033*G0_1_0_5_1_1_0_0_0 + 1.11746031746033*G0_1_0_5_1_1_0_0_1 - 1.11746031746033*G0_1_0_5_1_1_1_0_0 - 1.11746031746033*G0_1_0_5_1_1_2_0_1 + 1.11746031746033*G0_1_0_5_1_1_3_1_0 + 1.11746031746033*G0_1_0_5_1_1_3_1_1 - 1.11746031746033*G0_1_0_5_1_1_4_1_0 - 1.11746031746033*G0_1_0_5_1_1_5_1_1;
    A[432] = A[897];
    A[364] = A[132];
    A[320] = 0.0;
    A[770] = A[625];
    A[459] = 0.0;
    A[399] = A[748];
    A[355] = 0.0;
    A[799] = A[334];
    A[105] = 0.0;
    A[836] = -A[569] + 0.948148148148171*G0_0_0_0_0_0_0_0_0 + 0.948148148148171*G0_0_0_0_0_0_0_0_1 - 0.948148148148171*G0_0_0_0_0_0_1_0_0 - 0.948148148148171*G0_0_0_0_0_0_2_0_1 + 0.948148148148171*G0_0_0_0_0_0_3_1_0 + 0.948148148148171*G0_0_0_0_0_0_3_1_1 - 0.948148148148171*G0_0_0_0_0_0_4_1_0 - 0.948148148148171*G0_0_0_0_0_0_5_1_1 + 0.948148148148171*G0_0_0_0_0_1_0_0_0 + 0.948148148148171*G0_0_0_0_0_1_0_0_1 - 0.948148148148171*G0_0_0_0_0_1_1_0_0 - 0.948148148148171*G0_0_0_0_0_1_2_0_1 + 0.948148148148171*G0_0_0_0_0_1_3_1_0 + 0.948148148148171*G0_0_0_0_0_1_3_1_1 - 0.948148148148171*G0_0_0_0_0_1_4_1_0 - 0.948148148148171*G0_0_0_0_0_1_5_1_1 - 0.948148148148171*G0_0_0_1_0_0_0_0_0 - 0.948148148148171*G0_0_0_1_0_0_0_0_1 + 0.948148148148171*G0_0_0_1_0_0_1_0_0 + 0.948148148148171*G0_0_0_1_0_0_2_0_1 - 0.948148148148171*G0_0_0_1_0_0_3_1_0 - 0.948148148148171*G0_0_0_1_0_0_3_1_1 + 0.948148148148171*G0_0_0_1_0_0_4_1_0 + 0.948148148148171*G0_0_0_1_0_0_5_1_1 - 0.948148148148171*G0_0_0_2_0_1_0_0_0 - 0.948148148148171*G0_0_0_2_0_1_0_0_1 + 0.948148148148171*G0_0_0_2_0_1_1_0_0 + 0.948148148148171*G0_0_0_2_0_1_2_0_1 - 0.948148148148171*G0_0_0_2_0_1_3_1_0 - 0.948148148148171*G0_0_0_2_0_1_3_1_1 + 0.948148148148171*G0_0_0_2_0_1_4_1_0 + 0.948148148148171*G0_0_0_2_0_1_5_1_1 + 0.948148148148171*G0_0_0_3_1_0_0_0_0 + 0.948148148148171*G0_0_0_3_1_0_0_0_1 - 0.948148148148171*G0_0_0_3_1_0_1_0_0 - 0.948148148148171*G0_0_0_3_1_0_2_0_1 + 0.948148148148171*G0_0_0_3_1_0_3_1_0 + 0.948148148148171*G0_0_0_3_1_0_3_1_1 - 0.948148148148171*G0_0_0_3_1_0_4_1_0 - 0.948148148148171*G0_0_0_3_1_0_5_1_1 + 0.948148148148171*G0_0_0_3_1_1_0_0_0 + 0.948148148148171*G0_0_0_3_1_1_0_0_1 - 0.948148148148171*G0_0_0_3_1_1_1_0_0 - 0.948148148148171*G0_0_0_3_1_1_2_0_1 + 0.948148148148171*G0_0_0_3_1_1_3_1_0 + 0.948148148148171*G0_0_0_3_1_1_3_1_1 - 0.948148148148171*G0_0_0_3_1_1_4_1_0 - 0.948148148148171*G0_0_0_3_1_1_5_1_1 - 0.948148148148171*G0_0_0_4_1_0_0_0_0 - 0.948148148148171*G0_0_0_4_1_0_0_0_1 + 0.948148148148171*G0_0_0_4_1_0_1_0_0 + 0.948148148148171*G0_0_0_4_1_0_2_0_1 - 0.948148148148171*G0_0_0_4_1_0_3_1_0 - 0.948148148148171*G0_0_0_4_1_0_3_1_1 + 0.948148148148171*G0_0_0_4_1_0_4_1_0 + 0.948148148148171*G0_0_0_4_1_0_5_1_1 - 0.948148148148171*G0_0_0_5_1_1_0_0_0 - 0.948148148148171*G0_0_0_5_1_1_0_0_1 + 0.948148148148171*G0_0_0_5_1_1_1_0_0 + 0.948148148148171*G0_0_0_5_1_1_2_0_1 - 0.948148148148171*G0_0_0_5_1_1_3_1_0 - 0.948148148148171*G0_0_0_5_1_1_3_1_1 + 0.948148148148171*G0_0_0_5_1_1_4_1_0 + 0.948148148148171*G0_0_0_5_1_1_5_1_1;
    A[33] = -A[506] - 0.524867724867733*G0_0_0_0_0_0_0_0_0 - 0.524867724867733*G0_0_0_0_0_0_0_0_1 + 0.524867724867733*G0_0_0_0_0_0_1_0_0 + 0.524867724867733*G0_0_0_0_0_0_2_0_1 - 0.524867724867733*G0_0_0_0_0_0_3_1_0 - 0.524867724867733*G0_0_0_0_0_0_3_1_1 + 0.524867724867733*G0_0_0_0_0_0_4_1_0 + 0.524867724867733*G0_0_0_0_0_0_5_1_1 - 0.524867724867733*G0_0_0_0_0_1_0_0_0 - 0.524867724867733*G0_0_0_0_0_1_0_0_1 + 0.524867724867733*G0_0_0_0_0_1_1_0_0 + 0.524867724867733*G0_0_0_0_0_1_2_0_1 - 0.524867724867733*G0_0_0_0_0_1_3_1_0 - 0.524867724867733*G0_0_0_0_0_1_3_1_1 + 0.524867724867733*G0_0_0_0_0_1_4_1_0 + 0.524867724867733*G0_0_0_0_0_1_5_1_1 + 0.524867724867733*G0_0_0_1_0_0_0_0_0 + 0.524867724867733*G0_0_0_1_0_0_0_0_1 - 0.524867724867733*G0_0_0_1_0_0_1_0_0 - 0.524867724867733*G0_0_0_1_0_0_2_0_1 + 0.524867724867733*G0_0_0_1_0_0_3_1_0 + 0.524867724867733*G0_0_0_1_0_0_3_1_1 - 0.524867724867733*G0_0_0_1_0_0_4_1_0 - 0.524867724867733*G0_0_0_1_0_0_5_1_1 + 0.524867724867733*G0_0_0_2_0_1_0_0_0 + 0.524867724867733*G0_0_0_2_0_1_0_0_1 - 0.524867724867733*G0_0_0_2_0_1_1_0_0 - 0.524867724867733*G0_0_0_2_0_1_2_0_1 + 0.524867724867733*G0_0_0_2_0_1_3_1_0 + 0.524867724867733*G0_0_0_2_0_1_3_1_1 - 0.524867724867733*G0_0_0_2_0_1_4_1_0 - 0.524867724867733*G0_0_0_2_0_1_5_1_1 - 0.524867724867733*G0_0_0_3_1_0_0_0_0 - 0.524867724867733*G0_0_0_3_1_0_0_0_1 + 0.524867724867733*G0_0_0_3_1_0_1_0_0 + 0.524867724867733*G0_0_0_3_1_0_2_0_1 - 0.524867724867733*G0_0_0_3_1_0_3_1_0 - 0.524867724867733*G0_0_0_3_1_0_3_1_1 + 0.524867724867733*G0_0_0_3_1_0_4_1_0 + 0.524867724867733*G0_0_0_3_1_0_5_1_1 - 0.524867724867733*G0_0_0_3_1_1_0_0_0 - 0.524867724867733*G0_0_0_3_1_1_0_0_1 + 0.524867724867733*G0_0_0_3_1_1_1_0_0 + 0.524867724867733*G0_0_0_3_1_1_2_0_1 - 0.524867724867733*G0_0_0_3_1_1_3_1_0 - 0.524867724867733*G0_0_0_3_1_1_3_1_1 + 0.524867724867733*G0_0_0_3_1_1_4_1_0 + 0.524867724867733*G0_0_0_3_1_1_5_1_1 + 0.524867724867733*G0_0_0_4_1_0_0_0_0 + 0.524867724867733*G0_0_0_4_1_0_0_0_1 - 0.524867724867733*G0_0_0_4_1_0_1_0_0 - 0.524867724867733*G0_0_0_4_1_0_2_0_1 + 0.524867724867733*G0_0_0_4_1_0_3_1_0 + 0.524867724867733*G0_0_0_4_1_0_3_1_1 - 0.524867724867733*G0_0_0_4_1_0_4_1_0 - 0.524867724867733*G0_0_0_4_1_0_5_1_1 + 0.524867724867733*G0_0_0_5_1_1_0_0_0 + 0.524867724867733*G0_0_0_5_1_1_0_0_1 - 0.524867724867733*G0_0_0_5_1_1_1_0_0 - 0.524867724867733*G0_0_0_5_1_1_2_0_1 + 0.524867724867733*G0_0_0_5_1_1_3_1_0 + 0.524867724867733*G0_0_0_5_1_1_3_1_1 - 0.524867724867733*G0_0_0_5_1_1_4_1_0 - 0.524867724867733*G0_0_0_5_1_1_5_1_1;
    A[128] = A[709];
    A[869] = -A[628] - 0.812698412698434*G0_0_0_0_0_0_0_0_0 - 0.812698412698434*G0_0_0_0_0_0_0_0_1 + 0.812698412698434*G0_0_0_0_0_0_1_0_0 + 0.812698412698434*G0_0_0_0_0_0_2_0_1 - 0.812698412698434*G0_0_0_0_0_0_3_1_0 - 0.812698412698434*G0_0_0_0_0_0_3_1_1 + 0.812698412698434*G0_0_0_0_0_0_4_1_0 + 0.812698412698434*G0_0_0_0_0_0_5_1_1 - 0.812698412698434*G0_0_0_0_0_1_0_0_0 - 0.812698412698434*G0_0_0_0_0_1_0_0_1 + 0.812698412698434*G0_0_0_0_0_1_1_0_0 + 0.812698412698434*G0_0_0_0_0_1_2_0_1 - 0.812698412698434*G0_0_0_0_0_1_3_1_0 - 0.812698412698434*G0_0_0_0_0_1_3_1_1 + 0.812698412698434*G0_0_0_0_0_1_4_1_0 + 0.812698412698434*G0_0_0_0_0_1_5_1_1 + 0.812698412698434*G0_0_0_1_0_0_0_0_0 + 0.812698412698434*G0_0_0_1_0_0_0_0_1 - 0.812698412698434*G0_0_0_1_0_0_1_0_0 - 0.812698412698434*G0_0_0_1_0_0_2_0_1 + 0.812698412698434*G0_0_0_1_0_0_3_1_0 + 0.812698412698434*G0_0_0_1_0_0_3_1_1 - 0.812698412698434*G0_0_0_1_0_0_4_1_0 - 0.812698412698434*G0_0_0_1_0_0_5_1_1 + 0.812698412698434*G0_0_0_2_0_1_0_0_0 + 0.812698412698434*G0_0_0_2_0_1_0_0_1 - 0.812698412698434*G0_0_0_2_0_1_1_0_0 - 0.812698412698434*G0_0_0_2_0_1_2_0_1 + 0.812698412698434*G0_0_0_2_0_1_3_1_0 + 0.812698412698434*G0_0_0_2_0_1_3_1_1 - 0.812698412698434*G0_0_0_2_0_1_4_1_0 - 0.812698412698434*G0_0_0_2_0_1_5_1_1 - 0.812698412698434*G0_0_0_3_1_0_0_0_0 - 0.812698412698434*G0_0_0_3_1_0_0_0_1 + 0.812698412698434*G0_0_0_3_1_0_1_0_0 + 0.812698412698434*G0_0_0_3_1_0_2_0_1 - 0.812698412698434*G0_0_0_3_1_0_3_1_0 - 0.812698412698434*G0_0_0_3_1_0_3_1_1 + 0.812698412698434*G0_0_0_3_1_0_4_1_0 + 0.812698412698434*G0_0_0_3_1_0_5_1_1 - 0.812698412698434*G0_0_0_3_1_1_0_0_0 - 0.812698412698434*G0_0_0_3_1_1_0_0_1 + 0.812698412698434*G0_0_0_3_1_1_1_0_0 + 0.812698412698434*G0_0_0_3_1_1_2_0_1 - 0.812698412698434*G0_0_0_3_1_1_3_1_0 - 0.812698412698434*G0_0_0_3_1_1_3_1_1 + 0.812698412698434*G0_0_0_3_1_1_4_1_0 + 0.812698412698434*G0_0_0_3_1_1_5_1_1 + 0.812698412698434*G0_0_0_4_1_0_0_0_0 + 0.812698412698434*G0_0_0_4_1_0_0_0_1 - 0.812698412698434*G0_0_0_4_1_0_1_0_0 - 0.812698412698434*G0_0_0_4_1_0_2_0_1 + 0.812698412698434*G0_0_0_4_1_0_3_1_0 + 0.812698412698434*G0_0_0_4_1_0_3_1_1 - 0.812698412698434*G0_0_0_4_1_0_4_1_0 - 0.812698412698434*G0_0_0_4_1_0_5_1_1 + 0.812698412698434*G0_0_0_5_1_1_0_0_0 + 0.812698412698434*G0_0_0_5_1_1_0_0_1 - 0.812698412698434*G0_0_0_5_1_1_1_0_0 - 0.812698412698434*G0_0_0_5_1_1_2_0_1 + 0.812698412698434*G0_0_0_5_1_1_3_1_0 + 0.812698412698434*G0_0_0_5_1_1_3_1_1 - 0.812698412698434*G0_0_0_5_1_1_4_1_0 - 0.812698412698434*G0_0_0_5_1_1_5_1_1 + 1.55767195767197*G0_0_1_0_0_0_0_0_0 + 1.55767195767197*G0_0_1_0_0_0_0_0_1 - 1.55767195767197*G0_0_1_0_0_0_1_0_0 - 1.55767195767197*G0_0_1_0_0_0_2_0_1 + 1.55767195767197*G0_0_1_0_0_0_3_1_0 + 1.55767195767197*G0_0_1_0_0_0_3_1_1 - 1.55767195767197*G0_0_1_0_0_0_4_1_0 - 1.55767195767197*G0_0_1_0_0_0_5_1_1 + 1.55767195767197*G0_0_1_0_0_1_0_0_0 + 1.55767195767197*G0_0_1_0_0_1_0_0_1 - 1.55767195767197*G0_0_1_0_0_1_1_0_0 - 1.55767195767197*G0_0_1_0_0_1_2_0_1 + 1.55767195767197*G0_0_1_0_0_1_3_1_0 + 1.55767195767197*G0_0_1_0_0_1_3_1_1 - 1.55767195767197*G0_0_1_0_0_1_4_1_0 - 1.55767195767197*G0_0_1_0_0_1_5_1_1 - 1.55767195767197*G0_0_1_1_0_0_0_0_0 - 1.55767195767197*G0_0_1_1_0_0_0_0_1 + 1.55767195767197*G0_0_1_1_0_0_1_0_0 + 1.55767195767197*G0_0_1_1_0_0_2_0_1 - 1.55767195767197*G0_0_1_1_0_0_3_1_0 - 1.55767195767197*G0_0_1_1_0_0_3_1_1 + 1.55767195767197*G0_0_1_1_0_0_4_1_0 + 1.55767195767197*G0_0_1_1_0_0_5_1_1 - 1.55767195767197*G0_0_1_2_0_1_0_0_0 - 1.55767195767197*G0_0_1_2_0_1_0_0_1 + 1.55767195767197*G0_0_1_2_0_1_1_0_0 + 1.55767195767197*G0_0_1_2_0_1_2_0_1 - 1.55767195767197*G0_0_1_2_0_1_3_1_0 - 1.55767195767197*G0_0_1_2_0_1_3_1_1 + 1.55767195767197*G0_0_1_2_0_1_4_1_0 + 1.55767195767197*G0_0_1_2_0_1_5_1_1 + 1.55767195767197*G0_0_1_3_1_0_0_0_0 + 1.55767195767197*G0_0_1_3_1_0_0_0_1 - 1.55767195767197*G0_0_1_3_1_0_1_0_0 - 1.55767195767197*G0_0_1_3_1_0_2_0_1 + 1.55767195767197*G0_0_1_3_1_0_3_1_0 + 1.55767195767197*G0_0_1_3_1_0_3_1_1 - 1.55767195767197*G0_0_1_3_1_0_4_1_0 - 1.55767195767197*G0_0_1_3_1_0_5_1_1 + 1.55767195767197*G0_0_1_3_1_1_0_0_0 + 1.55767195767197*G0_0_1_3_1_1_0_0_1 - 1.55767195767197*G0_0_1_3_1_1_1_0_0 - 1.55767195767197*G0_0_1_3_1_1_2_0_1 + 1.55767195767197*G0_0_1_3_1_1_3_1_0 + 1.55767195767197*G0_0_1_3_1_1_3_1_1 - 1.55767195767197*G0_0_1_3_1_1_4_1_0 - 1.55767195767197*G0_0_1_3_1_1_5_1_1 - 1.55767195767197*G0_0_1_4_1_0_0_0_0 - 1.55767195767197*G0_0_1_4_1_0_0_0_1 + 1.55767195767197*G0_0_1_4_1_0_1_0_0 + 1.55767195767197*G0_0_1_4_1_0_2_0_1 - 1.55767195767197*G0_0_1_4_1_0_3_1_0 - 1.55767195767197*G0_0_1_4_1_0_3_1_1 + 1.55767195767197*G0_0_1_4_1_0_4_1_0 + 1.55767195767197*G0_0_1_4_1_0_5_1_1 - 1.55767195767197*G0_0_1_5_1_1_0_0_0 - 1.55767195767197*G0_0_1_5_1_1_0_0_1 + 1.55767195767197*G0_0_1_5_1_1_1_0_0 + 1.55767195767197*G0_0_1_5_1_1_2_0_1 - 1.55767195767197*G0_0_1_5_1_1_3_1_0 - 1.55767195767197*G0_0_1_5_1_1_3_1_1 + 1.55767195767197*G0_0_1_5_1_1_4_1_0 + 1.55767195767197*G0_0_1_5_1_1_5_1_1 + 1.55767195767197*G0_1_0_0_0_0_0_0_0 + 1.55767195767197*G0_1_0_0_0_0_0_0_1 - 1.55767195767197*G0_1_0_0_0_0_1_0_0 - 1.55767195767197*G0_1_0_0_0_0_2_0_1 + 1.55767195767197*G0_1_0_0_0_0_3_1_0 + 1.55767195767197*G0_1_0_0_0_0_3_1_1 - 1.55767195767197*G0_1_0_0_0_0_4_1_0 - 1.55767195767197*G0_1_0_0_0_0_5_1_1 + 1.55767195767197*G0_1_0_0_0_1_0_0_0 + 1.55767195767197*G0_1_0_0_0_1_0_0_1 - 1.55767195767197*G0_1_0_0_0_1_1_0_0 - 1.55767195767197*G0_1_0_0_0_1_2_0_1 + 1.55767195767197*G0_1_0_0_0_1_3_1_0 + 1.55767195767197*G0_1_0_0_0_1_3_1_1 - 1.55767195767197*G0_1_0_0_0_1_4_1_0 - 1.55767195767197*G0_1_0_0_0_1_5_1_1 - 1.55767195767197*G0_1_0_1_0_0_0_0_0 - 1.55767195767197*G0_1_0_1_0_0_0_0_1 + 1.55767195767197*G0_1_0_1_0_0_1_0_0 + 1.55767195767197*G0_1_0_1_0_0_2_0_1 - 1.55767195767197*G0_1_0_1_0_0_3_1_0 - 1.55767195767197*G0_1_0_1_0_0_3_1_1 + 1.55767195767197*G0_1_0_1_0_0_4_1_0 + 1.55767195767197*G0_1_0_1_0_0_5_1_1 - 1.55767195767197*G0_1_0_2_0_1_0_0_0 - 1.55767195767197*G0_1_0_2_0_1_0_0_1 + 1.55767195767197*G0_1_0_2_0_1_1_0_0 + 1.55767195767197*G0_1_0_2_0_1_2_0_1 - 1.55767195767197*G0_1_0_2_0_1_3_1_0 - 1.55767195767197*G0_1_0_2_0_1_3_1_1 + 1.55767195767197*G0_1_0_2_0_1_4_1_0 + 1.55767195767197*G0_1_0_2_0_1_5_1_1 + 1.55767195767197*G0_1_0_3_1_0_0_0_0 + 1.55767195767197*G0_1_0_3_1_0_0_0_1 - 1.55767195767197*G0_1_0_3_1_0_1_0_0 - 1.55767195767197*G0_1_0_3_1_0_2_0_1 + 1.55767195767197*G0_1_0_3_1_0_3_1_0 + 1.55767195767197*G0_1_0_3_1_0_3_1_1 - 1.55767195767197*G0_1_0_3_1_0_4_1_0 - 1.55767195767197*G0_1_0_3_1_0_5_1_1 + 1.55767195767197*G0_1_0_3_1_1_0_0_0 + 1.55767195767197*G0_1_0_3_1_1_0_0_1 - 1.55767195767197*G0_1_0_3_1_1_1_0_0 - 1.55767195767197*G0_1_0_3_1_1_2_0_1 + 1.55767195767197*G0_1_0_3_1_1_3_1_0 + 1.55767195767197*G0_1_0_3_1_1_3_1_1 - 1.55767195767197*G0_1_0_3_1_1_4_1_0 - 1.55767195767197*G0_1_0_3_1_1_5_1_1 - 1.55767195767197*G0_1_0_4_1_0_0_0_0 - 1.55767195767197*G0_1_0_4_1_0_0_0_1 + 1.55767195767197*G0_1_0_4_1_0_1_0_0 + 1.55767195767197*G0_1_0_4_1_0_2_0_1 - 1.55767195767197*G0_1_0_4_1_0_3_1_0 - 1.55767195767197*G0_1_0_4_1_0_3_1_1 + 1.55767195767197*G0_1_0_4_1_0_4_1_0 + 1.55767195767197*G0_1_0_4_1_0_5_1_1 - 1.55767195767197*G0_1_0_5_1_1_0_0_0 - 1.55767195767197*G0_1_0_5_1_1_0_0_1 + 1.55767195767197*G0_1_0_5_1_1_1_0_0 + 1.55767195767197*G0_1_0_5_1_1_2_0_1 - 1.55767195767197*G0_1_0_5_1_1_3_1_0 - 1.55767195767197*G0_1_0_5_1_1_3_1_1 + 1.55767195767197*G0_1_0_5_1_1_4_1_0 + 1.55767195767197*G0_1_0_5_1_1_5_1_1;
    A[68] = A[533];
    A[163] = A[628];
    A[870] = 0.0;
    A[111] = 0.0;
    A[182] = A[647];
    A[142] = 0.0;
    A[592] = A[679];
    A[221] = -A[213] - 0.220105820105836*G0_0_0_0_0_0_0_0_0 - 0.220105820105836*G0_0_0_0_0_0_0_0_1 + 0.220105820105836*G0_0_0_0_0_0_1_0_0 + 0.220105820105836*G0_0_0_0_0_0_2_0_1 - 0.220105820105836*G0_0_0_0_0_0_3_1_0 - 0.220105820105836*G0_0_0_0_0_0_3_1_1 + 0.220105820105836*G0_0_0_0_0_0_4_1_0 + 0.220105820105836*G0_0_0_0_0_0_5_1_1 - 0.220105820105836*G0_0_0_0_0_1_0_0_0 - 0.220105820105836*G0_0_0_0_0_1_0_0_1 + 0.220105820105836*G0_0_0_0_0_1_1_0_0 + 0.220105820105836*G0_0_0_0_0_1_2_0_1 - 0.220105820105836*G0_0_0_0_0_1_3_1_0 - 0.220105820105836*G0_0_0_0_0_1_3_1_1 + 0.220105820105836*G0_0_0_0_0_1_4_1_0 + 0.220105820105836*G0_0_0_0_0_1_5_1_1 + 0.220105820105836*G0_0_0_1_0_0_0_0_0 + 0.220105820105836*G0_0_0_1_0_0_0_0_1 - 0.220105820105836*G0_0_0_1_0_0_1_0_0 - 0.220105820105836*G0_0_0_1_0_0_2_0_1 + 0.220105820105836*G0_0_0_1_0_0_3_1_0 + 0.220105820105836*G0_0_0_1_0_0_3_1_1 - 0.220105820105836*G0_0_0_1_0_0_4_1_0 - 0.220105820105836*G0_0_0_1_0_0_5_1_1 + 0.220105820105836*G0_0_0_2_0_1_0_0_0 + 0.220105820105836*G0_0_0_2_0_1_0_0_1 - 0.220105820105836*G0_0_0_2_0_1_1_0_0 - 0.220105820105836*G0_0_0_2_0_1_2_0_1 + 0.220105820105836*G0_0_0_2_0_1_3_1_0 + 0.220105820105836*G0_0_0_2_0_1_3_1_1 - 0.220105820105836*G0_0_0_2_0_1_4_1_0 - 0.220105820105836*G0_0_0_2_0_1_5_1_1 - 0.220105820105836*G0_0_0_3_1_0_0_0_0 - 0.220105820105836*G0_0_0_3_1_0_0_0_1 + 0.220105820105836*G0_0_0_3_1_0_1_0_0 + 0.220105820105836*G0_0_0_3_1_0_2_0_1 - 0.220105820105836*G0_0_0_3_1_0_3_1_0 - 0.220105820105836*G0_0_0_3_1_0_3_1_1 + 0.220105820105836*G0_0_0_3_1_0_4_1_0 + 0.220105820105836*G0_0_0_3_1_0_5_1_1 - 0.220105820105836*G0_0_0_3_1_1_0_0_0 - 0.220105820105836*G0_0_0_3_1_1_0_0_1 + 0.220105820105836*G0_0_0_3_1_1_1_0_0 + 0.220105820105836*G0_0_0_3_1_1_2_0_1 - 0.220105820105836*G0_0_0_3_1_1_3_1_0 - 0.220105820105836*G0_0_0_3_1_1_3_1_1 + 0.220105820105836*G0_0_0_3_1_1_4_1_0 + 0.220105820105836*G0_0_0_3_1_1_5_1_1 + 0.220105820105836*G0_0_0_4_1_0_0_0_0 + 0.220105820105836*G0_0_0_4_1_0_0_0_1 - 0.220105820105836*G0_0_0_4_1_0_1_0_0 - 0.220105820105836*G0_0_0_4_1_0_2_0_1 + 0.220105820105836*G0_0_0_4_1_0_3_1_0 + 0.220105820105836*G0_0_0_4_1_0_3_1_1 - 0.220105820105836*G0_0_0_4_1_0_4_1_0 - 0.220105820105836*G0_0_0_4_1_0_5_1_1 + 0.220105820105836*G0_0_0_5_1_1_0_0_0 + 0.220105820105836*G0_0_0_5_1_1_0_0_1 - 0.220105820105836*G0_0_0_5_1_1_1_0_0 - 0.220105820105836*G0_0_0_5_1_1_2_0_1 + 0.220105820105836*G0_0_0_5_1_1_3_1_0 + 0.220105820105836*G0_0_0_5_1_1_3_1_1 - 0.220105820105836*G0_0_0_5_1_1_4_1_0 - 0.220105820105836*G0_0_0_5_1_1_5_1_1;
    A[219] = A[221] - 0.406349206349211*G0_0_1_0_0_0_0_0_0 - 0.406349206349211*G0_0_1_0_0_0_0_0_1 + 0.406349206349211*G0_0_1_0_0_0_1_0_0 + 0.406349206349211*G0_0_1_0_0_0_2_0_1 - 0.406349206349211*G0_0_1_0_0_0_3_1_0 - 0.406349206349211*G0_0_1_0_0_0_3_1_1 + 0.406349206349211*G0_0_1_0_0_0_4_1_0 + 0.406349206349211*G0_0_1_0_0_0_5_1_1 - 0.406349206349211*G0_0_1_0_0_1_0_0_0 - 0.406349206349211*G0_0_1_0_0_1_0_0_1 + 0.406349206349211*G0_0_1_0_0_1_1_0_0 + 0.406349206349211*G0_0_1_0_0_1_2_0_1 - 0.406349206349211*G0_0_1_0_0_1_3_1_0 - 0.406349206349211*G0_0_1_0_0_1_3_1_1 + 0.406349206349211*G0_0_1_0_0_1_4_1_0 + 0.406349206349211*G0_0_1_0_0_1_5_1_1 + 0.406349206349211*G0_0_1_1_0_0_0_0_0 + 0.406349206349211*G0_0_1_1_0_0_0_0_1 - 0.406349206349211*G0_0_1_1_0_0_1_0_0 - 0.406349206349211*G0_0_1_1_0_0_2_0_1 + 0.406349206349211*G0_0_1_1_0_0_3_1_0 + 0.406349206349211*G0_0_1_1_0_0_3_1_1 - 0.406349206349211*G0_0_1_1_0_0_4_1_0 - 0.406349206349211*G0_0_1_1_0_0_5_1_1 + 0.406349206349211*G0_0_1_2_0_1_0_0_0 + 0.406349206349211*G0_0_1_2_0_1_0_0_1 - 0.406349206349211*G0_0_1_2_0_1_1_0_0 - 0.406349206349211*G0_0_1_2_0_1_2_0_1 + 0.406349206349211*G0_0_1_2_0_1_3_1_0 + 0.406349206349211*G0_0_1_2_0_1_3_1_1 - 0.406349206349211*G0_0_1_2_0_1_4_1_0 - 0.406349206349211*G0_0_1_2_0_1_5_1_1 - 0.406349206349211*G0_0_1_3_1_0_0_0_0 - 0.406349206349211*G0_0_1_3_1_0_0_0_1 + 0.406349206349211*G0_0_1_3_1_0_1_0_0 + 0.406349206349211*G0_0_1_3_1_0_2_0_1 - 0.406349206349211*G0_0_1_3_1_0_3_1_0 - 0.406349206349211*G0_0_1_3_1_0_3_1_1 + 0.406349206349211*G0_0_1_3_1_0_4_1_0 + 0.406349206349211*G0_0_1_3_1_0_5_1_1 - 0.406349206349211*G0_0_1_3_1_1_0_0_0 - 0.406349206349211*G0_0_1_3_1_1_0_0_1 + 0.406349206349211*G0_0_1_3_1_1_1_0_0 + 0.406349206349211*G0_0_1_3_1_1_2_0_1 - 0.406349206349211*G0_0_1_3_1_1_3_1_0 - 0.406349206349211*G0_0_1_3_1_1_3_1_1 + 0.406349206349211*G0_0_1_3_1_1_4_1_0 + 0.406349206349211*G0_0_1_3_1_1_5_1_1 + 0.406349206349211*G0_0_1_4_1_0_0_0_0 + 0.406349206349211*G0_0_1_4_1_0_0_0_1 - 0.406349206349211*G0_0_1_4_1_0_1_0_0 - 0.406349206349211*G0_0_1_4_1_0_2_0_1 + 0.406349206349211*G0_0_1_4_1_0_3_1_0 + 0.406349206349211*G0_0_1_4_1_0_3_1_1 - 0.406349206349211*G0_0_1_4_1_0_4_1_0 - 0.406349206349211*G0_0_1_4_1_0_5_1_1 + 0.406349206349211*G0_0_1_5_1_1_0_0_0 + 0.406349206349211*G0_0_1_5_1_1_0_0_1 - 0.406349206349211*G0_0_1_5_1_1_1_0_0 - 0.406349206349211*G0_0_1_5_1_1_2_0_1 + 0.406349206349211*G0_0_1_5_1_1_3_1_0 + 0.406349206349211*G0_0_1_5_1_1_3_1_1 - 0.406349206349211*G0_0_1_5_1_1_4_1_0 - 0.406349206349211*G0_0_1_5_1_1_5_1_1 - 0.406349206349205*G0_1_0_0_0_0_0_0_0 - 0.406349206349205*G0_1_0_0_0_0_0_0_1 + 0.406349206349205*G0_1_0_0_0_0_1_0_0 + 0.406349206349205*G0_1_0_0_0_0_2_0_1 - 0.406349206349205*G0_1_0_0_0_0_3_1_0 - 0.406349206349205*G0_1_0_0_0_0_3_1_1 + 0.406349206349205*G0_1_0_0_0_0_4_1_0 + 0.406349206349205*G0_1_0_0_0_0_5_1_1 - 0.406349206349205*G0_1_0_0_0_1_0_0_0 - 0.406349206349205*G0_1_0_0_0_1_0_0_1 + 0.406349206349205*G0_1_0_0_0_1_1_0_0 + 0.406349206349205*G0_1_0_0_0_1_2_0_1 - 0.406349206349205*G0_1_0_0_0_1_3_1_0 - 0.406349206349205*G0_1_0_0_0_1_3_1_1 + 0.406349206349205*G0_1_0_0_0_1_4_1_0 + 0.406349206349205*G0_1_0_0_0_1_5_1_1 + 0.406349206349205*G0_1_0_1_0_0_0_0_0 + 0.406349206349205*G0_1_0_1_0_0_0_0_1 - 0.406349206349205*G0_1_0_1_0_0_1_0_0 - 0.406349206349205*G0_1_0_1_0_0_2_0_1 + 0.406349206349205*G0_1_0_1_0_0_3_1_0 + 0.406349206349205*G0_1_0_1_0_0_3_1_1 - 0.406349206349205*G0_1_0_1_0_0_4_1_0 - 0.406349206349205*G0_1_0_1_0_0_5_1_1 + 0.406349206349205*G0_1_0_2_0_1_0_0_0 + 0.406349206349205*G0_1_0_2_0_1_0_0_1 - 0.406349206349205*G0_1_0_2_0_1_1_0_0 - 0.406349206349205*G0_1_0_2_0_1_2_0_1 + 0.406349206349205*G0_1_0_2_0_1_3_1_0 + 0.406349206349205*G0_1_0_2_0_1_3_1_1 - 0.406349206349205*G0_1_0_2_0_1_4_1_0 - 0.406349206349205*G0_1_0_2_0_1_5_1_1 - 0.406349206349205*G0_1_0_3_1_0_0_0_0 - 0.406349206349205*G0_1_0_3_1_0_0_0_1 + 0.406349206349205*G0_1_0_3_1_0_1_0_0 + 0.406349206349205*G0_1_0_3_1_0_2_0_1 - 0.406349206349205*G0_1_0_3_1_0_3_1_0 - 0.406349206349205*G0_1_0_3_1_0_3_1_1 + 0.406349206349205*G0_1_0_3_1_0_4_1_0 + 0.406349206349205*G0_1_0_3_1_0_5_1_1 - 0.406349206349205*G0_1_0_3_1_1_0_0_0 - 0.406349206349205*G0_1_0_3_1_1_0_0_1 + 0.406349206349205*G0_1_0_3_1_1_1_0_0 + 0.406349206349205*G0_1_0_3_1_1_2_0_1 - 0.406349206349205*G0_1_0_3_1_1_3_1_0 - 0.406349206349205*G0_1_0_3_1_1_3_1_1 + 0.406349206349205*G0_1_0_3_1_1_4_1_0 + 0.406349206349205*G0_1_0_3_1_1_5_1_1 + 0.406349206349205*G0_1_0_4_1_0_0_0_0 + 0.406349206349205*G0_1_0_4_1_0_0_0_1 - 0.406349206349205*G0_1_0_4_1_0_1_0_0 - 0.406349206349205*G0_1_0_4_1_0_2_0_1 + 0.406349206349205*G0_1_0_4_1_0_3_1_0 + 0.406349206349205*G0_1_0_4_1_0_3_1_1 - 0.406349206349205*G0_1_0_4_1_0_4_1_0 - 0.406349206349205*G0_1_0_4_1_0_5_1_1 + 0.406349206349205*G0_1_0_5_1_1_0_0_0 + 0.406349206349205*G0_1_0_5_1_1_0_0_1 - 0.406349206349205*G0_1_0_5_1_1_1_0_0 - 0.406349206349205*G0_1_0_5_1_1_2_0_1 + 0.406349206349205*G0_1_0_5_1_1_3_1_0 + 0.406349206349205*G0_1_0_5_1_1_3_1_1 - 0.406349206349205*G0_1_0_5_1_1_4_1_0 - 0.406349206349205*G0_1_0_5_1_1_5_1_1 + 0.101587301587311*G0_1_1_0_0_0_0_0_0 + 0.101587301587311*G0_1_1_0_0_0_0_0_1 - 0.101587301587311*G0_1_1_0_0_0_1_0_0 - 0.101587301587311*G0_1_1_0_0_0_2_0_1 + 0.101587301587311*G0_1_1_0_0_0_3_1_0 + 0.101587301587311*G0_1_1_0_0_0_3_1_1 - 0.101587301587311*G0_1_1_0_0_0_4_1_0 - 0.101587301587311*G0_1_1_0_0_0_5_1_1 + 0.101587301587311*G0_1_1_0_0_1_0_0_0 + 0.101587301587311*G0_1_1_0_0_1_0_0_1 - 0.101587301587311*G0_1_1_0_0_1_1_0_0 - 0.101587301587311*G0_1_1_0_0_1_2_0_1 + 0.101587301587311*G0_1_1_0_0_1_3_1_0 + 0.101587301587311*G0_1_1_0_0_1_3_1_1 - 0.101587301587311*G0_1_1_0_0_1_4_1_0 - 0.101587301587311*G0_1_1_0_0_1_5_1_1 - 0.101587301587311*G0_1_1_1_0_0_0_0_0 - 0.101587301587311*G0_1_1_1_0_0_0_0_1 + 0.101587301587311*G0_1_1_1_0_0_1_0_0 + 0.101587301587311*G0_1_1_1_0_0_2_0_1 - 0.101587301587311*G0_1_1_1_0_0_3_1_0 - 0.101587301587311*G0_1_1_1_0_0_3_1_1 + 0.101587301587311*G0_1_1_1_0_0_4_1_0 + 0.101587301587311*G0_1_1_1_0_0_5_1_1 - 0.101587301587311*G0_1_1_2_0_1_0_0_0 - 0.101587301587311*G0_1_1_2_0_1_0_0_1 + 0.101587301587311*G0_1_1_2_0_1_1_0_0 + 0.101587301587311*G0_1_1_2_0_1_2_0_1 - 0.101587301587311*G0_1_1_2_0_1_3_1_0 - 0.101587301587311*G0_1_1_2_0_1_3_1_1 + 0.101587301587311*G0_1_1_2_0_1_4_1_0 + 0.101587301587311*G0_1_1_2_0_1_5_1_1 + 0.101587301587311*G0_1_1_3_1_0_0_0_0 + 0.101587301587311*G0_1_1_3_1_0_0_0_1 - 0.101587301587311*G0_1_1_3_1_0_1_0_0 - 0.101587301587311*G0_1_1_3_1_0_2_0_1 + 0.101587301587311*G0_1_1_3_1_0_3_1_0 + 0.101587301587311*G0_1_1_3_1_0_3_1_1 - 0.101587301587311*G0_1_1_3_1_0_4_1_0 - 0.101587301587311*G0_1_1_3_1_0_5_1_1 + 0.101587301587311*G0_1_1_3_1_1_0_0_0 + 0.101587301587311*G0_1_1_3_1_1_0_0_1 - 0.101587301587311*G0_1_1_3_1_1_1_0_0 - 0.101587301587311*G0_1_1_3_1_1_2_0_1 + 0.101587301587311*G0_1_1_3_1_1_3_1_0 + 0.101587301587311*G0_1_1_3_1_1_3_1_1 - 0.101587301587311*G0_1_1_3_1_1_4_1_0 - 0.101587301587311*G0_1_1_3_1_1_5_1_1 - 0.101587301587311*G0_1_1_4_1_0_0_0_0 - 0.101587301587311*G0_1_1_4_1_0_0_0_1 + 0.101587301587311*G0_1_1_4_1_0_1_0_0 + 0.101587301587311*G0_1_1_4_1_0_2_0_1 - 0.101587301587311*G0_1_1_4_1_0_3_1_0 - 0.101587301587311*G0_1_1_4_1_0_3_1_1 + 0.101587301587311*G0_1_1_4_1_0_4_1_0 + 0.101587301587311*G0_1_1_4_1_0_5_1_1 - 0.101587301587311*G0_1_1_5_1_1_0_0_0 - 0.101587301587311*G0_1_1_5_1_1_0_0_1 + 0.101587301587311*G0_1_1_5_1_1_1_0_0 + 0.101587301587311*G0_1_1_5_1_1_2_0_1 - 0.101587301587311*G0_1_1_5_1_1_3_1_0 - 0.101587301587311*G0_1_1_5_1_1_3_1_1 + 0.101587301587311*G0_1_1_5_1_1_4_1_0 + 0.101587301587311*G0_1_1_5_1_1_5_1_1;
    A[274] = A[221] - 0.152380952380964*G0_0_1_0_0_0_0_0_0 - 0.152380952380964*G0_0_1_0_0_0_0_0_1 + 0.152380952380964*G0_0_1_0_0_0_1_0_0 + 0.152380952380964*G0_0_1_0_0_0_2_0_1 - 0.152380952380964*G0_0_1_0_0_0_3_1_0 - 0.152380952380964*G0_0_1_0_0_0_3_1_1 + 0.152380952380964*G0_0_1_0_0_0_4_1_0 + 0.152380952380964*G0_0_1_0_0_0_5_1_1 - 0.152380952380964*G0_0_1_0_0_1_0_0_0 - 0.152380952380964*G0_0_1_0_0_1_0_0_1 + 0.152380952380964*G0_0_1_0_0_1_1_0_0 + 0.152380952380964*G0_0_1_0_0_1_2_0_1 - 0.152380952380964*G0_0_1_0_0_1_3_1_0 - 0.152380952380964*G0_0_1_0_0_1_3_1_1 + 0.152380952380964*G0_0_1_0_0_1_4_1_0 + 0.152380952380964*G0_0_1_0_0_1_5_1_1 + 0.152380952380964*G0_0_1_1_0_0_0_0_0 + 0.152380952380964*G0_0_1_1_0_0_0_0_1 - 0.152380952380964*G0_0_1_1_0_0_1_0_0 - 0.152380952380964*G0_0_1_1_0_0_2_0_1 + 0.152380952380964*G0_0_1_1_0_0_3_1_0 + 0.152380952380964*G0_0_1_1_0_0_3_1_1 - 0.152380952380964*G0_0_1_1_0_0_4_1_0 - 0.152380952380964*G0_0_1_1_0_0_5_1_1 + 0.152380952380964*G0_0_1_2_0_1_0_0_0 + 0.152380952380964*G0_0_1_2_0_1_0_0_1 - 0.152380952380964*G0_0_1_2_0_1_1_0_0 - 0.152380952380964*G0_0_1_2_0_1_2_0_1 + 0.152380952380964*G0_0_1_2_0_1_3_1_0 + 0.152380952380964*G0_0_1_2_0_1_3_1_1 - 0.152380952380964*G0_0_1_2_0_1_4_1_0 - 0.152380952380964*G0_0_1_2_0_1_5_1_1 - 0.152380952380964*G0_0_1_3_1_0_0_0_0 - 0.152380952380964*G0_0_1_3_1_0_0_0_1 + 0.152380952380964*G0_0_1_3_1_0_1_0_0 + 0.152380952380964*G0_0_1_3_1_0_2_0_1 - 0.152380952380964*G0_0_1_3_1_0_3_1_0 - 0.152380952380964*G0_0_1_3_1_0_3_1_1 + 0.152380952380964*G0_0_1_3_1_0_4_1_0 + 0.152380952380964*G0_0_1_3_1_0_5_1_1 - 0.152380952380964*G0_0_1_3_1_1_0_0_0 - 0.152380952380964*G0_0_1_3_1_1_0_0_1 + 0.152380952380964*G0_0_1_3_1_1_1_0_0 + 0.152380952380964*G0_0_1_3_1_1_2_0_1 - 0.152380952380964*G0_0_1_3_1_1_3_1_0 - 0.152380952380964*G0_0_1_3_1_1_3_1_1 + 0.152380952380964*G0_0_1_3_1_1_4_1_0 + 0.152380952380964*G0_0_1_3_1_1_5_1_1 + 0.152380952380964*G0_0_1_4_1_0_0_0_0 + 0.152380952380964*G0_0_1_4_1_0_0_0_1 - 0.152380952380964*G0_0_1_4_1_0_1_0_0 - 0.152380952380964*G0_0_1_4_1_0_2_0_1 + 0.152380952380964*G0_0_1_4_1_0_3_1_0 + 0.152380952380964*G0_0_1_4_1_0_3_1_1 - 0.152380952380964*G0_0_1_4_1_0_4_1_0 - 0.152380952380964*G0_0_1_4_1_0_5_1_1 + 0.152380952380964*G0_0_1_5_1_1_0_0_0 + 0.152380952380964*G0_0_1_5_1_1_0_0_1 - 0.152380952380964*G0_0_1_5_1_1_1_0_0 - 0.152380952380964*G0_0_1_5_1_1_2_0_1 + 0.152380952380964*G0_0_1_5_1_1_3_1_0 + 0.152380952380964*G0_0_1_5_1_1_3_1_1 - 0.152380952380964*G0_0_1_5_1_1_4_1_0 - 0.152380952380964*G0_0_1_5_1_1_5_1_1 - 0.152380952380965*G0_1_0_0_0_0_0_0_0 - 0.152380952380965*G0_1_0_0_0_0_0_0_1 + 0.152380952380965*G0_1_0_0_0_0_1_0_0 + 0.152380952380965*G0_1_0_0_0_0_2_0_1 - 0.152380952380965*G0_1_0_0_0_0_3_1_0 - 0.152380952380965*G0_1_0_0_0_0_3_1_1 + 0.152380952380965*G0_1_0_0_0_0_4_1_0 + 0.152380952380965*G0_1_0_0_0_0_5_1_1 - 0.152380952380965*G0_1_0_0_0_1_0_0_0 - 0.152380952380965*G0_1_0_0_0_1_0_0_1 + 0.152380952380965*G0_1_0_0_0_1_1_0_0 + 0.152380952380965*G0_1_0_0_0_1_2_0_1 - 0.152380952380965*G0_1_0_0_0_1_3_1_0 - 0.152380952380965*G0_1_0_0_0_1_3_1_1 + 0.152380952380965*G0_1_0_0_0_1_4_1_0 + 0.152380952380965*G0_1_0_0_0_1_5_1_1 + 0.152380952380965*G0_1_0_1_0_0_0_0_0 + 0.152380952380965*G0_1_0_1_0_0_0_0_1 - 0.152380952380965*G0_1_0_1_0_0_1_0_0 - 0.152380952380965*G0_1_0_1_0_0_2_0_1 + 0.152380952380965*G0_1_0_1_0_0_3_1_0 + 0.152380952380965*G0_1_0_1_0_0_3_1_1 - 0.152380952380965*G0_1_0_1_0_0_4_1_0 - 0.152380952380965*G0_1_0_1_0_0_5_1_1 + 0.152380952380965*G0_1_0_2_0_1_0_0_0 + 0.152380952380965*G0_1_0_2_0_1_0_0_1 - 0.152380952380965*G0_1_0_2_0_1_1_0_0 - 0.152380952380965*G0_1_0_2_0_1_2_0_1 + 0.152380952380965*G0_1_0_2_0_1_3_1_0 + 0.152380952380965*G0_1_0_2_0_1_3_1_1 - 0.152380952380965*G0_1_0_2_0_1_4_1_0 - 0.152380952380965*G0_1_0_2_0_1_5_1_1 - 0.152380952380965*G0_1_0_3_1_0_0_0_0 - 0.152380952380965*G0_1_0_3_1_0_0_0_1 + 0.152380952380965*G0_1_0_3_1_0_1_0_0 + 0.152380952380965*G0_1_0_3_1_0_2_0_1 - 0.152380952380965*G0_1_0_3_1_0_3_1_0 - 0.152380952380965*G0_1_0_3_1_0_3_1_1 + 0.152380952380965*G0_1_0_3_1_0_4_1_0 + 0.152380952380965*G0_1_0_3_1_0_5_1_1 - 0.152380952380965*G0_1_0_3_1_1_0_0_0 - 0.152380952380965*G0_1_0_3_1_1_0_0_1 + 0.152380952380965*G0_1_0_3_1_1_1_0_0 + 0.152380952380965*G0_1_0_3_1_1_2_0_1 - 0.152380952380965*G0_1_0_3_1_1_3_1_0 - 0.152380952380965*G0_1_0_3_1_1_3_1_1 + 0.152380952380965*G0_1_0_3_1_1_4_1_0 + 0.152380952380965*G0_1_0_3_1_1_5_1_1 + 0.152380952380965*G0_1_0_4_1_0_0_0_0 + 0.152380952380965*G0_1_0_4_1_0_0_0_1 - 0.152380952380965*G0_1_0_4_1_0_1_0_0 - 0.152380952380965*G0_1_0_4_1_0_2_0_1 + 0.152380952380965*G0_1_0_4_1_0_3_1_0 + 0.152380952380965*G0_1_0_4_1_0_3_1_1 - 0.152380952380965*G0_1_0_4_1_0_4_1_0 - 0.152380952380965*G0_1_0_4_1_0_5_1_1 + 0.152380952380965*G0_1_0_5_1_1_0_0_0 + 0.152380952380965*G0_1_0_5_1_1_0_0_1 - 0.152380952380965*G0_1_0_5_1_1_1_0_0 - 0.152380952380965*G0_1_0_5_1_1_2_0_1 + 0.152380952380965*G0_1_0_5_1_1_3_1_0 + 0.152380952380965*G0_1_0_5_1_1_3_1_1 - 0.152380952380965*G0_1_0_5_1_1_4_1_0 - 0.152380952380965*G0_1_0_5_1_1_5_1_1 - 0.152380952380967*G0_1_1_0_0_0_0_0_0 - 0.152380952380967*G0_1_1_0_0_0_0_0_1 + 0.152380952380967*G0_1_1_0_0_0_1_0_0 + 0.152380952380967*G0_1_1_0_0_0_2_0_1 - 0.152380952380967*G0_1_1_0_0_0_3_1_0 - 0.152380952380967*G0_1_1_0_0_0_3_1_1 + 0.152380952380967*G0_1_1_0_0_0_4_1_0 + 0.152380952380967*G0_1_1_0_0_0_5_1_1 - 0.152380952380967*G0_1_1_0_0_1_0_0_0 - 0.152380952380967*G0_1_1_0_0_1_0_0_1 + 0.152380952380967*G0_1_1_0_0_1_1_0_0 + 0.152380952380967*G0_1_1_0_0_1_2_0_1 - 0.152380952380967*G0_1_1_0_0_1_3_1_0 - 0.152380952380967*G0_1_1_0_0_1_3_1_1 + 0.152380952380967*G0_1_1_0_0_1_4_1_0 + 0.152380952380967*G0_1_1_0_0_1_5_1_1 + 0.152380952380967*G0_1_1_1_0_0_0_0_0 + 0.152380952380967*G0_1_1_1_0_0_0_0_1 - 0.152380952380967*G0_1_1_1_0_0_1_0_0 - 0.152380952380967*G0_1_1_1_0_0_2_0_1 + 0.152380952380967*G0_1_1_1_0_0_3_1_0 + 0.152380952380967*G0_1_1_1_0_0_3_1_1 - 0.152380952380967*G0_1_1_1_0_0_4_1_0 - 0.152380952380967*G0_1_1_1_0_0_5_1_1 + 0.152380952380967*G0_1_1_2_0_1_0_0_0 + 0.152380952380967*G0_1_1_2_0_1_0_0_1 - 0.152380952380967*G0_1_1_2_0_1_1_0_0 - 0.152380952380967*G0_1_1_2_0_1_2_0_1 + 0.152380952380967*G0_1_1_2_0_1_3_1_0 + 0.152380952380967*G0_1_1_2_0_1_3_1_1 - 0.152380952380967*G0_1_1_2_0_1_4_1_0 - 0.152380952380967*G0_1_1_2_0_1_5_1_1 - 0.152380952380967*G0_1_1_3_1_0_0_0_0 - 0.152380952380967*G0_1_1_3_1_0_0_0_1 + 0.152380952380967*G0_1_1_3_1_0_1_0_0 + 0.152380952380967*G0_1_1_3_1_0_2_0_1 - 0.152380952380967*G0_1_1_3_1_0_3_1_0 - 0.152380952380967*G0_1_1_3_1_0_3_1_1 + 0.152380952380967*G0_1_1_3_1_0_4_1_0 + 0.152380952380967*G0_1_1_3_1_0_5_1_1 - 0.152380952380967*G0_1_1_3_1_1_0_0_0 - 0.152380952380967*G0_1_1_3_1_1_0_0_1 + 0.152380952380967*G0_1_1_3_1_1_1_0_0 + 0.152380952380967*G0_1_1_3_1_1_2_0_1 - 0.152380952380967*G0_1_1_3_1_1_3_1_0 - 0.152380952380967*G0_1_1_3_1_1_3_1_1 + 0.152380952380967*G0_1_1_3_1_1_4_1_0 + 0.152380952380967*G0_1_1_3_1_1_5_1_1 + 0.152380952380967*G0_1_1_4_1_0_0_0_0 + 0.152380952380967*G0_1_1_4_1_0_0_0_1 - 0.152380952380967*G0_1_1_4_1_0_1_0_0 - 0.152380952380967*G0_1_1_4_1_0_2_0_1 + 0.152380952380967*G0_1_1_4_1_0_3_1_0 + 0.152380952380967*G0_1_1_4_1_0_3_1_1 - 0.152380952380967*G0_1_1_4_1_0_4_1_0 - 0.152380952380967*G0_1_1_4_1_0_5_1_1 + 0.152380952380967*G0_1_1_5_1_1_0_0_0 + 0.152380952380967*G0_1_1_5_1_1_0_0_1 - 0.152380952380967*G0_1_1_5_1_1_1_0_0 - 0.152380952380967*G0_1_1_5_1_1_2_0_1 + 0.152380952380967*G0_1_1_5_1_1_3_1_0 + 0.152380952380967*G0_1_1_5_1_1_3_1_1 - 0.152380952380967*G0_1_1_5_1_1_4_1_0 - 0.152380952380967*G0_1_1_5_1_1_5_1_1;
    A[173] = 0.0;
    A[617] = -A[242] - 0.524867724867732*G0_1_1_0_0_0_0_0_0 - 0.524867724867732*G0_1_1_0_0_0_0_0_1 + 0.524867724867732*G0_1_1_0_0_0_1_0_0 + 0.524867724867732*G0_1_1_0_0_0_2_0_1 - 0.524867724867732*G0_1_1_0_0_0_3_1_0 - 0.524867724867732*G0_1_1_0_0_0_3_1_1 + 0.524867724867732*G0_1_1_0_0_0_4_1_0 + 0.524867724867732*G0_1_1_0_0_0_5_1_1 - 0.524867724867732*G0_1_1_0_0_1_0_0_0 - 0.524867724867732*G0_1_1_0_0_1_0_0_1 + 0.524867724867732*G0_1_1_0_0_1_1_0_0 + 0.524867724867732*G0_1_1_0_0_1_2_0_1 - 0.524867724867732*G0_1_1_0_0_1_3_1_0 - 0.524867724867732*G0_1_1_0_0_1_3_1_1 + 0.524867724867732*G0_1_1_0_0_1_4_1_0 + 0.524867724867732*G0_1_1_0_0_1_5_1_1 + 0.524867724867732*G0_1_1_1_0_0_0_0_0 + 0.524867724867732*G0_1_1_1_0_0_0_0_1 - 0.524867724867732*G0_1_1_1_0_0_1_0_0 - 0.524867724867732*G0_1_1_1_0_0_2_0_1 + 0.524867724867732*G0_1_1_1_0_0_3_1_0 + 0.524867724867732*G0_1_1_1_0_0_3_1_1 - 0.524867724867732*G0_1_1_1_0_0_4_1_0 - 0.524867724867732*G0_1_1_1_0_0_5_1_1 + 0.524867724867732*G0_1_1_2_0_1_0_0_0 + 0.524867724867732*G0_1_1_2_0_1_0_0_1 - 0.524867724867732*G0_1_1_2_0_1_1_0_0 - 0.524867724867732*G0_1_1_2_0_1_2_0_1 + 0.524867724867732*G0_1_1_2_0_1_3_1_0 + 0.524867724867732*G0_1_1_2_0_1_3_1_1 - 0.524867724867732*G0_1_1_2_0_1_4_1_0 - 0.524867724867732*G0_1_1_2_0_1_5_1_1 - 0.524867724867732*G0_1_1_3_1_0_0_0_0 - 0.524867724867732*G0_1_1_3_1_0_0_0_1 + 0.524867724867732*G0_1_1_3_1_0_1_0_0 + 0.524867724867732*G0_1_1_3_1_0_2_0_1 - 0.524867724867732*G0_1_1_3_1_0_3_1_0 - 0.524867724867732*G0_1_1_3_1_0_3_1_1 + 0.524867724867732*G0_1_1_3_1_0_4_1_0 + 0.524867724867732*G0_1_1_3_1_0_5_1_1 - 0.524867724867732*G0_1_1_3_1_1_0_0_0 - 0.524867724867732*G0_1_1_3_1_1_0_0_1 + 0.524867724867732*G0_1_1_3_1_1_1_0_0 + 0.524867724867732*G0_1_1_3_1_1_2_0_1 - 0.524867724867732*G0_1_1_3_1_1_3_1_0 - 0.524867724867732*G0_1_1_3_1_1_3_1_1 + 0.524867724867732*G0_1_1_3_1_1_4_1_0 + 0.524867724867732*G0_1_1_3_1_1_5_1_1 + 0.524867724867732*G0_1_1_4_1_0_0_0_0 + 0.524867724867732*G0_1_1_4_1_0_0_0_1 - 0.524867724867732*G0_1_1_4_1_0_1_0_0 - 0.524867724867732*G0_1_1_4_1_0_2_0_1 + 0.524867724867732*G0_1_1_4_1_0_3_1_0 + 0.524867724867732*G0_1_1_4_1_0_3_1_1 - 0.524867724867732*G0_1_1_4_1_0_4_1_0 - 0.524867724867732*G0_1_1_4_1_0_5_1_1 + 0.524867724867732*G0_1_1_5_1_1_0_0_0 + 0.524867724867732*G0_1_1_5_1_1_0_0_1 - 0.524867724867732*G0_1_1_5_1_1_1_0_0 - 0.524867724867732*G0_1_1_5_1_1_2_0_1 + 0.524867724867732*G0_1_1_5_1_1_3_1_0 + 0.524867724867732*G0_1_1_5_1_1_3_1_1 - 0.524867724867732*G0_1_1_5_1_1_4_1_0 - 0.524867724867732*G0_1_1_5_1_1_5_1_1;
    A[541] = 0.0;
    A[497] = -0.0566137566137575*G0_0_1_0_0_0_0_0_0 - 0.0566137566137575*G0_0_1_0_0_0_0_0_1 + 0.0566137566137575*G0_0_1_0_0_0_1_0_0 + 0.0566137566137575*G0_0_1_0_0_0_2_0_1 - 0.0566137566137575*G0_0_1_0_0_0_3_1_0 - 0.0566137566137575*G0_0_1_0_0_0_3_1_1 + 0.0566137566137575*G0_0_1_0_0_0_4_1_0 + 0.0566137566137575*G0_0_1_0_0_0_5_1_1 - 0.0566137566137575*G0_0_1_0_0_1_0_0_0 - 0.0566137566137575*G0_0_1_0_0_1_0_0_1 + 0.0566137566137575*G0_0_1_0_0_1_1_0_0 + 0.0566137566137575*G0_0_1_0_0_1_2_0_1 - 0.0566137566137575*G0_0_1_0_0_1_3_1_0 - 0.0566137566137575*G0_0_1_0_0_1_3_1_1 + 0.0566137566137575*G0_0_1_0_0_1_4_1_0 + 0.0566137566137575*G0_0_1_0_0_1_5_1_1 + 0.0566137566137575*G0_0_1_1_0_0_0_0_0 + 0.0566137566137575*G0_0_1_1_0_0_0_0_1 - 0.0566137566137575*G0_0_1_1_0_0_1_0_0 - 0.0566137566137575*G0_0_1_1_0_0_2_0_1 + 0.0566137566137575*G0_0_1_1_0_0_3_1_0 + 0.0566137566137575*G0_0_1_1_0_0_3_1_1 - 0.0566137566137575*G0_0_1_1_0_0_4_1_0 - 0.0566137566137575*G0_0_1_1_0_0_5_1_1 + 0.0566137566137575*G0_0_1_2_0_1_0_0_0 + 0.0566137566137575*G0_0_1_2_0_1_0_0_1 - 0.0566137566137575*G0_0_1_2_0_1_1_0_0 - 0.0566137566137575*G0_0_1_2_0_1_2_0_1 + 0.0566137566137575*G0_0_1_2_0_1_3_1_0 + 0.0566137566137575*G0_0_1_2_0_1_3_1_1 - 0.0566137566137575*G0_0_1_2_0_1_4_1_0 - 0.0566137566137575*G0_0_1_2_0_1_5_1_1 - 0.0566137566137575*G0_0_1_3_1_0_0_0_0 - 0.0566137566137575*G0_0_1_3_1_0_0_0_1 + 0.0566137566137575*G0_0_1_3_1_0_1_0_0 + 0.0566137566137575*G0_0_1_3_1_0_2_0_1 - 0.0566137566137575*G0_0_1_3_1_0_3_1_0 - 0.0566137566137575*G0_0_1_3_1_0_3_1_1 + 0.0566137566137575*G0_0_1_3_1_0_4_1_0 + 0.0566137566137575*G0_0_1_3_1_0_5_1_1 - 0.0566137566137575*G0_0_1_3_1_1_0_0_0 - 0.0566137566137575*G0_0_1_3_1_1_0_0_1 + 0.0566137566137575*G0_0_1_3_1_1_1_0_0 + 0.0566137566137575*G0_0_1_3_1_1_2_0_1 - 0.0566137566137575*G0_0_1_3_1_1_3_1_0 - 0.0566137566137575*G0_0_1_3_1_1_3_1_1 + 0.0566137566137575*G0_0_1_3_1_1_4_1_0 + 0.0566137566137575*G0_0_1_3_1_1_5_1_1 + 0.0566137566137575*G0_0_1_4_1_0_0_0_0 + 0.0566137566137575*G0_0_1_4_1_0_0_0_1 - 0.0566137566137575*G0_0_1_4_1_0_1_0_0 - 0.0566137566137575*G0_0_1_4_1_0_2_0_1 + 0.0566137566137575*G0_0_1_4_1_0_3_1_0 + 0.0566137566137575*G0_0_1_4_1_0_3_1_1 - 0.0566137566137575*G0_0_1_4_1_0_4_1_0 - 0.0566137566137575*G0_0_1_4_1_0_5_1_1 + 0.0566137566137575*G0_0_1_5_1_1_0_0_0 + 0.0566137566137575*G0_0_1_5_1_1_0_0_1 - 0.0566137566137575*G0_0_1_5_1_1_1_0_0 - 0.0566137566137575*G0_0_1_5_1_1_2_0_1 + 0.0566137566137575*G0_0_1_5_1_1_3_1_0 + 0.0566137566137575*G0_0_1_5_1_1_3_1_1 - 0.0566137566137575*G0_0_1_5_1_1_4_1_0 - 0.0566137566137575*G0_0_1_5_1_1_5_1_1;
    A[30] = -A[497] + 0.0566137566137574*G0_0_0_0_0_0_0_0_0 + 0.0566137566137574*G0_0_0_0_0_0_0_0_1 - 0.0566137566137574*G0_0_0_0_0_0_1_0_0 - 0.0566137566137574*G0_0_0_0_0_0_2_0_1 + 0.0566137566137574*G0_0_0_0_0_0_3_1_0 + 0.0566137566137574*G0_0_0_0_0_0_3_1_1 - 0.0566137566137574*G0_0_0_0_0_0_4_1_0 - 0.0566137566137574*G0_0_0_0_0_0_5_1_1 + 0.0566137566137574*G0_0_0_0_0_1_0_0_0 + 0.0566137566137574*G0_0_0_0_0_1_0_0_1 - 0.0566137566137574*G0_0_0_0_0_1_1_0_0 - 0.0566137566137574*G0_0_0_0_0_1_2_0_1 + 0.0566137566137574*G0_0_0_0_0_1_3_1_0 + 0.0566137566137574*G0_0_0_0_0_1_3_1_1 - 0.0566137566137574*G0_0_0_0_0_1_4_1_0 - 0.0566137566137574*G0_0_0_0_0_1_5_1_1 - 0.0566137566137574*G0_0_0_1_0_0_0_0_0 - 0.0566137566137574*G0_0_0_1_0_0_0_0_1 + 0.0566137566137574*G0_0_0_1_0_0_1_0_0 + 0.0566137566137574*G0_0_0_1_0_0_2_0_1 - 0.0566137566137574*G0_0_0_1_0_0_3_1_0 - 0.0566137566137574*G0_0_0_1_0_0_3_1_1 + 0.0566137566137574*G0_0_0_1_0_0_4_1_0 + 0.0566137566137574*G0_0_0_1_0_0_5_1_1 - 0.0566137566137574*G0_0_0_2_0_1_0_0_0 - 0.0566137566137574*G0_0_0_2_0_1_0_0_1 + 0.0566137566137574*G0_0_0_2_0_1_1_0_0 + 0.0566137566137574*G0_0_0_2_0_1_2_0_1 - 0.0566137566137574*G0_0_0_2_0_1_3_1_0 - 0.0566137566137574*G0_0_0_2_0_1_3_1_1 + 0.0566137566137574*G0_0_0_2_0_1_4_1_0 + 0.0566137566137574*G0_0_0_2_0_1_5_1_1 + 0.0566137566137574*G0_0_0_3_1_0_0_0_0 + 0.0566137566137574*G0_0_0_3_1_0_0_0_1 - 0.0566137566137574*G0_0_0_3_1_0_1_0_0 - 0.0566137566137574*G0_0_0_3_1_0_2_0_1 + 0.0566137566137574*G0_0_0_3_1_0_3_1_0 + 0.0566137566137574*G0_0_0_3_1_0_3_1_1 - 0.0566137566137574*G0_0_0_3_1_0_4_1_0 - 0.0566137566137574*G0_0_0_3_1_0_5_1_1 + 0.0566137566137574*G0_0_0_3_1_1_0_0_0 + 0.0566137566137574*G0_0_0_3_1_1_0_0_1 - 0.0566137566137574*G0_0_0_3_1_1_1_0_0 - 0.0566137566137574*G0_0_0_3_1_1_2_0_1 + 0.0566137566137574*G0_0_0_3_1_1_3_1_0 + 0.0566137566137574*G0_0_0_3_1_1_3_1_1 - 0.0566137566137574*G0_0_0_3_1_1_4_1_0 - 0.0566137566137574*G0_0_0_3_1_1_5_1_1 - 0.0566137566137574*G0_0_0_4_1_0_0_0_0 - 0.0566137566137574*G0_0_0_4_1_0_0_0_1 + 0.0566137566137574*G0_0_0_4_1_0_1_0_0 + 0.0566137566137574*G0_0_0_4_1_0_2_0_1 - 0.0566137566137574*G0_0_0_4_1_0_3_1_0 - 0.0566137566137574*G0_0_0_4_1_0_3_1_1 + 0.0566137566137574*G0_0_0_4_1_0_4_1_0 + 0.0566137566137574*G0_0_0_4_1_0_5_1_1 - 0.0566137566137574*G0_0_0_5_1_1_0_0_0 - 0.0566137566137574*G0_0_0_5_1_1_0_0_1 + 0.0566137566137574*G0_0_0_5_1_1_1_0_0 + 0.0566137566137574*G0_0_0_5_1_1_2_0_1 - 0.0566137566137574*G0_0_0_5_1_1_3_1_0 - 0.0566137566137574*G0_0_0_5_1_1_3_1_1 + 0.0566137566137574*G0_0_0_5_1_1_4_1_0 + 0.0566137566137574*G0_0_0_5_1_1_5_1_1;
    A[2] = -A[497] + 0.0566137566137576*G0_1_1_0_0_0_0_0_0 + 0.0566137566137576*G0_1_1_0_0_0_0_0_1 - 0.0566137566137576*G0_1_1_0_0_0_1_0_0 - 0.0566137566137576*G0_1_1_0_0_0_2_0_1 + 0.0566137566137576*G0_1_1_0_0_0_3_1_0 + 0.0566137566137576*G0_1_1_0_0_0_3_1_1 - 0.0566137566137576*G0_1_1_0_0_0_4_1_0 - 0.0566137566137576*G0_1_1_0_0_0_5_1_1 + 0.0566137566137576*G0_1_1_0_0_1_0_0_0 + 0.0566137566137576*G0_1_1_0_0_1_0_0_1 - 0.0566137566137576*G0_1_1_0_0_1_1_0_0 - 0.0566137566137576*G0_1_1_0_0_1_2_0_1 + 0.0566137566137576*G0_1_1_0_0_1_3_1_0 + 0.0566137566137576*G0_1_1_0_0_1_3_1_1 - 0.0566137566137576*G0_1_1_0_0_1_4_1_0 - 0.0566137566137576*G0_1_1_0_0_1_5_1_1 - 0.0566137566137576*G0_1_1_1_0_0_0_0_0 - 0.0566137566137576*G0_1_1_1_0_0_0_0_1 + 0.0566137566137576*G0_1_1_1_0_0_1_0_0 + 0.0566137566137576*G0_1_1_1_0_0_2_0_1 - 0.0566137566137576*G0_1_1_1_0_0_3_1_0 - 0.0566137566137576*G0_1_1_1_0_0_3_1_1 + 0.0566137566137576*G0_1_1_1_0_0_4_1_0 + 0.0566137566137576*G0_1_1_1_0_0_5_1_1 - 0.0566137566137576*G0_1_1_2_0_1_0_0_0 - 0.0566137566137576*G0_1_1_2_0_1_0_0_1 + 0.0566137566137576*G0_1_1_2_0_1_1_0_0 + 0.0566137566137576*G0_1_1_2_0_1_2_0_1 - 0.0566137566137576*G0_1_1_2_0_1_3_1_0 - 0.0566137566137576*G0_1_1_2_0_1_3_1_1 + 0.0566137566137576*G0_1_1_2_0_1_4_1_0 + 0.0566137566137576*G0_1_1_2_0_1_5_1_1 + 0.0566137566137576*G0_1_1_3_1_0_0_0_0 + 0.0566137566137576*G0_1_1_3_1_0_0_0_1 - 0.0566137566137576*G0_1_1_3_1_0_1_0_0 - 0.0566137566137576*G0_1_1_3_1_0_2_0_1 + 0.0566137566137576*G0_1_1_3_1_0_3_1_0 + 0.0566137566137576*G0_1_1_3_1_0_3_1_1 - 0.0566137566137576*G0_1_1_3_1_0_4_1_0 - 0.0566137566137576*G0_1_1_3_1_0_5_1_1 + 0.0566137566137576*G0_1_1_3_1_1_0_0_0 + 0.0566137566137576*G0_1_1_3_1_1_0_0_1 - 0.0566137566137576*G0_1_1_3_1_1_1_0_0 - 0.0566137566137576*G0_1_1_3_1_1_2_0_1 + 0.0566137566137576*G0_1_1_3_1_1_3_1_0 + 0.0566137566137576*G0_1_1_3_1_1_3_1_1 - 0.0566137566137576*G0_1_1_3_1_1_4_1_0 - 0.0566137566137576*G0_1_1_3_1_1_5_1_1 - 0.0566137566137576*G0_1_1_4_1_0_0_0_0 - 0.0566137566137576*G0_1_1_4_1_0_0_0_1 + 0.0566137566137576*G0_1_1_4_1_0_1_0_0 + 0.0566137566137576*G0_1_1_4_1_0_2_0_1 - 0.0566137566137576*G0_1_1_4_1_0_3_1_0 - 0.0566137566137576*G0_1_1_4_1_0_3_1_1 + 0.0566137566137576*G0_1_1_4_1_0_4_1_0 + 0.0566137566137576*G0_1_1_4_1_0_5_1_1 - 0.0566137566137576*G0_1_1_5_1_1_0_0_0 - 0.0566137566137576*G0_1_1_5_1_1_0_0_1 + 0.0566137566137576*G0_1_1_5_1_1_1_0_0 + 0.0566137566137576*G0_1_1_5_1_1_2_0_1 - 0.0566137566137576*G0_1_1_5_1_1_3_1_0 - 0.0566137566137576*G0_1_1_5_1_1_3_1_1 + 0.0566137566137576*G0_1_1_5_1_1_4_1_0 + 0.0566137566137576*G0_1_1_5_1_1_5_1_1;
    A[650] = A[621];
    A[538] = A[887];
    A[687] = A[367];
    A[567] = A[569];
    A[692] = 0.0;
    A[269] = 0.0;
    A[294] = 0.0;
    A[443] = 0.0;
    A[363] = A[569];
    A[779] = A[314];
    A[472] = A[7];
    A[392] = A[887];
    A[806] = -A[101] + 1.69312169312171*G0_0_0_0_0_0_0_0_0 + 1.69312169312171*G0_0_0_0_0_0_0_0_1 - 1.69312169312171*G0_0_0_0_0_0_1_0_0 - 1.69312169312171*G0_0_0_0_0_0_2_0_1 + 1.69312169312171*G0_0_0_0_0_0_3_1_0 + 1.69312169312171*G0_0_0_0_0_0_3_1_1 - 1.69312169312171*G0_0_0_0_0_0_4_1_0 - 1.69312169312171*G0_0_0_0_0_0_5_1_1 + 1.69312169312171*G0_0_0_0_0_1_0_0_0 + 1.69312169312171*G0_0_0_0_0_1_0_0_1 - 1.69312169312171*G0_0_0_0_0_1_1_0_0 - 1.69312169312171*G0_0_0_0_0_1_2_0_1 + 1.69312169312171*G0_0_0_0_0_1_3_1_0 + 1.69312169312171*G0_0_0_0_0_1_3_1_1 - 1.69312169312171*G0_0_0_0_0_1_4_1_0 - 1.69312169312171*G0_0_0_0_0_1_5_1_1 - 1.69312169312171*G0_0_0_1_0_0_0_0_0 - 1.69312169312171*G0_0_0_1_0_0_0_0_1 + 1.69312169312171*G0_0_0_1_0_0_1_0_0 + 1.69312169312171*G0_0_0_1_0_0_2_0_1 - 1.69312169312171*G0_0_0_1_0_0_3_1_0 - 1.69312169312171*G0_0_0_1_0_0_3_1_1 + 1.69312169312171*G0_0_0_1_0_0_4_1_0 + 1.69312169312171*G0_0_0_1_0_0_5_1_1 - 1.69312169312171*G0_0_0_2_0_1_0_0_0 - 1.69312169312171*G0_0_0_2_0_1_0_0_1 + 1.69312169312171*G0_0_0_2_0_1_1_0_0 + 1.69312169312171*G0_0_0_2_0_1_2_0_1 - 1.69312169312171*G0_0_0_2_0_1_3_1_0 - 1.69312169312171*G0_0_0_2_0_1_3_1_1 + 1.69312169312171*G0_0_0_2_0_1_4_1_0 + 1.69312169312171*G0_0_0_2_0_1_5_1_1 + 1.69312169312171*G0_0_0_3_1_0_0_0_0 + 1.69312169312171*G0_0_0_3_1_0_0_0_1 - 1.69312169312171*G0_0_0_3_1_0_1_0_0 - 1.69312169312171*G0_0_0_3_1_0_2_0_1 + 1.69312169312171*G0_0_0_3_1_0_3_1_0 + 1.69312169312171*G0_0_0_3_1_0_3_1_1 - 1.69312169312171*G0_0_0_3_1_0_4_1_0 - 1.69312169312171*G0_0_0_3_1_0_5_1_1 + 1.69312169312171*G0_0_0_3_1_1_0_0_0 + 1.69312169312171*G0_0_0_3_1_1_0_0_1 - 1.69312169312171*G0_0_0_3_1_1_1_0_0 - 1.69312169312171*G0_0_0_3_1_1_2_0_1 + 1.69312169312171*G0_0_0_3_1_1_3_1_0 + 1.69312169312171*G0_0_0_3_1_1_3_1_1 - 1.69312169312171*G0_0_0_3_1_1_4_1_0 - 1.69312169312171*G0_0_0_3_1_1_5_1_1 - 1.69312169312171*G0_0_0_4_1_0_0_0_0 - 1.69312169312171*G0_0_0_4_1_0_0_0_1 + 1.69312169312171*G0_0_0_4_1_0_1_0_0 + 1.69312169312171*G0_0_0_4_1_0_2_0_1 - 1.69312169312171*G0_0_0_4_1_0_3_1_0 - 1.69312169312171*G0_0_0_4_1_0_3_1_1 + 1.69312169312171*G0_0_0_4_1_0_4_1_0 + 1.69312169312171*G0_0_0_4_1_0_5_1_1 - 1.69312169312171*G0_0_0_5_1_1_0_0_0 - 1.69312169312171*G0_0_0_5_1_1_0_0_1 + 1.69312169312171*G0_0_0_5_1_1_1_0_0 + 1.69312169312171*G0_0_0_5_1_1_2_0_1 - 1.69312169312171*G0_0_0_5_1_1_3_1_0 - 1.69312169312171*G0_0_0_5_1_1_3_1_1 + 1.69312169312171*G0_0_0_5_1_1_4_1_0 + 1.69312169312171*G0_0_0_5_1_1_5_1_1;
    A[25] = 0.0;
    A[726] = 0.0;
    A[385] = 0.0;
    A[829] = A[132];
    A[34] = A[181] - 0.42539682539683*G0_0_1_0_0_0_0_0_0 - 0.42539682539683*G0_0_1_0_0_0_0_0_1 + 0.42539682539683*G0_0_1_0_0_0_1_0_0 + 0.42539682539683*G0_0_1_0_0_0_2_0_1 - 0.42539682539683*G0_0_1_0_0_0_3_1_0 - 0.42539682539683*G0_0_1_0_0_0_3_1_1 + 0.42539682539683*G0_0_1_0_0_0_4_1_0 + 0.42539682539683*G0_0_1_0_0_0_5_1_1 - 0.42539682539683*G0_0_1_0_0_1_0_0_0 - 0.42539682539683*G0_0_1_0_0_1_0_0_1 + 0.42539682539683*G0_0_1_0_0_1_1_0_0 + 0.42539682539683*G0_0_1_0_0_1_2_0_1 - 0.42539682539683*G0_0_1_0_0_1_3_1_0 - 0.42539682539683*G0_0_1_0_0_1_3_1_1 + 0.42539682539683*G0_0_1_0_0_1_4_1_0 + 0.42539682539683*G0_0_1_0_0_1_5_1_1 + 0.42539682539683*G0_0_1_1_0_0_0_0_0 + 0.42539682539683*G0_0_1_1_0_0_0_0_1 - 0.42539682539683*G0_0_1_1_0_0_1_0_0 - 0.42539682539683*G0_0_1_1_0_0_2_0_1 + 0.42539682539683*G0_0_1_1_0_0_3_1_0 + 0.42539682539683*G0_0_1_1_0_0_3_1_1 - 0.42539682539683*G0_0_1_1_0_0_4_1_0 - 0.42539682539683*G0_0_1_1_0_0_5_1_1 + 0.42539682539683*G0_0_1_2_0_1_0_0_0 + 0.42539682539683*G0_0_1_2_0_1_0_0_1 - 0.42539682539683*G0_0_1_2_0_1_1_0_0 - 0.42539682539683*G0_0_1_2_0_1_2_0_1 + 0.42539682539683*G0_0_1_2_0_1_3_1_0 + 0.42539682539683*G0_0_1_2_0_1_3_1_1 - 0.42539682539683*G0_0_1_2_0_1_4_1_0 - 0.42539682539683*G0_0_1_2_0_1_5_1_1 - 0.42539682539683*G0_0_1_3_1_0_0_0_0 - 0.42539682539683*G0_0_1_3_1_0_0_0_1 + 0.42539682539683*G0_0_1_3_1_0_1_0_0 + 0.42539682539683*G0_0_1_3_1_0_2_0_1 - 0.42539682539683*G0_0_1_3_1_0_3_1_0 - 0.42539682539683*G0_0_1_3_1_0_3_1_1 + 0.42539682539683*G0_0_1_3_1_0_4_1_0 + 0.42539682539683*G0_0_1_3_1_0_5_1_1 - 0.42539682539683*G0_0_1_3_1_1_0_0_0 - 0.42539682539683*G0_0_1_3_1_1_0_0_1 + 0.42539682539683*G0_0_1_3_1_1_1_0_0 + 0.42539682539683*G0_0_1_3_1_1_2_0_1 - 0.42539682539683*G0_0_1_3_1_1_3_1_0 - 0.42539682539683*G0_0_1_3_1_1_3_1_1 + 0.42539682539683*G0_0_1_3_1_1_4_1_0 + 0.42539682539683*G0_0_1_3_1_1_5_1_1 + 0.42539682539683*G0_0_1_4_1_0_0_0_0 + 0.42539682539683*G0_0_1_4_1_0_0_0_1 - 0.42539682539683*G0_0_1_4_1_0_1_0_0 - 0.42539682539683*G0_0_1_4_1_0_2_0_1 + 0.42539682539683*G0_0_1_4_1_0_3_1_0 + 0.42539682539683*G0_0_1_4_1_0_3_1_1 - 0.42539682539683*G0_0_1_4_1_0_4_1_0 - 0.42539682539683*G0_0_1_4_1_0_5_1_1 + 0.42539682539683*G0_0_1_5_1_1_0_0_0 + 0.42539682539683*G0_0_1_5_1_1_0_0_1 - 0.42539682539683*G0_0_1_5_1_1_1_0_0 - 0.42539682539683*G0_0_1_5_1_1_2_0_1 + 0.42539682539683*G0_0_1_5_1_1_3_1_0 + 0.42539682539683*G0_0_1_5_1_1_3_1_1 - 0.42539682539683*G0_0_1_5_1_1_4_1_0 - 0.42539682539683*G0_0_1_5_1_1_5_1_1;
    A[40] = -A[34] + 0.510052910052917*G0_0_0_0_0_0_0_0_0 + 0.510052910052917*G0_0_0_0_0_0_0_0_1 - 0.510052910052917*G0_0_0_0_0_0_1_0_0 - 0.510052910052917*G0_0_0_0_0_0_2_0_1 + 0.510052910052917*G0_0_0_0_0_0_3_1_0 + 0.510052910052917*G0_0_0_0_0_0_3_1_1 - 0.510052910052917*G0_0_0_0_0_0_4_1_0 - 0.510052910052917*G0_0_0_0_0_0_5_1_1 + 0.510052910052917*G0_0_0_0_0_1_0_0_0 + 0.510052910052917*G0_0_0_0_0_1_0_0_1 - 0.510052910052917*G0_0_0_0_0_1_1_0_0 - 0.510052910052917*G0_0_0_0_0_1_2_0_1 + 0.510052910052917*G0_0_0_0_0_1_3_1_0 + 0.510052910052917*G0_0_0_0_0_1_3_1_1 - 0.510052910052917*G0_0_0_0_0_1_4_1_0 - 0.510052910052917*G0_0_0_0_0_1_5_1_1 - 0.510052910052917*G0_0_0_1_0_0_0_0_0 - 0.510052910052917*G0_0_0_1_0_0_0_0_1 + 0.510052910052917*G0_0_0_1_0_0_1_0_0 + 0.510052910052917*G0_0_0_1_0_0_2_0_1 - 0.510052910052917*G0_0_0_1_0_0_3_1_0 - 0.510052910052917*G0_0_0_1_0_0_3_1_1 + 0.510052910052917*G0_0_0_1_0_0_4_1_0 + 0.510052910052917*G0_0_0_1_0_0_5_1_1 - 0.510052910052917*G0_0_0_2_0_1_0_0_0 - 0.510052910052917*G0_0_0_2_0_1_0_0_1 + 0.510052910052917*G0_0_0_2_0_1_1_0_0 + 0.510052910052917*G0_0_0_2_0_1_2_0_1 - 0.510052910052917*G0_0_0_2_0_1_3_1_0 - 0.510052910052917*G0_0_0_2_0_1_3_1_1 + 0.510052910052917*G0_0_0_2_0_1_4_1_0 + 0.510052910052917*G0_0_0_2_0_1_5_1_1 + 0.510052910052917*G0_0_0_3_1_0_0_0_0 + 0.510052910052917*G0_0_0_3_1_0_0_0_1 - 0.510052910052917*G0_0_0_3_1_0_1_0_0 - 0.510052910052917*G0_0_0_3_1_0_2_0_1 + 0.510052910052917*G0_0_0_3_1_0_3_1_0 + 0.510052910052917*G0_0_0_3_1_0_3_1_1 - 0.510052910052917*G0_0_0_3_1_0_4_1_0 - 0.510052910052917*G0_0_0_3_1_0_5_1_1 + 0.510052910052917*G0_0_0_3_1_1_0_0_0 + 0.510052910052917*G0_0_0_3_1_1_0_0_1 - 0.510052910052917*G0_0_0_3_1_1_1_0_0 - 0.510052910052917*G0_0_0_3_1_1_2_0_1 + 0.510052910052917*G0_0_0_3_1_1_3_1_0 + 0.510052910052917*G0_0_0_3_1_1_3_1_1 - 0.510052910052917*G0_0_0_3_1_1_4_1_0 - 0.510052910052917*G0_0_0_3_1_1_5_1_1 - 0.510052910052917*G0_0_0_4_1_0_0_0_0 - 0.510052910052917*G0_0_0_4_1_0_0_0_1 + 0.510052910052917*G0_0_0_4_1_0_1_0_0 + 0.510052910052917*G0_0_0_4_1_0_2_0_1 - 0.510052910052917*G0_0_0_4_1_0_3_1_0 - 0.510052910052917*G0_0_0_4_1_0_3_1_1 + 0.510052910052917*G0_0_0_4_1_0_4_1_0 + 0.510052910052917*G0_0_0_4_1_0_5_1_1 - 0.510052910052917*G0_0_0_5_1_1_0_0_0 - 0.510052910052917*G0_0_0_5_1_1_0_0_1 + 0.510052910052917*G0_0_0_5_1_1_1_0_0 + 0.510052910052917*G0_0_0_5_1_1_2_0_1 - 0.510052910052917*G0_0_0_5_1_1_3_1_0 - 0.510052910052917*G0_0_0_5_1_1_3_1_1 + 0.510052910052917*G0_0_0_5_1_1_4_1_0 + 0.510052910052917*G0_0_0_5_1_1_5_1_1;
    A[757] = 0.0;
    A[418] = 0.0;
    A[860] = A[628];
    A[63] = -A[534] + 0.203174603174605*G0_1_0_0_0_0_0_0_0 + 0.203174603174605*G0_1_0_0_0_0_0_0_1 - 0.203174603174605*G0_1_0_0_0_0_1_0_0 - 0.203174603174605*G0_1_0_0_0_0_2_0_1 + 0.203174603174605*G0_1_0_0_0_0_3_1_0 + 0.203174603174605*G0_1_0_0_0_0_3_1_1 - 0.203174603174605*G0_1_0_0_0_0_4_1_0 - 0.203174603174605*G0_1_0_0_0_0_5_1_1 + 0.203174603174605*G0_1_0_0_0_1_0_0_0 + 0.203174603174605*G0_1_0_0_0_1_0_0_1 - 0.203174603174605*G0_1_0_0_0_1_1_0_0 - 0.203174603174605*G0_1_0_0_0_1_2_0_1 + 0.203174603174605*G0_1_0_0_0_1_3_1_0 + 0.203174603174605*G0_1_0_0_0_1_3_1_1 - 0.203174603174605*G0_1_0_0_0_1_4_1_0 - 0.203174603174605*G0_1_0_0_0_1_5_1_1 - 0.203174603174605*G0_1_0_1_0_0_0_0_0 - 0.203174603174605*G0_1_0_1_0_0_0_0_1 + 0.203174603174605*G0_1_0_1_0_0_1_0_0 + 0.203174603174605*G0_1_0_1_0_0_2_0_1 - 0.203174603174605*G0_1_0_1_0_0_3_1_0 - 0.203174603174605*G0_1_0_1_0_0_3_1_1 + 0.203174603174605*G0_1_0_1_0_0_4_1_0 + 0.203174603174605*G0_1_0_1_0_0_5_1_1 - 0.203174603174605*G0_1_0_2_0_1_0_0_0 - 0.203174603174605*G0_1_0_2_0_1_0_0_1 + 0.203174603174605*G0_1_0_2_0_1_1_0_0 + 0.203174603174605*G0_1_0_2_0_1_2_0_1 - 0.203174603174605*G0_1_0_2_0_1_3_1_0 - 0.203174603174605*G0_1_0_2_0_1_3_1_1 + 0.203174603174605*G0_1_0_2_0_1_4_1_0 + 0.203174603174605*G0_1_0_2_0_1_5_1_1 + 0.203174603174605*G0_1_0_3_1_0_0_0_0 + 0.203174603174605*G0_1_0_3_1_0_0_0_1 - 0.203174603174605*G0_1_0_3_1_0_1_0_0 - 0.203174603174605*G0_1_0_3_1_0_2_0_1 + 0.203174603174605*G0_1_0_3_1_0_3_1_0 + 0.203174603174605*G0_1_0_3_1_0_3_1_1 - 0.203174603174605*G0_1_0_3_1_0_4_1_0 - 0.203174603174605*G0_1_0_3_1_0_5_1_1 + 0.203174603174605*G0_1_0_3_1_1_0_0_0 + 0.203174603174605*G0_1_0_3_1_1_0_0_1 - 0.203174603174605*G0_1_0_3_1_1_1_0_0 - 0.203174603174605*G0_1_0_3_1_1_2_0_1 + 0.203174603174605*G0_1_0_3_1_1_3_1_0 + 0.203174603174605*G0_1_0_3_1_1_3_1_1 - 0.203174603174605*G0_1_0_3_1_1_4_1_0 - 0.203174603174605*G0_1_0_3_1_1_5_1_1 - 0.203174603174605*G0_1_0_4_1_0_0_0_0 - 0.203174603174605*G0_1_0_4_1_0_0_0_1 + 0.203174603174605*G0_1_0_4_1_0_1_0_0 + 0.203174603174605*G0_1_0_4_1_0_2_0_1 - 0.203174603174605*G0_1_0_4_1_0_3_1_0 - 0.203174603174605*G0_1_0_4_1_0_3_1_1 + 0.203174603174605*G0_1_0_4_1_0_4_1_0 + 0.203174603174605*G0_1_0_4_1_0_5_1_1 - 0.203174603174605*G0_1_0_5_1_1_0_0_0 - 0.203174603174605*G0_1_0_5_1_1_0_0_1 + 0.203174603174605*G0_1_0_5_1_1_1_0_0 + 0.203174603174605*G0_1_0_5_1_1_2_0_1 - 0.203174603174605*G0_1_0_5_1_1_3_1_0 - 0.203174603174605*G0_1_0_5_1_1_3_1_1 + 0.203174603174605*G0_1_0_5_1_1_4_1_0 + 0.203174603174605*G0_1_0_5_1_1_5_1_1;
    A[784] = 0.0;
    A[895] = A[314];
    A[116] = 0.0;
    A[819] = 0.0;
    A[185] = A[621];
    A[149] = 0.0;
    A[210] = A[5] + 0.425396825396829*G0_1_0_0_0_0_0_0_0 + 0.425396825396829*G0_1_0_0_0_0_0_0_1 - 0.425396825396829*G0_1_0_0_0_0_1_0_0 - 0.425396825396829*G0_1_0_0_0_0_2_0_1 + 0.425396825396829*G0_1_0_0_0_0_3_1_0 + 0.425396825396829*G0_1_0_0_0_0_3_1_1 - 0.425396825396829*G0_1_0_0_0_0_4_1_0 - 0.425396825396829*G0_1_0_0_0_0_5_1_1 + 0.425396825396829*G0_1_0_0_0_1_0_0_0 + 0.425396825396829*G0_1_0_0_0_1_0_0_1 - 0.425396825396829*G0_1_0_0_0_1_1_0_0 - 0.425396825396829*G0_1_0_0_0_1_2_0_1 + 0.425396825396829*G0_1_0_0_0_1_3_1_0 + 0.425396825396829*G0_1_0_0_0_1_3_1_1 - 0.425396825396829*G0_1_0_0_0_1_4_1_0 - 0.425396825396829*G0_1_0_0_0_1_5_1_1 - 0.425396825396829*G0_1_0_1_0_0_0_0_0 - 0.425396825396829*G0_1_0_1_0_0_0_0_1 + 0.425396825396829*G0_1_0_1_0_0_1_0_0 + 0.425396825396829*G0_1_0_1_0_0_2_0_1 - 0.425396825396829*G0_1_0_1_0_0_3_1_0 - 0.425396825396829*G0_1_0_1_0_0_3_1_1 + 0.425396825396829*G0_1_0_1_0_0_4_1_0 + 0.425396825396829*G0_1_0_1_0_0_5_1_1 - 0.425396825396829*G0_1_0_2_0_1_0_0_0 - 0.425396825396829*G0_1_0_2_0_1_0_0_1 + 0.425396825396829*G0_1_0_2_0_1_1_0_0 + 0.425396825396829*G0_1_0_2_0_1_2_0_1 - 0.425396825396829*G0_1_0_2_0_1_3_1_0 - 0.425396825396829*G0_1_0_2_0_1_3_1_1 + 0.425396825396829*G0_1_0_2_0_1_4_1_0 + 0.425396825396829*G0_1_0_2_0_1_5_1_1 + 0.425396825396829*G0_1_0_3_1_0_0_0_0 + 0.425396825396829*G0_1_0_3_1_0_0_0_1 - 0.425396825396829*G0_1_0_3_1_0_1_0_0 - 0.425396825396829*G0_1_0_3_1_0_2_0_1 + 0.425396825396829*G0_1_0_3_1_0_3_1_0 + 0.425396825396829*G0_1_0_3_1_0_3_1_1 - 0.425396825396829*G0_1_0_3_1_0_4_1_0 - 0.425396825396829*G0_1_0_3_1_0_5_1_1 + 0.425396825396829*G0_1_0_3_1_1_0_0_0 + 0.425396825396829*G0_1_0_3_1_1_0_0_1 - 0.425396825396829*G0_1_0_3_1_1_1_0_0 - 0.425396825396829*G0_1_0_3_1_1_2_0_1 + 0.425396825396829*G0_1_0_3_1_1_3_1_0 + 0.425396825396829*G0_1_0_3_1_1_3_1_1 - 0.425396825396829*G0_1_0_3_1_1_4_1_0 - 0.425396825396829*G0_1_0_3_1_1_5_1_1 - 0.425396825396829*G0_1_0_4_1_0_0_0_0 - 0.425396825396829*G0_1_0_4_1_0_0_0_1 + 0.425396825396829*G0_1_0_4_1_0_1_0_0 + 0.425396825396829*G0_1_0_4_1_0_2_0_1 - 0.425396825396829*G0_1_0_4_1_0_3_1_0 - 0.425396825396829*G0_1_0_4_1_0_3_1_1 + 0.425396825396829*G0_1_0_4_1_0_4_1_0 + 0.425396825396829*G0_1_0_4_1_0_5_1_1 - 0.425396825396829*G0_1_0_5_1_1_0_0_0 - 0.425396825396829*G0_1_0_5_1_1_0_0_1 + 0.425396825396829*G0_1_0_5_1_1_1_0_0 + 0.425396825396829*G0_1_0_5_1_1_2_0_1 - 0.425396825396829*G0_1_0_5_1_1_3_1_0 - 0.425396825396829*G0_1_0_5_1_1_3_1_1 + 0.425396825396829*G0_1_0_5_1_1_4_1_0 + 0.425396825396829*G0_1_0_5_1_1_5_1_1 + 0.425396825396829*G0_1_1_0_0_0_0_0_0 + 0.425396825396829*G0_1_1_0_0_0_0_0_1 - 0.425396825396829*G0_1_1_0_0_0_1_0_0 - 0.425396825396829*G0_1_1_0_0_0_2_0_1 + 0.425396825396829*G0_1_1_0_0_0_3_1_0 + 0.425396825396829*G0_1_1_0_0_0_3_1_1 - 0.425396825396829*G0_1_1_0_0_0_4_1_0 - 0.425396825396829*G0_1_1_0_0_0_5_1_1 + 0.425396825396829*G0_1_1_0_0_1_0_0_0 + 0.425396825396829*G0_1_1_0_0_1_0_0_1 - 0.425396825396829*G0_1_1_0_0_1_1_0_0 - 0.425396825396829*G0_1_1_0_0_1_2_0_1 + 0.425396825396829*G0_1_1_0_0_1_3_1_0 + 0.425396825396829*G0_1_1_0_0_1_3_1_1 - 0.425396825396829*G0_1_1_0_0_1_4_1_0 - 0.425396825396829*G0_1_1_0_0_1_5_1_1 - 0.425396825396829*G0_1_1_1_0_0_0_0_0 - 0.425396825396829*G0_1_1_1_0_0_0_0_1 + 0.425396825396829*G0_1_1_1_0_0_1_0_0 + 0.425396825396829*G0_1_1_1_0_0_2_0_1 - 0.425396825396829*G0_1_1_1_0_0_3_1_0 - 0.425396825396829*G0_1_1_1_0_0_3_1_1 + 0.425396825396829*G0_1_1_1_0_0_4_1_0 + 0.425396825396829*G0_1_1_1_0_0_5_1_1 - 0.425396825396829*G0_1_1_2_0_1_0_0_0 - 0.425396825396829*G0_1_1_2_0_1_0_0_1 + 0.425396825396829*G0_1_1_2_0_1_1_0_0 + 0.425396825396829*G0_1_1_2_0_1_2_0_1 - 0.425396825396829*G0_1_1_2_0_1_3_1_0 - 0.425396825396829*G0_1_1_2_0_1_3_1_1 + 0.425396825396829*G0_1_1_2_0_1_4_1_0 + 0.425396825396829*G0_1_1_2_0_1_5_1_1 + 0.425396825396829*G0_1_1_3_1_0_0_0_0 + 0.425396825396829*G0_1_1_3_1_0_0_0_1 - 0.425396825396829*G0_1_1_3_1_0_1_0_0 - 0.425396825396829*G0_1_1_3_1_0_2_0_1 + 0.425396825396829*G0_1_1_3_1_0_3_1_0 + 0.425396825396829*G0_1_1_3_1_0_3_1_1 - 0.425396825396829*G0_1_1_3_1_0_4_1_0 - 0.425396825396829*G0_1_1_3_1_0_5_1_1 + 0.425396825396829*G0_1_1_3_1_1_0_0_0 + 0.425396825396829*G0_1_1_3_1_1_0_0_1 - 0.425396825396829*G0_1_1_3_1_1_1_0_0 - 0.425396825396829*G0_1_1_3_1_1_2_0_1 + 0.425396825396829*G0_1_1_3_1_1_3_1_0 + 0.425396825396829*G0_1_1_3_1_1_3_1_1 - 0.425396825396829*G0_1_1_3_1_1_4_1_0 - 0.425396825396829*G0_1_1_3_1_1_5_1_1 - 0.425396825396829*G0_1_1_4_1_0_0_0_0 - 0.425396825396829*G0_1_1_4_1_0_0_0_1 + 0.425396825396829*G0_1_1_4_1_0_1_0_0 + 0.425396825396829*G0_1_1_4_1_0_2_0_1 - 0.425396825396829*G0_1_1_4_1_0_3_1_0 - 0.425396825396829*G0_1_1_4_1_0_3_1_1 + 0.425396825396829*G0_1_1_4_1_0_4_1_0 + 0.425396825396829*G0_1_1_4_1_0_5_1_1 - 0.425396825396829*G0_1_1_5_1_1_0_0_0 - 0.425396825396829*G0_1_1_5_1_1_0_0_1 + 0.425396825396829*G0_1_1_5_1_1_1_0_0 + 0.425396825396829*G0_1_1_5_1_1_2_0_1 - 0.425396825396829*G0_1_1_5_1_1_3_1_0 - 0.425396825396829*G0_1_1_5_1_1_3_1_1 + 0.425396825396829*G0_1_1_5_1_1_4_1_0 + 0.425396825396829*G0_1_1_5_1_1_5_1_1;
    A[166] = 0.0;
    A[624] = -A[716] - 0.203174603174612*G0_1_1_0_0_0_0_0_0 - 0.203174603174612*G0_1_1_0_0_0_0_0_1 + 0.203174603174612*G0_1_1_0_0_0_1_0_0 + 0.203174603174612*G0_1_1_0_0_0_2_0_1 - 0.203174603174612*G0_1_1_0_0_0_3_1_0 - 0.203174603174612*G0_1_1_0_0_0_3_1_1 + 0.203174603174612*G0_1_1_0_0_0_4_1_0 + 0.203174603174612*G0_1_1_0_0_0_5_1_1 - 0.203174603174612*G0_1_1_0_0_1_0_0_0 - 0.203174603174612*G0_1_1_0_0_1_0_0_1 + 0.203174603174612*G0_1_1_0_0_1_1_0_0 + 0.203174603174612*G0_1_1_0_0_1_2_0_1 - 0.203174603174612*G0_1_1_0_0_1_3_1_0 - 0.203174603174612*G0_1_1_0_0_1_3_1_1 + 0.203174603174612*G0_1_1_0_0_1_4_1_0 + 0.203174603174612*G0_1_1_0_0_1_5_1_1 + 0.203174603174612*G0_1_1_1_0_0_0_0_0 + 0.203174603174612*G0_1_1_1_0_0_0_0_1 - 0.203174603174612*G0_1_1_1_0_0_1_0_0 - 0.203174603174612*G0_1_1_1_0_0_2_0_1 + 0.203174603174612*G0_1_1_1_0_0_3_1_0 + 0.203174603174612*G0_1_1_1_0_0_3_1_1 - 0.203174603174612*G0_1_1_1_0_0_4_1_0 - 0.203174603174612*G0_1_1_1_0_0_5_1_1 + 0.203174603174612*G0_1_1_2_0_1_0_0_0 + 0.203174603174612*G0_1_1_2_0_1_0_0_1 - 0.203174603174612*G0_1_1_2_0_1_1_0_0 - 0.203174603174612*G0_1_1_2_0_1_2_0_1 + 0.203174603174612*G0_1_1_2_0_1_3_1_0 + 0.203174603174612*G0_1_1_2_0_1_3_1_1 - 0.203174603174612*G0_1_1_2_0_1_4_1_0 - 0.203174603174612*G0_1_1_2_0_1_5_1_1 - 0.203174603174612*G0_1_1_3_1_0_0_0_0 - 0.203174603174612*G0_1_1_3_1_0_0_0_1 + 0.203174603174612*G0_1_1_3_1_0_1_0_0 + 0.203174603174612*G0_1_1_3_1_0_2_0_1 - 0.203174603174612*G0_1_1_3_1_0_3_1_0 - 0.203174603174612*G0_1_1_3_1_0_3_1_1 + 0.203174603174612*G0_1_1_3_1_0_4_1_0 + 0.203174603174612*G0_1_1_3_1_0_5_1_1 - 0.203174603174612*G0_1_1_3_1_1_0_0_0 - 0.203174603174612*G0_1_1_3_1_1_0_0_1 + 0.203174603174612*G0_1_1_3_1_1_1_0_0 + 0.203174603174612*G0_1_1_3_1_1_2_0_1 - 0.203174603174612*G0_1_1_3_1_1_3_1_0 - 0.203174603174612*G0_1_1_3_1_1_3_1_1 + 0.203174603174612*G0_1_1_3_1_1_4_1_0 + 0.203174603174612*G0_1_1_3_1_1_5_1_1 + 0.203174603174612*G0_1_1_4_1_0_0_0_0 + 0.203174603174612*G0_1_1_4_1_0_0_0_1 - 0.203174603174612*G0_1_1_4_1_0_1_0_0 - 0.203174603174612*G0_1_1_4_1_0_2_0_1 + 0.203174603174612*G0_1_1_4_1_0_3_1_0 + 0.203174603174612*G0_1_1_4_1_0_3_1_1 - 0.203174603174612*G0_1_1_4_1_0_4_1_0 - 0.203174603174612*G0_1_1_4_1_0_5_1_1 + 0.203174603174612*G0_1_1_5_1_1_0_0_0 + 0.203174603174612*G0_1_1_5_1_1_0_0_1 - 0.203174603174612*G0_1_1_5_1_1_1_0_0 - 0.203174603174612*G0_1_1_5_1_1_2_0_1 + 0.203174603174612*G0_1_1_5_1_1_3_1_0 + 0.203174603174612*G0_1_1_5_1_1_3_1_1 - 0.203174603174612*G0_1_1_5_1_1_4_1_0 - 0.203174603174612*G0_1_1_5_1_1_5_1_1;
    A[488] = 0.0;
    A[659] = A[658];
    A[575] = 0.0;
    A[531] = -A[63] - 0.287830687830693*G0_1_1_0_0_0_0_0_0 - 0.287830687830693*G0_1_1_0_0_0_0_0_1 + 0.287830687830693*G0_1_1_0_0_0_1_0_0 + 0.287830687830693*G0_1_1_0_0_0_2_0_1 - 0.287830687830693*G0_1_1_0_0_0_3_1_0 - 0.287830687830693*G0_1_1_0_0_0_3_1_1 + 0.287830687830693*G0_1_1_0_0_0_4_1_0 + 0.287830687830693*G0_1_1_0_0_0_5_1_1 - 0.287830687830693*G0_1_1_0_0_1_0_0_0 - 0.287830687830693*G0_1_1_0_0_1_0_0_1 + 0.287830687830693*G0_1_1_0_0_1_1_0_0 + 0.287830687830693*G0_1_1_0_0_1_2_0_1 - 0.287830687830693*G0_1_1_0_0_1_3_1_0 - 0.287830687830693*G0_1_1_0_0_1_3_1_1 + 0.287830687830693*G0_1_1_0_0_1_4_1_0 + 0.287830687830693*G0_1_1_0_0_1_5_1_1 + 0.287830687830693*G0_1_1_1_0_0_0_0_0 + 0.287830687830693*G0_1_1_1_0_0_0_0_1 - 0.287830687830693*G0_1_1_1_0_0_1_0_0 - 0.287830687830693*G0_1_1_1_0_0_2_0_1 + 0.287830687830693*G0_1_1_1_0_0_3_1_0 + 0.287830687830693*G0_1_1_1_0_0_3_1_1 - 0.287830687830693*G0_1_1_1_0_0_4_1_0 - 0.287830687830693*G0_1_1_1_0_0_5_1_1 + 0.287830687830693*G0_1_1_2_0_1_0_0_0 + 0.287830687830693*G0_1_1_2_0_1_0_0_1 - 0.287830687830693*G0_1_1_2_0_1_1_0_0 - 0.287830687830693*G0_1_1_2_0_1_2_0_1 + 0.287830687830693*G0_1_1_2_0_1_3_1_0 + 0.287830687830693*G0_1_1_2_0_1_3_1_1 - 0.287830687830693*G0_1_1_2_0_1_4_1_0 - 0.287830687830693*G0_1_1_2_0_1_5_1_1 - 0.287830687830693*G0_1_1_3_1_0_0_0_0 - 0.287830687830693*G0_1_1_3_1_0_0_0_1 + 0.287830687830693*G0_1_1_3_1_0_1_0_0 + 0.287830687830693*G0_1_1_3_1_0_2_0_1 - 0.287830687830693*G0_1_1_3_1_0_3_1_0 - 0.287830687830693*G0_1_1_3_1_0_3_1_1 + 0.287830687830693*G0_1_1_3_1_0_4_1_0 + 0.287830687830693*G0_1_1_3_1_0_5_1_1 - 0.287830687830693*G0_1_1_3_1_1_0_0_0 - 0.287830687830693*G0_1_1_3_1_1_0_0_1 + 0.287830687830693*G0_1_1_3_1_1_1_0_0 + 0.287830687830693*G0_1_1_3_1_1_2_0_1 - 0.287830687830693*G0_1_1_3_1_1_3_1_0 - 0.287830687830693*G0_1_1_3_1_1_3_1_1 + 0.287830687830693*G0_1_1_3_1_1_4_1_0 + 0.287830687830693*G0_1_1_3_1_1_5_1_1 + 0.287830687830693*G0_1_1_4_1_0_0_0_0 + 0.287830687830693*G0_1_1_4_1_0_0_0_1 - 0.287830687830693*G0_1_1_4_1_0_1_0_0 - 0.287830687830693*G0_1_1_4_1_0_2_0_1 + 0.287830687830693*G0_1_1_4_1_0_3_1_0 + 0.287830687830693*G0_1_1_4_1_0_3_1_1 - 0.287830687830693*G0_1_1_4_1_0_4_1_0 - 0.287830687830693*G0_1_1_4_1_0_5_1_1 + 0.287830687830693*G0_1_1_5_1_1_0_0_0 + 0.287830687830693*G0_1_1_5_1_1_0_0_1 - 0.287830687830693*G0_1_1_5_1_1_1_0_0 - 0.287830687830693*G0_1_1_5_1_1_2_0_1 + 0.287830687830693*G0_1_1_5_1_1_3_1_0 + 0.287830687830693*G0_1_1_5_1_1_3_1_1 - 0.287830687830693*G0_1_1_5_1_1_4_1_0 - 0.287830687830693*G0_1_1_5_1_1_5_1_1;
    A[678] = A[213];
    A[606] = 0.0;
    A[558] = A[806];
    A[717] = A[252];
    A[637] = 0.0;
    A[244] = A[709];
    A[271] = A[736];
    A[306] = A[219] + 0.169312169312181*G0_0_0_0_0_0_0_0_0 + 0.169312169312181*G0_0_0_0_0_0_0_0_1 - 0.169312169312181*G0_0_0_0_0_0_1_0_0 - 0.169312169312181*G0_0_0_0_0_0_2_0_1 + 0.169312169312181*G0_0_0_0_0_0_3_1_0 + 0.169312169312181*G0_0_0_0_0_0_3_1_1 - 0.169312169312181*G0_0_0_0_0_0_4_1_0 - 0.169312169312181*G0_0_0_0_0_0_5_1_1 + 0.169312169312181*G0_0_0_0_0_1_0_0_0 + 0.169312169312181*G0_0_0_0_0_1_0_0_1 - 0.169312169312181*G0_0_0_0_0_1_1_0_0 - 0.169312169312181*G0_0_0_0_0_1_2_0_1 + 0.169312169312181*G0_0_0_0_0_1_3_1_0 + 0.169312169312181*G0_0_0_0_0_1_3_1_1 - 0.169312169312181*G0_0_0_0_0_1_4_1_0 - 0.169312169312181*G0_0_0_0_0_1_5_1_1 - 0.169312169312181*G0_0_0_1_0_0_0_0_0 - 0.169312169312181*G0_0_0_1_0_0_0_0_1 + 0.169312169312181*G0_0_0_1_0_0_1_0_0 + 0.169312169312181*G0_0_0_1_0_0_2_0_1 - 0.169312169312181*G0_0_0_1_0_0_3_1_0 - 0.169312169312181*G0_0_0_1_0_0_3_1_1 + 0.169312169312181*G0_0_0_1_0_0_4_1_0 + 0.169312169312181*G0_0_0_1_0_0_5_1_1 - 0.169312169312181*G0_0_0_2_0_1_0_0_0 - 0.169312169312181*G0_0_0_2_0_1_0_0_1 + 0.169312169312181*G0_0_0_2_0_1_1_0_0 + 0.169312169312181*G0_0_0_2_0_1_2_0_1 - 0.169312169312181*G0_0_0_2_0_1_3_1_0 - 0.169312169312181*G0_0_0_2_0_1_3_1_1 + 0.169312169312181*G0_0_0_2_0_1_4_1_0 + 0.169312169312181*G0_0_0_2_0_1_5_1_1 + 0.169312169312181*G0_0_0_3_1_0_0_0_0 + 0.169312169312181*G0_0_0_3_1_0_0_0_1 - 0.169312169312181*G0_0_0_3_1_0_1_0_0 - 0.169312169312181*G0_0_0_3_1_0_2_0_1 + 0.169312169312181*G0_0_0_3_1_0_3_1_0 + 0.169312169312181*G0_0_0_3_1_0_3_1_1 - 0.169312169312181*G0_0_0_3_1_0_4_1_0 - 0.169312169312181*G0_0_0_3_1_0_5_1_1 + 0.169312169312181*G0_0_0_3_1_1_0_0_0 + 0.169312169312181*G0_0_0_3_1_1_0_0_1 - 0.169312169312181*G0_0_0_3_1_1_1_0_0 - 0.169312169312181*G0_0_0_3_1_1_2_0_1 + 0.169312169312181*G0_0_0_3_1_1_3_1_0 + 0.169312169312181*G0_0_0_3_1_1_3_1_1 - 0.169312169312181*G0_0_0_3_1_1_4_1_0 - 0.169312169312181*G0_0_0_3_1_1_5_1_1 - 0.169312169312181*G0_0_0_4_1_0_0_0_0 - 0.169312169312181*G0_0_0_4_1_0_0_0_1 + 0.169312169312181*G0_0_0_4_1_0_1_0_0 + 0.169312169312181*G0_0_0_4_1_0_2_0_1 - 0.169312169312181*G0_0_0_4_1_0_3_1_0 - 0.169312169312181*G0_0_0_4_1_0_3_1_1 + 0.169312169312181*G0_0_0_4_1_0_4_1_0 + 0.169312169312181*G0_0_0_4_1_0_5_1_1 - 0.169312169312181*G0_0_0_5_1_1_0_0_0 - 0.169312169312181*G0_0_0_5_1_1_0_0_1 + 0.169312169312181*G0_0_0_5_1_1_1_0_0 + 0.169312169312181*G0_0_0_5_1_1_2_0_1 - 0.169312169312181*G0_0_0_5_1_1_3_1_0 - 0.169312169312181*G0_0_0_5_1_1_3_1_1 + 0.169312169312181*G0_0_0_5_1_1_4_1_0 + 0.169312169312181*G0_0_0_5_1_1_5_1_1 - 0.169312169312183*G0_1_1_0_0_0_0_0_0 - 0.169312169312183*G0_1_1_0_0_0_0_0_1 + 0.169312169312183*G0_1_1_0_0_0_1_0_0 + 0.169312169312183*G0_1_1_0_0_0_2_0_1 - 0.169312169312183*G0_1_1_0_0_0_3_1_0 - 0.169312169312183*G0_1_1_0_0_0_3_1_1 + 0.169312169312183*G0_1_1_0_0_0_4_1_0 + 0.169312169312183*G0_1_1_0_0_0_5_1_1 - 0.169312169312183*G0_1_1_0_0_1_0_0_0 - 0.169312169312183*G0_1_1_0_0_1_0_0_1 + 0.169312169312183*G0_1_1_0_0_1_1_0_0 + 0.169312169312183*G0_1_1_0_0_1_2_0_1 - 0.169312169312183*G0_1_1_0_0_1_3_1_0 - 0.169312169312183*G0_1_1_0_0_1_3_1_1 + 0.169312169312183*G0_1_1_0_0_1_4_1_0 + 0.169312169312183*G0_1_1_0_0_1_5_1_1 + 0.169312169312183*G0_1_1_1_0_0_0_0_0 + 0.169312169312183*G0_1_1_1_0_0_0_0_1 - 0.169312169312183*G0_1_1_1_0_0_1_0_0 - 0.169312169312183*G0_1_1_1_0_0_2_0_1 + 0.169312169312183*G0_1_1_1_0_0_3_1_0 + 0.169312169312183*G0_1_1_1_0_0_3_1_1 - 0.169312169312183*G0_1_1_1_0_0_4_1_0 - 0.169312169312183*G0_1_1_1_0_0_5_1_1 + 0.169312169312183*G0_1_1_2_0_1_0_0_0 + 0.169312169312183*G0_1_1_2_0_1_0_0_1 - 0.169312169312183*G0_1_1_2_0_1_1_0_0 - 0.169312169312183*G0_1_1_2_0_1_2_0_1 + 0.169312169312183*G0_1_1_2_0_1_3_1_0 + 0.169312169312183*G0_1_1_2_0_1_3_1_1 - 0.169312169312183*G0_1_1_2_0_1_4_1_0 - 0.169312169312183*G0_1_1_2_0_1_5_1_1 - 0.169312169312183*G0_1_1_3_1_0_0_0_0 - 0.169312169312183*G0_1_1_3_1_0_0_0_1 + 0.169312169312183*G0_1_1_3_1_0_1_0_0 + 0.169312169312183*G0_1_1_3_1_0_2_0_1 - 0.169312169312183*G0_1_1_3_1_0_3_1_0 - 0.169312169312183*G0_1_1_3_1_0_3_1_1 + 0.169312169312183*G0_1_1_3_1_0_4_1_0 + 0.169312169312183*G0_1_1_3_1_0_5_1_1 - 0.169312169312183*G0_1_1_3_1_1_0_0_0 - 0.169312169312183*G0_1_1_3_1_1_0_0_1 + 0.169312169312183*G0_1_1_3_1_1_1_0_0 + 0.169312169312183*G0_1_1_3_1_1_2_0_1 - 0.169312169312183*G0_1_1_3_1_1_3_1_0 - 0.169312169312183*G0_1_1_3_1_1_3_1_1 + 0.169312169312183*G0_1_1_3_1_1_4_1_0 + 0.169312169312183*G0_1_1_3_1_1_5_1_1 + 0.169312169312183*G0_1_1_4_1_0_0_0_0 + 0.169312169312183*G0_1_1_4_1_0_0_0_1 - 0.169312169312183*G0_1_1_4_1_0_1_0_0 - 0.169312169312183*G0_1_1_4_1_0_2_0_1 + 0.169312169312183*G0_1_1_4_1_0_3_1_0 + 0.169312169312183*G0_1_1_4_1_0_3_1_1 - 0.169312169312183*G0_1_1_4_1_0_4_1_0 - 0.169312169312183*G0_1_1_4_1_0_5_1_1 + 0.169312169312183*G0_1_1_5_1_1_0_0_0 + 0.169312169312183*G0_1_1_5_1_1_0_0_1 - 0.169312169312183*G0_1_1_5_1_1_1_0_0 - 0.169312169312183*G0_1_1_5_1_1_2_0_1 + 0.169312169312183*G0_1_1_5_1_1_3_1_0 + 0.169312169312183*G0_1_1_5_1_1_3_1_1 - 0.169312169312183*G0_1_1_5_1_1_4_1_0 - 0.169312169312183*G0_1_1_5_1_1_5_1_1;
    A[353] = 0.0;
    A[16] = 0.0;
    A[733] = 0.0;
    A[420] = A[14];
    A[376] = 0.0;
    A[59] = 0.0;
    A[758] = 0.0;
    A[455] = 0.0;
    A[411] = 0.0;
    A[859] = A[394];
    A[86] = 0.0;
    A[795] = -A[5] - 0.203174603174605*G0_0_0_0_0_0_0_0_0 - 0.203174603174605*G0_0_0_0_0_0_0_0_1 + 0.203174603174605*G0_0_0_0_0_0_1_0_0 + 0.203174603174605*G0_0_0_0_0_0_2_0_1 - 0.203174603174605*G0_0_0_0_0_0_3_1_0 - 0.203174603174605*G0_0_0_0_0_0_3_1_1 + 0.203174603174605*G0_0_0_0_0_0_4_1_0 + 0.203174603174605*G0_0_0_0_0_0_5_1_1 - 0.203174603174605*G0_0_0_0_0_1_0_0_0 - 0.203174603174605*G0_0_0_0_0_1_0_0_1 + 0.203174603174605*G0_0_0_0_0_1_1_0_0 + 0.203174603174605*G0_0_0_0_0_1_2_0_1 - 0.203174603174605*G0_0_0_0_0_1_3_1_0 - 0.203174603174605*G0_0_0_0_0_1_3_1_1 + 0.203174603174605*G0_0_0_0_0_1_4_1_0 + 0.203174603174605*G0_0_0_0_0_1_5_1_1 + 0.203174603174605*G0_0_0_1_0_0_0_0_0 + 0.203174603174605*G0_0_0_1_0_0_0_0_1 - 0.203174603174605*G0_0_0_1_0_0_1_0_0 - 0.203174603174605*G0_0_0_1_0_0_2_0_1 + 0.203174603174605*G0_0_0_1_0_0_3_1_0 + 0.203174603174605*G0_0_0_1_0_0_3_1_1 - 0.203174603174605*G0_0_0_1_0_0_4_1_0 - 0.203174603174605*G0_0_0_1_0_0_5_1_1 + 0.203174603174605*G0_0_0_2_0_1_0_0_0 + 0.203174603174605*G0_0_0_2_0_1_0_0_1 - 0.203174603174605*G0_0_0_2_0_1_1_0_0 - 0.203174603174605*G0_0_0_2_0_1_2_0_1 + 0.203174603174605*G0_0_0_2_0_1_3_1_0 + 0.203174603174605*G0_0_0_2_0_1_3_1_1 - 0.203174603174605*G0_0_0_2_0_1_4_1_0 - 0.203174603174605*G0_0_0_2_0_1_5_1_1 - 0.203174603174605*G0_0_0_3_1_0_0_0_0 - 0.203174603174605*G0_0_0_3_1_0_0_0_1 + 0.203174603174605*G0_0_0_3_1_0_1_0_0 + 0.203174603174605*G0_0_0_3_1_0_2_0_1 - 0.203174603174605*G0_0_0_3_1_0_3_1_0 - 0.203174603174605*G0_0_0_3_1_0_3_1_1 + 0.203174603174605*G0_0_0_3_1_0_4_1_0 + 0.203174603174605*G0_0_0_3_1_0_5_1_1 - 0.203174603174605*G0_0_0_3_1_1_0_0_0 - 0.203174603174605*G0_0_0_3_1_1_0_0_1 + 0.203174603174605*G0_0_0_3_1_1_1_0_0 + 0.203174603174605*G0_0_0_3_1_1_2_0_1 - 0.203174603174605*G0_0_0_3_1_1_3_1_0 - 0.203174603174605*G0_0_0_3_1_1_3_1_1 + 0.203174603174605*G0_0_0_3_1_1_4_1_0 + 0.203174603174605*G0_0_0_3_1_1_5_1_1 + 0.203174603174605*G0_0_0_4_1_0_0_0_0 + 0.203174603174605*G0_0_0_4_1_0_0_0_1 - 0.203174603174605*G0_0_0_4_1_0_1_0_0 - 0.203174603174605*G0_0_0_4_1_0_2_0_1 + 0.203174603174605*G0_0_0_4_1_0_3_1_0 + 0.203174603174605*G0_0_0_4_1_0_3_1_1 - 0.203174603174605*G0_0_0_4_1_0_4_1_0 - 0.203174603174605*G0_0_0_4_1_0_5_1_1 + 0.203174603174605*G0_0_0_5_1_1_0_0_0 + 0.203174603174605*G0_0_0_5_1_1_0_0_1 - 0.203174603174605*G0_0_0_5_1_1_1_0_0 - 0.203174603174605*G0_0_0_5_1_1_2_0_1 + 0.203174603174605*G0_0_0_5_1_1_3_1_0 + 0.203174603174605*G0_0_0_5_1_1_3_1_1 - 0.203174603174605*G0_0_0_5_1_1_4_1_0 - 0.203174603174605*G0_0_0_5_1_1_5_1_1 - 0.203174603174603*G0_0_1_0_0_0_0_0_0 - 0.203174603174603*G0_0_1_0_0_0_0_0_1 + 0.203174603174603*G0_0_1_0_0_0_1_0_0 + 0.203174603174603*G0_0_1_0_0_0_2_0_1 - 0.203174603174603*G0_0_1_0_0_0_3_1_0 - 0.203174603174603*G0_0_1_0_0_0_3_1_1 + 0.203174603174603*G0_0_1_0_0_0_4_1_0 + 0.203174603174603*G0_0_1_0_0_0_5_1_1 - 0.203174603174603*G0_0_1_0_0_1_0_0_0 - 0.203174603174603*G0_0_1_0_0_1_0_0_1 + 0.203174603174603*G0_0_1_0_0_1_1_0_0 + 0.203174603174603*G0_0_1_0_0_1_2_0_1 - 0.203174603174603*G0_0_1_0_0_1_3_1_0 - 0.203174603174603*G0_0_1_0_0_1_3_1_1 + 0.203174603174603*G0_0_1_0_0_1_4_1_0 + 0.203174603174603*G0_0_1_0_0_1_5_1_1 + 0.203174603174603*G0_0_1_1_0_0_0_0_0 + 0.203174603174603*G0_0_1_1_0_0_0_0_1 - 0.203174603174603*G0_0_1_1_0_0_1_0_0 - 0.203174603174603*G0_0_1_1_0_0_2_0_1 + 0.203174603174603*G0_0_1_1_0_0_3_1_0 + 0.203174603174603*G0_0_1_1_0_0_3_1_1 - 0.203174603174603*G0_0_1_1_0_0_4_1_0 - 0.203174603174603*G0_0_1_1_0_0_5_1_1 + 0.203174603174603*G0_0_1_2_0_1_0_0_0 + 0.203174603174603*G0_0_1_2_0_1_0_0_1 - 0.203174603174603*G0_0_1_2_0_1_1_0_0 - 0.203174603174603*G0_0_1_2_0_1_2_0_1 + 0.203174603174603*G0_0_1_2_0_1_3_1_0 + 0.203174603174603*G0_0_1_2_0_1_3_1_1 - 0.203174603174603*G0_0_1_2_0_1_4_1_0 - 0.203174603174603*G0_0_1_2_0_1_5_1_1 - 0.203174603174603*G0_0_1_3_1_0_0_0_0 - 0.203174603174603*G0_0_1_3_1_0_0_0_1 + 0.203174603174603*G0_0_1_3_1_0_1_0_0 + 0.203174603174603*G0_0_1_3_1_0_2_0_1 - 0.203174603174603*G0_0_1_3_1_0_3_1_0 - 0.203174603174603*G0_0_1_3_1_0_3_1_1 + 0.203174603174603*G0_0_1_3_1_0_4_1_0 + 0.203174603174603*G0_0_1_3_1_0_5_1_1 - 0.203174603174603*G0_0_1_3_1_1_0_0_0 - 0.203174603174603*G0_0_1_3_1_1_0_0_1 + 0.203174603174603*G0_0_1_3_1_1_1_0_0 + 0.203174603174603*G0_0_1_3_1_1_2_0_1 - 0.203174603174603*G0_0_1_3_1_1_3_1_0 - 0.203174603174603*G0_0_1_3_1_1_3_1_1 + 0.203174603174603*G0_0_1_3_1_1_4_1_0 + 0.203174603174603*G0_0_1_3_1_1_5_1_1 + 0.203174603174603*G0_0_1_4_1_0_0_0_0 + 0.203174603174603*G0_0_1_4_1_0_0_0_1 - 0.203174603174603*G0_0_1_4_1_0_1_0_0 - 0.203174603174603*G0_0_1_4_1_0_2_0_1 + 0.203174603174603*G0_0_1_4_1_0_3_1_0 + 0.203174603174603*G0_0_1_4_1_0_3_1_1 - 0.203174603174603*G0_0_1_4_1_0_4_1_0 - 0.203174603174603*G0_0_1_4_1_0_5_1_1 + 0.203174603174603*G0_0_1_5_1_1_0_0_0 + 0.203174603174603*G0_0_1_5_1_1_0_0_1 - 0.203174603174603*G0_0_1_5_1_1_1_0_0 - 0.203174603174603*G0_0_1_5_1_1_2_0_1 + 0.203174603174603*G0_0_1_5_1_1_3_1_0 + 0.203174603174603*G0_0_1_5_1_1_3_1_1 - 0.203174603174603*G0_0_1_5_1_1_4_1_0 - 0.203174603174603*G0_0_1_5_1_1_5_1_1;
    A[888] = A[569];
    A[93] = A[806];
    A[824] = 0.0;
    A[124] = A[775] - 0.507936507936516*G0_0_0_0_0_0_0_0_0 - 0.507936507936516*G0_0_0_0_0_0_0_0_1 + 0.507936507936516*G0_0_0_0_0_0_1_0_0 + 0.507936507936516*G0_0_0_0_0_0_2_0_1 - 0.507936507936516*G0_0_0_0_0_0_3_1_0 - 0.507936507936516*G0_0_0_0_0_0_3_1_1 + 0.507936507936516*G0_0_0_0_0_0_4_1_0 + 0.507936507936516*G0_0_0_0_0_0_5_1_1 - 0.507936507936516*G0_0_0_0_0_1_0_0_0 - 0.507936507936516*G0_0_0_0_0_1_0_0_1 + 0.507936507936516*G0_0_0_0_0_1_1_0_0 + 0.507936507936516*G0_0_0_0_0_1_2_0_1 - 0.507936507936516*G0_0_0_0_0_1_3_1_0 - 0.507936507936516*G0_0_0_0_0_1_3_1_1 + 0.507936507936516*G0_0_0_0_0_1_4_1_0 + 0.507936507936516*G0_0_0_0_0_1_5_1_1 + 0.507936507936516*G0_0_0_1_0_0_0_0_0 + 0.507936507936516*G0_0_0_1_0_0_0_0_1 - 0.507936507936516*G0_0_0_1_0_0_1_0_0 - 0.507936507936516*G0_0_0_1_0_0_2_0_1 + 0.507936507936516*G0_0_0_1_0_0_3_1_0 + 0.507936507936516*G0_0_0_1_0_0_3_1_1 - 0.507936507936516*G0_0_0_1_0_0_4_1_0 - 0.507936507936516*G0_0_0_1_0_0_5_1_1 + 0.507936507936516*G0_0_0_2_0_1_0_0_0 + 0.507936507936516*G0_0_0_2_0_1_0_0_1 - 0.507936507936516*G0_0_0_2_0_1_1_0_0 - 0.507936507936516*G0_0_0_2_0_1_2_0_1 + 0.507936507936516*G0_0_0_2_0_1_3_1_0 + 0.507936507936516*G0_0_0_2_0_1_3_1_1 - 0.507936507936516*G0_0_0_2_0_1_4_1_0 - 0.507936507936516*G0_0_0_2_0_1_5_1_1 - 0.507936507936516*G0_0_0_3_1_0_0_0_0 - 0.507936507936516*G0_0_0_3_1_0_0_0_1 + 0.507936507936516*G0_0_0_3_1_0_1_0_0 + 0.507936507936516*G0_0_0_3_1_0_2_0_1 - 0.507936507936516*G0_0_0_3_1_0_3_1_0 - 0.507936507936516*G0_0_0_3_1_0_3_1_1 + 0.507936507936516*G0_0_0_3_1_0_4_1_0 + 0.507936507936516*G0_0_0_3_1_0_5_1_1 - 0.507936507936516*G0_0_0_3_1_1_0_0_0 - 0.507936507936516*G0_0_0_3_1_1_0_0_1 + 0.507936507936516*G0_0_0_3_1_1_1_0_0 + 0.507936507936516*G0_0_0_3_1_1_2_0_1 - 0.507936507936516*G0_0_0_3_1_1_3_1_0 - 0.507936507936516*G0_0_0_3_1_1_3_1_1 + 0.507936507936516*G0_0_0_3_1_1_4_1_0 + 0.507936507936516*G0_0_0_3_1_1_5_1_1 + 0.507936507936516*G0_0_0_4_1_0_0_0_0 + 0.507936507936516*G0_0_0_4_1_0_0_0_1 - 0.507936507936516*G0_0_0_4_1_0_1_0_0 - 0.507936507936516*G0_0_0_4_1_0_2_0_1 + 0.507936507936516*G0_0_0_4_1_0_3_1_0 + 0.507936507936516*G0_0_0_4_1_0_3_1_1 - 0.507936507936516*G0_0_0_4_1_0_4_1_0 - 0.507936507936516*G0_0_0_4_1_0_5_1_1 + 0.507936507936516*G0_0_0_5_1_1_0_0_0 + 0.507936507936516*G0_0_0_5_1_1_0_0_1 - 0.507936507936516*G0_0_0_5_1_1_1_0_0 - 0.507936507936516*G0_0_0_5_1_1_2_0_1 + 0.507936507936516*G0_0_0_5_1_1_3_1_0 + 0.507936507936516*G0_0_0_5_1_1_3_1_1 - 0.507936507936516*G0_0_0_5_1_1_4_1_0 - 0.507936507936516*G0_0_0_5_1_1_5_1_1 - 0.507936507936515*G0_0_1_0_0_0_0_0_0 - 0.507936507936515*G0_0_1_0_0_0_0_0_1 + 0.507936507936515*G0_0_1_0_0_0_1_0_0 + 0.507936507936515*G0_0_1_0_0_0_2_0_1 - 0.507936507936515*G0_0_1_0_0_0_3_1_0 - 0.507936507936515*G0_0_1_0_0_0_3_1_1 + 0.507936507936515*G0_0_1_0_0_0_4_1_0 + 0.507936507936515*G0_0_1_0_0_0_5_1_1 - 0.507936507936515*G0_0_1_0_0_1_0_0_0 - 0.507936507936515*G0_0_1_0_0_1_0_0_1 + 0.507936507936515*G0_0_1_0_0_1_1_0_0 + 0.507936507936515*G0_0_1_0_0_1_2_0_1 - 0.507936507936515*G0_0_1_0_0_1_3_1_0 - 0.507936507936515*G0_0_1_0_0_1_3_1_1 + 0.507936507936515*G0_0_1_0_0_1_4_1_0 + 0.507936507936515*G0_0_1_0_0_1_5_1_1 + 0.507936507936515*G0_0_1_1_0_0_0_0_0 + 0.507936507936515*G0_0_1_1_0_0_0_0_1 - 0.507936507936515*G0_0_1_1_0_0_1_0_0 - 0.507936507936515*G0_0_1_1_0_0_2_0_1 + 0.507936507936515*G0_0_1_1_0_0_3_1_0 + 0.507936507936515*G0_0_1_1_0_0_3_1_1 - 0.507936507936515*G0_0_1_1_0_0_4_1_0 - 0.507936507936515*G0_0_1_1_0_0_5_1_1 + 0.507936507936515*G0_0_1_2_0_1_0_0_0 + 0.507936507936515*G0_0_1_2_0_1_0_0_1 - 0.507936507936515*G0_0_1_2_0_1_1_0_0 - 0.507936507936515*G0_0_1_2_0_1_2_0_1 + 0.507936507936515*G0_0_1_2_0_1_3_1_0 + 0.507936507936515*G0_0_1_2_0_1_3_1_1 - 0.507936507936515*G0_0_1_2_0_1_4_1_0 - 0.507936507936515*G0_0_1_2_0_1_5_1_1 - 0.507936507936515*G0_0_1_3_1_0_0_0_0 - 0.507936507936515*G0_0_1_3_1_0_0_0_1 + 0.507936507936515*G0_0_1_3_1_0_1_0_0 + 0.507936507936515*G0_0_1_3_1_0_2_0_1 - 0.507936507936515*G0_0_1_3_1_0_3_1_0 - 0.507936507936515*G0_0_1_3_1_0_3_1_1 + 0.507936507936515*G0_0_1_3_1_0_4_1_0 + 0.507936507936515*G0_0_1_3_1_0_5_1_1 - 0.507936507936515*G0_0_1_3_1_1_0_0_0 - 0.507936507936515*G0_0_1_3_1_1_0_0_1 + 0.507936507936515*G0_0_1_3_1_1_1_0_0 + 0.507936507936515*G0_0_1_3_1_1_2_0_1 - 0.507936507936515*G0_0_1_3_1_1_3_1_0 - 0.507936507936515*G0_0_1_3_1_1_3_1_1 + 0.507936507936515*G0_0_1_3_1_1_4_1_0 + 0.507936507936515*G0_0_1_3_1_1_5_1_1 + 0.507936507936515*G0_0_1_4_1_0_0_0_0 + 0.507936507936515*G0_0_1_4_1_0_0_0_1 - 0.507936507936515*G0_0_1_4_1_0_1_0_0 - 0.507936507936515*G0_0_1_4_1_0_2_0_1 + 0.507936507936515*G0_0_1_4_1_0_3_1_0 + 0.507936507936515*G0_0_1_4_1_0_3_1_1 - 0.507936507936515*G0_0_1_4_1_0_4_1_0 - 0.507936507936515*G0_0_1_4_1_0_5_1_1 + 0.507936507936515*G0_0_1_5_1_1_0_0_0 + 0.507936507936515*G0_0_1_5_1_1_0_0_1 - 0.507936507936515*G0_0_1_5_1_1_1_0_0 - 0.507936507936515*G0_0_1_5_1_1_2_0_1 + 0.507936507936515*G0_0_1_5_1_1_3_1_0 + 0.507936507936515*G0_0_1_5_1_1_3_1_1 - 0.507936507936515*G0_0_1_5_1_1_4_1_0 - 0.507936507936515*G0_0_1_5_1_1_5_1_1 - 0.507936507936515*G0_1_0_0_0_0_0_0_0 - 0.507936507936515*G0_1_0_0_0_0_0_0_1 + 0.507936507936515*G0_1_0_0_0_0_1_0_0 + 0.507936507936515*G0_1_0_0_0_0_2_0_1 - 0.507936507936515*G0_1_0_0_0_0_3_1_0 - 0.507936507936515*G0_1_0_0_0_0_3_1_1 + 0.507936507936515*G0_1_0_0_0_0_4_1_0 + 0.507936507936515*G0_1_0_0_0_0_5_1_1 - 0.507936507936515*G0_1_0_0_0_1_0_0_0 - 0.507936507936515*G0_1_0_0_0_1_0_0_1 + 0.507936507936515*G0_1_0_0_0_1_1_0_0 + 0.507936507936515*G0_1_0_0_0_1_2_0_1 - 0.507936507936515*G0_1_0_0_0_1_3_1_0 - 0.507936507936515*G0_1_0_0_0_1_3_1_1 + 0.507936507936515*G0_1_0_0_0_1_4_1_0 + 0.507936507936515*G0_1_0_0_0_1_5_1_1 + 0.507936507936515*G0_1_0_1_0_0_0_0_0 + 0.507936507936515*G0_1_0_1_0_0_0_0_1 - 0.507936507936515*G0_1_0_1_0_0_1_0_0 - 0.507936507936515*G0_1_0_1_0_0_2_0_1 + 0.507936507936515*G0_1_0_1_0_0_3_1_0 + 0.507936507936515*G0_1_0_1_0_0_3_1_1 - 0.507936507936515*G0_1_0_1_0_0_4_1_0 - 0.507936507936515*G0_1_0_1_0_0_5_1_1 + 0.507936507936515*G0_1_0_2_0_1_0_0_0 + 0.507936507936515*G0_1_0_2_0_1_0_0_1 - 0.507936507936515*G0_1_0_2_0_1_1_0_0 - 0.507936507936515*G0_1_0_2_0_1_2_0_1 + 0.507936507936515*G0_1_0_2_0_1_3_1_0 + 0.507936507936515*G0_1_0_2_0_1_3_1_1 - 0.507936507936515*G0_1_0_2_0_1_4_1_0 - 0.507936507936515*G0_1_0_2_0_1_5_1_1 - 0.507936507936515*G0_1_0_3_1_0_0_0_0 - 0.507936507936515*G0_1_0_3_1_0_0_0_1 + 0.507936507936515*G0_1_0_3_1_0_1_0_0 + 0.507936507936515*G0_1_0_3_1_0_2_0_1 - 0.507936507936515*G0_1_0_3_1_0_3_1_0 - 0.507936507936515*G0_1_0_3_1_0_3_1_1 + 0.507936507936515*G0_1_0_3_1_0_4_1_0 + 0.507936507936515*G0_1_0_3_1_0_5_1_1 - 0.507936507936515*G0_1_0_3_1_1_0_0_0 - 0.507936507936515*G0_1_0_3_1_1_0_0_1 + 0.507936507936515*G0_1_0_3_1_1_1_0_0 + 0.507936507936515*G0_1_0_3_1_1_2_0_1 - 0.507936507936515*G0_1_0_3_1_1_3_1_0 - 0.507936507936515*G0_1_0_3_1_1_3_1_1 + 0.507936507936515*G0_1_0_3_1_1_4_1_0 + 0.507936507936515*G0_1_0_3_1_1_5_1_1 + 0.507936507936515*G0_1_0_4_1_0_0_0_0 + 0.507936507936515*G0_1_0_4_1_0_0_0_1 - 0.507936507936515*G0_1_0_4_1_0_1_0_0 - 0.507936507936515*G0_1_0_4_1_0_2_0_1 + 0.507936507936515*G0_1_0_4_1_0_3_1_0 + 0.507936507936515*G0_1_0_4_1_0_3_1_1 - 0.507936507936515*G0_1_0_4_1_0_4_1_0 - 0.507936507936515*G0_1_0_4_1_0_5_1_1 + 0.507936507936515*G0_1_0_5_1_1_0_0_0 + 0.507936507936515*G0_1_0_5_1_1_0_0_1 - 0.507936507936515*G0_1_0_5_1_1_1_0_0 - 0.507936507936515*G0_1_0_5_1_1_2_0_1 + 0.507936507936515*G0_1_0_5_1_1_3_1_0 + 0.507936507936515*G0_1_0_5_1_1_3_1_1 - 0.507936507936515*G0_1_0_5_1_1_4_1_0 - 0.507936507936515*G0_1_0_5_1_1_5_1_1;
    A[849] = 0.0;
    A[175] = 0.0;
    A[882] = 0.0;
    A[495] = A[30];
    A[202] = 0.0;
    A[580] = 0.0;
    A[524] = 0.0;
    A[233] = 0.0;
    A[681] = A[216];
    A[613] = 0.0;
    A[553] = 0.0;
    A[706] = A[181];
    A[630] = 0.0;
    A[251] = A[716];
    A[675] = A[210];
    A[280] = A[745];
    A[704] = 0.0;
    A[301] = A[766];
    A[257] = 0.0;
    A[342] = A[836];
    A[23] = 0.0;
    A[740] = A[624];
    A[431] = A[836];
    A[375] = 0.0;
    A[52] = 0.0;
    A[767] = A[534];
    A[452] = 0.0;
    A[404] = A[869];
    A[81] = 0.0;
    A[802] = A[221];
    A[13] = A[14];
    A[98] = -A[716] - 0.338624338624345*G0_0_0_0_0_0_0_0_0 - 0.338624338624345*G0_0_0_0_0_0_0_0_1 + 0.338624338624345*G0_0_0_0_0_0_1_0_0 + 0.338624338624345*G0_0_0_0_0_0_2_0_1 - 0.338624338624345*G0_0_0_0_0_0_3_1_0 - 0.338624338624345*G0_0_0_0_0_0_3_1_1 + 0.338624338624345*G0_0_0_0_0_0_4_1_0 + 0.338624338624345*G0_0_0_0_0_0_5_1_1 - 0.338624338624345*G0_0_0_0_0_1_0_0_0 - 0.338624338624345*G0_0_0_0_0_1_0_0_1 + 0.338624338624345*G0_0_0_0_0_1_1_0_0 + 0.338624338624345*G0_0_0_0_0_1_2_0_1 - 0.338624338624345*G0_0_0_0_0_1_3_1_0 - 0.338624338624345*G0_0_0_0_0_1_3_1_1 + 0.338624338624345*G0_0_0_0_0_1_4_1_0 + 0.338624338624345*G0_0_0_0_0_1_5_1_1 + 0.338624338624345*G0_0_0_1_0_0_0_0_0 + 0.338624338624345*G0_0_0_1_0_0_0_0_1 - 0.338624338624345*G0_0_0_1_0_0_1_0_0 - 0.338624338624345*G0_0_0_1_0_0_2_0_1 + 0.338624338624345*G0_0_0_1_0_0_3_1_0 + 0.338624338624345*G0_0_0_1_0_0_3_1_1 - 0.338624338624345*G0_0_0_1_0_0_4_1_0 - 0.338624338624345*G0_0_0_1_0_0_5_1_1 + 0.338624338624345*G0_0_0_2_0_1_0_0_0 + 0.338624338624345*G0_0_0_2_0_1_0_0_1 - 0.338624338624345*G0_0_0_2_0_1_1_0_0 - 0.338624338624345*G0_0_0_2_0_1_2_0_1 + 0.338624338624345*G0_0_0_2_0_1_3_1_0 + 0.338624338624345*G0_0_0_2_0_1_3_1_1 - 0.338624338624345*G0_0_0_2_0_1_4_1_0 - 0.338624338624345*G0_0_0_2_0_1_5_1_1 - 0.338624338624345*G0_0_0_3_1_0_0_0_0 - 0.338624338624345*G0_0_0_3_1_0_0_0_1 + 0.338624338624345*G0_0_0_3_1_0_1_0_0 + 0.338624338624345*G0_0_0_3_1_0_2_0_1 - 0.338624338624345*G0_0_0_3_1_0_3_1_0 - 0.338624338624345*G0_0_0_3_1_0_3_1_1 + 0.338624338624345*G0_0_0_3_1_0_4_1_0 + 0.338624338624345*G0_0_0_3_1_0_5_1_1 - 0.338624338624345*G0_0_0_3_1_1_0_0_0 - 0.338624338624345*G0_0_0_3_1_1_0_0_1 + 0.338624338624345*G0_0_0_3_1_1_1_0_0 + 0.338624338624345*G0_0_0_3_1_1_2_0_1 - 0.338624338624345*G0_0_0_3_1_1_3_1_0 - 0.338624338624345*G0_0_0_3_1_1_3_1_1 + 0.338624338624345*G0_0_0_3_1_1_4_1_0 + 0.338624338624345*G0_0_0_3_1_1_5_1_1 + 0.338624338624345*G0_0_0_4_1_0_0_0_0 + 0.338624338624345*G0_0_0_4_1_0_0_0_1 - 0.338624338624345*G0_0_0_4_1_0_1_0_0 - 0.338624338624345*G0_0_0_4_1_0_2_0_1 + 0.338624338624345*G0_0_0_4_1_0_3_1_0 + 0.338624338624345*G0_0_0_4_1_0_3_1_1 - 0.338624338624345*G0_0_0_4_1_0_4_1_0 - 0.338624338624345*G0_0_0_4_1_0_5_1_1 + 0.338624338624345*G0_0_0_5_1_1_0_0_0 + 0.338624338624345*G0_0_0_5_1_1_0_0_1 - 0.338624338624345*G0_0_0_5_1_1_1_0_0 - 0.338624338624345*G0_0_0_5_1_1_2_0_1 + 0.338624338624345*G0_0_0_5_1_1_3_1_0 + 0.338624338624345*G0_0_0_5_1_1_3_1_1 - 0.338624338624345*G0_0_0_5_1_1_4_1_0 - 0.338624338624345*G0_0_0_5_1_1_5_1_1;
    A[560] = -A[98] - 0.541798941798936*G0_0_1_0_0_0_0_0_0 - 0.541798941798936*G0_0_1_0_0_0_0_0_1 + 0.541798941798936*G0_0_1_0_0_0_1_0_0 + 0.541798941798936*G0_0_1_0_0_0_2_0_1 - 0.541798941798936*G0_0_1_0_0_0_3_1_0 - 0.541798941798936*G0_0_1_0_0_0_3_1_1 + 0.541798941798936*G0_0_1_0_0_0_4_1_0 + 0.541798941798936*G0_0_1_0_0_0_5_1_1 - 0.541798941798936*G0_0_1_0_0_1_0_0_0 - 0.541798941798936*G0_0_1_0_0_1_0_0_1 + 0.541798941798936*G0_0_1_0_0_1_1_0_0 + 0.541798941798936*G0_0_1_0_0_1_2_0_1 - 0.541798941798936*G0_0_1_0_0_1_3_1_0 - 0.541798941798936*G0_0_1_0_0_1_3_1_1 + 0.541798941798936*G0_0_1_0_0_1_4_1_0 + 0.541798941798936*G0_0_1_0_0_1_5_1_1 + 0.541798941798936*G0_0_1_1_0_0_0_0_0 + 0.541798941798936*G0_0_1_1_0_0_0_0_1 - 0.541798941798936*G0_0_1_1_0_0_1_0_0 - 0.541798941798936*G0_0_1_1_0_0_2_0_1 + 0.541798941798936*G0_0_1_1_0_0_3_1_0 + 0.541798941798936*G0_0_1_1_0_0_3_1_1 - 0.541798941798936*G0_0_1_1_0_0_4_1_0 - 0.541798941798936*G0_0_1_1_0_0_5_1_1 + 0.541798941798936*G0_0_1_2_0_1_0_0_0 + 0.541798941798936*G0_0_1_2_0_1_0_0_1 - 0.541798941798936*G0_0_1_2_0_1_1_0_0 - 0.541798941798936*G0_0_1_2_0_1_2_0_1 + 0.541798941798936*G0_0_1_2_0_1_3_1_0 + 0.541798941798936*G0_0_1_2_0_1_3_1_1 - 0.541798941798936*G0_0_1_2_0_1_4_1_0 - 0.541798941798936*G0_0_1_2_0_1_5_1_1 - 0.541798941798936*G0_0_1_3_1_0_0_0_0 - 0.541798941798936*G0_0_1_3_1_0_0_0_1 + 0.541798941798936*G0_0_1_3_1_0_1_0_0 + 0.541798941798936*G0_0_1_3_1_0_2_0_1 - 0.541798941798936*G0_0_1_3_1_0_3_1_0 - 0.541798941798936*G0_0_1_3_1_0_3_1_1 + 0.541798941798936*G0_0_1_3_1_0_4_1_0 + 0.541798941798936*G0_0_1_3_1_0_5_1_1 - 0.541798941798936*G0_0_1_3_1_1_0_0_0 - 0.541798941798936*G0_0_1_3_1_1_0_0_1 + 0.541798941798936*G0_0_1_3_1_1_1_0_0 + 0.541798941798936*G0_0_1_3_1_1_2_0_1 - 0.541798941798936*G0_0_1_3_1_1_3_1_0 - 0.541798941798936*G0_0_1_3_1_1_3_1_1 + 0.541798941798936*G0_0_1_3_1_1_4_1_0 + 0.541798941798936*G0_0_1_3_1_1_5_1_1 + 0.541798941798936*G0_0_1_4_1_0_0_0_0 + 0.541798941798936*G0_0_1_4_1_0_0_0_1 - 0.541798941798936*G0_0_1_4_1_0_1_0_0 - 0.541798941798936*G0_0_1_4_1_0_2_0_1 + 0.541798941798936*G0_0_1_4_1_0_3_1_0 + 0.541798941798936*G0_0_1_4_1_0_3_1_1 - 0.541798941798936*G0_0_1_4_1_0_4_1_0 - 0.541798941798936*G0_0_1_4_1_0_5_1_1 + 0.541798941798936*G0_0_1_5_1_1_0_0_0 + 0.541798941798936*G0_0_1_5_1_1_0_0_1 - 0.541798941798936*G0_0_1_5_1_1_1_0_0 - 0.541798941798936*G0_0_1_5_1_1_2_0_1 + 0.541798941798936*G0_0_1_5_1_1_3_1_0 + 0.541798941798936*G0_0_1_5_1_1_3_1_1 - 0.541798941798936*G0_0_1_5_1_1_4_1_0 - 0.541798941798936*G0_0_1_5_1_1_5_1_1 + 0.338624338624348*G0_1_1_0_0_0_0_0_0 + 0.338624338624348*G0_1_1_0_0_0_0_0_1 - 0.338624338624348*G0_1_1_0_0_0_1_0_0 - 0.338624338624348*G0_1_1_0_0_0_2_0_1 + 0.338624338624348*G0_1_1_0_0_0_3_1_0 + 0.338624338624348*G0_1_1_0_0_0_3_1_1 - 0.338624338624348*G0_1_1_0_0_0_4_1_0 - 0.338624338624348*G0_1_1_0_0_0_5_1_1 + 0.338624338624348*G0_1_1_0_0_1_0_0_0 + 0.338624338624348*G0_1_1_0_0_1_0_0_1 - 0.338624338624348*G0_1_1_0_0_1_1_0_0 - 0.338624338624348*G0_1_1_0_0_1_2_0_1 + 0.338624338624348*G0_1_1_0_0_1_3_1_0 + 0.338624338624348*G0_1_1_0_0_1_3_1_1 - 0.338624338624348*G0_1_1_0_0_1_4_1_0 - 0.338624338624348*G0_1_1_0_0_1_5_1_1 - 0.338624338624348*G0_1_1_1_0_0_0_0_0 - 0.338624338624348*G0_1_1_1_0_0_0_0_1 + 0.338624338624348*G0_1_1_1_0_0_1_0_0 + 0.338624338624348*G0_1_1_1_0_0_2_0_1 - 0.338624338624348*G0_1_1_1_0_0_3_1_0 - 0.338624338624348*G0_1_1_1_0_0_3_1_1 + 0.338624338624348*G0_1_1_1_0_0_4_1_0 + 0.338624338624348*G0_1_1_1_0_0_5_1_1 - 0.338624338624348*G0_1_1_2_0_1_0_0_0 - 0.338624338624348*G0_1_1_2_0_1_0_0_1 + 0.338624338624348*G0_1_1_2_0_1_1_0_0 + 0.338624338624348*G0_1_1_2_0_1_2_0_1 - 0.338624338624348*G0_1_1_2_0_1_3_1_0 - 0.338624338624348*G0_1_1_2_0_1_3_1_1 + 0.338624338624348*G0_1_1_2_0_1_4_1_0 + 0.338624338624348*G0_1_1_2_0_1_5_1_1 + 0.338624338624348*G0_1_1_3_1_0_0_0_0 + 0.338624338624348*G0_1_1_3_1_0_0_0_1 - 0.338624338624348*G0_1_1_3_1_0_1_0_0 - 0.338624338624348*G0_1_1_3_1_0_2_0_1 + 0.338624338624348*G0_1_1_3_1_0_3_1_0 + 0.338624338624348*G0_1_1_3_1_0_3_1_1 - 0.338624338624348*G0_1_1_3_1_0_4_1_0 - 0.338624338624348*G0_1_1_3_1_0_5_1_1 + 0.338624338624348*G0_1_1_3_1_1_0_0_0 + 0.338624338624348*G0_1_1_3_1_1_0_0_1 - 0.338624338624348*G0_1_1_3_1_1_1_0_0 - 0.338624338624348*G0_1_1_3_1_1_2_0_1 + 0.338624338624348*G0_1_1_3_1_1_3_1_0 + 0.338624338624348*G0_1_1_3_1_1_3_1_1 - 0.338624338624348*G0_1_1_3_1_1_4_1_0 - 0.338624338624348*G0_1_1_3_1_1_5_1_1 - 0.338624338624348*G0_1_1_4_1_0_0_0_0 - 0.338624338624348*G0_1_1_4_1_0_0_0_1 + 0.338624338624348*G0_1_1_4_1_0_1_0_0 + 0.338624338624348*G0_1_1_4_1_0_2_0_1 - 0.338624338624348*G0_1_1_4_1_0_3_1_0 - 0.338624338624348*G0_1_1_4_1_0_3_1_1 + 0.338624338624348*G0_1_1_4_1_0_4_1_0 + 0.338624338624348*G0_1_1_4_1_0_5_1_1 - 0.338624338624348*G0_1_1_5_1_1_0_0_0 - 0.338624338624348*G0_1_1_5_1_1_0_0_1 + 0.338624338624348*G0_1_1_5_1_1_1_0_0 + 0.338624338624348*G0_1_1_5_1_1_2_0_1 - 0.338624338624348*G0_1_1_5_1_1_3_1_0 - 0.338624338624348*G0_1_1_5_1_1_3_1_1 + 0.338624338624348*G0_1_1_5_1_1_4_1_0 + 0.338624338624348*G0_1_1_5_1_1_5_1_1;
    A[817] = 0.0;
    A[38] = A[181];
    A[123] = A[588];
    A[840] = 0.0;
    A[75] = 0.0;
    A[152] = A[617];
    A[875] = 0.0;
    A[486] = 0.0;
    A[189] = A[741];
    A[589] = A[124];
    A[517] = 0.0;
    A[222] = A[367];
    A[620] = -A[245] + 1.69312169312171*G0_1_1_0_0_0_0_0_0 + 1.69312169312171*G0_1_1_0_0_0_0_0_1 - 1.69312169312171*G0_1_1_0_0_0_1_0_0 - 1.69312169312171*G0_1_1_0_0_0_2_0_1 + 1.69312169312171*G0_1_1_0_0_0_3_1_0 + 1.69312169312171*G0_1_1_0_0_0_3_1_1 - 1.69312169312171*G0_1_1_0_0_0_4_1_0 - 1.69312169312171*G0_1_1_0_0_0_5_1_1 + 1.69312169312171*G0_1_1_0_0_1_0_0_0 + 1.69312169312171*G0_1_1_0_0_1_0_0_1 - 1.69312169312171*G0_1_1_0_0_1_1_0_0 - 1.69312169312171*G0_1_1_0_0_1_2_0_1 + 1.69312169312171*G0_1_1_0_0_1_3_1_0 + 1.69312169312171*G0_1_1_0_0_1_3_1_1 - 1.69312169312171*G0_1_1_0_0_1_4_1_0 - 1.69312169312171*G0_1_1_0_0_1_5_1_1 - 1.69312169312171*G0_1_1_1_0_0_0_0_0 - 1.69312169312171*G0_1_1_1_0_0_0_0_1 + 1.69312169312171*G0_1_1_1_0_0_1_0_0 + 1.69312169312171*G0_1_1_1_0_0_2_0_1 - 1.69312169312171*G0_1_1_1_0_0_3_1_0 - 1.69312169312171*G0_1_1_1_0_0_3_1_1 + 1.69312169312171*G0_1_1_1_0_0_4_1_0 + 1.69312169312171*G0_1_1_1_0_0_5_1_1 - 1.69312169312171*G0_1_1_2_0_1_0_0_0 - 1.69312169312171*G0_1_1_2_0_1_0_0_1 + 1.69312169312171*G0_1_1_2_0_1_1_0_0 + 1.69312169312171*G0_1_1_2_0_1_2_0_1 - 1.69312169312171*G0_1_1_2_0_1_3_1_0 - 1.69312169312171*G0_1_1_2_0_1_3_1_1 + 1.69312169312171*G0_1_1_2_0_1_4_1_0 + 1.69312169312171*G0_1_1_2_0_1_5_1_1 + 1.69312169312171*G0_1_1_3_1_0_0_0_0 + 1.69312169312171*G0_1_1_3_1_0_0_0_1 - 1.69312169312171*G0_1_1_3_1_0_1_0_0 - 1.69312169312171*G0_1_1_3_1_0_2_0_1 + 1.69312169312171*G0_1_1_3_1_0_3_1_0 + 1.69312169312171*G0_1_1_3_1_0_3_1_1 - 1.69312169312171*G0_1_1_3_1_0_4_1_0 - 1.69312169312171*G0_1_1_3_1_0_5_1_1 + 1.69312169312171*G0_1_1_3_1_1_0_0_0 + 1.69312169312171*G0_1_1_3_1_1_0_0_1 - 1.69312169312171*G0_1_1_3_1_1_1_0_0 - 1.69312169312171*G0_1_1_3_1_1_2_0_1 + 1.69312169312171*G0_1_1_3_1_1_3_1_0 + 1.69312169312171*G0_1_1_3_1_1_3_1_1 - 1.69312169312171*G0_1_1_3_1_1_4_1_0 - 1.69312169312171*G0_1_1_3_1_1_5_1_1 - 1.69312169312171*G0_1_1_4_1_0_0_0_0 - 1.69312169312171*G0_1_1_4_1_0_0_0_1 + 1.69312169312171*G0_1_1_4_1_0_1_0_0 + 1.69312169312171*G0_1_1_4_1_0_2_0_1 - 1.69312169312171*G0_1_1_4_1_0_3_1_0 - 1.69312169312171*G0_1_1_4_1_0_3_1_1 + 1.69312169312171*G0_1_1_4_1_0_4_1_0 + 1.69312169312171*G0_1_1_4_1_0_5_1_1 - 1.69312169312171*G0_1_1_5_1_1_0_0_0 - 1.69312169312171*G0_1_1_5_1_1_0_0_1 + 1.69312169312171*G0_1_1_5_1_1_1_0_0 + 1.69312169312171*G0_1_1_5_1_1_2_0_1 - 1.69312169312171*G0_1_1_5_1_1_3_1_0 - 1.69312169312171*G0_1_1_5_1_1_3_1_1 + 1.69312169312171*G0_1_1_5_1_1_4_1_0 + 1.69312169312171*G0_1_1_5_1_1_5_1_1;
    A[544] = 0.0;
    A[508] = A[421];
    A[639] = 0.0;
    A[535] = A[534];
    A[666] = 0.0;
    A[697] = 0.0;
    A[308] = A[715];
    A[264] = 0.0;
    A[335] = -A[716] - 0.338624338624348*G0_1_1_0_0_0_0_0_0 - 0.338624338624348*G0_1_1_0_0_0_0_0_1 + 0.338624338624348*G0_1_1_0_0_0_1_0_0 + 0.338624338624348*G0_1_1_0_0_0_2_0_1 - 0.338624338624348*G0_1_1_0_0_0_3_1_0 - 0.338624338624348*G0_1_1_0_0_0_3_1_1 + 0.338624338624348*G0_1_1_0_0_0_4_1_0 + 0.338624338624348*G0_1_1_0_0_0_5_1_1 - 0.338624338624348*G0_1_1_0_0_1_0_0_0 - 0.338624338624348*G0_1_1_0_0_1_0_0_1 + 0.338624338624348*G0_1_1_0_0_1_1_0_0 + 0.338624338624348*G0_1_1_0_0_1_2_0_1 - 0.338624338624348*G0_1_1_0_0_1_3_1_0 - 0.338624338624348*G0_1_1_0_0_1_3_1_1 + 0.338624338624348*G0_1_1_0_0_1_4_1_0 + 0.338624338624348*G0_1_1_0_0_1_5_1_1 + 0.338624338624348*G0_1_1_1_0_0_0_0_0 + 0.338624338624348*G0_1_1_1_0_0_0_0_1 - 0.338624338624348*G0_1_1_1_0_0_1_0_0 - 0.338624338624348*G0_1_1_1_0_0_2_0_1 + 0.338624338624348*G0_1_1_1_0_0_3_1_0 + 0.338624338624348*G0_1_1_1_0_0_3_1_1 - 0.338624338624348*G0_1_1_1_0_0_4_1_0 - 0.338624338624348*G0_1_1_1_0_0_5_1_1 + 0.338624338624348*G0_1_1_2_0_1_0_0_0 + 0.338624338624348*G0_1_1_2_0_1_0_0_1 - 0.338624338624348*G0_1_1_2_0_1_1_0_0 - 0.338624338624348*G0_1_1_2_0_1_2_0_1 + 0.338624338624348*G0_1_1_2_0_1_3_1_0 + 0.338624338624348*G0_1_1_2_0_1_3_1_1 - 0.338624338624348*G0_1_1_2_0_1_4_1_0 - 0.338624338624348*G0_1_1_2_0_1_5_1_1 - 0.338624338624348*G0_1_1_3_1_0_0_0_0 - 0.338624338624348*G0_1_1_3_1_0_0_0_1 + 0.338624338624348*G0_1_1_3_1_0_1_0_0 + 0.338624338624348*G0_1_1_3_1_0_2_0_1 - 0.338624338624348*G0_1_1_3_1_0_3_1_0 - 0.338624338624348*G0_1_1_3_1_0_3_1_1 + 0.338624338624348*G0_1_1_3_1_0_4_1_0 + 0.338624338624348*G0_1_1_3_1_0_5_1_1 - 0.338624338624348*G0_1_1_3_1_1_0_0_0 - 0.338624338624348*G0_1_1_3_1_1_0_0_1 + 0.338624338624348*G0_1_1_3_1_1_1_0_0 + 0.338624338624348*G0_1_1_3_1_1_2_0_1 - 0.338624338624348*G0_1_1_3_1_1_3_1_0 - 0.338624338624348*G0_1_1_3_1_1_3_1_1 + 0.338624338624348*G0_1_1_3_1_1_4_1_0 + 0.338624338624348*G0_1_1_3_1_1_5_1_1 + 0.338624338624348*G0_1_1_4_1_0_0_0_0 + 0.338624338624348*G0_1_1_4_1_0_0_0_1 - 0.338624338624348*G0_1_1_4_1_0_1_0_0 - 0.338624338624348*G0_1_1_4_1_0_2_0_1 + 0.338624338624348*G0_1_1_4_1_0_3_1_0 + 0.338624338624348*G0_1_1_4_1_0_3_1_1 - 0.338624338624348*G0_1_1_4_1_0_4_1_0 - 0.338624338624348*G0_1_1_4_1_0_5_1_1 + 0.338624338624348*G0_1_1_5_1_1_0_0_0 + 0.338624338624348*G0_1_1_5_1_1_0_0_1 - 0.338624338624348*G0_1_1_5_1_1_1_0_0 - 0.338624338624348*G0_1_1_5_1_1_2_0_1 + 0.338624338624348*G0_1_1_5_1_1_3_1_0 + 0.338624338624348*G0_1_1_5_1_1_3_1_1 - 0.338624338624348*G0_1_1_5_1_1_4_1_0 - 0.338624338624348*G0_1_1_5_1_1_5_1_1;
    A[291] = 0.0;
    A[747] = A[834];
    A[438] = 0.0;
    A[366] = A[192];
    A[318] = 0.0;
    A[776] = A[805] + 1.11746031746033*G0_0_1_0_0_0_0_0_0 + 1.11746031746033*G0_0_1_0_0_0_0_0_1 - 1.11746031746033*G0_0_1_0_0_0_1_0_0 - 1.11746031746033*G0_0_1_0_0_0_2_0_1 + 1.11746031746033*G0_0_1_0_0_0_3_1_0 + 1.11746031746033*G0_0_1_0_0_0_3_1_1 - 1.11746031746033*G0_0_1_0_0_0_4_1_0 - 1.11746031746033*G0_0_1_0_0_0_5_1_1 + 1.11746031746033*G0_0_1_0_0_1_0_0_0 + 1.11746031746033*G0_0_1_0_0_1_0_0_1 - 1.11746031746033*G0_0_1_0_0_1_1_0_0 - 1.11746031746033*G0_0_1_0_0_1_2_0_1 + 1.11746031746033*G0_0_1_0_0_1_3_1_0 + 1.11746031746033*G0_0_1_0_0_1_3_1_1 - 1.11746031746033*G0_0_1_0_0_1_4_1_0 - 1.11746031746033*G0_0_1_0_0_1_5_1_1 - 1.11746031746033*G0_0_1_1_0_0_0_0_0 - 1.11746031746033*G0_0_1_1_0_0_0_0_1 + 1.11746031746033*G0_0_1_1_0_0_1_0_0 + 1.11746031746033*G0_0_1_1_0_0_2_0_1 - 1.11746031746033*G0_0_1_1_0_0_3_1_0 - 1.11746031746033*G0_0_1_1_0_0_3_1_1 + 1.11746031746033*G0_0_1_1_0_0_4_1_0 + 1.11746031746033*G0_0_1_1_0_0_5_1_1 - 1.11746031746033*G0_0_1_2_0_1_0_0_0 - 1.11746031746033*G0_0_1_2_0_1_0_0_1 + 1.11746031746033*G0_0_1_2_0_1_1_0_0 + 1.11746031746033*G0_0_1_2_0_1_2_0_1 - 1.11746031746033*G0_0_1_2_0_1_3_1_0 - 1.11746031746033*G0_0_1_2_0_1_3_1_1 + 1.11746031746033*G0_0_1_2_0_1_4_1_0 + 1.11746031746033*G0_0_1_2_0_1_5_1_1 + 1.11746031746033*G0_0_1_3_1_0_0_0_0 + 1.11746031746033*G0_0_1_3_1_0_0_0_1 - 1.11746031746033*G0_0_1_3_1_0_1_0_0 - 1.11746031746033*G0_0_1_3_1_0_2_0_1 + 1.11746031746033*G0_0_1_3_1_0_3_1_0 + 1.11746031746033*G0_0_1_3_1_0_3_1_1 - 1.11746031746033*G0_0_1_3_1_0_4_1_0 - 1.11746031746033*G0_0_1_3_1_0_5_1_1 + 1.11746031746033*G0_0_1_3_1_1_0_0_0 + 1.11746031746033*G0_0_1_3_1_1_0_0_1 - 1.11746031746033*G0_0_1_3_1_1_1_0_0 - 1.11746031746033*G0_0_1_3_1_1_2_0_1 + 1.11746031746033*G0_0_1_3_1_1_3_1_0 + 1.11746031746033*G0_0_1_3_1_1_3_1_1 - 1.11746031746033*G0_0_1_3_1_1_4_1_0 - 1.11746031746033*G0_0_1_3_1_1_5_1_1 - 1.11746031746033*G0_0_1_4_1_0_0_0_0 - 1.11746031746033*G0_0_1_4_1_0_0_0_1 + 1.11746031746033*G0_0_1_4_1_0_1_0_0 + 1.11746031746033*G0_0_1_4_1_0_2_0_1 - 1.11746031746033*G0_0_1_4_1_0_3_1_0 - 1.11746031746033*G0_0_1_4_1_0_3_1_1 + 1.11746031746033*G0_0_1_4_1_0_4_1_0 + 1.11746031746033*G0_0_1_4_1_0_5_1_1 - 1.11746031746033*G0_0_1_5_1_1_0_0_0 - 1.11746031746033*G0_0_1_5_1_1_0_0_1 + 1.11746031746033*G0_0_1_5_1_1_1_0_0 + 1.11746031746033*G0_0_1_5_1_1_2_0_1 - 1.11746031746033*G0_0_1_5_1_1_3_1_0 - 1.11746031746033*G0_0_1_5_1_1_3_1_1 + 1.11746031746033*G0_0_1_5_1_1_4_1_0 + 1.11746031746033*G0_0_1_5_1_1_5_1_1 - 1.11746031746033*G0_1_0_0_0_0_0_0_0 - 1.11746031746033*G0_1_0_0_0_0_0_0_1 + 1.11746031746033*G0_1_0_0_0_0_1_0_0 + 1.11746031746033*G0_1_0_0_0_0_2_0_1 - 1.11746031746033*G0_1_0_0_0_0_3_1_0 - 1.11746031746033*G0_1_0_0_0_0_3_1_1 + 1.11746031746033*G0_1_0_0_0_0_4_1_0 + 1.11746031746033*G0_1_0_0_0_0_5_1_1 - 1.11746031746033*G0_1_0_0_0_1_0_0_0 - 1.11746031746033*G0_1_0_0_0_1_0_0_1 + 1.11746031746033*G0_1_0_0_0_1_1_0_0 + 1.11746031746033*G0_1_0_0_0_1_2_0_1 - 1.11746031746033*G0_1_0_0_0_1_3_1_0 - 1.11746031746033*G0_1_0_0_0_1_3_1_1 + 1.11746031746033*G0_1_0_0_0_1_4_1_0 + 1.11746031746033*G0_1_0_0_0_1_5_1_1 + 1.11746031746033*G0_1_0_1_0_0_0_0_0 + 1.11746031746033*G0_1_0_1_0_0_0_0_1 - 1.11746031746033*G0_1_0_1_0_0_1_0_0 - 1.11746031746033*G0_1_0_1_0_0_2_0_1 + 1.11746031746033*G0_1_0_1_0_0_3_1_0 + 1.11746031746033*G0_1_0_1_0_0_3_1_1 - 1.11746031746033*G0_1_0_1_0_0_4_1_0 - 1.11746031746033*G0_1_0_1_0_0_5_1_1 + 1.11746031746033*G0_1_0_2_0_1_0_0_0 + 1.11746031746033*G0_1_0_2_0_1_0_0_1 - 1.11746031746033*G0_1_0_2_0_1_1_0_0 - 1.11746031746033*G0_1_0_2_0_1_2_0_1 + 1.11746031746033*G0_1_0_2_0_1_3_1_0 + 1.11746031746033*G0_1_0_2_0_1_3_1_1 - 1.11746031746033*G0_1_0_2_0_1_4_1_0 - 1.11746031746033*G0_1_0_2_0_1_5_1_1 - 1.11746031746033*G0_1_0_3_1_0_0_0_0 - 1.11746031746033*G0_1_0_3_1_0_0_0_1 + 1.11746031746033*G0_1_0_3_1_0_1_0_0 + 1.11746031746033*G0_1_0_3_1_0_2_0_1 - 1.11746031746033*G0_1_0_3_1_0_3_1_0 - 1.11746031746033*G0_1_0_3_1_0_3_1_1 + 1.11746031746033*G0_1_0_3_1_0_4_1_0 + 1.11746031746033*G0_1_0_3_1_0_5_1_1 - 1.11746031746033*G0_1_0_3_1_1_0_0_0 - 1.11746031746033*G0_1_0_3_1_1_0_0_1 + 1.11746031746033*G0_1_0_3_1_1_1_0_0 + 1.11746031746033*G0_1_0_3_1_1_2_0_1 - 1.11746031746033*G0_1_0_3_1_1_3_1_0 - 1.11746031746033*G0_1_0_3_1_1_3_1_1 + 1.11746031746033*G0_1_0_3_1_1_4_1_0 + 1.11746031746033*G0_1_0_3_1_1_5_1_1 + 1.11746031746033*G0_1_0_4_1_0_0_0_0 + 1.11746031746033*G0_1_0_4_1_0_0_0_1 - 1.11746031746033*G0_1_0_4_1_0_1_0_0 - 1.11746031746033*G0_1_0_4_1_0_2_0_1 + 1.11746031746033*G0_1_0_4_1_0_3_1_0 + 1.11746031746033*G0_1_0_4_1_0_3_1_1 - 1.11746031746033*G0_1_0_4_1_0_4_1_0 - 1.11746031746033*G0_1_0_4_1_0_5_1_1 + 1.11746031746033*G0_1_0_5_1_1_0_0_0 + 1.11746031746033*G0_1_0_5_1_1_0_0_1 - 1.11746031746033*G0_1_0_5_1_1_1_0_0 - 1.11746031746033*G0_1_0_5_1_1_2_0_1 + 1.11746031746033*G0_1_0_5_1_1_3_1_0 + 1.11746031746033*G0_1_0_5_1_1_3_1_1 - 1.11746031746033*G0_1_0_5_1_1_4_1_0 - 1.11746031746033*G0_1_0_5_1_1_5_1_1;
    A[461] = 0.0;
    A[397] = A[688];
    A[357] = 0.0;
    A[797] = A[534];
    A[4] = A[5];
    A[721] = 0.0;
    A[388] = 0.0;
    A[838] = A[373];
    A[31] = -4.40624999999983*A[421];
    A[130] = A[769];
    A[66] = A[531];
    A[161] = A[335];
    A[113] = 0.0;
    A[180] = A[645];
    A[136] = 0.0;
    A[594] = A[274];
    A[215] = -A[683] - 1.11746031746033*G0_0_1_0_0_0_0_0_0 - 1.11746031746033*G0_0_1_0_0_0_0_0_1 + 1.11746031746033*G0_0_1_0_0_0_1_0_0 + 1.11746031746033*G0_0_1_0_0_0_2_0_1 - 1.11746031746033*G0_0_1_0_0_0_3_1_0 - 1.11746031746033*G0_0_1_0_0_0_3_1_1 + 1.11746031746033*G0_0_1_0_0_0_4_1_0 + 1.11746031746033*G0_0_1_0_0_0_5_1_1 - 1.11746031746033*G0_0_1_0_0_1_0_0_0 - 1.11746031746033*G0_0_1_0_0_1_0_0_1 + 1.11746031746033*G0_0_1_0_0_1_1_0_0 + 1.11746031746033*G0_0_1_0_0_1_2_0_1 - 1.11746031746033*G0_0_1_0_0_1_3_1_0 - 1.11746031746033*G0_0_1_0_0_1_3_1_1 + 1.11746031746033*G0_0_1_0_0_1_4_1_0 + 1.11746031746033*G0_0_1_0_0_1_5_1_1 + 1.11746031746033*G0_0_1_1_0_0_0_0_0 + 1.11746031746033*G0_0_1_1_0_0_0_0_1 - 1.11746031746033*G0_0_1_1_0_0_1_0_0 - 1.11746031746033*G0_0_1_1_0_0_2_0_1 + 1.11746031746033*G0_0_1_1_0_0_3_1_0 + 1.11746031746033*G0_0_1_1_0_0_3_1_1 - 1.11746031746033*G0_0_1_1_0_0_4_1_0 - 1.11746031746033*G0_0_1_1_0_0_5_1_1 + 1.11746031746033*G0_0_1_2_0_1_0_0_0 + 1.11746031746033*G0_0_1_2_0_1_0_0_1 - 1.11746031746033*G0_0_1_2_0_1_1_0_0 - 1.11746031746033*G0_0_1_2_0_1_2_0_1 + 1.11746031746033*G0_0_1_2_0_1_3_1_0 + 1.11746031746033*G0_0_1_2_0_1_3_1_1 - 1.11746031746033*G0_0_1_2_0_1_4_1_0 - 1.11746031746033*G0_0_1_2_0_1_5_1_1 - 1.11746031746033*G0_0_1_3_1_0_0_0_0 - 1.11746031746033*G0_0_1_3_1_0_0_0_1 + 1.11746031746033*G0_0_1_3_1_0_1_0_0 + 1.11746031746033*G0_0_1_3_1_0_2_0_1 - 1.11746031746033*G0_0_1_3_1_0_3_1_0 - 1.11746031746033*G0_0_1_3_1_0_3_1_1 + 1.11746031746033*G0_0_1_3_1_0_4_1_0 + 1.11746031746033*G0_0_1_3_1_0_5_1_1 - 1.11746031746033*G0_0_1_3_1_1_0_0_0 - 1.11746031746033*G0_0_1_3_1_1_0_0_1 + 1.11746031746033*G0_0_1_3_1_1_1_0_0 + 1.11746031746033*G0_0_1_3_1_1_2_0_1 - 1.11746031746033*G0_0_1_3_1_1_3_1_0 - 1.11746031746033*G0_0_1_3_1_1_3_1_1 + 1.11746031746033*G0_0_1_3_1_1_4_1_0 + 1.11746031746033*G0_0_1_3_1_1_5_1_1 + 1.11746031746033*G0_0_1_4_1_0_0_0_0 + 1.11746031746033*G0_0_1_4_1_0_0_0_1 - 1.11746031746033*G0_0_1_4_1_0_1_0_0 - 1.11746031746033*G0_0_1_4_1_0_2_0_1 + 1.11746031746033*G0_0_1_4_1_0_3_1_0 + 1.11746031746033*G0_0_1_4_1_0_3_1_1 - 1.11746031746033*G0_0_1_4_1_0_4_1_0 - 1.11746031746033*G0_0_1_4_1_0_5_1_1 + 1.11746031746033*G0_0_1_5_1_1_0_0_0 + 1.11746031746033*G0_0_1_5_1_1_0_0_1 - 1.11746031746033*G0_0_1_5_1_1_1_0_0 - 1.11746031746033*G0_0_1_5_1_1_2_0_1 + 1.11746031746033*G0_0_1_5_1_1_3_1_0 + 1.11746031746033*G0_0_1_5_1_1_3_1_1 - 1.11746031746033*G0_0_1_5_1_1_4_1_0 - 1.11746031746033*G0_0_1_5_1_1_5_1_1 - 1.84550264550266*G0_1_1_0_0_0_0_0_0 - 1.84550264550266*G0_1_1_0_0_0_0_0_1 + 1.84550264550266*G0_1_1_0_0_0_1_0_0 + 1.84550264550266*G0_1_1_0_0_0_2_0_1 - 1.84550264550266*G0_1_1_0_0_0_3_1_0 - 1.84550264550266*G0_1_1_0_0_0_3_1_1 + 1.84550264550266*G0_1_1_0_0_0_4_1_0 + 1.84550264550266*G0_1_1_0_0_0_5_1_1 - 1.84550264550266*G0_1_1_0_0_1_0_0_0 - 1.84550264550266*G0_1_1_0_0_1_0_0_1 + 1.84550264550266*G0_1_1_0_0_1_1_0_0 + 1.84550264550266*G0_1_1_0_0_1_2_0_1 - 1.84550264550266*G0_1_1_0_0_1_3_1_0 - 1.84550264550266*G0_1_1_0_0_1_3_1_1 + 1.84550264550266*G0_1_1_0_0_1_4_1_0 + 1.84550264550266*G0_1_1_0_0_1_5_1_1 + 1.84550264550266*G0_1_1_1_0_0_0_0_0 + 1.84550264550266*G0_1_1_1_0_0_0_0_1 - 1.84550264550266*G0_1_1_1_0_0_1_0_0 - 1.84550264550266*G0_1_1_1_0_0_2_0_1 + 1.84550264550266*G0_1_1_1_0_0_3_1_0 + 1.84550264550266*G0_1_1_1_0_0_3_1_1 - 1.84550264550266*G0_1_1_1_0_0_4_1_0 - 1.84550264550266*G0_1_1_1_0_0_5_1_1 + 1.84550264550266*G0_1_1_2_0_1_0_0_0 + 1.84550264550266*G0_1_1_2_0_1_0_0_1 - 1.84550264550266*G0_1_1_2_0_1_1_0_0 - 1.84550264550266*G0_1_1_2_0_1_2_0_1 + 1.84550264550266*G0_1_1_2_0_1_3_1_0 + 1.84550264550266*G0_1_1_2_0_1_3_1_1 - 1.84550264550266*G0_1_1_2_0_1_4_1_0 - 1.84550264550266*G0_1_1_2_0_1_5_1_1 - 1.84550264550266*G0_1_1_3_1_0_0_0_0 - 1.84550264550266*G0_1_1_3_1_0_0_0_1 + 1.84550264550266*G0_1_1_3_1_0_1_0_0 + 1.84550264550266*G0_1_1_3_1_0_2_0_1 - 1.84550264550266*G0_1_1_3_1_0_3_1_0 - 1.84550264550266*G0_1_1_3_1_0_3_1_1 + 1.84550264550266*G0_1_1_3_1_0_4_1_0 + 1.84550264550266*G0_1_1_3_1_0_5_1_1 - 1.84550264550266*G0_1_1_3_1_1_0_0_0 - 1.84550264550266*G0_1_1_3_1_1_0_0_1 + 1.84550264550266*G0_1_1_3_1_1_1_0_0 + 1.84550264550266*G0_1_1_3_1_1_2_0_1 - 1.84550264550266*G0_1_1_3_1_1_3_1_0 - 1.84550264550266*G0_1_1_3_1_1_3_1_1 + 1.84550264550266*G0_1_1_3_1_1_4_1_0 + 1.84550264550266*G0_1_1_3_1_1_5_1_1 + 1.84550264550266*G0_1_1_4_1_0_0_0_0 + 1.84550264550266*G0_1_1_4_1_0_0_0_1 - 1.84550264550266*G0_1_1_4_1_0_1_0_0 - 1.84550264550266*G0_1_1_4_1_0_2_0_1 + 1.84550264550266*G0_1_1_4_1_0_3_1_0 + 1.84550264550266*G0_1_1_4_1_0_3_1_1 - 1.84550264550266*G0_1_1_4_1_0_4_1_0 - 1.84550264550266*G0_1_1_4_1_0_5_1_1 + 1.84550264550266*G0_1_1_5_1_1_0_0_0 + 1.84550264550266*G0_1_1_5_1_1_0_0_1 - 1.84550264550266*G0_1_1_5_1_1_1_0_0 - 1.84550264550266*G0_1_1_5_1_1_2_0_1 + 1.84550264550266*G0_1_1_5_1_1_3_1_0 + 1.84550264550266*G0_1_1_5_1_1_3_1_1 - 1.84550264550266*G0_1_1_5_1_1_4_1_0 - 1.84550264550266*G0_1_1_5_1_1_5_1_1;
    A[892] = -A[215] - 2.08253968253974*G0_0_0_0_0_0_0_0_0 - 2.08253968253974*G0_0_0_0_0_0_0_0_1 + 2.08253968253974*G0_0_0_0_0_0_1_0_0 + 2.08253968253974*G0_0_0_0_0_0_2_0_1 - 2.08253968253974*G0_0_0_0_0_0_3_1_0 - 2.08253968253974*G0_0_0_0_0_0_3_1_1 + 2.08253968253974*G0_0_0_0_0_0_4_1_0 + 2.08253968253974*G0_0_0_0_0_0_5_1_1 - 2.08253968253974*G0_0_0_0_0_1_0_0_0 - 2.08253968253974*G0_0_0_0_0_1_0_0_1 + 2.08253968253974*G0_0_0_0_0_1_1_0_0 + 2.08253968253974*G0_0_0_0_0_1_2_0_1 - 2.08253968253974*G0_0_0_0_0_1_3_1_0 - 2.08253968253974*G0_0_0_0_0_1_3_1_1 + 2.08253968253974*G0_0_0_0_0_1_4_1_0 + 2.08253968253974*G0_0_0_0_0_1_5_1_1 + 2.08253968253974*G0_0_0_1_0_0_0_0_0 + 2.08253968253974*G0_0_0_1_0_0_0_0_1 - 2.08253968253974*G0_0_0_1_0_0_1_0_0 - 2.08253968253974*G0_0_0_1_0_0_2_0_1 + 2.08253968253974*G0_0_0_1_0_0_3_1_0 + 2.08253968253974*G0_0_0_1_0_0_3_1_1 - 2.08253968253974*G0_0_0_1_0_0_4_1_0 - 2.08253968253974*G0_0_0_1_0_0_5_1_1 + 2.08253968253974*G0_0_0_2_0_1_0_0_0 + 2.08253968253974*G0_0_0_2_0_1_0_0_1 - 2.08253968253974*G0_0_0_2_0_1_1_0_0 - 2.08253968253974*G0_0_0_2_0_1_2_0_1 + 2.08253968253974*G0_0_0_2_0_1_3_1_0 + 2.08253968253974*G0_0_0_2_0_1_3_1_1 - 2.08253968253974*G0_0_0_2_0_1_4_1_0 - 2.08253968253974*G0_0_0_2_0_1_5_1_1 - 2.08253968253974*G0_0_0_3_1_0_0_0_0 - 2.08253968253974*G0_0_0_3_1_0_0_0_1 + 2.08253968253974*G0_0_0_3_1_0_1_0_0 + 2.08253968253974*G0_0_0_3_1_0_2_0_1 - 2.08253968253974*G0_0_0_3_1_0_3_1_0 - 2.08253968253974*G0_0_0_3_1_0_3_1_1 + 2.08253968253974*G0_0_0_3_1_0_4_1_0 + 2.08253968253974*G0_0_0_3_1_0_5_1_1 - 2.08253968253974*G0_0_0_3_1_1_0_0_0 - 2.08253968253974*G0_0_0_3_1_1_0_0_1 + 2.08253968253974*G0_0_0_3_1_1_1_0_0 + 2.08253968253974*G0_0_0_3_1_1_2_0_1 - 2.08253968253974*G0_0_0_3_1_1_3_1_0 - 2.08253968253974*G0_0_0_3_1_1_3_1_1 + 2.08253968253974*G0_0_0_3_1_1_4_1_0 + 2.08253968253974*G0_0_0_3_1_1_5_1_1 + 2.08253968253974*G0_0_0_4_1_0_0_0_0 + 2.08253968253974*G0_0_0_4_1_0_0_0_1 - 2.08253968253974*G0_0_0_4_1_0_1_0_0 - 2.08253968253974*G0_0_0_4_1_0_2_0_1 + 2.08253968253974*G0_0_0_4_1_0_3_1_0 + 2.08253968253974*G0_0_0_4_1_0_3_1_1 - 2.08253968253974*G0_0_0_4_1_0_4_1_0 - 2.08253968253974*G0_0_0_4_1_0_5_1_1 + 2.08253968253974*G0_0_0_5_1_1_0_0_0 + 2.08253968253974*G0_0_0_5_1_1_0_0_1 - 2.08253968253974*G0_0_0_5_1_1_1_0_0 - 2.08253968253974*G0_0_0_5_1_1_2_0_1 + 2.08253968253974*G0_0_0_5_1_1_3_1_0 + 2.08253968253974*G0_0_0_5_1_1_3_1_1 - 2.08253968253974*G0_0_0_5_1_1_4_1_0 - 2.08253968253974*G0_0_0_5_1_1_5_1_1 - 1.21058201058204*G0_0_1_0_0_0_0_0_0 - 1.21058201058204*G0_0_1_0_0_0_0_0_1 + 1.21058201058204*G0_0_1_0_0_0_1_0_0 + 1.21058201058204*G0_0_1_0_0_0_2_0_1 - 1.21058201058204*G0_0_1_0_0_0_3_1_0 - 1.21058201058204*G0_0_1_0_0_0_3_1_1 + 1.21058201058204*G0_0_1_0_0_0_4_1_0 + 1.21058201058204*G0_0_1_0_0_0_5_1_1 - 1.21058201058204*G0_0_1_0_0_1_0_0_0 - 1.21058201058204*G0_0_1_0_0_1_0_0_1 + 1.21058201058204*G0_0_1_0_0_1_1_0_0 + 1.21058201058204*G0_0_1_0_0_1_2_0_1 - 1.21058201058204*G0_0_1_0_0_1_3_1_0 - 1.21058201058204*G0_0_1_0_0_1_3_1_1 + 1.21058201058204*G0_0_1_0_0_1_4_1_0 + 1.21058201058204*G0_0_1_0_0_1_5_1_1 + 1.21058201058204*G0_0_1_1_0_0_0_0_0 + 1.21058201058204*G0_0_1_1_0_0_0_0_1 - 1.21058201058204*G0_0_1_1_0_0_1_0_0 - 1.21058201058204*G0_0_1_1_0_0_2_0_1 + 1.21058201058204*G0_0_1_1_0_0_3_1_0 + 1.21058201058204*G0_0_1_1_0_0_3_1_1 - 1.21058201058204*G0_0_1_1_0_0_4_1_0 - 1.21058201058204*G0_0_1_1_0_0_5_1_1 + 1.21058201058204*G0_0_1_2_0_1_0_0_0 + 1.21058201058204*G0_0_1_2_0_1_0_0_1 - 1.21058201058204*G0_0_1_2_0_1_1_0_0 - 1.21058201058204*G0_0_1_2_0_1_2_0_1 + 1.21058201058204*G0_0_1_2_0_1_3_1_0 + 1.21058201058204*G0_0_1_2_0_1_3_1_1 - 1.21058201058204*G0_0_1_2_0_1_4_1_0 - 1.21058201058204*G0_0_1_2_0_1_5_1_1 - 1.21058201058204*G0_0_1_3_1_0_0_0_0 - 1.21058201058204*G0_0_1_3_1_0_0_0_1 + 1.21058201058204*G0_0_1_3_1_0_1_0_0 + 1.21058201058204*G0_0_1_3_1_0_2_0_1 - 1.21058201058204*G0_0_1_3_1_0_3_1_0 - 1.21058201058204*G0_0_1_3_1_0_3_1_1 + 1.21058201058204*G0_0_1_3_1_0_4_1_0 + 1.21058201058204*G0_0_1_3_1_0_5_1_1 - 1.21058201058204*G0_0_1_3_1_1_0_0_0 - 1.21058201058204*G0_0_1_3_1_1_0_0_1 + 1.21058201058204*G0_0_1_3_1_1_1_0_0 + 1.21058201058204*G0_0_1_3_1_1_2_0_1 - 1.21058201058204*G0_0_1_3_1_1_3_1_0 - 1.21058201058204*G0_0_1_3_1_1_3_1_1 + 1.21058201058204*G0_0_1_3_1_1_4_1_0 + 1.21058201058204*G0_0_1_3_1_1_5_1_1 + 1.21058201058204*G0_0_1_4_1_0_0_0_0 + 1.21058201058204*G0_0_1_4_1_0_0_0_1 - 1.21058201058204*G0_0_1_4_1_0_1_0_0 - 1.21058201058204*G0_0_1_4_1_0_2_0_1 + 1.21058201058204*G0_0_1_4_1_0_3_1_0 + 1.21058201058204*G0_0_1_4_1_0_3_1_1 - 1.21058201058204*G0_0_1_4_1_0_4_1_0 - 1.21058201058204*G0_0_1_4_1_0_5_1_1 + 1.21058201058204*G0_0_1_5_1_1_0_0_0 + 1.21058201058204*G0_0_1_5_1_1_0_0_1 - 1.21058201058204*G0_0_1_5_1_1_1_0_0 - 1.21058201058204*G0_0_1_5_1_1_2_0_1 + 1.21058201058204*G0_0_1_5_1_1_3_1_0 + 1.21058201058204*G0_0_1_5_1_1_3_1_1 - 1.21058201058204*G0_0_1_5_1_1_4_1_0 - 1.21058201058204*G0_0_1_5_1_1_5_1_1 - 1.21058201058203*G0_1_0_0_0_0_0_0_0 - 1.21058201058203*G0_1_0_0_0_0_0_0_1 + 1.21058201058203*G0_1_0_0_0_0_1_0_0 + 1.21058201058203*G0_1_0_0_0_0_2_0_1 - 1.21058201058203*G0_1_0_0_0_0_3_1_0 - 1.21058201058203*G0_1_0_0_0_0_3_1_1 + 1.21058201058203*G0_1_0_0_0_0_4_1_0 + 1.21058201058203*G0_1_0_0_0_0_5_1_1 - 1.21058201058203*G0_1_0_0_0_1_0_0_0 - 1.21058201058203*G0_1_0_0_0_1_0_0_1 + 1.21058201058203*G0_1_0_0_0_1_1_0_0 + 1.21058201058203*G0_1_0_0_0_1_2_0_1 - 1.21058201058203*G0_1_0_0_0_1_3_1_0 - 1.21058201058203*G0_1_0_0_0_1_3_1_1 + 1.21058201058203*G0_1_0_0_0_1_4_1_0 + 1.21058201058203*G0_1_0_0_0_1_5_1_1 + 1.21058201058203*G0_1_0_1_0_0_0_0_0 + 1.21058201058203*G0_1_0_1_0_0_0_0_1 - 1.21058201058203*G0_1_0_1_0_0_1_0_0 - 1.21058201058203*G0_1_0_1_0_0_2_0_1 + 1.21058201058203*G0_1_0_1_0_0_3_1_0 + 1.21058201058203*G0_1_0_1_0_0_3_1_1 - 1.21058201058203*G0_1_0_1_0_0_4_1_0 - 1.21058201058203*G0_1_0_1_0_0_5_1_1 + 1.21058201058203*G0_1_0_2_0_1_0_0_0 + 1.21058201058203*G0_1_0_2_0_1_0_0_1 - 1.21058201058203*G0_1_0_2_0_1_1_0_0 - 1.21058201058203*G0_1_0_2_0_1_2_0_1 + 1.21058201058203*G0_1_0_2_0_1_3_1_0 + 1.21058201058203*G0_1_0_2_0_1_3_1_1 - 1.21058201058203*G0_1_0_2_0_1_4_1_0 - 1.21058201058203*G0_1_0_2_0_1_5_1_1 - 1.21058201058203*G0_1_0_3_1_0_0_0_0 - 1.21058201058203*G0_1_0_3_1_0_0_0_1 + 1.21058201058203*G0_1_0_3_1_0_1_0_0 + 1.21058201058203*G0_1_0_3_1_0_2_0_1 - 1.21058201058203*G0_1_0_3_1_0_3_1_0 - 1.21058201058203*G0_1_0_3_1_0_3_1_1 + 1.21058201058203*G0_1_0_3_1_0_4_1_0 + 1.21058201058203*G0_1_0_3_1_0_5_1_1 - 1.21058201058203*G0_1_0_3_1_1_0_0_0 - 1.21058201058203*G0_1_0_3_1_1_0_0_1 + 1.21058201058203*G0_1_0_3_1_1_1_0_0 + 1.21058201058203*G0_1_0_3_1_1_2_0_1 - 1.21058201058203*G0_1_0_3_1_1_3_1_0 - 1.21058201058203*G0_1_0_3_1_1_3_1_1 + 1.21058201058203*G0_1_0_3_1_1_4_1_0 + 1.21058201058203*G0_1_0_3_1_1_5_1_1 + 1.21058201058203*G0_1_0_4_1_0_0_0_0 + 1.21058201058203*G0_1_0_4_1_0_0_0_1 - 1.21058201058203*G0_1_0_4_1_0_1_0_0 - 1.21058201058203*G0_1_0_4_1_0_2_0_1 + 1.21058201058203*G0_1_0_4_1_0_3_1_0 + 1.21058201058203*G0_1_0_4_1_0_3_1_1 - 1.21058201058203*G0_1_0_4_1_0_4_1_0 - 1.21058201058203*G0_1_0_4_1_0_5_1_1 + 1.21058201058203*G0_1_0_5_1_1_0_0_0 + 1.21058201058203*G0_1_0_5_1_1_0_0_1 - 1.21058201058203*G0_1_0_5_1_1_1_0_0 - 1.21058201058203*G0_1_0_5_1_1_2_0_1 + 1.21058201058203*G0_1_0_5_1_1_3_1_0 + 1.21058201058203*G0_1_0_5_1_1_3_1_1 - 1.21058201058203*G0_1_0_5_1_1_4_1_0 - 1.21058201058203*G0_1_0_5_1_1_5_1_1;
    A[427] = A[892];
    A[171] = 0.0;
    A[619] = A[154];
    A[499] = A[34];
    A[206] = 0.0;
    A[648] = A[96];
    A[528] = A[63];
    A[685] = A[307];
    A[565] = A[303];
    A[718] = A[252];
    A[441] = 0.0;
    A[329] = 0.0;
    A[390] = A[14];
    A[346] = 0.0;
    A[804] = -A[273] + 0.880423280423283*G0_0_0_0_0_0_0_0_0 + 0.880423280423283*G0_0_0_0_0_0_0_0_1 - 0.880423280423283*G0_0_0_0_0_0_1_0_0 - 0.880423280423283*G0_0_0_0_0_0_2_0_1 + 0.880423280423283*G0_0_0_0_0_0_3_1_0 + 0.880423280423283*G0_0_0_0_0_0_3_1_1 - 0.880423280423283*G0_0_0_0_0_0_4_1_0 - 0.880423280423283*G0_0_0_0_0_0_5_1_1 + 0.880423280423283*G0_0_0_0_0_1_0_0_0 + 0.880423280423283*G0_0_0_0_0_1_0_0_1 - 0.880423280423283*G0_0_0_0_0_1_1_0_0 - 0.880423280423283*G0_0_0_0_0_1_2_0_1 + 0.880423280423283*G0_0_0_0_0_1_3_1_0 + 0.880423280423283*G0_0_0_0_0_1_3_1_1 - 0.880423280423283*G0_0_0_0_0_1_4_1_0 - 0.880423280423283*G0_0_0_0_0_1_5_1_1 - 0.880423280423283*G0_0_0_1_0_0_0_0_0 - 0.880423280423283*G0_0_0_1_0_0_0_0_1 + 0.880423280423283*G0_0_0_1_0_0_1_0_0 + 0.880423280423283*G0_0_0_1_0_0_2_0_1 - 0.880423280423283*G0_0_0_1_0_0_3_1_0 - 0.880423280423283*G0_0_0_1_0_0_3_1_1 + 0.880423280423283*G0_0_0_1_0_0_4_1_0 + 0.880423280423283*G0_0_0_1_0_0_5_1_1 - 0.880423280423283*G0_0_0_2_0_1_0_0_0 - 0.880423280423283*G0_0_0_2_0_1_0_0_1 + 0.880423280423283*G0_0_0_2_0_1_1_0_0 + 0.880423280423283*G0_0_0_2_0_1_2_0_1 - 0.880423280423283*G0_0_0_2_0_1_3_1_0 - 0.880423280423283*G0_0_0_2_0_1_3_1_1 + 0.880423280423283*G0_0_0_2_0_1_4_1_0 + 0.880423280423283*G0_0_0_2_0_1_5_1_1 + 0.880423280423283*G0_0_0_3_1_0_0_0_0 + 0.880423280423283*G0_0_0_3_1_0_0_0_1 - 0.880423280423283*G0_0_0_3_1_0_1_0_0 - 0.880423280423283*G0_0_0_3_1_0_2_0_1 + 0.880423280423283*G0_0_0_3_1_0_3_1_0 + 0.880423280423283*G0_0_0_3_1_0_3_1_1 - 0.880423280423283*G0_0_0_3_1_0_4_1_0 - 0.880423280423283*G0_0_0_3_1_0_5_1_1 + 0.880423280423283*G0_0_0_3_1_1_0_0_0 + 0.880423280423283*G0_0_0_3_1_1_0_0_1 - 0.880423280423283*G0_0_0_3_1_1_1_0_0 - 0.880423280423283*G0_0_0_3_1_1_2_0_1 + 0.880423280423283*G0_0_0_3_1_1_3_1_0 + 0.880423280423283*G0_0_0_3_1_1_3_1_1 - 0.880423280423283*G0_0_0_3_1_1_4_1_0 - 0.880423280423283*G0_0_0_3_1_1_5_1_1 - 0.880423280423283*G0_0_0_4_1_0_0_0_0 - 0.880423280423283*G0_0_0_4_1_0_0_0_1 + 0.880423280423283*G0_0_0_4_1_0_1_0_0 + 0.880423280423283*G0_0_0_4_1_0_2_0_1 - 0.880423280423283*G0_0_0_4_1_0_3_1_0 - 0.880423280423283*G0_0_0_4_1_0_3_1_1 + 0.880423280423283*G0_0_0_4_1_0_4_1_0 + 0.880423280423283*G0_0_0_4_1_0_5_1_1 - 0.880423280423283*G0_0_0_5_1_1_0_0_0 - 0.880423280423283*G0_0_0_5_1_1_0_0_1 + 0.880423280423283*G0_0_0_5_1_1_1_0_0 + 0.880423280423283*G0_0_0_5_1_1_2_0_1 - 0.880423280423283*G0_0_0_5_1_1_3_1_0 - 0.880423280423283*G0_0_0_5_1_1_3_1_1 + 0.880423280423283*G0_0_0_5_1_1_4_1_0 + 0.880423280423283*G0_0_0_5_1_1_5_1_1 + 0.541798941798942*G0_0_1_0_0_0_0_0_0 + 0.541798941798942*G0_0_1_0_0_0_0_0_1 - 0.541798941798942*G0_0_1_0_0_0_1_0_0 - 0.541798941798942*G0_0_1_0_0_0_2_0_1 + 0.541798941798942*G0_0_1_0_0_0_3_1_0 + 0.541798941798942*G0_0_1_0_0_0_3_1_1 - 0.541798941798942*G0_0_1_0_0_0_4_1_0 - 0.541798941798942*G0_0_1_0_0_0_5_1_1 + 0.541798941798942*G0_0_1_0_0_1_0_0_0 + 0.541798941798942*G0_0_1_0_0_1_0_0_1 - 0.541798941798942*G0_0_1_0_0_1_1_0_0 - 0.541798941798942*G0_0_1_0_0_1_2_0_1 + 0.541798941798942*G0_0_1_0_0_1_3_1_0 + 0.541798941798942*G0_0_1_0_0_1_3_1_1 - 0.541798941798942*G0_0_1_0_0_1_4_1_0 - 0.541798941798942*G0_0_1_0_0_1_5_1_1 - 0.541798941798942*G0_0_1_1_0_0_0_0_0 - 0.541798941798942*G0_0_1_1_0_0_0_0_1 + 0.541798941798942*G0_0_1_1_0_0_1_0_0 + 0.541798941798942*G0_0_1_1_0_0_2_0_1 - 0.541798941798942*G0_0_1_1_0_0_3_1_0 - 0.541798941798942*G0_0_1_1_0_0_3_1_1 + 0.541798941798942*G0_0_1_1_0_0_4_1_0 + 0.541798941798942*G0_0_1_1_0_0_5_1_1 - 0.541798941798942*G0_0_1_2_0_1_0_0_0 - 0.541798941798942*G0_0_1_2_0_1_0_0_1 + 0.541798941798942*G0_0_1_2_0_1_1_0_0 + 0.541798941798942*G0_0_1_2_0_1_2_0_1 - 0.541798941798942*G0_0_1_2_0_1_3_1_0 - 0.541798941798942*G0_0_1_2_0_1_3_1_1 + 0.541798941798942*G0_0_1_2_0_1_4_1_0 + 0.541798941798942*G0_0_1_2_0_1_5_1_1 + 0.541798941798942*G0_0_1_3_1_0_0_0_0 + 0.541798941798942*G0_0_1_3_1_0_0_0_1 - 0.541798941798942*G0_0_1_3_1_0_1_0_0 - 0.541798941798942*G0_0_1_3_1_0_2_0_1 + 0.541798941798942*G0_0_1_3_1_0_3_1_0 + 0.541798941798942*G0_0_1_3_1_0_3_1_1 - 0.541798941798942*G0_0_1_3_1_0_4_1_0 - 0.541798941798942*G0_0_1_3_1_0_5_1_1 + 0.541798941798942*G0_0_1_3_1_1_0_0_0 + 0.541798941798942*G0_0_1_3_1_1_0_0_1 - 0.541798941798942*G0_0_1_3_1_1_1_0_0 - 0.541798941798942*G0_0_1_3_1_1_2_0_1 + 0.541798941798942*G0_0_1_3_1_1_3_1_0 + 0.541798941798942*G0_0_1_3_1_1_3_1_1 - 0.541798941798942*G0_0_1_3_1_1_4_1_0 - 0.541798941798942*G0_0_1_3_1_1_5_1_1 - 0.541798941798942*G0_0_1_4_1_0_0_0_0 - 0.541798941798942*G0_0_1_4_1_0_0_0_1 + 0.541798941798942*G0_0_1_4_1_0_1_0_0 + 0.541798941798942*G0_0_1_4_1_0_2_0_1 - 0.541798941798942*G0_0_1_4_1_0_3_1_0 - 0.541798941798942*G0_0_1_4_1_0_3_1_1 + 0.541798941798942*G0_0_1_4_1_0_4_1_0 + 0.541798941798942*G0_0_1_4_1_0_5_1_1 - 0.541798941798942*G0_0_1_5_1_1_0_0_0 - 0.541798941798942*G0_0_1_5_1_1_0_0_1 + 0.541798941798942*G0_0_1_5_1_1_1_0_0 + 0.541798941798942*G0_0_1_5_1_1_2_0_1 - 0.541798941798942*G0_0_1_5_1_1_3_1_0 - 0.541798941798942*G0_0_1_5_1_1_3_1_1 + 0.541798941798942*G0_0_1_5_1_1_4_1_0 + 0.541798941798942*G0_0_1_5_1_1_5_1_1;
    A[27] = 0.0;
    A[728] = 0.0;
    A[387] = 0.0;
    A[831] = A[192];
    A[56] = 0.0;
    A[755] = 0.0;
    A[416] = 0.0;
    A[862] = A[688];
    A[61] = -0.0566137566137575*G0_1_0_0_0_0_0_0_0 - 0.0566137566137575*G0_1_0_0_0_0_0_0_1 + 0.0566137566137575*G0_1_0_0_0_0_1_0_0 + 0.0566137566137575*G0_1_0_0_0_0_2_0_1 - 0.0566137566137575*G0_1_0_0_0_0_3_1_0 - 0.0566137566137575*G0_1_0_0_0_0_3_1_1 + 0.0566137566137575*G0_1_0_0_0_0_4_1_0 + 0.0566137566137575*G0_1_0_0_0_0_5_1_1 - 0.0566137566137575*G0_1_0_0_0_1_0_0_0 - 0.0566137566137575*G0_1_0_0_0_1_0_0_1 + 0.0566137566137575*G0_1_0_0_0_1_1_0_0 + 0.0566137566137575*G0_1_0_0_0_1_2_0_1 - 0.0566137566137575*G0_1_0_0_0_1_3_1_0 - 0.0566137566137575*G0_1_0_0_0_1_3_1_1 + 0.0566137566137575*G0_1_0_0_0_1_4_1_0 + 0.0566137566137575*G0_1_0_0_0_1_5_1_1 + 0.0566137566137575*G0_1_0_1_0_0_0_0_0 + 0.0566137566137575*G0_1_0_1_0_0_0_0_1 - 0.0566137566137575*G0_1_0_1_0_0_1_0_0 - 0.0566137566137575*G0_1_0_1_0_0_2_0_1 + 0.0566137566137575*G0_1_0_1_0_0_3_1_0 + 0.0566137566137575*G0_1_0_1_0_0_3_1_1 - 0.0566137566137575*G0_1_0_1_0_0_4_1_0 - 0.0566137566137575*G0_1_0_1_0_0_5_1_1 + 0.0566137566137575*G0_1_0_2_0_1_0_0_0 + 0.0566137566137575*G0_1_0_2_0_1_0_0_1 - 0.0566137566137575*G0_1_0_2_0_1_1_0_0 - 0.0566137566137575*G0_1_0_2_0_1_2_0_1 + 0.0566137566137575*G0_1_0_2_0_1_3_1_0 + 0.0566137566137575*G0_1_0_2_0_1_3_1_1 - 0.0566137566137575*G0_1_0_2_0_1_4_1_0 - 0.0566137566137575*G0_1_0_2_0_1_5_1_1 - 0.0566137566137575*G0_1_0_3_1_0_0_0_0 - 0.0566137566137575*G0_1_0_3_1_0_0_0_1 + 0.0566137566137575*G0_1_0_3_1_0_1_0_0 + 0.0566137566137575*G0_1_0_3_1_0_2_0_1 - 0.0566137566137575*G0_1_0_3_1_0_3_1_0 - 0.0566137566137575*G0_1_0_3_1_0_3_1_1 + 0.0566137566137575*G0_1_0_3_1_0_4_1_0 + 0.0566137566137575*G0_1_0_3_1_0_5_1_1 - 0.0566137566137575*G0_1_0_3_1_1_0_0_0 - 0.0566137566137575*G0_1_0_3_1_1_0_0_1 + 0.0566137566137575*G0_1_0_3_1_1_1_0_0 + 0.0566137566137575*G0_1_0_3_1_1_2_0_1 - 0.0566137566137575*G0_1_0_3_1_1_3_1_0 - 0.0566137566137575*G0_1_0_3_1_1_3_1_1 + 0.0566137566137575*G0_1_0_3_1_1_4_1_0 + 0.0566137566137575*G0_1_0_3_1_1_5_1_1 + 0.0566137566137575*G0_1_0_4_1_0_0_0_0 + 0.0566137566137575*G0_1_0_4_1_0_0_0_1 - 0.0566137566137575*G0_1_0_4_1_0_1_0_0 - 0.0566137566137575*G0_1_0_4_1_0_2_0_1 + 0.0566137566137575*G0_1_0_4_1_0_3_1_0 + 0.0566137566137575*G0_1_0_4_1_0_3_1_1 - 0.0566137566137575*G0_1_0_4_1_0_4_1_0 - 0.0566137566137575*G0_1_0_4_1_0_5_1_1 + 0.0566137566137575*G0_1_0_5_1_1_0_0_0 + 0.0566137566137575*G0_1_0_5_1_1_0_0_1 - 0.0566137566137575*G0_1_0_5_1_1_1_0_0 - 0.0566137566137575*G0_1_0_5_1_1_2_0_1 + 0.0566137566137575*G0_1_0_5_1_1_3_1_0 + 0.0566137566137575*G0_1_0_5_1_1_3_1_1 - 0.0566137566137575*G0_1_0_5_1_1_4_1_0 - 0.0566137566137575*G0_1_0_5_1_1_5_1_1;
    A[466] = -A[61] + 0.0566137566137574*G0_0_0_0_0_0_0_0_0 + 0.0566137566137574*G0_0_0_0_0_0_0_0_1 - 0.0566137566137574*G0_0_0_0_0_0_1_0_0 - 0.0566137566137574*G0_0_0_0_0_0_2_0_1 + 0.0566137566137574*G0_0_0_0_0_0_3_1_0 + 0.0566137566137574*G0_0_0_0_0_0_3_1_1 - 0.0566137566137574*G0_0_0_0_0_0_4_1_0 - 0.0566137566137574*G0_0_0_0_0_0_5_1_1 + 0.0566137566137574*G0_0_0_0_0_1_0_0_0 + 0.0566137566137574*G0_0_0_0_0_1_0_0_1 - 0.0566137566137574*G0_0_0_0_0_1_1_0_0 - 0.0566137566137574*G0_0_0_0_0_1_2_0_1 + 0.0566137566137574*G0_0_0_0_0_1_3_1_0 + 0.0566137566137574*G0_0_0_0_0_1_3_1_1 - 0.0566137566137574*G0_0_0_0_0_1_4_1_0 - 0.0566137566137574*G0_0_0_0_0_1_5_1_1 - 0.0566137566137574*G0_0_0_1_0_0_0_0_0 - 0.0566137566137574*G0_0_0_1_0_0_0_0_1 + 0.0566137566137574*G0_0_0_1_0_0_1_0_0 + 0.0566137566137574*G0_0_0_1_0_0_2_0_1 - 0.0566137566137574*G0_0_0_1_0_0_3_1_0 - 0.0566137566137574*G0_0_0_1_0_0_3_1_1 + 0.0566137566137574*G0_0_0_1_0_0_4_1_0 + 0.0566137566137574*G0_0_0_1_0_0_5_1_1 - 0.0566137566137574*G0_0_0_2_0_1_0_0_0 - 0.0566137566137574*G0_0_0_2_0_1_0_0_1 + 0.0566137566137574*G0_0_0_2_0_1_1_0_0 + 0.0566137566137574*G0_0_0_2_0_1_2_0_1 - 0.0566137566137574*G0_0_0_2_0_1_3_1_0 - 0.0566137566137574*G0_0_0_2_0_1_3_1_1 + 0.0566137566137574*G0_0_0_2_0_1_4_1_0 + 0.0566137566137574*G0_0_0_2_0_1_5_1_1 + 0.0566137566137574*G0_0_0_3_1_0_0_0_0 + 0.0566137566137574*G0_0_0_3_1_0_0_0_1 - 0.0566137566137574*G0_0_0_3_1_0_1_0_0 - 0.0566137566137574*G0_0_0_3_1_0_2_0_1 + 0.0566137566137574*G0_0_0_3_1_0_3_1_0 + 0.0566137566137574*G0_0_0_3_1_0_3_1_1 - 0.0566137566137574*G0_0_0_3_1_0_4_1_0 - 0.0566137566137574*G0_0_0_3_1_0_5_1_1 + 0.0566137566137574*G0_0_0_3_1_1_0_0_0 + 0.0566137566137574*G0_0_0_3_1_1_0_0_1 - 0.0566137566137574*G0_0_0_3_1_1_1_0_0 - 0.0566137566137574*G0_0_0_3_1_1_2_0_1 + 0.0566137566137574*G0_0_0_3_1_1_3_1_0 + 0.0566137566137574*G0_0_0_3_1_1_3_1_1 - 0.0566137566137574*G0_0_0_3_1_1_4_1_0 - 0.0566137566137574*G0_0_0_3_1_1_5_1_1 - 0.0566137566137574*G0_0_0_4_1_0_0_0_0 - 0.0566137566137574*G0_0_0_4_1_0_0_0_1 + 0.0566137566137574*G0_0_0_4_1_0_1_0_0 + 0.0566137566137574*G0_0_0_4_1_0_2_0_1 - 0.0566137566137574*G0_0_0_4_1_0_3_1_0 - 0.0566137566137574*G0_0_0_4_1_0_3_1_1 + 0.0566137566137574*G0_0_0_4_1_0_4_1_0 + 0.0566137566137574*G0_0_0_4_1_0_5_1_1 - 0.0566137566137574*G0_0_0_5_1_1_0_0_0 - 0.0566137566137574*G0_0_0_5_1_1_0_0_1 + 0.0566137566137574*G0_0_0_5_1_1_1_0_0 + 0.0566137566137574*G0_0_0_5_1_1_2_0_1 - 0.0566137566137574*G0_0_0_5_1_1_3_1_0 - 0.0566137566137574*G0_0_0_5_1_1_3_1_1 + 0.0566137566137574*G0_0_0_5_1_1_4_1_0 + 0.0566137566137574*G0_0_0_5_1_1_5_1_1;
    A[782] = 0.0;
    A[893] = A[428];
    A[118] = 0.0;
    A[821] = 0.0;
    A[852] = 0.0;
    A[212] = A[677];
    A[626] = A[335];
    A[490] = 0.0;
    A[209] = 0.0;
    A[657] = A[192];
    A[577] = 0.0;
    A[521] = 0.0;
    A[234] = 0.0;
    A[676] = A[181];
    A[600] = 0.0;
    A[556] = A[91];
    A[711] = -A[621] + 0.541798941798938*G0_1_0_0_0_0_0_0_0 + 0.541798941798938*G0_1_0_0_0_0_0_0_1 - 0.541798941798938*G0_1_0_0_0_0_1_0_0 - 0.541798941798938*G0_1_0_0_0_0_2_0_1 + 0.541798941798938*G0_1_0_0_0_0_3_1_0 + 0.541798941798938*G0_1_0_0_0_0_3_1_1 - 0.541798941798938*G0_1_0_0_0_0_4_1_0 - 0.541798941798938*G0_1_0_0_0_0_5_1_1 + 0.541798941798938*G0_1_0_0_0_1_0_0_0 + 0.541798941798938*G0_1_0_0_0_1_0_0_1 - 0.541798941798938*G0_1_0_0_0_1_1_0_0 - 0.541798941798938*G0_1_0_0_0_1_2_0_1 + 0.541798941798938*G0_1_0_0_0_1_3_1_0 + 0.541798941798938*G0_1_0_0_0_1_3_1_1 - 0.541798941798938*G0_1_0_0_0_1_4_1_0 - 0.541798941798938*G0_1_0_0_0_1_5_1_1 - 0.541798941798938*G0_1_0_1_0_0_0_0_0 - 0.541798941798938*G0_1_0_1_0_0_0_0_1 + 0.541798941798938*G0_1_0_1_0_0_1_0_0 + 0.541798941798938*G0_1_0_1_0_0_2_0_1 - 0.541798941798938*G0_1_0_1_0_0_3_1_0 - 0.541798941798938*G0_1_0_1_0_0_3_1_1 + 0.541798941798938*G0_1_0_1_0_0_4_1_0 + 0.541798941798938*G0_1_0_1_0_0_5_1_1 - 0.541798941798938*G0_1_0_2_0_1_0_0_0 - 0.541798941798938*G0_1_0_2_0_1_0_0_1 + 0.541798941798938*G0_1_0_2_0_1_1_0_0 + 0.541798941798938*G0_1_0_2_0_1_2_0_1 - 0.541798941798938*G0_1_0_2_0_1_3_1_0 - 0.541798941798938*G0_1_0_2_0_1_3_1_1 + 0.541798941798938*G0_1_0_2_0_1_4_1_0 + 0.541798941798938*G0_1_0_2_0_1_5_1_1 + 0.541798941798938*G0_1_0_3_1_0_0_0_0 + 0.541798941798938*G0_1_0_3_1_0_0_0_1 - 0.541798941798938*G0_1_0_3_1_0_1_0_0 - 0.541798941798938*G0_1_0_3_1_0_2_0_1 + 0.541798941798938*G0_1_0_3_1_0_3_1_0 + 0.541798941798938*G0_1_0_3_1_0_3_1_1 - 0.541798941798938*G0_1_0_3_1_0_4_1_0 - 0.541798941798938*G0_1_0_3_1_0_5_1_1 + 0.541798941798938*G0_1_0_3_1_1_0_0_0 + 0.541798941798938*G0_1_0_3_1_1_0_0_1 - 0.541798941798938*G0_1_0_3_1_1_1_0_0 - 0.541798941798938*G0_1_0_3_1_1_2_0_1 + 0.541798941798938*G0_1_0_3_1_1_3_1_0 + 0.541798941798938*G0_1_0_3_1_1_3_1_1 - 0.541798941798938*G0_1_0_3_1_1_4_1_0 - 0.541798941798938*G0_1_0_3_1_1_5_1_1 - 0.541798941798938*G0_1_0_4_1_0_0_0_0 - 0.541798941798938*G0_1_0_4_1_0_0_0_1 + 0.541798941798938*G0_1_0_4_1_0_1_0_0 + 0.541798941798938*G0_1_0_4_1_0_2_0_1 - 0.541798941798938*G0_1_0_4_1_0_3_1_0 - 0.541798941798938*G0_1_0_4_1_0_3_1_1 + 0.541798941798938*G0_1_0_4_1_0_4_1_0 + 0.541798941798938*G0_1_0_4_1_0_5_1_1 - 0.541798941798938*G0_1_0_5_1_1_0_0_0 - 0.541798941798938*G0_1_0_5_1_1_0_0_1 + 0.541798941798938*G0_1_0_5_1_1_1_0_0 + 0.541798941798938*G0_1_0_5_1_1_2_0_1 - 0.541798941798938*G0_1_0_5_1_1_3_1_0 - 0.541798941798938*G0_1_0_5_1_1_3_1_1 + 0.541798941798938*G0_1_0_5_1_1_4_1_0 + 0.541798941798938*G0_1_0_5_1_1_5_1_1 + 0.880423280423282*G0_1_1_0_0_0_0_0_0 + 0.880423280423282*G0_1_1_0_0_0_0_0_1 - 0.880423280423282*G0_1_1_0_0_0_1_0_0 - 0.880423280423282*G0_1_1_0_0_0_2_0_1 + 0.880423280423282*G0_1_1_0_0_0_3_1_0 + 0.880423280423282*G0_1_1_0_0_0_3_1_1 - 0.880423280423282*G0_1_1_0_0_0_4_1_0 - 0.880423280423282*G0_1_1_0_0_0_5_1_1 + 0.880423280423282*G0_1_1_0_0_1_0_0_0 + 0.880423280423282*G0_1_1_0_0_1_0_0_1 - 0.880423280423282*G0_1_1_0_0_1_1_0_0 - 0.880423280423282*G0_1_1_0_0_1_2_0_1 + 0.880423280423282*G0_1_1_0_0_1_3_1_0 + 0.880423280423282*G0_1_1_0_0_1_3_1_1 - 0.880423280423282*G0_1_1_0_0_1_4_1_0 - 0.880423280423282*G0_1_1_0_0_1_5_1_1 - 0.880423280423282*G0_1_1_1_0_0_0_0_0 - 0.880423280423282*G0_1_1_1_0_0_0_0_1 + 0.880423280423282*G0_1_1_1_0_0_1_0_0 + 0.880423280423282*G0_1_1_1_0_0_2_0_1 - 0.880423280423282*G0_1_1_1_0_0_3_1_0 - 0.880423280423282*G0_1_1_1_0_0_3_1_1 + 0.880423280423282*G0_1_1_1_0_0_4_1_0 + 0.880423280423282*G0_1_1_1_0_0_5_1_1 - 0.880423280423282*G0_1_1_2_0_1_0_0_0 - 0.880423280423282*G0_1_1_2_0_1_0_0_1 + 0.880423280423282*G0_1_1_2_0_1_1_0_0 + 0.880423280423282*G0_1_1_2_0_1_2_0_1 - 0.880423280423282*G0_1_1_2_0_1_3_1_0 - 0.880423280423282*G0_1_1_2_0_1_3_1_1 + 0.880423280423282*G0_1_1_2_0_1_4_1_0 + 0.880423280423282*G0_1_1_2_0_1_5_1_1 + 0.880423280423282*G0_1_1_3_1_0_0_0_0 + 0.880423280423282*G0_1_1_3_1_0_0_0_1 - 0.880423280423282*G0_1_1_3_1_0_1_0_0 - 0.880423280423282*G0_1_1_3_1_0_2_0_1 + 0.880423280423282*G0_1_1_3_1_0_3_1_0 + 0.880423280423282*G0_1_1_3_1_0_3_1_1 - 0.880423280423282*G0_1_1_3_1_0_4_1_0 - 0.880423280423282*G0_1_1_3_1_0_5_1_1 + 0.880423280423282*G0_1_1_3_1_1_0_0_0 + 0.880423280423282*G0_1_1_3_1_1_0_0_1 - 0.880423280423282*G0_1_1_3_1_1_1_0_0 - 0.880423280423282*G0_1_1_3_1_1_2_0_1 + 0.880423280423282*G0_1_1_3_1_1_3_1_0 + 0.880423280423282*G0_1_1_3_1_1_3_1_1 - 0.880423280423282*G0_1_1_3_1_1_4_1_0 - 0.880423280423282*G0_1_1_3_1_1_5_1_1 - 0.880423280423282*G0_1_1_4_1_0_0_0_0 - 0.880423280423282*G0_1_1_4_1_0_0_0_1 + 0.880423280423282*G0_1_1_4_1_0_1_0_0 + 0.880423280423282*G0_1_1_4_1_0_2_0_1 - 0.880423280423282*G0_1_1_4_1_0_3_1_0 - 0.880423280423282*G0_1_1_4_1_0_3_1_1 + 0.880423280423282*G0_1_1_4_1_0_4_1_0 + 0.880423280423282*G0_1_1_4_1_0_5_1_1 - 0.880423280423282*G0_1_1_5_1_1_0_0_0 - 0.880423280423282*G0_1_1_5_1_1_0_0_1 + 0.880423280423282*G0_1_1_5_1_1_1_0_0 + 0.880423280423282*G0_1_1_5_1_1_2_0_1 - 0.880423280423282*G0_1_1_5_1_1_3_1_0 - 0.880423280423282*G0_1_1_5_1_1_3_1_1 + 0.880423280423282*G0_1_1_5_1_1_4_1_0 + 0.880423280423282*G0_1_1_5_1_1_5_1_1;
    A[635] = 0.0;
    A[246] = A[711];
    A[670] = 0.0;
    A[277] = A[219];
    A[448] = 0.0;
    A[304] = A[769];
    A[475] = A[5] + 0.42539682539683*G0_0_0_0_0_0_0_0_0 + 0.42539682539683*G0_0_0_0_0_0_0_0_1 - 0.42539682539683*G0_0_0_0_0_0_1_0_0 - 0.42539682539683*G0_0_0_0_0_0_2_0_1 + 0.42539682539683*G0_0_0_0_0_0_3_1_0 + 0.42539682539683*G0_0_0_0_0_0_3_1_1 - 0.42539682539683*G0_0_0_0_0_0_4_1_0 - 0.42539682539683*G0_0_0_0_0_0_5_1_1 + 0.42539682539683*G0_0_0_0_0_1_0_0_0 + 0.42539682539683*G0_0_0_0_0_1_0_0_1 - 0.42539682539683*G0_0_0_0_0_1_1_0_0 - 0.42539682539683*G0_0_0_0_0_1_2_0_1 + 0.42539682539683*G0_0_0_0_0_1_3_1_0 + 0.42539682539683*G0_0_0_0_0_1_3_1_1 - 0.42539682539683*G0_0_0_0_0_1_4_1_0 - 0.42539682539683*G0_0_0_0_0_1_5_1_1 - 0.42539682539683*G0_0_0_1_0_0_0_0_0 - 0.42539682539683*G0_0_0_1_0_0_0_0_1 + 0.42539682539683*G0_0_0_1_0_0_1_0_0 + 0.42539682539683*G0_0_0_1_0_0_2_0_1 - 0.42539682539683*G0_0_0_1_0_0_3_1_0 - 0.42539682539683*G0_0_0_1_0_0_3_1_1 + 0.42539682539683*G0_0_0_1_0_0_4_1_0 + 0.42539682539683*G0_0_0_1_0_0_5_1_1 - 0.42539682539683*G0_0_0_2_0_1_0_0_0 - 0.42539682539683*G0_0_0_2_0_1_0_0_1 + 0.42539682539683*G0_0_0_2_0_1_1_0_0 + 0.42539682539683*G0_0_0_2_0_1_2_0_1 - 0.42539682539683*G0_0_0_2_0_1_3_1_0 - 0.42539682539683*G0_0_0_2_0_1_3_1_1 + 0.42539682539683*G0_0_0_2_0_1_4_1_0 + 0.42539682539683*G0_0_0_2_0_1_5_1_1 + 0.42539682539683*G0_0_0_3_1_0_0_0_0 + 0.42539682539683*G0_0_0_3_1_0_0_0_1 - 0.42539682539683*G0_0_0_3_1_0_1_0_0 - 0.42539682539683*G0_0_0_3_1_0_2_0_1 + 0.42539682539683*G0_0_0_3_1_0_3_1_0 + 0.42539682539683*G0_0_0_3_1_0_3_1_1 - 0.42539682539683*G0_0_0_3_1_0_4_1_0 - 0.42539682539683*G0_0_0_3_1_0_5_1_1 + 0.42539682539683*G0_0_0_3_1_1_0_0_0 + 0.42539682539683*G0_0_0_3_1_1_0_0_1 - 0.42539682539683*G0_0_0_3_1_1_1_0_0 - 0.42539682539683*G0_0_0_3_1_1_2_0_1 + 0.42539682539683*G0_0_0_3_1_1_3_1_0 + 0.42539682539683*G0_0_0_3_1_1_3_1_1 - 0.42539682539683*G0_0_0_3_1_1_4_1_0 - 0.42539682539683*G0_0_0_3_1_1_5_1_1 - 0.42539682539683*G0_0_0_4_1_0_0_0_0 - 0.42539682539683*G0_0_0_4_1_0_0_0_1 + 0.42539682539683*G0_0_0_4_1_0_1_0_0 + 0.42539682539683*G0_0_0_4_1_0_2_0_1 - 0.42539682539683*G0_0_0_4_1_0_3_1_0 - 0.42539682539683*G0_0_0_4_1_0_3_1_1 + 0.42539682539683*G0_0_0_4_1_0_4_1_0 + 0.42539682539683*G0_0_0_4_1_0_5_1_1 - 0.42539682539683*G0_0_0_5_1_1_0_0_0 - 0.42539682539683*G0_0_0_5_1_1_0_0_1 + 0.42539682539683*G0_0_0_5_1_1_1_0_0 + 0.42539682539683*G0_0_0_5_1_1_2_0_1 - 0.42539682539683*G0_0_0_5_1_1_3_1_0 - 0.42539682539683*G0_0_0_5_1_1_3_1_1 + 0.42539682539683*G0_0_0_5_1_1_4_1_0 + 0.42539682539683*G0_0_0_5_1_1_5_1_1 + 0.425396825396829*G0_1_0_0_0_0_0_0_0 + 0.425396825396829*G0_1_0_0_0_0_0_0_1 - 0.425396825396829*G0_1_0_0_0_0_1_0_0 - 0.425396825396829*G0_1_0_0_0_0_2_0_1 + 0.425396825396829*G0_1_0_0_0_0_3_1_0 + 0.425396825396829*G0_1_0_0_0_0_3_1_1 - 0.425396825396829*G0_1_0_0_0_0_4_1_0 - 0.425396825396829*G0_1_0_0_0_0_5_1_1 + 0.425396825396829*G0_1_0_0_0_1_0_0_0 + 0.425396825396829*G0_1_0_0_0_1_0_0_1 - 0.425396825396829*G0_1_0_0_0_1_1_0_0 - 0.425396825396829*G0_1_0_0_0_1_2_0_1 + 0.425396825396829*G0_1_0_0_0_1_3_1_0 + 0.425396825396829*G0_1_0_0_0_1_3_1_1 - 0.425396825396829*G0_1_0_0_0_1_4_1_0 - 0.425396825396829*G0_1_0_0_0_1_5_1_1 - 0.425396825396829*G0_1_0_1_0_0_0_0_0 - 0.425396825396829*G0_1_0_1_0_0_0_0_1 + 0.425396825396829*G0_1_0_1_0_0_1_0_0 + 0.425396825396829*G0_1_0_1_0_0_2_0_1 - 0.425396825396829*G0_1_0_1_0_0_3_1_0 - 0.425396825396829*G0_1_0_1_0_0_3_1_1 + 0.425396825396829*G0_1_0_1_0_0_4_1_0 + 0.425396825396829*G0_1_0_1_0_0_5_1_1 - 0.425396825396829*G0_1_0_2_0_1_0_0_0 - 0.425396825396829*G0_1_0_2_0_1_0_0_1 + 0.425396825396829*G0_1_0_2_0_1_1_0_0 + 0.425396825396829*G0_1_0_2_0_1_2_0_1 - 0.425396825396829*G0_1_0_2_0_1_3_1_0 - 0.425396825396829*G0_1_0_2_0_1_3_1_1 + 0.425396825396829*G0_1_0_2_0_1_4_1_0 + 0.425396825396829*G0_1_0_2_0_1_5_1_1 + 0.425396825396829*G0_1_0_3_1_0_0_0_0 + 0.425396825396829*G0_1_0_3_1_0_0_0_1 - 0.425396825396829*G0_1_0_3_1_0_1_0_0 - 0.425396825396829*G0_1_0_3_1_0_2_0_1 + 0.425396825396829*G0_1_0_3_1_0_3_1_0 + 0.425396825396829*G0_1_0_3_1_0_3_1_1 - 0.425396825396829*G0_1_0_3_1_0_4_1_0 - 0.425396825396829*G0_1_0_3_1_0_5_1_1 + 0.425396825396829*G0_1_0_3_1_1_0_0_0 + 0.425396825396829*G0_1_0_3_1_1_0_0_1 - 0.425396825396829*G0_1_0_3_1_1_1_0_0 - 0.425396825396829*G0_1_0_3_1_1_2_0_1 + 0.425396825396829*G0_1_0_3_1_1_3_1_0 + 0.425396825396829*G0_1_0_3_1_1_3_1_1 - 0.425396825396829*G0_1_0_3_1_1_4_1_0 - 0.425396825396829*G0_1_0_3_1_1_5_1_1 - 0.425396825396829*G0_1_0_4_1_0_0_0_0 - 0.425396825396829*G0_1_0_4_1_0_0_0_1 + 0.425396825396829*G0_1_0_4_1_0_1_0_0 + 0.425396825396829*G0_1_0_4_1_0_2_0_1 - 0.425396825396829*G0_1_0_4_1_0_3_1_0 - 0.425396825396829*G0_1_0_4_1_0_3_1_1 + 0.425396825396829*G0_1_0_4_1_0_4_1_0 + 0.425396825396829*G0_1_0_4_1_0_5_1_1 - 0.425396825396829*G0_1_0_5_1_1_0_0_0 - 0.425396825396829*G0_1_0_5_1_1_0_0_1 + 0.425396825396829*G0_1_0_5_1_1_1_0_0 + 0.425396825396829*G0_1_0_5_1_1_2_0_1 - 0.425396825396829*G0_1_0_5_1_1_3_1_0 - 0.425396825396829*G0_1_0_5_1_1_3_1_1 + 0.425396825396829*G0_1_0_5_1_1_4_1_0 + 0.425396825396829*G0_1_0_5_1_1_5_1_1;
    A[339] = A[804];
    A[18] = 0.0;
    A[735] = A[270];
    A[426] = A[658];
    A[378] = 0.0;
    A[49] = 0.0;
    A[764] = 0.0;
    A[457] = 0.0;
    A[409] = 0.0;
    A[84] = 0.0;
    A[793] = 0.0;
    A[8] = -A[5] - 0.203174603174604*G0_0_1_0_0_0_0_0_0 - 0.203174603174604*G0_0_1_0_0_0_0_0_1 + 0.203174603174604*G0_0_1_0_0_0_1_0_0 + 0.203174603174604*G0_0_1_0_0_0_2_0_1 - 0.203174603174604*G0_0_1_0_0_0_3_1_0 - 0.203174603174604*G0_0_1_0_0_0_3_1_1 + 0.203174603174604*G0_0_1_0_0_0_4_1_0 + 0.203174603174604*G0_0_1_0_0_0_5_1_1 - 0.203174603174604*G0_0_1_0_0_1_0_0_0 - 0.203174603174604*G0_0_1_0_0_1_0_0_1 + 0.203174603174604*G0_0_1_0_0_1_1_0_0 + 0.203174603174604*G0_0_1_0_0_1_2_0_1 - 0.203174603174604*G0_0_1_0_0_1_3_1_0 - 0.203174603174604*G0_0_1_0_0_1_3_1_1 + 0.203174603174604*G0_0_1_0_0_1_4_1_0 + 0.203174603174604*G0_0_1_0_0_1_5_1_1 + 0.203174603174604*G0_0_1_1_0_0_0_0_0 + 0.203174603174604*G0_0_1_1_0_0_0_0_1 - 0.203174603174604*G0_0_1_1_0_0_1_0_0 - 0.203174603174604*G0_0_1_1_0_0_2_0_1 + 0.203174603174604*G0_0_1_1_0_0_3_1_0 + 0.203174603174604*G0_0_1_1_0_0_3_1_1 - 0.203174603174604*G0_0_1_1_0_0_4_1_0 - 0.203174603174604*G0_0_1_1_0_0_5_1_1 + 0.203174603174604*G0_0_1_2_0_1_0_0_0 + 0.203174603174604*G0_0_1_2_0_1_0_0_1 - 0.203174603174604*G0_0_1_2_0_1_1_0_0 - 0.203174603174604*G0_0_1_2_0_1_2_0_1 + 0.203174603174604*G0_0_1_2_0_1_3_1_0 + 0.203174603174604*G0_0_1_2_0_1_3_1_1 - 0.203174603174604*G0_0_1_2_0_1_4_1_0 - 0.203174603174604*G0_0_1_2_0_1_5_1_1 - 0.203174603174604*G0_0_1_3_1_0_0_0_0 - 0.203174603174604*G0_0_1_3_1_0_0_0_1 + 0.203174603174604*G0_0_1_3_1_0_1_0_0 + 0.203174603174604*G0_0_1_3_1_0_2_0_1 - 0.203174603174604*G0_0_1_3_1_0_3_1_0 - 0.203174603174604*G0_0_1_3_1_0_3_1_1 + 0.203174603174604*G0_0_1_3_1_0_4_1_0 + 0.203174603174604*G0_0_1_3_1_0_5_1_1 - 0.203174603174604*G0_0_1_3_1_1_0_0_0 - 0.203174603174604*G0_0_1_3_1_1_0_0_1 + 0.203174603174604*G0_0_1_3_1_1_1_0_0 + 0.203174603174604*G0_0_1_3_1_1_2_0_1 - 0.203174603174604*G0_0_1_3_1_1_3_1_0 - 0.203174603174604*G0_0_1_3_1_1_3_1_1 + 0.203174603174604*G0_0_1_3_1_1_4_1_0 + 0.203174603174604*G0_0_1_3_1_1_5_1_1 + 0.203174603174604*G0_0_1_4_1_0_0_0_0 + 0.203174603174604*G0_0_1_4_1_0_0_0_1 - 0.203174603174604*G0_0_1_4_1_0_1_0_0 - 0.203174603174604*G0_0_1_4_1_0_2_0_1 + 0.203174603174604*G0_0_1_4_1_0_3_1_0 + 0.203174603174604*G0_0_1_4_1_0_3_1_1 - 0.203174603174604*G0_0_1_4_1_0_4_1_0 - 0.203174603174604*G0_0_1_4_1_0_5_1_1 + 0.203174603174604*G0_0_1_5_1_1_0_0_0 + 0.203174603174604*G0_0_1_5_1_1_0_0_1 - 0.203174603174604*G0_0_1_5_1_1_1_0_0 - 0.203174603174604*G0_0_1_5_1_1_2_0_1 + 0.203174603174604*G0_0_1_5_1_1_3_1_0 + 0.203174603174604*G0_0_1_5_1_1_3_1_1 - 0.203174603174604*G0_0_1_5_1_1_4_1_0 - 0.203174603174604*G0_0_1_5_1_1_5_1_1 - 0.203174603174604*G0_1_1_0_0_0_0_0_0 - 0.203174603174604*G0_1_1_0_0_0_0_0_1 + 0.203174603174604*G0_1_1_0_0_0_1_0_0 + 0.203174603174604*G0_1_1_0_0_0_2_0_1 - 0.203174603174604*G0_1_1_0_0_0_3_1_0 - 0.203174603174604*G0_1_1_0_0_0_3_1_1 + 0.203174603174604*G0_1_1_0_0_0_4_1_0 + 0.203174603174604*G0_1_1_0_0_0_5_1_1 - 0.203174603174604*G0_1_1_0_0_1_0_0_0 - 0.203174603174604*G0_1_1_0_0_1_0_0_1 + 0.203174603174604*G0_1_1_0_0_1_1_0_0 + 0.203174603174604*G0_1_1_0_0_1_2_0_1 - 0.203174603174604*G0_1_1_0_0_1_3_1_0 - 0.203174603174604*G0_1_1_0_0_1_3_1_1 + 0.203174603174604*G0_1_1_0_0_1_4_1_0 + 0.203174603174604*G0_1_1_0_0_1_5_1_1 + 0.203174603174604*G0_1_1_1_0_0_0_0_0 + 0.203174603174604*G0_1_1_1_0_0_0_0_1 - 0.203174603174604*G0_1_1_1_0_0_1_0_0 - 0.203174603174604*G0_1_1_1_0_0_2_0_1 + 0.203174603174604*G0_1_1_1_0_0_3_1_0 + 0.203174603174604*G0_1_1_1_0_0_3_1_1 - 0.203174603174604*G0_1_1_1_0_0_4_1_0 - 0.203174603174604*G0_1_1_1_0_0_5_1_1 + 0.203174603174604*G0_1_1_2_0_1_0_0_0 + 0.203174603174604*G0_1_1_2_0_1_0_0_1 - 0.203174603174604*G0_1_1_2_0_1_1_0_0 - 0.203174603174604*G0_1_1_2_0_1_2_0_1 + 0.203174603174604*G0_1_1_2_0_1_3_1_0 + 0.203174603174604*G0_1_1_2_0_1_3_1_1 - 0.203174603174604*G0_1_1_2_0_1_4_1_0 - 0.203174603174604*G0_1_1_2_0_1_5_1_1 - 0.203174603174604*G0_1_1_3_1_0_0_0_0 - 0.203174603174604*G0_1_1_3_1_0_0_0_1 + 0.203174603174604*G0_1_1_3_1_0_1_0_0 + 0.203174603174604*G0_1_1_3_1_0_2_0_1 - 0.203174603174604*G0_1_1_3_1_0_3_1_0 - 0.203174603174604*G0_1_1_3_1_0_3_1_1 + 0.203174603174604*G0_1_1_3_1_0_4_1_0 + 0.203174603174604*G0_1_1_3_1_0_5_1_1 - 0.203174603174604*G0_1_1_3_1_1_0_0_0 - 0.203174603174604*G0_1_1_3_1_1_0_0_1 + 0.203174603174604*G0_1_1_3_1_1_1_0_0 + 0.203174603174604*G0_1_1_3_1_1_2_0_1 - 0.203174603174604*G0_1_1_3_1_1_3_1_0 - 0.203174603174604*G0_1_1_3_1_1_3_1_1 + 0.203174603174604*G0_1_1_3_1_1_4_1_0 + 0.203174603174604*G0_1_1_3_1_1_5_1_1 + 0.203174603174604*G0_1_1_4_1_0_0_0_0 + 0.203174603174604*G0_1_1_4_1_0_0_0_1 - 0.203174603174604*G0_1_1_4_1_0_1_0_0 - 0.203174603174604*G0_1_1_4_1_0_2_0_1 + 0.203174603174604*G0_1_1_4_1_0_3_1_0 + 0.203174603174604*G0_1_1_4_1_0_3_1_1 - 0.203174603174604*G0_1_1_4_1_0_4_1_0 - 0.203174603174604*G0_1_1_4_1_0_5_1_1 + 0.203174603174604*G0_1_1_5_1_1_0_0_0 + 0.203174603174604*G0_1_1_5_1_1_0_0_1 - 0.203174603174604*G0_1_1_5_1_1_1_0_0 - 0.203174603174604*G0_1_1_5_1_1_2_0_1 + 0.203174603174604*G0_1_1_5_1_1_3_1_0 + 0.203174603174604*G0_1_1_5_1_1_3_1_1 - 0.203174603174604*G0_1_1_5_1_1_4_1_0 - 0.203174603174604*G0_1_1_5_1_1_5_1_1;
    A[886] = A[421];
    A[95] = A[560];
    A[810] = 0.0;
    A[126] = A[274] - 0.0846560846560904*G0_0_0_0_0_0_0_0_0 - 0.0846560846560904*G0_0_0_0_0_0_0_0_1 + 0.0846560846560904*G0_0_0_0_0_0_1_0_0 + 0.0846560846560904*G0_0_0_0_0_0_2_0_1 - 0.0846560846560904*G0_0_0_0_0_0_3_1_0 - 0.0846560846560904*G0_0_0_0_0_0_3_1_1 + 0.0846560846560904*G0_0_0_0_0_0_4_1_0 + 0.0846560846560904*G0_0_0_0_0_0_5_1_1 - 0.0846560846560904*G0_0_0_0_0_1_0_0_0 - 0.0846560846560904*G0_0_0_0_0_1_0_0_1 + 0.0846560846560904*G0_0_0_0_0_1_1_0_0 + 0.0846560846560904*G0_0_0_0_0_1_2_0_1 - 0.0846560846560904*G0_0_0_0_0_1_3_1_0 - 0.0846560846560904*G0_0_0_0_0_1_3_1_1 + 0.0846560846560904*G0_0_0_0_0_1_4_1_0 + 0.0846560846560904*G0_0_0_0_0_1_5_1_1 + 0.0846560846560904*G0_0_0_1_0_0_0_0_0 + 0.0846560846560904*G0_0_0_1_0_0_0_0_1 - 0.0846560846560904*G0_0_0_1_0_0_1_0_0 - 0.0846560846560904*G0_0_0_1_0_0_2_0_1 + 0.0846560846560904*G0_0_0_1_0_0_3_1_0 + 0.0846560846560904*G0_0_0_1_0_0_3_1_1 - 0.0846560846560904*G0_0_0_1_0_0_4_1_0 - 0.0846560846560904*G0_0_0_1_0_0_5_1_1 + 0.0846560846560904*G0_0_0_2_0_1_0_0_0 + 0.0846560846560904*G0_0_0_2_0_1_0_0_1 - 0.0846560846560904*G0_0_0_2_0_1_1_0_0 - 0.0846560846560904*G0_0_0_2_0_1_2_0_1 + 0.0846560846560904*G0_0_0_2_0_1_3_1_0 + 0.0846560846560904*G0_0_0_2_0_1_3_1_1 - 0.0846560846560904*G0_0_0_2_0_1_4_1_0 - 0.0846560846560904*G0_0_0_2_0_1_5_1_1 - 0.0846560846560904*G0_0_0_3_1_0_0_0_0 - 0.0846560846560904*G0_0_0_3_1_0_0_0_1 + 0.0846560846560904*G0_0_0_3_1_0_1_0_0 + 0.0846560846560904*G0_0_0_3_1_0_2_0_1 - 0.0846560846560904*G0_0_0_3_1_0_3_1_0 - 0.0846560846560904*G0_0_0_3_1_0_3_1_1 + 0.0846560846560904*G0_0_0_3_1_0_4_1_0 + 0.0846560846560904*G0_0_0_3_1_0_5_1_1 - 0.0846560846560904*G0_0_0_3_1_1_0_0_0 - 0.0846560846560904*G0_0_0_3_1_1_0_0_1 + 0.0846560846560904*G0_0_0_3_1_1_1_0_0 + 0.0846560846560904*G0_0_0_3_1_1_2_0_1 - 0.0846560846560904*G0_0_0_3_1_1_3_1_0 - 0.0846560846560904*G0_0_0_3_1_1_3_1_1 + 0.0846560846560904*G0_0_0_3_1_1_4_1_0 + 0.0846560846560904*G0_0_0_3_1_1_5_1_1 + 0.0846560846560904*G0_0_0_4_1_0_0_0_0 + 0.0846560846560904*G0_0_0_4_1_0_0_0_1 - 0.0846560846560904*G0_0_0_4_1_0_1_0_0 - 0.0846560846560904*G0_0_0_4_1_0_2_0_1 + 0.0846560846560904*G0_0_0_4_1_0_3_1_0 + 0.0846560846560904*G0_0_0_4_1_0_3_1_1 - 0.0846560846560904*G0_0_0_4_1_0_4_1_0 - 0.0846560846560904*G0_0_0_4_1_0_5_1_1 + 0.0846560846560904*G0_0_0_5_1_1_0_0_0 + 0.0846560846560904*G0_0_0_5_1_1_0_0_1 - 0.0846560846560904*G0_0_0_5_1_1_1_0_0 - 0.0846560846560904*G0_0_0_5_1_1_2_0_1 + 0.0846560846560904*G0_0_0_5_1_1_3_1_0 + 0.0846560846560904*G0_0_0_5_1_1_3_1_1 - 0.0846560846560904*G0_0_0_5_1_1_4_1_0 - 0.0846560846560904*G0_0_0_5_1_1_5_1_1 + 0.0846560846560903*G0_1_1_0_0_0_0_0_0 + 0.0846560846560903*G0_1_1_0_0_0_0_0_1 - 0.0846560846560903*G0_1_1_0_0_0_1_0_0 - 0.0846560846560903*G0_1_1_0_0_0_2_0_1 + 0.0846560846560903*G0_1_1_0_0_0_3_1_0 + 0.0846560846560903*G0_1_1_0_0_0_3_1_1 - 0.0846560846560903*G0_1_1_0_0_0_4_1_0 - 0.0846560846560903*G0_1_1_0_0_0_5_1_1 + 0.0846560846560903*G0_1_1_0_0_1_0_0_0 + 0.0846560846560903*G0_1_1_0_0_1_0_0_1 - 0.0846560846560903*G0_1_1_0_0_1_1_0_0 - 0.0846560846560903*G0_1_1_0_0_1_2_0_1 + 0.0846560846560903*G0_1_1_0_0_1_3_1_0 + 0.0846560846560903*G0_1_1_0_0_1_3_1_1 - 0.0846560846560903*G0_1_1_0_0_1_4_1_0 - 0.0846560846560903*G0_1_1_0_0_1_5_1_1 - 0.0846560846560903*G0_1_1_1_0_0_0_0_0 - 0.0846560846560903*G0_1_1_1_0_0_0_0_1 + 0.0846560846560903*G0_1_1_1_0_0_1_0_0 + 0.0846560846560903*G0_1_1_1_0_0_2_0_1 - 0.0846560846560903*G0_1_1_1_0_0_3_1_0 - 0.0846560846560903*G0_1_1_1_0_0_3_1_1 + 0.0846560846560903*G0_1_1_1_0_0_4_1_0 + 0.0846560846560903*G0_1_1_1_0_0_5_1_1 - 0.0846560846560903*G0_1_1_2_0_1_0_0_0 - 0.0846560846560903*G0_1_1_2_0_1_0_0_1 + 0.0846560846560903*G0_1_1_2_0_1_1_0_0 + 0.0846560846560903*G0_1_1_2_0_1_2_0_1 - 0.0846560846560903*G0_1_1_2_0_1_3_1_0 - 0.0846560846560903*G0_1_1_2_0_1_3_1_1 + 0.0846560846560903*G0_1_1_2_0_1_4_1_0 + 0.0846560846560903*G0_1_1_2_0_1_5_1_1 + 0.0846560846560903*G0_1_1_3_1_0_0_0_0 + 0.0846560846560903*G0_1_1_3_1_0_0_0_1 - 0.0846560846560903*G0_1_1_3_1_0_1_0_0 - 0.0846560846560903*G0_1_1_3_1_0_2_0_1 + 0.0846560846560903*G0_1_1_3_1_0_3_1_0 + 0.0846560846560903*G0_1_1_3_1_0_3_1_1 - 0.0846560846560903*G0_1_1_3_1_0_4_1_0 - 0.0846560846560903*G0_1_1_3_1_0_5_1_1 + 0.0846560846560903*G0_1_1_3_1_1_0_0_0 + 0.0846560846560903*G0_1_1_3_1_1_0_0_1 - 0.0846560846560903*G0_1_1_3_1_1_1_0_0 - 0.0846560846560903*G0_1_1_3_1_1_2_0_1 + 0.0846560846560903*G0_1_1_3_1_1_3_1_0 + 0.0846560846560903*G0_1_1_3_1_1_3_1_1 - 0.0846560846560903*G0_1_1_3_1_1_4_1_0 - 0.0846560846560903*G0_1_1_3_1_1_5_1_1 - 0.0846560846560903*G0_1_1_4_1_0_0_0_0 - 0.0846560846560903*G0_1_1_4_1_0_0_0_1 + 0.0846560846560903*G0_1_1_4_1_0_1_0_0 + 0.0846560846560903*G0_1_1_4_1_0_2_0_1 - 0.0846560846560903*G0_1_1_4_1_0_3_1_0 - 0.0846560846560903*G0_1_1_4_1_0_3_1_1 + 0.0846560846560903*G0_1_1_4_1_0_4_1_0 + 0.0846560846560903*G0_1_1_4_1_0_5_1_1 - 0.0846560846560903*G0_1_1_5_1_1_0_0_0 - 0.0846560846560903*G0_1_1_5_1_1_0_0_1 + 0.0846560846560903*G0_1_1_5_1_1_1_0_0 + 0.0846560846560903*G0_1_1_5_1_1_2_0_1 - 0.0846560846560903*G0_1_1_5_1_1_3_1_0 - 0.0846560846560903*G0_1_1_5_1_1_3_1_1 + 0.0846560846560903*G0_1_1_5_1_1_4_1_0 + 0.0846560846560903*G0_1_1_5_1_1_5_1_1;
    A[851] = 0.0;
    A[157] = A[215];
    A[880] = 0.0;
    A[481] = 0.0;
    A[200] = 0.0;
    A[582] = 0.0;
    A[522] = 0.0;
    A[227] = 0.0;
    A[615] = A[5];
    A[551] = 0.0;
    A[708] = A[98];
    A[644] = 0.0;
    A[253] = A[252];
    A[673] = 0.0;
    A[278] = A[743];
    A[698] = 0.0;
    A[315] = 0.0;
    A[259] = 0.0;
    A[344] = A[836];
    A[288] = 0.0;
    A[742] = A[219];
    A[429] = A[748];
    A[369] = A[834];
    A[50] = 0.0;
    A[773] = A[715];
    A[462] = 0.0;
    A[402] = A[373];
    A[79] = 0.0;
    A[800] = A[335];
    A[15] = 0.0;
    A[100] = A[303];
    A[835] = A[312];
    A[44] = A[421];
    A[133] = A[394];
    A[842] = 0.0;
    A[73] = A[887];
    A[150] = A[5];
    A[873] = 0.0;
    A[106] = 0.0;
    A[195] = 0.0;
    A[591] = A[126];
    A[515] = 0.0;
    A[224] = A[892];
    A[622] = A[215];
    A[542] = 0.0;
    A[653] = -A[621] + 0.541798941798943*G0_0_1_0_0_0_0_0_0 + 0.541798941798943*G0_0_1_0_0_0_0_0_1 - 0.541798941798943*G0_0_1_0_0_0_1_0_0 - 0.541798941798943*G0_0_1_0_0_0_2_0_1 + 0.541798941798943*G0_0_1_0_0_0_3_1_0 + 0.541798941798943*G0_0_1_0_0_0_3_1_1 - 0.541798941798943*G0_0_1_0_0_0_4_1_0 - 0.541798941798943*G0_0_1_0_0_0_5_1_1 + 0.541798941798943*G0_0_1_0_0_1_0_0_0 + 0.541798941798943*G0_0_1_0_0_1_0_0_1 - 0.541798941798943*G0_0_1_0_0_1_1_0_0 - 0.541798941798943*G0_0_1_0_0_1_2_0_1 + 0.541798941798943*G0_0_1_0_0_1_3_1_0 + 0.541798941798943*G0_0_1_0_0_1_3_1_1 - 0.541798941798943*G0_0_1_0_0_1_4_1_0 - 0.541798941798943*G0_0_1_0_0_1_5_1_1 - 0.541798941798943*G0_0_1_1_0_0_0_0_0 - 0.541798941798943*G0_0_1_1_0_0_0_0_1 + 0.541798941798943*G0_0_1_1_0_0_1_0_0 + 0.541798941798943*G0_0_1_1_0_0_2_0_1 - 0.541798941798943*G0_0_1_1_0_0_3_1_0 - 0.541798941798943*G0_0_1_1_0_0_3_1_1 + 0.541798941798943*G0_0_1_1_0_0_4_1_0 + 0.541798941798943*G0_0_1_1_0_0_5_1_1 - 0.541798941798943*G0_0_1_2_0_1_0_0_0 - 0.541798941798943*G0_0_1_2_0_1_0_0_1 + 0.541798941798943*G0_0_1_2_0_1_1_0_0 + 0.541798941798943*G0_0_1_2_0_1_2_0_1 - 0.541798941798943*G0_0_1_2_0_1_3_1_0 - 0.541798941798943*G0_0_1_2_0_1_3_1_1 + 0.541798941798943*G0_0_1_2_0_1_4_1_0 + 0.541798941798943*G0_0_1_2_0_1_5_1_1 + 0.541798941798943*G0_0_1_3_1_0_0_0_0 + 0.541798941798943*G0_0_1_3_1_0_0_0_1 - 0.541798941798943*G0_0_1_3_1_0_1_0_0 - 0.541798941798943*G0_0_1_3_1_0_2_0_1 + 0.541798941798943*G0_0_1_3_1_0_3_1_0 + 0.541798941798943*G0_0_1_3_1_0_3_1_1 - 0.541798941798943*G0_0_1_3_1_0_4_1_0 - 0.541798941798943*G0_0_1_3_1_0_5_1_1 + 0.541798941798943*G0_0_1_3_1_1_0_0_0 + 0.541798941798943*G0_0_1_3_1_1_0_0_1 - 0.541798941798943*G0_0_1_3_1_1_1_0_0 - 0.541798941798943*G0_0_1_3_1_1_2_0_1 + 0.541798941798943*G0_0_1_3_1_1_3_1_0 + 0.541798941798943*G0_0_1_3_1_1_3_1_1 - 0.541798941798943*G0_0_1_3_1_1_4_1_0 - 0.541798941798943*G0_0_1_3_1_1_5_1_1 - 0.541798941798943*G0_0_1_4_1_0_0_0_0 - 0.541798941798943*G0_0_1_4_1_0_0_0_1 + 0.541798941798943*G0_0_1_4_1_0_1_0_0 + 0.541798941798943*G0_0_1_4_1_0_2_0_1 - 0.541798941798943*G0_0_1_4_1_0_3_1_0 - 0.541798941798943*G0_0_1_4_1_0_3_1_1 + 0.541798941798943*G0_0_1_4_1_0_4_1_0 + 0.541798941798943*G0_0_1_4_1_0_5_1_1 - 0.541798941798943*G0_0_1_5_1_1_0_0_0 - 0.541798941798943*G0_0_1_5_1_1_0_0_1 + 0.541798941798943*G0_0_1_5_1_1_1_0_0 + 0.541798941798943*G0_0_1_5_1_1_2_0_1 - 0.541798941798943*G0_0_1_5_1_1_3_1_0 - 0.541798941798943*G0_0_1_5_1_1_3_1_1 + 0.541798941798943*G0_0_1_5_1_1_4_1_0 + 0.541798941798943*G0_0_1_5_1_1_5_1_1 + 0.880423280423282*G0_1_1_0_0_0_0_0_0 + 0.880423280423282*G0_1_1_0_0_0_0_0_1 - 0.880423280423282*G0_1_1_0_0_0_1_0_0 - 0.880423280423282*G0_1_1_0_0_0_2_0_1 + 0.880423280423282*G0_1_1_0_0_0_3_1_0 + 0.880423280423282*G0_1_1_0_0_0_3_1_1 - 0.880423280423282*G0_1_1_0_0_0_4_1_0 - 0.880423280423282*G0_1_1_0_0_0_5_1_1 + 0.880423280423282*G0_1_1_0_0_1_0_0_0 + 0.880423280423282*G0_1_1_0_0_1_0_0_1 - 0.880423280423282*G0_1_1_0_0_1_1_0_0 - 0.880423280423282*G0_1_1_0_0_1_2_0_1 + 0.880423280423282*G0_1_1_0_0_1_3_1_0 + 0.880423280423282*G0_1_1_0_0_1_3_1_1 - 0.880423280423282*G0_1_1_0_0_1_4_1_0 - 0.880423280423282*G0_1_1_0_0_1_5_1_1 - 0.880423280423282*G0_1_1_1_0_0_0_0_0 - 0.880423280423282*G0_1_1_1_0_0_0_0_1 + 0.880423280423282*G0_1_1_1_0_0_1_0_0 + 0.880423280423282*G0_1_1_1_0_0_2_0_1 - 0.880423280423282*G0_1_1_1_0_0_3_1_0 - 0.880423280423282*G0_1_1_1_0_0_3_1_1 + 0.880423280423282*G0_1_1_1_0_0_4_1_0 + 0.880423280423282*G0_1_1_1_0_0_5_1_1 - 0.880423280423282*G0_1_1_2_0_1_0_0_0 - 0.880423280423282*G0_1_1_2_0_1_0_0_1 + 0.880423280423282*G0_1_1_2_0_1_1_0_0 + 0.880423280423282*G0_1_1_2_0_1_2_0_1 - 0.880423280423282*G0_1_1_2_0_1_3_1_0 - 0.880423280423282*G0_1_1_2_0_1_3_1_1 + 0.880423280423282*G0_1_1_2_0_1_4_1_0 + 0.880423280423282*G0_1_1_2_0_1_5_1_1 + 0.880423280423282*G0_1_1_3_1_0_0_0_0 + 0.880423280423282*G0_1_1_3_1_0_0_0_1 - 0.880423280423282*G0_1_1_3_1_0_1_0_0 - 0.880423280423282*G0_1_1_3_1_0_2_0_1 + 0.880423280423282*G0_1_1_3_1_0_3_1_0 + 0.880423280423282*G0_1_1_3_1_0_3_1_1 - 0.880423280423282*G0_1_1_3_1_0_4_1_0 - 0.880423280423282*G0_1_1_3_1_0_5_1_1 + 0.880423280423282*G0_1_1_3_1_1_0_0_0 + 0.880423280423282*G0_1_1_3_1_1_0_0_1 - 0.880423280423282*G0_1_1_3_1_1_1_0_0 - 0.880423280423282*G0_1_1_3_1_1_2_0_1 + 0.880423280423282*G0_1_1_3_1_1_3_1_0 + 0.880423280423282*G0_1_1_3_1_1_3_1_1 - 0.880423280423282*G0_1_1_3_1_1_4_1_0 - 0.880423280423282*G0_1_1_3_1_1_5_1_1 - 0.880423280423282*G0_1_1_4_1_0_0_0_0 - 0.880423280423282*G0_1_1_4_1_0_0_0_1 + 0.880423280423282*G0_1_1_4_1_0_1_0_0 + 0.880423280423282*G0_1_1_4_1_0_2_0_1 - 0.880423280423282*G0_1_1_4_1_0_3_1_0 - 0.880423280423282*G0_1_1_4_1_0_3_1_1 + 0.880423280423282*G0_1_1_4_1_0_4_1_0 + 0.880423280423282*G0_1_1_4_1_0_5_1_1 - 0.880423280423282*G0_1_1_5_1_1_0_0_0 - 0.880423280423282*G0_1_1_5_1_1_0_0_1 + 0.880423280423282*G0_1_1_5_1_1_1_0_0 + 0.880423280423282*G0_1_1_5_1_1_2_0_1 - 0.880423280423282*G0_1_1_5_1_1_3_1_0 - 0.880423280423282*G0_1_1_5_1_1_3_1_1 + 0.880423280423282*G0_1_1_5_1_1_4_1_0 + 0.880423280423282*G0_1_1_5_1_1_5_1_1;
    A[664] = 0.0;
    A[568] = A[103];
    A[691] = 0.0;
    A[266] = 0.0;
    A[337] = A[221];
    A[297] = 0.0;
    A[749] = A[748];
    A[436] = 0.0;
    A[360] = A[14];
    A[316] = 0.0;
    A[774] = A[309];
    A[471] = A[270] + 0.778835978835986*G0_0_0_0_0_0_0_0_0 + 0.778835978835986*G0_0_0_0_0_0_0_0_1 - 0.778835978835986*G0_0_0_0_0_0_1_0_0 - 0.778835978835986*G0_0_0_0_0_0_2_0_1 + 0.778835978835986*G0_0_0_0_0_0_3_1_0 + 0.778835978835986*G0_0_0_0_0_0_3_1_1 - 0.778835978835986*G0_0_0_0_0_0_4_1_0 - 0.778835978835986*G0_0_0_0_0_0_5_1_1 + 0.778835978835986*G0_0_0_0_0_1_0_0_0 + 0.778835978835986*G0_0_0_0_0_1_0_0_1 - 0.778835978835986*G0_0_0_0_0_1_1_0_0 - 0.778835978835986*G0_0_0_0_0_1_2_0_1 + 0.778835978835986*G0_0_0_0_0_1_3_1_0 + 0.778835978835986*G0_0_0_0_0_1_3_1_1 - 0.778835978835986*G0_0_0_0_0_1_4_1_0 - 0.778835978835986*G0_0_0_0_0_1_5_1_1 - 0.778835978835986*G0_0_0_1_0_0_0_0_0 - 0.778835978835986*G0_0_0_1_0_0_0_0_1 + 0.778835978835986*G0_0_0_1_0_0_1_0_0 + 0.778835978835986*G0_0_0_1_0_0_2_0_1 - 0.778835978835986*G0_0_0_1_0_0_3_1_0 - 0.778835978835986*G0_0_0_1_0_0_3_1_1 + 0.778835978835986*G0_0_0_1_0_0_4_1_0 + 0.778835978835986*G0_0_0_1_0_0_5_1_1 - 0.778835978835986*G0_0_0_2_0_1_0_0_0 - 0.778835978835986*G0_0_0_2_0_1_0_0_1 + 0.778835978835986*G0_0_0_2_0_1_1_0_0 + 0.778835978835986*G0_0_0_2_0_1_2_0_1 - 0.778835978835986*G0_0_0_2_0_1_3_1_0 - 0.778835978835986*G0_0_0_2_0_1_3_1_1 + 0.778835978835986*G0_0_0_2_0_1_4_1_0 + 0.778835978835986*G0_0_0_2_0_1_5_1_1 + 0.778835978835986*G0_0_0_3_1_0_0_0_0 + 0.778835978835986*G0_0_0_3_1_0_0_0_1 - 0.778835978835986*G0_0_0_3_1_0_1_0_0 - 0.778835978835986*G0_0_0_3_1_0_2_0_1 + 0.778835978835986*G0_0_0_3_1_0_3_1_0 + 0.778835978835986*G0_0_0_3_1_0_3_1_1 - 0.778835978835986*G0_0_0_3_1_0_4_1_0 - 0.778835978835986*G0_0_0_3_1_0_5_1_1 + 0.778835978835986*G0_0_0_3_1_1_0_0_0 + 0.778835978835986*G0_0_0_3_1_1_0_0_1 - 0.778835978835986*G0_0_0_3_1_1_1_0_0 - 0.778835978835986*G0_0_0_3_1_1_2_0_1 + 0.778835978835986*G0_0_0_3_1_1_3_1_0 + 0.778835978835986*G0_0_0_3_1_1_3_1_1 - 0.778835978835986*G0_0_0_3_1_1_4_1_0 - 0.778835978835986*G0_0_0_3_1_1_5_1_1 - 0.778835978835986*G0_0_0_4_1_0_0_0_0 - 0.778835978835986*G0_0_0_4_1_0_0_0_1 + 0.778835978835986*G0_0_0_4_1_0_1_0_0 + 0.778835978835986*G0_0_0_4_1_0_2_0_1 - 0.778835978835986*G0_0_0_4_1_0_3_1_0 - 0.778835978835986*G0_0_0_4_1_0_3_1_1 + 0.778835978835986*G0_0_0_4_1_0_4_1_0 + 0.778835978835986*G0_0_0_4_1_0_5_1_1 - 0.778835978835986*G0_0_0_5_1_1_0_0_0 - 0.778835978835986*G0_0_0_5_1_1_0_0_1 + 0.778835978835986*G0_0_0_5_1_1_1_0_0 + 0.778835978835986*G0_0_0_5_1_1_2_0_1 - 0.778835978835986*G0_0_0_5_1_1_3_1_0 - 0.778835978835986*G0_0_0_5_1_1_3_1_1 + 0.778835978835986*G0_0_0_5_1_1_4_1_0 + 0.778835978835986*G0_0_0_5_1_1_5_1_1 - 0.778835978835986*G0_1_1_0_0_0_0_0_0 - 0.778835978835986*G0_1_1_0_0_0_0_0_1 + 0.778835978835986*G0_1_1_0_0_0_1_0_0 + 0.778835978835986*G0_1_1_0_0_0_2_0_1 - 0.778835978835986*G0_1_1_0_0_0_3_1_0 - 0.778835978835986*G0_1_1_0_0_0_3_1_1 + 0.778835978835986*G0_1_1_0_0_0_4_1_0 + 0.778835978835986*G0_1_1_0_0_0_5_1_1 - 0.778835978835986*G0_1_1_0_0_1_0_0_0 - 0.778835978835986*G0_1_1_0_0_1_0_0_1 + 0.778835978835986*G0_1_1_0_0_1_1_0_0 + 0.778835978835986*G0_1_1_0_0_1_2_0_1 - 0.778835978835986*G0_1_1_0_0_1_3_1_0 - 0.778835978835986*G0_1_1_0_0_1_3_1_1 + 0.778835978835986*G0_1_1_0_0_1_4_1_0 + 0.778835978835986*G0_1_1_0_0_1_5_1_1 + 0.778835978835986*G0_1_1_1_0_0_0_0_0 + 0.778835978835986*G0_1_1_1_0_0_0_0_1 - 0.778835978835986*G0_1_1_1_0_0_1_0_0 - 0.778835978835986*G0_1_1_1_0_0_2_0_1 + 0.778835978835986*G0_1_1_1_0_0_3_1_0 + 0.778835978835986*G0_1_1_1_0_0_3_1_1 - 0.778835978835986*G0_1_1_1_0_0_4_1_0 - 0.778835978835986*G0_1_1_1_0_0_5_1_1 + 0.778835978835986*G0_1_1_2_0_1_0_0_0 + 0.778835978835986*G0_1_1_2_0_1_0_0_1 - 0.778835978835986*G0_1_1_2_0_1_1_0_0 - 0.778835978835986*G0_1_1_2_0_1_2_0_1 + 0.778835978835986*G0_1_1_2_0_1_3_1_0 + 0.778835978835986*G0_1_1_2_0_1_3_1_1 - 0.778835978835986*G0_1_1_2_0_1_4_1_0 - 0.778835978835986*G0_1_1_2_0_1_5_1_1 - 0.778835978835986*G0_1_1_3_1_0_0_0_0 - 0.778835978835986*G0_1_1_3_1_0_0_0_1 + 0.778835978835986*G0_1_1_3_1_0_1_0_0 + 0.778835978835986*G0_1_1_3_1_0_2_0_1 - 0.778835978835986*G0_1_1_3_1_0_3_1_0 - 0.778835978835986*G0_1_1_3_1_0_3_1_1 + 0.778835978835986*G0_1_1_3_1_0_4_1_0 + 0.778835978835986*G0_1_1_3_1_0_5_1_1 - 0.778835978835986*G0_1_1_3_1_1_0_0_0 - 0.778835978835986*G0_1_1_3_1_1_0_0_1 + 0.778835978835986*G0_1_1_3_1_1_1_0_0 + 0.778835978835986*G0_1_1_3_1_1_2_0_1 - 0.778835978835986*G0_1_1_3_1_1_3_1_0 - 0.778835978835986*G0_1_1_3_1_1_3_1_1 + 0.778835978835986*G0_1_1_3_1_1_4_1_0 + 0.778835978835986*G0_1_1_3_1_1_5_1_1 + 0.778835978835986*G0_1_1_4_1_0_0_0_0 + 0.778835978835986*G0_1_1_4_1_0_0_0_1 - 0.778835978835986*G0_1_1_4_1_0_1_0_0 - 0.778835978835986*G0_1_1_4_1_0_2_0_1 + 0.778835978835986*G0_1_1_4_1_0_3_1_0 + 0.778835978835986*G0_1_1_4_1_0_3_1_1 - 0.778835978835986*G0_1_1_4_1_0_4_1_0 - 0.778835978835986*G0_1_1_4_1_0_5_1_1 + 0.778835978835986*G0_1_1_5_1_1_0_0_0 + 0.778835978835986*G0_1_1_5_1_1_0_0_1 - 0.778835978835986*G0_1_1_5_1_1_1_0_0 - 0.778835978835986*G0_1_1_5_1_1_2_0_1 + 0.778835978835986*G0_1_1_5_1_1_3_1_0 + 0.778835978835986*G0_1_1_5_1_1_3_1_1 - 0.778835978835986*G0_1_1_5_1_1_4_1_0 - 0.778835978835986*G0_1_1_5_1_1_5_1_1;
    A[395] = A[628];
    A[359] = 0.0;
    A[6] = A[471];
    A[723] = 0.0;
    A[37] = A[181];
    A[752] = 0.0;
    A[865] = A[892] + 2.74285714285719*G0_0_0_0_0_0_0_0_0 + 2.74285714285719*G0_0_0_0_0_0_0_0_1 - 2.74285714285719*G0_0_0_0_0_0_1_0_0 - 2.74285714285719*G0_0_0_0_0_0_2_0_1 + 2.74285714285719*G0_0_0_0_0_0_3_1_0 + 2.74285714285719*G0_0_0_0_0_0_3_1_1 - 2.74285714285719*G0_0_0_0_0_0_4_1_0 - 2.74285714285719*G0_0_0_0_0_0_5_1_1 + 2.74285714285719*G0_0_0_0_0_1_0_0_0 + 2.74285714285719*G0_0_0_0_0_1_0_0_1 - 2.74285714285719*G0_0_0_0_0_1_1_0_0 - 2.74285714285719*G0_0_0_0_0_1_2_0_1 + 2.74285714285719*G0_0_0_0_0_1_3_1_0 + 2.74285714285719*G0_0_0_0_0_1_3_1_1 - 2.74285714285719*G0_0_0_0_0_1_4_1_0 - 2.74285714285719*G0_0_0_0_0_1_5_1_1 - 2.74285714285719*G0_0_0_1_0_0_0_0_0 - 2.74285714285719*G0_0_0_1_0_0_0_0_1 + 2.74285714285719*G0_0_0_1_0_0_1_0_0 + 2.74285714285719*G0_0_0_1_0_0_2_0_1 - 2.74285714285719*G0_0_0_1_0_0_3_1_0 - 2.74285714285719*G0_0_0_1_0_0_3_1_1 + 2.74285714285719*G0_0_0_1_0_0_4_1_0 + 2.74285714285719*G0_0_0_1_0_0_5_1_1 - 2.74285714285719*G0_0_0_2_0_1_0_0_0 - 2.74285714285719*G0_0_0_2_0_1_0_0_1 + 2.74285714285719*G0_0_0_2_0_1_1_0_0 + 2.74285714285719*G0_0_0_2_0_1_2_0_1 - 2.74285714285719*G0_0_0_2_0_1_3_1_0 - 2.74285714285719*G0_0_0_2_0_1_3_1_1 + 2.74285714285719*G0_0_0_2_0_1_4_1_0 + 2.74285714285719*G0_0_0_2_0_1_5_1_1 + 2.74285714285719*G0_0_0_3_1_0_0_0_0 + 2.74285714285719*G0_0_0_3_1_0_0_0_1 - 2.74285714285719*G0_0_0_3_1_0_1_0_0 - 2.74285714285719*G0_0_0_3_1_0_2_0_1 + 2.74285714285719*G0_0_0_3_1_0_3_1_0 + 2.74285714285719*G0_0_0_3_1_0_3_1_1 - 2.74285714285719*G0_0_0_3_1_0_4_1_0 - 2.74285714285719*G0_0_0_3_1_0_5_1_1 + 2.74285714285719*G0_0_0_3_1_1_0_0_0 + 2.74285714285719*G0_0_0_3_1_1_0_0_1 - 2.74285714285719*G0_0_0_3_1_1_1_0_0 - 2.74285714285719*G0_0_0_3_1_1_2_0_1 + 2.74285714285719*G0_0_0_3_1_1_3_1_0 + 2.74285714285719*G0_0_0_3_1_1_3_1_1 - 2.74285714285719*G0_0_0_3_1_1_4_1_0 - 2.74285714285719*G0_0_0_3_1_1_5_1_1 - 2.74285714285719*G0_0_0_4_1_0_0_0_0 - 2.74285714285719*G0_0_0_4_1_0_0_0_1 + 2.74285714285719*G0_0_0_4_1_0_1_0_0 + 2.74285714285719*G0_0_0_4_1_0_2_0_1 - 2.74285714285719*G0_0_0_4_1_0_3_1_0 - 2.74285714285719*G0_0_0_4_1_0_3_1_1 + 2.74285714285719*G0_0_0_4_1_0_4_1_0 + 2.74285714285719*G0_0_0_4_1_0_5_1_1 - 2.74285714285719*G0_0_0_5_1_1_0_0_0 - 2.74285714285719*G0_0_0_5_1_1_0_0_1 + 2.74285714285719*G0_0_0_5_1_1_1_0_0 + 2.74285714285719*G0_0_0_5_1_1_2_0_1 - 2.74285714285719*G0_0_0_5_1_1_3_1_0 - 2.74285714285719*G0_0_0_5_1_1_3_1_1 + 2.74285714285719*G0_0_0_5_1_1_4_1_0 + 2.74285714285719*G0_0_0_5_1_1_5_1_1 - 2.74285714285719*G0_1_1_0_0_0_0_0_0 - 2.74285714285719*G0_1_1_0_0_0_0_0_1 + 2.74285714285719*G0_1_1_0_0_0_1_0_0 + 2.74285714285719*G0_1_1_0_0_0_2_0_1 - 2.74285714285719*G0_1_1_0_0_0_3_1_0 - 2.74285714285719*G0_1_1_0_0_0_3_1_1 + 2.74285714285719*G0_1_1_0_0_0_4_1_0 + 2.74285714285719*G0_1_1_0_0_0_5_1_1 - 2.74285714285719*G0_1_1_0_0_1_0_0_0 - 2.74285714285719*G0_1_1_0_0_1_0_0_1 + 2.74285714285719*G0_1_1_0_0_1_1_0_0 + 2.74285714285719*G0_1_1_0_0_1_2_0_1 - 2.74285714285719*G0_1_1_0_0_1_3_1_0 - 2.74285714285719*G0_1_1_0_0_1_3_1_1 + 2.74285714285719*G0_1_1_0_0_1_4_1_0 + 2.74285714285719*G0_1_1_0_0_1_5_1_1 + 2.74285714285719*G0_1_1_1_0_0_0_0_0 + 2.74285714285719*G0_1_1_1_0_0_0_0_1 - 2.74285714285719*G0_1_1_1_0_0_1_0_0 - 2.74285714285719*G0_1_1_1_0_0_2_0_1 + 2.74285714285719*G0_1_1_1_0_0_3_1_0 + 2.74285714285719*G0_1_1_1_0_0_3_1_1 - 2.74285714285719*G0_1_1_1_0_0_4_1_0 - 2.74285714285719*G0_1_1_1_0_0_5_1_1 + 2.74285714285719*G0_1_1_2_0_1_0_0_0 + 2.74285714285719*G0_1_1_2_0_1_0_0_1 - 2.74285714285719*G0_1_1_2_0_1_1_0_0 - 2.74285714285719*G0_1_1_2_0_1_2_0_1 + 2.74285714285719*G0_1_1_2_0_1_3_1_0 + 2.74285714285719*G0_1_1_2_0_1_3_1_1 - 2.74285714285719*G0_1_1_2_0_1_4_1_0 - 2.74285714285719*G0_1_1_2_0_1_5_1_1 - 2.74285714285719*G0_1_1_3_1_0_0_0_0 - 2.74285714285719*G0_1_1_3_1_0_0_0_1 + 2.74285714285719*G0_1_1_3_1_0_1_0_0 + 2.74285714285719*G0_1_1_3_1_0_2_0_1 - 2.74285714285719*G0_1_1_3_1_0_3_1_0 - 2.74285714285719*G0_1_1_3_1_0_3_1_1 + 2.74285714285719*G0_1_1_3_1_0_4_1_0 + 2.74285714285719*G0_1_1_3_1_0_5_1_1 - 2.74285714285719*G0_1_1_3_1_1_0_0_0 - 2.74285714285719*G0_1_1_3_1_1_0_0_1 + 2.74285714285719*G0_1_1_3_1_1_1_0_0 + 2.74285714285719*G0_1_1_3_1_1_2_0_1 - 2.74285714285719*G0_1_1_3_1_1_3_1_0 - 2.74285714285719*G0_1_1_3_1_1_3_1_1 + 2.74285714285719*G0_1_1_3_1_1_4_1_0 + 2.74285714285719*G0_1_1_3_1_1_5_1_1 + 2.74285714285719*G0_1_1_4_1_0_0_0_0 + 2.74285714285719*G0_1_1_4_1_0_0_0_1 - 2.74285714285719*G0_1_1_4_1_0_1_0_0 - 2.74285714285719*G0_1_1_4_1_0_2_0_1 + 2.74285714285719*G0_1_1_4_1_0_3_1_0 + 2.74285714285719*G0_1_1_4_1_0_3_1_1 - 2.74285714285719*G0_1_1_4_1_0_4_1_0 - 2.74285714285719*G0_1_1_4_1_0_5_1_1 + 2.74285714285719*G0_1_1_5_1_1_0_0_0 + 2.74285714285719*G0_1_1_5_1_1_0_0_1 - 2.74285714285719*G0_1_1_5_1_1_1_0_0 - 2.74285714285719*G0_1_1_5_1_1_2_0_1 + 2.74285714285719*G0_1_1_5_1_1_3_1_0 + 2.74285714285719*G0_1_1_5_1_1_3_1_1 - 2.74285714285719*G0_1_1_5_1_1_4_1_0 - 2.74285714285719*G0_1_1_5_1_1_5_1_1;
    A[64] = A[534] - 0.42539682539683*G0_1_0_0_0_0_0_0_0 - 0.42539682539683*G0_1_0_0_0_0_0_0_1 + 0.42539682539683*G0_1_0_0_0_0_1_0_0 + 0.42539682539683*G0_1_0_0_0_0_2_0_1 - 0.42539682539683*G0_1_0_0_0_0_3_1_0 - 0.42539682539683*G0_1_0_0_0_0_3_1_1 + 0.42539682539683*G0_1_0_0_0_0_4_1_0 + 0.42539682539683*G0_1_0_0_0_0_5_1_1 - 0.42539682539683*G0_1_0_0_0_1_0_0_0 - 0.42539682539683*G0_1_0_0_0_1_0_0_1 + 0.42539682539683*G0_1_0_0_0_1_1_0_0 + 0.42539682539683*G0_1_0_0_0_1_2_0_1 - 0.42539682539683*G0_1_0_0_0_1_3_1_0 - 0.42539682539683*G0_1_0_0_0_1_3_1_1 + 0.42539682539683*G0_1_0_0_0_1_4_1_0 + 0.42539682539683*G0_1_0_0_0_1_5_1_1 + 0.42539682539683*G0_1_0_1_0_0_0_0_0 + 0.42539682539683*G0_1_0_1_0_0_0_0_1 - 0.42539682539683*G0_1_0_1_0_0_1_0_0 - 0.42539682539683*G0_1_0_1_0_0_2_0_1 + 0.42539682539683*G0_1_0_1_0_0_3_1_0 + 0.42539682539683*G0_1_0_1_0_0_3_1_1 - 0.42539682539683*G0_1_0_1_0_0_4_1_0 - 0.42539682539683*G0_1_0_1_0_0_5_1_1 + 0.42539682539683*G0_1_0_2_0_1_0_0_0 + 0.42539682539683*G0_1_0_2_0_1_0_0_1 - 0.42539682539683*G0_1_0_2_0_1_1_0_0 - 0.42539682539683*G0_1_0_2_0_1_2_0_1 + 0.42539682539683*G0_1_0_2_0_1_3_1_0 + 0.42539682539683*G0_1_0_2_0_1_3_1_1 - 0.42539682539683*G0_1_0_2_0_1_4_1_0 - 0.42539682539683*G0_1_0_2_0_1_5_1_1 - 0.42539682539683*G0_1_0_3_1_0_0_0_0 - 0.42539682539683*G0_1_0_3_1_0_0_0_1 + 0.42539682539683*G0_1_0_3_1_0_1_0_0 + 0.42539682539683*G0_1_0_3_1_0_2_0_1 - 0.42539682539683*G0_1_0_3_1_0_3_1_0 - 0.42539682539683*G0_1_0_3_1_0_3_1_1 + 0.42539682539683*G0_1_0_3_1_0_4_1_0 + 0.42539682539683*G0_1_0_3_1_0_5_1_1 - 0.42539682539683*G0_1_0_3_1_1_0_0_0 - 0.42539682539683*G0_1_0_3_1_1_0_0_1 + 0.42539682539683*G0_1_0_3_1_1_1_0_0 + 0.42539682539683*G0_1_0_3_1_1_2_0_1 - 0.42539682539683*G0_1_0_3_1_1_3_1_0 - 0.42539682539683*G0_1_0_3_1_1_3_1_1 + 0.42539682539683*G0_1_0_3_1_1_4_1_0 + 0.42539682539683*G0_1_0_3_1_1_5_1_1 + 0.42539682539683*G0_1_0_4_1_0_0_0_0 + 0.42539682539683*G0_1_0_4_1_0_0_0_1 - 0.42539682539683*G0_1_0_4_1_0_1_0_0 - 0.42539682539683*G0_1_0_4_1_0_2_0_1 + 0.42539682539683*G0_1_0_4_1_0_3_1_0 + 0.42539682539683*G0_1_0_4_1_0_3_1_1 - 0.42539682539683*G0_1_0_4_1_0_4_1_0 - 0.42539682539683*G0_1_0_4_1_0_5_1_1 + 0.42539682539683*G0_1_0_5_1_1_0_0_0 + 0.42539682539683*G0_1_0_5_1_1_0_0_1 - 0.42539682539683*G0_1_0_5_1_1_1_0_0 - 0.42539682539683*G0_1_0_5_1_1_2_0_1 + 0.42539682539683*G0_1_0_5_1_1_3_1_0 + 0.42539682539683*G0_1_0_5_1_1_3_1_1 - 0.42539682539683*G0_1_0_5_1_1_4_1_0 - 0.42539682539683*G0_1_0_5_1_1_5_1_1;
    A[67] = -A[64] + 0.510052910052918*G0_1_1_0_0_0_0_0_0 + 0.510052910052918*G0_1_1_0_0_0_0_0_1 - 0.510052910052918*G0_1_1_0_0_0_1_0_0 - 0.510052910052918*G0_1_1_0_0_0_2_0_1 + 0.510052910052918*G0_1_1_0_0_0_3_1_0 + 0.510052910052918*G0_1_1_0_0_0_3_1_1 - 0.510052910052918*G0_1_1_0_0_0_4_1_0 - 0.510052910052918*G0_1_1_0_0_0_5_1_1 + 0.510052910052918*G0_1_1_0_0_1_0_0_0 + 0.510052910052918*G0_1_1_0_0_1_0_0_1 - 0.510052910052918*G0_1_1_0_0_1_1_0_0 - 0.510052910052918*G0_1_1_0_0_1_2_0_1 + 0.510052910052918*G0_1_1_0_0_1_3_1_0 + 0.510052910052918*G0_1_1_0_0_1_3_1_1 - 0.510052910052918*G0_1_1_0_0_1_4_1_0 - 0.510052910052918*G0_1_1_0_0_1_5_1_1 - 0.510052910052918*G0_1_1_1_0_0_0_0_0 - 0.510052910052918*G0_1_1_1_0_0_0_0_1 + 0.510052910052918*G0_1_1_1_0_0_1_0_0 + 0.510052910052918*G0_1_1_1_0_0_2_0_1 - 0.510052910052918*G0_1_1_1_0_0_3_1_0 - 0.510052910052918*G0_1_1_1_0_0_3_1_1 + 0.510052910052918*G0_1_1_1_0_0_4_1_0 + 0.510052910052918*G0_1_1_1_0_0_5_1_1 - 0.510052910052918*G0_1_1_2_0_1_0_0_0 - 0.510052910052918*G0_1_1_2_0_1_0_0_1 + 0.510052910052918*G0_1_1_2_0_1_1_0_0 + 0.510052910052918*G0_1_1_2_0_1_2_0_1 - 0.510052910052918*G0_1_1_2_0_1_3_1_0 - 0.510052910052918*G0_1_1_2_0_1_3_1_1 + 0.510052910052918*G0_1_1_2_0_1_4_1_0 + 0.510052910052918*G0_1_1_2_0_1_5_1_1 + 0.510052910052918*G0_1_1_3_1_0_0_0_0 + 0.510052910052918*G0_1_1_3_1_0_0_0_1 - 0.510052910052918*G0_1_1_3_1_0_1_0_0 - 0.510052910052918*G0_1_1_3_1_0_2_0_1 + 0.510052910052918*G0_1_1_3_1_0_3_1_0 + 0.510052910052918*G0_1_1_3_1_0_3_1_1 - 0.510052910052918*G0_1_1_3_1_0_4_1_0 - 0.510052910052918*G0_1_1_3_1_0_5_1_1 + 0.510052910052918*G0_1_1_3_1_1_0_0_0 + 0.510052910052918*G0_1_1_3_1_1_0_0_1 - 0.510052910052918*G0_1_1_3_1_1_1_0_0 - 0.510052910052918*G0_1_1_3_1_1_2_0_1 + 0.510052910052918*G0_1_1_3_1_1_3_1_0 + 0.510052910052918*G0_1_1_3_1_1_3_1_1 - 0.510052910052918*G0_1_1_3_1_1_4_1_0 - 0.510052910052918*G0_1_1_3_1_1_5_1_1 - 0.510052910052918*G0_1_1_4_1_0_0_0_0 - 0.510052910052918*G0_1_1_4_1_0_0_0_1 + 0.510052910052918*G0_1_1_4_1_0_1_0_0 + 0.510052910052918*G0_1_1_4_1_0_2_0_1 - 0.510052910052918*G0_1_1_4_1_0_3_1_0 - 0.510052910052918*G0_1_1_4_1_0_3_1_1 + 0.510052910052918*G0_1_1_4_1_0_4_1_0 + 0.510052910052918*G0_1_1_4_1_0_5_1_1 - 0.510052910052918*G0_1_1_5_1_1_0_0_0 - 0.510052910052918*G0_1_1_5_1_1_0_0_1 + 0.510052910052918*G0_1_1_5_1_1_1_0_0 + 0.510052910052918*G0_1_1_5_1_1_2_0_1 - 0.510052910052918*G0_1_1_5_1_1_3_1_0 - 0.510052910052918*G0_1_1_5_1_1_3_1_1 + 0.510052910052918*G0_1_1_5_1_1_4_1_0 + 0.510052910052918*G0_1_1_5_1_1_5_1_1;
    A[159] = A[624];
    A[898] = A[869];
    A[115] = 0.0;
    A[186] = A[279];
    A[138] = 0.0;
    A[596] = A[334];
    A[217] = A[775] - 0.507936507936508*G0_0_0_0_0_0_0_0_0 - 0.507936507936508*G0_0_0_0_0_0_0_0_1 + 0.507936507936508*G0_0_0_0_0_0_1_0_0 + 0.507936507936508*G0_0_0_0_0_0_2_0_1 - 0.507936507936508*G0_0_0_0_0_0_3_1_0 - 0.507936507936508*G0_0_0_0_0_0_3_1_1 + 0.507936507936508*G0_0_0_0_0_0_4_1_0 + 0.507936507936508*G0_0_0_0_0_0_5_1_1 - 0.507936507936508*G0_0_0_0_0_1_0_0_0 - 0.507936507936508*G0_0_0_0_0_1_0_0_1 + 0.507936507936508*G0_0_0_0_0_1_1_0_0 + 0.507936507936508*G0_0_0_0_0_1_2_0_1 - 0.507936507936508*G0_0_0_0_0_1_3_1_0 - 0.507936507936508*G0_0_0_0_0_1_3_1_1 + 0.507936507936508*G0_0_0_0_0_1_4_1_0 + 0.507936507936508*G0_0_0_0_0_1_5_1_1 + 0.507936507936508*G0_0_0_1_0_0_0_0_0 + 0.507936507936508*G0_0_0_1_0_0_0_0_1 - 0.507936507936508*G0_0_0_1_0_0_1_0_0 - 0.507936507936508*G0_0_0_1_0_0_2_0_1 + 0.507936507936508*G0_0_0_1_0_0_3_1_0 + 0.507936507936508*G0_0_0_1_0_0_3_1_1 - 0.507936507936508*G0_0_0_1_0_0_4_1_0 - 0.507936507936508*G0_0_0_1_0_0_5_1_1 + 0.507936507936508*G0_0_0_2_0_1_0_0_0 + 0.507936507936508*G0_0_0_2_0_1_0_0_1 - 0.507936507936508*G0_0_0_2_0_1_1_0_0 - 0.507936507936508*G0_0_0_2_0_1_2_0_1 + 0.507936507936508*G0_0_0_2_0_1_3_1_0 + 0.507936507936508*G0_0_0_2_0_1_3_1_1 - 0.507936507936508*G0_0_0_2_0_1_4_1_0 - 0.507936507936508*G0_0_0_2_0_1_5_1_1 - 0.507936507936508*G0_0_0_3_1_0_0_0_0 - 0.507936507936508*G0_0_0_3_1_0_0_0_1 + 0.507936507936508*G0_0_0_3_1_0_1_0_0 + 0.507936507936508*G0_0_0_3_1_0_2_0_1 - 0.507936507936508*G0_0_0_3_1_0_3_1_0 - 0.507936507936508*G0_0_0_3_1_0_3_1_1 + 0.507936507936508*G0_0_0_3_1_0_4_1_0 + 0.507936507936508*G0_0_0_3_1_0_5_1_1 - 0.507936507936508*G0_0_0_3_1_1_0_0_0 - 0.507936507936508*G0_0_0_3_1_1_0_0_1 + 0.507936507936508*G0_0_0_3_1_1_1_0_0 + 0.507936507936508*G0_0_0_3_1_1_2_0_1 - 0.507936507936508*G0_0_0_3_1_1_3_1_0 - 0.507936507936508*G0_0_0_3_1_1_3_1_1 + 0.507936507936508*G0_0_0_3_1_1_4_1_0 + 0.507936507936508*G0_0_0_3_1_1_5_1_1 + 0.507936507936508*G0_0_0_4_1_0_0_0_0 + 0.507936507936508*G0_0_0_4_1_0_0_0_1 - 0.507936507936508*G0_0_0_4_1_0_1_0_0 - 0.507936507936508*G0_0_0_4_1_0_2_0_1 + 0.507936507936508*G0_0_0_4_1_0_3_1_0 + 0.507936507936508*G0_0_0_4_1_0_3_1_1 - 0.507936507936508*G0_0_0_4_1_0_4_1_0 - 0.507936507936508*G0_0_0_4_1_0_5_1_1 + 0.507936507936508*G0_0_0_5_1_1_0_0_0 + 0.507936507936508*G0_0_0_5_1_1_0_0_1 - 0.507936507936508*G0_0_0_5_1_1_1_0_0 - 0.507936507936508*G0_0_0_5_1_1_2_0_1 + 0.507936507936508*G0_0_0_5_1_1_3_1_0 + 0.507936507936508*G0_0_0_5_1_1_3_1_1 - 0.507936507936508*G0_0_0_5_1_1_4_1_0 - 0.507936507936508*G0_0_0_5_1_1_5_1_1 + 0.507936507936511*G0_1_1_0_0_0_0_0_0 + 0.507936507936511*G0_1_1_0_0_0_0_0_1 - 0.507936507936511*G0_1_1_0_0_0_1_0_0 - 0.507936507936511*G0_1_1_0_0_0_2_0_1 + 0.507936507936511*G0_1_1_0_0_0_3_1_0 + 0.507936507936511*G0_1_1_0_0_0_3_1_1 - 0.507936507936511*G0_1_1_0_0_0_4_1_0 - 0.507936507936511*G0_1_1_0_0_0_5_1_1 + 0.507936507936511*G0_1_1_0_0_1_0_0_0 + 0.507936507936511*G0_1_1_0_0_1_0_0_1 - 0.507936507936511*G0_1_1_0_0_1_1_0_0 - 0.507936507936511*G0_1_1_0_0_1_2_0_1 + 0.507936507936511*G0_1_1_0_0_1_3_1_0 + 0.507936507936511*G0_1_1_0_0_1_3_1_1 - 0.507936507936511*G0_1_1_0_0_1_4_1_0 - 0.507936507936511*G0_1_1_0_0_1_5_1_1 - 0.507936507936511*G0_1_1_1_0_0_0_0_0 - 0.507936507936511*G0_1_1_1_0_0_0_0_1 + 0.507936507936511*G0_1_1_1_0_0_1_0_0 + 0.507936507936511*G0_1_1_1_0_0_2_0_1 - 0.507936507936511*G0_1_1_1_0_0_3_1_0 - 0.507936507936511*G0_1_1_1_0_0_3_1_1 + 0.507936507936511*G0_1_1_1_0_0_4_1_0 + 0.507936507936511*G0_1_1_1_0_0_5_1_1 - 0.507936507936511*G0_1_1_2_0_1_0_0_0 - 0.507936507936511*G0_1_1_2_0_1_0_0_1 + 0.507936507936511*G0_1_1_2_0_1_1_0_0 + 0.507936507936511*G0_1_1_2_0_1_2_0_1 - 0.507936507936511*G0_1_1_2_0_1_3_1_0 - 0.507936507936511*G0_1_1_2_0_1_3_1_1 + 0.507936507936511*G0_1_1_2_0_1_4_1_0 + 0.507936507936511*G0_1_1_2_0_1_5_1_1 + 0.507936507936511*G0_1_1_3_1_0_0_0_0 + 0.507936507936511*G0_1_1_3_1_0_0_0_1 - 0.507936507936511*G0_1_1_3_1_0_1_0_0 - 0.507936507936511*G0_1_1_3_1_0_2_0_1 + 0.507936507936511*G0_1_1_3_1_0_3_1_0 + 0.507936507936511*G0_1_1_3_1_0_3_1_1 - 0.507936507936511*G0_1_1_3_1_0_4_1_0 - 0.507936507936511*G0_1_1_3_1_0_5_1_1 + 0.507936507936511*G0_1_1_3_1_1_0_0_0 + 0.507936507936511*G0_1_1_3_1_1_0_0_1 - 0.507936507936511*G0_1_1_3_1_1_1_0_0 - 0.507936507936511*G0_1_1_3_1_1_2_0_1 + 0.507936507936511*G0_1_1_3_1_1_3_1_0 + 0.507936507936511*G0_1_1_3_1_1_3_1_1 - 0.507936507936511*G0_1_1_3_1_1_4_1_0 - 0.507936507936511*G0_1_1_3_1_1_5_1_1 - 0.507936507936511*G0_1_1_4_1_0_0_0_0 - 0.507936507936511*G0_1_1_4_1_0_0_0_1 + 0.507936507936511*G0_1_1_4_1_0_1_0_0 + 0.507936507936511*G0_1_1_4_1_0_2_0_1 - 0.507936507936511*G0_1_1_4_1_0_3_1_0 - 0.507936507936511*G0_1_1_4_1_0_3_1_1 + 0.507936507936511*G0_1_1_4_1_0_4_1_0 + 0.507936507936511*G0_1_1_4_1_0_5_1_1 - 0.507936507936511*G0_1_1_5_1_1_0_0_0 - 0.507936507936511*G0_1_1_5_1_1_0_0_1 + 0.507936507936511*G0_1_1_5_1_1_1_0_0 + 0.507936507936511*G0_1_1_5_1_1_2_0_1 - 0.507936507936511*G0_1_1_5_1_1_3_1_0 - 0.507936507936511*G0_1_1_5_1_1_3_1_1 + 0.507936507936511*G0_1_1_5_1_1_4_1_0 + 0.507936507936511*G0_1_1_5_1_1_5_1_1;
    A[169] = 0.0;
    A[629] = A[890];
    A[501] = A[181];
    A[204] = 0.0;
    A[646] = A[181];
    A[570] = 0.0;
    A[526] = A[61];
    A[239] = 0.0;
    A[563] = A[98];
    A[241] = A[181];
    A[298] = 0.0;
    A[447] = 0.0;
    A[327] = 0.0;
    A[468] = A[5];
    A[348] = 0.0;
    A[29] = 0.0;
    A[730] = 0.0;
    A[381] = 0.0;
    A[833] = A[252];
    A[54] = 0.0;
    A[761] = 0.0;
    A[414] = 0.0;
    A[856] = A[421];
    A[780] = 0.0;
    A[891] = A[658];
    A[823] = 0.0;
    A[145] = 0.0;
    A[854] = 0.0;
    A[178] = 0.0;
    A[885] = A[14];
    A[492] = 0.0;
    A[199] = 0.0;
    A[655] = A[306];
    A[579] = 0.0;
    A[519] = 0.0;
    A[236] = 0.0;
    A[682] = A[217];
    A[602] = 0.0;
    A[554] = 0.0;
    A[713] = A[620];
    A[633] = 0.0;
    A[248] = A[620];
    A[668] = 0.0;
    A[275] = A[624];
    A[703] = 0.0;
    A[302] = A[534];
    A[477] = A[14];
    A[341] = A[806];
    A[20] = 0.0;
    A[737] = A[534];
    A[424] = A[134];
    A[372] = A[403];
    A[47] = 0.0;
    A[762] = 0.0;
    A[451] = 0.0;
    A[407] = 0.0;
    A[82] = 0.0;
    A[791] = 0.0;
    A[10] = A[475];
    A[97] = A[213];
    A[812] = 0.0;
    A[41] = A[506];
    A[120] = A[5];
    A[845] = 0.0;
    A[155] = A[620];
    A[878] = 0.0;
    A[483] = 0.0;
    A[190] = A[306];
    A[584] = 0.0;
    A[512] = 0.0;
    A[229] = 0.0;
    A[609] = 0.0;
    A[549] = 0.0;
    A[505] = A[40];
    A[642] = 0.0;
    A[255] = 0.0;
    A[663] = 0.0;
    A[284] = A[748];
    A[700] = 0.0;
    A[313] = A[865];
    A[261] = 0.0;
    A[330] = A[795];
    A[286] = 0.0;
    A[744] = A[279];
    A[435] = 0.0;
    A[371] = A[836];
    A[323] = 0.0;
    A[771] = A[306];
    A[464] = 0.0;
    A[400] = A[865];
    A[77] = 0.0;
    A[798] = A[101];
    A[1] = A[466];
    A[102] = A[569];
    A[837] = A[403];
    A[42] = A[421];
    A[135] = 0.0;
    A[868] = A[403];
    A[71] = A[534];
    A[164] = A[890];
    A[871] = 0.0;
    A[108] = 0.0;
    A[193] = A[658];
    A[141] = 0.0;
    A[593] = A[709];
    A[218] = A[683];
    A[616] = A[151];
    A[540] = 0.0;
    A[496] = A[31];
    A[651] = A[279];
    A[539] = A[887];
    A[686] = A[221];
    A[566] = A[101];
    A[693] = 0.0;
    A[268] = 0.0;
    A[295] = 0.0;
    A[442] = 0.0;
    A[362] = A[887];
    A[473] = A[8];
    A[393] = A[103];
    A[809] = A[836];
    A[24] = 0.0;
    A[725] = 0.0;
    A[384] = 0.0;
    A[826] = A[421];
    A[35] = A[500];
    A[750] = 0.0;
    A[419] = 0.0;
    A[867] = A[373];
    A[62] = A[527];
    A[787] = 0.0;
    A[896] = A[836];
    A[117] = 0.0;
    A[184] = A[126];
    A[148] = 0.0;
    A[598] = A[394];
    A[211] = A[181];
    A[167] = 0.0;
    A[503] = A[181];
    A[572] = 0.0;
    A[532] = A[67];
    A[689] = A[892];
    A[605] = 0.0;
    A[561] = A[96];
    A[714] = A[743];
    A[243] = A[98];
    A[272] = A[534];
    A[445] = 0.0;
    A[325] = 0.0;
    A[478] = A[14];
    A[350] = 0.0;
    A[732] = 0.0;
    A[423] = A[569];
    A[383] = 0.0;
    A[759] = 0.0;
    A[412] = 0.0;
    A[858] = A[103];
    A[89] = 0.0;
    A[794] = 0.0;
    A[889] = A[134];
    A[90] = A[5];
    A[825] = A[14];
    A[147] = 0.0;
    A[848] = 0.0;
    A[176] = 0.0;
    A[883] = 0.0;
    A[494] = 0.0;
    A[197] = 0.0;
    A[581] = 0.0;
    A[525] = -A[61] + 0.0566137566137576*G0_1_1_0_0_0_0_0_0 + 0.0566137566137576*G0_1_1_0_0_0_0_0_1 - 0.0566137566137576*G0_1_1_0_0_0_1_0_0 - 0.0566137566137576*G0_1_1_0_0_0_2_0_1 + 0.0566137566137576*G0_1_1_0_0_0_3_1_0 + 0.0566137566137576*G0_1_1_0_0_0_3_1_1 - 0.0566137566137576*G0_1_1_0_0_0_4_1_0 - 0.0566137566137576*G0_1_1_0_0_0_5_1_1 + 0.0566137566137576*G0_1_1_0_0_1_0_0_0 + 0.0566137566137576*G0_1_1_0_0_1_0_0_1 - 0.0566137566137576*G0_1_1_0_0_1_1_0_0 - 0.0566137566137576*G0_1_1_0_0_1_2_0_1 + 0.0566137566137576*G0_1_1_0_0_1_3_1_0 + 0.0566137566137576*G0_1_1_0_0_1_3_1_1 - 0.0566137566137576*G0_1_1_0_0_1_4_1_0 - 0.0566137566137576*G0_1_1_0_0_1_5_1_1 - 0.0566137566137576*G0_1_1_1_0_0_0_0_0 - 0.0566137566137576*G0_1_1_1_0_0_0_0_1 + 0.0566137566137576*G0_1_1_1_0_0_1_0_0 + 0.0566137566137576*G0_1_1_1_0_0_2_0_1 - 0.0566137566137576*G0_1_1_1_0_0_3_1_0 - 0.0566137566137576*G0_1_1_1_0_0_3_1_1 + 0.0566137566137576*G0_1_1_1_0_0_4_1_0 + 0.0566137566137576*G0_1_1_1_0_0_5_1_1 - 0.0566137566137576*G0_1_1_2_0_1_0_0_0 - 0.0566137566137576*G0_1_1_2_0_1_0_0_1 + 0.0566137566137576*G0_1_1_2_0_1_1_0_0 + 0.0566137566137576*G0_1_1_2_0_1_2_0_1 - 0.0566137566137576*G0_1_1_2_0_1_3_1_0 - 0.0566137566137576*G0_1_1_2_0_1_3_1_1 + 0.0566137566137576*G0_1_1_2_0_1_4_1_0 + 0.0566137566137576*G0_1_1_2_0_1_5_1_1 + 0.0566137566137576*G0_1_1_3_1_0_0_0_0 + 0.0566137566137576*G0_1_1_3_1_0_0_0_1 - 0.0566137566137576*G0_1_1_3_1_0_1_0_0 - 0.0566137566137576*G0_1_1_3_1_0_2_0_1 + 0.0566137566137576*G0_1_1_3_1_0_3_1_0 + 0.0566137566137576*G0_1_1_3_1_0_3_1_1 - 0.0566137566137576*G0_1_1_3_1_0_4_1_0 - 0.0566137566137576*G0_1_1_3_1_0_5_1_1 + 0.0566137566137576*G0_1_1_3_1_1_0_0_0 + 0.0566137566137576*G0_1_1_3_1_1_0_0_1 - 0.0566137566137576*G0_1_1_3_1_1_1_0_0 - 0.0566137566137576*G0_1_1_3_1_1_2_0_1 + 0.0566137566137576*G0_1_1_3_1_1_3_1_0 + 0.0566137566137576*G0_1_1_3_1_1_3_1_1 - 0.0566137566137576*G0_1_1_3_1_1_4_1_0 - 0.0566137566137576*G0_1_1_3_1_1_5_1_1 - 0.0566137566137576*G0_1_1_4_1_0_0_0_0 - 0.0566137566137576*G0_1_1_4_1_0_0_0_1 + 0.0566137566137576*G0_1_1_4_1_0_1_0_0 + 0.0566137566137576*G0_1_1_4_1_0_2_0_1 - 0.0566137566137576*G0_1_1_4_1_0_3_1_0 - 0.0566137566137576*G0_1_1_4_1_0_3_1_1 + 0.0566137566137576*G0_1_1_4_1_0_4_1_0 + 0.0566137566137576*G0_1_1_4_1_0_5_1_1 - 0.0566137566137576*G0_1_1_5_1_1_0_0_0 - 0.0566137566137576*G0_1_1_5_1_1_0_0_1 + 0.0566137566137576*G0_1_1_5_1_1_1_0_0 + 0.0566137566137576*G0_1_1_5_1_1_2_0_1 - 0.0566137566137576*G0_1_1_5_1_1_3_1_0 - 0.0566137566137576*G0_1_1_5_1_1_3_1_1 + 0.0566137566137576*G0_1_1_5_1_1_4_1_0 + 0.0566137566137576*G0_1_1_5_1_1_5_1_1;
    A[230] = 0.0;
    A[680] = A[215];
    A[612] = 0.0;
    A[552] = 0.0;
    A[707] = A[242];
    A[631] = 0.0;
    A[250] = A[715];
    A[674] = 0.0;
    A[281] = -A[273] + 0.880423280423283*G0_0_0_0_0_0_0_0_0 + 0.880423280423283*G0_0_0_0_0_0_0_0_1 - 0.880423280423283*G0_0_0_0_0_0_1_0_0 - 0.880423280423283*G0_0_0_0_0_0_2_0_1 + 0.880423280423283*G0_0_0_0_0_0_3_1_0 + 0.880423280423283*G0_0_0_0_0_0_3_1_1 - 0.880423280423283*G0_0_0_0_0_0_4_1_0 - 0.880423280423283*G0_0_0_0_0_0_5_1_1 + 0.880423280423283*G0_0_0_0_0_1_0_0_0 + 0.880423280423283*G0_0_0_0_0_1_0_0_1 - 0.880423280423283*G0_0_0_0_0_1_1_0_0 - 0.880423280423283*G0_0_0_0_0_1_2_0_1 + 0.880423280423283*G0_0_0_0_0_1_3_1_0 + 0.880423280423283*G0_0_0_0_0_1_3_1_1 - 0.880423280423283*G0_0_0_0_0_1_4_1_0 - 0.880423280423283*G0_0_0_0_0_1_5_1_1 - 0.880423280423283*G0_0_0_1_0_0_0_0_0 - 0.880423280423283*G0_0_0_1_0_0_0_0_1 + 0.880423280423283*G0_0_0_1_0_0_1_0_0 + 0.880423280423283*G0_0_0_1_0_0_2_0_1 - 0.880423280423283*G0_0_0_1_0_0_3_1_0 - 0.880423280423283*G0_0_0_1_0_0_3_1_1 + 0.880423280423283*G0_0_0_1_0_0_4_1_0 + 0.880423280423283*G0_0_0_1_0_0_5_1_1 - 0.880423280423283*G0_0_0_2_0_1_0_0_0 - 0.880423280423283*G0_0_0_2_0_1_0_0_1 + 0.880423280423283*G0_0_0_2_0_1_1_0_0 + 0.880423280423283*G0_0_0_2_0_1_2_0_1 - 0.880423280423283*G0_0_0_2_0_1_3_1_0 - 0.880423280423283*G0_0_0_2_0_1_3_1_1 + 0.880423280423283*G0_0_0_2_0_1_4_1_0 + 0.880423280423283*G0_0_0_2_0_1_5_1_1 + 0.880423280423283*G0_0_0_3_1_0_0_0_0 + 0.880423280423283*G0_0_0_3_1_0_0_0_1 - 0.880423280423283*G0_0_0_3_1_0_1_0_0 - 0.880423280423283*G0_0_0_3_1_0_2_0_1 + 0.880423280423283*G0_0_0_3_1_0_3_1_0 + 0.880423280423283*G0_0_0_3_1_0_3_1_1 - 0.880423280423283*G0_0_0_3_1_0_4_1_0 - 0.880423280423283*G0_0_0_3_1_0_5_1_1 + 0.880423280423283*G0_0_0_3_1_1_0_0_0 + 0.880423280423283*G0_0_0_3_1_1_0_0_1 - 0.880423280423283*G0_0_0_3_1_1_1_0_0 - 0.880423280423283*G0_0_0_3_1_1_2_0_1 + 0.880423280423283*G0_0_0_3_1_1_3_1_0 + 0.880423280423283*G0_0_0_3_1_1_3_1_1 - 0.880423280423283*G0_0_0_3_1_1_4_1_0 - 0.880423280423283*G0_0_0_3_1_1_5_1_1 - 0.880423280423283*G0_0_0_4_1_0_0_0_0 - 0.880423280423283*G0_0_0_4_1_0_0_0_1 + 0.880423280423283*G0_0_0_4_1_0_1_0_0 + 0.880423280423283*G0_0_0_4_1_0_2_0_1 - 0.880423280423283*G0_0_0_4_1_0_3_1_0 - 0.880423280423283*G0_0_0_4_1_0_3_1_1 + 0.880423280423283*G0_0_0_4_1_0_4_1_0 + 0.880423280423283*G0_0_0_4_1_0_5_1_1 - 0.880423280423283*G0_0_0_5_1_1_0_0_0 - 0.880423280423283*G0_0_0_5_1_1_0_0_1 + 0.880423280423283*G0_0_0_5_1_1_1_0_0 + 0.880423280423283*G0_0_0_5_1_1_2_0_1 - 0.880423280423283*G0_0_0_5_1_1_3_1_0 - 0.880423280423283*G0_0_0_5_1_1_3_1_1 + 0.880423280423283*G0_0_0_5_1_1_4_1_0 + 0.880423280423283*G0_0_0_5_1_1_5_1_1 + 0.541798941798937*G0_1_0_0_0_0_0_0_0 + 0.541798941798937*G0_1_0_0_0_0_0_0_1 - 0.541798941798937*G0_1_0_0_0_0_1_0_0 - 0.541798941798937*G0_1_0_0_0_0_2_0_1 + 0.541798941798937*G0_1_0_0_0_0_3_1_0 + 0.541798941798937*G0_1_0_0_0_0_3_1_1 - 0.541798941798937*G0_1_0_0_0_0_4_1_0 - 0.541798941798937*G0_1_0_0_0_0_5_1_1 + 0.541798941798937*G0_1_0_0_0_1_0_0_0 + 0.541798941798937*G0_1_0_0_0_1_0_0_1 - 0.541798941798937*G0_1_0_0_0_1_1_0_0 - 0.541798941798937*G0_1_0_0_0_1_2_0_1 + 0.541798941798937*G0_1_0_0_0_1_3_1_0 + 0.541798941798937*G0_1_0_0_0_1_3_1_1 - 0.541798941798937*G0_1_0_0_0_1_4_1_0 - 0.541798941798937*G0_1_0_0_0_1_5_1_1 - 0.541798941798937*G0_1_0_1_0_0_0_0_0 - 0.541798941798937*G0_1_0_1_0_0_0_0_1 + 0.541798941798937*G0_1_0_1_0_0_1_0_0 + 0.541798941798937*G0_1_0_1_0_0_2_0_1 - 0.541798941798937*G0_1_0_1_0_0_3_1_0 - 0.541798941798937*G0_1_0_1_0_0_3_1_1 + 0.541798941798937*G0_1_0_1_0_0_4_1_0 + 0.541798941798937*G0_1_0_1_0_0_5_1_1 - 0.541798941798937*G0_1_0_2_0_1_0_0_0 - 0.541798941798937*G0_1_0_2_0_1_0_0_1 + 0.541798941798937*G0_1_0_2_0_1_1_0_0 + 0.541798941798937*G0_1_0_2_0_1_2_0_1 - 0.541798941798937*G0_1_0_2_0_1_3_1_0 - 0.541798941798937*G0_1_0_2_0_1_3_1_1 + 0.541798941798937*G0_1_0_2_0_1_4_1_0 + 0.541798941798937*G0_1_0_2_0_1_5_1_1 + 0.541798941798937*G0_1_0_3_1_0_0_0_0 + 0.541798941798937*G0_1_0_3_1_0_0_0_1 - 0.541798941798937*G0_1_0_3_1_0_1_0_0 - 0.541798941798937*G0_1_0_3_1_0_2_0_1 + 0.541798941798937*G0_1_0_3_1_0_3_1_0 + 0.541798941798937*G0_1_0_3_1_0_3_1_1 - 0.541798941798937*G0_1_0_3_1_0_4_1_0 - 0.541798941798937*G0_1_0_3_1_0_5_1_1 + 0.541798941798937*G0_1_0_3_1_1_0_0_0 + 0.541798941798937*G0_1_0_3_1_1_0_0_1 - 0.541798941798937*G0_1_0_3_1_1_1_0_0 - 0.541798941798937*G0_1_0_3_1_1_2_0_1 + 0.541798941798937*G0_1_0_3_1_1_3_1_0 + 0.541798941798937*G0_1_0_3_1_1_3_1_1 - 0.541798941798937*G0_1_0_3_1_1_4_1_0 - 0.541798941798937*G0_1_0_3_1_1_5_1_1 - 0.541798941798937*G0_1_0_4_1_0_0_0_0 - 0.541798941798937*G0_1_0_4_1_0_0_0_1 + 0.541798941798937*G0_1_0_4_1_0_1_0_0 + 0.541798941798937*G0_1_0_4_1_0_2_0_1 - 0.541798941798937*G0_1_0_4_1_0_3_1_0 - 0.541798941798937*G0_1_0_4_1_0_3_1_1 + 0.541798941798937*G0_1_0_4_1_0_4_1_0 + 0.541798941798937*G0_1_0_4_1_0_5_1_1 - 0.541798941798937*G0_1_0_5_1_1_0_0_0 - 0.541798941798937*G0_1_0_5_1_1_0_0_1 + 0.541798941798937*G0_1_0_5_1_1_1_0_0 + 0.541798941798937*G0_1_0_5_1_1_2_0_1 - 0.541798941798937*G0_1_0_5_1_1_3_1_0 - 0.541798941798937*G0_1_0_5_1_1_3_1_1 + 0.541798941798937*G0_1_0_5_1_1_4_1_0 + 0.541798941798937*G0_1_0_5_1_1_5_1_1;
    A[705] = A[240];
    A[300] = A[765];
    A[256] = 0.0;
    A[343] = A[401];
    A[22] = 0.0;
    A[739] = A[274];
    A[430] = A[314];
    A[374] = A[897];
    A[53] = 0.0;
    A[768] = A[303];
    A[453] = 0.0;
    A[405] = 0.0;
    A[80] = 0.0;
    A[789] = 0.0;
    A[12] = A[14];
    A[99] = A[273];
    A[814] = 0.0;
    A[39] = A[504];
    A[122] = A[587];
    A[847] = 0.0;
    A[74] = A[887];
    A[153] = -A[98] - 0.54179894179894*G0_1_0_0_0_0_0_0_0 - 0.54179894179894*G0_1_0_0_0_0_0_0_1 + 0.54179894179894*G0_1_0_0_0_0_1_0_0 + 0.54179894179894*G0_1_0_0_0_0_2_0_1 - 0.54179894179894*G0_1_0_0_0_0_3_1_0 - 0.54179894179894*G0_1_0_0_0_0_3_1_1 + 0.54179894179894*G0_1_0_0_0_0_4_1_0 + 0.54179894179894*G0_1_0_0_0_0_5_1_1 - 0.54179894179894*G0_1_0_0_0_1_0_0_0 - 0.54179894179894*G0_1_0_0_0_1_0_0_1 + 0.54179894179894*G0_1_0_0_0_1_1_0_0 + 0.54179894179894*G0_1_0_0_0_1_2_0_1 - 0.54179894179894*G0_1_0_0_0_1_3_1_0 - 0.54179894179894*G0_1_0_0_0_1_3_1_1 + 0.54179894179894*G0_1_0_0_0_1_4_1_0 + 0.54179894179894*G0_1_0_0_0_1_5_1_1 + 0.54179894179894*G0_1_0_1_0_0_0_0_0 + 0.54179894179894*G0_1_0_1_0_0_0_0_1 - 0.54179894179894*G0_1_0_1_0_0_1_0_0 - 0.54179894179894*G0_1_0_1_0_0_2_0_1 + 0.54179894179894*G0_1_0_1_0_0_3_1_0 + 0.54179894179894*G0_1_0_1_0_0_3_1_1 - 0.54179894179894*G0_1_0_1_0_0_4_1_0 - 0.54179894179894*G0_1_0_1_0_0_5_1_1 + 0.54179894179894*G0_1_0_2_0_1_0_0_0 + 0.54179894179894*G0_1_0_2_0_1_0_0_1 - 0.54179894179894*G0_1_0_2_0_1_1_0_0 - 0.54179894179894*G0_1_0_2_0_1_2_0_1 + 0.54179894179894*G0_1_0_2_0_1_3_1_0 + 0.54179894179894*G0_1_0_2_0_1_3_1_1 - 0.54179894179894*G0_1_0_2_0_1_4_1_0 - 0.54179894179894*G0_1_0_2_0_1_5_1_1 - 0.54179894179894*G0_1_0_3_1_0_0_0_0 - 0.54179894179894*G0_1_0_3_1_0_0_0_1 + 0.54179894179894*G0_1_0_3_1_0_1_0_0 + 0.54179894179894*G0_1_0_3_1_0_2_0_1 - 0.54179894179894*G0_1_0_3_1_0_3_1_0 - 0.54179894179894*G0_1_0_3_1_0_3_1_1 + 0.54179894179894*G0_1_0_3_1_0_4_1_0 + 0.54179894179894*G0_1_0_3_1_0_5_1_1 - 0.54179894179894*G0_1_0_3_1_1_0_0_0 - 0.54179894179894*G0_1_0_3_1_1_0_0_1 + 0.54179894179894*G0_1_0_3_1_1_1_0_0 + 0.54179894179894*G0_1_0_3_1_1_2_0_1 - 0.54179894179894*G0_1_0_3_1_1_3_1_0 - 0.54179894179894*G0_1_0_3_1_1_3_1_1 + 0.54179894179894*G0_1_0_3_1_1_4_1_0 + 0.54179894179894*G0_1_0_3_1_1_5_1_1 + 0.54179894179894*G0_1_0_4_1_0_0_0_0 + 0.54179894179894*G0_1_0_4_1_0_0_0_1 - 0.54179894179894*G0_1_0_4_1_0_1_0_0 - 0.54179894179894*G0_1_0_4_1_0_2_0_1 + 0.54179894179894*G0_1_0_4_1_0_3_1_0 + 0.54179894179894*G0_1_0_4_1_0_3_1_1 - 0.54179894179894*G0_1_0_4_1_0_4_1_0 - 0.54179894179894*G0_1_0_4_1_0_5_1_1 + 0.54179894179894*G0_1_0_5_1_1_0_0_0 + 0.54179894179894*G0_1_0_5_1_1_0_0_1 - 0.54179894179894*G0_1_0_5_1_1_1_0_0 - 0.54179894179894*G0_1_0_5_1_1_2_0_1 + 0.54179894179894*G0_1_0_5_1_1_3_1_0 + 0.54179894179894*G0_1_0_5_1_1_3_1_1 - 0.54179894179894*G0_1_0_5_1_1_4_1_0 - 0.54179894179894*G0_1_0_5_1_1_5_1_1 + 0.338624338624348*G0_1_1_0_0_0_0_0_0 + 0.338624338624348*G0_1_1_0_0_0_0_0_1 - 0.338624338624348*G0_1_1_0_0_0_1_0_0 - 0.338624338624348*G0_1_1_0_0_0_2_0_1 + 0.338624338624348*G0_1_1_0_0_0_3_1_0 + 0.338624338624348*G0_1_1_0_0_0_3_1_1 - 0.338624338624348*G0_1_1_0_0_0_4_1_0 - 0.338624338624348*G0_1_1_0_0_0_5_1_1 + 0.338624338624348*G0_1_1_0_0_1_0_0_0 + 0.338624338624348*G0_1_1_0_0_1_0_0_1 - 0.338624338624348*G0_1_1_0_0_1_1_0_0 - 0.338624338624348*G0_1_1_0_0_1_2_0_1 + 0.338624338624348*G0_1_1_0_0_1_3_1_0 + 0.338624338624348*G0_1_1_0_0_1_3_1_1 - 0.338624338624348*G0_1_1_0_0_1_4_1_0 - 0.338624338624348*G0_1_1_0_0_1_5_1_1 - 0.338624338624348*G0_1_1_1_0_0_0_0_0 - 0.338624338624348*G0_1_1_1_0_0_0_0_1 + 0.338624338624348*G0_1_1_1_0_0_1_0_0 + 0.338624338624348*G0_1_1_1_0_0_2_0_1 - 0.338624338624348*G0_1_1_1_0_0_3_1_0 - 0.338624338624348*G0_1_1_1_0_0_3_1_1 + 0.338624338624348*G0_1_1_1_0_0_4_1_0 + 0.338624338624348*G0_1_1_1_0_0_5_1_1 - 0.338624338624348*G0_1_1_2_0_1_0_0_0 - 0.338624338624348*G0_1_1_2_0_1_0_0_1 + 0.338624338624348*G0_1_1_2_0_1_1_0_0 + 0.338624338624348*G0_1_1_2_0_1_2_0_1 - 0.338624338624348*G0_1_1_2_0_1_3_1_0 - 0.338624338624348*G0_1_1_2_0_1_3_1_1 + 0.338624338624348*G0_1_1_2_0_1_4_1_0 + 0.338624338624348*G0_1_1_2_0_1_5_1_1 + 0.338624338624348*G0_1_1_3_1_0_0_0_0 + 0.338624338624348*G0_1_1_3_1_0_0_0_1 - 0.338624338624348*G0_1_1_3_1_0_1_0_0 - 0.338624338624348*G0_1_1_3_1_0_2_0_1 + 0.338624338624348*G0_1_1_3_1_0_3_1_0 + 0.338624338624348*G0_1_1_3_1_0_3_1_1 - 0.338624338624348*G0_1_1_3_1_0_4_1_0 - 0.338624338624348*G0_1_1_3_1_0_5_1_1 + 0.338624338624348*G0_1_1_3_1_1_0_0_0 + 0.338624338624348*G0_1_1_3_1_1_0_0_1 - 0.338624338624348*G0_1_1_3_1_1_1_0_0 - 0.338624338624348*G0_1_1_3_1_1_2_0_1 + 0.338624338624348*G0_1_1_3_1_1_3_1_0 + 0.338624338624348*G0_1_1_3_1_1_3_1_1 - 0.338624338624348*G0_1_1_3_1_1_4_1_0 - 0.338624338624348*G0_1_1_3_1_1_5_1_1 - 0.338624338624348*G0_1_1_4_1_0_0_0_0 - 0.338624338624348*G0_1_1_4_1_0_0_0_1 + 0.338624338624348*G0_1_1_4_1_0_1_0_0 + 0.338624338624348*G0_1_1_4_1_0_2_0_1 - 0.338624338624348*G0_1_1_4_1_0_3_1_0 - 0.338624338624348*G0_1_1_4_1_0_3_1_1 + 0.338624338624348*G0_1_1_4_1_0_4_1_0 + 0.338624338624348*G0_1_1_4_1_0_5_1_1 - 0.338624338624348*G0_1_1_5_1_1_0_0_0 - 0.338624338624348*G0_1_1_5_1_1_0_0_1 + 0.338624338624348*G0_1_1_5_1_1_1_0_0 + 0.338624338624348*G0_1_1_5_1_1_2_0_1 - 0.338624338624348*G0_1_1_5_1_1_3_1_0 - 0.338624338624348*G0_1_1_5_1_1_3_1_1 + 0.338624338624348*G0_1_1_5_1_1_4_1_0 + 0.338624338624348*G0_1_1_5_1_1_5_1_1;
    A[876] = 0.0;
    A[485] = 0.0;
    A[188] = A[653];
    A[586] = A[121];
    A[510] = 0.0;
    A[223] = A[688];
    A[611] = 0.0;
    A[547] = 0.0;
    A[507] = A[421];
    A[640] = 0.0;
    A[536] = A[534];
    A[661] = 0.0;
    A[282] = A[834];
    A[694] = 0.0;
    A[311] = A[776];
    A[263] = 0.0;
    A[332] = A[534];
    A[292] = 0.0;
    A[746] = A[281];
    A[433] = A[869];
    A[365] = A[628];
    A[321] = 0.0;
    A[777] = A[312];
    A[458] = 0.0;
    A[398] = A[252];
    A[354] = 0.0;
    A[796] = A[331];
    A[3] = A[5];
    A[720] = 0.0;
    A[104] = A[569];
    A[839] = A[897];
    A[32] = A[497];
    A[129] = A[274];
    A[69] = A[534];
    A[162] = A[628];
    A[110] = 0.0;
    A[183] = A[96];
    A[143] = 0.0;
    A[595] = A[769];
    A[220] = A[307];
    A[172] = 0.0;
    A[618] = A[153];
    A[498] = A[33];
    A[649] = A[126];
    A[529] = A[64];
    A[684] = A[219];
    A[564] = A[273];
    A[719] = A[428];
    A[440] = 0.0;
    A[328] = 0.0;
    A[778] = A[865];
    A[467] = A[2];
    A[391] = A[421];
    A[347] = 0.0;
    A[807] = A[836];
    A[26] = 0.0;
    A[727] = 0.0;
    A[386] = 0.0;
    A[828] = A[569];
    A[57] = 0.0;
    A[756] = 0.0;
    A[417] = 0.0;
    A[861] = A[658];
    A[60] = A[525];
    A[785] = 0.0;
    A[894] = A[748];
    A[119] = 0.0;
    A[818] = 0.0;
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class vector_laplacian_f2_p1_q4_tensor_form_0: public ufc::form
{
public:

  /// Constructor
  vector_laplacian_f2_p1_q4_tensor_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f2_p1_q4_tensor_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 4, 2, None), 0), MultiIndex((Index(0),), {Index(0): 2})), MultiIndex((Index(1),), {Index(1): 2})), MultiIndex((Index(1), Index(0)), {Index(0): 2, Index(1): 2})), MultiIndex((Index(2), Index(3)), {Index(2): 2, Index(3): 2})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 4, 2, None), 1), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(5), Index(4)), {Index(4): 2, Index(5): 2})), MultiIndex((Index(2), Index(3)), {Index(2): 2, Index(3): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(3),), {Index(3): 2})), Product(IndexSum(Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 0), MultiIndex((Index(6),), {Index(6): 2})), MultiIndex((Index(6),), {Index(6): 2})), MultiIndex((Index(6),), {Index(6): 2})), IndexSum(Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 1, 2, None), 1), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((Index(7),), {Index(7): 2})), MultiIndex((Index(7),), {Index(7): 2})))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 2;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f2_p1_q4_tensor_finite_element_3();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f2_p1_q4_tensor_finite_element_3();
        break;
      }
    case 2:
      {
        return new vector_laplacian_f2_p1_q4_tensor_finite_element_1();
        break;
      }
    case 3:
      {
        return new vector_laplacian_f2_p1_q4_tensor_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f2_p1_q4_tensor_dofmap_3();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f2_p1_q4_tensor_dofmap_3();
        break;
      }
    case 2:
      {
        return new vector_laplacian_f2_p1_q4_tensor_dofmap_1();
        break;
      }
    case 3:
      {
        return new vector_laplacian_f2_p1_q4_tensor_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f2_p1_q4_tensor_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif

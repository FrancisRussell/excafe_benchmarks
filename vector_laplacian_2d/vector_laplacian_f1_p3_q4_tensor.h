// This code conforms with the UFC specification version 2.0.5
// and was automatically generated by FFC version 1.0.0.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   False
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'ufc'
//   log_level:                      20
//   log_prefix:                     ''
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'tensor'
//   split:                          False
//   swig_binary:                    'swig'
//   swig_path:                      ''

#ifndef __VECTOR_LAPLACIAN_F1_P3_Q4_TENSOR_H
#define __VECTOR_LAPLACIAN_F1_P3_Q4_TENSOR_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class vector_laplacian_f1_p3_q4_tensor_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  vector_laplacian_f1_p3_q4_tensor_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f1_p3_q4_tensor_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 10;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791033, -0.0288675134594813, -0.0166666666666666, 0.0782460796435952, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791033, -0.0288675134594813, -0.0166666666666666, 0.0782460796435952, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 10; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new vector_laplacian_f1_p3_q4_tensor_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class vector_laplacian_f1_p3_q4_tensor_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  vector_laplacian_f1_p3_q4_tensor_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f1_p3_q4_tensor_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Cell('triangle', Space(2)), 3, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 20;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791033, -0.0288675134594813, -0.0166666666666666, 0.0782460796435952, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791033, -0.0288675134594813, -0.0166666666666666, 0.0782460796435952, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 10; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 20; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791033, -0.0288675134594813, -0.0166666666666666, 0.0782460796435952, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791033, -0.0288675134594813, -0.0166666666666666, 0.0782460796435952, 0.0606091526731326, 0.0349927106111883, -0.0601337794302955, -0.0508223195384204, -0.0393667994375868, -0.0227284322524248};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0288675134594813, -0.0166666666666666, 0.0782460796435952, -0.0606091526731327, 0.0349927106111883, 0.0601337794302955, -0.0508223195384204, 0.0393667994375868, -0.0227284322524248};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.0471404520791032, 0.0, 0.0333333333333334, 0.0, 0.0, 0.104978131833565, 0.0, 0.0, 0.0, 0.0909137290096989};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, 0.117369119465393, 0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, -0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, 0.151522881682832, 0.0262445329583912, 0.0, 0.0, 0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 15:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, 0.117369119465393, -0.0606091526731326, -0.0787335988751736, 0.0, 0.101644639076841, 0.131222664791956, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 16:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.0, 0.3, 0.0, -0.151522881682832, 0.0262445329583912, 0.0, 0.0, -0.131222664791956, -0.136370593514548};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 17:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, -0.259807621135332, -0.15, -0.0782460796435952, 0.090913729009699, 0.0962299541807677, 0.180401338290886, 0.0508223195384204, -0.0131222664791956, -0.0227284322524247};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 18:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.106066017177982, 0.259807621135332, -0.15, -0.0782460796435952, -0.090913729009699, 0.0962299541807678, -0.180401338290886, 0.0508223195384204, 0.0131222664791956, -0.0227284322524248};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 19:
      {
        
      // Array of basisvalues.
      double basisvalues[10] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[6] *= std::sqrt(14.0);
      
      // Table(s) of coefficients.
      static const double coefficients0[10] = \
      {0.636396103067893, 0.0, 0.0, -0.234738238930785, 0.0, -0.262445329583912, 0.0, -0.203289278153682, 0.0, 0.090913729009699};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.611010092660779, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[10][10] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470957, 6.83130051063973, -1.05830052442584, 0.305505046330389, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865476, 6.26099033699941, -1.80739222823013, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238571, 4.2, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.82842712474619, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[10][10] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 10; t++)
        {
          for (unsigned int u = 0; u < 10; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 10; t++)
          {
            for (unsigned int u = 0; u < 10; u++)
            {
              for (unsigned int tu = 0; tu < 10; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 10; s++)
        {
          for (unsigned int t = 0; t < 10; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[2*num_derivatives];
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 20; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 13:
      {
        y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 14:
      {
        y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 15:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 16:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 17:
      {
        y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
      y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 18:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
      y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 19:
      {
        y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
      y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[12] = vals[1];
    y[0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[13] = vals[1];
    y[0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[14] = vals[1];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    f.evaluate(vals, y, c);
    values[16] = vals[1];
    y[0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    y[1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    f.evaluate(vals, y, c);
    values[17] = vals[1];
    y[0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    y[1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    f.evaluate(vals, y, c);
    values[18] = vals[1];
    y[0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    y[1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    f.evaluate(vals, y, c);
    values[19] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[10];
    vertex_values[3] = dof_values[11];
    vertex_values[5] = dof_values[12];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f1_p3_q4_tensor_finite_element_0();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f1_p3_q4_tensor_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new vector_laplacian_f1_p3_q4_tensor_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class vector_laplacian_f1_p3_q4_tensor_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  vector_laplacian_f1_p3_q4_tensor_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f1_p3_q4_tensor_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 15;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 15; r++)
    {
      evaluate_basis(r, &dof_values, coordinates, c);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[num_derivatives];
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 15; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.75*x[1][0] + 0.25*x[2][0];
      y[1] = 0.75*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.25*x[1][0] + 0.75*x[2][0];
      y[1] = 0.25*x[1][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[2][0];
      y[1] = 0.75*x[0][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[2][0];
      y[1] = 0.25*x[0][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[1][0];
      y[1] = 0.75*x[0][1] + 0.25*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[1][0];
      y[1] = 0.25*x[0][1] + 0.75*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
      y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
      y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[1];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.75*x[1][0] + 0.25*x[2][0];
    y[1] = 0.75*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.25*x[1][0] + 0.75*x[2][0];
    y[1] = 0.25*x[1][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[2][0];
    y[1] = 0.75*x[0][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[2][0];
    y[1] = 0.25*x[0][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[1][0];
    y[1] = 0.75*x[0][1] + 0.25*x[1][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[1][0];
    y[1] = 0.25*x[0][1] + 0.75*x[1][1];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new vector_laplacian_f1_p3_q4_tensor_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class vector_laplacian_f1_p3_q4_tensor_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  vector_laplacian_f1_p3_q4_tensor_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f1_p3_q4_tensor_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "VectorElement('Lagrange', Cell('triangle', Space(2)), 4, 2, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual unsigned int space_dimension() const
  {
    return 30;
  }

  /// Return the rank of the value space
  virtual unsigned int value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual unsigned int value_dimension(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point in cell
  virtual void evaluate_basis(unsigned int i,
                              double* values,
                              const double* coordinates,
                              const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Reset values.
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 27:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 28:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 29:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Compute value(s).
      for (unsigned int r = 0; r < 15; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* coordinates,
                                  const ufc::cell& c) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis.
    for (unsigned int r = 0; r < 30; r++)
    {
      evaluate_basis(r, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point in cell
  virtual void evaluate_basis_derivatives(unsigned int i,
                                          unsigned int n,
                                          double* values,
                                          const double* coordinates,
                                          const ufc::cell& c) const
  {
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Compute constants
    const double C0 = x[1][0] + x[2][0];
    const double C1 = x[1][1] + x[2][1];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J_01*(C1 - 2.0*coordinates[1]) + J_11*(2.0*coordinates[0] - C0)) / detJ;
    double Y = (J_00*(2.0*coordinates[1] - C1) + J_10*(C0 - 2.0*coordinates[0])) / detJ;
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Declare pointer to two dimensional array that holds combinations of derivatives and initialise
    unsigned int **combinations = new unsigned int *[num_derivatives];
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      combinations[row] = new unsigned int [n];
      for (unsigned int col = 0; col < n; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 1)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[2][2] = {{K_00, K_01}, {K_10, K_11}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double **transform = new double *[num_derivatives];
    
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      transform[j] = new double [num_derivatives];
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      values[r] = 0.0;
    }// end loop over 'r'
    
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 1:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 2:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 3:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 4:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 5:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 6:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 7:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 8:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 9:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 10:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 11:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 12:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 13:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 14:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 15:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, -0.0412393049421161, -0.0238095238095238, 0.0289800294976278, 0.0224478343233825, 0.012960263189329, -0.0395942580610999, -0.0334632556631574, -0.025920526378658, -0.014965222882255, 0.0321247254366312, 0.0283313448138523, 0.023944356611608, 0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 16:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0412393049421161, -0.0238095238095238, 0.0289800294976278, -0.0224478343233825, 0.012960263189329, 0.0395942580610999, -0.0334632556631574, 0.025920526378658, -0.014965222882255, 0.0321247254366312, -0.0283313448138523, 0.023944356611608, -0.0185472188784818, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 17:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.0, 0.0, 0.0476190476190476, 0.0, 0.0, 0.038880789567987, 0.0, 0.0, 0.0, 0.0598608915290199, 0.0, 0.0, 0.0, 0.0, 0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 18:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.131965775814772, -0.0253968253968253, 0.139104141588614, -0.0718330698348239, 0.0311046316543896, 0.0633508128977599, 0.0267706045305259, -0.0622092633087791, 0.0478887132232159, 0.0, 0.0566626896277046, -0.0838052481406279, 0.0834624849531682, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 19:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527355, 0.0109971479845642, 0.00634920634920636, 0.0, 0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.0, 0.0, 0.0838052481406279, -0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 20:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, 0.0439885919382572, 0.126984126984127, 0.0, 0.035916534917412, 0.155523158271948, 0.0, 0.0, 0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, 0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 21:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, -0.131965775814772, -0.0253968253968254, 0.139104141588614, 0.0718330698348239, 0.0311046316543895, -0.0633508128977599, 0.0267706045305259, 0.0622092633087791, 0.0478887132232159, 0.0, -0.0566626896277046, -0.0838052481406278, -0.0834624849531681, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 22:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527353, -0.0109971479845644, 0.00634920634920625, 0.0, -0.188561808316413, -0.163299316185545, 0.0, 0.0936971158568409, 0.0, -0.0419026240703138, 0.0, 0.0, 0.0838052481406278, 0.139104141588614, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 23:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0439885919382572, 0.126984126984127, 0.0, -0.0359165349174119, 0.155523158271948, 0.0, 0.0, -0.103682105514632, -0.011972178305804, 0.0, 0.0, 0.0, -0.0927360943924091, -0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 24:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210942, -0.0879771838765144, -0.101587301587302, 0.0927360943924091, 0.107749604752236, 0.0725774738602423, 0.0791885161221998, -0.013385302265263, -0.0518410527573159, -0.0419026240703139, -0.128498901746525, -0.0566626896277046, -0.011972178305804, 0.00927360943924089, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 25:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {-0.0314269680527354, 0.0, -0.0126984126984126, -0.243432247780074, 0.0, 0.0544331053951817, 0.0, 0.0936971158568408, 0.0, -0.0419026240703139, 0.192748352619787, 0.0, -0.023944356611608, 0.0, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 26:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.125707872210941, 0.0879771838765144, -0.101587301587302, 0.0927360943924091, -0.107749604752236, 0.0725774738602423, -0.0791885161221998, -0.013385302265263, 0.051841052757316, -0.0419026240703139, -0.128498901746525, 0.0566626896277046, -0.011972178305804, -0.00927360943924091, 0.0107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 27:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, -0.351908735506058, -0.203174603174603, -0.139104141588614, -0.107749604752236, -0.0622092633087791, 0.19005243869328, -0.0267706045305259, 0.124418526617558, 0.155638317975452, 0.0, 0.169988068883114, 0.0838052481406278, -0.0278208283177227, -0.053541209061052};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 28:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421884, 0.351908735506058, -0.203174603174603, -0.139104141588614, 0.107749604752236, -0.0622092633087792, -0.19005243869328, -0.0267706045305259, -0.124418526617558, 0.155638317975452, 0.0, -0.169988068883114, 0.0838052481406278, 0.0278208283177227, -0.0535412090610519};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    case 29:
      {
        
      // Array of basisvalues.
      double basisvalues[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables.
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues.
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[6] = basisvalues[3]*1.66666666666667*tmp0 - basisvalues[1]*0.666666666666667*tmp2;
      basisvalues[10] = basisvalues[6]*1.75*tmp0 - basisvalues[3]*0.75*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[7] = basisvalues[3]*(2.5 + 3.5*Y);
      basisvalues[11] = basisvalues[6]*(3.5 + 4.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[9] = basisvalues[5]*(0.05 + Y*1.75) - basisvalues[2]*0.7;
      basisvalues[14] = basisvalues[9]*(0.0285714285714286 + Y*1.8) - basisvalues[5]*0.771428571428571;
      basisvalues[8] = basisvalues[4]*(0.54 + Y*2.1) - basisvalues[1]*0.56;
      basisvalues[13] = basisvalues[8]*(0.285714285714286 + Y*2.0) - basisvalues[4]*0.714285714285714;
      basisvalues[12] = basisvalues[7]*(1.02040816326531 + Y*2.57142857142857) - basisvalues[3]*0.551020408163265;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[9] *= std::sqrt(2.0);
      basisvalues[14] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[8] *= std::sqrt(6.0);
      basisvalues[13] *= std::sqrt(7.5);
      basisvalues[3] *= std::sqrt(7.5);
      basisvalues[7] *= std::sqrt(10.0);
      basisvalues[12] *= std::sqrt(12.5);
      basisvalues[6] *= std::sqrt(14.0);
      basisvalues[11] *= std::sqrt(17.5);
      basisvalues[10] *= std::sqrt(22.5);
      
      // Table(s) of coefficients.
      static const double coefficients0[15] = \
      {0.251415744421883, 0.0, 0.406349206349206, 0.0, 0.0, -0.186627789926337, 0.0, -0.187394231713682, 0.0, -0.203527031198668, 0.0, 0.0, -0.167610496281256, 0.0, 0.107082418122104};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.89897948556635, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 9.48683298050513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.0, 0.0, 7.07106781186548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5.29150262212918, 0.0, -2.99332590941915, 13.6626010212795, 0.0, 0.61101009266078, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 4.38178046004133, 0.0, 0.0, 12.5219806739988, 1.36319883402694e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.46410161513776, 0.0, 7.83836717690617, 0.0, 0.0, 8.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 10.9544511501033, 0.0, 0.0, -3.83325938999965, 0.0, 17.7482393492989, 0.0, 0.553283335172492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.73286382647969, 0.0, 3.3466401061363, 4.36435780471985, 0.0, -5.07468037933237, 0.0, 17.0084012854152, 0.0, 1.52127765851133, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 2.44948974278318, 0.0, 0.0, 9.14285714285714, 0.0, 0.0, 0.0, 14.8461497791618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {3.09838667696593, 0.0, 7.66811580507233, 0.0, 0.0, 10.733126291999, 0.0, 0.0, 0.0, 9.2951600308978, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[15][15] = \
      {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.44948974278318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {4.24264068711928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.58198889747161, 4.74341649025257, -0.912870929175278, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.0, 6.12372435695795, 3.53553390593274, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-2.3094010767585, 0.0, 8.16496580927726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.64575131106459, 5.18459255872629, -1.49666295470958, 6.83130051063974, -1.05830052442584, 0.305505046330393, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.23606797749979, 2.19089023002067, 2.52982212813471, 8.08290376865477, 6.26099033699942, -1.80739222823013, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.73205080756888, -5.09116882454314, 3.91918358845309, 0.0, 9.69948452238572, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {5, 0.0, -2.8284271247462, 0.0, 0.0, 12.1243556529821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.68328157299975, 5.47722557505166, -1.89736659610103, 7.4230748895809, -1.91662969499982, 0.663940002206988, 8.87411967464942, -1.07142857142857, 0.276641667586246, -0.0958314847499898, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2.36643191323985, 2.89827534923789, 1.67332005306816, 2.18217890235992, 5.74704893215391, -2.53734018966618, 10.0623058987491, 8.50420064270762, -2.1957751641342, 0.760638829255666, 0.0, 0.0, 0.0, 0.0, 0.0},
      {2, 1.22474487139159, 3.53553390593274, -7.37711113563318, 4.57142857142858, 1.64957219768465, 0.0, 11.4997781699989, 7.42307488958091, -2.57142857142857, 0.0, 0.0, 0.0, 0.0, 0.0},
      {1.54919333848296, 6.64078308635359, 3.83405790253616, 0.0, -6.19677335393187, 5.36656314599949, 0.0, 0.0, 13.4164078649987, 4.6475800154489, 0.0, 0.0, 0.0, 0.0, 0.0},
      {-3.57770876399967, 0.0, 8.85437744847147, 0.0, 0.0, -3.09838667696593, 0.0, 0.0, 0.0, 16.0996894379985, 0.0, 0.0, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare pointer to array of derivatives on FIAT element.
      double *derivatives = new double[num_derivatives];
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        derivatives[r] = 0.0;
      }// end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[15][15] = \
      {{1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 15; t++)
        {
          for (unsigned int u = 0; u < 15; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          }// end loop over 'u'
        }// end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            }// end loop over 'u'
          }// end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 15; t++)
          {
            for (unsigned int u = 0; u < 15; u++)
            {
              for (unsigned int tu = 0; tu < 15; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              }// end loop over 'tu'
            }// end loop over 'u'
          }// end loop over 't'
          }
          
        }// end loop over 's'
        for (unsigned int s = 0; s < 15; s++)
        {
          for (unsigned int t = 0; t < 15; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          }// end loop over 't'
        }// end loop over 's'
      }// end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        }// end loop over 's'
      }// end loop over 'r'
      
      // Delete pointer to array of derivatives on FIAT element
      delete [] derivatives;
      
      // Delete pointer to array of combinations of derivatives and transform
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] combinations[r];
      }// end loop over 'r'
      delete [] combinations;
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        delete [] transform[r];
      }// end loop over 'r'
      delete [] transform;
        break;
      }
    }
    
  }

  /// Evaluate order n derivatives of all basis functions at given point in cell
  virtual void evaluate_basis_derivatives_all(unsigned int n,
                                              double* values,
                                              const double* coordinates,
                                              const ufc::cell& c) const
  {
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Helper variable to hold values of a single dof.
    double *dof_values = new double[2*num_derivatives];
    for (unsigned int r = 0; r < 2*num_derivatives; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 30; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, coordinates, c);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
    
    // Delete pointer.
    delete [] dof_values;
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(unsigned int i,
                              const ufc::function& f,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    switch (i)
    {
    case 0:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.75*x[1][0] + 0.25*x[2][0];
      y[1] = 0.75*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.25*x[1][0] + 0.75*x[2][0];
      y[1] = 0.25*x[1][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[2][0];
      y[1] = 0.75*x[0][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[2][0];
      y[1] = 0.25*x[0][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[1][0];
      y[1] = 0.75*x[0][1] + 0.25*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[1][0];
      y[1] = 0.25*x[0][1] + 0.75*x[1][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
      y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
      y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = x[0][0];
      y[1] = x[0][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 16:
      {
        y[0] = x[1][0];
      y[1] = x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 17:
      {
        y[0] = x[2][0];
      y[1] = x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 18:
      {
        y[0] = 0.75*x[1][0] + 0.25*x[2][0];
      y[1] = 0.75*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 19:
      {
        y[0] = 0.5*x[1][0] + 0.5*x[2][0];
      y[1] = 0.5*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 20:
      {
        y[0] = 0.25*x[1][0] + 0.75*x[2][0];
      y[1] = 0.25*x[1][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 21:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[2][0];
      y[1] = 0.75*x[0][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 22:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[2][0];
      y[1] = 0.5*x[0][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 23:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[2][0];
      y[1] = 0.25*x[0][1] + 0.75*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 24:
      {
        y[0] = 0.75*x[0][0] + 0.25*x[1][0];
      y[1] = 0.75*x[0][1] + 0.25*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 25:
      {
        y[0] = 0.5*x[0][0] + 0.5*x[1][0];
      y[1] = 0.5*x[0][1] + 0.5*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 26:
      {
        y[0] = 0.25*x[0][0] + 0.75*x[1][0];
      y[1] = 0.25*x[0][1] + 0.75*x[1][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 27:
      {
        y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
      y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 28:
      {
        y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
      y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 29:
      {
        y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
      y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation.
    double vals[2];
    
    // Declare variable for physical coordinates.
    double y[2];
    const double * const * x = c.coordinates;
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.75*x[1][0] + 0.25*x[2][0];
    y[1] = 0.75*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.25*x[1][0] + 0.75*x[2][0];
    y[1] = 0.25*x[1][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[2][0];
    y[1] = 0.75*x[0][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[2][0];
    y[1] = 0.25*x[0][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.75*x[0][0] + 0.25*x[1][0];
    y[1] = 0.75*x[0][1] + 0.25*x[1][1];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.25*x[0][0] + 0.75*x[1][0];
    y[1] = 0.25*x[0][1] + 0.75*x[1][1];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = x[0][0];
    y[1] = x[0][1];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = x[1][0];
    y[1] = x[1][1];
    f.evaluate(vals, y, c);
    values[16] = vals[1];
    y[0] = x[2][0];
    y[1] = x[2][1];
    f.evaluate(vals, y, c);
    values[17] = vals[1];
    y[0] = 0.75*x[1][0] + 0.25*x[2][0];
    y[1] = 0.75*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[18] = vals[1];
    y[0] = 0.5*x[1][0] + 0.5*x[2][0];
    y[1] = 0.5*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[19] = vals[1];
    y[0] = 0.25*x[1][0] + 0.75*x[2][0];
    y[1] = 0.25*x[1][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[20] = vals[1];
    y[0] = 0.75*x[0][0] + 0.25*x[2][0];
    y[1] = 0.75*x[0][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[21] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[2][0];
    y[1] = 0.5*x[0][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[22] = vals[1];
    y[0] = 0.25*x[0][0] + 0.75*x[2][0];
    y[1] = 0.25*x[0][1] + 0.75*x[2][1];
    f.evaluate(vals, y, c);
    values[23] = vals[1];
    y[0] = 0.75*x[0][0] + 0.25*x[1][0];
    y[1] = 0.75*x[0][1] + 0.25*x[1][1];
    f.evaluate(vals, y, c);
    values[24] = vals[1];
    y[0] = 0.5*x[0][0] + 0.5*x[1][0];
    y[1] = 0.5*x[0][1] + 0.5*x[1][1];
    f.evaluate(vals, y, c);
    values[25] = vals[1];
    y[0] = 0.25*x[0][0] + 0.75*x[1][0];
    y[1] = 0.25*x[0][1] + 0.75*x[1][1];
    f.evaluate(vals, y, c);
    values[26] = vals[1];
    y[0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    y[1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    y[1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    y[1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[15];
    vertex_values[3] = dof_values[16];
    vertex_values[5] = dof_values[17];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented (introduced in UFC 2.0).");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual unsigned int num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f1_p3_q4_tensor_finite_element_2();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f1_p3_q4_tensor_finite_element_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new vector_laplacian_f1_p3_q4_tensor_finite_element_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class vector_laplacian_f1_p3_q4_tensor_dofmap_0: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  vector_laplacian_f1_p3_q4_tensor_dofmap_0() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~vector_laplacian_f1_p3_q4_tensor_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 3, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + 2*m.num_entities[1] + m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 10;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 10;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 4;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*m.num_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
    offset += m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[3][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[4][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[4][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[5][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[5][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[6][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[6][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[7][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[7][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[8][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[8][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[9][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[9][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new vector_laplacian_f1_p3_q4_tensor_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class vector_laplacian_f1_p3_q4_tensor_dofmap_1: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  vector_laplacian_f1_p3_q4_tensor_dofmap_1() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~vector_laplacian_f1_p3_q4_tensor_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Cell('triangle', Space(2)), 3, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = 2*m.num_entities[0] + 4*m.num_entities[1] + 2*m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 20;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 20;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 8;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 2*c.entity_indices[1][0];
    dofs[4] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 2*c.entity_indices[1][1];
    dofs[6] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[7] = offset + 2*c.entity_indices[1][2];
    dofs[8] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*m.num_entities[1];
    dofs[9] = offset + c.entity_indices[2][0];
    offset += m.num_entities[2];
    dofs[10] = offset + c.entity_indices[0][0];
    dofs[11] = offset + c.entity_indices[0][1];
    dofs[12] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[13] = offset + 2*c.entity_indices[1][0];
    dofs[14] = offset + 2*c.entity_indices[1][0] + 1;
    dofs[15] = offset + 2*c.entity_indices[1][1];
    dofs[16] = offset + 2*c.entity_indices[1][1] + 1;
    dofs[17] = offset + 2*c.entity_indices[1][2];
    dofs[18] = offset + 2*c.entity_indices[1][2] + 1;
    offset += 2*m.num_entities[1];
    dofs[19] = offset + c.entity_indices[2][0];
    offset += m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 11;
      dofs[5] = 12;
      dofs[6] = 13;
      dofs[7] = 14;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 10;
      dofs[5] = 12;
      dofs[6] = 15;
      dofs[7] = 16;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 10;
      dofs[5] = 11;
      dofs[6] = 17;
      dofs[7] = 18;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 10;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 12;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 13;
        dofs[3] = 14;
          break;
        }
      case 1:
        {
          dofs[0] = 5;
        dofs[1] = 6;
        dofs[2] = 15;
        dofs[3] = 16;
          break;
        }
      case 2:
        {
          dofs[0] = 7;
        dofs[1] = 8;
        dofs[2] = 17;
        dofs[3] = 18;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 9;
      dofs[1] = 19;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[3][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[4][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[4][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[5][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[5][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[6][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[6][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[7][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[7][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[8][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[8][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[9][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[9][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[10][0] = x[0][0];
    coordinates[10][1] = x[0][1];
    coordinates[11][0] = x[1][0];
    coordinates[11][1] = x[1][1];
    coordinates[12][0] = x[2][0];
    coordinates[12][1] = x[2][1];
    coordinates[13][0] = 0.666666666666667*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[13][1] = 0.666666666666667*x[1][1] + 0.333333333333333*x[2][1];
    coordinates[14][0] = 0.333333333333333*x[1][0] + 0.666666666666667*x[2][0];
    coordinates[14][1] = 0.333333333333333*x[1][1] + 0.666666666666667*x[2][1];
    coordinates[15][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[2][0];
    coordinates[15][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[2][1];
    coordinates[16][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[2][0];
    coordinates[16][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[2][1];
    coordinates[17][0] = 0.666666666666667*x[0][0] + 0.333333333333333*x[1][0];
    coordinates[17][1] = 0.666666666666667*x[0][1] + 0.333333333333333*x[1][1];
    coordinates[18][0] = 0.333333333333333*x[0][0] + 0.666666666666667*x[1][0];
    coordinates[18][1] = 0.333333333333333*x[0][1] + 0.666666666666667*x[1][1];
    coordinates[19][0] = 0.333333333333333*x[0][0] + 0.333333333333333*x[1][0] + 0.333333333333333*x[2][0];
    coordinates[19][1] = 0.333333333333333*x[0][1] + 0.333333333333333*x[1][1] + 0.333333333333333*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f1_p3_q4_tensor_dofmap_0();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f1_p3_q4_tensor_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new vector_laplacian_f1_p3_q4_tensor_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class vector_laplacian_f1_p3_q4_tensor_dofmap_2: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  vector_laplacian_f1_p3_q4_tensor_dofmap_2() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~vector_laplacian_f1_p3_q4_tensor_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Cell('triangle', Space(2)), 4, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = m.num_entities[0] + 3*m.num_entities[1] + 3*m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 15;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 15;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 5;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 3;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset += 3*m.num_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
    offset += 3*m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
          break;
        }
      case 1:
        {
          dofs[0] = 6;
        dofs[1] = 7;
        dofs[2] = 8;
          break;
        }
      case 2:
        {
          dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 12;
      dofs[1] = 13;
      dofs[2] = 14;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[6][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[8][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[8][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[9][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[9][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[11][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[11][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[12][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[12][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[13][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[13][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[14][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[14][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new vector_laplacian_f1_p3_q4_tensor_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class vector_laplacian_f1_p3_q4_tensor_dofmap_3: public ufc::dofmap
{
private:

  unsigned int _global_dimension;
public:

  /// Constructor
  vector_laplacian_f1_p3_q4_tensor_dofmap_3() : ufc::dofmap()
  {
    _global_dimension = 0;
  }

  /// Destructor
  virtual ~vector_laplacian_f1_p3_q4_tensor_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for VectorElement('Lagrange', Cell('triangle', Space(2)), 4, 2, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Initialize dofmap for mesh (return true iff init_cell() is needed)
  virtual bool init_mesh(const ufc::mesh& m)
  {
    _global_dimension = 2*m.num_entities[0] + 6*m.num_entities[1] + 6*m.num_entities[2];
    return false;
  }

  /// Initialize dofmap for given cell
  virtual void init_cell(const ufc::mesh& m,
                         const ufc::cell& c)
  {
    // Do nothing
  }

  /// Finish initialization of dofmap for cells
  virtual void init_cell_finalize()
  {
    // Do nothing
  }

  /// Return the topological dimension of the associated cell shape
  virtual unsigned int topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual unsigned int geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual unsigned int global_dimension() const
  {
    return _global_dimension;
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual unsigned int local_dimension(const ufc::cell& c) const
  {
    return 30;
  }

  /// Return the maximum dimension of the local finite element function space
  virtual unsigned int max_local_dimension() const
  {
    return 30;
  }

  /// Return the number of dofs on each cell facet
  virtual unsigned int num_facet_dofs() const
  {
    return 10;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual unsigned int num_entity_dofs(unsigned int d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 6;
        break;
      }
    case 2:
      {
        return 6;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(unsigned int* dofs,
                             const ufc::mesh& m,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[3] = offset + 3*c.entity_indices[1][0];
    dofs[4] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 3*c.entity_indices[1][1];
    dofs[7] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[8] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[9] = offset + 3*c.entity_indices[1][2];
    dofs[10] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[11] = offset + 3*c.entity_indices[1][2] + 2;
    offset += 3*m.num_entities[1];
    dofs[12] = offset + 3*c.entity_indices[2][0];
    dofs[13] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[14] = offset + 3*c.entity_indices[2][0] + 2;
    offset += 3*m.num_entities[2];
    dofs[15] = offset + c.entity_indices[0][0];
    dofs[16] = offset + c.entity_indices[0][1];
    dofs[17] = offset + c.entity_indices[0][2];
    offset += m.num_entities[0];
    dofs[18] = offset + 3*c.entity_indices[1][0];
    dofs[19] = offset + 3*c.entity_indices[1][0] + 1;
    dofs[20] = offset + 3*c.entity_indices[1][0] + 2;
    dofs[21] = offset + 3*c.entity_indices[1][1];
    dofs[22] = offset + 3*c.entity_indices[1][1] + 1;
    dofs[23] = offset + 3*c.entity_indices[1][1] + 2;
    dofs[24] = offset + 3*c.entity_indices[1][2];
    dofs[25] = offset + 3*c.entity_indices[1][2] + 1;
    dofs[26] = offset + 3*c.entity_indices[1][2] + 2;
    offset += 3*m.num_entities[1];
    dofs[27] = offset + 3*c.entity_indices[2][0];
    dofs[28] = offset + 3*c.entity_indices[2][0] + 1;
    dofs[29] = offset + 3*c.entity_indices[2][0] + 2;
    offset += 3*m.num_entities[2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(unsigned int* dofs,
                                   unsigned int facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 16;
      dofs[6] = 17;
      dofs[7] = 18;
      dofs[8] = 19;
      dofs[9] = 20;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 15;
      dofs[6] = 17;
      dofs[7] = 21;
      dofs[8] = 22;
      dofs[9] = 23;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 9;
      dofs[3] = 10;
      dofs[4] = 11;
      dofs[5] = 15;
      dofs[6] = 16;
      dofs[7] = 24;
      dofs[8] = 25;
      dofs[9] = 26;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(unsigned int* dofs,
                                    unsigned int d, unsigned int i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 15;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 16;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 17;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 18;
        dofs[4] = 19;
        dofs[5] = 20;
          break;
        }
      case 1:
        {
          dofs[0] = 6;
        dofs[1] = 7;
        dofs[2] = 8;
        dofs[3] = 21;
        dofs[4] = 22;
        dofs[5] = 23;
          break;
        }
      case 2:
        {
          dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
        dofs[3] = 24;
        dofs[4] = 25;
        dofs[5] = 26;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 12;
      dofs[1] = 13;
      dofs[2] = 14;
      dofs[3] = 27;
      dofs[4] = 28;
      dofs[5] = 29;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** coordinates,
                                    const ufc::cell& c) const
  {
    const double * const * x = c.coordinates;
    
    coordinates[0][0] = x[0][0];
    coordinates[0][1] = x[0][1];
    coordinates[1][0] = x[1][0];
    coordinates[1][1] = x[1][1];
    coordinates[2][0] = x[2][0];
    coordinates[2][1] = x[2][1];
    coordinates[3][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[3][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[4][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[4][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[5][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[5][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[6][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[6][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[7][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[7][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[8][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[8][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[9][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[9][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[10][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[10][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[11][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[11][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[12][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[12][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[13][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[13][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[14][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[14][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
    coordinates[15][0] = x[0][0];
    coordinates[15][1] = x[0][1];
    coordinates[16][0] = x[1][0];
    coordinates[16][1] = x[1][1];
    coordinates[17][0] = x[2][0];
    coordinates[17][1] = x[2][1];
    coordinates[18][0] = 0.75*x[1][0] + 0.25*x[2][0];
    coordinates[18][1] = 0.75*x[1][1] + 0.25*x[2][1];
    coordinates[19][0] = 0.5*x[1][0] + 0.5*x[2][0];
    coordinates[19][1] = 0.5*x[1][1] + 0.5*x[2][1];
    coordinates[20][0] = 0.25*x[1][0] + 0.75*x[2][0];
    coordinates[20][1] = 0.25*x[1][1] + 0.75*x[2][1];
    coordinates[21][0] = 0.75*x[0][0] + 0.25*x[2][0];
    coordinates[21][1] = 0.75*x[0][1] + 0.25*x[2][1];
    coordinates[22][0] = 0.5*x[0][0] + 0.5*x[2][0];
    coordinates[22][1] = 0.5*x[0][1] + 0.5*x[2][1];
    coordinates[23][0] = 0.25*x[0][0] + 0.75*x[2][0];
    coordinates[23][1] = 0.25*x[0][1] + 0.75*x[2][1];
    coordinates[24][0] = 0.75*x[0][0] + 0.25*x[1][0];
    coordinates[24][1] = 0.75*x[0][1] + 0.25*x[1][1];
    coordinates[25][0] = 0.5*x[0][0] + 0.5*x[1][0];
    coordinates[25][1] = 0.5*x[0][1] + 0.5*x[1][1];
    coordinates[26][0] = 0.25*x[0][0] + 0.75*x[1][0];
    coordinates[26][1] = 0.25*x[0][1] + 0.75*x[1][1];
    coordinates[27][0] = 0.5*x[0][0] + 0.25*x[1][0] + 0.25*x[2][0];
    coordinates[27][1] = 0.5*x[0][1] + 0.25*x[1][1] + 0.25*x[2][1];
    coordinates[28][0] = 0.25*x[0][0] + 0.5*x[1][0] + 0.25*x[2][0];
    coordinates[28][1] = 0.25*x[0][1] + 0.5*x[1][1] + 0.25*x[2][1];
    coordinates[29][0] = 0.25*x[0][0] + 0.25*x[1][0] + 0.5*x[2][0];
    coordinates[29][1] = 0.25*x[0][1] + 0.25*x[1][1] + 0.5*x[2][1];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual unsigned int num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f1_p3_q4_tensor_dofmap_2();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f1_p3_q4_tensor_dofmap_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new vector_laplacian_f1_p3_q4_tensor_dofmap_3();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class vector_laplacian_f1_p3_q4_tensor_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  vector_laplacian_f1_p3_q4_tensor_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f1_p3_q4_tensor_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      11
    // Number of operations (multiply-add pairs) for geometry tensor:    432
    // Number of operations (multiply-add pairs) for tensor contraction: 19061
    // Total number of operations (multiply-add pairs):                  19504
    
    // Extract vertex coordinates
    const double * const * x = c.coordinates;
    
    // Compute Jacobian of affine map from reference cell
    const double J_00 = x[1][0] - x[0][0];
    const double J_01 = x[2][0] - x[0][0];
    const double J_10 = x[1][1] - x[0][1];
    const double J_11 = x[2][1] - x[0][1];
    
    // Compute determinant of Jacobian
    double detJ = J_00*J_11 - J_01*J_10;
    
    // Compute inverse of Jacobian
    const double K_00 =  J_11 / detJ;
    const double K_01 = -J_01 / detJ;
    const double K_10 = -J_10 / detJ;
    const double K_11 =  J_00 / detJ;
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0_0_0_0 = det*(w[0][0]*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_0_0_1 = det*(w[0][0]*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_1_0_0 = det*(w[0][1]*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_2_0_1 = det*(w[0][2]*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_0_0 = det*(w[0][3]*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_3_0_1 = det*(w[0][3]*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_4_0_0 = det*(w[0][4]*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_4_0_1 = det*(w[0][4]*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_5_0_0 = det*(w[0][5]*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_5_0_1 = det*(w[0][5]*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_6_0_0 = det*(w[0][6]*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_6_0_1 = det*(w[0][6]*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_7_0_0 = det*(w[0][7]*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_7_0_1 = det*(w[0][7]*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_8_0_0 = det*(w[0][8]*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_8_0_1 = det*(w[0][8]*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_9_0_0 = det*(w[0][9]*K_00*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_9_0_1 = det*(w[0][9]*K_10*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_10_1_0 = det*(w[0][10]*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_10_1_1 = det*(w[0][10]*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_11_1_0 = det*(w[0][11]*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_12_1_1 = det*(w[0][12]*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_13_1_0 = det*(w[0][13]*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_13_1_1 = det*(w[0][13]*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_14_1_0 = det*(w[0][14]*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_14_1_1 = det*(w[0][14]*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_15_1_0 = det*(w[0][15]*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_15_1_1 = det*(w[0][15]*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_16_1_0 = det*(w[0][16]*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_16_1_1 = det*(w[0][16]*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_17_1_0 = det*(w[0][17]*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_17_1_1 = det*(w[0][17]*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_18_1_0 = det*(w[0][18]*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_18_1_1 = det*(w[0][18]*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_19_1_0 = det*(w[0][19]*K_01*((K_00*K_00 + K_01*K_01)));
    const double G0_0_0_19_1_1 = det*(w[0][19]*K_11*((K_00*K_00 + K_01*K_01)));
    const double G0_0_1_0_0_0 = det*(w[0][0]*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_0_0_1 = det*(w[0][0]*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_1_0_0 = det*(w[0][1]*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_2_0_1 = det*(w[0][2]*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_0_0 = det*(w[0][3]*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_3_0_1 = det*(w[0][3]*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_4_0_0 = det*(w[0][4]*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_4_0_1 = det*(w[0][4]*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_5_0_0 = det*(w[0][5]*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_5_0_1 = det*(w[0][5]*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_6_0_0 = det*(w[0][6]*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_6_0_1 = det*(w[0][6]*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_7_0_0 = det*(w[0][7]*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_7_0_1 = det*(w[0][7]*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_8_0_0 = det*(w[0][8]*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_8_0_1 = det*(w[0][8]*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_9_0_0 = det*(w[0][9]*K_00*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_9_0_1 = det*(w[0][9]*K_10*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_10_1_0 = det*(w[0][10]*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_10_1_1 = det*(w[0][10]*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_11_1_0 = det*(w[0][11]*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_12_1_1 = det*(w[0][12]*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_13_1_0 = det*(w[0][13]*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_13_1_1 = det*(w[0][13]*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_14_1_0 = det*(w[0][14]*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_14_1_1 = det*(w[0][14]*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_15_1_0 = det*(w[0][15]*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_15_1_1 = det*(w[0][15]*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_16_1_0 = det*(w[0][16]*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_16_1_1 = det*(w[0][16]*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_17_1_0 = det*(w[0][17]*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_17_1_1 = det*(w[0][17]*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_18_1_0 = det*(w[0][18]*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_18_1_1 = det*(w[0][18]*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_19_1_0 = det*(w[0][19]*K_01*((K_00*K_10 + K_01*K_11)));
    const double G0_0_1_19_1_1 = det*(w[0][19]*K_11*((K_00*K_10 + K_01*K_11)));
    const double G0_1_0_0_0_0 = det*(w[0][0]*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_0_0_1 = det*(w[0][0]*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_1_0_0 = det*(w[0][1]*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_2_0_1 = det*(w[0][2]*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_0_0 = det*(w[0][3]*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_3_0_1 = det*(w[0][3]*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_4_0_0 = det*(w[0][4]*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_4_0_1 = det*(w[0][4]*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_5_0_0 = det*(w[0][5]*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_5_0_1 = det*(w[0][5]*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_6_0_0 = det*(w[0][6]*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_6_0_1 = det*(w[0][6]*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_7_0_0 = det*(w[0][7]*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_7_0_1 = det*(w[0][7]*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_8_0_0 = det*(w[0][8]*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_8_0_1 = det*(w[0][8]*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_9_0_0 = det*(w[0][9]*K_00*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_9_0_1 = det*(w[0][9]*K_10*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_10_1_0 = det*(w[0][10]*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_10_1_1 = det*(w[0][10]*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_11_1_0 = det*(w[0][11]*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_12_1_1 = det*(w[0][12]*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_13_1_0 = det*(w[0][13]*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_13_1_1 = det*(w[0][13]*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_14_1_0 = det*(w[0][14]*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_14_1_1 = det*(w[0][14]*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_15_1_0 = det*(w[0][15]*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_15_1_1 = det*(w[0][15]*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_16_1_0 = det*(w[0][16]*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_16_1_1 = det*(w[0][16]*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_17_1_0 = det*(w[0][17]*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_17_1_1 = det*(w[0][17]*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_18_1_0 = det*(w[0][18]*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_18_1_1 = det*(w[0][18]*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_19_1_0 = det*(w[0][19]*K_01*((K_10*K_00 + K_11*K_01)));
    const double G0_1_0_19_1_1 = det*(w[0][19]*K_11*((K_10*K_00 + K_11*K_01)));
    const double G0_1_1_0_0_0 = det*(w[0][0]*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_0_0_1 = det*(w[0][0]*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_1_0_0 = det*(w[0][1]*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_2_0_1 = det*(w[0][2]*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_0_0 = det*(w[0][3]*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_3_0_1 = det*(w[0][3]*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_4_0_0 = det*(w[0][4]*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_4_0_1 = det*(w[0][4]*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_5_0_0 = det*(w[0][5]*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_5_0_1 = det*(w[0][5]*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_6_0_0 = det*(w[0][6]*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_6_0_1 = det*(w[0][6]*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_7_0_0 = det*(w[0][7]*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_7_0_1 = det*(w[0][7]*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_8_0_0 = det*(w[0][8]*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_8_0_1 = det*(w[0][8]*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_9_0_0 = det*(w[0][9]*K_00*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_9_0_1 = det*(w[0][9]*K_10*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_10_1_0 = det*(w[0][10]*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_10_1_1 = det*(w[0][10]*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_11_1_0 = det*(w[0][11]*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_12_1_1 = det*(w[0][12]*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_13_1_0 = det*(w[0][13]*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_13_1_1 = det*(w[0][13]*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_14_1_0 = det*(w[0][14]*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_14_1_1 = det*(w[0][14]*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_15_1_0 = det*(w[0][15]*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_15_1_1 = det*(w[0][15]*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_16_1_0 = det*(w[0][16]*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_16_1_1 = det*(w[0][16]*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_17_1_0 = det*(w[0][17]*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_17_1_1 = det*(w[0][17]*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_18_1_0 = det*(w[0][18]*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_18_1_1 = det*(w[0][18]*K_11*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_19_1_0 = det*(w[0][19]*K_01*((K_10*K_10 + K_11*K_11)));
    const double G0_1_1_19_1_1 = det*(w[0][19]*K_11*((K_10*K_10 + K_11*K_11)));
    
    // Compute element tensor
    A[213] = -0.106666666666667*G0_0_0_0_0_0 - 0.106666666666667*G0_0_0_0_0_1 - 0.167619047619047*G0_0_0_1_0_0 + 0.15238095238095*G0_0_0_2_0_1 + 0.426666666666669*G0_0_0_3_0_0 + 0.060952380952382*G0_0_0_3_0_1 - 0.0761904761904781*G0_0_0_4_0_0 - 0.0304761904761869*G0_0_0_4_0_1 + 1.03619047619047*G0_0_0_5_0_0 + 0.914285714285709*G0_0_0_5_0_1 + 0.0761904761904785*G0_0_0_6_0_0 - 0.959999999999992*G0_0_0_6_0_1 - 0.18285714285714*G0_0_0_7_0_0 - 0.0609523809523795*G0_0_0_7_0_1 + 0.457142857142853*G0_0_0_8_0_0 - 0.060952380952382*G0_0_0_8_0_1 - 1.46285714285714*G0_0_0_9_0_0 + 0.0914285714285665*G0_0_0_9_0_1 - 0.106666666666667*G0_0_0_10_1_0 - 0.106666666666667*G0_0_0_10_1_1 - 0.167619047619047*G0_0_0_11_1_0 + 0.15238095238095*G0_0_0_12_1_1 + 0.426666666666669*G0_0_0_13_1_0 + 0.060952380952382*G0_0_0_13_1_1 - 0.0761904761904781*G0_0_0_14_1_0 - 0.0304761904761869*G0_0_0_14_1_1 + 1.03619047619047*G0_0_0_15_1_0 + 0.914285714285709*G0_0_0_15_1_1 + 0.0761904761904785*G0_0_0_16_1_0 - 0.959999999999992*G0_0_0_16_1_1 - 0.18285714285714*G0_0_0_17_1_0 - 0.0609523809523795*G0_0_0_17_1_1 + 0.457142857142853*G0_0_0_18_1_0 - 0.060952380952382*G0_0_0_18_1_1 - 1.46285714285714*G0_0_0_19_1_0 + 0.0914285714285665*G0_0_0_19_1_1 - 0.0313227513227506*G0_0_1_0_0_0 - 0.0313227513227506*G0_0_1_0_0_1 - 0.0550264550264596*G0_0_1_1_0_0 + 0.0414814814814782*G0_0_1_2_0_1 + 0.0152380952380967*G0_0_1_3_0_0 - 0.0634920634920711*G0_0_1_3_0_1 + 0.00761904761904413*G0_0_1_4_0_0 - 0.0101587301587259*G0_0_1_4_0_1 + 0.182857142857141*G0_0_1_5_0_0 + 0.193015873015871*G0_0_1_5_0_1 - 0.00761904761904406*G0_0_1_6_0_0 - 0.203174603174599*G0_0_1_6_0_1 - 0.0253968253968269*G0_0_1_7_0_0 - 0.0355555555555575*G0_0_1_7_0_1 + 0.111746031746037*G0_0_1_8_0_0 + 0.0634920634920711*G0_0_1_8_0_1 - 0.198095238095237*G0_0_1_9_0_0 + 0.0457142857142834*G0_0_1_9_0_1 - 0.0313227513227506*G0_0_1_10_1_0 - 0.0313227513227506*G0_0_1_10_1_1 - 0.0550264550264596*G0_0_1_11_1_0 + 0.0414814814814782*G0_0_1_12_1_1 + 0.0152380952380967*G0_0_1_13_1_0 - 0.0634920634920711*G0_0_1_13_1_1 + 0.00761904761904413*G0_0_1_14_1_0 - 0.0101587301587259*G0_0_1_14_1_1 + 0.182857142857141*G0_0_1_15_1_0 + 0.193015873015871*G0_0_1_15_1_1 - 0.00761904761904406*G0_0_1_16_1_0 - 0.203174603174599*G0_0_1_16_1_1 - 0.0253968253968269*G0_0_1_17_1_0 - 0.0355555555555575*G0_0_1_17_1_1 + 0.111746031746037*G0_0_1_18_1_0 + 0.0634920634920711*G0_0_1_18_1_1 - 0.198095238095237*G0_0_1_19_1_0 + 0.0457142857142834*G0_0_1_19_1_1 - 0.163386243386242*G0_1_0_0_0_0 - 0.163386243386242*G0_1_0_0_0_1 - 0.0347089947089953*G0_1_0_1_0_0 + 0.0567195767195755*G0_1_0_2_0_1 + 0.0609523809523838*G0_1_0_3_0_0 - 0.0304761904761902*G0_1_0_3_0_1 - 0.0533333333333339*G0_1_0_4_0_0 - 0.0533333333333304*G0_1_0_4_0_1 + 0.25904761904762*G0_1_0_5_0_0 + 0.464761904761902*G0_1_0_5_0_1 + 0.053333333333334*G0_1_0_6_0_0 - 0.358095238095236*G0_1_0_6_0_1 + 0.167619047619046*G0_1_0_7_0_0 - 0.0380952380952365*G0_1_0_7_0_1 + 0.0304761904761913*G0_1_0_8_0_0 + 0.0304761904761903*G0_1_0_8_0_1 - 0.320000000000004*G0_1_0_9_0_0 + 0.0914285714285668*G0_1_0_9_0_1 - 0.163386243386242*G0_1_0_10_1_0 - 0.163386243386242*G0_1_0_10_1_1 - 0.0347089947089953*G0_1_0_11_1_0 + 0.0567195767195755*G0_1_0_12_1_1 + 0.0609523809523838*G0_1_0_13_1_0 - 0.0304761904761902*G0_1_0_13_1_1 - 0.0533333333333339*G0_1_0_14_1_0 - 0.0533333333333304*G0_1_0_14_1_1 + 0.25904761904762*G0_1_0_15_1_0 + 0.464761904761902*G0_1_0_15_1_1 + 0.053333333333334*G0_1_0_16_1_0 - 0.358095238095236*G0_1_0_16_1_1 + 0.167619047619046*G0_1_0_17_1_0 - 0.0380952380952365*G0_1_0_17_1_1 + 0.0304761904761913*G0_1_0_18_1_0 + 0.0304761904761903*G0_1_0_18_1_1 - 0.320000000000004*G0_1_0_19_1_0 + 0.0914285714285668*G0_1_0_19_1_1 + 0.0101587301587311*G0_1_1_0_0_0 + 0.0101587301587311*G0_1_1_0_0_1 + 0.0101587301587276*G0_1_1_2_0_1 - 0.0330158730158721*G0_1_1_3_0_0 - 0.00253968253968514*G0_1_1_4_0_0 - 0.0457142857142823*G0_1_1_4_0_1 - 0.0126984126984139*G0_1_1_5_0_0 - 0.0101587301587319*G0_1_1_5_0_1 + 0.00253968253968513*G0_1_1_6_0_0 - 0.0101587301587268*G0_1_1_6_0_1 - 0.0431746031746049*G0_1_1_7_0_0 - 0.045714285714287*G0_1_1_7_0_1 + 0.0330158730158776*G0_1_1_8_0_0 + 0.045714285714286*G0_1_1_9_0_0 + 0.0914285714285691*G0_1_1_9_0_1 + 0.0101587301587311*G0_1_1_10_1_0 + 0.0101587301587311*G0_1_1_10_1_1 + 0.0101587301587276*G0_1_1_12_1_1 - 0.0330158730158721*G0_1_1_13_1_0 - 0.00253968253968514*G0_1_1_14_1_0 - 0.0457142857142823*G0_1_1_14_1_1 - 0.0126984126984139*G0_1_1_15_1_0 - 0.0101587301587319*G0_1_1_15_1_1 + 0.00253968253968513*G0_1_1_16_1_0 - 0.0101587301587268*G0_1_1_16_1_1 - 0.0431746031746049*G0_1_1_17_1_0 - 0.045714285714287*G0_1_1_17_1_1 + 0.0330158730158776*G0_1_1_18_1_0 + 0.045714285714286*G0_1_1_19_1_0 + 0.0914285714285691*G0_1_1_19_1_1;
    A[489] = 0.0;
    A[208] = 0.0;
    A[574] = 0.0;
    A[530] = -0.423280423280422*G0_1_0_0_0_0 - 0.423280423280422*G0_1_0_0_0_1 + 0.423280423280422*G0_1_0_1_0_0 + 2.80423280423279*G0_1_0_2_0_1 - 2.02539682539681*G0_1_0_3_0_0 - 0.149206349206346*G0_1_0_3_0_1 + 5.11746031746029*G0_1_0_4_0_0 + 0.860317460317457*G0_1_0_4_0_1 + 2.02539682539682*G0_1_0_5_0_0 + 1.87619047619047*G0_1_0_5_0_1 - 5.11746031746029*G0_1_0_6_0_0 - 4.25714285714284*G0_1_0_6_0_1 + 0.14920634920635*G0_1_0_7_0_1 + 0.149206349206346*G0_1_0_8_0_1 - 1.00952380952381*G0_1_0_9_0_1 - 0.423280423280422*G0_1_0_10_1_0 - 0.423280423280422*G0_1_0_10_1_1 + 0.423280423280422*G0_1_0_11_1_0 + 2.80423280423279*G0_1_0_12_1_1 - 2.02539682539681*G0_1_0_13_1_0 - 0.149206349206346*G0_1_0_13_1_1 + 5.11746031746029*G0_1_0_14_1_0 + 0.860317460317457*G0_1_0_14_1_1 + 2.02539682539682*G0_1_0_15_1_0 + 1.87619047619047*G0_1_0_15_1_1 - 5.11746031746029*G0_1_0_16_1_0 - 4.25714285714284*G0_1_0_16_1_1 + 0.14920634920635*G0_1_0_17_1_1 + 0.149206349206346*G0_1_0_18_1_1 - 1.00952380952381*G0_1_0_19_1_1 - 0.139682539682539*G0_1_1_0_0_0 - 0.139682539682539*G0_1_1_0_0_1 - 0.0571428571428575*G0_1_1_1_0_0 + 0.77460317460317*G0_1_1_2_0_1 - 0.561904761904759*G0_1_1_3_0_0 - 0.406349206349205*G0_1_1_3_0_1 + 1.55238095238094*G0_1_1_4_0_0 + 0.565079365079363*G0_1_1_4_0_1 + 0.733333333333329*G0_1_1_5_0_0 + 0.634920634920632*G0_1_1_5_0_1 - 1.55238095238094*G0_1_1_6_0_0 - 1.26984126984126*G0_1_1_6_0_1 + 0.0984126984126979*G0_1_1_7_0_0 + 0.196825396825395*G0_1_1_7_0_1 + 0.0984126984126982*G0_1_1_8_0_0 + 0.406349206349205*G0_1_1_8_0_1 - 0.17142857142857*G0_1_1_9_0_0 - 0.761904761904758*G0_1_1_9_0_1 - 0.139682539682539*G0_1_1_10_1_0 - 0.139682539682539*G0_1_1_10_1_1 - 0.0571428571428575*G0_1_1_11_1_0 + 0.77460317460317*G0_1_1_12_1_1 - 0.561904761904759*G0_1_1_13_1_0 - 0.406349206349205*G0_1_1_13_1_1 + 1.55238095238094*G0_1_1_14_1_0 + 0.565079365079363*G0_1_1_14_1_1 + 0.733333333333329*G0_1_1_15_1_0 + 0.634920634920632*G0_1_1_15_1_1 - 1.55238095238094*G0_1_1_16_1_0 - 1.26984126984126*G0_1_1_16_1_1 + 0.0984126984126979*G0_1_1_17_1_0 + 0.196825396825395*G0_1_1_17_1_1 + 0.0984126984126982*G0_1_1_18_1_0 + 0.406349206349205*G0_1_1_18_1_1 - 0.17142857142857*G0_1_1_19_1_0 - 0.761904761904758*G0_1_1_19_1_1;
    A[235] = 0.0;
    A[679] = A[213] + 0.128253968253968*G0_0_0_0_0_0 + 0.128253968253968*G0_0_0_0_0_1 + 0.146031746031746*G0_0_0_1_0_0 - 0.825396825396811*G0_0_0_2_0_1 + 0.639999999999984*G0_0_0_3_0_0 - 0.171428571428553*G0_0_0_4_0_0 + 1.43999999999999*G0_0_0_4_0_1 - 2.10285714285713*G0_0_0_5_0_0 - 1.91999999999999*G0_0_0_5_0_1 + 0.171428571428553*G0_0_0_6_0_0 + 2.61714285714283*G0_0_0_6_0_1 + 0.822857142857136*G0_0_0_7_0_0 + 0.639999999999995*G0_0_0_7_0_1 - 1.09714285714285*G0_0_0_8_0_0 + 1.46285714285714*G0_0_0_9_0_0 - 2.07999999999999*G0_0_0_9_0_1 + 0.128253968253968*G0_0_0_10_1_0 + 0.128253968253968*G0_0_0_10_1_1 + 0.146031746031746*G0_0_0_11_1_0 - 0.825396825396811*G0_0_0_12_1_1 + 0.639999999999984*G0_0_0_13_1_0 - 0.171428571428553*G0_0_0_14_1_0 + 1.43999999999999*G0_0_0_14_1_1 - 2.10285714285713*G0_0_0_15_1_0 - 1.91999999999999*G0_0_0_15_1_1 + 0.171428571428553*G0_0_0_16_1_0 + 2.61714285714283*G0_0_0_16_1_1 + 0.822857142857136*G0_0_0_17_1_0 + 0.639999999999995*G0_0_0_17_1_1 - 1.09714285714285*G0_0_0_18_1_0 + 1.46285714285714*G0_0_0_19_1_0 - 2.07999999999999*G0_0_0_19_1_1 + 0.0421164021163999*G0_0_1_0_0_0 + 0.0421164021163999*G0_0_1_0_0_1 + 0.0747089947090046*G0_0_1_1_0_0 - 0.311322751322742*G0_0_1_2_0_1 + 0.468571428571424*G0_0_1_3_0_0 + 0.172063492063508*G0_0_1_3_0_1 - 0.112380952380939*G0_0_1_4_0_0 + 0.570158730158724*G0_0_1_4_0_1 - 0.632380952380947*G0_0_1_5_0_0 - 0.612063492063487*G0_0_1_5_0_1 + 0.112380952380939*G0_0_1_6_0_0 + 0.881269841269829*G0_0_1_6_0_1 + 0.261587301587306*G0_0_1_7_0_0 + 0.241269841269845*G0_0_1_7_0_1 - 0.37841269841271*G0_0_1_8_0_0 - 0.172063492063508*G0_0_1_8_0_1 + 0.163809523809523*G0_0_1_9_0_0 - 0.81142857142857*G0_0_1_9_0_1 + 0.0421164021163999*G0_0_1_10_1_0 + 0.0421164021163999*G0_0_1_10_1_1 + 0.0747089947090046*G0_0_1_11_1_0 - 0.311322751322742*G0_0_1_12_1_1 + 0.468571428571424*G0_0_1_13_1_0 + 0.172063492063508*G0_0_1_13_1_1 - 0.112380952380939*G0_0_1_14_1_0 + 0.570158730158724*G0_0_1_14_1_1 - 0.632380952380947*G0_0_1_15_1_0 - 0.612063492063487*G0_0_1_15_1_1 + 0.112380952380939*G0_0_1_16_1_0 + 0.881269841269829*G0_0_1_16_1_1 + 0.261587301587306*G0_0_1_17_1_0 + 0.241269841269845*G0_0_1_17_1_1 - 0.37841269841271*G0_0_1_18_1_0 - 0.172063492063508*G0_0_1_18_1_1 + 0.163809523809523*G0_0_1_19_1_0 - 0.81142857142857*G0_0_1_19_1_1 + 0.204656084656085*G0_1_0_0_0_0 + 0.204656084656085*G0_1_0_0_0_1 + 0.0239153439153459*G0_1_0_1_0_0 - 0.459894179894172*G0_1_0_2_0_1 + 0.556190476190462*G0_1_0_3_0_0 + 0.06095238095238*G0_1_0_3_0_1 - 0.0895238095237983*G0_1_0_4_0_0 + 0.8895238095238*G0_1_0_4_0_1 - 0.841904761904758*G0_1_0_5_0_0 - 1.09523809523809*G0_1_0_5_0_1 + 0.0895238095237985*G0_1_0_6_0_0 + 1.35047619047618*G0_1_0_6_0_1 + 0.205714285714283*G0_1_0_7_0_0 + 0.459047619047617*G0_1_0_7_0_1 - 0.434285714285714*G0_1_0_8_0_0 - 0.0609523809523802*G0_1_0_8_0_1 + 0.285714285714295*G0_1_0_9_0_0 - 1.34857142857142*G0_1_0_9_0_1 + 0.204656084656085*G0_1_0_10_1_0 + 0.204656084656085*G0_1_0_10_1_1 + 0.0239153439153459*G0_1_0_11_1_0 - 0.459894179894172*G0_1_0_12_1_1 + 0.556190476190462*G0_1_0_13_1_0 + 0.06095238095238*G0_1_0_13_1_1 - 0.0895238095237983*G0_1_0_14_1_0 + 0.8895238095238*G0_1_0_14_1_1 - 0.841904761904758*G0_1_0_15_1_0 - 1.09523809523809*G0_1_0_15_1_1 + 0.0895238095237985*G0_1_0_16_1_0 + 1.35047619047618*G0_1_0_16_1_1 + 0.205714285714283*G0_1_0_17_1_0 + 0.459047619047617*G0_1_0_17_1_1 - 0.434285714285714*G0_1_0_18_1_0 - 0.0609523809523802*G0_1_0_18_1_1 + 0.285714285714295*G0_1_0_19_1_0 - 1.34857142857142*G0_1_0_19_1_1 + 0.0761904761904777*G0_1_1_0_0_0 + 0.0761904761904776*G0_1_1_0_0_1 - 0.0558730158730084*G0_1_1_1_0_0 - 0.12698412698412*G0_1_1_2_0_1 + 0.217777777777775*G0_1_1_3_0_0 - 0.0304761904761779*G0_1_1_3_0_1 - 0.0412698412698314*G0_1_1_4_0_0 + 0.278095238095233*G0_1_1_4_0_1 - 0.137777777777771*G0_1_1_5_0_0 - 0.248888888888889*G0_1_1_5_0_1 + 0.0412698412698314*G0_1_1_6_0_0 + 0.299682539682532*G0_1_1_6_0_1 - 0.046349206349207*G0_1_1_7_0_0 + 0.064761904761911*G0_1_1_7_0_1 + 0.0260317460317378*G0_1_1_8_0_0 + 0.0304761904761779*G0_1_1_8_0_1 - 0.0800000000000036*G0_1_1_9_0_0 - 0.342857142857144*G0_1_1_9_0_1 + 0.0761904761904777*G0_1_1_10_1_0 + 0.0761904761904776*G0_1_1_10_1_1 - 0.0558730158730084*G0_1_1_11_1_0 - 0.12698412698412*G0_1_1_12_1_1 + 0.217777777777775*G0_1_1_13_1_0 - 0.0304761904761779*G0_1_1_13_1_1 - 0.0412698412698314*G0_1_1_14_1_0 + 0.278095238095233*G0_1_1_14_1_1 - 0.137777777777771*G0_1_1_15_1_0 - 0.248888888888889*G0_1_1_15_1_1 + 0.0412698412698314*G0_1_1_16_1_0 + 0.299682539682532*G0_1_1_16_1_1 - 0.046349206349207*G0_1_1_17_1_0 + 0.064761904761911*G0_1_1_17_1_1 + 0.0260317460317378*G0_1_1_18_1_0 + 0.0304761904761779*G0_1_1_18_1_1 - 0.0800000000000036*G0_1_1_19_1_0 - 0.342857142857144*G0_1_1_19_1_1;
    A[607] = 0.0;
    A[716] = -0.04063492063492*G0_0_0_0_0_0 - 0.0406349206349199*G0_0_0_0_0_1 + 0.0203174603174595*G0_0_0_1_0_0 + 0.121904761904761*G0_0_0_3_0_0 + 0.0711111111111095*G0_0_0_3_0_1 + 0.0711111111111114*G0_0_0_4_0_1 + 0.121904761904761*G0_0_0_5_0_0 + 0.111746031746031*G0_0_0_5_0_1 - 0.0711111111111106*G0_0_0_6_0_1 + 0.101587301587299*G0_0_0_7_0_0 + 0.11174603174603*G0_0_0_7_0_1 - 0.0812698412698389*G0_0_0_8_0_0 - 0.0711111111111095*G0_0_0_8_0_1 - 0.243809523809522*G0_0_0_9_0_0 - 0.182857142857141*G0_0_0_9_0_1 - 0.04063492063492*G0_0_0_10_1_0 - 0.0406349206349199*G0_0_0_10_1_1 + 0.0203174603174595*G0_0_0_11_1_0 + 0.121904761904761*G0_0_0_13_1_0 + 0.0711111111111095*G0_0_0_13_1_1 + 0.0711111111111114*G0_0_0_14_1_1 + 0.121904761904761*G0_0_0_15_1_0 + 0.111746031746031*G0_0_0_15_1_1 - 0.0711111111111106*G0_0_0_16_1_1 + 0.101587301587299*G0_0_0_17_1_0 + 0.11174603174603*G0_0_0_17_1_1 - 0.0812698412698389*G0_0_0_18_1_0 - 0.0711111111111095*G0_0_0_18_1_1 - 0.243809523809522*G0_0_0_19_1_0 - 0.182857142857141*G0_0_0_19_1_1 - 0.0304761904761902*G0_0_1_0_0_0 - 0.0304761904761902*G0_0_1_0_0_1 + 0.152380952380949*G0_0_1_1_0_0 + 0.15238095238095*G0_0_1_2_0_1 - 0.0203174603174599*G0_0_1_3_0_0 + 0.253968253968249*G0_0_1_3_0_1 + 0.253968253968251*G0_0_1_4_0_0 - 0.0203174603174581*G0_0_1_4_0_1 + 0.0812698412698405*G0_0_1_5_0_0 + 0.0609523809523806*G0_0_1_5_0_1 - 0.253968253968252*G0_0_1_6_0_0 - 0.182857142857141*G0_0_1_6_0_1 + 0.0609523809523802*G0_0_1_7_0_0 + 0.0812698412698401*G0_0_1_7_0_1 - 0.182857142857139*G0_0_1_8_0_0 - 0.253968253968249*G0_0_1_8_0_1 - 0.0609523809523805*G0_0_1_9_0_0 - 0.0609523809523819*G0_0_1_9_0_1 - 0.0304761904761902*G0_0_1_10_1_0 - 0.0304761904761902*G0_0_1_10_1_1 + 0.152380952380949*G0_0_1_11_1_0 + 0.15238095238095*G0_0_1_12_1_1 - 0.0203174603174599*G0_0_1_13_1_0 + 0.253968253968249*G0_0_1_13_1_1 + 0.253968253968251*G0_0_1_14_1_0 - 0.0203174603174581*G0_0_1_14_1_1 + 0.0812698412698405*G0_0_1_15_1_0 + 0.0609523809523806*G0_0_1_15_1_1 - 0.253968253968252*G0_0_1_16_1_0 - 0.182857142857141*G0_0_1_16_1_1 + 0.0609523809523802*G0_0_1_17_1_0 + 0.0812698412698401*G0_0_1_17_1_1 - 0.182857142857139*G0_0_1_18_1_0 - 0.253968253968249*G0_0_1_18_1_1 - 0.0609523809523805*G0_0_1_19_1_0 - 0.0609523809523819*G0_0_1_19_1_1 - 0.0101587301587313*G0_1_0_0_0_0 - 0.0101587301587313*G0_1_0_0_0_1 + 0.132063492063489*G0_1_0_1_0_0 + 0.132063492063491*G0_1_0_2_0_1 - 0.152380952380952*G0_1_0_3_0_0 + 0.182857142857138*G0_1_0_3_0_1 + 0.182857142857141*G0_1_0_4_0_0 - 0.15238095238095*G0_1_0_4_0_1 - 0.0914285714285721*G0_1_0_5_0_0 - 0.0304761904761883*G0_1_0_5_0_1 - 0.182857142857141*G0_1_0_6_0_0 - 0.0914285714285713*G0_1_0_6_0_1 - 0.0304761904761896*G0_1_0_7_0_0 - 0.0914285714285731*G0_1_0_7_0_1 - 0.0914285714285685*G0_1_0_8_0_0 - 0.182857142857138*G0_1_0_8_0_1 + 0.243809523809524*G0_1_0_9_0_0 + 0.243809523809523*G0_1_0_9_0_1 - 0.0101587301587313*G0_1_0_10_1_0 - 0.0101587301587313*G0_1_0_10_1_1 + 0.132063492063489*G0_1_0_11_1_0 + 0.132063492063491*G0_1_0_12_1_1 - 0.152380952380952*G0_1_0_13_1_0 + 0.182857142857138*G0_1_0_13_1_1 + 0.182857142857141*G0_1_0_14_1_0 - 0.15238095238095*G0_1_0_14_1_1 - 0.0914285714285721*G0_1_0_15_1_0 - 0.0304761904761883*G0_1_0_15_1_1 - 0.182857142857141*G0_1_0_16_1_0 - 0.0914285714285713*G0_1_0_16_1_1 - 0.0304761904761896*G0_1_0_17_1_0 - 0.0914285714285731*G0_1_0_17_1_1 - 0.0914285714285685*G0_1_0_18_1_0 - 0.182857142857138*G0_1_0_18_1_1 + 0.243809523809524*G0_1_0_19_1_0 + 0.243809523809523*G0_1_0_19_1_1 - 0.0406349206349197*G0_1_1_0_0_0 - 0.0406349206349197*G0_1_1_0_0_1 + 0.020317460317459*G0_1_1_2_0_1 + 0.0711111111111111*G0_1_1_3_0_0 + 0.0711111111111105*G0_1_1_4_0_0 + 0.121904761904765*G0_1_1_4_0_1 + 0.111746031746031*G0_1_1_5_0_0 + 0.1015873015873*G0_1_1_5_0_1 - 0.0711111111111105*G0_1_1_6_0_0 - 0.0812698412698398*G0_1_1_6_0_1 + 0.111746031746029*G0_1_1_7_0_0 + 0.12190476190476*G0_1_1_7_0_1 - 0.0711111111111061*G0_1_1_8_0_0 - 0.182857142857142*G0_1_1_9_0_0 - 0.243809523809525*G0_1_1_9_0_1 - 0.0406349206349197*G0_1_1_10_1_0 - 0.0406349206349197*G0_1_1_10_1_1 + 0.020317460317459*G0_1_1_12_1_1 + 0.0711111111111111*G0_1_1_13_1_0 + 0.0711111111111105*G0_1_1_14_1_0 + 0.121904761904765*G0_1_1_14_1_1 + 0.111746031746031*G0_1_1_15_1_0 + 0.1015873015873*G0_1_1_15_1_1 - 0.0711111111111105*G0_1_1_16_1_0 - 0.0812698412698398*G0_1_1_16_1_1 + 0.111746031746029*G0_1_1_17_1_0 + 0.12190476190476*G0_1_1_17_1_1 - 0.0711111111111061*G0_1_1_18_1_0 - 0.182857142857142*G0_1_1_19_1_0 - 0.243809523809525*G0_1_1_19_1_1;
    A[636] = 0.0;
    A[245] = 0.982010582010579*G0_0_0_0_0_0 + 0.982010582010579*G0_0_0_0_0_1 - 0.982010582010579*G0_0_0_1_0_0 - 6.77248677248673*G0_0_0_2_0_1 + 4.67301587301584*G0_0_0_3_0_0 + 0.406349206349199*G0_0_0_3_0_1 - 12.6984126984126*G0_0_0_4_0_0 - 2.64126984126983*G0_0_0_4_0_1 - 4.67301587301585*G0_0_0_5_0_0 - 4.26666666666665*G0_0_0_5_0_1 + 12.6984126984126*G0_0_0_6_0_0 + 10.0571428571428*G0_0_0_6_0_1 - 0.406349206349208*G0_0_0_7_0_1 - 0.4063492063492*G0_0_0_8_0_1 + 3.04761904761904*G0_0_0_9_0_1 + 0.982010582010579*G0_0_0_10_1_0 + 0.982010582010579*G0_0_0_10_1_1 - 0.982010582010579*G0_0_0_11_1_0 - 6.77248677248673*G0_0_0_12_1_1 + 4.67301587301584*G0_0_0_13_1_0 + 0.406349206349199*G0_0_0_13_1_1 - 12.6984126984126*G0_0_0_14_1_0 - 2.64126984126983*G0_0_0_14_1_1 - 4.67301587301585*G0_0_0_15_1_0 - 4.26666666666665*G0_0_0_15_1_1 + 12.6984126984126*G0_0_0_16_1_0 + 10.0571428571428*G0_0_0_16_1_1 - 0.406349206349208*G0_0_0_17_1_1 - 0.4063492063492*G0_0_0_18_1_1 + 3.04761904761904*G0_0_0_19_1_1 + 0.491005291005289*G0_0_1_0_0_0 + 0.491005291005289*G0_0_1_0_0_1 - 0.0846560846560839*G0_0_1_1_0_0 - 2.42116402116401*G0_0_1_2_0_1 + 0.609523809523806*G0_0_1_3_0_0 + 0.253968253968253*G0_0_1_3_0_1 - 5.0285714285714*G0_0_1_4_0_0 - 2.33650793650793*G0_0_1_4_0_1 - 2.13333333333332*G0_0_1_5_0_0 - 1.93015873015872*G0_0_1_5_0_1 + 5.0285714285714*G0_0_1_6_0_0 + 3.86031746031744*G0_0_1_6_0_1 - 0.203174603174602*G0_0_1_7_0_0 - 0.406349206349205*G0_0_1_7_0_1 - 0.203174603174601*G0_0_1_8_0_0 - 0.253968253968254*G0_0_1_8_0_1 + 1.52380952380951*G0_0_1_9_0_0 + 2.74285714285713*G0_0_1_9_0_1 + 0.491005291005289*G0_0_1_10_1_0 + 0.491005291005289*G0_0_1_10_1_1 - 0.0846560846560839*G0_0_1_11_1_0 - 2.42116402116401*G0_0_1_12_1_1 + 0.609523809523806*G0_0_1_13_1_0 + 0.253968253968253*G0_0_1_13_1_1 - 5.0285714285714*G0_0_1_14_1_0 - 2.33650793650793*G0_0_1_14_1_1 - 2.13333333333332*G0_0_1_15_1_0 - 1.93015873015872*G0_0_1_15_1_1 + 5.0285714285714*G0_0_1_16_1_0 + 3.86031746031744*G0_0_1_16_1_1 - 0.203174603174602*G0_0_1_17_1_0 - 0.406349206349205*G0_0_1_17_1_1 - 0.203174603174601*G0_0_1_18_1_0 - 0.253968253968254*G0_0_1_18_1_1 + 1.52380952380951*G0_0_1_19_1_0 + 2.74285714285713*G0_0_1_19_1_1 + 0.897354497354494*G0_1_0_0_0_0 + 0.897354497354494*G0_1_0_0_0_1 - 0.49100529100529*G0_1_0_1_0_0 - 4.35132275132273*G0_1_0_2_0_1 + 2.53968253968252*G0_1_0_3_0_0 + 0.203174603174599*G0_1_0_3_0_1 - 7.66984126984123*G0_1_0_4_0_0 - 1.47301587301587*G0_1_0_4_0_1 - 4.06349206349204*G0_1_0_5_0_0 - 3.91111111111109*G0_1_0_5_0_1 + 7.66984126984123*G0_1_0_6_0_0 + 7.36507936507933*G0_1_0_6_0_1 - 0.203174603174603*G0_1_0_7_0_0 - 0.355555555555555*G0_1_0_7_0_1 - 0.2031746031746*G0_1_0_8_0_0 - 0.203174603174599*G0_1_0_8_0_1 + 1.52380952380952*G0_1_0_9_0_0 + 1.82857142857142*G0_1_0_9_0_1 + 0.897354497354494*G0_1_0_10_1_0 + 0.897354497354494*G0_1_0_10_1_1 - 0.49100529100529*G0_1_0_11_1_0 - 4.35132275132273*G0_1_0_12_1_1 + 2.53968253968252*G0_1_0_13_1_0 + 0.203174603174599*G0_1_0_13_1_1 - 7.66984126984123*G0_1_0_14_1_0 - 1.47301587301587*G0_1_0_14_1_1 - 4.06349206349204*G0_1_0_15_1_0 - 3.91111111111109*G0_1_0_15_1_1 + 7.66984126984123*G0_1_0_16_1_0 + 7.36507936507933*G0_1_0_16_1_1 - 0.203174603174603*G0_1_0_17_1_0 - 0.355555555555555*G0_1_0_17_1_1 - 0.2031746031746*G0_1_0_18_1_0 - 0.203174603174599*G0_1_0_18_1_1 + 1.52380952380952*G0_1_0_19_1_0 + 1.82857142857142*G0_1_0_19_1_1 + 0.399576719576718*G0_1_1_0_0_0 + 0.399576719576718*G0_1_1_0_0_1 + 0.0067724867724881*G0_1_1_1_0_0 - 1.35449735449735*G0_1_1_2_0_1 + 0.457142857142854*G0_1_1_3_0_0 + 0.345396825396826*G0_1_1_3_0_1 - 2.59047619047617*G0_1_1_4_0_0 - 1.11746031746031*G0_1_1_4_0_1 - 1.98095238095237*G0_1_1_5_0_0 - 1.6863492063492*G0_1_1_5_0_1 + 2.59047619047617*G0_1_1_6_0_0 + 2.64126984126983*G0_1_1_6_0_1 - 0.538412698412696*G0_1_1_7_0_0 - 0.833015873015867*G0_1_1_7_0_1 + 0.13206349206349*G0_1_1_8_0_0 - 0.345396825396826*G0_1_1_8_0_1 + 1.52380952380952*G0_1_1_9_0_0 + 1.95047619047618*G0_1_1_9_0_1 + 0.399576719576718*G0_1_1_10_1_0 + 0.399576719576718*G0_1_1_10_1_1 + 0.0067724867724881*G0_1_1_11_1_0 - 1.35449735449735*G0_1_1_12_1_1 + 0.457142857142854*G0_1_1_13_1_0 + 0.345396825396826*G0_1_1_13_1_1 - 2.59047619047617*G0_1_1_14_1_0 - 1.11746031746031*G0_1_1_14_1_1 - 1.98095238095237*G0_1_1_15_1_0 - 1.6863492063492*G0_1_1_15_1_1 + 2.59047619047617*G0_1_1_16_1_0 + 2.64126984126983*G0_1_1_16_1_1 - 0.538412698412696*G0_1_1_17_1_0 - 0.833015873015867*G0_1_1_17_1_1 + 0.13206349206349*G0_1_1_18_1_0 - 0.345396825396826*G0_1_1_18_1_1 + 1.52380952380952*G0_1_1_19_1_0 + 1.95047619047618*G0_1_1_19_1_1;
    A[270] = A[530] + 2.02962962962962*G0_0_0_0_0_0 + 2.02962962962962*G0_0_0_0_0_1 - 0.480423280423278*G0_0_0_1_0_0 - 0.283597883597882*G0_0_0_2_0_1 - 0.158730158730157*G0_0_0_3_0_0 - 0.257142857142857*G0_0_0_3_0_1 + 0.0507936507936524*G0_0_0_4_0_0 - 0.0476190476190454*G0_0_0_4_0_1 + 0.577777777777777*G0_0_0_5_0_0 - 2.98730158730158*G0_0_0_5_0_1 - 0.0507936507936524*G0_0_0_6_0_0 + 1.24126984126984*G0_0_0_6_0_1 - 3.26984126984126*G0_0_0_7_0_0 + 0.295238095238095*G0_0_0_7_0_1 + 1.72063492063491*G0_0_0_8_0_0 + 0.257142857142857*G0_0_0_8_0_1 - 0.41904761904762*G0_0_0_9_0_0 - 0.247619047619051*G0_0_0_9_0_1 + 2.02962962962962*G0_0_0_10_1_0 + 2.02962962962962*G0_0_0_10_1_1 - 0.480423280423278*G0_0_0_11_1_0 - 0.283597883597882*G0_0_0_12_1_1 - 0.158730158730157*G0_0_0_13_1_0 - 0.257142857142857*G0_0_0_13_1_1 + 0.0507936507936524*G0_0_0_14_1_0 - 0.0476190476190454*G0_0_0_14_1_1 + 0.577777777777777*G0_0_0_15_1_0 - 2.98730158730158*G0_0_0_15_1_1 - 0.0507936507936524*G0_0_0_16_1_0 + 1.24126984126984*G0_0_0_16_1_1 - 3.26984126984126*G0_0_0_17_1_0 + 0.295238095238095*G0_0_0_17_1_1 + 1.72063492063491*G0_0_0_18_1_0 + 0.257142857142857*G0_0_0_18_1_1 - 0.41904761904762*G0_0_0_19_1_0 - 0.247619047619051*G0_0_0_19_1_1 + 2.02962962962962*G0_0_1_0_0_0 + 2.02962962962962*G0_0_1_0_0_1 - 0.480423280423278*G0_0_1_1_0_0 - 0.283597883597882*G0_0_1_2_0_1 - 0.158730158730156*G0_0_1_3_0_0 - 0.257142857142856*G0_0_1_3_0_1 + 0.0507936507936518*G0_0_1_4_0_0 - 0.0476190476190456*G0_0_1_4_0_1 + 0.577777777777777*G0_0_1_5_0_0 - 2.98730158730157*G0_0_1_5_0_1 - 0.0507936507936517*G0_0_1_6_0_0 + 1.24126984126984*G0_0_1_6_0_1 - 3.26984126984126*G0_0_1_7_0_0 + 0.295238095238095*G0_0_1_7_0_1 + 1.72063492063491*G0_0_1_8_0_0 + 0.257142857142856*G0_0_1_8_0_1 - 0.41904761904762*G0_0_1_9_0_0 - 0.247619047619051*G0_0_1_9_0_1 + 2.02962962962962*G0_0_1_10_1_0 + 2.02962962962962*G0_0_1_10_1_1 - 0.480423280423278*G0_0_1_11_1_0 - 0.283597883597882*G0_0_1_12_1_1 - 0.158730158730156*G0_0_1_13_1_0 - 0.257142857142856*G0_0_1_13_1_1 + 0.0507936507936518*G0_0_1_14_1_0 - 0.0476190476190456*G0_0_1_14_1_1 + 0.577777777777777*G0_0_1_15_1_0 - 2.98730158730157*G0_0_1_15_1_1 - 0.0507936507936517*G0_0_1_16_1_0 + 1.24126984126984*G0_0_1_16_1_1 - 3.26984126984126*G0_0_1_17_1_0 + 0.295238095238095*G0_0_1_17_1_1 + 1.72063492063491*G0_0_1_18_1_0 + 0.257142857142856*G0_0_1_18_1_1 - 0.41904761904762*G0_0_1_19_1_0 - 0.247619047619051*G0_0_1_19_1_1 - 0.351322751322748*G0_1_0_0_0_0 - 0.351322751322749*G0_1_0_0_0_1 - 0.480423280423279*G0_1_0_1_0_0 - 2.66455026455025*G0_1_0_2_0_1 + 1.71746031746031*G0_1_0_3_0_0 - 0.257142857142858*G0_1_0_3_0_1 - 5.21587301587299*G0_1_0_4_0_0 - 1.05714285714285*G0_1_0_4_0_1 - 2.3079365079365*G0_1_0_5_0_0 - 0.606349206349204*G0_1_0_5_0_1 + 5.21587301587299*G0_1_0_6_0_0 + 3.62222222222221*G0_1_0_6_0_1 + 0.987301587301581*G0_1_0_7_0_0 - 0.714285714285712*G0_1_0_7_0_1 - 0.155555555555552*G0_1_0_8_0_0 + 0.257142857142857*G0_1_0_8_0_1 + 0.590476190476188*G0_1_0_9_0_0 + 1.77142857142856*G0_1_0_9_0_1 - 0.351322751322748*G0_1_0_10_1_0 - 0.351322751322749*G0_1_0_10_1_1 - 0.480423280423279*G0_1_0_11_1_0 - 2.66455026455025*G0_1_0_12_1_1 + 1.71746031746031*G0_1_0_13_1_0 - 0.257142857142858*G0_1_0_13_1_1 - 5.21587301587299*G0_1_0_14_1_0 - 1.05714285714285*G0_1_0_14_1_1 - 2.3079365079365*G0_1_0_15_1_0 - 0.606349206349204*G0_1_0_15_1_1 + 5.21587301587299*G0_1_0_16_1_0 + 3.62222222222221*G0_1_0_16_1_1 + 0.987301587301581*G0_1_0_17_1_0 - 0.714285714285712*G0_1_0_17_1_1 - 0.155555555555552*G0_1_0_18_1_0 + 0.257142857142857*G0_1_0_18_1_1 + 0.590476190476188*G0_1_0_19_1_0 + 1.77142857142856*G0_1_0_19_1_1 - 0.634920634920631*G0_1_1_0_0_0 - 0.634920634920631*G0_1_1_0_0_1 - 0.634920634920631*G0_1_1_2_0_1 + 0.253968253968253*G0_1_1_3_0_0 - 1.65079365079364*G0_1_1_4_0_0 - 0.761904761904759*G0_1_1_4_0_1 - 1.01587301587301*G0_1_1_5_0_0 + 0.634920634920632*G0_1_1_5_0_1 + 1.65079365079364*G0_1_1_6_0_0 + 0.634920634920631*G0_1_1_6_0_1 + 0.888888888888884*G0_1_1_7_0_0 - 0.761904761904757*G0_1_1_7_0_1 - 0.253968253968253*G0_1_1_8_0_0 + 0.761904761904757*G0_1_1_9_0_0 + 1.52380952380952*G0_1_1_9_0_1 - 0.634920634920631*G0_1_1_10_1_0 - 0.634920634920631*G0_1_1_10_1_1 - 0.634920634920631*G0_1_1_12_1_1 + 0.253968253968253*G0_1_1_13_1_0 - 1.65079365079364*G0_1_1_14_1_0 - 0.761904761904759*G0_1_1_14_1_1 - 1.01587301587301*G0_1_1_15_1_0 + 0.634920634920632*G0_1_1_15_1_1 + 1.65079365079364*G0_1_1_16_1_0 + 0.634920634920631*G0_1_1_16_1_1 + 0.888888888888884*G0_1_1_17_1_0 - 0.761904761904757*G0_1_1_17_1_1 - 0.253968253968253*G0_1_1_18_1_0 + 0.761904761904757*G0_1_1_19_1_0 + 1.52380952380952*G0_1_1_19_1_1;
    A[307] = A[679] + 0.095238095238097*G0_0_0_0_0_0 + 0.0952380952380971*G0_0_0_0_0_1 - 0.0647619047619072*G0_0_0_1_0_0 + 0.617142857142843*G0_0_0_2_0_1 - 1.08571428571427*G0_0_0_3_0_0 - 0.169523809523808*G0_0_0_3_0_1 + 0.217142857142837*G0_0_0_4_0_0 - 1.38095238095237*G0_0_0_4_0_1 + 0.834285714285707*G0_0_0_5_0_0 + 0.7295238095238*G0_0_0_5_0_1 - 0.217142857142837*G0_0_0_6_0_0 - 1.44190476190474*G0_0_0_6_0_1 - 0.929523809523808*G0_0_0_7_0_0 - 0.824761904761901*G0_0_0_7_0_1 + 0.899047619047618*G0_0_0_8_0_0 + 0.169523809523808*G0_0_0_8_0_1 + 0.251428571428563*G0_0_0_9_0_0 + 2.20571428571428*G0_0_0_9_0_1 + 0.095238095238097*G0_0_0_10_1_0 + 0.0952380952380971*G0_0_0_10_1_1 - 0.0647619047619072*G0_0_0_11_1_0 + 0.617142857142843*G0_0_0_12_1_1 - 1.08571428571427*G0_0_0_13_1_0 - 0.169523809523808*G0_0_0_13_1_1 + 0.217142857142837*G0_0_0_14_1_0 - 1.38095238095237*G0_0_0_14_1_1 + 0.834285714285707*G0_0_0_15_1_0 + 0.7295238095238*G0_0_0_15_1_1 - 0.217142857142837*G0_0_0_16_1_0 - 1.44190476190474*G0_0_0_16_1_1 - 0.929523809523808*G0_0_0_17_1_0 - 0.824761904761901*G0_0_0_17_1_1 + 0.899047619047618*G0_0_0_18_1_0 + 0.169523809523808*G0_0_0_18_1_1 + 0.251428571428563*G0_0_0_19_1_0 + 2.20571428571428*G0_0_0_19_1_1 - 0.297142857142857*G0_0_1_0_0_0 - 0.297142857142857*G0_0_1_0_0_1 - 0.0647619047619104*G0_0_1_1_0_0 + 0.224761904761897*G0_0_1_2_0_1 - 0.0819047619047601*G0_0_1_3_0_0 - 0.169523809523817*G0_0_1_3_0_1 + 0.0438095238095107*G0_0_1_4_0_0 - 0.158095238095239*G0_0_1_4_0_1 + 1.05333333333332*G0_0_1_5_0_0 + 1.12190476190476*G0_0_1_5_0_1 - 0.0438095238095107*G0_0_1_6_0_0 - 1.0495238095238*G0_0_1_6_0_1 + 0.466666666666664*G0_0_1_7_0_0 + 0.398095238095229*G0_0_1_7_0_1 - 0.104761904761896*G0_0_1_8_0_0 + 0.169523809523817*G0_0_1_8_0_1 - 0.971428571428563*G0_0_1_9_0_0 - 0.239999999999989*G0_0_1_9_0_1 - 0.297142857142857*G0_0_1_10_1_0 - 0.297142857142857*G0_0_1_10_1_1 - 0.0647619047619104*G0_0_1_11_1_0 + 0.224761904761897*G0_0_1_12_1_1 - 0.0819047619047601*G0_0_1_13_1_0 - 0.169523809523817*G0_0_1_13_1_1 + 0.0438095238095107*G0_0_1_14_1_0 - 0.158095238095239*G0_0_1_14_1_1 + 1.05333333333332*G0_0_1_15_1_0 + 1.12190476190476*G0_0_1_15_1_1 - 0.0438095238095107*G0_0_1_16_1_0 - 1.0495238095238*G0_0_1_16_1_1 + 0.466666666666664*G0_0_1_17_1_0 + 0.398095238095229*G0_0_1_17_1_1 - 0.104761904761896*G0_0_1_18_1_0 + 0.169523809523817*G0_0_1_18_1_1 - 0.971428571428563*G0_0_1_19_1_0 - 0.239999999999989*G0_0_1_19_1_1 - 0.194285714285716*G0_1_0_0_0_0 - 0.194285714285716*G0_1_0_0_0_1 - 0.0647619047619076*G0_1_0_1_0_0 + 0.327619047619041*G0_1_0_2_0_1 - 0.430476190476177*G0_1_0_3_0_0 - 0.169523809523809*G0_1_0_3_0_1 + 0.00380952380951183*G0_1_0_4_0_0 - 0.649523809523803*G0_1_0_4_0_1 + 0.910476190476188*G0_1_0_5_0_0 + 1.01904761904762*G0_1_0_5_0_1 - 0.00380952380951208*G0_1_0_6_0_0 - 1.15238095238094*G0_1_0_6_0_1 + 0.0152380952380965*G0_1_0_7_0_0 - 0.0933333333333354*G0_1_0_7_0_1 + 0.243809523809527*G0_1_0_8_0_0 + 0.169523809523809*G0_1_0_8_0_1 - 0.48000000000001*G0_1_0_9_0_0 + 0.74285714285714*G0_1_0_9_0_1 - 0.194285714285716*G0_1_0_10_1_0 - 0.194285714285716*G0_1_0_10_1_1 - 0.0647619047619076*G0_1_0_11_1_0 + 0.327619047619041*G0_1_0_12_1_1 - 0.430476190476177*G0_1_0_13_1_0 - 0.169523809523809*G0_1_0_13_1_1 + 0.00380952380951183*G0_1_0_14_1_0 - 0.649523809523803*G0_1_0_14_1_1 + 0.910476190476188*G0_1_0_15_1_0 + 1.01904761904762*G0_1_0_15_1_1 - 0.00380952380951208*G0_1_0_16_1_0 - 1.15238095238094*G0_1_0_16_1_1 + 0.0152380952380965*G0_1_0_17_1_0 - 0.0933333333333354*G0_1_0_17_1_1 + 0.243809523809527*G0_1_0_18_1_0 + 0.169523809523809*G0_1_0_18_1_1 - 0.48000000000001*G0_1_0_19_1_0 + 0.74285714285714*G0_1_0_19_1_1 + 0.0304761904761846*G0_1_1_0_0_0 + 0.0304761904761846*G0_1_1_0_0_1 + 0.0304761904761861*G0_1_1_2_0_1 - 0.156190476190473*G0_1_1_3_0_0 - 0.0647619047619135*G0_1_1_4_0_0 - 0.251428571428569*G0_1_1_4_0_1 - 0.0952380952381012*G0_1_1_5_0_0 - 0.0304761904761823*G0_1_1_5_0_1 + 0.0647619047619136*G0_1_1_6_0_0 - 0.0304761904761883*G0_1_1_6_0_1 - 0.18666666666666*G0_1_1_7_0_0 - 0.251428571428579*G0_1_1_7_0_1 + 0.156190476190479*G0_1_1_8_0_0 + 0.251428571428574*G0_1_1_9_0_0 + 0.502857142857147*G0_1_1_9_0_1 + 0.0304761904761846*G0_1_1_10_1_0 + 0.0304761904761846*G0_1_1_10_1_1 + 0.0304761904761861*G0_1_1_12_1_1 - 0.156190476190473*G0_1_1_13_1_0 - 0.0647619047619135*G0_1_1_14_1_0 - 0.251428571428569*G0_1_1_14_1_1 - 0.0952380952381012*G0_1_1_15_1_0 - 0.0304761904761823*G0_1_1_15_1_1 + 0.0647619047619136*G0_1_1_16_1_0 - 0.0304761904761883*G0_1_1_16_1_1 - 0.18666666666666*G0_1_1_17_1_0 - 0.251428571428579*G0_1_1_17_1_1 + 0.156190476190479*G0_1_1_18_1_0 + 0.251428571428574*G0_1_1_19_1_0 + 0.502857142857147*G0_1_1_19_1_1;
    A[352] = 0.0;
    A[17] = 0.0;
    A[734] = 0.0;
    A[421] = -0.0880423280423279*G0_0_0_0_0_0 - 0.0880423280423279*G0_0_0_0_0_1 + 0.169312169312169*G0_0_0_1_0_0 - 0.25227513227513*G0_0_0_2_0_1 + 0.632380952380949*G0_0_0_3_0_0 + 0.6031746031746*G0_0_0_3_0_1 - 0.700952380952376*G0_0_0_4_0_0 - 0.250158730158728*G0_0_0_4_0_1 + 0.297142857142856*G0_0_0_5_0_0 + 0.273015873015872*G0_0_0_5_0_1 + 0.700952380952376*G0_0_0_6_0_0 + 0.0673015873015861*G0_0_0_6_0_1 + 0.233650793650793*G0_0_0_7_0_0 + 0.257777777777776*G0_0_0_7_0_1 - 0.314920634920633*G0_0_0_8_0_0 - 0.6031746031746*G0_0_0_8_0_1 - 0.929523809523805*G0_0_0_9_0_0 - 0.00761904761904806*G0_0_0_9_0_1 - 0.0880423280423279*G0_0_0_10_1_0 - 0.0880423280423279*G0_0_0_10_1_1 + 0.169312169312169*G0_0_0_11_1_0 - 0.25227513227513*G0_0_0_12_1_1 + 0.632380952380949*G0_0_0_13_1_0 + 0.6031746031746*G0_0_0_13_1_1 - 0.700952380952376*G0_0_0_14_1_0 - 0.250158730158728*G0_0_0_14_1_1 + 0.297142857142856*G0_0_0_15_1_0 + 0.273015873015872*G0_0_0_15_1_1 + 0.700952380952376*G0_0_0_16_1_0 + 0.0673015873015861*G0_0_0_16_1_1 + 0.233650793650793*G0_0_0_17_1_0 + 0.257777777777776*G0_0_0_17_1_1 - 0.314920634920633*G0_0_0_18_1_0 - 0.6031746031746*G0_0_0_18_1_1 - 0.929523809523805*G0_0_0_19_1_0 - 0.00761904761904806*G0_0_0_19_1_1 + 0.0101587301587297*G0_1_0_0_0_0 + 0.0101587301587298*G0_1_0_0_0_1 - 0.111746031746031*G0_1_0_2_0_1 + 0.0698412698412694*G0_1_0_3_0_0 - 0.143492063492062*G0_1_0_4_0_0 + 0.0380952380952393*G0_1_0_4_0_1 - 0.153650793650792*G0_1_0_5_0_0 - 0.13206349206349*G0_1_0_5_0_1 + 0.143492063492062*G0_1_0_6_0_0 + 0.233650793650792*G0_1_0_6_0_1 + 0.0596825396825394*G0_1_0_7_0_0 + 0.0380952380952373*G0_1_0_7_0_1 - 0.0698412698412681*G0_1_0_8_0_0 + 0.083809523809523*G0_1_0_9_0_0 - 0.0761904761904766*G0_1_0_9_0_1 + 0.0101587301587297*G0_1_0_10_1_0 + 0.0101587301587298*G0_1_0_10_1_1 - 0.111746031746031*G0_1_0_12_1_1 + 0.0698412698412694*G0_1_0_13_1_0 - 0.143492063492062*G0_1_0_14_1_0 + 0.0380952380952393*G0_1_0_14_1_1 - 0.153650793650792*G0_1_0_15_1_0 - 0.13206349206349*G0_1_0_15_1_1 + 0.143492063492062*G0_1_0_16_1_0 + 0.233650793650792*G0_1_0_16_1_1 + 0.0596825396825394*G0_1_0_17_1_0 + 0.0380952380952373*G0_1_0_17_1_1 - 0.0698412698412681*G0_1_0_18_1_0 + 0.083809523809523*G0_1_0_19_1_0 - 0.0761904761904766*G0_1_0_19_1_1;
    A[377] = 0.0;
    A[58] = 0.0;
    A[454] = 0.0;
    A[410] = 0.0;
    A[87] = 0.0;
    A[792] = 0.0;
    A[887] = 0.101587301587302*G0_0_1_0_0_0 + 0.101587301587302*G0_0_1_0_0_1 + 0.1015873015873*G0_0_1_1_0_0 - 0.266666666666662*G0_0_1_3_0_0 + 0.0698412698412699*G0_0_1_3_0_1 - 0.234920634920636*G0_0_1_4_0_1 - 0.266666666666668*G0_0_1_5_0_0 - 0.336507936507937*G0_0_1_5_0_1 + 0.23492063492064*G0_0_1_6_0_1 - 0.101587301587301*G0_0_1_7_0_0 - 0.0317460317460321*G0_0_1_7_0_1 - 0.101587301587301*G0_0_1_8_0_0 - 0.06984126984127*G0_0_1_8_0_1 + 0.53333333333333*G0_0_1_9_0_0 + 0.266666666666669*G0_0_1_9_0_1 + 0.101587301587302*G0_0_1_10_1_0 + 0.101587301587302*G0_0_1_10_1_1 + 0.1015873015873*G0_0_1_11_1_0 - 0.266666666666662*G0_0_1_13_1_0 + 0.0698412698412699*G0_0_1_13_1_1 - 0.234920634920636*G0_0_1_14_1_1 - 0.266666666666668*G0_0_1_15_1_0 - 0.336507936507937*G0_0_1_15_1_1 + 0.23492063492064*G0_0_1_16_1_1 - 0.101587301587301*G0_0_1_17_1_0 - 0.0317460317460321*G0_0_1_17_1_1 - 0.101587301587301*G0_0_1_18_1_0 - 0.06984126984127*G0_0_1_18_1_1 + 0.53333333333333*G0_0_1_19_1_0 + 0.266666666666669*G0_0_1_19_1_1 + 0.125291005291005*G0_1_1_0_0_0 + 0.125291005291005*G0_1_1_0_0_1 - 0.0237037037037035*G0_1_1_1_0_0 - 0.973544973544969*G0_1_1_2_0_1 + 0.755555555555551*G0_1_1_3_0_0 + 0.44190476190476*G0_1_1_3_0_1 - 2.06349206349206*G0_1_1_4_0_0 - 0.799999999999998*G0_1_1_4_0_1 - 1.02222222222222*G0_1_1_5_0_0 - 0.650158730158727*G0_1_1_5_0_1 + 2.06349206349206*G0_1_1_6_0_0 + 1.49841269841269*G0_1_1_6_0_1 - 0.306031746031745*G0_1_1_7_0_0 - 0.678095238095235*G0_1_1_7_0_1 + 0.204444444444444*G0_1_1_8_0_0 - 0.44190476190476*G0_1_1_8_0_1 + 0.266666666666666*G0_1_1_9_0_0 + 1.47809523809523*G0_1_1_9_0_1 + 0.125291005291005*G0_1_1_10_1_0 + 0.125291005291005*G0_1_1_10_1_1 - 0.0237037037037035*G0_1_1_11_1_0 - 0.973544973544969*G0_1_1_12_1_1 + 0.755555555555551*G0_1_1_13_1_0 + 0.44190476190476*G0_1_1_13_1_1 - 2.06349206349206*G0_1_1_14_1_0 - 0.799999999999998*G0_1_1_14_1_1 - 1.02222222222222*G0_1_1_15_1_0 - 0.650158730158727*G0_1_1_15_1_1 + 2.06349206349206*G0_1_1_16_1_0 + 1.49841269841269*G0_1_1_16_1_1 - 0.306031746031745*G0_1_1_17_1_0 - 0.678095238095235*G0_1_1_17_1_1 + 0.204444444444444*G0_1_1_18_1_0 - 0.44190476190476*G0_1_1_18_1_1 + 0.266666666666666*G0_1_1_19_1_0 + 1.47809523809523*G0_1_1_19_1_1;
    A[811] = 0.0;
    A[850] = 0.0;
    A[174] = 0.0;
    A[881] = 0.0;
    A[480] = 0.0;
    A[203] = 0.0;
    A[583] = 0.0;
    A[523] = 0.0;
    A[232] = 0.0;
    A[614] = 0.0;
    A[550] = 0.0;
    A[252] = 0.264126984126983*G0_0_0_0_0_0 + 0.264126984126983*G0_0_0_0_0_1 + 0.142222222222221*G0_0_0_1_0_0 - 0.609523809523804*G0_0_0_3_0_0 + 0.0406349206349207*G0_0_0_3_0_1 - 0.507936507936509*G0_0_0_4_0_1 - 0.60952380952381*G0_0_0_5_0_0 - 0.772063492063491*G0_0_0_5_0_1 + 0.507936507936512*G0_0_0_6_0_1 - 0.386031746031743*G0_0_0_7_0_0 - 0.223492063492062*G0_0_0_7_0_1 - 0.0203174603174608*G0_0_0_8_0_0 - 0.0406349206349207*G0_0_0_8_0_1 + 1.21904761904761*G0_0_0_9_0_0 + 0.731428571428571*G0_0_0_9_0_1 + 0.264126984126983*G0_0_0_10_1_0 + 0.264126984126983*G0_0_0_10_1_1 + 0.142222222222221*G0_0_0_11_1_0 - 0.609523809523804*G0_0_0_13_1_0 + 0.0406349206349207*G0_0_0_13_1_1 - 0.507936507936509*G0_0_0_14_1_1 - 0.60952380952381*G0_0_0_15_1_0 - 0.772063492063491*G0_0_0_15_1_1 + 0.507936507936512*G0_0_0_16_1_1 - 0.386031746031743*G0_0_0_17_1_0 - 0.223492063492062*G0_0_0_17_1_1 - 0.0203174603174608*G0_0_0_18_1_0 - 0.0406349206349207*G0_0_0_18_1_1 + 1.21904761904761*G0_0_0_19_1_0 + 0.731428571428571*G0_0_0_19_1_1 + 0.358941798941798*G0_0_1_0_0_0 + 0.358941798941798*G0_0_1_0_0_1 + 0.0880423280423269*G0_0_1_1_0_0 - 0.744973544973544*G0_0_1_2_0_1 - 0.142222222222222*G0_0_1_3_0_0 + 0.121904761904761*G0_0_1_3_0_1 - 1.42222222222222*G0_0_1_4_0_0 - 0.853333333333333*G0_0_1_4_0_1 - 0.954920634920633*G0_0_1_5_0_0 - 1.17841269841269*G0_0_1_5_0_1 + 1.42222222222222*G0_0_1_6_0_0 + 1.56444444444444*G0_0_1_6_0_1 - 0.223492063492064*G0_0_1_7_0_0 - 0.22349206349206*G0_0_1_8_0_0 - 0.121904761904761*G0_0_1_8_0_1 + 1.09714285714285*G0_0_1_9_0_0 + 0.853333333333336*G0_0_1_9_0_1 + 0.358941798941798*G0_0_1_10_1_0 + 0.358941798941798*G0_0_1_10_1_1 + 0.0880423280423269*G0_0_1_11_1_0 - 0.744973544973544*G0_0_1_12_1_1 - 0.142222222222222*G0_0_1_13_1_0 + 0.121904761904761*G0_0_1_13_1_1 - 1.42222222222222*G0_0_1_14_1_0 - 0.853333333333333*G0_0_1_14_1_1 - 0.954920634920633*G0_0_1_15_1_0 - 1.17841269841269*G0_0_1_15_1_1 + 1.42222222222222*G0_0_1_16_1_0 + 1.56444444444444*G0_0_1_16_1_1 - 0.223492063492064*G0_0_1_17_1_0 - 0.22349206349206*G0_0_1_18_1_0 - 0.121904761904761*G0_0_1_18_1_1 + 1.09714285714285*G0_0_1_19_1_0 + 0.853333333333336*G0_0_1_19_1_1 + 0.480846560846561*G0_1_0_0_0_0 + 0.480846560846561*G0_1_0_0_0_1 - 0.0135449735449735*G0_1_0_1_0_0 - 0.33862433862434*G0_1_0_2_0_1 - 0.0609523809523814*G0_1_0_3_0_0 + 0.223492063492062*G0_1_0_3_0_1 - 0.914285714285716*G0_1_0_4_0_0 - 0.873650793650793*G0_1_0_4_0_1 - 0.0609523809523856*G0_1_0_5_0_0 - 0.711111111111115*G0_1_0_5_0_1 + 0.914285714285716*G0_1_0_6_0_0 + 0.568888888888894*G0_1_0_6_0_1 - 0.873650793650791*G0_1_0_7_0_0 - 0.223492063492063*G0_1_0_7_0_1 + 0.406349206349205*G0_1_0_8_0_0 - 0.223492063492063*G0_1_0_8_0_1 + 0.121904761904767*G0_1_0_9_0_0 + 1.09714285714286*G0_1_0_9_0_1 + 0.480846560846561*G0_1_0_10_1_0 + 0.480846560846561*G0_1_0_10_1_1 - 0.0135449735449735*G0_1_0_11_1_0 - 0.33862433862434*G0_1_0_12_1_1 - 0.0609523809523814*G0_1_0_13_1_0 + 0.223492063492062*G0_1_0_13_1_1 - 0.914285714285716*G0_1_0_14_1_0 - 0.873650793650793*G0_1_0_14_1_1 - 0.0609523809523856*G0_1_0_15_1_0 - 0.711111111111115*G0_1_0_15_1_1 + 0.914285714285716*G0_1_0_16_1_0 + 0.568888888888894*G0_1_0_16_1_1 - 0.873650793650791*G0_1_0_17_1_0 - 0.223492063492063*G0_1_0_17_1_1 + 0.406349206349205*G0_1_0_18_1_0 - 0.223492063492063*G0_1_0_18_1_1 + 0.121904761904767*G0_1_0_19_1_0 + 1.09714285714286*G0_1_0_19_1_1 - 0.846560846560841*G0_1_1_0_0_0 - 0.846560846560842*G0_1_1_0_0_1 - 0.16931216931217*G0_1_1_1_0_0 - 0.331851851851853*G0_1_1_2_0_1 + 0.467301587301585*G0_1_1_3_0_0 + 0.304761904761903*G0_1_1_3_0_1 - 2.09269841269841*G0_1_1_4_0_0 - 1.76761904761904*G0_1_1_4_0_1 - 0.467301587301587*G0_1_1_5_0_0 + 1.86920634920634*G0_1_1_5_0_1 + 2.09269841269841*G0_1_1_6_0_0 - 0.690793650793643*G0_1_1_6_0_1 - 0.0406349206349218*G0_1_1_7_0_0 - 2.37714285714285*G0_1_1_7_0_1 + 1.05650793650793*G0_1_1_8_0_0 - 0.304761904761903*G0_1_1_8_0_1 + 4.14476190476189*G0_1_1_9_0_1 - 0.846560846560841*G0_1_1_10_1_0 - 0.846560846560842*G0_1_1_10_1_1 - 0.16931216931217*G0_1_1_11_1_0 - 0.331851851851853*G0_1_1_12_1_1 + 0.467301587301585*G0_1_1_13_1_0 + 0.304761904761903*G0_1_1_13_1_1 - 2.09269841269841*G0_1_1_14_1_0 - 1.76761904761904*G0_1_1_14_1_1 - 0.467301587301587*G0_1_1_15_1_0 + 1.86920634920634*G0_1_1_15_1_1 + 2.09269841269841*G0_1_1_16_1_0 - 0.690793650793643*G0_1_1_16_1_1 - 0.0406349206349218*G0_1_1_17_1_0 - 2.37714285714285*G0_1_1_17_1_1 + 1.05650793650793*G0_1_1_18_1_0 - 0.304761904761903*G0_1_1_18_1_1 + 4.14476190476189*G0_1_1_19_1_1;
    A[672] = 0.0;
    A[699] = 0.0;
    A[258] = 0.0;
    A[345] = 0.0;
    A[289] = 0.0;
    A[368] = A[252] + 0.121904761904763*G0_0_1_0_0_0 + 0.121904761904763*G0_0_1_0_0_1 - 0.1015873015873*G0_0_1_1_0_0 + 0.406349206349203*G0_0_1_2_0_1 + 0.0812698412698405*G0_0_1_3_0_0 + 0.101587301587302*G0_0_1_3_0_1 + 0.507936507936505*G0_0_1_4_0_0 - 0.0203174603174596*G0_0_1_4_0_1 + 0.893968253968247*G0_0_1_5_0_0 + 0.467301587301579*G0_0_1_5_0_1 - 0.507936507936505*G0_0_1_6_0_0 - 0.995555555555545*G0_0_1_6_0_1 - 0.650158730158728*G0_0_1_7_0_0 - 0.22349206349206*G0_0_1_7_0_1 + 0.629841269841265*G0_0_1_8_0_0 - 0.101587301587302*G0_0_1_8_0_1 - 0.975238095238087*G0_0_1_9_0_0 + 0.243809523809521*G0_0_1_9_0_1 + 0.121904761904763*G0_0_1_10_1_0 + 0.121904761904763*G0_0_1_10_1_1 - 0.1015873015873*G0_0_1_11_1_0 + 0.406349206349203*G0_0_1_12_1_1 + 0.0812698412698405*G0_0_1_13_1_0 + 0.101587301587302*G0_0_1_13_1_1 + 0.507936507936505*G0_0_1_14_1_0 - 0.0203174603174596*G0_0_1_14_1_1 + 0.893968253968247*G0_0_1_15_1_0 + 0.467301587301579*G0_0_1_15_1_1 - 0.507936507936505*G0_0_1_16_1_0 - 0.995555555555545*G0_0_1_16_1_1 - 0.650158730158728*G0_0_1_17_1_0 - 0.22349206349206*G0_0_1_17_1_1 + 0.629841269841265*G0_0_1_18_1_0 - 0.101587301587302*G0_0_1_18_1_1 - 0.975238095238087*G0_0_1_19_1_0 + 0.243809523809521*G0_0_1_19_1_1 - 0.121904761904763*G0_1_0_0_0_0 - 0.121904761904763*G0_1_0_0_0_1 + 0.1015873015873*G0_1_0_1_0_0 - 0.406349206349203*G0_1_0_2_0_1 - 0.0812698412698404*G0_1_0_3_0_0 - 0.101587301587302*G0_1_0_3_0_1 - 0.507936507936505*G0_1_0_4_0_0 + 0.0203174603174595*G0_1_0_4_0_1 - 0.893968253968247*G0_1_0_5_0_0 - 0.467301587301579*G0_1_0_5_0_1 + 0.507936507936505*G0_1_0_6_0_0 + 0.995555555555545*G0_1_0_6_0_1 + 0.650158730158728*G0_1_0_7_0_0 + 0.22349206349206*G0_1_0_7_0_1 - 0.629841269841265*G0_1_0_8_0_0 + 0.101587301587302*G0_1_0_8_0_1 + 0.975238095238088*G0_1_0_9_0_0 - 0.24380952380952*G0_1_0_9_0_1 - 0.121904761904763*G0_1_0_10_1_0 - 0.121904761904763*G0_1_0_10_1_1 + 0.1015873015873*G0_1_0_11_1_0 - 0.406349206349203*G0_1_0_12_1_1 - 0.0812698412698404*G0_1_0_13_1_0 - 0.101587301587302*G0_1_0_13_1_1 - 0.507936507936505*G0_1_0_14_1_0 + 0.0203174603174595*G0_1_0_14_1_1 - 0.893968253968247*G0_1_0_15_1_0 - 0.467301587301579*G0_1_0_15_1_1 + 0.507936507936505*G0_1_0_16_1_0 + 0.995555555555545*G0_1_0_16_1_1 + 0.650158730158728*G0_1_0_17_1_0 + 0.22349206349206*G0_1_0_17_1_1 - 0.629841269841265*G0_1_0_18_1_0 + 0.101587301587302*G0_1_0_18_1_1 + 0.975238095238088*G0_1_0_19_1_0 - 0.24380952380952*G0_1_0_19_1_1;
    A[51] = 0.0;
    A[766] = -0.540423280423279*G0_0_0_0_0_0 - 0.540423280423278*G0_0_0_0_0_1 + 1.27883597883597*G0_0_0_1_0_0 + 0.122962962962963*G0_0_0_2_0_1 + 0.433333333333331*G0_0_0_3_0_0 + 2.1579365079365*G0_0_0_3_0_1 - 0.106666666666666*G0_0_0_4_0_0 - 0.675396825396823*G0_0_0_4_0_1 - 0.256190476190475*G0_0_0_5_0_0 + 0.336349206349205*G0_0_0_5_0_1 + 0.106666666666667*G0_0_0_6_0_0 + 0.08111111111111*G0_0_0_6_0_1 + 1.53936507936507*G0_0_0_7_0_0 + 0.946825396825392*G0_0_0_7_0_1 - 2.27777777777777*G0_0_0_8_0_0 - 2.1579365079365*G0_0_0_8_0_1 - 0.177142857142856*G0_0_0_9_0_0 - 0.271428571428568*G0_0_0_9_0_1 - 0.540423280423279*G0_0_0_10_1_0 - 0.540423280423278*G0_0_0_10_1_1 + 1.27883597883597*G0_0_0_11_1_0 + 0.122962962962963*G0_0_0_12_1_1 + 0.433333333333331*G0_0_0_13_1_0 + 2.1579365079365*G0_0_0_13_1_1 - 0.106666666666666*G0_0_0_14_1_0 - 0.675396825396823*G0_0_0_14_1_1 - 0.256190476190475*G0_0_0_15_1_0 + 0.336349206349205*G0_0_0_15_1_1 + 0.106666666666667*G0_0_0_16_1_0 + 0.08111111111111*G0_0_0_16_1_1 + 1.53936507936507*G0_0_0_17_1_0 + 0.946825396825392*G0_0_0_17_1_1 - 2.27777777777777*G0_0_0_18_1_0 - 2.1579365079365*G0_0_0_18_1_1 - 0.177142857142856*G0_0_0_19_1_0 - 0.271428571428568*G0_0_0_19_1_1 - 0.276190476190475*G0_1_0_0_0_0 - 0.276190476190474*G0_1_0_0_0_1 + 1.47777777777777*G0_1_0_1_0_0 + 0.174603174603173*G0_1_0_2_0_1 + 0.586507936507933*G0_1_0_3_0_0 + 2.70476190476189*G0_1_0_3_0_1 - 0.103968253968254*G0_1_0_4_0_0 - 0.919047619047614*G0_1_0_4_0_1 + 0.0849206349206333*G0_1_0_5_0_0 + 0.0507936507936502*G0_1_0_5_0_1 + 0.103968253968254*G0_1_0_6_0_0 + 0.0507936507936506*G0_1_0_6_0_1 + 1.15158730158729*G0_1_0_7_0_0 + 1.18571428571428*G0_1_0_7_0_1 - 2.35317460317459*G0_1_0_8_0_0 - 2.70476190476189*G0_1_0_8_0_1 - 0.671428571428566*G0_1_0_9_0_0 - 0.266666666666662*G0_1_0_9_0_1 - 0.276190476190475*G0_1_0_10_1_0 - 0.276190476190474*G0_1_0_10_1_1 + 1.47777777777777*G0_1_0_11_1_0 + 0.174603174603173*G0_1_0_12_1_1 + 0.586507936507933*G0_1_0_13_1_0 + 2.70476190476189*G0_1_0_13_1_1 - 0.103968253968254*G0_1_0_14_1_0 - 0.919047619047614*G0_1_0_14_1_1 + 0.0849206349206333*G0_1_0_15_1_0 + 0.0507936507936502*G0_1_0_15_1_1 + 0.103968253968254*G0_1_0_16_1_0 + 0.0507936507936506*G0_1_0_16_1_1 + 1.15158730158729*G0_1_0_17_1_0 + 1.18571428571428*G0_1_0_17_1_1 - 2.35317460317459*G0_1_0_18_1_0 - 2.70476190476189*G0_1_0_18_1_1 - 0.671428571428566*G0_1_0_19_1_0 - 0.266666666666662*G0_1_0_19_1_1;
    A[765] = A[766] - 0.738412698412697*G0_0_0_0_0_0 - 0.738412698412697*G0_0_0_0_0_1 - 0.738412698412696*G0_0_0_1_0_0 - 0.177142857142857*G0_0_0_3_0_0 - 1.56539682539682*G0_0_0_3_0_1 + 0.649841269841266*G0_0_0_4_0_1 - 0.177142857142857*G0_0_0_5_0_0 + 1.38825396825396*G0_0_0_5_0_1 - 0.649841269841268*G0_0_0_6_0_1 + 0.738412698412698*G0_0_0_7_0_0 - 0.826984126984124*G0_0_0_7_0_1 + 0.738412698412696*G0_0_0_8_0_0 + 1.56539682539682*G0_0_0_8_0_1 + 0.354285714285714*G0_0_0_9_0_0 + 0.177142857142858*G0_0_0_9_0_1 - 0.738412698412697*G0_0_0_10_1_0 - 0.738412698412697*G0_0_0_10_1_1 - 0.738412698412696*G0_0_0_11_1_0 - 0.177142857142857*G0_0_0_13_1_0 - 1.56539682539682*G0_0_0_13_1_1 + 0.649841269841266*G0_0_0_14_1_1 - 0.177142857142857*G0_0_0_15_1_0 + 1.38825396825396*G0_0_0_15_1_1 - 0.649841269841268*G0_0_0_16_1_1 + 0.738412698412698*G0_0_0_17_1_0 - 0.826984126984124*G0_0_0_17_1_1 + 0.738412698412696*G0_0_0_18_1_0 + 1.56539682539682*G0_0_0_18_1_1 + 0.354285714285714*G0_0_0_19_1_0 + 0.177142857142858*G0_0_0_19_1_1 - 1.27883597883598*G0_0_1_0_0_0 - 1.27883597883598*G0_0_1_0_0_1 + 0.540423280423277*G0_0_1_1_0_0 + 0.122962962962963*G0_0_1_2_0_1 + 0.256190476190473*G0_0_1_3_0_0 + 0.592539682539679*G0_0_1_3_0_1 - 0.106666666666667*G0_0_1_4_0_0 - 0.0255555555555569*G0_0_1_4_0_1 - 0.433333333333333*G0_0_1_5_0_0 + 1.72460317460317*G0_0_1_5_0_1 + 0.106666666666667*G0_0_1_6_0_0 - 0.568730158730158*G0_0_1_6_0_1 + 2.27777777777777*G0_0_1_7_0_0 + 0.119841269841267*G0_0_1_7_0_1 - 1.53936507936507*G0_0_1_8_0_0 - 0.592539682539679*G0_0_1_8_0_1 + 0.177142857142859*G0_0_1_9_0_0 - 0.0942857142857092*G0_0_1_9_0_1 - 1.27883597883598*G0_0_1_10_1_0 - 1.27883597883598*G0_0_1_10_1_1 + 0.540423280423277*G0_0_1_11_1_0 + 0.122962962962963*G0_0_1_12_1_1 + 0.256190476190473*G0_0_1_13_1_0 + 0.592539682539679*G0_0_1_13_1_1 - 0.106666666666667*G0_0_1_14_1_0 - 0.0255555555555569*G0_0_1_14_1_1 - 0.433333333333333*G0_0_1_15_1_0 + 1.72460317460317*G0_0_1_15_1_1 + 0.106666666666667*G0_0_1_16_1_0 - 0.568730158730158*G0_0_1_16_1_1 + 2.27777777777777*G0_0_1_17_1_0 + 0.119841269841267*G0_0_1_17_1_1 - 1.53936507936507*G0_0_1_18_1_0 - 0.592539682539679*G0_0_1_18_1_1 + 0.177142857142859*G0_0_1_19_1_0 - 0.0942857142857092*G0_0_1_19_1_1 + 0.475132275132272*G0_1_0_0_0_0 + 0.475132275132271*G0_1_0_0_0_1 - 1.21354497354497*G0_1_0_1_0_0 - 0.226243386243385*G0_1_0_2_0_1 - 0.245396825396824*G0_1_0_3_0_0 - 2.07809523809523*G0_1_0_3_0_1 + 0.101269841269841*G0_1_0_4_0_0 + 0.946666666666661*G0_1_0_4_0_1 + 0.0682539682539684*G0_1_0_5_0_0 - 0.44444444444444*G0_1_0_5_0_1 - 0.101269841269842*G0_1_0_6_0_0 + 0.195555555555554*G0_1_0_6_0_1 - 1.22698412698412*G0_1_0_7_0_0 - 0.714285714285709*G0_1_0_7_0_1 + 1.96539682539681*G0_1_0_8_0_0 + 2.07809523809523*G0_1_0_8_0_1 + 0.177142857142856*G0_1_0_9_0_0 - 0.232380952380953*G0_1_0_9_0_1 + 0.475132275132272*G0_1_0_10_1_0 + 0.475132275132271*G0_1_0_10_1_1 - 1.21354497354497*G0_1_0_11_1_0 - 0.226243386243385*G0_1_0_12_1_1 - 0.245396825396824*G0_1_0_13_1_0 - 2.07809523809523*G0_1_0_13_1_1 + 0.101269841269841*G0_1_0_14_1_0 + 0.946666666666661*G0_1_0_14_1_1 + 0.0682539682539684*G0_1_0_15_1_0 - 0.44444444444444*G0_1_0_15_1_1 - 0.101269841269842*G0_1_0_16_1_0 + 0.195555555555554*G0_1_0_16_1_1 - 1.22698412698412*G0_1_0_17_1_0 - 0.714285714285709*G0_1_0_17_1_1 + 1.96539682539681*G0_1_0_18_1_0 + 2.07809523809523*G0_1_0_18_1_1 + 0.177142857142856*G0_1_0_19_1_0 - 0.232380952380953*G0_1_0_19_1_1 + 0.198941798941797*G0_1_1_0_0_0 + 0.198941798941797*G0_1_1_0_0_1 + 0.264232804232803*G0_1_1_1_0_0 - 0.0516402116402111*G0_1_1_2_0_1 + 0.341111111111108*G0_1_1_3_0_0 + 0.626666666666662*G0_1_1_3_0_1 - 0.00269841269841259*G0_1_1_4_0_0 + 0.0276190476190472*G0_1_1_4_0_1 + 0.153174603174602*G0_1_1_5_0_0 - 0.39365079365079*G0_1_1_5_0_1 + 0.0026984126984127*G0_1_1_6_0_0 + 0.246349206349204*G0_1_1_6_0_1 - 0.0753968253968237*G0_1_1_7_0_0 + 0.471428571428567*G0_1_1_7_0_1 - 0.387777777777776*G0_1_1_8_0_0 - 0.626666666666662*G0_1_1_8_0_1 - 0.49428571428571*G0_1_1_9_0_0 - 0.499047619047614*G0_1_1_9_0_1 + 0.198941798941797*G0_1_1_10_1_0 + 0.198941798941797*G0_1_1_10_1_1 + 0.264232804232803*G0_1_1_11_1_0 - 0.0516402116402111*G0_1_1_12_1_1 + 0.341111111111108*G0_1_1_13_1_0 + 0.626666666666662*G0_1_1_13_1_1 - 0.00269841269841259*G0_1_1_14_1_0 + 0.0276190476190472*G0_1_1_14_1_1 + 0.153174603174602*G0_1_1_15_1_0 - 0.39365079365079*G0_1_1_15_1_1 + 0.0026984126984127*G0_1_1_16_1_0 + 0.246349206349204*G0_1_1_16_1_1 - 0.0753968253968237*G0_1_1_17_1_0 + 0.471428571428567*G0_1_1_17_1_1 - 0.387777777777776*G0_1_1_18_1_0 - 0.626666666666662*G0_1_1_18_1_1 - 0.49428571428571*G0_1_1_19_1_0 - 0.499047619047614*G0_1_1_19_1_1;
    A[463] = 0.0;
    A[78] = 0.0;
    A[803] = A[716] + 0.020317460317459*G0_0_1_0_0_0 + 0.0203174603174589*G0_0_1_0_0_1 - 0.02031746031746*G0_0_1_1_0_0 - 0.0203174603174595*G0_0_1_2_0_1 - 0.132063492063492*G0_0_1_3_0_0 - 0.0711111111111104*G0_0_1_3_0_1 - 0.0711111111111103*G0_0_1_4_0_0 - 0.132063492063492*G0_0_1_4_0_1 - 0.172698412698412*G0_0_1_5_0_0 - 0.091428571428569*G0_0_1_5_0_1 + 0.0711111111111102*G0_0_1_6_0_0 + 0.0914285714285695*G0_0_1_6_0_1 - 0.0914285714285699*G0_0_1_7_0_0 - 0.172698412698413*G0_0_1_7_0_1 + 0.091428571428571*G0_0_1_8_0_0 + 0.0711111111111106*G0_0_1_8_0_1 + 0.304761904761904*G0_0_1_9_0_0 + 0.304761904761905*G0_0_1_9_0_1 + 0.020317460317459*G0_0_1_10_1_0 + 0.0203174603174589*G0_0_1_10_1_1 - 0.02031746031746*G0_0_1_11_1_0 - 0.0203174603174595*G0_0_1_12_1_1 - 0.132063492063492*G0_0_1_13_1_0 - 0.0711111111111104*G0_0_1_13_1_1 - 0.0711111111111103*G0_0_1_14_1_0 - 0.132063492063492*G0_0_1_14_1_1 - 0.172698412698412*G0_0_1_15_1_0 - 0.091428571428569*G0_0_1_15_1_1 + 0.0711111111111102*G0_0_1_16_1_0 + 0.0914285714285695*G0_0_1_16_1_1 - 0.0914285714285699*G0_0_1_17_1_0 - 0.172698412698413*G0_0_1_17_1_1 + 0.091428571428571*G0_0_1_18_1_0 + 0.0711111111111106*G0_0_1_18_1_1 + 0.304761904761904*G0_0_1_19_1_0 + 0.304761904761905*G0_0_1_19_1_1 - 0.020317460317459*G0_1_0_0_0_0 - 0.0203174603174589*G0_1_0_0_0_1 + 0.02031746031746*G0_1_0_1_0_0 + 0.0203174603174596*G0_1_0_2_0_1 + 0.132063492063492*G0_1_0_3_0_0 + 0.0711111111111105*G0_1_0_3_0_1 + 0.0711111111111103*G0_1_0_4_0_0 + 0.132063492063492*G0_1_0_4_0_1 + 0.172698412698413*G0_1_0_5_0_0 + 0.091428571428569*G0_1_0_5_0_1 - 0.0711111111111103*G0_1_0_6_0_0 - 0.0914285714285696*G0_1_0_6_0_1 + 0.0914285714285698*G0_1_0_7_0_0 + 0.172698412698413*G0_1_0_7_0_1 - 0.0914285714285709*G0_1_0_8_0_0 - 0.0711111111111105*G0_1_0_8_0_1 - 0.304761904761904*G0_1_0_9_0_0 - 0.304761904761905*G0_1_0_9_0_1 - 0.020317460317459*G0_1_0_10_1_0 - 0.0203174603174589*G0_1_0_10_1_1 + 0.02031746031746*G0_1_0_11_1_0 + 0.0203174603174596*G0_1_0_12_1_1 + 0.132063492063492*G0_1_0_13_1_0 + 0.0711111111111105*G0_1_0_13_1_1 + 0.0711111111111103*G0_1_0_14_1_0 + 0.132063492063492*G0_1_0_14_1_1 + 0.172698412698413*G0_1_0_15_1_0 + 0.091428571428569*G0_1_0_15_1_1 - 0.0711111111111103*G0_1_0_16_1_0 - 0.0914285714285696*G0_1_0_16_1_1 + 0.0914285714285698*G0_1_0_17_1_0 + 0.172698412698413*G0_1_0_17_1_1 - 0.0914285714285709*G0_1_0_18_1_0 - 0.0711111111111105*G0_1_0_18_1_1 - 0.304761904761904*G0_1_0_19_1_0 - 0.304761904761905*G0_1_0_19_1_1;
    A[101] = A[245] - 0.582433862433862*G0_0_0_0_0_0 - 0.582433862433863*G0_0_0_0_0_1 - 0.372486772486764*G0_0_0_1_0_0 + 6.77925925925922*G0_0_0_2_0_1 - 5.79047619047615*G0_0_0_3_0_0 - 2.99682539682537*G0_0_0_3_0_1 + 13.0438095238095*G0_0_0_4_0_0 + 3.09841269841268*G0_0_0_4_0_1 + 3.83999999999998*G0_0_0_5_0_0 + 3.72825396825395*G0_0_0_5_0_1 - 13.0438095238095*G0_0_0_6_0_0 - 9.92507936507931*G0_0_0_6_0_1 - 1.68634920634919*G0_0_0_7_0_0 - 1.57460317460316*G0_0_0_7_0_1 + 2.64126984126981*G0_0_0_8_0_0 + 2.99682539682537*G0_0_0_8_0_1 + 1.95047619047617*G0_0_0_9_0_0 - 1.52380952380953*G0_0_0_9_0_1 - 0.582433862433862*G0_0_0_10_1_0 - 0.582433862433863*G0_0_0_10_1_1 - 0.372486772486764*G0_0_0_11_1_0 + 6.77925925925922*G0_0_0_12_1_1 - 5.79047619047615*G0_0_0_13_1_0 - 2.99682539682537*G0_0_0_13_1_1 + 13.0438095238095*G0_0_0_14_1_0 + 3.09841269841268*G0_0_0_14_1_1 + 3.83999999999998*G0_0_0_15_1_0 + 3.72825396825395*G0_0_0_15_1_1 - 13.0438095238095*G0_0_0_16_1_0 - 9.92507936507931*G0_0_0_16_1_1 - 1.68634920634919*G0_0_0_17_1_0 - 1.57460317460316*G0_0_0_17_1_1 + 2.64126984126981*G0_0_0_18_1_0 + 2.99682539682537*G0_0_0_18_1_1 + 1.95047619047617*G0_0_0_19_1_0 - 1.52380952380953*G0_0_0_19_1_1 - 2.33650793650792*G0_0_1_1_0_0 + 2.33650793650793*G0_0_1_2_0_1 - 2.94603174603173*G0_0_1_3_0_0 - 5.28253968253964*G0_0_1_3_0_1 + 5.28253968253965*G0_0_1_4_0_0 + 2.94603174603172*G0_0_1_4_0_1 + 1.72698412698412*G0_0_1_5_0_0 + 1.72698412698412*G0_0_1_5_0_1 - 5.28253968253966*G0_0_1_6_0_0 - 4.06349206349204*G0_0_1_6_0_1 - 1.72698412698411*G0_0_1_7_0_0 - 1.72698412698411*G0_0_1_7_0_1 + 4.06349206349203*G0_0_1_8_0_0 + 5.28253968253965*G0_0_1_8_0_1 + 1.21904761904761*G0_0_1_9_0_0 - 1.21904761904761*G0_0_1_9_0_1 - 2.33650793650792*G0_0_1_11_1_0 + 2.33650793650793*G0_0_1_12_1_1 - 2.94603174603173*G0_0_1_13_1_0 - 5.28253968253964*G0_0_1_13_1_1 + 5.28253968253965*G0_0_1_14_1_0 + 2.94603174603172*G0_0_1_14_1_1 + 1.72698412698412*G0_0_1_15_1_0 + 1.72698412698412*G0_0_1_15_1_1 - 5.28253968253966*G0_0_1_16_1_0 - 4.06349206349204*G0_0_1_16_1_1 - 1.72698412698411*G0_0_1_17_1_0 - 1.72698412698411*G0_0_1_17_1_1 + 4.06349206349203*G0_0_1_18_1_0 + 5.28253968253965*G0_0_1_18_1_1 + 1.21904761904761*G0_0_1_19_1_0 - 1.21904761904761*G0_0_1_19_1_1 - 3.86031746031744*G0_1_0_1_0_0 + 3.86031746031744*G0_1_0_2_0_1 - 4.01269841269839*G0_1_0_3_0_0 - 7.87301587301583*G0_1_0_3_0_1 + 7.87301587301583*G0_1_0_4_0_0 + 4.0126984126984*G0_1_0_4_0_1 + 3.70793650793649*G0_1_0_5_0_0 + 3.70793650793649*G0_1_0_5_0_1 - 7.87301587301584*G0_1_0_6_0_0 - 7.56825396825393*G0_1_0_6_0_1 - 3.70793650793649*G0_1_0_7_0_0 - 3.70793650793648*G0_1_0_7_0_1 + 7.56825396825393*G0_1_0_8_0_0 + 7.87301587301583*G0_1_0_8_0_1 + 0.304761904761894*G0_1_0_9_0_0 - 0.304761904761913*G0_1_0_9_0_1 - 3.86031746031744*G0_1_0_11_1_0 + 3.86031746031744*G0_1_0_12_1_1 - 4.01269841269839*G0_1_0_13_1_0 - 7.87301587301583*G0_1_0_13_1_1 + 7.87301587301583*G0_1_0_14_1_0 + 4.0126984126984*G0_1_0_14_1_1 + 3.70793650793649*G0_1_0_15_1_0 + 3.70793650793649*G0_1_0_15_1_1 - 7.87301587301584*G0_1_0_16_1_0 - 7.56825396825393*G0_1_0_16_1_1 - 3.70793650793649*G0_1_0_17_1_0 - 3.70793650793648*G0_1_0_17_1_1 + 7.56825396825393*G0_1_0_18_1_0 + 7.87301587301583*G0_1_0_18_1_1 + 0.304761904761894*G0_1_0_19_1_0 - 0.304761904761913*G0_1_0_19_1_1 + 0.582433862433861*G0_1_1_0_0_0 + 0.582433862433858*G0_1_1_0_0_1 - 6.77925925925922*G0_1_1_1_0_0 + 0.372486772486771*G0_1_1_2_0_1 - 3.09841269841268*G0_1_1_3_0_0 - 13.0438095238095*G0_1_1_3_0_1 + 2.99682539682538*G0_1_1_4_0_0 + 5.79047619047616*G0_1_1_4_0_1 + 1.57460317460317*G0_1_1_5_0_0 + 1.6863492063492*G0_1_1_5_0_1 - 2.99682539682538*G0_1_1_6_0_0 - 2.64126984126983*G0_1_1_6_0_1 - 3.72825396825395*G0_1_1_7_0_0 - 3.83999999999998*G0_1_1_7_0_1 + 9.92507936507931*G0_1_1_8_0_0 + 13.0438095238095*G0_1_1_8_0_1 + 1.52380952380951*G0_1_1_9_0_0 - 1.95047619047619*G0_1_1_9_0_1 + 0.582433862433861*G0_1_1_10_1_0 + 0.582433862433858*G0_1_1_10_1_1 - 6.77925925925922*G0_1_1_11_1_0 + 0.372486772486771*G0_1_1_12_1_1 - 3.09841269841268*G0_1_1_13_1_0 - 13.0438095238095*G0_1_1_13_1_1 + 2.99682539682538*G0_1_1_14_1_0 + 5.79047619047616*G0_1_1_14_1_1 + 1.57460317460317*G0_1_1_15_1_0 + 1.6863492063492*G0_1_1_15_1_1 - 2.99682539682538*G0_1_1_16_1_0 - 2.64126984126983*G0_1_1_16_1_1 - 3.72825396825395*G0_1_1_17_1_0 - 3.83999999999998*G0_1_1_17_1_1 + 9.92507936507931*G0_1_1_18_1_0 + 13.0438095238095*G0_1_1_18_1_1 + 1.52380952380951*G0_1_1_19_1_0 - 1.95047619047619*G0_1_1_19_1_1;
    A[816] = 0.0;
    A[45] = 0.0;
    A[841] = 0.0;
    A[72] = -0.111746031746031*G0_1_0_0_0_0 - 0.111746031746031*G0_1_0_0_0_1 + 0.0101587301587298*G0_1_0_1_0_0 + 0.038095238095238*G0_1_0_3_0_0 - 0.0215873015873018*G0_1_0_3_0_1 + 0.0698412698412714*G0_1_0_4_0_1 + 0.0380952380952402*G0_1_0_5_0_0 + 0.181587301587303*G0_1_0_5_0_1 - 0.0698412698412731*G0_1_0_6_0_1 + 0.233650793650792*G0_1_0_7_0_0 + 0.0901587301587295*G0_1_0_7_0_1 - 0.13206349206349*G0_1_0_8_0_0 + 0.0215873015873019*G0_1_0_8_0_1 - 0.0761904761904782*G0_1_0_9_0_0 - 0.160000000000001*G0_1_0_9_0_1 - 0.111746031746031*G0_1_0_10_1_0 - 0.111746031746031*G0_1_0_10_1_1 + 0.0101587301587298*G0_1_0_11_1_0 + 0.038095238095238*G0_1_0_13_1_0 - 0.0215873015873018*G0_1_0_13_1_1 + 0.0698412698412714*G0_1_0_14_1_1 + 0.0380952380952402*G0_1_0_15_1_0 + 0.181587301587303*G0_1_0_15_1_1 - 0.0698412698412731*G0_1_0_16_1_1 + 0.233650793650792*G0_1_0_17_1_0 + 0.0901587301587295*G0_1_0_17_1_1 - 0.13206349206349*G0_1_0_18_1_0 + 0.0215873015873019*G0_1_0_18_1_1 - 0.0761904761904782*G0_1_0_19_1_0 - 0.160000000000001*G0_1_0_19_1_1 + 0.1405291005291*G0_1_1_0_0_0 + 0.1405291005291*G0_1_1_0_0_1 + 0.0982010582010579*G0_1_1_1_0_0 + 0.16931216931217*G0_1_1_2_0_1 - 0.219682539682538*G0_1_1_3_0_0 - 0.0457142857142854*G0_1_1_3_0_1 + 0.603174603174603*G0_1_1_4_0_0 + 0.358095238095239*G0_1_1_4_0_1 + 0.288253968253968*G0_1_1_5_0_0 - 0.269206349206347*G0_1_1_5_0_1 - 0.603174603174603*G0_1_1_6_0_0 - 0.0406349206349219*G0_1_1_6_0_1 + 0.166349206349206*G0_1_1_7_0_0 + 0.723809523809521*G0_1_1_7_0_1 - 0.405079365079364*G0_1_1_8_0_0 + 0.0457142857142854*G0_1_1_8_0_1 - 0.0685714285714295*G0_1_1_9_0_0 - 1.08190476190476*G0_1_1_9_0_1 + 0.1405291005291*G0_1_1_10_1_0 + 0.1405291005291*G0_1_1_10_1_1 + 0.0982010582010579*G0_1_1_11_1_0 + 0.16931216931217*G0_1_1_12_1_1 - 0.219682539682538*G0_1_1_13_1_0 - 0.0457142857142854*G0_1_1_13_1_1 + 0.603174603174603*G0_1_1_14_1_0 + 0.358095238095239*G0_1_1_14_1_1 + 0.288253968253968*G0_1_1_15_1_0 - 0.269206349206347*G0_1_1_15_1_1 - 0.603174603174603*G0_1_1_16_1_0 - 0.0406349206349219*G0_1_1_16_1_1 + 0.166349206349206*G0_1_1_17_1_0 + 0.723809523809521*G0_1_1_17_1_1 - 0.405079365079364*G0_1_1_18_1_0 + 0.0457142857142854*G0_1_1_18_1_1 - 0.0685714285714295*G0_1_1_19_1_0 - 1.08190476190476*G0_1_1_19_1_1;
    A[14] = A[72] - 0.169312169312171*G0_0_0_0_0_0 - 0.169312169312171*G0_0_0_0_0_1 + 0.0880423280423276*G0_0_0_1_0_0 - 0.252275132275131*G0_0_0_2_0_1 - 0.297142857142855*G0_0_0_3_0_0 - 0.0241269841269839*G0_0_0_3_0_1 - 0.700952380952378*G0_0_0_4_0_0 - 0.63365079365079*G0_0_0_4_0_1 - 0.632380952380949*G0_0_0_5_0_0 - 0.0292063492063452*G0_0_0_5_0_1 + 0.700952380952378*G0_0_0_6_0_0 + 0.450793650793647*G0_0_0_6_0_1 + 0.314920634920637*G0_0_0_7_0_0 - 0.288253968253967*G0_0_0_7_0_1 - 0.233650793650793*G0_0_0_8_0_0 + 0.0241269841269839*G0_0_0_8_0_1 + 0.929523809523804*G0_0_0_9_0_0 + 0.921904761904757*G0_0_0_9_0_1 - 0.169312169312171*G0_0_0_10_1_0 - 0.169312169312171*G0_0_0_10_1_1 + 0.0880423280423276*G0_0_0_11_1_0 - 0.252275132275131*G0_0_0_12_1_1 - 0.297142857142855*G0_0_0_13_1_0 - 0.0241269841269839*G0_0_0_13_1_1 - 0.700952380952378*G0_0_0_14_1_0 - 0.63365079365079*G0_0_0_14_1_1 - 0.632380952380949*G0_0_0_15_1_0 - 0.0292063492063452*G0_0_0_15_1_1 + 0.700952380952378*G0_0_0_16_1_0 + 0.450793650793647*G0_0_0_16_1_1 + 0.314920634920637*G0_0_0_17_1_0 - 0.288253968253967*G0_0_0_17_1_1 - 0.233650793650793*G0_0_0_18_1_0 + 0.0241269841269839*G0_0_0_18_1_1 + 0.929523809523804*G0_0_0_19_1_0 + 0.921904761904757*G0_0_0_19_1_1 - 0.169312169312171*G0_0_1_0_0_0 - 0.169312169312171*G0_0_1_0_0_1 + 0.0982010582010576*G0_0_1_1_0_0 - 0.140529100529099*G0_0_1_2_0_1 - 0.450793650793647*G0_0_1_3_0_0 - 0.0457142857142857*G0_0_1_3_0_1 - 0.557460317460315*G0_0_1_4_0_0 - 0.723809523809519*G0_0_1_4_0_1 - 0.562539682539679*G0_0_1_5_0_0 + 0.0406349206349257*G0_0_1_5_0_1 + 0.557460317460314*G0_0_1_6_0_0 + 0.269206349206345*G0_0_1_6_0_1 + 0.245079365079368*G0_0_1_7_0_0 - 0.358095238095237*G0_0_1_7_0_1 - 0.173968253968254*G0_0_1_8_0_0 + 0.0457142857142857*G0_0_1_8_0_1 + 1.01333333333333*G0_0_1_9_0_0 + 1.08190476190476*G0_0_1_9_0_1 - 0.169312169312171*G0_0_1_10_1_0 - 0.169312169312171*G0_0_1_10_1_1 + 0.0982010582010576*G0_0_1_11_1_0 - 0.140529100529099*G0_0_1_12_1_1 - 0.450793650793647*G0_0_1_13_1_0 - 0.0457142857142857*G0_0_1_13_1_1 - 0.557460317460315*G0_0_1_14_1_0 - 0.723809523809519*G0_0_1_14_1_1 - 0.562539682539679*G0_0_1_15_1_0 + 0.0406349206349257*G0_0_1_15_1_1 + 0.557460317460314*G0_0_1_16_1_0 + 0.269206349206345*G0_0_1_16_1_1 + 0.245079365079368*G0_0_1_17_1_0 - 0.358095238095237*G0_0_1_17_1_1 - 0.173968253968254*G0_0_1_18_1_0 + 0.0457142857142857*G0_0_1_18_1_1 + 1.01333333333333*G0_0_1_19_1_0 + 1.08190476190476*G0_0_1_19_1_1 - 0.0575661375661397*G0_1_0_0_0_0 - 0.0575661375661396*G0_1_0_0_0_1 + 0.0778835978835978*G0_1_0_1_0_0 - 0.252275132275133*G0_1_0_2_0_1 - 0.335238095238092*G0_1_0_3_0_0 - 0.00253968253968187*G0_1_0_3_0_1 - 0.700952380952382*G0_1_0_4_0_0 - 0.703492063492061*G0_1_0_4_0_1 - 0.67047619047619*G0_1_0_5_0_0 - 0.210793650793648*G0_1_0_5_0_1 + 0.700952380952382*G0_1_0_6_0_0 + 0.52063492063492*G0_1_0_6_0_1 + 0.0812698412698454*G0_1_0_7_0_0 - 0.378412698412696*G0_1_0_7_0_1 - 0.101587301587303*G0_1_0_8_0_0 + 0.0025396825396818*G0_1_0_8_0_1 + 1.00571428571428*G0_1_0_9_0_0 + 1.08190476190476*G0_1_0_9_0_1 - 0.0575661375661397*G0_1_0_10_1_0 - 0.0575661375661396*G0_1_0_10_1_1 + 0.0778835978835978*G0_1_0_11_1_0 - 0.252275132275133*G0_1_0_12_1_1 - 0.335238095238092*G0_1_0_13_1_0 - 0.00253968253968187*G0_1_0_13_1_1 - 0.700952380952382*G0_1_0_14_1_0 - 0.703492063492061*G0_1_0_14_1_1 - 0.67047619047619*G0_1_0_15_1_0 - 0.210793650793648*G0_1_0_15_1_1 + 0.700952380952382*G0_1_0_16_1_0 + 0.52063492063492*G0_1_0_16_1_1 + 0.0812698412698454*G0_1_0_17_1_0 - 0.378412698412696*G0_1_0_17_1_1 - 0.101587301587303*G0_1_0_18_1_0 + 0.0025396825396818*G0_1_0_18_1_1 + 1.00571428571428*G0_1_0_19_1_0 + 1.08190476190476*G0_1_0_19_1_1 - 0.309841269841271*G0_1_1_0_0_0 - 0.309841269841271*G0_1_1_0_0_1 - 0.30984126984127*G0_1_1_2_0_1 - 0.231111111111108*G0_1_1_3_0_0 - 1.16063492063492*G0_1_1_4_0_0 - 1.08190476190476*G0_1_1_4_0_1 - 0.850793650793648*G0_1_1_5_0_0 + 0.309841269841273*G0_1_1_5_0_1 + 1.16063492063492*G0_1_1_6_0_0 + 0.309841269841268*G0_1_1_6_0_1 + 0.0787301587301624*G0_1_1_7_0_0 - 1.08190476190476*G0_1_1_7_0_1 + 0.23111111111111*G0_1_1_8_0_0 + 1.08190476190476*G0_1_1_9_0_0 + 2.16380952380952*G0_1_1_9_0_1 - 0.309841269841271*G0_1_1_10_1_0 - 0.309841269841271*G0_1_1_10_1_1 - 0.30984126984127*G0_1_1_12_1_1 - 0.231111111111108*G0_1_1_13_1_0 - 1.16063492063492*G0_1_1_14_1_0 - 1.08190476190476*G0_1_1_14_1_1 - 0.850793650793648*G0_1_1_15_1_0 + 0.309841269841273*G0_1_1_15_1_1 + 1.16063492063492*G0_1_1_16_1_0 + 0.309841269841268*G0_1_1_16_1_1 + 0.0787301587301624*G0_1_1_17_1_0 - 1.08190476190476*G0_1_1_17_1_1 + 0.23111111111111*G0_1_1_18_1_0 + 1.08190476190476*G0_1_1_19_1_0 + 2.16380952380952*G0_1_1_19_1_1;
    A[874] = 0.0;
    A[107] = 0.0;
    A[487] = 0.0;
    A[194] = A[252] - 1.01587301587301*G0_0_0_0_0_0 - 1.01587301587301*G0_0_0_0_0_1 - 0.243809523809521*G0_0_0_1_0_0 + 1.42222222222223*G0_0_0_2_0_1 + 1.46285714285713*G0_0_0_3_0_0 - 0.0406349206349206*G0_0_0_3_0_1 + 3.04761904761905*G0_0_0_4_0_0 + 2.88507936507936*G0_0_0_4_0_1 + 2.68190476190475*G0_0_0_5_0_0 + 3.08825396825396*G0_0_0_5_0_1 - 3.04761904761905*G0_0_0_6_0_0 - 3.49460317460317*G0_0_0_6_0_1 + 1.17841269841269*G0_0_0_7_0_0 + 0.772063492063487*G0_0_0_7_0_1 + 0.0812698412698417*G0_0_0_8_0_0 + 0.0406349206349207*G0_0_0_8_0_1 - 4.14476190476188*G0_0_0_9_0_0 - 3.65714285714284*G0_0_0_9_0_1 - 1.01587301587301*G0_0_0_10_1_0 - 1.01587301587301*G0_0_0_10_1_1 - 0.243809523809521*G0_0_0_11_1_0 + 1.42222222222223*G0_0_0_12_1_1 + 1.46285714285713*G0_0_0_13_1_0 - 0.0406349206349206*G0_0_0_13_1_1 + 3.04761904761905*G0_0_0_14_1_0 + 2.88507936507936*G0_0_0_14_1_1 + 2.68190476190475*G0_0_0_15_1_0 + 3.08825396825396*G0_0_0_15_1_1 - 3.04761904761905*G0_0_0_16_1_0 - 3.49460317460317*G0_0_0_16_1_1 + 1.17841269841269*G0_0_0_17_1_0 + 0.772063492063487*G0_0_0_17_1_1 + 0.0812698412698417*G0_0_0_18_1_0 + 0.0406349206349207*G0_0_0_18_1_1 - 4.14476190476188*G0_0_0_19_1_0 - 3.65714285714284*G0_0_0_19_1_1 - 0.772063492063487*G0_0_1_0_0_0 - 0.772063492063488*G0_0_1_0_0_1 - 0.345396825396824*G0_0_1_1_0_0 + 1.95047619047618*G0_0_1_2_0_1 + 1.60507936507936*G0_0_1_3_0_0 + 0.0609523809523792*G0_0_1_3_0_1 + 3.98222222222221*G0_0_1_4_0_0 + 3.23047619047618*G0_0_1_4_0_1 + 3.8806349206349*G0_0_1_5_0_0 + 3.43365079365077*G0_0_1_5_0_1 - 3.98222222222221*G0_0_1_6_0_0 - 4.61206349206347*G0_0_1_6_0_1 + 0.467301587301586*G0_0_1_7_0_0 + 0.914285714285714*G0_0_1_7_0_1 + 0.650158730158724*G0_0_1_8_0_0 - 0.0609523809523791*G0_0_1_8_0_1 - 5.48571428571426*G0_0_1_9_0_0 - 4.14476190476189*G0_0_1_9_0_1 - 0.772063492063487*G0_0_1_10_1_0 - 0.772063492063488*G0_0_1_10_1_1 - 0.345396825396824*G0_0_1_11_1_0 + 1.95047619047618*G0_0_1_12_1_1 + 1.60507936507936*G0_0_1_13_1_0 + 0.0609523809523792*G0_0_1_13_1_1 + 3.98222222222221*G0_0_1_14_1_0 + 3.23047619047618*G0_0_1_14_1_1 + 3.8806349206349*G0_0_1_15_1_0 + 3.43365079365077*G0_0_1_15_1_1 - 3.98222222222221*G0_0_1_16_1_0 - 4.61206349206347*G0_0_1_16_1_1 + 0.467301587301586*G0_0_1_17_1_0 + 0.914285714285714*G0_0_1_17_1_1 + 0.650158730158724*G0_0_1_18_1_0 - 0.0609523809523791*G0_0_1_18_1_1 - 5.48571428571426*G0_0_1_19_1_0 - 4.14476190476189*G0_0_1_19_1_1 - 0.487619047619042*G0_1_0_0_0_0 - 0.487619047619042*G0_1_0_0_0_1 - 0.142222222222221*G0_1_0_1_0_0 + 1.66603174603174*G0_1_0_2_0_1 + 0.792380952380944*G0_1_0_3_0_0 - 0.142222222222221*G0_1_0_3_0_1 + 3.90095238095237*G0_1_0_4_0_0 + 3.02730158730157*G0_1_0_4_0_1 + 2.49904761904761*G0_1_0_5_0_0 + 1.97079365079364*G0_1_0_5_0_1 - 3.90095238095237*G0_1_0_6_0_0 - 3.14920634920634*G0_1_0_6_0_1 + 0.58920634920634*G0_1_0_7_0_0 + 1.11746031746031*G0_1_0_7_0_1 + 0.0406349206349215*G0_1_0_8_0_0 + 0.142222222222222*G0_1_0_8_0_1 - 3.29142857142856*G0_1_0_9_0_0 - 4.14476190476189*G0_1_0_9_0_1 - 0.487619047619042*G0_1_0_10_1_0 - 0.487619047619042*G0_1_0_10_1_1 - 0.142222222222221*G0_1_0_11_1_0 + 1.66603174603174*G0_1_0_12_1_1 + 0.792380952380944*G0_1_0_13_1_0 - 0.142222222222221*G0_1_0_13_1_1 + 3.90095238095237*G0_1_0_14_1_0 + 3.02730158730157*G0_1_0_14_1_1 + 2.49904761904761*G0_1_0_15_1_0 + 1.97079365079364*G0_1_0_15_1_1 - 3.90095238095237*G0_1_0_16_1_0 - 3.14920634920634*G0_1_0_16_1_1 + 0.58920634920634*G0_1_0_17_1_0 + 1.11746031746031*G0_1_0_17_1_1 + 0.0406349206349215*G0_1_0_18_1_0 + 0.142222222222222*G0_1_0_18_1_1 - 3.29142857142856*G0_1_0_19_1_0 - 4.14476190476189*G0_1_0_19_1_1 + 1.1784126984127*G0_1_1_0_0_0 + 1.1784126984127*G0_1_1_0_0_1 + 1.1784126984127*G0_1_1_2_0_1 + 0.893968253968246*G0_1_1_3_0_0 + 4.42920634920634*G0_1_1_4_0_0 + 4.14476190476189*G0_1_1_4_0_1 + 3.25079365079364*G0_1_1_5_0_0 - 1.1784126984127*G0_1_1_5_0_1 - 4.42920634920634*G0_1_1_6_0_0 - 1.17841269841269*G0_1_1_6_0_1 - 0.28444444444445*G0_1_1_7_0_0 + 4.14476190476189*G0_1_1_7_0_1 - 0.893968253968251*G0_1_1_8_0_0 - 4.14476190476188*G0_1_1_9_0_0 - 8.28952380952378*G0_1_1_9_0_1 + 1.1784126984127*G0_1_1_10_1_0 + 1.1784126984127*G0_1_1_10_1_1 + 1.1784126984127*G0_1_1_12_1_1 + 0.893968253968246*G0_1_1_13_1_0 + 4.42920634920634*G0_1_1_14_1_0 + 4.14476190476189*G0_1_1_14_1_1 + 3.25079365079364*G0_1_1_15_1_0 - 1.1784126984127*G0_1_1_15_1_1 - 4.42920634920634*G0_1_1_16_1_0 - 1.17841269841269*G0_1_1_16_1_1 - 0.28444444444445*G0_1_1_17_1_0 + 4.14476190476189*G0_1_1_17_1_1 - 0.893968253968251*G0_1_1_18_1_0 - 4.14476190476188*G0_1_1_19_1_0 - 8.28952380952378*G0_1_1_19_1_1;
    A[516] = 0.0;
    A[225] = 0.0;
    A[545] = 0.0;
    A[509] = A[421] + 0.0101587301587299*G0_0_1_0_0_0 + 0.0101587301587299*G0_0_1_0_0_1 - 0.111746031746031*G0_0_1_2_0_1 + 0.069841269841269*G0_0_1_3_0_0 - 0.143492063492062*G0_0_1_4_0_0 + 0.0380952380952391*G0_0_1_4_0_1 - 0.153650793650793*G0_0_1_5_0_0 - 0.132063492063491*G0_0_1_5_0_1 + 0.143492063492062*G0_0_1_6_0_0 + 0.233650793650792*G0_0_1_6_0_1 + 0.0596825396825392*G0_0_1_7_0_0 + 0.0380952380952373*G0_0_1_7_0_1 - 0.0698412698412683*G0_0_1_8_0_0 + 0.0838095238095238*G0_0_1_9_0_0 - 0.0761904761904764*G0_0_1_9_0_1 + 0.0101587301587299*G0_0_1_10_1_0 + 0.0101587301587299*G0_0_1_10_1_1 - 0.111746031746031*G0_0_1_12_1_1 + 0.069841269841269*G0_0_1_13_1_0 - 0.143492063492062*G0_0_1_14_1_0 + 0.0380952380952391*G0_0_1_14_1_1 - 0.153650793650793*G0_0_1_15_1_0 - 0.132063492063491*G0_0_1_15_1_1 + 0.143492063492062*G0_0_1_16_1_0 + 0.233650793650792*G0_0_1_16_1_1 + 0.0596825396825392*G0_0_1_17_1_0 + 0.0380952380952373*G0_0_1_17_1_1 - 0.0698412698412683*G0_0_1_18_1_0 + 0.0838095238095238*G0_0_1_19_1_0 - 0.0761904761904764*G0_0_1_19_1_1 - 0.0101587301587299*G0_1_0_0_0_0 - 0.0101587301587299*G0_1_0_0_0_1 + 0.111746031746031*G0_1_0_2_0_1 - 0.0698412698412689*G0_1_0_3_0_0 + 0.143492063492062*G0_1_0_4_0_0 - 0.0380952380952391*G0_1_0_4_0_1 + 0.153650793650793*G0_1_0_5_0_0 + 0.132063492063491*G0_1_0_5_0_1 - 0.143492063492062*G0_1_0_6_0_0 - 0.233650793650792*G0_1_0_6_0_1 - 0.0596825396825392*G0_1_0_7_0_0 - 0.0380952380952373*G0_1_0_7_0_1 + 0.0698412698412682*G0_1_0_8_0_0 - 0.0838095238095238*G0_1_0_9_0_0 + 0.0761904761904764*G0_1_0_9_0_1 - 0.0101587301587299*G0_1_0_10_1_0 - 0.0101587301587299*G0_1_0_10_1_1 + 0.111746031746031*G0_1_0_12_1_1 - 0.0698412698412689*G0_1_0_13_1_0 + 0.143492063492062*G0_1_0_14_1_0 - 0.0380952380952391*G0_1_0_14_1_1 + 0.153650793650793*G0_1_0_15_1_0 + 0.132063492063491*G0_1_0_15_1_1 - 0.143492063492062*G0_1_0_16_1_0 - 0.233650793650792*G0_1_0_16_1_1 - 0.0596825396825392*G0_1_0_17_1_0 - 0.0380952380952373*G0_1_0_17_1_1 + 0.0698412698412682*G0_1_0_18_1_0 - 0.0838095238095238*G0_1_0_19_1_0 + 0.0761904761904764*G0_1_0_19_1_1;
    A[638] = 0.0;
    A[534] = 0.113015873015873*G0_1_0_0_0_0 + 0.113015873015873*G0_1_0_0_0_1 - 0.0165079365079361*G0_1_0_1_0_0 - 0.0266666666666675*G0_1_0_3_0_0 + 0.0184126984126984*G0_1_0_3_0_1 - 0.0615873015873013*G0_1_0_4_0_1 - 0.0266666666666657*G0_1_0_5_0_0 - 0.174603174603174*G0_1_0_5_0_1 + 0.0615873015873*G0_1_0_6_0_1 - 0.242539682539681*G0_1_0_7_0_0 - 0.0946031746031739*G0_1_0_7_0_1 + 0.146031746031745*G0_1_0_8_0_0 - 0.0184126984126983*G0_1_0_8_0_1 + 0.0533333333333333*G0_1_0_9_0_0 + 0.156190476190475*G0_1_0_9_0_1 + 0.113015873015873*G0_1_0_10_1_0 + 0.113015873015873*G0_1_0_10_1_1 - 0.0165079365079361*G0_1_0_11_1_0 - 0.0266666666666675*G0_1_0_13_1_0 + 0.0184126984126984*G0_1_0_13_1_1 - 0.0615873015873013*G0_1_0_14_1_1 - 0.0266666666666657*G0_1_0_15_1_0 - 0.174603174603174*G0_1_0_15_1_1 + 0.0615873015873*G0_1_0_16_1_1 - 0.242539682539681*G0_1_0_17_1_0 - 0.0946031746031739*G0_1_0_17_1_1 + 0.146031746031745*G0_1_0_18_1_0 - 0.0184126984126983*G0_1_0_18_1_1 + 0.0533333333333333*G0_1_0_19_1_0 + 0.156190476190475*G0_1_0_19_1_1 - 0.126137566137566*G0_1_1_0_0_0 - 0.126137566137566*G0_1_1_0_0_1 - 0.0173544973544971*G0_1_1_1_0_0 + 0.02962962962963*G0_1_1_2_0_1 + 0.0260317460317451*G0_1_1_3_0_0 + 0.0101587301587302*G0_1_1_3_0_1 - 0.0920634920634909*G0_1_1_4_0_0 - 0.123174603174603*G0_1_1_4_0_1 + 0.00063492063492075*G0_1_1_5_0_0 + 0.284444444444443*G0_1_1_5_0_1 + 0.092063492063491*G0_1_1_6_0_0 - 0.187936507936508*G0_1_1_6_0_1 + 0.041269841269841*G0_1_1_7_0_0 - 0.242539682539682*G0_1_1_7_0_1 + 0.102222222222222*G0_1_1_8_0_0 - 0.0101587301587302*G0_1_1_8_0_1 - 0.0266666666666658*G0_1_1_9_0_0 + 0.365714285714285*G0_1_1_9_0_1 - 0.126137566137566*G0_1_1_10_1_0 - 0.126137566137566*G0_1_1_10_1_1 - 0.0173544973544971*G0_1_1_11_1_0 + 0.02962962962963*G0_1_1_12_1_1 + 0.0260317460317451*G0_1_1_13_1_0 + 0.0101587301587302*G0_1_1_13_1_1 - 0.0920634920634909*G0_1_1_14_1_0 - 0.123174603174603*G0_1_1_14_1_1 + 0.00063492063492075*G0_1_1_15_1_0 + 0.284444444444443*G0_1_1_15_1_1 + 0.092063492063491*G0_1_1_16_1_0 - 0.187936507936508*G0_1_1_16_1_1 + 0.041269841269841*G0_1_1_17_1_0 - 0.242539682539682*G0_1_1_17_1_1 + 0.102222222222222*G0_1_1_18_1_0 - 0.0101587301587302*G0_1_1_18_1_1 - 0.0266666666666658*G0_1_1_19_1_0 + 0.365714285714285*G0_1_1_19_1_1;
    A[667] = 0.0;
    A[696] = 0.0;
    A[265] = 0.0;
    A[290] = 0.0;
    A[439] = 0.0;
    A[319] = 0.0;
    A[460] = 0.0;
    A[356] = 0.0;
    A[722] = 0.0;
    A[389] = 0.0;
    A[753] = 0.0;
    A[67] = -0.276190476190475*G0_1_0_0_0_0 - 0.276190476190475*G0_1_0_0_0_1 + 0.174603174603174*G0_1_0_1_0_0 + 1.47777777777777*G0_1_0_2_0_1 - 0.919047619047612*G0_1_0_3_0_0 - 0.103968253968252*G0_1_0_3_0_1 + 2.70476190476189*G0_1_0_4_0_0 + 0.586507936507934*G0_1_0_4_0_1 + 1.18571428571428*G0_1_0_5_0_0 + 1.15158730158729*G0_1_0_5_0_1 - 2.70476190476189*G0_1_0_6_0_0 - 2.35317460317459*G0_1_0_6_0_1 + 0.0507936507936509*G0_1_0_7_0_0 + 0.0849206349206351*G0_1_0_7_0_1 + 0.0507936507936487*G0_1_0_8_0_0 + 0.103968253968252*G0_1_0_8_0_1 - 0.266666666666665*G0_1_0_9_0_0 - 0.671428571428569*G0_1_0_9_0_1 - 0.276190476190475*G0_1_0_10_1_0 - 0.276190476190475*G0_1_0_10_1_1 + 0.174603174603174*G0_1_0_11_1_0 + 1.47777777777777*G0_1_0_12_1_1 - 0.919047619047612*G0_1_0_13_1_0 - 0.103968253968252*G0_1_0_13_1_1 + 2.70476190476189*G0_1_0_14_1_0 + 0.586507936507934*G0_1_0_14_1_1 + 1.18571428571428*G0_1_0_15_1_0 + 1.15158730158729*G0_1_0_15_1_1 - 2.70476190476189*G0_1_0_16_1_0 - 2.35317460317459*G0_1_0_16_1_1 + 0.0507936507936509*G0_1_0_17_1_0 + 0.0849206349206351*G0_1_0_17_1_1 + 0.0507936507936487*G0_1_0_18_1_0 + 0.103968253968252*G0_1_0_18_1_1 - 0.266666666666665*G0_1_0_19_1_0 - 0.671428571428569*G0_1_0_19_1_1 - 0.540423280423278*G0_1_1_0_0_0 - 0.540423280423278*G0_1_1_0_0_1 + 0.122962962962963*G0_1_1_1_0_0 + 1.27883597883597*G0_1_1_2_0_1 - 0.675396825396821*G0_1_1_3_0_0 - 0.106666666666665*G0_1_1_3_0_1 + 2.1579365079365*G0_1_1_4_0_0 + 0.433333333333331*G0_1_1_4_0_1 + 0.946825396825391*G0_1_1_5_0_0 + 1.53936507936507*G0_1_1_5_0_1 - 2.1579365079365*G0_1_1_6_0_0 - 2.27777777777777*G0_1_1_6_0_1 + 0.336349206349204*G0_1_1_7_0_0 - 0.256190476190475*G0_1_1_7_0_1 + 0.0811111111111098*G0_1_1_8_0_0 + 0.106666666666665*G0_1_1_8_0_1 - 0.27142857142857*G0_1_1_9_0_0 - 0.177142857142857*G0_1_1_9_0_1 - 0.540423280423278*G0_1_1_10_1_0 - 0.540423280423278*G0_1_1_10_1_1 + 0.122962962962963*G0_1_1_11_1_0 + 1.27883597883597*G0_1_1_12_1_1 - 0.675396825396821*G0_1_1_13_1_0 - 0.106666666666665*G0_1_1_13_1_1 + 2.1579365079365*G0_1_1_14_1_0 + 0.433333333333331*G0_1_1_14_1_1 + 0.946825396825391*G0_1_1_15_1_0 + 1.53936507936507*G0_1_1_15_1_1 - 2.1579365079365*G0_1_1_16_1_0 - 2.27777777777777*G0_1_1_16_1_1 + 0.336349206349204*G0_1_1_17_1_0 - 0.256190476190475*G0_1_1_17_1_1 + 0.0811111111111098*G0_1_1_18_1_0 + 0.106666666666665*G0_1_1_18_1_1 - 0.27142857142857*G0_1_1_19_1_0 - 0.177142857142857*G0_1_1_19_1_1;
    A[112] = 0.0;
    A[181] = -0.126137566137565*G0_0_0_0_0_0 - 0.126137566137565*G0_0_0_0_0_1 + 0.0296296296296296*G0_0_0_1_0_0 - 0.0173544973544971*G0_0_0_2_0_1 - 0.123174603174602*G0_0_0_3_0_0 - 0.0920634920634909*G0_0_0_3_0_1 + 0.01015873015873*G0_0_0_4_0_0 + 0.0260317460317454*G0_0_0_4_0_1 - 0.24253968253968*G0_0_0_5_0_0 + 0.0412698412698415*G0_0_0_5_0_1 - 0.01015873015873*G0_0_0_6_0_0 + 0.102222222222221*G0_0_0_6_0_1 + 0.284444444444443*G0_0_0_7_0_0 + 0.000634920634920791*G0_0_0_7_0_1 - 0.187936507936507*G0_0_0_8_0_0 + 0.0920634920634911*G0_0_0_8_0_1 + 0.365714285714282*G0_0_0_9_0_0 - 0.0266666666666663*G0_0_0_9_0_1 - 0.126137566137565*G0_0_0_10_1_0 - 0.126137566137565*G0_0_0_10_1_1 + 0.0296296296296296*G0_0_0_11_1_0 - 0.0173544973544971*G0_0_0_12_1_1 - 0.123174603174602*G0_0_0_13_1_0 - 0.0920634920634909*G0_0_0_13_1_1 + 0.01015873015873*G0_0_0_14_1_0 + 0.0260317460317454*G0_0_0_14_1_1 - 0.24253968253968*G0_0_0_15_1_0 + 0.0412698412698415*G0_0_0_15_1_1 - 0.01015873015873*G0_0_0_16_1_0 + 0.102222222222221*G0_0_0_16_1_1 + 0.284444444444443*G0_0_0_17_1_0 + 0.000634920634920791*G0_0_0_17_1_1 - 0.187936507936507*G0_0_0_18_1_0 + 0.0920634920634911*G0_0_0_18_1_1 + 0.365714285714282*G0_0_0_19_1_0 - 0.0266666666666663*G0_0_0_19_1_1 + 0.113015873015873*G0_1_0_0_0_0 + 0.113015873015873*G0_1_0_0_0_1 - 0.0165079365079362*G0_1_0_2_0_1 - 0.061587301587301*G0_1_0_3_0_0 + 0.0184126984126987*G0_1_0_4_0_0 - 0.0266666666666667*G0_1_0_4_0_1 - 0.0946031746031731*G0_1_0_5_0_0 - 0.242539682539682*G0_1_0_5_0_1 - 0.0184126984126988*G0_1_0_6_0_0 + 0.146031746031745*G0_1_0_6_0_1 - 0.174603174603175*G0_1_0_7_0_0 - 0.0266666666666658*G0_1_0_7_0_1 + 0.0615873015873014*G0_1_0_8_0_0 + 0.156190476190474*G0_1_0_9_0_0 + 0.0533333333333323*G0_1_0_9_0_1 + 0.113015873015873*G0_1_0_10_1_0 + 0.113015873015873*G0_1_0_10_1_1 - 0.0165079365079362*G0_1_0_12_1_1 - 0.061587301587301*G0_1_0_13_1_0 + 0.0184126984126987*G0_1_0_14_1_0 - 0.0266666666666667*G0_1_0_14_1_1 - 0.0946031746031731*G0_1_0_15_1_0 - 0.242539682539682*G0_1_0_15_1_1 - 0.0184126984126988*G0_1_0_16_1_0 + 0.146031746031745*G0_1_0_16_1_1 - 0.174603174603175*G0_1_0_17_1_0 - 0.0266666666666658*G0_1_0_17_1_1 + 0.0615873015873014*G0_1_0_18_1_0 + 0.156190476190474*G0_1_0_19_1_0 + 0.0533333333333323*G0_1_0_19_1_1;
    A[137] = 0.0;
    A[214] = A[679];
    A[170] = 0.0;
    A[628] = -A[252] + 0.121904761904763*G0_0_0_0_0_0 + 0.121904761904763*G0_0_0_0_0_1 - 0.121904761904762*G0_0_0_1_0_0 - 0.121904761904762*G0_0_0_3_0_1 - 0.121904761904769*G0_0_0_5_0_1 - 0.365714285714283*G0_0_0_7_0_0 - 0.243809523809523*G0_0_0_7_0_1 + 0.365714285714283*G0_0_0_8_0_0 + 0.121904761904762*G0_0_0_8_0_1 + 0.24380952380953*G0_0_0_9_0_1 + 0.121904761904763*G0_0_0_10_1_0 + 0.121904761904763*G0_0_0_10_1_1 - 0.121904761904762*G0_0_0_11_1_0 - 0.121904761904762*G0_0_0_13_1_1 - 0.121904761904769*G0_0_0_15_1_1 - 0.365714285714283*G0_0_0_17_1_0 - 0.243809523809523*G0_0_0_17_1_1 + 0.365714285714283*G0_0_0_18_1_0 + 0.121904761904762*G0_0_0_18_1_1 + 0.24380952380953*G0_0_0_19_1_1 + 0.304761904761904*G0_0_1_0_0_0 + 0.304761904761904*G0_0_1_0_0_1 + 0.182857142857139*G0_0_1_1_0_0 - 0.487619047619042*G0_0_1_3_0_0 + 0.182857142857138*G0_0_1_3_0_1 - 0.487619047619051*G0_0_1_4_0_1 - 0.487619047619053*G0_0_1_5_0_0 - 0.792380952380954*G0_0_1_5_0_1 + 0.48761904761906*G0_0_1_6_0_1 - 0.426666666666664*G0_0_1_7_0_0 - 0.121904761904763*G0_0_1_7_0_1 - 0.0609523809523788*G0_0_1_8_0_0 - 0.182857142857138*G0_0_1_8_0_1 + 0.975238095238095*G0_0_1_9_0_0 + 0.609523809523814*G0_0_1_9_0_1 + 0.304761904761904*G0_0_1_10_1_0 + 0.304761904761904*G0_0_1_10_1_1 + 0.182857142857139*G0_0_1_11_1_0 - 0.487619047619042*G0_0_1_13_1_0 + 0.182857142857138*G0_0_1_13_1_1 - 0.487619047619051*G0_0_1_14_1_1 - 0.487619047619053*G0_0_1_15_1_0 - 0.792380952380954*G0_0_1_15_1_1 + 0.48761904761906*G0_0_1_16_1_1 - 0.426666666666664*G0_0_1_17_1_0 - 0.121904761904763*G0_0_1_17_1_1 - 0.0609523809523788*G0_0_1_18_1_0 - 0.182857142857138*G0_0_1_18_1_1 + 0.975238095238095*G0_0_1_19_1_0 + 0.609523809523814*G0_0_1_19_1_1 + 0.325079365079366*G0_1_0_0_0_0 + 0.325079365079366*G0_1_0_0_0_1 + 0.203174603174601*G0_1_0_1_0_0 + 0.487619047619048*G0_1_0_3_0_0 + 0.711111111111107*G0_1_0_3_0_1 - 0.0203174603174613*G0_1_0_4_0_1 + 0.487619047619041*G0_1_0_5_0_0 - 0.345396825396831*G0_1_0_5_0_1 + 0.0203174603174706*G0_1_0_6_0_1 - 0.446984126984126*G0_1_0_7_0_0 + 0.386031746031746*G0_1_0_7_0_1 - 0.0812698412698407*G0_1_0_8_0_0 - 0.711111111111109*G0_1_0_8_0_1 - 0.97523809523809*G0_1_0_9_0_0 - 0.365714285714283*G0_1_0_9_0_1 + 0.325079365079366*G0_1_0_10_1_0 + 0.325079365079366*G0_1_0_10_1_1 + 0.203174603174601*G0_1_0_11_1_0 + 0.487619047619048*G0_1_0_13_1_0 + 0.711111111111107*G0_1_0_13_1_1 - 0.0203174603174613*G0_1_0_14_1_1 + 0.487619047619041*G0_1_0_15_1_0 - 0.345396825396831*G0_1_0_15_1_1 + 0.0203174603174706*G0_1_0_16_1_1 - 0.446984126984126*G0_1_0_17_1_0 + 0.386031746031746*G0_1_0_17_1_1 - 0.0812698412698407*G0_1_0_18_1_0 - 0.711111111111109*G0_1_0_18_1_1 - 0.97523809523809*G0_1_0_19_1_0 - 0.365714285714283*G0_1_0_19_1_1 - 0.74497354497354*G0_1_1_0_0_0 - 0.744973544973541*G0_1_1_0_0_1 + 1.25291005291005*G0_1_1_1_0_0 + 0.419894179894171*G0_1_1_2_0_1 + 0.528253968253967*G0_1_1_3_0_0 + 3.35238095238094*G0_1_1_3_0_1 - 1.8488888888889*G0_1_1_4_0_0 - 3.83999999999999*G0_1_1_4_0_1 - 0.52825396825397*G0_1_1_5_0_0 + 1.80825396825396*G0_1_1_5_0_1 + 1.8488888888889*G0_1_1_6_0_0 - 1.48317460317459*G0_1_1_6_0_1 - 0.89396825396825*G0_1_1_7_0_0 - 3.23047619047618*G0_1_1_7_0_1 + 0.386031746031746*G0_1_1_8_0_0 - 3.35238095238094*G0_1_1_8_0_1 + 7.07047619047617*G0_1_1_9_0_1 - 0.74497354497354*G0_1_1_10_1_0 - 0.744973544973541*G0_1_1_10_1_1 + 1.25291005291005*G0_1_1_11_1_0 + 0.419894179894171*G0_1_1_12_1_1 + 0.528253968253967*G0_1_1_13_1_0 + 3.35238095238094*G0_1_1_13_1_1 - 1.8488888888889*G0_1_1_14_1_0 - 3.83999999999999*G0_1_1_14_1_1 - 0.52825396825397*G0_1_1_15_1_0 + 1.80825396825396*G0_1_1_15_1_1 + 1.8488888888889*G0_1_1_16_1_0 - 1.48317460317459*G0_1_1_16_1_1 - 0.89396825396825*G0_1_1_17_1_0 - 3.23047619047618*G0_1_1_17_1_1 + 0.386031746031746*G0_1_1_18_1_0 - 3.35238095238094*G0_1_1_18_1_1 + 7.07047619047617*G0_1_1_19_1_1;
    A[207] = 0.0;
    A[571] = 0.0;
    A[527] = -0.213888888888888*G0_1_1_0_0_0 - 0.213888888888888*G0_1_1_0_0_1 + 0.213888888888889*G0_1_1_1_0_0 + 1.2329365079365*G0_1_1_2_0_1 - 0.85992063492063*G0_1_1_3_0_0 + 0.0115079365079379*G0_1_1_3_0_1 + 2.19722222222221*G0_1_1_4_0_0 + 0.306746031746031*G0_1_1_4_0_1 + 0.859920634920631*G0_1_1_5_0_0 + 0.871428571428567*G0_1_1_5_0_1 - 2.19722222222221*G0_1_1_6_0_0 - 1.89047619047618*G0_1_1_6_0_1 - 0.0115079365079359*G0_1_1_7_0_1 - 0.0115079365079377*G0_1_1_8_0_1 - 0.295238095238094*G0_1_1_9_0_1 - 0.213888888888888*G0_1_1_10_1_0 - 0.213888888888888*G0_1_1_10_1_1 + 0.213888888888889*G0_1_1_11_1_0 + 1.2329365079365*G0_1_1_12_1_1 - 0.85992063492063*G0_1_1_13_1_0 + 0.0115079365079379*G0_1_1_13_1_1 + 2.19722222222221*G0_1_1_14_1_0 + 0.306746031746031*G0_1_1_14_1_1 + 0.859920634920631*G0_1_1_15_1_0 + 0.871428571428567*G0_1_1_15_1_1 - 2.19722222222221*G0_1_1_16_1_0 - 1.89047619047618*G0_1_1_16_1_1 - 0.0115079365079359*G0_1_1_17_1_1 - 0.0115079365079377*G0_1_1_18_1_1 - 0.295238095238094*G0_1_1_19_1_1;
    A[562] = A[213] - 0.132063492063491*G0_0_1_0_0_0 - 0.132063492063491*G0_0_1_0_0_1 + 0.0203174603174643*G0_0_1_1_0_0 + 0.0152380952380973*G0_0_1_2_0_1 + 0.0457142857142872*G0_0_1_3_0_0 + 0.033015873015881*G0_0_1_3_0_1 - 0.060952380952378*G0_0_1_4_0_0 - 0.0431746031746046*G0_0_1_4_0_1 + 0.0761904761904789*G0_0_1_5_0_0 + 0.271746031746031*G0_0_1_5_0_1 + 0.0609523809523781*G0_0_1_6_0_0 - 0.154920634920637*G0_0_1_6_0_1 + 0.193015873015873*G0_0_1_7_0_0 - 0.00253968253967896*G0_0_1_7_0_1 - 0.0812698412698458*G0_0_1_8_0_0 - 0.0330158730158808*G0_0_1_8_0_1 - 0.121904761904766*G0_0_1_9_0_0 + 0.0457142857142835*G0_0_1_9_0_1 - 0.132063492063491*G0_0_1_10_1_0 - 0.132063492063491*G0_0_1_10_1_1 + 0.0203174603174643*G0_0_1_11_1_0 + 0.0152380952380973*G0_0_1_12_1_1 + 0.0457142857142872*G0_0_1_13_1_0 + 0.033015873015881*G0_0_1_13_1_1 - 0.060952380952378*G0_0_1_14_1_0 - 0.0431746031746046*G0_0_1_14_1_1 + 0.0761904761904789*G0_0_1_15_1_0 + 0.271746031746031*G0_0_1_15_1_1 + 0.0609523809523781*G0_0_1_16_1_0 - 0.154920634920637*G0_0_1_16_1_1 + 0.193015873015873*G0_0_1_17_1_0 - 0.00253968253967896*G0_0_1_17_1_1 - 0.0812698412698458*G0_0_1_18_1_0 - 0.0330158730158808*G0_0_1_18_1_1 - 0.121904761904766*G0_0_1_19_1_0 + 0.0457142857142835*G0_0_1_19_1_1 + 0.132063492063491*G0_1_0_0_0_0 + 0.132063492063491*G0_1_0_0_0_1 - 0.0203174603174643*G0_1_0_1_0_0 - 0.0152380952380973*G0_1_0_2_0_1 - 0.045714285714287*G0_1_0_3_0_0 - 0.0330158730158809*G0_1_0_3_0_1 + 0.060952380952378*G0_1_0_4_0_0 + 0.0431746031746045*G0_1_0_4_0_1 - 0.0761904761904789*G0_1_0_5_0_0 - 0.271746031746031*G0_1_0_5_0_1 - 0.0609523809523781*G0_1_0_6_0_0 + 0.154920634920637*G0_1_0_6_0_1 - 0.193015873015873*G0_1_0_7_0_0 + 0.00253968253967897*G0_1_0_7_0_1 + 0.0812698412698458*G0_1_0_8_0_0 + 0.0330158730158808*G0_1_0_8_0_1 + 0.121904761904766*G0_1_0_9_0_0 - 0.0457142857142834*G0_1_0_9_0_1 + 0.132063492063491*G0_1_0_10_1_0 + 0.132063492063491*G0_1_0_10_1_1 - 0.0203174603174643*G0_1_0_11_1_0 - 0.0152380952380973*G0_1_0_12_1_1 - 0.045714285714287*G0_1_0_13_1_0 - 0.0330158730158809*G0_1_0_13_1_1 + 0.060952380952378*G0_1_0_14_1_0 + 0.0431746031746045*G0_1_0_14_1_1 - 0.0761904761904789*G0_1_0_15_1_0 - 0.271746031746031*G0_1_0_15_1_1 - 0.0609523809523781*G0_1_0_16_1_0 + 0.154920634920637*G0_1_0_16_1_1 - 0.193015873015873*G0_1_0_17_1_0 + 0.00253968253967897*G0_1_0_17_1_1 + 0.0812698412698458*G0_1_0_18_1_0 + 0.0330158730158808*G0_1_0_18_1_1 + 0.121904761904766*G0_1_0_19_1_0 - 0.0457142857142834*G0_1_0_19_1_1;
    A[299] = 0.0;
    A[446] = 0.0;
    A[326] = 0.0;
    A[349] = 0.0;
    A[28] = 0.0;
    A[729] = 0.0;
    A[380] = 0.0;
    A[830] = -A[368] + 0.142222222222224*G0_0_1_0_0_0 + 0.142222222222224*G0_0_1_0_0_1 - 0.345396825396822*G0_0_1_1_0_0 + 1.21904761904761*G0_0_1_3_0_0 + 0.162539682539682*G0_0_1_3_0_1 + 0.711111111111104*G0_0_1_4_0_1 + 1.21904761904761*G0_0_1_5_0_0 + 0.568888888888877*G0_0_1_5_0_1 - 0.7111111111111*G0_0_1_6_0_1 - 0.629841269841269*G0_0_1_7_0_0 + 0.0203174603174586*G0_0_1_7_0_1 + 0.833015873015868*G0_0_1_8_0_0 - 0.162539682539683*G0_0_1_8_0_1 - 2.43809523809522*G0_0_1_9_0_0 - 0.731428571428562*G0_0_1_9_0_1 + 0.142222222222224*G0_0_1_10_1_0 + 0.142222222222224*G0_0_1_10_1_1 - 0.345396825396822*G0_0_1_11_1_0 + 1.21904761904761*G0_0_1_13_1_0 + 0.162539682539682*G0_0_1_13_1_1 + 0.711111111111104*G0_0_1_14_1_1 + 1.21904761904761*G0_0_1_15_1_0 + 0.568888888888877*G0_0_1_15_1_1 - 0.7111111111111*G0_0_1_16_1_1 - 0.629841269841269*G0_0_1_17_1_0 + 0.0203174603174586*G0_0_1_17_1_1 + 0.833015873015868*G0_0_1_18_1_0 - 0.162539682539683*G0_0_1_18_1_1 - 2.43809523809522*G0_0_1_19_1_0 - 0.731428571428562*G0_0_1_19_1_1 - 1.47640211640211*G0_1_1_0_0_0 - 1.47640211640211*G0_1_1_0_0_1 - 0.697566137566135*G0_1_1_1_0_0 + 0.541798941798937*G0_1_1_2_0_1 + 1.86920634920634*G0_1_1_3_0_0 + 0.182857142857142*G0_1_1_3_0_1 - 0.507936507936509*G0_1_1_4_0_0 - 0.060952380952384*G0_1_1_4_0_1 + 1.05650793650793*G0_1_1_5_0_0 + 4.12444444444442*G0_1_1_5_0_1 + 0.50793650793651*G0_1_1_6_0_0 - 3.18984126984125*G0_1_1_6_0_1 - 0.284444444444446*G0_1_1_7_0_0 - 3.35238095238094*G0_1_1_7_0_1 + 2.45841269841269*G0_1_1_8_0_0 - 0.182857142857141*G0_1_1_8_0_1 - 2.92571428571427*G0_1_1_9_0_0 + 3.41333333333332*G0_1_1_9_0_1 - 1.47640211640211*G0_1_1_10_1_0 - 1.47640211640211*G0_1_1_10_1_1 - 0.697566137566135*G0_1_1_11_1_0 + 0.541798941798937*G0_1_1_12_1_1 + 1.86920634920634*G0_1_1_13_1_0 + 0.182857142857142*G0_1_1_13_1_1 - 0.507936507936509*G0_1_1_14_1_0 - 0.060952380952384*G0_1_1_14_1_1 + 1.05650793650793*G0_1_1_15_1_0 + 4.12444444444442*G0_1_1_15_1_1 + 0.50793650793651*G0_1_1_16_1_0 - 3.18984126984125*G0_1_1_16_1_1 - 0.284444444444446*G0_1_1_17_1_0 - 3.35238095238094*G0_1_1_17_1_1 + 2.45841269841269*G0_1_1_18_1_0 - 0.182857142857141*G0_1_1_18_1_1 - 2.92571428571427*G0_1_1_19_1_0 + 3.41333333333332*G0_1_1_19_1_1;
    A[55] = 0.0;
    A[754] = 0.0;
    A[415] = 0.0;
    A[783] = 0.0;
    A[820] = 0.0;
    A[144] = 0.0;
    A[853] = 0.0;
    A[179] = 0.0;
    A[627] = -A[252] + 0.142222222222224*G0_1_0_0_0_0 + 0.142222222222224*G0_1_0_0_0_1 - 0.345396825396822*G0_1_0_1_0_0 + 1.21904761904761*G0_1_0_3_0_0 + 0.162539682539682*G0_1_0_3_0_1 + 0.711111111111104*G0_1_0_4_0_1 + 1.21904761904761*G0_1_0_5_0_0 + 0.568888888888877*G0_1_0_5_0_1 - 0.7111111111111*G0_1_0_6_0_1 - 0.629841269841269*G0_1_0_7_0_0 + 0.0203174603174586*G0_1_0_7_0_1 + 0.833015873015868*G0_1_0_8_0_0 - 0.162539682539683*G0_1_0_8_0_1 - 2.43809523809522*G0_1_0_9_0_0 - 0.731428571428562*G0_1_0_9_0_1 + 0.142222222222224*G0_1_0_10_1_0 + 0.142222222222224*G0_1_0_10_1_1 - 0.345396825396822*G0_1_0_11_1_0 + 1.21904761904761*G0_1_0_13_1_0 + 0.162539682539682*G0_1_0_13_1_1 + 0.711111111111104*G0_1_0_14_1_1 + 1.21904761904761*G0_1_0_15_1_0 + 0.568888888888877*G0_1_0_15_1_1 - 0.7111111111111*G0_1_0_16_1_1 - 0.629841269841269*G0_1_0_17_1_0 + 0.0203174603174586*G0_1_0_17_1_1 + 0.833015873015868*G0_1_0_18_1_0 - 0.162539682539683*G0_1_0_18_1_1 - 2.43809523809522*G0_1_0_19_1_0 - 0.731428571428562*G0_1_0_19_1_1 - 1.47640211640211*G0_1_1_0_0_0 - 1.47640211640211*G0_1_1_0_0_1 - 0.697566137566135*G0_1_1_1_0_0 + 0.541798941798937*G0_1_1_2_0_1 + 1.86920634920634*G0_1_1_3_0_0 + 0.182857142857142*G0_1_1_3_0_1 - 0.507936507936509*G0_1_1_4_0_0 - 0.060952380952384*G0_1_1_4_0_1 + 1.05650793650793*G0_1_1_5_0_0 + 4.12444444444442*G0_1_1_5_0_1 + 0.50793650793651*G0_1_1_6_0_0 - 3.18984126984125*G0_1_1_6_0_1 - 0.284444444444446*G0_1_1_7_0_0 - 3.35238095238094*G0_1_1_7_0_1 + 2.45841269841269*G0_1_1_8_0_0 - 0.182857142857141*G0_1_1_8_0_1 - 2.92571428571427*G0_1_1_9_0_0 + 3.41333333333332*G0_1_1_9_0_1 - 1.47640211640211*G0_1_1_10_1_0 - 1.47640211640211*G0_1_1_10_1_1 - 0.697566137566135*G0_1_1_11_1_0 + 0.541798941798937*G0_1_1_12_1_1 + 1.86920634920634*G0_1_1_13_1_0 + 0.182857142857142*G0_1_1_13_1_1 - 0.507936507936509*G0_1_1_14_1_0 - 0.060952380952384*G0_1_1_14_1_1 + 1.05650793650793*G0_1_1_15_1_0 + 4.12444444444442*G0_1_1_15_1_1 + 0.50793650793651*G0_1_1_16_1_0 - 3.18984126984125*G0_1_1_16_1_1 - 0.284444444444446*G0_1_1_17_1_0 - 3.35238095238094*G0_1_1_17_1_1 + 2.45841269841269*G0_1_1_18_1_0 - 0.182857142857141*G0_1_1_18_1_1 - 2.92571428571427*G0_1_1_19_1_0 + 3.41333333333332*G0_1_1_19_1_1;
    A[491] = 0.0;
    A[198] = 0.0;
    A[656] = A[716] + 0.602751322751319*G0_0_0_0_0_0 + 0.602751322751319*G0_0_0_0_0_1 - 0.196402116402113*G0_0_0_1_0_0 + 0.0880423280423269*G0_0_0_2_0_1 + 0.386031746031744*G0_0_0_3_0_0 + 0.243809523809525*G0_0_0_3_0_1 + 0.020317460317459*G0_0_0_4_0_0 - 0.121904761904762*G0_0_0_4_0_1 + 0.833015873015867*G0_0_0_5_0_0 - 0.345396825396824*G0_0_0_5_0_1 - 0.0203174603174588*G0_0_0_6_0_0 - 0.345396825396822*G0_0_0_6_0_1 - 1.42222222222221*G0_0_0_7_0_0 - 0.243809523809522*G0_0_0_7_0_1 + 1.01587301587301*G0_0_0_8_0_0 - 0.243809523809525*G0_0_0_8_0_1 - 1.21904761904761*G0_0_0_9_0_0 + 0.365714285714284*G0_0_0_9_0_1 + 0.602751322751319*G0_0_0_10_1_0 + 0.602751322751319*G0_0_0_10_1_1 - 0.196402116402113*G0_0_0_11_1_0 + 0.0880423280423269*G0_0_0_12_1_1 + 0.386031746031744*G0_0_0_13_1_0 + 0.243809523809525*G0_0_0_13_1_1 + 0.020317460317459*G0_0_0_14_1_0 - 0.121904761904762*G0_0_0_14_1_1 + 0.833015873015867*G0_0_0_15_1_0 - 0.345396825396824*G0_0_0_15_1_1 - 0.0203174603174588*G0_0_0_16_1_0 - 0.345396825396822*G0_0_0_16_1_1 - 1.42222222222221*G0_0_0_17_1_0 - 0.243809523809522*G0_0_0_17_1_1 + 1.01587301587301*G0_0_0_18_1_0 - 0.243809523809525*G0_0_0_18_1_1 - 1.21904761904761*G0_0_0_19_1_0 + 0.365714285714284*G0_0_0_19_1_1 - 0.101587301587302*G0_0_1_0_0_0 - 0.101587301587302*G0_0_1_0_0_1 - 0.162539682539681*G0_0_1_2_0_1 + 0.162539682539683*G0_0_1_3_0_0 - 0.264126984126982*G0_0_1_4_0_0 + 0.060952380952381*G0_0_1_4_0_1 - 0.162539682539681*G0_0_1_5_0_0 + 0.0406349206349213*G0_0_1_5_0_1 + 0.264126984126982*G0_0_1_6_0_0 + 0.223492063492062*G0_0_1_6_0_1 + 0.264126984126985*G0_0_1_7_0_0 + 0.0609523809523825*G0_0_1_7_0_1 - 0.162539682539685*G0_0_1_8_0_0 - 0.121904761904763*G0_0_1_9_0_1 - 0.101587301587302*G0_0_1_10_1_0 - 0.101587301587302*G0_0_1_10_1_1 - 0.162539682539681*G0_0_1_12_1_1 + 0.162539682539683*G0_0_1_13_1_0 - 0.264126984126982*G0_0_1_14_1_0 + 0.060952380952381*G0_0_1_14_1_1 - 0.162539682539681*G0_0_1_15_1_0 + 0.0406349206349213*G0_0_1_15_1_1 + 0.264126984126982*G0_0_1_16_1_0 + 0.223492063492062*G0_0_1_16_1_1 + 0.264126984126985*G0_0_1_17_1_0 + 0.0609523809523825*G0_0_1_17_1_1 - 0.162539682539685*G0_0_1_18_1_0 - 0.121904761904763*G0_0_1_19_1_1 - 0.62984126984127*G0_1_0_0_0_0 - 0.629841269841269*G0_1_0_0_0_1 - 0.0203174603174596*G0_1_0_2_0_1 + 0.446984126984124*G0_1_0_3_0_0 - 0.223492063492063*G0_1_0_4_0_0 + 0.24380952380952*G0_1_0_4_0_1 + 0.406349206349203*G0_1_0_5_0_0 + 1.23936507936508*G0_1_0_5_0_1 + 0.223492063492063*G0_1_0_6_0_0 - 0.589206349206348*G0_1_0_6_0_1 + 1.0768253968254*G0_1_0_7_0_0 + 0.243809523809522*G0_1_0_7_0_1 - 0.446984126984128*G0_1_0_8_0_0 - 0.853333333333327*G0_1_0_9_0_0 - 0.487619047619042*G0_1_0_9_0_1 - 0.62984126984127*G0_1_0_10_1_0 - 0.629841269841269*G0_1_0_10_1_1 - 0.0203174603174596*G0_1_0_12_1_1 + 0.446984126984124*G0_1_0_13_1_0 - 0.223492063492063*G0_1_0_14_1_0 + 0.24380952380952*G0_1_0_14_1_1 + 0.406349206349203*G0_1_0_15_1_0 + 1.23936507936508*G0_1_0_15_1_1 + 0.223492063492063*G0_1_0_16_1_0 - 0.589206349206348*G0_1_0_16_1_1 + 1.0768253968254*G0_1_0_17_1_0 + 0.243809523809522*G0_1_0_17_1_1 - 0.446984126984128*G0_1_0_18_1_0 - 0.853333333333327*G0_1_0_19_1_0 - 0.487619047619042*G0_1_0_19_1_1 + 0.0609523809523815*G0_1_1_0_0_0 + 0.0609523809523815*G0_1_1_0_0_1 - 0.06095238095238*G0_1_1_2_0_1 - 0.0609523809523801*G0_1_1_4_0_0 - 0.121904761904761*G0_1_1_5_0_0 - 0.182857142857143*G0_1_1_5_0_1 + 0.0609523809523801*G0_1_1_6_0_0 + 0.182857142857142*G0_1_1_6_0_1 - 0.0609523809523815*G0_1_1_7_0_0 + 0.121904761904761*G0_1_1_9_0_0 + 0.0609523809523815*G0_1_1_10_1_0 + 0.0609523809523815*G0_1_1_10_1_1 - 0.06095238095238*G0_1_1_12_1_1 - 0.0609523809523801*G0_1_1_14_1_0 - 0.121904761904761*G0_1_1_15_1_0 - 0.182857142857143*G0_1_1_15_1_1 + 0.0609523809523801*G0_1_1_16_1_0 + 0.182857142857142*G0_1_1_16_1_1 - 0.0609523809523815*G0_1_1_17_1_0 + 0.121904761904761*G0_1_1_19_1_0;
    A[576] = 0.0;
    A[520] = 0.0;
    A[237] = 0.0;
    A[677] = -0.276190476190475*G0_0_1_0_0_0 - 0.276190476190475*G0_0_1_0_0_1 + 0.174603174603174*G0_0_1_1_0_0 + 1.47777777777777*G0_0_1_2_0_1 - 0.919047619047612*G0_0_1_3_0_0 - 0.103968253968252*G0_0_1_3_0_1 + 2.70476190476189*G0_0_1_4_0_0 + 0.586507936507934*G0_0_1_4_0_1 + 1.18571428571428*G0_0_1_5_0_0 + 1.15158730158729*G0_0_1_5_0_1 - 2.70476190476189*G0_0_1_6_0_0 - 2.35317460317459*G0_0_1_6_0_1 + 0.0507936507936509*G0_0_1_7_0_0 + 0.0849206349206351*G0_0_1_7_0_1 + 0.0507936507936487*G0_0_1_8_0_0 + 0.103968253968252*G0_0_1_8_0_1 - 0.266666666666665*G0_0_1_9_0_0 - 0.671428571428569*G0_0_1_9_0_1 - 0.276190476190475*G0_0_1_10_1_0 - 0.276190476190475*G0_0_1_10_1_1 + 0.174603174603174*G0_0_1_11_1_0 + 1.47777777777777*G0_0_1_12_1_1 - 0.919047619047612*G0_0_1_13_1_0 - 0.103968253968252*G0_0_1_13_1_1 + 2.70476190476189*G0_0_1_14_1_0 + 0.586507936507934*G0_0_1_14_1_1 + 1.18571428571428*G0_0_1_15_1_0 + 1.15158730158729*G0_0_1_15_1_1 - 2.70476190476189*G0_0_1_16_1_0 - 2.35317460317459*G0_0_1_16_1_1 + 0.0507936507936509*G0_0_1_17_1_0 + 0.0849206349206351*G0_0_1_17_1_1 + 0.0507936507936487*G0_0_1_18_1_0 + 0.103968253968252*G0_0_1_18_1_1 - 0.266666666666665*G0_0_1_19_1_0 - 0.671428571428569*G0_0_1_19_1_1 - 0.540423280423278*G0_1_1_0_0_0 - 0.540423280423278*G0_1_1_0_0_1 + 0.122962962962963*G0_1_1_1_0_0 + 1.27883597883597*G0_1_1_2_0_1 - 0.675396825396821*G0_1_1_3_0_0 - 0.106666666666665*G0_1_1_3_0_1 + 2.1579365079365*G0_1_1_4_0_0 + 0.433333333333331*G0_1_1_4_0_1 + 0.946825396825391*G0_1_1_5_0_0 + 1.53936507936507*G0_1_1_5_0_1 - 2.1579365079365*G0_1_1_6_0_0 - 2.27777777777777*G0_1_1_6_0_1 + 0.336349206349204*G0_1_1_7_0_0 - 0.256190476190475*G0_1_1_7_0_1 + 0.0811111111111098*G0_1_1_8_0_0 + 0.106666666666665*G0_1_1_8_0_1 - 0.27142857142857*G0_1_1_9_0_0 - 0.177142857142857*G0_1_1_9_0_1 - 0.540423280423278*G0_1_1_10_1_0 - 0.540423280423278*G0_1_1_10_1_1 + 0.122962962962963*G0_1_1_11_1_0 + 1.27883597883597*G0_1_1_12_1_1 - 0.675396825396821*G0_1_1_13_1_0 - 0.106666666666665*G0_1_1_13_1_1 + 2.1579365079365*G0_1_1_14_1_0 + 0.433333333333331*G0_1_1_14_1_1 + 0.946825396825391*G0_1_1_15_1_0 + 1.53936507936507*G0_1_1_15_1_1 - 2.1579365079365*G0_1_1_16_1_0 - 2.27777777777777*G0_1_1_16_1_1 + 0.336349206349204*G0_1_1_17_1_0 - 0.256190476190475*G0_1_1_17_1_1 + 0.0811111111111098*G0_1_1_18_1_0 + 0.106666666666665*G0_1_1_18_1_1 - 0.27142857142857*G0_1_1_19_1_0 - 0.177142857142857*G0_1_1_19_1_1;
    A[601] = 0.0;
    A[710] = A[245];
    A[634] = 0.0;
    A[671] = 0.0;
    A[449] = 0.0;
    A[474] = A[270] - 2.80423280423279*G0_0_1_0_0_0 - 2.80423280423279*G0_0_1_0_0_1 + 0.423280423280421*G0_0_1_1_0_0 + 0.423280423280421*G0_0_1_2_0_1 - 0.14920634920635*G0_0_1_3_0_0 - 0.149206349206347*G0_0_1_3_0_1 - 0.14920634920635*G0_0_1_4_0_0 - 0.149206349206351*G0_0_1_4_0_1 - 0.860317460317457*G0_0_1_5_0_0 + 4.25714285714284*G0_0_1_5_0_1 + 0.14920634920635*G0_0_1_6_0_0 - 1.87619047619047*G0_0_1_6_0_1 + 4.25714285714284*G0_0_1_7_0_0 - 0.860317460317457*G0_0_1_7_0_1 - 1.87619047619047*G0_0_1_8_0_0 + 0.149206349206347*G0_0_1_8_0_1 + 1.00952380952381*G0_0_1_9_0_0 + 1.00952380952381*G0_0_1_9_0_1 - 2.80423280423279*G0_0_1_10_1_0 - 2.80423280423279*G0_0_1_10_1_1 + 0.423280423280421*G0_0_1_11_1_0 + 0.423280423280421*G0_0_1_12_1_1 - 0.14920634920635*G0_0_1_13_1_0 - 0.149206349206347*G0_0_1_13_1_1 - 0.14920634920635*G0_0_1_14_1_0 - 0.149206349206351*G0_0_1_14_1_1 - 0.860317460317457*G0_0_1_15_1_0 + 4.25714285714284*G0_0_1_15_1_1 + 0.14920634920635*G0_0_1_16_1_0 - 1.87619047619047*G0_0_1_16_1_1 + 4.25714285714284*G0_0_1_17_1_0 - 0.860317460317457*G0_0_1_17_1_1 - 1.87619047619047*G0_0_1_18_1_0 + 0.149206349206347*G0_0_1_18_1_1 + 1.00952380952381*G0_0_1_19_1_0 + 1.00952380952381*G0_0_1_19_1_1 + 2.80423280423279*G0_1_0_0_0_0 + 2.80423280423279*G0_1_0_0_0_1 - 0.423280423280421*G0_1_0_1_0_0 - 0.423280423280421*G0_1_0_2_0_1 + 0.14920634920635*G0_1_0_3_0_0 + 0.149206349206347*G0_1_0_3_0_1 + 0.14920634920635*G0_1_0_4_0_0 + 0.149206349206351*G0_1_0_4_0_1 + 0.860317460317457*G0_1_0_5_0_0 - 4.25714285714284*G0_1_0_5_0_1 - 0.14920634920635*G0_1_0_6_0_0 + 1.87619047619047*G0_1_0_6_0_1 - 4.25714285714284*G0_1_0_7_0_0 + 0.860317460317457*G0_1_0_7_0_1 + 1.87619047619047*G0_1_0_8_0_0 - 0.149206349206347*G0_1_0_8_0_1 - 1.00952380952381*G0_1_0_9_0_0 - 1.00952380952381*G0_1_0_9_0_1 + 2.80423280423279*G0_1_0_10_1_0 + 2.80423280423279*G0_1_0_10_1_1 - 0.423280423280421*G0_1_0_11_1_0 - 0.423280423280421*G0_1_0_12_1_1 + 0.14920634920635*G0_1_0_13_1_0 + 0.149206349206347*G0_1_0_13_1_1 + 0.14920634920635*G0_1_0_14_1_0 + 0.149206349206351*G0_1_0_14_1_1 + 0.860317460317457*G0_1_0_15_1_0 - 4.25714285714284*G0_1_0_15_1_1 - 0.14920634920635*G0_1_0_16_1_0 + 1.87619047619047*G0_1_0_16_1_1 - 4.25714285714284*G0_1_0_17_1_0 + 0.860317460317457*G0_1_0_17_1_1 + 1.87619047619047*G0_1_0_18_1_0 - 0.149206349206347*G0_1_0_18_1_1 - 1.00952380952381*G0_1_0_19_1_0 - 1.00952380952381*G0_1_0_19_1_1;
    A[645] = A[474] - 2.80423280423279*G0_0_0_0_0_0 - 2.80423280423279*G0_0_0_0_0_1 + 0.620105820105817*G0_0_0_1_0_0 + 0.226455026455025*G0_0_0_2_0_1 - 0.0380952380952395*G0_0_0_3_0_0 + 0.158730158730159*G0_0_0_3_0_1 - 0.457142857142856*G0_0_0_4_0_0 - 0.260317460317461*G0_0_0_4_0_1 - 1.14285714285714*G0_0_0_5_0_0 + 3.97460317460316*G0_0_0_5_0_1 + 0.457142857142856*G0_0_0_6_0_0 - 1.39682539682539*G0_0_0_6_0_1 + 4.53968253968252*G0_0_0_7_0_0 - 0.577777777777776*G0_0_0_7_0_1 - 2.35555555555554*G0_0_0_8_0_0 - 0.158730158730159*G0_0_0_8_0_1 + 1.18095238095238*G0_0_0_9_0_0 + 0.838095238095238*G0_0_0_9_0_1 - 2.80423280423279*G0_0_0_10_1_0 - 2.80423280423279*G0_0_0_10_1_1 + 0.620105820105817*G0_0_0_11_1_0 + 0.226455026455025*G0_0_0_12_1_1 - 0.0380952380952395*G0_0_0_13_1_0 + 0.158730158730159*G0_0_0_13_1_1 - 0.457142857142856*G0_0_0_14_1_0 - 0.260317460317461*G0_0_0_14_1_1 - 1.14285714285714*G0_0_0_15_1_0 + 3.97460317460316*G0_0_0_15_1_1 + 0.457142857142856*G0_0_0_16_1_0 - 1.39682539682539*G0_0_0_16_1_1 + 4.53968253968252*G0_0_0_17_1_0 - 0.577777777777776*G0_0_0_17_1_1 - 2.35555555555554*G0_0_0_18_1_0 - 0.158730158730159*G0_0_0_18_1_1 + 1.18095238095238*G0_0_0_19_1_0 + 0.838095238095238*G0_0_0_19_1_1 + 0.196825396825395*G0_0_1_1_0_0 - 0.196825396825396*G0_0_1_2_0_1 + 0.111111111111111*G0_0_1_3_0_0 + 0.307936507936506*G0_0_1_3_0_1 - 0.307936507936507*G0_0_1_4_0_0 - 0.11111111111111*G0_0_1_4_0_1 - 0.28253968253968*G0_0_1_5_0_0 - 0.282539682539683*G0_0_1_5_0_1 + 0.307936507936507*G0_0_1_6_0_0 + 0.479365079365077*G0_0_1_6_0_1 + 0.282539682539679*G0_0_1_7_0_0 + 0.282539682539682*G0_0_1_7_0_1 - 0.479365079365076*G0_0_1_8_0_0 - 0.307936507936506*G0_0_1_8_0_1 + 0.171428571428569*G0_0_1_9_0_0 - 0.171428571428572*G0_0_1_9_0_1 + 0.196825396825395*G0_0_1_11_1_0 - 0.196825396825396*G0_0_1_12_1_1 + 0.111111111111111*G0_0_1_13_1_0 + 0.307936507936506*G0_0_1_13_1_1 - 0.307936507936507*G0_0_1_14_1_0 - 0.11111111111111*G0_0_1_14_1_1 - 0.28253968253968*G0_0_1_15_1_0 - 0.282539682539683*G0_0_1_15_1_1 + 0.307936507936507*G0_0_1_16_1_0 + 0.479365079365077*G0_0_1_16_1_1 + 0.282539682539679*G0_0_1_17_1_0 + 0.282539682539682*G0_0_1_17_1_1 - 0.479365079365076*G0_0_1_18_1_0 - 0.307936507936506*G0_0_1_18_1_1 + 0.171428571428569*G0_0_1_19_1_0 - 0.171428571428572*G0_0_1_19_1_1 + 0.196825396825396*G0_1_0_1_0_0 - 0.196825396825395*G0_1_0_2_0_1 + 0.11111111111111*G0_1_0_3_0_0 + 0.307936507936506*G0_1_0_3_0_1 - 0.307936507936506*G0_1_0_4_0_0 - 0.11111111111111*G0_1_0_4_0_1 - 0.282539682539681*G0_1_0_5_0_0 - 0.282539682539681*G0_1_0_5_0_1 + 0.307936507936506*G0_1_0_6_0_0 + 0.479365079365076*G0_1_0_6_0_1 + 0.282539682539685*G0_1_0_7_0_0 + 0.28253968253968*G0_1_0_7_0_1 - 0.479365079365077*G0_1_0_8_0_0 - 0.307936507936506*G0_1_0_8_0_1 + 0.171428571428571*G0_1_0_9_0_0 - 0.17142857142857*G0_1_0_9_0_1 + 0.196825396825396*G0_1_0_11_1_0 - 0.196825396825395*G0_1_0_12_1_1 + 0.11111111111111*G0_1_0_13_1_0 + 0.307936507936506*G0_1_0_13_1_1 - 0.307936507936506*G0_1_0_14_1_0 - 0.11111111111111*G0_1_0_14_1_1 - 0.282539682539681*G0_1_0_15_1_0 - 0.282539682539681*G0_1_0_15_1_1 + 0.307936507936506*G0_1_0_16_1_0 + 0.479365079365076*G0_1_0_16_1_1 + 0.282539682539685*G0_1_0_17_1_0 + 0.28253968253968*G0_1_0_17_1_1 - 0.479365079365077*G0_1_0_18_1_0 - 0.307936507936506*G0_1_0_18_1_1 + 0.171428571428571*G0_1_0_19_1_0 - 0.17142857142857*G0_1_0_19_1_1 + 2.80423280423279*G0_1_1_0_0_0 + 2.80423280423279*G0_1_1_0_0_1 - 0.226455026455026*G0_1_1_1_0_0 - 0.620105820105817*G0_1_1_2_0_1 + 0.260317460317461*G0_1_1_3_0_0 + 0.457142857142852*G0_1_1_3_0_1 - 0.158730158730157*G0_1_1_4_0_0 + 0.0380952380952406*G0_1_1_4_0_1 + 0.577777777777776*G0_1_1_5_0_0 - 4.53968253968252*G0_1_1_5_0_1 + 0.158730158730157*G0_1_1_6_0_0 + 2.35555555555554*G0_1_1_6_0_1 - 3.97460317460315*G0_1_1_7_0_0 + 1.14285714285714*G0_1_1_7_0_1 + 1.39682539682539*G0_1_1_8_0_0 - 0.457142857142853*G0_1_1_8_0_1 - 0.838095238095236*G0_1_1_9_0_0 - 1.18095238095238*G0_1_1_9_0_1 + 2.80423280423279*G0_1_1_10_1_0 + 2.80423280423279*G0_1_1_10_1_1 - 0.226455026455026*G0_1_1_11_1_0 - 0.620105820105817*G0_1_1_12_1_1 + 0.260317460317461*G0_1_1_13_1_0 + 0.457142857142852*G0_1_1_13_1_1 - 0.158730158730157*G0_1_1_14_1_0 + 0.0380952380952406*G0_1_1_14_1_1 + 0.577777777777776*G0_1_1_15_1_0 - 4.53968253968252*G0_1_1_15_1_1 + 0.158730158730157*G0_1_1_16_1_0 + 2.35555555555554*G0_1_1_16_1_1 - 3.97460317460315*G0_1_1_17_1_0 + 1.14285714285714*G0_1_1_17_1_1 + 1.39682539682539*G0_1_1_18_1_0 - 0.457142857142853*G0_1_1_18_1_1 - 0.838095238095236*G0_1_1_19_1_0 - 1.18095238095238*G0_1_1_19_1_1;
    A[338] = A[803];
    A[19] = 0.0;
    A[379] = 0.0;
    A[48] = 0.0;
    A[763] = 0.0;
    A[456] = 0.0;
    A[408] = 0.0;
    A[85] = 0.0;
    A[790] = 0.0;
    A[9] = A[474];
    A[813] = 0.0;
    A[127] = A[679] + 0.0304761904761941*G0_0_1_0_0_0 + 0.0304761904761939*G0_0_1_0_0_1 - 0.0304761904761943*G0_0_1_1_0_0 - 0.133333333333332*G0_0_1_2_0_1 + 0.133333333333325*G0_0_1_3_0_0 - 0.0780952380952467*G0_0_1_3_0_1 - 0.0380952380952372*G0_0_1_4_0_0 + 0.276190476190472*G0_0_1_4_0_1 - 0.133333333333331*G0_0_1_5_0_0 - 0.211428571428574*G0_0_1_5_0_1 + 0.0380952380952371*G0_0_1_6_0_0 + 0.314285714285713*G0_0_1_6_0_1 + 0.13714285714285*G0_0_1_7_0_0 + 0.215238095238093*G0_0_1_7_0_1 - 0.13714285714285*G0_0_1_8_0_0 + 0.0780952380952466*G0_0_1_8_0_1 - 0.491428571428565*G0_0_1_9_0_1 + 0.0304761904761941*G0_0_1_10_1_0 + 0.0304761904761939*G0_0_1_10_1_1 - 0.0304761904761943*G0_0_1_11_1_0 - 0.133333333333332*G0_0_1_12_1_1 + 0.133333333333325*G0_0_1_13_1_0 - 0.0780952380952467*G0_0_1_13_1_1 - 0.0380952380952372*G0_0_1_14_1_0 + 0.276190476190472*G0_0_1_14_1_1 - 0.133333333333331*G0_0_1_15_1_0 - 0.211428571428574*G0_0_1_15_1_1 + 0.0380952380952371*G0_0_1_16_1_0 + 0.314285714285713*G0_0_1_16_1_1 + 0.13714285714285*G0_0_1_17_1_0 + 0.215238095238093*G0_0_1_17_1_1 - 0.13714285714285*G0_0_1_18_1_0 + 0.0780952380952466*G0_0_1_18_1_1 - 0.491428571428565*G0_0_1_19_1_1 - 0.0304761904761942*G0_1_0_0_0_0 - 0.030476190476194*G0_1_0_0_0_1 + 0.0304761904761943*G0_1_0_1_0_0 + 0.133333333333333*G0_1_0_2_0_1 - 0.133333333333325*G0_1_0_3_0_0 + 0.0780952380952467*G0_1_0_3_0_1 + 0.0380952380952373*G0_1_0_4_0_0 - 0.276190476190472*G0_1_0_4_0_1 + 0.133333333333331*G0_1_0_5_0_0 + 0.211428571428574*G0_1_0_5_0_1 - 0.0380952380952374*G0_1_0_6_0_0 - 0.314285714285713*G0_1_0_6_0_1 - 0.13714285714285*G0_1_0_7_0_0 - 0.215238095238093*G0_1_0_7_0_1 + 0.13714285714285*G0_1_0_8_0_0 - 0.0780952380952465*G0_1_0_8_0_1 + 0.491428571428565*G0_1_0_9_0_1 - 0.0304761904761942*G0_1_0_10_1_0 - 0.030476190476194*G0_1_0_10_1_1 + 0.0304761904761943*G0_1_0_11_1_0 + 0.133333333333333*G0_1_0_12_1_1 - 0.133333333333325*G0_1_0_13_1_0 + 0.0780952380952467*G0_1_0_13_1_1 + 0.0380952380952373*G0_1_0_14_1_0 - 0.276190476190472*G0_1_0_14_1_1 + 0.133333333333331*G0_1_0_15_1_0 + 0.211428571428574*G0_1_0_15_1_1 - 0.0380952380952374*G0_1_0_16_1_0 - 0.314285714285713*G0_1_0_16_1_1 - 0.13714285714285*G0_1_0_17_1_0 - 0.215238095238093*G0_1_0_17_1_1 + 0.13714285714285*G0_1_0_18_1_0 - 0.0780952380952465*G0_1_0_18_1_1 + 0.491428571428565*G0_1_0_19_1_1;
    A[844] = 0.0;
    A[879] = 0.0;
    A[482] = 0.0;
    A[201] = 0.0;
    A[513] = 0.0;
    A[226] = 0.0;
    A[608] = 0.0;
    A[548] = 0.0;
    A[643] = 0.0;
    A[662] = 0.0;
    A[285] = 0.0;
    A[701] = 0.0;
    A[260] = 0.0;
    A[331] = 0.480423280423279*G0_0_0_0_0_0 + 0.480423280423278*G0_0_0_0_0_1 - 2.02962962962962*G0_0_0_1_0_0 - 0.283597883597882*G0_0_0_2_0_1 - 0.577777777777774*G0_0_0_3_0_0 - 3.56507936507935*G0_0_0_3_0_1 + 0.0507936507936514*G0_0_0_4_0_0 + 1.29206349206349*G0_0_0_4_0_1 + 0.158730158730159*G0_0_0_5_0_0 - 0.098412698412698*G0_0_0_5_0_1 - 0.0507936507936515*G0_0_0_6_0_0 - 0.0984126984126976*G0_0_0_6_0_1 - 1.72063492063491*G0_0_0_7_0_0 - 1.46349206349205*G0_0_0_7_0_1 + 3.26984126984125*G0_0_0_8_0_0 + 3.56507936507935*G0_0_0_8_0_1 + 0.419047619047615*G0_0_0_9_0_0 + 0.171428571428567*G0_0_0_9_0_1 + 0.480423280423279*G0_0_0_10_1_0 + 0.480423280423278*G0_0_0_10_1_1 - 2.02962962962962*G0_0_0_11_1_0 - 0.283597883597882*G0_0_0_12_1_1 - 0.577777777777774*G0_0_0_13_1_0 - 3.56507936507935*G0_0_0_13_1_1 + 0.0507936507936514*G0_0_0_14_1_0 + 1.29206349206349*G0_0_0_14_1_1 + 0.158730158730159*G0_0_0_15_1_0 - 0.098412698412698*G0_0_0_15_1_1 - 0.0507936507936515*G0_0_0_16_1_0 - 0.0984126984126976*G0_0_0_16_1_1 - 1.72063492063491*G0_0_0_17_1_0 - 1.46349206349205*G0_0_0_17_1_1 + 3.26984126984125*G0_0_0_18_1_0 + 3.56507936507935*G0_0_0_18_1_1 + 0.419047619047615*G0_0_0_19_1_0 + 0.171428571428567*G0_0_0_19_1_1 + 0.423280423280422*G0_1_0_0_0_0 + 0.423280423280421*G0_1_0_0_0_1 - 2.80423280423279*G0_1_0_1_0_0 - 0.423280423280421*G0_1_0_2_0_1 - 0.860317460317454*G0_1_0_3_0_0 - 5.11746031746029*G0_1_0_3_0_1 + 0.149206349206349*G0_1_0_4_0_0 + 2.02539682539681*G0_1_0_4_0_1 - 0.149206349206346*G0_1_0_5_0_0 - 0.14920634920635*G0_1_0_6_0_0 - 1.87619047619047*G0_1_0_7_0_0 - 2.02539682539681*G0_1_0_7_0_1 + 4.25714285714283*G0_1_0_8_0_0 + 5.11746031746029*G0_1_0_8_0_1 + 1.0095238095238*G0_1_0_9_0_0 + 0.423280423280422*G0_1_0_10_1_0 + 0.423280423280421*G0_1_0_10_1_1 - 2.80423280423279*G0_1_0_11_1_0 - 0.423280423280421*G0_1_0_12_1_1 - 0.860317460317454*G0_1_0_13_1_0 - 5.11746031746029*G0_1_0_13_1_1 + 0.149206349206349*G0_1_0_14_1_0 + 2.02539682539681*G0_1_0_14_1_1 - 0.149206349206346*G0_1_0_15_1_0 - 0.14920634920635*G0_1_0_16_1_0 - 1.87619047619047*G0_1_0_17_1_0 - 2.02539682539681*G0_1_0_17_1_1 + 4.25714285714283*G0_1_0_18_1_0 + 5.11746031746029*G0_1_0_18_1_1 + 1.0095238095238*G0_1_0_19_1_0;
    A[287] = 0.0;
    A[743] = A[803] + 0.0609523809523808*G0_0_0_0_0_0 + 0.0609523809523807*G0_0_0_0_0_1 - 0.0609523809523802*G0_0_0_1_0_0 - 0.0609523809523791*G0_0_0_3_0_1 - 0.0609523809523822*G0_0_0_5_0_1 - 0.18285714285714*G0_0_0_7_0_0 - 0.121904761904759*G0_0_0_7_0_1 + 0.18285714285714*G0_0_0_8_0_0 + 0.0609523809523792*G0_0_0_8_0_1 + 0.12190476190476*G0_0_0_9_0_1 + 0.0609523809523808*G0_0_0_10_1_0 + 0.0609523809523807*G0_0_0_10_1_1 - 0.0609523809523802*G0_0_0_11_1_0 - 0.0609523809523791*G0_0_0_13_1_1 - 0.0609523809523822*G0_0_0_15_1_1 - 0.18285714285714*G0_0_0_17_1_0 - 0.121904761904759*G0_0_0_17_1_1 + 0.18285714285714*G0_0_0_18_1_0 + 0.0609523809523792*G0_0_0_18_1_1 + 0.12190476190476*G0_0_0_19_1_1 - 0.629841269841267*G0_0_1_0_0_0 - 0.629841269841267*G0_0_1_0_0_1 - 0.0203174603174587*G0_0_1_1_0_0 + 0.243809523809524*G0_0_1_3_0_0 - 0.223492063492059*G0_0_1_3_0_1 + 0.446984126984123*G0_0_1_4_0_1 + 0.243809523809522*G0_0_1_5_0_0 + 1.07682539682539*G0_0_1_5_0_1 - 0.446984126984123*G0_0_1_6_0_1 + 1.23936507936507*G0_0_1_7_0_0 + 0.406349206349205*G0_0_1_7_0_1 - 0.589206349206348*G0_0_1_8_0_0 + 0.223492063492058*G0_0_1_8_0_1 - 0.487619047619046*G0_0_1_9_0_0 - 0.853333333333328*G0_0_1_9_0_1 - 0.629841269841267*G0_0_1_10_1_0 - 0.629841269841267*G0_0_1_10_1_1 - 0.0203174603174587*G0_0_1_11_1_0 + 0.243809523809524*G0_0_1_13_1_0 - 0.223492063492059*G0_0_1_13_1_1 + 0.446984126984123*G0_0_1_14_1_1 + 0.243809523809522*G0_0_1_15_1_0 + 1.07682539682539*G0_0_1_15_1_1 - 0.446984126984123*G0_0_1_16_1_1 + 1.23936507936507*G0_0_1_17_1_0 + 0.406349206349205*G0_0_1_17_1_1 - 0.589206349206348*G0_0_1_18_1_0 + 0.223492063492058*G0_0_1_18_1_1 - 0.487619047619046*G0_0_1_19_1_0 - 0.853333333333328*G0_0_1_19_1_1 - 0.101587301587301*G0_1_0_0_0_0 - 0.101587301587301*G0_1_0_0_0_1 - 0.16253968253968*G0_1_0_1_0_0 + 0.0609523809523822*G0_1_0_3_0_0 - 0.264126984126979*G0_1_0_3_0_1 + 0.162539682539681*G0_1_0_4_0_1 + 0.0609523809523807*G0_1_0_5_0_0 + 0.264126984126982*G0_1_0_5_0_1 - 0.162539682539681*G0_1_0_6_0_1 + 0.040634920634921*G0_1_0_7_0_0 - 0.16253968253968*G0_1_0_7_0_1 + 0.22349206349206*G0_1_0_8_0_0 + 0.264126984126979*G0_1_0_8_0_1 - 0.121904761904763*G0_1_0_9_0_0 - 0.101587301587301*G0_1_0_10_1_0 - 0.101587301587301*G0_1_0_10_1_1 - 0.16253968253968*G0_1_0_11_1_0 + 0.0609523809523822*G0_1_0_13_1_0 - 0.264126984126979*G0_1_0_13_1_1 + 0.162539682539681*G0_1_0_14_1_1 + 0.0609523809523807*G0_1_0_15_1_0 + 0.264126984126982*G0_1_0_15_1_1 - 0.162539682539681*G0_1_0_16_1_1 + 0.040634920634921*G0_1_0_17_1_0 - 0.16253968253968*G0_1_0_17_1_1 + 0.22349206349206*G0_1_0_18_1_0 + 0.264126984126979*G0_1_0_18_1_1 - 0.121904761904763*G0_1_0_19_1_0 + 0.602751322751318*G0_1_1_0_0_0 + 0.602751322751319*G0_1_1_0_0_1 + 0.0880423280423308*G0_1_1_1_0_0 - 0.196402116402115*G0_1_1_2_0_1 - 0.12190476190476*G0_1_1_3_0_0 + 0.020317460317465*G0_1_1_3_0_1 + 0.243809523809523*G0_1_1_4_0_0 + 0.386031746031743*G0_1_1_4_0_1 - 0.243809523809524*G0_1_1_5_0_0 - 1.42222222222221*G0_1_1_5_0_1 - 0.243809523809523*G0_1_1_6_0_0 + 1.01587301587301*G0_1_1_6_0_1 - 0.345396825396821*G0_1_1_7_0_0 + 0.83301587301587*G0_1_1_7_0_1 - 0.345396825396829*G0_1_1_8_0_0 - 0.020317460317465*G0_1_1_8_0_1 + 0.365714285714284*G0_1_1_9_0_0 - 1.21904761904761*G0_1_1_9_0_1 + 0.602751322751318*G0_1_1_10_1_0 + 0.602751322751319*G0_1_1_10_1_1 + 0.0880423280423308*G0_1_1_11_1_0 - 0.196402116402115*G0_1_1_12_1_1 - 0.12190476190476*G0_1_1_13_1_0 + 0.020317460317465*G0_1_1_13_1_1 + 0.243809523809523*G0_1_1_14_1_0 + 0.386031746031743*G0_1_1_14_1_1 - 0.243809523809524*G0_1_1_15_1_0 - 1.42222222222221*G0_1_1_15_1_1 - 0.243809523809523*G0_1_1_16_1_0 + 1.01587301587301*G0_1_1_16_1_1 - 0.345396825396821*G0_1_1_17_1_0 + 0.83301587301587*G0_1_1_17_1_1 - 0.345396825396829*G0_1_1_18_1_0 - 0.020317460317465*G0_1_1_18_1_1 + 0.365714285714284*G0_1_1_19_1_0 - 1.21904761904761*G0_1_1_19_1_1;
    A[322] = 0.0;
    A[772] = A[307];
    A[465] = A[527] - 1.2329365079365*G0_0_0_0_0_0 - 1.2329365079365*G0_0_0_0_0_1 + 0.213888888888888*G0_0_0_1_0_0 + 0.213888888888888*G0_0_0_2_0_1 + 0.0115079365079355*G0_0_0_3_0_0 + 0.0115079365079371*G0_0_0_3_0_1 + 0.0115079365079357*G0_0_0_4_0_0 + 0.0115079365079352*G0_0_0_4_0_1 - 0.306746031746031*G0_0_0_5_0_0 + 1.89047619047618*G0_0_0_5_0_1 - 0.0115079365079358*G0_0_0_6_0_0 - 0.871428571428568*G0_0_0_6_0_1 + 1.89047619047618*G0_0_0_7_0_0 - 0.306746031746031*G0_0_0_7_0_1 - 0.871428571428567*G0_0_0_8_0_0 - 0.011507936507937*G0_0_0_8_0_1 + 0.295238095238095*G0_0_0_9_0_0 + 0.295238095238096*G0_0_0_9_0_1 - 1.2329365079365*G0_0_0_10_1_0 - 1.2329365079365*G0_0_0_10_1_1 + 0.213888888888888*G0_0_0_11_1_0 + 0.213888888888888*G0_0_0_12_1_1 + 0.0115079365079355*G0_0_0_13_1_0 + 0.0115079365079371*G0_0_0_13_1_1 + 0.0115079365079357*G0_0_0_14_1_0 + 0.0115079365079352*G0_0_0_14_1_1 - 0.306746031746031*G0_0_0_15_1_0 + 1.89047619047618*G0_0_0_15_1_1 - 0.0115079365079358*G0_0_0_16_1_0 - 0.871428571428568*G0_0_0_16_1_1 + 1.89047619047618*G0_0_0_17_1_0 - 0.306746031746031*G0_0_0_17_1_1 - 0.871428571428567*G0_0_0_18_1_0 - 0.011507936507937*G0_0_0_18_1_1 + 0.295238095238095*G0_0_0_19_1_0 + 0.295238095238096*G0_0_0_19_1_1 - 1.2329365079365*G0_0_1_0_0_0 - 1.2329365079365*G0_0_1_0_0_1 + 0.213888888888888*G0_0_1_1_0_0 + 0.213888888888888*G0_0_1_2_0_1 + 0.0115079365079353*G0_0_1_3_0_0 + 0.0115079365079369*G0_0_1_3_0_1 + 0.0115079365079362*G0_0_1_4_0_0 + 0.0115079365079353*G0_0_1_4_0_1 - 0.306746031746031*G0_0_1_5_0_0 + 1.89047619047618*G0_0_1_5_0_1 - 0.0115079365079362*G0_0_1_6_0_0 - 0.871428571428568*G0_0_1_6_0_1 + 1.89047619047618*G0_0_1_7_0_0 - 0.306746031746031*G0_0_1_7_0_1 - 0.871428571428567*G0_0_1_8_0_0 - 0.0115079365079369*G0_0_1_8_0_1 + 0.295238095238095*G0_0_1_9_0_0 + 0.295238095238096*G0_0_1_9_0_1 - 1.2329365079365*G0_0_1_10_1_0 - 1.2329365079365*G0_0_1_10_1_1 + 0.213888888888888*G0_0_1_11_1_0 + 0.213888888888888*G0_0_1_12_1_1 + 0.0115079365079353*G0_0_1_13_1_0 + 0.0115079365079369*G0_0_1_13_1_1 + 0.0115079365079362*G0_0_1_14_1_0 + 0.0115079365079353*G0_0_1_14_1_1 - 0.306746031746031*G0_0_1_15_1_0 + 1.89047619047618*G0_0_1_15_1_1 - 0.0115079365079362*G0_0_1_16_1_0 - 0.871428571428568*G0_0_1_16_1_1 + 1.89047619047618*G0_0_1_17_1_0 - 0.306746031746031*G0_0_1_17_1_1 - 0.871428571428567*G0_0_1_18_1_0 - 0.0115079365079369*G0_0_1_18_1_1 + 0.295238095238095*G0_0_1_19_1_0 + 0.295238095238096*G0_0_1_19_1_1 - 1.2329365079365*G0_1_0_0_0_0 - 1.2329365079365*G0_1_0_0_0_1 + 0.213888888888888*G0_1_0_1_0_0 + 0.213888888888888*G0_1_0_2_0_1 + 0.0115079365079353*G0_1_0_3_0_0 + 0.0115079365079369*G0_1_0_3_0_1 + 0.0115079365079362*G0_1_0_4_0_0 + 0.0115079365079353*G0_1_0_4_0_1 - 0.306746031746031*G0_1_0_5_0_0 + 1.89047619047618*G0_1_0_5_0_1 - 0.0115079365079362*G0_1_0_6_0_0 - 0.871428571428568*G0_1_0_6_0_1 + 1.89047619047618*G0_1_0_7_0_0 - 0.306746031746031*G0_1_0_7_0_1 - 0.871428571428567*G0_1_0_8_0_0 - 0.0115079365079369*G0_1_0_8_0_1 + 0.295238095238095*G0_1_0_9_0_0 + 0.295238095238096*G0_1_0_9_0_1 - 1.2329365079365*G0_1_0_10_1_0 - 1.2329365079365*G0_1_0_10_1_1 + 0.213888888888888*G0_1_0_11_1_0 + 0.213888888888888*G0_1_0_12_1_1 + 0.0115079365079353*G0_1_0_13_1_0 + 0.0115079365079369*G0_1_0_13_1_1 + 0.0115079365079362*G0_1_0_14_1_0 + 0.0115079365079353*G0_1_0_14_1_1 - 0.306746031746031*G0_1_0_15_1_0 + 1.89047619047618*G0_1_0_15_1_1 - 0.0115079365079362*G0_1_0_16_1_0 - 0.871428571428568*G0_1_0_16_1_1 + 1.89047619047618*G0_1_0_17_1_0 - 0.306746031746031*G0_1_0_17_1_1 - 0.871428571428567*G0_1_0_18_1_0 - 0.0115079365079369*G0_1_0_18_1_1 + 0.295238095238095*G0_1_0_19_1_0 + 0.295238095238096*G0_1_0_19_1_1 - 1.01904761904761*G0_1_1_0_0_0 - 1.01904761904762*G0_1_1_0_0_1 - 1.01904761904761*G0_1_1_2_0_1 + 0.871428571428565*G0_1_1_3_0_0 - 2.18571428571428*G0_1_1_4_0_0 - 0.295238095238095*G0_1_1_4_0_1 - 1.16666666666666*G0_1_1_5_0_0 + 1.01904761904762*G0_1_1_5_0_1 + 2.18571428571428*G0_1_1_6_0_0 + 1.01904761904761*G0_1_1_6_0_1 + 1.89047619047618*G0_1_1_7_0_0 - 0.295238095238095*G0_1_1_7_0_1 - 0.871428571428566*G0_1_1_8_0_0 + 0.295238095238096*G0_1_1_9_0_0 + 0.590476190476191*G0_1_1_9_0_1 - 1.01904761904761*G0_1_1_10_1_0 - 1.01904761904762*G0_1_1_10_1_1 - 1.01904761904761*G0_1_1_12_1_1 + 0.871428571428565*G0_1_1_13_1_0 - 2.18571428571428*G0_1_1_14_1_0 - 0.295238095238095*G0_1_1_14_1_1 - 1.16666666666666*G0_1_1_15_1_0 + 1.01904761904762*G0_1_1_15_1_1 + 2.18571428571428*G0_1_1_16_1_0 + 1.01904761904761*G0_1_1_16_1_1 + 1.89047619047618*G0_1_1_17_1_0 - 0.295238095238095*G0_1_1_17_1_1 - 0.871428571428566*G0_1_1_18_1_0 + 0.295238095238096*G0_1_1_19_1_0 + 0.590476190476191*G0_1_1_19_1_1;
    A[76] = 0.0;
    A[0] = A[465];
    A[43] = 0.125291005291005*G0_0_0_0_0_0 + 0.125291005291004*G0_0_0_0_0_1 - 0.973544973544968*G0_0_0_1_0_0 - 0.0237037037037031*G0_0_0_2_0_1 - 0.799999999999995*G0_0_0_3_0_0 - 2.06349206349205*G0_0_0_3_0_1 + 0.44190476190476*G0_0_0_4_0_0 + 0.755555555555551*G0_0_0_4_0_1 - 0.678095238095234*G0_0_0_5_0_0 - 0.306031746031744*G0_0_0_5_0_1 - 0.441904761904761*G0_0_0_6_0_0 + 0.204444444444443*G0_0_0_6_0_1 - 0.650158730158726*G0_0_0_7_0_0 - 1.02222222222222*G0_0_0_7_0_1 + 1.49841269841269*G0_0_0_8_0_0 + 2.06349206349205*G0_0_0_8_0_1 + 1.47809523809523*G0_0_0_9_0_0 + 0.266666666666663*G0_0_0_9_0_1 + 0.125291005291005*G0_0_0_10_1_0 + 0.125291005291004*G0_0_0_10_1_1 - 0.973544973544968*G0_0_0_11_1_0 - 0.0237037037037031*G0_0_0_12_1_1 - 0.799999999999995*G0_0_0_13_1_0 - 2.06349206349205*G0_0_0_13_1_1 + 0.44190476190476*G0_0_0_14_1_0 + 0.755555555555551*G0_0_0_14_1_1 - 0.678095238095234*G0_0_0_15_1_0 - 0.306031746031744*G0_0_0_15_1_1 - 0.441904761904761*G0_0_0_16_1_0 + 0.204444444444443*G0_0_0_16_1_1 - 0.650158730158726*G0_0_0_17_1_0 - 1.02222222222222*G0_0_0_17_1_1 + 1.49841269841269*G0_0_0_18_1_0 + 2.06349206349205*G0_0_0_18_1_1 + 1.47809523809523*G0_0_0_19_1_0 + 0.266666666666663*G0_0_0_19_1_1 + 0.101587301587301*G0_0_1_0_0_0 + 0.101587301587301*G0_0_1_0_0_1 + 0.101587301587301*G0_0_1_2_0_1 - 0.234920634920634*G0_0_1_3_0_0 + 0.0698412698412699*G0_0_1_4_0_0 - 0.266666666666664*G0_0_1_4_0_1 - 0.0317460317460319*G0_0_1_5_0_0 - 0.101587301587301*G0_0_1_5_0_1 - 0.0698412698412701*G0_0_1_6_0_0 - 0.101587301587301*G0_0_1_6_0_1 - 0.336507936507934*G0_0_1_7_0_0 - 0.266666666666665*G0_0_1_7_0_1 + 0.234920634920634*G0_0_1_8_0_0 + 0.266666666666666*G0_0_1_9_0_0 + 0.533333333333328*G0_0_1_9_0_1 + 0.101587301587301*G0_0_1_10_1_0 + 0.101587301587301*G0_0_1_10_1_1 + 0.101587301587301*G0_0_1_12_1_1 - 0.234920634920634*G0_0_1_13_1_0 + 0.0698412698412699*G0_0_1_14_1_0 - 0.266666666666664*G0_0_1_14_1_1 - 0.0317460317460319*G0_0_1_15_1_0 - 0.101587301587301*G0_0_1_15_1_1 - 0.0698412698412701*G0_0_1_16_1_0 - 0.101587301587301*G0_0_1_16_1_1 - 0.336507936507934*G0_0_1_17_1_0 - 0.266666666666665*G0_0_1_17_1_1 + 0.234920634920634*G0_0_1_18_1_0 + 0.266666666666666*G0_0_1_19_1_0 + 0.533333333333328*G0_0_1_19_1_1;
    A[843] = 0.0;
    A[70] = A[534] - 0.0885714285714282*G0_1_0_0_0_0 - 0.0885714285714282*G0_1_0_0_0_1 + 0.0409523809523797*G0_1_0_1_0_0 + 0.023809523809526*G0_1_0_3_0_0 + 0.0290476190476185*G0_1_0_3_0_1 + 0.0357142857142856*G0_1_0_4_0_1 + 0.0238095238095217*G0_1_0_5_0_0 + 0.124285714285713*G0_1_0_5_0_1 - 0.0357142857142824*G0_1_0_6_0_1 + 0.218095238095237*G0_1_0_7_0_0 + 0.117619047619046*G0_1_0_7_0_1 - 0.170476190476188*G0_1_0_8_0_0 - 0.0290476190476185*G0_1_0_8_0_1 - 0.0476190476190476*G0_1_0_9_0_0 - 0.153333333333331*G0_1_0_9_0_1 - 0.0885714285714282*G0_1_0_10_1_0 - 0.0885714285714282*G0_1_0_10_1_1 + 0.0409523809523797*G0_1_0_11_1_0 + 0.023809523809526*G0_1_0_13_1_0 + 0.0290476190476185*G0_1_0_13_1_1 + 0.0357142857142856*G0_1_0_14_1_1 + 0.0238095238095217*G0_1_0_15_1_0 + 0.124285714285713*G0_1_0_15_1_1 - 0.0357142857142824*G0_1_0_16_1_1 + 0.218095238095237*G0_1_0_17_1_0 + 0.117619047619046*G0_1_0_17_1_1 - 0.170476190476188*G0_1_0_18_1_0 - 0.0290476190476185*G0_1_0_18_1_1 - 0.0476190476190476*G0_1_0_19_1_0 - 0.153333333333331*G0_1_0_19_1_1 + 0.162539682539682*G0_1_1_0_0_0 + 0.162539682539682*G0_1_1_0_0_1 + 0.00539682539682466*G0_1_1_1_0_0 - 0.0147619047619037*G0_1_1_3_0_0 + 0.0641269841269832*G0_1_1_3_0_1 + 0.0357142857142854*G0_1_1_4_0_0 - 0.0377777777777767*G0_1_1_4_0_1 - 0.0147619047619046*G0_1_1_5_0_0 - 0.27174603174603*G0_1_1_5_0_1 - 0.0357142857142854*G0_1_1_6_0_0 + 0.109206349206349*G0_1_1_6_0_1 - 0.283968253968253*G0_1_1_7_0_0 - 0.0269841269841277*G0_1_1_7_0_1 + 0.116031746031747*G0_1_1_8_0_0 - 0.0641269841269832*G0_1_1_8_0_1 + 0.0295238095238083*G0_1_1_9_0_0 + 0.0647619047619042*G0_1_1_9_0_1 + 0.162539682539682*G0_1_1_10_1_0 + 0.162539682539682*G0_1_1_10_1_1 + 0.00539682539682466*G0_1_1_11_1_0 - 0.0147619047619037*G0_1_1_13_1_0 + 0.0641269841269832*G0_1_1_13_1_1 + 0.0357142857142854*G0_1_1_14_1_0 - 0.0377777777777767*G0_1_1_14_1_1 - 0.0147619047619046*G0_1_1_15_1_0 - 0.27174603174603*G0_1_1_15_1_1 - 0.0357142857142854*G0_1_1_16_1_0 + 0.109206349206349*G0_1_1_16_1_1 - 0.283968253968253*G0_1_1_17_1_0 - 0.0269841269841277*G0_1_1_17_1_1 + 0.116031746031747*G0_1_1_18_1_0 - 0.0641269841269832*G0_1_1_18_1_1 + 0.0295238095238083*G0_1_1_19_1_0 + 0.0647619047619042*G0_1_1_19_1_1;
    A[165] = 0.0;
    A[872] = 0.0;
    A[109] = 0.0;
    A[140] = 0.0;
    A[514] = 0.0;
    A[623] = A[245] + 0.406349206349206*G0_0_1_0_0_0 + 0.406349206349206*G0_0_1_0_0_1 - 0.406349206349206*G0_0_1_1_0_0 - 1.93015873015872*G0_0_1_2_0_1 + 1.93015873015872*G0_0_1_3_0_0 - 0.0507936507936546*G0_0_1_3_0_1 - 2.64126984126983*G0_0_1_4_0_0 + 0.86349206349206*G0_0_1_4_0_1 - 1.93015873015872*G0_0_1_5_0_0 - 1.98095238095238*G0_0_1_5_0_1 + 2.64126984126983*G0_0_1_6_0_0 + 3.50476190476189*G0_0_1_6_0_1 + 0.05079365079365*G0_0_1_7_0_1 + 0.0507936507936544*G0_0_1_8_0_1 - 0.91428571428571*G0_0_1_9_0_1 + 0.406349206349206*G0_0_1_10_1_0 + 0.406349206349206*G0_0_1_10_1_1 - 0.406349206349206*G0_0_1_11_1_0 - 1.93015873015872*G0_0_1_12_1_1 + 1.93015873015872*G0_0_1_13_1_0 - 0.0507936507936546*G0_0_1_13_1_1 - 2.64126984126983*G0_0_1_14_1_0 + 0.86349206349206*G0_0_1_14_1_1 - 1.93015873015872*G0_0_1_15_1_0 - 1.98095238095238*G0_0_1_15_1_1 + 2.64126984126983*G0_0_1_16_1_0 + 3.50476190476189*G0_0_1_16_1_1 + 0.05079365079365*G0_0_1_17_1_1 + 0.0507936507936544*G0_0_1_18_1_1 - 0.91428571428571*G0_0_1_19_1_1 - 0.406349206349206*G0_1_0_0_0_0 - 0.406349206349206*G0_1_0_0_0_1 + 0.406349206349206*G0_1_0_1_0_0 + 1.93015873015872*G0_1_0_2_0_1 - 1.93015873015872*G0_1_0_3_0_0 + 0.0507936507936546*G0_1_0_3_0_1 + 2.64126984126983*G0_1_0_4_0_0 - 0.86349206349206*G0_1_0_4_0_1 + 1.93015873015872*G0_1_0_5_0_0 + 1.98095238095238*G0_1_0_5_0_1 - 2.64126984126983*G0_1_0_6_0_0 - 3.50476190476189*G0_1_0_6_0_1 - 0.0507936507936499*G0_1_0_7_0_1 - 0.0507936507936544*G0_1_0_8_0_1 + 0.91428571428571*G0_1_0_9_0_1 - 0.406349206349206*G0_1_0_10_1_0 - 0.406349206349206*G0_1_0_10_1_1 + 0.406349206349206*G0_1_0_11_1_0 + 1.93015873015872*G0_1_0_12_1_1 - 1.93015873015872*G0_1_0_13_1_0 + 0.0507936507936546*G0_1_0_13_1_1 + 2.64126984126983*G0_1_0_14_1_0 - 0.86349206349206*G0_1_0_14_1_1 + 1.93015873015872*G0_1_0_15_1_0 + 1.98095238095238*G0_1_0_15_1_1 - 2.64126984126983*G0_1_0_16_1_0 - 3.50476190476189*G0_1_0_16_1_1 - 0.0507936507936499*G0_1_0_17_1_1 - 0.0507936507936544*G0_1_0_18_1_1 + 0.91428571428571*G0_1_0_19_1_1;
    A[741] = A[623] + 0.372486772486767*G0_0_0_0_0_0 + 0.372486772486768*G0_0_0_0_0_1 + 0.582433862433863*G0_0_0_1_0_0 + 6.77925925925922*G0_0_0_2_0_1 - 3.83999999999997*G0_0_0_3_0_0 - 0.111746031746025*G0_0_0_3_0_1 + 13.0438095238095*G0_0_0_4_0_0 + 3.11873015873015*G0_0_0_4_0_1 + 5.79047619047616*G0_0_0_5_0_0 + 2.79365079365078*G0_0_0_5_0_1 - 13.0438095238095*G0_0_0_6_0_0 - 9.94539682539677*G0_0_0_6_0_1 - 2.64126984126982*G0_0_0_7_0_0 + 0.355555555555557*G0_0_0_7_0_1 + 1.68634920634919*G0_0_0_8_0_0 + 0.111746031746025*G0_0_0_8_0_1 - 1.95047619047618*G0_0_0_9_0_0 - 3.4742857142857*G0_0_0_9_0_1 + 0.372486772486767*G0_0_0_10_1_0 + 0.372486772486768*G0_0_0_10_1_1 + 0.582433862433863*G0_0_0_11_1_0 + 6.77925925925922*G0_0_0_12_1_1 - 3.83999999999997*G0_0_0_13_1_0 - 0.111746031746025*G0_0_0_13_1_1 + 13.0438095238095*G0_0_0_14_1_0 + 3.11873015873015*G0_0_0_14_1_1 + 5.79047619047616*G0_0_0_15_1_0 + 2.79365079365078*G0_0_0_15_1_1 - 13.0438095238095*G0_0_0_16_1_0 - 9.94539682539677*G0_0_0_16_1_1 - 2.64126984126982*G0_0_0_17_1_0 + 0.355555555555557*G0_0_0_17_1_1 + 1.68634920634919*G0_0_0_18_1_0 + 0.111746031746025*G0_0_0_18_1_1 - 1.95047619047618*G0_0_0_19_1_0 - 3.4742857142857*G0_0_0_19_1_1 - 3.89417989417988*G0_0_1_0_0_0 - 3.89417989417988*G0_0_1_0_0_1 + 0.988783068783065*G0_0_1_1_0_0 + 4.8491005291005*G0_0_1_2_0_1 - 2.06222222222221*G0_0_1_3_0_0 - 0.0609523809523755*G0_0_1_3_0_1 + 7.81206349206345*G0_0_1_4_0_0 + 1.95047619047618*G0_0_1_4_0_1 + 3.70793650793649*G0_0_1_5_0_0 + 8.6349206349206*G0_0_1_5_0_1 - 7.81206349206345*G0_0_1_6_0_0 - 9.58984126984122*G0_0_1_6_0_1 + 4.92698412698411*G0_0_1_7_0_0 - 2.02158730158729*G0_0_1_8_0_0 + 0.060952380952376*G0_0_1_8_0_1 - 1.64571428571428*G0_0_1_9_0_0 - 1.95047619047617*G0_0_1_9_0_1 - 3.89417989417988*G0_0_1_10_1_0 - 3.89417989417988*G0_0_1_10_1_1 + 0.988783068783065*G0_0_1_11_1_0 + 4.8491005291005*G0_0_1_12_1_1 - 2.06222222222221*G0_0_1_13_1_0 - 0.0609523809523755*G0_0_1_13_1_1 + 7.81206349206345*G0_0_1_14_1_0 + 1.95047619047618*G0_0_1_14_1_1 + 3.70793650793649*G0_0_1_15_1_0 + 8.6349206349206*G0_0_1_15_1_1 - 7.81206349206345*G0_0_1_16_1_0 - 9.58984126984122*G0_0_1_16_1_1 + 4.92698412698411*G0_0_1_17_1_0 - 2.02158730158729*G0_0_1_18_1_0 + 0.060952380952376*G0_0_1_18_1_1 - 1.64571428571428*G0_0_1_19_1_0 - 1.95047619047617*G0_0_1_19_1_1 - 1.55767195767195*G0_1_0_0_0_0 - 1.55767195767195*G0_1_0_0_0_1 + 0.176084656084656*G0_1_0_1_0_0 + 2.51259259259258*G0_1_0_2_0_1 - 0.182857142857141*G0_1_0_3_0_0 - 0.16253968253968*G0_1_0_3_0_1 + 5.11999999999997*G0_1_0_4_0_0 + 2.76317460317459*G0_1_0_4_0_1 + 0.914285714285705*G0_1_0_5_0_0 + 3.14920634920633*G0_1_0_5_0_1 - 5.11999999999997*G0_1_0_6_0_0 - 4.10412698412696*G0_1_0_6_0_1 + 1.42222222222221*G0_1_0_7_0_0 - 0.812698412698407*G0_1_0_7_0_1 - 0.0406349206349228*G0_1_0_8_0_0 + 0.162539682539681*G0_1_0_8_0_1 - 0.731428571428563*G0_1_0_9_0_0 - 1.95047619047619*G0_1_0_9_0_1 - 1.55767195767195*G0_1_0_10_1_0 - 1.55767195767195*G0_1_0_10_1_1 + 0.176084656084656*G0_1_0_11_1_0 + 2.51259259259258*G0_1_0_12_1_1 - 0.182857142857141*G0_1_0_13_1_0 - 0.16253968253968*G0_1_0_13_1_1 + 5.11999999999997*G0_1_0_14_1_0 + 2.76317460317459*G0_1_0_14_1_1 + 0.914285714285705*G0_1_0_15_1_0 + 3.14920634920633*G0_1_0_15_1_1 - 5.11999999999997*G0_1_0_16_1_0 - 4.10412698412696*G0_1_0_16_1_1 + 1.42222222222221*G0_1_0_17_1_0 - 0.812698412698407*G0_1_0_17_1_1 - 0.0406349206349228*G0_1_0_18_1_0 + 0.162539682539681*G0_1_0_18_1_1 - 0.731428571428563*G0_1_0_19_1_0 - 1.95047619047619*G0_1_0_19_1_1 + 0.954920634920628*G0_1_1_0_0_0 + 0.954920634920628*G0_1_1_0_0_1 + 0.954920634920629*G0_1_1_2_0_1 + 0.0203174603174615*G0_1_1_3_0_0 + 2.88507936507935*G0_1_1_4_0_0 + 1.95047619047618*G0_1_1_4_0_1 + 1.93015873015872*G0_1_1_5_0_0 - 0.954920634920627*G0_1_1_5_0_1 - 2.88507936507935*G0_1_1_6_0_0 - 0.954920634920629*G0_1_1_6_0_1 - 0.934603174603167*G0_1_1_7_0_0 + 1.95047619047618*G0_1_1_7_0_1 - 0.0203174603174613*G0_1_1_8_0_0 - 1.95047619047618*G0_1_1_9_0_0 - 3.90095238095236*G0_1_1_9_0_1 + 0.954920634920628*G0_1_1_10_1_0 + 0.954920634920628*G0_1_1_10_1_1 + 0.954920634920629*G0_1_1_12_1_1 + 0.0203174603174615*G0_1_1_13_1_0 + 2.88507936507935*G0_1_1_14_1_0 + 1.95047619047618*G0_1_1_14_1_1 + 1.93015873015872*G0_1_1_15_1_0 - 0.954920634920627*G0_1_1_15_1_1 - 2.88507936507935*G0_1_1_16_1_0 - 0.954920634920629*G0_1_1_16_1_1 - 0.934603174603167*G0_1_1_17_1_0 + 1.95047619047618*G0_1_1_17_1_1 - 0.0203174603174613*G0_1_1_18_1_0 - 1.95047619047618*G0_1_1_19_1_0 - 3.90095238095236*G0_1_1_19_1_1;
    A[276] = A[741];
    A[543] = 0.0;
    A[665] = 0.0;
    A[690] = 0.0;
    A[267] = 0.0;
    A[296] = 0.0;
    A[437] = 0.0;
    A[361] = A[421] + 0.228571428571427*G0_0_0_0_0_0 + 0.228571428571427*G0_0_0_0_0_1 + 0.350476190476188*G0_0_0_2_0_1 - 0.274285714285712*G0_0_0_3_0_0 + 0.65523809523809*G0_0_0_4_0_0 + 0.0304761904761884*G0_0_0_4_0_1 + 0.426666666666663*G0_0_0_5_0_0 - 0.106666666666667*G0_0_0_5_0_1 - 0.65523809523809*G0_0_0_6_0_0 - 0.472380952380948*G0_0_0_6_0_1 - 0.50285714285714*G0_0_0_7_0_0 + 0.0304761904761907*G0_0_0_7_0_1 + 0.274285714285711*G0_0_0_8_0_0 - 0.15238095238095*G0_0_0_9_0_0 - 0.0609523809523787*G0_0_0_9_0_1 + 0.228571428571427*G0_0_0_10_1_0 + 0.228571428571427*G0_0_0_10_1_1 + 0.350476190476188*G0_0_0_12_1_1 - 0.274285714285712*G0_0_0_13_1_0 + 0.65523809523809*G0_0_0_14_1_0 + 0.0304761904761884*G0_0_0_14_1_1 + 0.426666666666663*G0_0_0_15_1_0 - 0.106666666666667*G0_0_0_15_1_1 - 0.65523809523809*G0_0_0_16_1_0 - 0.472380952380948*G0_0_0_16_1_1 - 0.50285714285714*G0_0_0_17_1_0 + 0.0304761904761907*G0_0_0_17_1_1 + 0.274285714285711*G0_0_0_18_1_0 - 0.15238095238095*G0_0_0_19_1_0 - 0.0609523809523787*G0_0_0_19_1_1 - 0.12190476190476*G0_1_0_0_0_0 - 0.121904761904761*G0_1_0_0_0_1 + 0.121904761904761*G0_1_0_2_0_1 + 0.12190476190476*G0_1_0_4_0_0 + 0.243809523809522*G0_1_0_5_0_0 + 0.365714285714282*G0_1_0_5_0_1 - 0.12190476190476*G0_1_0_6_0_0 - 0.365714285714282*G0_1_0_6_0_1 + 0.121904761904761*G0_1_0_7_0_0 - 0.243809523809523*G0_1_0_9_0_0 - 0.12190476190476*G0_1_0_10_1_0 - 0.121904761904761*G0_1_0_10_1_1 + 0.121904761904761*G0_1_0_12_1_1 + 0.12190476190476*G0_1_0_14_1_0 + 0.243809523809522*G0_1_0_15_1_0 + 0.365714285714282*G0_1_0_15_1_1 - 0.12190476190476*G0_1_0_16_1_0 - 0.365714285714282*G0_1_0_16_1_1 + 0.121904761904761*G0_1_0_17_1_0 - 0.243809523809523*G0_1_0_19_1_0;
    A[317] = 0.0;
    A[358] = 0.0;
    A[7] = A[765] + 1.47777777777777*G0_0_0_0_0_0 + 1.47777777777777*G0_0_0_0_0_1 - 0.592063492063489*G0_0_0_1_0_0 + 0.14126984126984*G0_0_0_2_0_1 - 0.228571428571426*G0_0_0_3_0_0 - 0.595238095238092*G0_0_0_3_0_1 + 0.733333333333331*G0_0_0_4_0_0 + 0.366666666666666*G0_0_0_4_0_1 + 0.904761904761902*G0_0_0_5_0_0 - 1.8*G0_0_0_5_0_1 - 0.733333333333331*G0_0_0_6_0_0 + 0.180952380952383*G0_0_0_6_0_1 - 2.67142857142856*G0_0_0_7_0_0 + 0.0333333333333346*G0_0_0_7_0_1 + 1.78571428571428*G0_0_0_8_0_0 + 0.595238095238093*G0_0_0_8_0_1 - 0.676190476190476*G0_0_0_9_0_0 - 0.400000000000002*G0_0_0_9_0_1 + 1.47777777777777*G0_0_0_10_1_0 + 1.47777777777777*G0_0_0_10_1_1 - 0.592063492063489*G0_0_0_11_1_0 + 0.14126984126984*G0_0_0_12_1_1 - 0.228571428571426*G0_0_0_13_1_0 - 0.595238095238092*G0_0_0_13_1_1 + 0.733333333333331*G0_0_0_14_1_0 + 0.366666666666666*G0_0_0_14_1_1 + 0.904761904761902*G0_0_0_15_1_0 - 1.8*G0_0_0_15_1_1 - 0.733333333333331*G0_0_0_16_1_0 + 0.180952380952383*G0_0_0_16_1_1 - 2.67142857142856*G0_0_0_17_1_0 + 0.0333333333333346*G0_0_0_17_1_1 + 1.78571428571428*G0_0_0_18_1_0 + 0.595238095238093*G0_0_0_18_1_1 - 0.676190476190476*G0_0_0_19_1_0 - 0.400000000000002*G0_0_0_19_1_1 - 0.417460317460315*G0_0_1_1_0_0 + 0.417460317460315*G0_0_1_2_0_1 - 0.281746031746029*G0_0_1_3_0_0 - 0.699206349206344*G0_0_1_3_0_1 + 0.699206349206346*G0_0_1_4_0_0 + 0.28174603174603*G0_0_1_4_0_1 + 0.553174603174601*G0_0_1_5_0_0 + 0.553174603174595*G0_0_1_5_0_1 - 0.699206349206346*G0_0_1_6_0_0 - 0.970634920634914*G0_0_1_6_0_1 - 0.553174603174605*G0_0_1_7_0_0 - 0.553174603174599*G0_0_1_7_0_1 + 0.970634920634917*G0_0_1_8_0_0 + 0.699206349206344*G0_0_1_8_0_1 - 0.271428571428571*G0_0_1_9_0_0 + 0.271428571428569*G0_0_1_9_0_1 - 0.417460317460315*G0_0_1_11_1_0 + 0.417460317460315*G0_0_1_12_1_1 - 0.281746031746029*G0_0_1_13_1_0 - 0.699206349206344*G0_0_1_13_1_1 + 0.699206349206346*G0_0_1_14_1_0 + 0.28174603174603*G0_0_1_14_1_1 + 0.553174603174601*G0_0_1_15_1_0 + 0.553174603174595*G0_0_1_15_1_1 - 0.699206349206346*G0_0_1_16_1_0 - 0.970634920634914*G0_0_1_16_1_1 - 0.553174603174605*G0_0_1_17_1_0 - 0.553174603174599*G0_0_1_17_1_1 + 0.970634920634917*G0_0_1_18_1_0 + 0.699206349206344*G0_0_1_18_1_1 - 0.271428571428571*G0_0_1_19_1_0 + 0.271428571428569*G0_0_1_19_1_1 - 0.315873015873015*G0_1_0_1_0_0 + 0.315873015873015*G0_1_0_2_0_1 - 0.313492063492062*G0_1_0_3_0_0 - 0.629365079365075*G0_1_0_3_0_1 + 0.629365079365078*G0_1_0_4_0_0 + 0.313492063492063*G0_1_0_4_0_1 + 0.318253968253969*G0_1_0_5_0_0 + 0.318253968253963*G0_1_0_5_0_1 - 0.629365079365078*G0_1_0_6_0_0 - 0.634126984126981*G0_1_0_6_0_1 - 0.318253968253971*G0_1_0_7_0_0 - 0.318253968253966*G0_1_0_7_0_1 + 0.634126984126982*G0_1_0_8_0_0 + 0.629365079365076*G0_1_0_8_0_1 - 0.00476190476190663*G0_1_0_9_0_0 + 0.00476190476190258*G0_1_0_9_0_1 - 0.315873015873015*G0_1_0_11_1_0 + 0.315873015873015*G0_1_0_12_1_1 - 0.313492063492062*G0_1_0_13_1_0 - 0.629365079365075*G0_1_0_13_1_1 + 0.629365079365078*G0_1_0_14_1_0 + 0.313492063492063*G0_1_0_14_1_1 + 0.318253968253969*G0_1_0_15_1_0 + 0.318253968253963*G0_1_0_15_1_1 - 0.629365079365078*G0_1_0_16_1_0 - 0.634126984126981*G0_1_0_16_1_1 - 0.318253968253971*G0_1_0_17_1_0 - 0.318253968253966*G0_1_0_17_1_1 + 0.634126984126982*G0_1_0_18_1_0 + 0.629365079365076*G0_1_0_18_1_1 - 0.00476190476190663*G0_1_0_19_1_0 + 0.00476190476190258*G0_1_0_19_1_1 - 1.47777777777777*G0_1_1_0_0_0 - 1.47777777777777*G0_1_1_0_0_1 - 0.14126984126984*G0_1_1_1_0_0 + 0.592063492063489*G0_1_1_2_0_1 - 0.366666666666665*G0_1_1_3_0_0 - 0.733333333333327*G0_1_1_3_0_1 + 0.595238095238093*G0_1_1_4_0_0 + 0.228571428571426*G0_1_1_4_0_1 - 0.0333333333333333*G0_1_1_5_0_0 + 2.67142857142856*G0_1_1_5_0_1 - 0.595238095238093*G0_1_1_6_0_0 - 1.78571428571428*G0_1_1_6_0_1 + 1.79999999999999*G0_1_1_7_0_0 - 0.9047619047619*G0_1_1_7_0_1 - 0.180952380952379*G0_1_1_8_0_0 + 0.733333333333327*G0_1_1_8_0_1 + 0.399999999999998*G0_1_1_9_0_0 + 0.676190476190474*G0_1_1_9_0_1 - 1.47777777777777*G0_1_1_10_1_0 - 1.47777777777777*G0_1_1_10_1_1 - 0.14126984126984*G0_1_1_11_1_0 + 0.592063492063489*G0_1_1_12_1_1 - 0.366666666666665*G0_1_1_13_1_0 - 0.733333333333327*G0_1_1_13_1_1 + 0.595238095238093*G0_1_1_14_1_0 + 0.228571428571426*G0_1_1_14_1_1 - 0.0333333333333333*G0_1_1_15_1_0 + 2.67142857142856*G0_1_1_15_1_1 - 0.595238095238093*G0_1_1_16_1_0 - 1.78571428571428*G0_1_1_16_1_1 + 1.79999999999999*G0_1_1_17_1_0 - 0.9047619047619*G0_1_1_17_1_1 - 0.180952380952379*G0_1_1_18_1_0 + 0.733333333333327*G0_1_1_18_1_1 + 0.399999999999998*G0_1_1_19_1_0 + 0.676190476190474*G0_1_1_19_1_1;
    A[724] = 0.0;
    A[827] = A[72] - 0.111746031746031*G0_0_1_0_0_0 - 0.111746031746031*G0_0_1_0_0_1 + 0.0101587301587299*G0_0_1_1_0_0 + 0.0380952380952376*G0_0_1_3_0_0 - 0.0215873015873019*G0_0_1_3_0_1 + 0.0698412698412711*G0_0_1_4_0_1 + 0.0380952380952401*G0_0_1_5_0_0 + 0.181587301587302*G0_0_1_5_0_1 - 0.069841269841273*G0_0_1_6_0_1 + 0.233650793650792*G0_0_1_7_0_0 + 0.0901587301587295*G0_0_1_7_0_1 - 0.13206349206349*G0_0_1_8_0_0 + 0.021587301587302*G0_0_1_8_0_1 - 0.0761904761904778*G0_0_1_9_0_0 - 0.160000000000001*G0_0_1_9_0_1 - 0.111746031746031*G0_0_1_10_1_0 - 0.111746031746031*G0_0_1_10_1_1 + 0.0101587301587299*G0_0_1_11_1_0 + 0.0380952380952376*G0_0_1_13_1_0 - 0.0215873015873019*G0_0_1_13_1_1 + 0.0698412698412711*G0_0_1_14_1_1 + 0.0380952380952401*G0_0_1_15_1_0 + 0.181587301587302*G0_0_1_15_1_1 - 0.069841269841273*G0_0_1_16_1_1 + 0.233650793650792*G0_0_1_17_1_0 + 0.0901587301587295*G0_0_1_17_1_1 - 0.13206349206349*G0_0_1_18_1_0 + 0.021587301587302*G0_0_1_18_1_1 - 0.0761904761904778*G0_0_1_19_1_0 - 0.160000000000001*G0_0_1_19_1_1 + 0.111746031746031*G0_1_0_0_0_0 + 0.111746031746031*G0_1_0_0_0_1 - 0.0101587301587298*G0_1_0_1_0_0 - 0.0380952380952376*G0_1_0_3_0_0 + 0.0215873015873019*G0_1_0_3_0_1 - 0.0698412698412711*G0_1_0_4_0_1 - 0.0380952380952401*G0_1_0_5_0_0 - 0.181587301587302*G0_1_0_5_0_1 + 0.069841269841273*G0_1_0_6_0_1 - 0.233650793650792*G0_1_0_7_0_0 - 0.0901587301587294*G0_1_0_7_0_1 + 0.13206349206349*G0_1_0_8_0_0 - 0.021587301587302*G0_1_0_8_0_1 + 0.0761904761904777*G0_1_0_9_0_0 + 0.160000000000001*G0_1_0_9_0_1 + 0.111746031746031*G0_1_0_10_1_0 + 0.111746031746031*G0_1_0_10_1_1 - 0.0101587301587298*G0_1_0_11_1_0 - 0.0380952380952376*G0_1_0_13_1_0 + 0.0215873015873019*G0_1_0_13_1_1 - 0.0698412698412711*G0_1_0_14_1_1 - 0.0380952380952401*G0_1_0_15_1_0 - 0.181587301587302*G0_1_0_15_1_1 + 0.069841269841273*G0_1_0_16_1_1 - 0.233650793650792*G0_1_0_17_1_0 - 0.0901587301587294*G0_1_0_17_1_1 + 0.13206349206349*G0_1_0_18_1_0 - 0.021587301587302*G0_1_0_18_1_1 + 0.0761904761904777*G0_1_0_19_1_0 + 0.160000000000001*G0_1_0_19_1_1;
    A[36] = A[181] + 0.113015873015873*G0_0_1_0_0_0 + 0.113015873015874*G0_0_1_0_0_1 - 0.016507936507936*G0_0_1_2_0_1 - 0.0615873015873012*G0_0_1_3_0_0 + 0.0184126984126991*G0_0_1_4_0_0 - 0.0266666666666666*G0_0_1_4_0_1 - 0.0946031746031729*G0_0_1_5_0_0 - 0.242539682539682*G0_0_1_5_0_1 - 0.0184126984126992*G0_0_1_6_0_0 + 0.146031746031745*G0_0_1_6_0_1 - 0.174603174603175*G0_0_1_7_0_0 - 0.0266666666666657*G0_0_1_7_0_1 + 0.0615873015873014*G0_0_1_8_0_0 + 0.156190476190474*G0_0_1_9_0_0 + 0.0533333333333321*G0_0_1_9_0_1 + 0.113015873015873*G0_0_1_10_1_0 + 0.113015873015874*G0_0_1_10_1_1 - 0.016507936507936*G0_0_1_12_1_1 - 0.0615873015873012*G0_0_1_13_1_0 + 0.0184126984126991*G0_0_1_14_1_0 - 0.0266666666666666*G0_0_1_14_1_1 - 0.0946031746031729*G0_0_1_15_1_0 - 0.242539682539682*G0_0_1_15_1_1 - 0.0184126984126992*G0_0_1_16_1_0 + 0.146031746031745*G0_0_1_16_1_1 - 0.174603174603175*G0_0_1_17_1_0 - 0.0266666666666657*G0_0_1_17_1_1 + 0.0615873015873014*G0_0_1_18_1_0 + 0.156190476190474*G0_0_1_19_1_0 + 0.0533333333333321*G0_0_1_19_1_1 - 0.113015873015873*G0_1_0_0_0_0 - 0.113015873015874*G0_1_0_0_0_1 + 0.016507936507936*G0_1_0_2_0_1 + 0.0615873015873012*G0_1_0_3_0_0 - 0.0184126984126991*G0_1_0_4_0_0 + 0.0266666666666666*G0_1_0_4_0_1 + 0.0946031746031729*G0_1_0_5_0_0 + 0.242539682539682*G0_1_0_5_0_1 + 0.0184126984126992*G0_1_0_6_0_0 - 0.146031746031745*G0_1_0_6_0_1 + 0.174603174603175*G0_1_0_7_0_0 + 0.0266666666666657*G0_1_0_7_0_1 - 0.0615873015873014*G0_1_0_8_0_0 - 0.156190476190474*G0_1_0_9_0_0 - 0.0533333333333321*G0_1_0_9_0_1 - 0.113015873015873*G0_1_0_10_1_0 - 0.113015873015874*G0_1_0_10_1_1 + 0.016507936507936*G0_1_0_12_1_1 + 0.0615873015873012*G0_1_0_13_1_0 - 0.0184126984126991*G0_1_0_14_1_0 + 0.0266666666666666*G0_1_0_14_1_1 + 0.0946031746031729*G0_1_0_15_1_0 + 0.242539682539682*G0_1_0_15_1_1 + 0.0184126984126992*G0_1_0_16_1_0 - 0.146031746031745*G0_1_0_16_1_1 + 0.174603174603175*G0_1_0_17_1_0 + 0.0266666666666657*G0_1_0_17_1_1 - 0.0615873015873014*G0_1_0_18_1_0 - 0.156190476190474*G0_1_0_19_1_0 - 0.0533333333333321*G0_1_0_19_1_1;
    A[751] = 0.0;
    A[65] = A[530];
    A[786] = 0.0;
    A[158] = A[623];
    A[114] = 0.0;
    A[139] = 0.0;
    A[168] = 0.0;
    A[502] = A[36] + 0.162539682539682*G0_0_0_0_0_0 + 0.162539682539682*G0_0_0_0_0_1 + 0.00539682539682479*G0_0_0_2_0_1 - 0.0377777777777787*G0_0_0_3_0_0 + 0.0357142857142811*G0_0_0_3_0_1 + 0.064126984126984*G0_0_0_4_0_0 - 0.0147619047619029*G0_0_0_4_0_1 - 0.0269841269841279*G0_0_0_5_0_0 - 0.283968253968253*G0_0_0_5_0_1 - 0.064126984126984*G0_0_0_6_0_0 + 0.116031746031746*G0_0_0_6_0_1 - 0.271746031746031*G0_0_0_7_0_0 - 0.0147619047619061*G0_0_0_7_0_1 + 0.109206349206351*G0_0_0_8_0_0 - 0.0357142857142812*G0_0_0_8_0_1 + 0.064761904761907*G0_0_0_9_0_0 + 0.0295238095238089*G0_0_0_9_0_1 + 0.162539682539682*G0_0_0_10_1_0 + 0.162539682539682*G0_0_0_10_1_1 + 0.00539682539682479*G0_0_0_12_1_1 - 0.0377777777777787*G0_0_0_13_1_0 + 0.0357142857142811*G0_0_0_13_1_1 + 0.064126984126984*G0_0_0_14_1_0 - 0.0147619047619029*G0_0_0_14_1_1 - 0.0269841269841279*G0_0_0_15_1_0 - 0.283968253968253*G0_0_0_15_1_1 - 0.064126984126984*G0_0_0_16_1_0 + 0.116031746031746*G0_0_0_16_1_1 - 0.271746031746031*G0_0_0_17_1_0 - 0.0147619047619061*G0_0_0_17_1_1 + 0.109206349206351*G0_0_0_18_1_0 - 0.0357142857142812*G0_0_0_18_1_1 + 0.064761904761907*G0_0_0_19_1_0 + 0.0295238095238089*G0_0_0_19_1_1 - 0.0885714285714296*G0_0_1_0_0_0 - 0.0885714285714297*G0_0_1_0_0_1 + 0.0409523809523802*G0_0_1_2_0_1 + 0.0357142857142845*G0_0_1_3_0_0 + 0.0290476190476182*G0_0_1_4_0_0 + 0.0238095238095247*G0_0_1_4_0_1 + 0.117619047619045*G0_0_1_5_0_0 + 0.218095238095239*G0_0_1_5_0_1 - 0.0290476190476182*G0_0_1_6_0_0 - 0.170476190476189*G0_0_1_6_0_1 + 0.124285714285715*G0_0_1_7_0_0 + 0.0238095238095215*G0_0_1_7_0_1 - 0.0357142857142841*G0_0_1_8_0_0 - 0.153333333333329*G0_0_1_9_0_0 - 0.047619047619046*G0_0_1_9_0_1 - 0.0885714285714296*G0_0_1_10_1_0 - 0.0885714285714297*G0_0_1_10_1_1 + 0.0409523809523802*G0_0_1_12_1_1 + 0.0357142857142845*G0_0_1_13_1_0 + 0.0290476190476182*G0_0_1_14_1_0 + 0.0238095238095247*G0_0_1_14_1_1 + 0.117619047619045*G0_0_1_15_1_0 + 0.218095238095239*G0_0_1_15_1_1 - 0.0290476190476182*G0_0_1_16_1_0 - 0.170476190476189*G0_0_1_16_1_1 + 0.124285714285715*G0_0_1_17_1_0 + 0.0238095238095215*G0_0_1_17_1_1 - 0.0357142857142841*G0_0_1_18_1_0 - 0.153333333333329*G0_0_1_19_1_0 - 0.047619047619046*G0_0_1_19_1_1;
    A[205] = 0.0;
    A[573] = 0.0;
    A[533] = -A[530] + 0.34074074074074*G0_1_1_0_0_0 + 0.34074074074074*G0_1_1_0_0_1 - 0.340740740740741*G0_1_1_1_0_0 - 1.25502645502645*G0_1_1_2_0_1 + 0.730158730158726*G0_1_1_3_0_0 - 0.355555555555557*G0_1_1_3_0_1 - 2.0126984126984*G0_1_1_4_0_0 - 0.0126984126984129*G0_1_1_4_0_1 - 0.730158730158727*G0_1_1_5_0_0 - 1.08571428571428*G0_1_1_5_0_1 + 2.0126984126984*G0_1_1_6_0_0 + 1.99999999999999*G0_1_1_6_0_1 + 0.355555555555553*G0_1_1_7_0_1 + 0.355555555555557*G0_1_1_8_0_1 - 0.34285714285714*G0_1_1_9_0_1 + 0.34074074074074*G0_1_1_10_1_0 + 0.34074074074074*G0_1_1_10_1_1 - 0.340740740740741*G0_1_1_11_1_0 - 1.25502645502645*G0_1_1_12_1_1 + 0.730158730158726*G0_1_1_13_1_0 - 0.355555555555557*G0_1_1_13_1_1 - 2.0126984126984*G0_1_1_14_1_0 - 0.0126984126984129*G0_1_1_14_1_1 - 0.730158730158727*G0_1_1_15_1_0 - 1.08571428571428*G0_1_1_15_1_1 + 2.0126984126984*G0_1_1_16_1_0 + 1.99999999999999*G0_1_1_16_1_1 + 0.355555555555553*G0_1_1_17_1_1 + 0.355555555555557*G0_1_1_18_1_1 - 0.34285714285714*G0_1_1_19_1_1;
    A[238] = 0.0;
    A[604] = 0.0;
    A[242] = A[533] + 0.423280423280422*G0_0_1_0_0_0 + 0.423280423280422*G0_0_1_0_0_1 - 0.423280423280422*G0_0_1_1_0_0 - 2.80423280423279*G0_0_1_2_0_1 + 2.02539682539681*G0_0_1_3_0_0 + 0.149206349206346*G0_0_1_3_0_1 - 5.11746031746029*G0_0_1_4_0_0 - 0.860317460317457*G0_0_1_4_0_1 - 2.02539682539681*G0_0_1_5_0_0 - 1.87619047619047*G0_0_1_5_0_1 + 5.11746031746029*G0_0_1_6_0_0 + 4.25714285714284*G0_0_1_6_0_1 - 0.14920634920635*G0_0_1_7_0_1 - 0.149206349206346*G0_0_1_8_0_1 + 1.00952380952381*G0_0_1_9_0_1 + 0.423280423280422*G0_0_1_10_1_0 + 0.423280423280422*G0_0_1_10_1_1 - 0.423280423280422*G0_0_1_11_1_0 - 2.80423280423279*G0_0_1_12_1_1 + 2.02539682539681*G0_0_1_13_1_0 + 0.149206349206346*G0_0_1_13_1_1 - 5.11746031746029*G0_0_1_14_1_0 - 0.860317460317457*G0_0_1_14_1_1 - 2.02539682539681*G0_0_1_15_1_0 - 1.87619047619047*G0_0_1_15_1_1 + 5.11746031746029*G0_0_1_16_1_0 + 4.25714285714284*G0_0_1_16_1_1 - 0.14920634920635*G0_0_1_17_1_1 - 0.149206349206346*G0_0_1_18_1_1 + 1.00952380952381*G0_0_1_19_1_1 - 0.423280423280422*G0_1_0_0_0_0 - 0.423280423280422*G0_1_0_0_0_1 + 0.423280423280422*G0_1_0_1_0_0 + 2.80423280423279*G0_1_0_2_0_1 - 2.02539682539681*G0_1_0_3_0_0 - 0.149206349206346*G0_1_0_3_0_1 + 5.11746031746029*G0_1_0_4_0_0 + 0.860317460317457*G0_1_0_4_0_1 + 2.02539682539681*G0_1_0_5_0_0 + 1.87619047619047*G0_1_0_5_0_1 - 5.11746031746029*G0_1_0_6_0_0 - 4.25714285714284*G0_1_0_6_0_1 + 0.14920634920635*G0_1_0_7_0_1 + 0.149206349206346*G0_1_0_8_0_1 - 1.00952380952381*G0_1_0_9_0_1 - 0.423280423280422*G0_1_0_10_1_0 - 0.423280423280422*G0_1_0_10_1_1 + 0.423280423280422*G0_1_0_11_1_0 + 2.80423280423279*G0_1_0_12_1_1 - 2.02539682539681*G0_1_0_13_1_0 - 0.149206349206346*G0_1_0_13_1_1 + 5.11746031746029*G0_1_0_14_1_0 + 0.860317460317457*G0_1_0_14_1_1 + 2.02539682539681*G0_1_0_15_1_0 + 1.87619047619047*G0_1_0_15_1_1 - 5.11746031746029*G0_1_0_16_1_0 - 4.25714285714284*G0_1_0_16_1_1 + 0.14920634920635*G0_1_0_17_1_1 + 0.149206349206346*G0_1_0_18_1_1 - 1.00952380952381*G0_1_0_19_1_1;
    A[444] = 0.0;
    A[324] = 0.0;
    A[479] = A[14];
    A[351] = 0.0;
    A[731] = 0.0;
    A[422] = A[887];
    A[382] = 0.0;
    A[760] = 0.0;
    A[413] = 0.0;
    A[857] = A[827] + 0.121904761904762*G0_0_1_0_0_0 + 0.121904761904762*G0_0_1_0_0_1 - 0.121904761904761*G0_0_1_1_0_0 - 0.121904761904761*G0_0_1_3_0_1 - 0.121904761904765*G0_0_1_5_0_1 - 0.365714285714283*G0_0_1_7_0_0 - 0.243809523809523*G0_0_1_7_0_1 + 0.365714285714282*G0_0_1_8_0_0 + 0.121904761904761*G0_0_1_8_0_1 + 0.243809523809527*G0_0_1_9_0_1 + 0.121904761904762*G0_0_1_10_1_0 + 0.121904761904762*G0_0_1_10_1_1 - 0.121904761904761*G0_0_1_11_1_0 - 0.121904761904761*G0_0_1_13_1_1 - 0.121904761904765*G0_0_1_15_1_1 - 0.365714285714283*G0_0_1_17_1_0 - 0.243809523809523*G0_0_1_17_1_1 + 0.365714285714282*G0_0_1_18_1_0 + 0.121904761904761*G0_0_1_18_1_1 + 0.243809523809527*G0_0_1_19_1_1 - 0.228571428571427*G0_1_1_0_0_0 - 0.228571428571427*G0_1_1_0_0_1 - 0.35047619047619*G0_1_1_1_0_0 - 0.0304761904761895*G0_1_1_3_0_0 - 0.655238095238094*G0_1_1_3_0_1 + 0.27428571428571*G0_1_1_4_0_1 - 0.0304761904761937*G0_1_1_5_0_0 + 0.502857142857137*G0_1_1_5_0_1 - 0.274285714285706*G0_1_1_6_0_1 + 0.106666666666666*G0_1_1_7_0_0 - 0.426666666666665*G0_1_1_7_0_1 + 0.472380952380951*G0_1_1_8_0_0 + 0.655238095238094*G0_1_1_8_0_1 + 0.0609523809523832*G0_1_1_9_0_0 + 0.152380952380955*G0_1_1_9_0_1 - 0.228571428571427*G0_1_1_10_1_0 - 0.228571428571427*G0_1_1_10_1_1 - 0.35047619047619*G0_1_1_11_1_0 - 0.0304761904761895*G0_1_1_13_1_0 - 0.655238095238094*G0_1_1_13_1_1 + 0.27428571428571*G0_1_1_14_1_1 - 0.0304761904761937*G0_1_1_15_1_0 + 0.502857142857137*G0_1_1_15_1_1 - 0.274285714285706*G0_1_1_16_1_1 + 0.106666666666666*G0_1_1_17_1_0 - 0.426666666666665*G0_1_1_17_1_1 + 0.472380952380951*G0_1_1_18_1_0 + 0.655238095238094*G0_1_1_18_1_1 + 0.0609523809523832*G0_1_1_19_1_0 + 0.152380952380955*G0_1_1_19_1_1;
    A[88] = 0.0;
    A[781] = 0.0;
    A[91] = -A[331] + 0.34074074074074*G0_0_0_0_0_0 + 0.34074074074074*G0_0_0_0_0_1 - 1.25502645502645*G0_0_0_1_0_0 - 0.34074074074074*G0_0_0_2_0_1 - 0.0126984126984137*G0_0_0_3_0_0 - 2.01269841269841*G0_0_0_3_0_1 - 0.355555555555553*G0_0_0_4_0_0 + 0.73015873015873*G0_0_0_4_0_1 + 0.355555555555554*G0_0_0_5_0_0 + 0.355555555555553*G0_0_0_6_0_0 - 1.08571428571428*G0_0_0_7_0_0 - 0.730158730158728*G0_0_0_7_0_1 + 2*G0_0_0_8_0_0 + 2.01269841269841*G0_0_0_8_0_1 - 0.342857142857141*G0_0_0_9_0_0 + 0.34074074074074*G0_0_0_10_1_0 + 0.34074074074074*G0_0_0_10_1_1 - 1.25502645502645*G0_0_0_11_1_0 - 0.34074074074074*G0_0_0_12_1_1 - 0.0126984126984137*G0_0_0_13_1_0 - 2.01269841269841*G0_0_0_13_1_1 - 0.355555555555553*G0_0_0_14_1_0 + 0.73015873015873*G0_0_0_14_1_1 + 0.355555555555554*G0_0_0_15_1_0 + 0.355555555555553*G0_0_0_16_1_0 - 1.08571428571428*G0_0_0_17_1_0 - 0.730158730158728*G0_0_0_17_1_1 + 2*G0_0_0_18_1_0 + 2.01269841269841*G0_0_0_18_1_1 - 0.342857142857141*G0_0_0_19_1_0;
    A[822] = 0.0;
    A[146] = 0.0;
    A[855] = A[14] - 0.228571428571427*G0_0_0_1_0_0 + 0.350476190476188*G0_0_0_2_0_1 - 0.426666666666663*G0_0_0_3_0_0 - 0.533333333333329*G0_0_0_3_0_1 + 0.655238095238091*G0_0_0_4_0_0 + 0.182857142857141*G0_0_0_4_0_1 + 0.274285714285714*G0_0_0_5_0_0 + 0.274285714285711*G0_0_0_5_0_1 - 0.655238095238091*G0_0_0_6_0_0 - 0.624761904761901*G0_0_0_6_0_1 - 0.274285714285715*G0_0_0_7_0_0 - 0.274285714285712*G0_0_0_7_0_1 + 0.502857142857141*G0_0_0_8_0_0 + 0.53333333333333*G0_0_0_8_0_1 + 0.15238095238095*G0_0_0_9_0_0 + 0.0914285714285705*G0_0_0_9_0_1 - 0.228571428571427*G0_0_0_11_1_0 + 0.350476190476188*G0_0_0_12_1_1 - 0.426666666666663*G0_0_0_13_1_0 - 0.533333333333329*G0_0_0_13_1_1 + 0.655238095238091*G0_0_0_14_1_0 + 0.182857142857141*G0_0_0_14_1_1 + 0.274285714285714*G0_0_0_15_1_0 + 0.274285714285711*G0_0_0_15_1_1 - 0.655238095238091*G0_0_0_16_1_0 - 0.624761904761901*G0_0_0_16_1_1 - 0.274285714285715*G0_0_0_17_1_0 - 0.274285714285712*G0_0_0_17_1_1 + 0.502857142857141*G0_0_0_18_1_0 + 0.53333333333333*G0_0_0_18_1_1 + 0.15238095238095*G0_0_0_19_1_0 + 0.0914285714285705*G0_0_0_19_1_1 - 0.238730158730157*G0_0_1_1_0_0 + 0.238730158730157*G0_0_1_2_0_1 - 0.27301587301587*G0_0_1_3_0_0 - 0.511746031746026*G0_0_1_3_0_1 + 0.511746031746028*G0_0_1_4_0_0 + 0.273015873015871*G0_0_1_4_0_1 + 0.204444444444444*G0_0_1_5_0_0 + 0.20444444444444*G0_0_1_5_0_1 - 0.511746031746028*G0_0_1_6_0_0 - 0.443174603174598*G0_0_1_6_0_1 - 0.204444444444446*G0_0_1_7_0_0 - 0.204444444444442*G0_0_1_7_0_1 + 0.4431746031746*G0_0_1_8_0_0 + 0.511746031746027*G0_0_1_8_0_1 + 0.0685714285714254*G0_0_1_9_0_0 - 0.0685714285714301*G0_0_1_9_0_1 - 0.238730158730157*G0_0_1_11_1_0 + 0.238730158730157*G0_0_1_12_1_1 - 0.27301587301587*G0_0_1_13_1_0 - 0.511746031746026*G0_0_1_13_1_1 + 0.511746031746028*G0_0_1_14_1_0 + 0.273015873015871*G0_0_1_14_1_1 + 0.204444444444444*G0_0_1_15_1_0 + 0.20444444444444*G0_0_1_15_1_1 - 0.511746031746028*G0_0_1_16_1_0 - 0.443174603174598*G0_0_1_16_1_1 - 0.204444444444446*G0_0_1_17_1_0 - 0.204444444444442*G0_0_1_17_1_1 + 0.4431746031746*G0_0_1_18_1_0 + 0.511746031746027*G0_0_1_18_1_1 + 0.0685714285714254*G0_0_1_19_1_0 - 0.0685714285714301*G0_0_1_19_1_1 - 0.340317460317459*G0_1_0_1_0_0 + 0.340317460317458*G0_1_0_2_0_1 - 0.336507936507934*G0_1_0_3_0_0 - 0.676825396825392*G0_1_0_3_0_1 + 0.676825396825393*G0_1_0_4_0_0 + 0.336507936507934*G0_1_0_4_0_1 + 0.344126984126984*G0_1_0_5_0_0 + 0.344126984126975*G0_1_0_5_0_1 - 0.676825396825393*G0_1_0_6_0_0 - 0.684444444444438*G0_1_0_6_0_1 - 0.344126984126989*G0_1_0_7_0_0 - 0.344126984126981*G0_1_0_7_0_1 + 0.684444444444443*G0_1_0_8_0_0 + 0.676825396825392*G0_1_0_8_0_1 - 0.00761904761904897*G0_1_0_9_0_0 + 0.0076190476190463*G0_1_0_9_0_1 - 0.340317460317459*G0_1_0_11_1_0 + 0.340317460317458*G0_1_0_12_1_1 - 0.336507936507934*G0_1_0_13_1_0 - 0.676825396825392*G0_1_0_13_1_1 + 0.676825396825393*G0_1_0_14_1_0 + 0.336507936507934*G0_1_0_14_1_1 + 0.344126984126984*G0_1_0_15_1_0 + 0.344126984126975*G0_1_0_15_1_1 - 0.676825396825393*G0_1_0_16_1_0 - 0.684444444444438*G0_1_0_16_1_1 - 0.344126984126989*G0_1_0_17_1_0 - 0.344126984126981*G0_1_0_17_1_1 + 0.684444444444443*G0_1_0_18_1_0 + 0.676825396825392*G0_1_0_18_1_1 - 0.00761904761904897*G0_1_0_19_1_0 + 0.0076190476190463*G0_1_0_19_1_1 - 0.350476190476188*G0_1_1_1_0_0 + 0.228571428571427*G0_1_1_2_0_1 - 0.18285714285714*G0_1_1_3_0_0 - 0.655238095238088*G0_1_1_3_0_1 + 0.533333333333331*G0_1_1_4_0_0 + 0.426666666666663*G0_1_1_4_0_1 + 0.274285714285714*G0_1_1_5_0_0 + 0.274285714285705*G0_1_1_5_0_1 - 0.533333333333331*G0_1_1_6_0_0 - 0.502857142857137*G0_1_1_6_0_1 - 0.27428571428572*G0_1_1_7_0_0 - 0.274285714285711*G0_1_1_7_0_1 + 0.624761904761903*G0_1_1_8_0_0 + 0.655238095238088*G0_1_1_8_0_1 - 0.0914285714285742*G0_1_1_9_0_0 - 0.152380952380953*G0_1_1_9_0_1 - 0.350476190476188*G0_1_1_11_1_0 + 0.228571428571427*G0_1_1_12_1_1 - 0.18285714285714*G0_1_1_13_1_0 - 0.655238095238088*G0_1_1_13_1_1 + 0.533333333333331*G0_1_1_14_1_0 + 0.426666666666663*G0_1_1_14_1_1 + 0.274285714285714*G0_1_1_15_1_0 + 0.274285714285705*G0_1_1_15_1_1 - 0.533333333333331*G0_1_1_16_1_0 - 0.502857142857137*G0_1_1_16_1_1 - 0.27428571428572*G0_1_1_17_1_0 - 0.274285714285711*G0_1_1_17_1_1 + 0.624761904761903*G0_1_1_18_1_0 + 0.655238095238088*G0_1_1_18_1_1 - 0.0914285714285742*G0_1_1_19_1_0 - 0.152380952380953*G0_1_1_19_1_1;
    A[177] = 0.0;
    A[884] = 0.0;
    A[493] = 0.0;
    A[196] = 0.0;
    A[654] = A[741] + 1.93015873015873*G0_0_1_0_0_0 + 1.93015873015872*G0_0_1_0_0_1 - 0.406349206349204*G0_0_1_1_0_0 - 0.406349206349205*G0_0_1_2_0_1 - 0.0507936507936476*G0_0_1_3_0_0 - 0.0507936507936502*G0_0_1_3_0_1 - 0.0507936507936482*G0_0_1_4_0_0 - 0.0507936507936466*G0_0_1_4_0_1 - 0.863492063492058*G0_0_1_5_0_0 - 3.5047619047619*G0_0_1_5_0_1 + 0.0507936507936483*G0_0_1_6_0_0 + 1.98095238095238*G0_0_1_6_0_1 - 3.50476190476189*G0_0_1_7_0_0 - 0.863492063492055*G0_0_1_7_0_1 + 1.98095238095237*G0_0_1_8_0_0 + 0.0507936507936508*G0_0_1_8_0_1 + 0.914285714285706*G0_0_1_9_0_0 + 0.9142857142857*G0_0_1_9_0_1 + 1.93015873015873*G0_0_1_10_1_0 + 1.93015873015872*G0_0_1_10_1_1 - 0.406349206349204*G0_0_1_11_1_0 - 0.406349206349205*G0_0_1_12_1_1 - 0.0507936507936476*G0_0_1_13_1_0 - 0.0507936507936502*G0_0_1_13_1_1 - 0.0507936507936482*G0_0_1_14_1_0 - 0.0507936507936466*G0_0_1_14_1_1 - 0.863492063492058*G0_0_1_15_1_0 - 3.5047619047619*G0_0_1_15_1_1 + 0.0507936507936483*G0_0_1_16_1_0 + 1.98095238095238*G0_0_1_16_1_1 - 3.50476190476189*G0_0_1_17_1_0 - 0.863492063492055*G0_0_1_17_1_1 + 1.98095238095237*G0_0_1_18_1_0 + 0.0507936507936508*G0_0_1_18_1_1 + 0.914285714285706*G0_0_1_19_1_0 + 0.9142857142857*G0_0_1_19_1_1 - 1.93015873015873*G0_1_0_0_0_0 - 1.93015873015873*G0_1_0_0_0_1 + 0.406349206349204*G0_1_0_1_0_0 + 0.406349206349205*G0_1_0_2_0_1 + 0.0507936507936476*G0_1_0_3_0_0 + 0.0507936507936502*G0_1_0_3_0_1 + 0.0507936507936482*G0_1_0_4_0_0 + 0.0507936507936466*G0_1_0_4_0_1 + 0.863492063492057*G0_1_0_5_0_0 + 3.5047619047619*G0_1_0_5_0_1 - 0.0507936507936483*G0_1_0_6_0_0 - 1.98095238095238*G0_1_0_6_0_1 + 3.50476190476189*G0_1_0_7_0_0 + 0.863492063492055*G0_1_0_7_0_1 - 1.98095238095237*G0_1_0_8_0_0 - 0.0507936507936508*G0_1_0_8_0_1 - 0.914285714285705*G0_1_0_9_0_0 - 0.9142857142857*G0_1_0_9_0_1 - 1.93015873015873*G0_1_0_10_1_0 - 1.93015873015873*G0_1_0_10_1_1 + 0.406349206349204*G0_1_0_11_1_0 + 0.406349206349205*G0_1_0_12_1_1 + 0.0507936507936476*G0_1_0_13_1_0 + 0.0507936507936502*G0_1_0_13_1_1 + 0.0507936507936482*G0_1_0_14_1_0 + 0.0507936507936466*G0_1_0_14_1_1 + 0.863492063492057*G0_1_0_15_1_0 + 3.5047619047619*G0_1_0_15_1_1 - 0.0507936507936483*G0_1_0_16_1_0 - 1.98095238095238*G0_1_0_16_1_1 + 3.50476190476189*G0_1_0_17_1_0 + 0.863492063492055*G0_1_0_17_1_1 - 1.98095238095237*G0_1_0_18_1_0 - 0.0507936507936508*G0_1_0_18_1_1 - 0.914285714285705*G0_1_0_19_1_0 - 0.9142857142857*G0_1_0_19_1_1;
    A[578] = 0.0;
    A[518] = 0.0;
    A[231] = 0.0;
    A[603] = 0.0;
    A[632] = 0.0;
    A[669] = 0.0;
    A[702] = 0.0;
    A[21] = 0.0;
    A[46] = 0.0;
    A[769] = A[127] + 0.0647619047619049*G0_0_0_0_0_0 + 0.0647619047619048*G0_0_0_0_0_1 - 0.0952380952380959*G0_0_0_1_0_0 + 0.617142857142848*G0_0_0_2_0_1 - 0.834285714285707*G0_0_0_3_0_0 - 0.104761904761904*G0_0_0_3_0_1 + 0.217142857142843*G0_0_0_4_0_0 - 1.2247619047619*G0_0_0_4_0_1 + 1.08571428571428*G0_0_0_5_0_0 + 0.91619047619047*G0_0_0_5_0_1 - 0.217142857142843*G0_0_0_6_0_0 - 1.59809523809522*G0_0_0_6_0_1 - 0.899047619047616*G0_0_0_7_0_0 - 0.729523809523808*G0_0_0_7_0_1 + 0.929523809523807*G0_0_0_8_0_0 + 0.104761904761905*G0_0_0_8_0_1 - 0.25142857142857*G0_0_0_9_0_0 + 1.95428571428571*G0_0_0_9_0_1 + 0.0647619047619049*G0_0_0_10_1_0 + 0.0647619047619048*G0_0_0_10_1_1 - 0.0952380952380959*G0_0_0_11_1_0 + 0.617142857142848*G0_0_0_12_1_1 - 0.834285714285707*G0_0_0_13_1_0 - 0.104761904761904*G0_0_0_13_1_1 + 0.217142857142843*G0_0_0_14_1_0 - 1.2247619047619*G0_0_0_14_1_1 + 1.08571428571428*G0_0_0_15_1_0 + 0.91619047619047*G0_0_0_15_1_1 - 0.217142857142843*G0_0_0_16_1_0 - 1.59809523809522*G0_0_0_16_1_1 - 0.899047619047616*G0_0_0_17_1_0 - 0.729523809523808*G0_0_0_17_1_1 + 0.929523809523807*G0_0_0_18_1_0 + 0.104761904761905*G0_0_0_18_1_1 - 0.25142857142857*G0_0_0_19_1_0 + 1.95428571428571*G0_0_0_19_1_1 - 0.392380952380957*G0_0_1_1_0_0 + 0.392380952380945*G0_0_1_2_0_1 + 0.219047619047622*G0_0_1_3_0_0 - 0.17333333333334*G0_0_1_3_0_1 + 0.173333333333323*G0_0_1_4_0_0 - 0.219047619047616*G0_0_1_4_0_1 + 1.00380952380952*G0_0_1_5_0_0 + 1.00380952380952*G0_0_1_5_0_1 - 0.173333333333323*G0_0_1_6_0_0 - 1.39619047619046*G0_0_1_6_0_1 - 1.00380952380952*G0_0_1_7_0_0 - 1.00380952380953*G0_0_1_7_0_1 + 1.39619047619048*G0_0_1_8_0_0 + 0.17333333333334*G0_0_1_8_0_1 - 1.22285714285714*G0_0_1_9_0_0 + 1.22285714285714*G0_0_1_9_0_1 - 0.392380952380957*G0_0_1_11_1_0 + 0.392380952380945*G0_0_1_12_1_1 + 0.219047619047622*G0_0_1_13_1_0 - 0.17333333333334*G0_0_1_13_1_1 + 0.173333333333323*G0_0_1_14_1_0 - 0.219047619047616*G0_0_1_14_1_1 + 1.00380952380952*G0_0_1_15_1_0 + 1.00380952380952*G0_0_1_15_1_1 - 0.173333333333323*G0_0_1_16_1_0 - 1.39619047619046*G0_0_1_16_1_1 - 1.00380952380952*G0_0_1_17_1_0 - 1.00380952380953*G0_0_1_17_1_1 + 1.39619047619048*G0_0_1_18_1_0 + 0.17333333333334*G0_0_1_18_1_1 - 1.22285714285714*G0_0_1_19_1_0 + 1.22285714285714*G0_0_1_19_1_1 - 0.289523809523813*G0_1_0_1_0_0 + 0.289523809523802*G0_1_0_2_0_1 + 0.0761904761904746*G0_1_0_3_0_0 - 0.213333333333341*G0_1_0_3_0_1 + 0.213333333333322*G0_1_0_4_0_0 - 0.0761904761904785*G0_1_0_4_0_1 + 0.655238095238091*G0_1_0_5_0_0 + 0.65523809523809*G0_1_0_5_0_1 - 0.213333333333321*G0_1_0_6_0_0 - 0.944761904761894*G0_1_0_6_0_1 - 0.655238095238094*G0_1_0_7_0_0 - 0.655238095238093*G0_1_0_7_0_1 + 0.944761904761905*G0_1_0_8_0_0 + 0.213333333333341*G0_1_0_8_0_1 - 0.731428571428565*G0_1_0_9_0_0 + 0.731428571428571*G0_1_0_9_0_1 - 0.289523809523813*G0_1_0_11_1_0 + 0.289523809523802*G0_1_0_12_1_1 + 0.0761904761904746*G0_1_0_13_1_0 - 0.213333333333341*G0_1_0_13_1_1 + 0.213333333333322*G0_1_0_14_1_0 - 0.0761904761904785*G0_1_0_14_1_1 + 0.655238095238091*G0_1_0_15_1_0 + 0.65523809523809*G0_1_0_15_1_1 - 0.213333333333321*G0_1_0_16_1_0 - 0.944761904761894*G0_1_0_16_1_1 - 0.655238095238094*G0_1_0_17_1_0 - 0.655238095238093*G0_1_0_17_1_1 + 0.944761904761905*G0_1_0_18_1_0 + 0.213333333333341*G0_1_0_18_1_1 - 0.731428571428565*G0_1_0_19_1_0 + 0.731428571428571*G0_1_0_19_1_1 - 0.064761904761906*G0_1_1_0_0_0 - 0.0647619047619066*G0_1_1_0_0_1 - 0.61714285714286*G0_1_1_1_0_0 + 0.0952380952380907*G0_1_1_2_0_1 + 1.2247619047619*G0_1_1_3_0_0 - 0.217142857142866*G0_1_1_3_0_1 + 0.104761904761898*G0_1_1_4_0_0 + 0.834285714285712*G0_1_1_4_0_1 + 0.729523809523802*G0_1_1_5_0_0 + 0.899047619047618*G0_1_1_5_0_1 - 0.104761904761897*G0_1_1_6_0_0 - 0.929523809523802*G0_1_1_6_0_1 - 0.916190476190471*G0_1_1_7_0_0 - 1.08571428571429*G0_1_1_7_0_1 + 1.59809523809524*G0_1_1_8_0_0 + 0.217142857142867*G0_1_1_8_0_1 - 1.9542857142857*G0_1_1_9_0_0 + 0.251428571428575*G0_1_1_9_0_1 - 0.064761904761906*G0_1_1_10_1_0 - 0.0647619047619066*G0_1_1_10_1_1 - 0.61714285714286*G0_1_1_11_1_0 + 0.0952380952380907*G0_1_1_12_1_1 + 1.2247619047619*G0_1_1_13_1_0 - 0.217142857142866*G0_1_1_13_1_1 + 0.104761904761898*G0_1_1_14_1_0 + 0.834285714285712*G0_1_1_14_1_1 + 0.729523809523802*G0_1_1_15_1_0 + 0.899047619047618*G0_1_1_15_1_1 - 0.104761904761897*G0_1_1_16_1_0 - 0.929523809523802*G0_1_1_16_1_1 - 0.916190476190471*G0_1_1_17_1_0 - 1.08571428571429*G0_1_1_17_1_1 + 1.59809523809524*G0_1_1_18_1_0 + 0.217142857142867*G0_1_1_18_1_1 - 1.9542857142857*G0_1_1_19_1_0 + 0.251428571428575*G0_1_1_19_1_1;
    A[450] = 0.0;
    A[406] = 0.0;
    A[83] = 0.0;
    A[788] = 0.0;
    A[815] = 0.0;
    A[40] = -0.540423280423279*G0_0_0_0_0_0 - 0.540423280423278*G0_0_0_0_0_1 + 1.27883597883597*G0_0_0_1_0_0 + 0.122962962962963*G0_0_0_2_0_1 + 0.433333333333331*G0_0_0_3_0_0 + 2.1579365079365*G0_0_0_3_0_1 - 0.106666666666666*G0_0_0_4_0_0 - 0.675396825396823*G0_0_0_4_0_1 - 0.256190476190475*G0_0_0_5_0_0 + 0.336349206349205*G0_0_0_5_0_1 + 0.106666666666667*G0_0_0_6_0_0 + 0.0811111111111099*G0_0_0_6_0_1 + 1.53936507936507*G0_0_0_7_0_0 + 0.946825396825392*G0_0_0_7_0_1 - 2.27777777777777*G0_0_0_8_0_0 - 2.1579365079365*G0_0_0_8_0_1 - 0.177142857142856*G0_0_0_9_0_0 - 0.271428571428568*G0_0_0_9_0_1 - 0.540423280423279*G0_0_0_10_1_0 - 0.540423280423278*G0_0_0_10_1_1 + 1.27883597883597*G0_0_0_11_1_0 + 0.122962962962963*G0_0_0_12_1_1 + 0.433333333333331*G0_0_0_13_1_0 + 2.1579365079365*G0_0_0_13_1_1 - 0.106666666666666*G0_0_0_14_1_0 - 0.675396825396823*G0_0_0_14_1_1 - 0.256190476190475*G0_0_0_15_1_0 + 0.336349206349205*G0_0_0_15_1_1 + 0.106666666666667*G0_0_0_16_1_0 + 0.0811111111111099*G0_0_0_16_1_1 + 1.53936507936507*G0_0_0_17_1_0 + 0.946825396825392*G0_0_0_17_1_1 - 2.27777777777777*G0_0_0_18_1_0 - 2.1579365079365*G0_0_0_18_1_1 - 0.177142857142856*G0_0_0_19_1_0 - 0.271428571428568*G0_0_0_19_1_1 - 0.276190476190475*G0_0_1_0_0_0 - 0.276190476190474*G0_0_1_0_0_1 + 1.47777777777777*G0_0_1_1_0_0 + 0.174603174603173*G0_0_1_2_0_1 + 0.586507936507933*G0_0_1_3_0_0 + 2.70476190476189*G0_0_1_3_0_1 - 0.103968253968254*G0_0_1_4_0_0 - 0.919047619047614*G0_0_1_4_0_1 + 0.0849206349206333*G0_0_1_5_0_0 + 0.0507936507936502*G0_0_1_5_0_1 + 0.103968253968254*G0_0_1_6_0_0 + 0.0507936507936506*G0_0_1_6_0_1 + 1.15158730158729*G0_0_1_7_0_0 + 1.18571428571428*G0_0_1_7_0_1 - 2.35317460317459*G0_0_1_8_0_0 - 2.70476190476189*G0_0_1_8_0_1 - 0.671428571428566*G0_0_1_9_0_0 - 0.266666666666662*G0_0_1_9_0_1 - 0.276190476190475*G0_0_1_10_1_0 - 0.276190476190474*G0_0_1_10_1_1 + 1.47777777777777*G0_0_1_11_1_0 + 0.174603174603173*G0_0_1_12_1_1 + 0.586507936507933*G0_0_1_13_1_0 + 2.70476190476189*G0_0_1_13_1_1 - 0.103968253968254*G0_0_1_14_1_0 - 0.919047619047614*G0_0_1_14_1_1 + 0.0849206349206333*G0_0_1_15_1_0 + 0.0507936507936502*G0_0_1_15_1_1 + 0.103968253968254*G0_0_1_16_1_0 + 0.0507936507936506*G0_0_1_16_1_1 + 1.15158730158729*G0_0_1_17_1_0 + 1.18571428571428*G0_0_1_17_1_1 - 2.35317460317459*G0_0_1_18_1_0 - 2.70476190476189*G0_0_1_18_1_1 - 0.671428571428566*G0_0_1_19_1_0 - 0.266666666666662*G0_0_1_19_1_1;
    A[121] = A[766] + 0.59206349206349*G0_0_0_0_0_0 + 0.59206349206349*G0_0_0_0_0_1 - 1.47777777777777*G0_0_0_1_0_0 + 0.14126984126984*G0_0_0_2_0_1 - 0.9047619047619*G0_0_0_3_0_0 - 2.70476190476189*G0_0_0_3_0_1 + 0.733333333333329*G0_0_0_4_0_0 + 0.914285714285708*G0_0_0_4_0_1 + 0.228571428571428*G0_0_0_5_0_0 - 0.366666666666666*G0_0_0_5_0_1 - 0.73333333333333*G0_0_0_6_0_0 - 0.366666666666664*G0_0_0_6_0_1 - 1.78571428571428*G0_0_0_7_0_0 - 1.19047619047618*G0_0_0_7_0_1 + 2.67142857142856*G0_0_0_8_0_0 + 2.70476190476189*G0_0_0_8_0_1 + 0.676190476190472*G0_0_0_9_0_0 + 0.276190476190473*G0_0_0_9_0_1 + 0.59206349206349*G0_0_0_10_1_0 + 0.59206349206349*G0_0_0_10_1_1 - 1.47777777777777*G0_0_0_11_1_0 + 0.14126984126984*G0_0_0_12_1_1 - 0.9047619047619*G0_0_0_13_1_0 - 2.70476190476189*G0_0_0_13_1_1 + 0.733333333333329*G0_0_0_14_1_0 + 0.914285714285708*G0_0_0_14_1_1 + 0.228571428571428*G0_0_0_15_1_0 - 0.366666666666666*G0_0_0_15_1_1 - 0.73333333333333*G0_0_0_16_1_0 - 0.366666666666664*G0_0_0_16_1_1 - 1.78571428571428*G0_0_0_17_1_0 - 1.19047619047618*G0_0_0_17_1_1 + 2.67142857142856*G0_0_0_18_1_0 + 2.70476190476189*G0_0_0_18_1_1 + 0.676190476190472*G0_0_0_19_1_0 + 0.276190476190473*G0_0_0_19_1_1 + 0.45079365079365*G0_1_0_0_0_0 + 0.450793650793649*G0_1_0_0_0_1 - 2.95555555555554*G0_1_0_1_0_0 - 0.450793650793648*G0_1_0_2_0_1 - 0.938095238095233*G0_1_0_3_0_0 - 5.40952380952378*G0_1_0_3_0_1 + 0.138095238095239*G0_1_0_4_0_0 + 2.10476190476189*G0_1_0_4_0_1 - 0.138095238095235*G0_1_0_5_0_0 - 0.138095238095239*G0_1_0_6_0_0 - 1.96666666666666*G0_1_0_7_0_0 - 2.10476190476189*G0_1_0_7_0_1 + 4.47142857142855*G0_1_0_8_0_0 + 5.40952380952378*G0_1_0_8_0_1 + 1.07619047619047*G0_1_0_9_0_0 + 0.45079365079365*G0_1_0_10_1_0 + 0.450793650793649*G0_1_0_10_1_1 - 2.95555555555554*G0_1_0_11_1_0 - 0.450793650793648*G0_1_0_12_1_1 - 0.938095238095233*G0_1_0_13_1_0 - 5.40952380952378*G0_1_0_13_1_1 + 0.138095238095239*G0_1_0_14_1_0 + 2.10476190476189*G0_1_0_14_1_1 - 0.138095238095235*G0_1_0_15_1_0 - 0.138095238095239*G0_1_0_16_1_0 - 1.96666666666666*G0_1_0_17_1_0 - 2.10476190476189*G0_1_0_17_1_1 + 4.47142857142855*G0_1_0_18_1_0 + 5.40952380952378*G0_1_0_18_1_1 + 1.07619047619047*G0_1_0_19_1_0;
    A[846] = 0.0;
    A[877] = 0.0;
    A[484] = 0.0;
    A[191] = A[656];
    A[587] = A[677] + 0.450793650793649*G0_0_1_0_0_0 + 0.450793650793649*G0_0_1_0_0_1 - 0.45079365079365*G0_0_1_1_0_0 - 2.95555555555554*G0_0_1_2_0_1 + 2.10476190476189*G0_0_1_3_0_0 + 0.138095238095233*G0_0_1_3_0_1 - 5.40952380952377*G0_0_1_4_0_0 - 0.938095238095233*G0_0_1_4_0_1 - 2.10476190476189*G0_0_1_5_0_0 - 1.96666666666665*G0_0_1_5_0_1 + 5.40952380952378*G0_0_1_6_0_0 + 4.47142857142854*G0_0_1_6_0_1 - 0.138095238095238*G0_0_1_7_0_1 - 0.138095238095234*G0_0_1_8_0_1 + 1.07619047619047*G0_0_1_9_0_1 + 0.450793650793649*G0_0_1_10_1_0 + 0.450793650793649*G0_0_1_10_1_1 - 0.45079365079365*G0_0_1_11_1_0 - 2.95555555555554*G0_0_1_12_1_1 + 2.10476190476189*G0_0_1_13_1_0 + 0.138095238095233*G0_0_1_13_1_1 - 5.40952380952377*G0_0_1_14_1_0 - 0.938095238095233*G0_0_1_14_1_1 - 2.10476190476189*G0_0_1_15_1_0 - 1.96666666666665*G0_0_1_15_1_1 + 5.40952380952378*G0_0_1_16_1_0 + 4.47142857142854*G0_0_1_16_1_1 - 0.138095238095238*G0_0_1_17_1_1 - 0.138095238095234*G0_0_1_18_1_1 + 1.07619047619047*G0_0_1_19_1_1 + 0.592063492063489*G0_1_1_0_0_0 + 0.592063492063489*G0_1_1_0_0_1 + 0.141269841269842*G0_1_1_1_0_0 - 1.47777777777777*G0_1_1_2_0_1 + 0.914285714285708*G0_1_1_3_0_0 + 0.733333333333331*G0_1_1_3_0_1 - 2.70476190476189*G0_1_1_4_0_0 - 0.9047619047619*G0_1_1_4_0_1 - 1.19047619047618*G0_1_1_5_0_0 - 1.78571428571427*G0_1_1_5_0_1 + 2.70476190476189*G0_1_1_6_0_0 + 2.67142857142855*G0_1_1_6_0_1 - 0.366666666666664*G0_1_1_7_0_0 + 0.228571428571428*G0_1_1_7_0_1 - 0.366666666666666*G0_1_1_8_0_0 - 0.733333333333331*G0_1_1_8_0_1 + 0.276190476190474*G0_1_1_9_0_0 + 0.676190476190472*G0_1_1_9_0_1 + 0.592063492063489*G0_1_1_10_1_0 + 0.592063492063489*G0_1_1_10_1_1 + 0.141269841269842*G0_1_1_11_1_0 - 1.47777777777777*G0_1_1_12_1_1 + 0.914285714285708*G0_1_1_13_1_0 + 0.733333333333331*G0_1_1_13_1_1 - 2.70476190476189*G0_1_1_14_1_0 - 0.9047619047619*G0_1_1_14_1_1 - 1.19047619047618*G0_1_1_15_1_0 - 1.78571428571427*G0_1_1_15_1_1 + 2.70476190476189*G0_1_1_16_1_0 + 2.67142857142855*G0_1_1_16_1_1 - 0.366666666666664*G0_1_1_17_1_0 + 0.228571428571428*G0_1_1_17_1_1 - 0.366666666666666*G0_1_1_18_1_0 - 0.733333333333331*G0_1_1_18_1_1 + 0.276190476190474*G0_1_1_19_1_0 + 0.676190476190472*G0_1_1_19_1_1;
    A[511] = 0.0;
    A[228] = 0.0;
    A[610] = 0.0;
    A[546] = 0.0;
    A[506] = A[331] + 0.423280423280422*G0_0_1_0_0_0 + 0.423280423280421*G0_0_1_0_0_1 - 2.80423280423279*G0_0_1_1_0_0 - 0.423280423280421*G0_0_1_2_0_1 - 0.860317460317454*G0_0_1_3_0_0 - 5.11746031746029*G0_0_1_3_0_1 + 0.149206349206349*G0_0_1_4_0_0 + 2.02539682539681*G0_0_1_4_0_1 - 0.149206349206346*G0_0_1_5_0_0 - 0.14920634920635*G0_0_1_6_0_0 - 1.87619047619046*G0_0_1_7_0_0 - 2.02539682539681*G0_0_1_7_0_1 + 4.25714285714283*G0_0_1_8_0_0 + 5.11746031746029*G0_0_1_8_0_1 + 1.0095238095238*G0_0_1_9_0_0 + 0.423280423280422*G0_0_1_10_1_0 + 0.423280423280421*G0_0_1_10_1_1 - 2.80423280423279*G0_0_1_11_1_0 - 0.423280423280421*G0_0_1_12_1_1 - 0.860317460317454*G0_0_1_13_1_0 - 5.11746031746029*G0_0_1_13_1_1 + 0.149206349206349*G0_0_1_14_1_0 + 2.02539682539681*G0_0_1_14_1_1 - 0.149206349206346*G0_0_1_15_1_0 - 0.14920634920635*G0_0_1_16_1_0 - 1.87619047619046*G0_0_1_17_1_0 - 2.02539682539681*G0_0_1_17_1_1 + 4.25714285714283*G0_0_1_18_1_0 + 5.11746031746029*G0_0_1_18_1_1 + 1.0095238095238*G0_0_1_19_1_0 - 0.423280423280422*G0_1_0_0_0_0 - 0.423280423280421*G0_1_0_0_0_1 + 2.80423280423279*G0_1_0_1_0_0 + 0.423280423280421*G0_1_0_2_0_1 + 0.860317460317454*G0_1_0_3_0_0 + 5.11746031746029*G0_1_0_3_0_1 - 0.149206349206349*G0_1_0_4_0_0 - 2.02539682539681*G0_1_0_4_0_1 + 0.149206349206346*G0_1_0_5_0_0 + 0.14920634920635*G0_1_0_6_0_0 + 1.87619047619046*G0_1_0_7_0_0 + 2.02539682539681*G0_1_0_7_0_1 - 4.25714285714283*G0_1_0_8_0_0 - 5.11746031746029*G0_1_0_8_0_1 - 1.0095238095238*G0_1_0_9_0_0 - 0.423280423280422*G0_1_0_10_1_0 - 0.423280423280421*G0_1_0_10_1_1 + 2.80423280423279*G0_1_0_11_1_0 + 0.423280423280421*G0_1_0_12_1_1 + 0.860317460317454*G0_1_0_13_1_0 + 5.11746031746029*G0_1_0_13_1_1 - 0.149206349206349*G0_1_0_14_1_0 - 2.02539682539681*G0_1_0_14_1_1 + 0.149206349206346*G0_1_0_15_1_0 + 0.14920634920635*G0_1_0_16_1_0 + 1.87619047619046*G0_1_0_17_1_0 + 2.02539682539681*G0_1_0_17_1_1 - 4.25714285714283*G0_1_0_18_1_0 - 5.11746031746029*G0_1_0_18_1_1 - 1.0095238095238*G0_1_0_19_1_0;
    A[641] = 0.0;
    A[537] = A[72];
    A[660] = 0.0;
    A[695] = 0.0;
    A[262] = 0.0;
    A[333] = A[101] + 0.406349206349206*G0_0_1_0_0_0 + 0.406349206349205*G0_0_1_0_0_1 - 1.93015873015873*G0_0_1_1_0_0 - 0.406349206349206*G0_0_1_2_0_1 + 0.86349206349206*G0_0_1_3_0_0 - 2.64126984126984*G0_0_1_3_0_1 - 0.0507936507936488*G0_0_1_4_0_0 + 1.93015873015873*G0_0_1_4_0_1 + 0.0507936507936529*G0_0_1_5_0_0 + 0.0507936507936492*G0_0_1_6_0_0 - 1.98095238095237*G0_0_1_7_0_0 - 1.93015873015872*G0_0_1_7_0_1 + 3.5047619047619*G0_0_1_8_0_0 + 2.64126984126984*G0_0_1_8_0_1 - 0.914285714285713*G0_0_1_9_0_0 + 0.406349206349206*G0_0_1_10_1_0 + 0.406349206349205*G0_0_1_10_1_1 - 1.93015873015873*G0_0_1_11_1_0 - 0.406349206349206*G0_0_1_12_1_1 + 0.86349206349206*G0_0_1_13_1_0 - 2.64126984126984*G0_0_1_13_1_1 - 0.0507936507936488*G0_0_1_14_1_0 + 1.93015873015873*G0_0_1_14_1_1 + 0.0507936507936529*G0_0_1_15_1_0 + 0.0507936507936492*G0_0_1_16_1_0 - 1.98095238095237*G0_0_1_17_1_0 - 1.93015873015872*G0_0_1_17_1_1 + 3.5047619047619*G0_0_1_18_1_0 + 2.64126984126984*G0_0_1_18_1_1 - 0.914285714285713*G0_0_1_19_1_0 - 0.406349206349206*G0_1_0_0_0_0 - 0.406349206349205*G0_1_0_0_0_1 + 1.93015873015873*G0_1_0_1_0_0 + 0.406349206349206*G0_1_0_2_0_1 - 0.86349206349206*G0_1_0_3_0_0 + 2.64126984126984*G0_1_0_3_0_1 + 0.0507936507936488*G0_1_0_4_0_0 - 1.93015873015873*G0_1_0_4_0_1 - 0.0507936507936529*G0_1_0_5_0_0 - 0.0507936507936492*G0_1_0_6_0_0 + 1.98095238095237*G0_1_0_7_0_0 + 1.93015873015872*G0_1_0_7_0_1 - 3.5047619047619*G0_1_0_8_0_0 - 2.64126984126984*G0_1_0_8_0_1 + 0.914285714285713*G0_1_0_9_0_0 - 0.406349206349206*G0_1_0_10_1_0 - 0.406349206349205*G0_1_0_10_1_1 + 1.93015873015873*G0_1_0_11_1_0 + 0.406349206349206*G0_1_0_12_1_1 - 0.86349206349206*G0_1_0_13_1_0 + 2.64126984126984*G0_1_0_13_1_1 + 0.0507936507936488*G0_1_0_14_1_0 - 1.93015873015873*G0_1_0_14_1_1 - 0.0507936507936529*G0_1_0_15_1_0 - 0.0507936507936492*G0_1_0_16_1_0 + 1.98095238095237*G0_1_0_17_1_0 + 1.93015873015872*G0_1_0_17_1_1 - 3.5047619047619*G0_1_0_18_1_0 - 2.64126984126984*G0_1_0_18_1_1 + 0.914285714285713*G0_1_0_19_1_0;
    A[293] = 0.0;
    A[320] = 0.0;
    A[459] = 0.0;
    A[355] = 0.0;
    A[105] = 0.0;
    A[33] = -A[506] + 0.34074074074074*G0_0_0_0_0_0 + 0.34074074074074*G0_0_0_0_0_1 - 1.25502645502645*G0_0_0_1_0_0 - 0.34074074074074*G0_0_0_2_0_1 - 0.0126984126984137*G0_0_0_3_0_0 - 2.01269841269841*G0_0_0_3_0_1 - 0.355555555555553*G0_0_0_4_0_0 + 0.73015873015873*G0_0_0_4_0_1 + 0.355555555555554*G0_0_0_5_0_0 + 0.355555555555553*G0_0_0_6_0_0 - 1.08571428571428*G0_0_0_7_0_0 - 0.730158730158728*G0_0_0_7_0_1 + 2*G0_0_0_8_0_0 + 2.01269841269841*G0_0_0_8_0_1 - 0.342857142857141*G0_0_0_9_0_0 + 0.34074074074074*G0_0_0_10_1_0 + 0.34074074074074*G0_0_0_10_1_1 - 1.25502645502645*G0_0_0_11_1_0 - 0.34074074074074*G0_0_0_12_1_1 - 0.0126984126984137*G0_0_0_13_1_0 - 2.01269841269841*G0_0_0_13_1_1 - 0.355555555555553*G0_0_0_14_1_0 + 0.73015873015873*G0_0_0_14_1_1 + 0.355555555555554*G0_0_0_15_1_0 + 0.355555555555553*G0_0_0_16_1_0 - 1.08571428571428*G0_0_0_17_1_0 - 0.730158730158728*G0_0_0_17_1_1 + 2*G0_0_0_18_1_0 + 2.01269841269841*G0_0_0_18_1_1 - 0.342857142857141*G0_0_0_19_1_0;
    A[68] = A[533];
    A[163] = A[628];
    A[870] = 0.0;
    A[111] = 0.0;
    A[142] = 0.0;
    A[592] = A[127];
    A[221] = -A[213] - 0.171005291005292*G0_0_0_0_0_0 - 0.171005291005292*G0_0_0_0_0_1 - 0.245502645502641*G0_0_0_1_0_0 + 0.0541798941798927*G0_0_0_2_0_1 + 0.929523809523809*G0_0_0_3_0_0 + 0.21587301587302*G0_0_0_3_0_1 - 0.41142857142857*G0_0_0_4_0_0 + 0.00253968253968433*G0_0_0_4_0_1 + 1.47809523809523*G0_0_0_5_0_0 + 1.3231746031746*G0_0_0_5_0_1 + 0.411428571428571*G0_0_0_6_0_0 - 1.2063492063492*G0_0_0_6_0_1 - 0.203174603174597*G0_0_0_7_0_0 - 0.0482539682539652*G0_0_0_7_0_1 + 0.61968253968253*G0_0_0_8_0_0 - 0.21587301587302*G0_0_0_8_0_1 - 2.40761904761904*G0_0_0_9_0_0 + 0.045714285714281*G0_0_0_9_0_1 - 0.171005291005292*G0_0_0_10_1_0 - 0.171005291005292*G0_0_0_10_1_1 - 0.245502645502641*G0_0_0_11_1_0 + 0.0541798941798927*G0_0_0_12_1_1 + 0.929523809523809*G0_0_0_13_1_0 + 0.21587301587302*G0_0_0_13_1_1 - 0.41142857142857*G0_0_0_14_1_0 + 0.00253968253968433*G0_0_0_14_1_1 + 1.47809523809523*G0_0_0_15_1_0 + 1.3231746031746*G0_0_0_15_1_1 + 0.411428571428571*G0_0_0_16_1_0 - 1.2063492063492*G0_0_0_16_1_1 - 0.203174603174597*G0_0_0_17_1_0 - 0.0482539682539652*G0_0_0_17_1_1 + 0.61968253968253*G0_0_0_18_1_0 - 0.21587301587302*G0_0_0_18_1_1 - 2.40761904761904*G0_0_0_19_1_0 + 0.045714285714281*G0_0_0_19_1_1 - 0.116825396825393*G0_1_0_0_0_0 - 0.116825396825392*G0_1_0_0_0_1 - 0.116825396825396*G0_1_0_2_0_1 + 0.0939682539682569*G0_1_0_3_0_0 - 0.256507936507935*G0_1_0_4_0_0 - 0.0457142857142837*G0_1_0_4_0_1 - 0.139682539682534*G0_1_0_5_0_0 + 0.116825396825392*G0_1_0_5_0_1 + 0.256507936507935*G0_1_0_6_0_0 + 0.116825396825397*G0_1_0_6_0_1 + 0.210793650793645*G0_1_0_7_0_0 - 0.0457142857142807*G0_1_0_7_0_1 - 0.0939682539682538*G0_1_0_8_0_0 + 0.045714285714277*G0_1_0_9_0_0 + 0.0914285714285639*G0_1_0_9_0_1 - 0.116825396825393*G0_1_0_10_1_0 - 0.116825396825392*G0_1_0_10_1_1 - 0.116825396825396*G0_1_0_12_1_1 + 0.0939682539682569*G0_1_0_13_1_0 - 0.256507936507935*G0_1_0_14_1_0 - 0.0457142857142837*G0_1_0_14_1_1 - 0.139682539682534*G0_1_0_15_1_0 + 0.116825396825392*G0_1_0_15_1_1 + 0.256507936507935*G0_1_0_16_1_0 + 0.116825396825397*G0_1_0_16_1_1 + 0.210793650793645*G0_1_0_17_1_0 - 0.0457142857142807*G0_1_0_17_1_1 - 0.0939682539682538*G0_1_0_18_1_0 + 0.045714285714277*G0_1_0_19_1_0 + 0.0914285714285639*G0_1_0_19_1_1;
    A[219] = A[221] - 0.223492063492064*G0_0_0_0_0_0 - 0.223492063492064*G0_0_0_0_0_1 + 0.264126984126981*G0_0_0_1_0_0 - 0.85333333333333*G0_0_0_3_0_0 - 0.142222222222225*G0_0_0_3_0_1 - 0.446984126984124*G0_0_0_4_0_1 - 0.853333333333327*G0_0_0_5_0_0 - 0.223492063492057*G0_0_0_5_0_1 + 0.446984126984121*G0_0_0_6_0_1 + 0.711111111111108*G0_0_0_7_0_0 + 0.0812698412698394*G0_0_0_7_0_1 - 0.751746031746025*G0_0_0_8_0_0 + 0.142222222222225*G0_0_0_8_0_1 + 1.70666666666666*G0_0_0_9_0_0 + 0.365714285714285*G0_0_0_9_0_1 - 0.223492063492064*G0_0_0_10_1_0 - 0.223492063492064*G0_0_0_10_1_1 + 0.264126984126981*G0_0_0_11_1_0 - 0.85333333333333*G0_0_0_13_1_0 - 0.142222222222225*G0_0_0_13_1_1 - 0.446984126984124*G0_0_0_14_1_1 - 0.853333333333327*G0_0_0_15_1_0 - 0.223492063492057*G0_0_0_15_1_1 + 0.446984126984121*G0_0_0_16_1_1 + 0.711111111111108*G0_0_0_17_1_0 + 0.0812698412698394*G0_0_0_17_1_1 - 0.751746031746025*G0_0_0_18_1_0 + 0.142222222222225*G0_0_0_18_1_1 + 1.70666666666666*G0_0_0_19_1_0 + 0.365714285714285*G0_0_0_19_1_1 + 0.37079365079365*G0_0_1_0_0_0 + 0.37079365079365*G0_0_1_0_0_1 + 0.0457142857142814*G0_0_1_1_0_0 - 0.193015873015873*G0_0_1_2_0_1 - 0.274285714285714*G0_0_1_3_0_0 + 0.0203174603174522*G0_0_1_3_0_1 - 0.396190476190475*G0_0_1_4_0_0 - 0.452063492063486*G0_0_1_4_0_1 + 0.152380952380952*G0_0_1_5_0_0 - 0.599365079365077*G0_0_1_5_0_1 + 0.396190476190475*G0_0_1_6_0_0 + 0.421587301587301*G0_0_1_6_0_1 - 0.29968253968254*G0_0_1_7_0_0 + 0.452063492063489*G0_0_1_7_0_1 - 0.116825396825391*G0_0_1_8_0_0 - 0.0203174603174524*G0_0_1_8_0_1 + 0.121904761904762*G0_0_1_9_0_0 + 0.37079365079365*G0_0_1_10_1_0 + 0.37079365079365*G0_0_1_10_1_1 + 0.0457142857142814*G0_0_1_11_1_0 - 0.193015873015873*G0_0_1_12_1_1 - 0.274285714285714*G0_0_1_13_1_0 + 0.0203174603174522*G0_0_1_13_1_1 - 0.396190476190475*G0_0_1_14_1_0 - 0.452063492063486*G0_0_1_14_1_1 + 0.152380952380952*G0_0_1_15_1_0 - 0.599365079365077*G0_0_1_15_1_1 + 0.396190476190475*G0_0_1_16_1_0 + 0.421587301587301*G0_0_1_16_1_1 - 0.29968253968254*G0_0_1_17_1_0 + 0.452063492063489*G0_0_1_17_1_1 - 0.116825396825391*G0_0_1_18_1_0 - 0.0203174603174524*G0_0_1_18_1_1 + 0.121904761904762*G0_0_1_19_1_0 + 1.44761904761904*G0_1_0_0_0_0 + 1.44761904761904*G0_1_0_0_0_1 - 0.147301587301588*G0_1_0_1_0_0 - 0.172698412698411*G0_1_0_2_0_1 - 0.416507936507934*G0_1_0_3_0_0 + 0.106666666666662*G0_1_0_3_0_1 - 0.172698412698411*G0_1_0_4_0_0 - 0.670476190476185*G0_1_0_4_0_1 + 0.0507936507936504*G0_1_0_5_0_0 - 2.26031746031744*G0_1_0_5_0_1 + 0.172698412698411*G0_1_0_6_0_0 + 0.985396825396818*G0_1_0_6_0_1 - 2.46349206349205*G0_1_0_7_0_0 - 0.152380952380953*G0_1_0_7_0_1 + 1.1631746031746*G0_1_0_8_0_0 - 0.106666666666662*G0_1_0_8_0_1 + 0.365714285714284*G0_1_0_9_0_0 + 0.822857142857137*G0_1_0_9_0_1 + 1.44761904761904*G0_1_0_10_1_0 + 1.44761904761904*G0_1_0_10_1_1 - 0.147301587301588*G0_1_0_11_1_0 - 0.172698412698411*G0_1_0_12_1_1 - 0.416507936507934*G0_1_0_13_1_0 + 0.106666666666662*G0_1_0_13_1_1 - 0.172698412698411*G0_1_0_14_1_0 - 0.670476190476185*G0_1_0_14_1_1 + 0.0507936507936504*G0_1_0_15_1_0 - 2.26031746031744*G0_1_0_15_1_1 + 0.172698412698411*G0_1_0_16_1_0 + 0.985396825396818*G0_1_0_16_1_1 - 2.46349206349205*G0_1_0_17_1_0 - 0.152380952380953*G0_1_0_17_1_1 + 1.1631746031746*G0_1_0_18_1_0 - 0.106666666666662*G0_1_0_18_1_1 + 0.365714285714284*G0_1_0_19_1_0 + 0.822857142857137*G0_1_0_19_1_1 - 1.00571428571428*G0_1_1_0_0_0 - 1.00571428571428*G0_1_1_0_0_1 - 0.020317460317464*G0_1_1_1_0_0 + 0.416507936507933*G0_1_1_2_0_1 - 0.177777777777777*G0_1_1_3_0_0 + 0.0304761904761857*G0_1_1_3_0_1 - 0.421587301587301*G0_1_1_4_0_0 - 1.06666666666666*G0_1_1_4_0_1 + 0.452063492063493*G0_1_1_5_0_0 + 2.3974603174603*G0_1_1_5_0_1 + 0.421587301587301*G0_1_1_6_0_0 - 1.80825396825396*G0_1_1_6_0_1 + 0.634920634920625*G0_1_1_7_0_0 - 1.31047619047618*G0_1_1_7_0_1 + 0.391111111111116*G0_1_1_8_0_0 - 0.0304761904761857*G0_1_1_8_0_1 - 0.274285714285716*G0_1_1_9_0_0 + 2.37714285714284*G0_1_1_9_0_1 - 1.00571428571428*G0_1_1_10_1_0 - 1.00571428571428*G0_1_1_10_1_1 - 0.020317460317464*G0_1_1_11_1_0 + 0.416507936507933*G0_1_1_12_1_1 - 0.177777777777777*G0_1_1_13_1_0 + 0.0304761904761857*G0_1_1_13_1_1 - 0.421587301587301*G0_1_1_14_1_0 - 1.06666666666666*G0_1_1_14_1_1 + 0.452063492063493*G0_1_1_15_1_0 + 2.3974603174603*G0_1_1_15_1_1 + 0.421587301587301*G0_1_1_16_1_0 - 1.80825396825396*G0_1_1_16_1_1 + 0.634920634920625*G0_1_1_17_1_0 - 1.31047619047618*G0_1_1_17_1_1 + 0.391111111111116*G0_1_1_18_1_0 - 0.0304761904761857*G0_1_1_18_1_1 - 0.274285714285716*G0_1_1_19_1_0 + 2.37714285714284*G0_1_1_19_1_1;
    A[715] = A[221] + 0.0541798941798938*G0_0_0_0_0_0 + 0.0541798941798939*G0_0_0_0_0_1 + 0.0677248677248648*G0_0_0_1_0_0 + 0.0982010582010601*G0_0_0_2_0_1 - 0.457142857142857*G0_0_0_3_0_0 - 0.152380952380957*G0_0_0_3_0_1 + 0.335238095238098*G0_0_0_4_0_0 - 0.39619047619047*G0_0_0_5_0_0 - 0.365714285714281*G0_0_0_5_0_1 - 0.335238095238098*G0_0_0_6_0_0 + 0.213333333333327*G0_0_0_6_0_1 + 0.0304761904761882*G0_0_0_7_0_0 - 0.152380952380947*G0_0_0_8_0_0 + 0.152380952380957*G0_0_0_8_0_1 + 0.853333333333328*G0_0_0_9_0_0 + 0.0541798941798938*G0_0_0_10_1_0 + 0.0541798941798939*G0_0_0_10_1_1 + 0.0677248677248648*G0_0_0_11_1_0 + 0.0982010582010601*G0_0_0_12_1_1 - 0.457142857142857*G0_0_0_13_1_0 - 0.152380952380957*G0_0_0_13_1_1 + 0.335238095238098*G0_0_0_14_1_0 - 0.39619047619047*G0_0_0_15_1_0 - 0.365714285714281*G0_0_0_15_1_1 - 0.335238095238098*G0_0_0_16_1_0 + 0.213333333333327*G0_0_0_16_1_1 + 0.0304761904761882*G0_0_0_17_1_0 - 0.152380952380947*G0_0_0_18_1_0 + 0.152380952380957*G0_0_0_18_1_1 + 0.853333333333328*G0_0_0_19_1_0 - 0.0965079365079405*G0_0_1_1_0_0 + 0.0965079365079332*G0_0_1_2_0_1 + 0.0253968253968263*G0_0_1_3_0_0 - 0.071111111111119*G0_0_1_3_0_1 + 0.0711111111111084*G0_0_1_4_0_0 - 0.02539682539682*G0_0_1_4_0_1 + 0.218412698412696*G0_0_1_5_0_0 + 0.218412698412697*G0_0_1_5_0_1 - 0.0711111111111084*G0_0_1_6_0_0 - 0.31492063492063*G0_0_1_6_0_1 - 0.218412698412697*G0_0_1_7_0_0 - 0.218412698412697*G0_0_1_7_0_1 + 0.314920634920637*G0_0_1_8_0_0 + 0.0711111111111191*G0_0_1_8_0_1 - 0.243809523809523*G0_0_1_9_0_0 + 0.243809523809517*G0_0_1_9_0_1 - 0.0965079365079405*G0_0_1_11_1_0 + 0.0965079365079332*G0_0_1_12_1_1 + 0.0253968253968263*G0_0_1_13_1_0 - 0.071111111111119*G0_0_1_13_1_1 + 0.0711111111111084*G0_0_1_14_1_0 - 0.02539682539682*G0_0_1_14_1_1 + 0.218412698412696*G0_0_1_15_1_0 + 0.218412698412697*G0_0_1_15_1_1 - 0.0711111111111084*G0_0_1_16_1_0 - 0.31492063492063*G0_0_1_16_1_1 - 0.218412698412697*G0_0_1_17_1_0 - 0.218412698412697*G0_0_1_17_1_1 + 0.314920634920637*G0_0_1_18_1_0 + 0.0711111111111191*G0_0_1_18_1_1 - 0.243809523809523*G0_0_1_19_1_0 + 0.243809523809517*G0_0_1_19_1_1 - 0.208253968253967*G0_1_0_1_0_0 + 0.208253968253969*G0_1_0_2_0_1 - 0.025396825396828*G0_1_0_3_0_0 - 0.233650793650795*G0_1_0_3_0_1 + 0.233650793650796*G0_1_0_4_0_0 + 0.0253968253968258*G0_1_0_4_0_1 + 0.391111111111109*G0_1_0_5_0_0 + 0.391111111111111*G0_1_0_5_0_1 - 0.233650793650796*G0_1_0_6_0_0 - 0.599365079365079*G0_1_0_6_0_1 - 0.391111111111107*G0_1_0_7_0_0 - 0.391111111111111*G0_1_0_7_0_1 + 0.599365079365077*G0_1_0_8_0_0 + 0.233650793650795*G0_1_0_8_0_1 - 0.365714285714281*G0_1_0_9_0_0 + 0.365714285714285*G0_1_0_9_0_1 - 0.208253968253967*G0_1_0_11_1_0 + 0.208253968253969*G0_1_0_12_1_1 - 0.025396825396828*G0_1_0_13_1_0 - 0.233650793650795*G0_1_0_13_1_1 + 0.233650793650796*G0_1_0_14_1_0 + 0.0253968253968258*G0_1_0_14_1_1 + 0.391111111111109*G0_1_0_15_1_0 + 0.391111111111111*G0_1_0_15_1_1 - 0.233650793650796*G0_1_0_16_1_0 - 0.599365079365079*G0_1_0_16_1_1 - 0.391111111111107*G0_1_0_17_1_0 - 0.391111111111111*G0_1_0_17_1_1 + 0.599365079365077*G0_1_0_18_1_0 + 0.233650793650795*G0_1_0_18_1_1 - 0.365714285714281*G0_1_0_19_1_0 + 0.365714285714285*G0_1_0_19_1_1 - 0.0541798941798914*G0_1_1_0_0_0 - 0.0541798941798913*G0_1_1_0_0_1 - 0.09820105820106*G0_1_1_1_0_0 - 0.0677248677248681*G0_1_1_2_0_1 - 0.335238095238098*G0_1_1_3_0_1 + 0.152380952380953*G0_1_1_4_0_0 + 0.457142857142858*G0_1_1_4_0_1 - 0.030476190476195*G0_1_1_5_0_1 - 0.152380952380953*G0_1_1_6_0_0 + 0.152380952380955*G0_1_1_6_0_1 + 0.36571428571428*G0_1_1_7_0_0 + 0.396190476190474*G0_1_1_7_0_1 - 0.213333333333329*G0_1_1_8_0_0 + 0.335238095238098*G0_1_1_8_0_1 - 0.853333333333332*G0_1_1_9_0_1 - 0.0541798941798914*G0_1_1_10_1_0 - 0.0541798941798913*G0_1_1_10_1_1 - 0.09820105820106*G0_1_1_11_1_0 - 0.0677248677248681*G0_1_1_12_1_1 - 0.335238095238098*G0_1_1_13_1_1 + 0.152380952380953*G0_1_1_14_1_0 + 0.457142857142858*G0_1_1_14_1_1 - 0.030476190476195*G0_1_1_15_1_1 - 0.152380952380953*G0_1_1_16_1_0 + 0.152380952380955*G0_1_1_16_1_1 + 0.36571428571428*G0_1_1_17_1_0 + 0.396190476190474*G0_1_1_17_1_1 - 0.213333333333329*G0_1_1_18_1_0 + 0.335238095238098*G0_1_1_18_1_1 - 0.853333333333332*G0_1_1_19_1_1;
    A[625] = -A[715] - 0.116825396825395*G0_1_0_0_0_0 - 0.116825396825395*G0_1_0_0_0_1 - 0.116825396825392*G0_1_0_1_0_0 - 0.0457142857142883*G0_1_0_3_0_0 - 0.25650793650793*G0_1_0_3_0_1 + 0.0939682539682499*G0_1_0_4_0_1 - 0.0457142857142838*G0_1_0_5_0_0 + 0.210793650793647*G0_1_0_5_0_1 - 0.0939682539682541*G0_1_0_6_0_1 + 0.116825396825398*G0_1_0_7_0_0 - 0.139682539682534*G0_1_0_7_0_1 + 0.11682539682539*G0_1_0_8_0_0 + 0.25650793650793*G0_1_0_8_0_1 + 0.091428571428572*G0_1_0_9_0_0 + 0.0457142857142838*G0_1_0_9_0_1 - 0.116825396825395*G0_1_0_10_1_0 - 0.116825396825395*G0_1_0_10_1_1 - 0.116825396825392*G0_1_0_11_1_0 - 0.0457142857142883*G0_1_0_13_1_0 - 0.25650793650793*G0_1_0_13_1_1 + 0.0939682539682499*G0_1_0_14_1_1 - 0.0457142857142838*G0_1_0_15_1_0 + 0.210793650793647*G0_1_0_15_1_1 - 0.0939682539682541*G0_1_0_16_1_1 + 0.116825396825398*G0_1_0_17_1_0 - 0.139682539682534*G0_1_0_17_1_1 + 0.11682539682539*G0_1_0_18_1_0 + 0.25650793650793*G0_1_0_18_1_1 + 0.091428571428572*G0_1_0_19_1_0 + 0.0457142857142838*G0_1_0_19_1_1 - 0.171005291005289*G0_1_1_0_0_0 - 0.171005291005288*G0_1_1_0_0_1 + 0.0541798941798978*G0_1_1_1_0_0 - 0.245502645502643*G0_1_1_2_0_1 + 0.00253968253968011*G0_1_1_3_0_0 - 0.411428571428564*G0_1_1_3_0_1 + 0.215873015873017*G0_1_1_4_0_0 + 0.929523809523802*G0_1_1_4_0_1 - 0.0482539682539697*G0_1_1_5_0_0 - 0.203174603174606*G0_1_1_5_0_1 - 0.215873015873017*G0_1_1_6_0_0 + 0.619682539682538*G0_1_1_6_0_1 + 1.3231746031746*G0_1_1_7_0_0 + 1.47809523809523*G0_1_1_7_0_1 - 1.2063492063492*G0_1_1_8_0_0 + 0.411428571428564*G0_1_1_8_0_1 + 0.0457142857142895*G0_1_1_9_0_0 - 2.40761904761903*G0_1_1_9_0_1 - 0.171005291005289*G0_1_1_10_1_0 - 0.171005291005288*G0_1_1_10_1_1 + 0.0541798941798978*G0_1_1_11_1_0 - 0.245502645502643*G0_1_1_12_1_1 + 0.00253968253968011*G0_1_1_13_1_0 - 0.411428571428564*G0_1_1_13_1_1 + 0.215873015873017*G0_1_1_14_1_0 + 0.929523809523802*G0_1_1_14_1_1 - 0.0482539682539697*G0_1_1_15_1_0 - 0.203174603174606*G0_1_1_15_1_1 - 0.215873015873017*G0_1_1_16_1_0 + 0.619682539682538*G0_1_1_16_1_1 + 1.3231746031746*G0_1_1_17_1_0 + 1.47809523809523*G0_1_1_17_1_1 - 1.2063492063492*G0_1_1_18_1_0 + 0.411428571428564*G0_1_1_18_1_1 + 0.0457142857142895*G0_1_1_19_1_0 - 2.40761904761903*G0_1_1_19_1_1;
    A[160] = A[625];
    A[305] = A[625] - 0.132063492063492*G0_0_1_0_0_0 - 0.132063492063492*G0_0_1_0_0_1 + 0.0152380952380984*G0_0_1_1_0_0 + 0.0203174603174584*G0_0_1_2_0_1 - 0.043174603174603*G0_0_1_3_0_0 - 0.0609523809523767*G0_0_1_3_0_1 + 0.0330158730158684*G0_0_1_4_0_0 + 0.0457142857142817*G0_0_1_4_0_1 - 0.00253968253968376*G0_0_1_5_0_0 + 0.193015873015871*G0_0_1_5_0_1 - 0.0330158730158683*G0_0_1_6_0_0 - 0.0812698412698372*G0_0_1_6_0_1 + 0.271746031746036*G0_0_1_7_0_0 + 0.0761904761904804*G0_0_1_7_0_1 - 0.154920634920642*G0_0_1_8_0_0 + 0.0609523809523765*G0_0_1_8_0_1 + 0.0457142857142867*G0_0_1_9_0_0 - 0.121904761904762*G0_0_1_9_0_1 - 0.132063492063492*G0_0_1_10_1_0 - 0.132063492063492*G0_0_1_10_1_1 + 0.0152380952380984*G0_0_1_11_1_0 + 0.0203174603174584*G0_0_1_12_1_1 - 0.043174603174603*G0_0_1_13_1_0 - 0.0609523809523767*G0_0_1_13_1_1 + 0.0330158730158684*G0_0_1_14_1_0 + 0.0457142857142817*G0_0_1_14_1_1 - 0.00253968253968376*G0_0_1_15_1_0 + 0.193015873015871*G0_0_1_15_1_1 - 0.0330158730158683*G0_0_1_16_1_0 - 0.0812698412698372*G0_0_1_16_1_1 + 0.271746031746036*G0_0_1_17_1_0 + 0.0761904761904804*G0_0_1_17_1_1 - 0.154920634920642*G0_0_1_18_1_0 + 0.0609523809523765*G0_0_1_18_1_1 + 0.0457142857142867*G0_0_1_19_1_0 - 0.121904761904762*G0_0_1_19_1_1 + 0.132063492063492*G0_1_0_0_0_0 + 0.132063492063492*G0_1_0_0_0_1 - 0.0152380952380982*G0_1_0_1_0_0 - 0.0203174603174583*G0_1_0_2_0_1 + 0.043174603174603*G0_1_0_3_0_0 + 0.060952380952377*G0_1_0_3_0_1 - 0.0330158730158684*G0_1_0_4_0_0 - 0.045714285714282*G0_1_0_4_0_1 + 0.00253968253968372*G0_1_0_5_0_0 - 0.193015873015871*G0_1_0_5_0_1 + 0.0330158730158684*G0_1_0_6_0_0 + 0.0812698412698372*G0_1_0_6_0_1 - 0.271746031746036*G0_1_0_7_0_0 - 0.0761904761904805*G0_1_0_7_0_1 + 0.154920634920641*G0_1_0_8_0_0 - 0.0609523809523769*G0_1_0_8_0_1 - 0.0457142857142866*G0_1_0_9_0_0 + 0.121904761904763*G0_1_0_9_0_1 + 0.132063492063492*G0_1_0_10_1_0 + 0.132063492063492*G0_1_0_10_1_1 - 0.0152380952380982*G0_1_0_11_1_0 - 0.0203174603174583*G0_1_0_12_1_1 + 0.043174603174603*G0_1_0_13_1_0 + 0.060952380952377*G0_1_0_13_1_1 - 0.0330158730158684*G0_1_0_14_1_0 - 0.045714285714282*G0_1_0_14_1_1 + 0.00253968253968372*G0_1_0_15_1_0 - 0.193015873015871*G0_1_0_15_1_1 + 0.0330158730158684*G0_1_0_16_1_0 + 0.0812698412698372*G0_1_0_16_1_1 - 0.271746031746036*G0_1_0_17_1_0 - 0.0761904761904805*G0_1_0_17_1_1 + 0.154920634920641*G0_1_0_18_1_0 - 0.0609523809523769*G0_1_0_18_1_1 - 0.0457142857142866*G0_1_0_19_1_0 + 0.121904761904763*G0_1_0_19_1_1;
    A[770] = A[305];
    A[173] = 0.0;
    A[617] = -A[242] + 0.34074074074074*G0_1_1_0_0_0 + 0.34074074074074*G0_1_1_0_0_1 - 0.340740740740741*G0_1_1_1_0_0 - 1.25502645502645*G0_1_1_2_0_1 + 0.730158730158726*G0_1_1_3_0_0 - 0.355555555555557*G0_1_1_3_0_1 - 2.0126984126984*G0_1_1_4_0_0 - 0.0126984126984128*G0_1_1_4_0_1 - 0.730158730158726*G0_1_1_5_0_0 - 1.08571428571428*G0_1_1_5_0_1 + 2.0126984126984*G0_1_1_6_0_0 + 1.99999999999999*G0_1_1_6_0_1 + 0.355555555555553*G0_1_1_7_0_1 + 0.355555555555557*G0_1_1_8_0_1 - 0.34285714285714*G0_1_1_9_0_1 + 0.34074074074074*G0_1_1_10_1_0 + 0.34074074074074*G0_1_1_10_1_1 - 0.340740740740741*G0_1_1_11_1_0 - 1.25502645502645*G0_1_1_12_1_1 + 0.730158730158726*G0_1_1_13_1_0 - 0.355555555555557*G0_1_1_13_1_1 - 2.0126984126984*G0_1_1_14_1_0 - 0.0126984126984128*G0_1_1_14_1_1 - 0.730158730158726*G0_1_1_15_1_0 - 1.08571428571428*G0_1_1_15_1_1 + 2.0126984126984*G0_1_1_16_1_0 + 1.99999999999999*G0_1_1_16_1_1 + 0.355555555555553*G0_1_1_17_1_1 + 0.355555555555557*G0_1_1_18_1_1 - 0.34285714285714*G0_1_1_19_1_1;
    A[541] = 0.0;
    A[497] = 0.017010582010582*G0_0_1_0_0_0 + 0.017010582010582*G0_0_1_0_0_1 - 0.137962962962963*G0_0_1_1_0_0 - 0.137962962962962*G0_0_1_2_0_1 + 0.109444444444444*G0_0_1_3_0_0 - 0.197222222222223*G0_0_1_3_0_1 - 0.197222222222221*G0_0_1_4_0_0 + 0.109444444444444*G0_0_1_4_0_1 - 0.0532539682539681*G0_0_1_5_0_0 - 0.0366666666666665*G0_0_1_5_0_1 + 0.197222222222221*G0_0_1_6_0_0 + 0.157619047619047*G0_0_1_6_0_1 - 0.0366666666666668*G0_0_1_7_0_0 - 0.0532539682539685*G0_0_1_7_0_1 + 0.157619047619048*G0_0_1_8_0_0 + 0.197222222222223*G0_0_1_8_0_1 - 0.0561904761904755*G0_0_1_9_0_0 - 0.0561904761904759*G0_0_1_9_0_1 + 0.017010582010582*G0_0_1_10_1_0 + 0.017010582010582*G0_0_1_10_1_1 - 0.137962962962963*G0_0_1_11_1_0 - 0.137962962962962*G0_0_1_12_1_1 + 0.109444444444444*G0_0_1_13_1_0 - 0.197222222222223*G0_0_1_13_1_1 - 0.197222222222221*G0_0_1_14_1_0 + 0.109444444444444*G0_0_1_14_1_1 - 0.0532539682539681*G0_0_1_15_1_0 - 0.0366666666666665*G0_0_1_15_1_1 + 0.197222222222221*G0_0_1_16_1_0 + 0.157619047619047*G0_0_1_16_1_1 - 0.0366666666666668*G0_0_1_17_1_0 - 0.0532539682539685*G0_0_1_17_1_1 + 0.157619047619048*G0_0_1_18_1_0 + 0.197222222222223*G0_0_1_18_1_1 - 0.0561904761904755*G0_0_1_19_1_0 - 0.0561904761904759*G0_0_1_19_1_1;
    A[30] = -A[497] - 0.137962962962963*G0_0_0_0_0_0 - 0.137962962962963*G0_0_0_0_0_1 + 0.137962962962963*G0_0_0_1_0_0 + 0.017010582010582*G0_0_0_2_0_1 + 0.0396031746031743*G0_0_0_3_0_0 + 0.197222222222222*G0_0_0_3_0_1 - 0.0165873015873017*G0_0_0_4_0_0 - 0.0532539682539684*G0_0_0_4_0_1 - 0.0396031746031746*G0_0_0_5_0_0 + 0.157619047619048*G0_0_0_5_0_1 + 0.0165873015873017*G0_0_0_6_0_0 - 0.0366666666666669*G0_0_0_6_0_1 + 0.306666666666666*G0_0_0_7_0_0 + 0.109444444444444*G0_0_0_7_0_1 - 0.306666666666666*G0_0_0_8_0_0 - 0.197222222222222*G0_0_0_8_0_1 - 0.0561904761904752*G0_0_0_9_0_1 - 0.137962962962963*G0_0_0_10_1_0 - 0.137962962962963*G0_0_0_10_1_1 + 0.137962962962963*G0_0_0_11_1_0 + 0.017010582010582*G0_0_0_12_1_1 + 0.0396031746031743*G0_0_0_13_1_0 + 0.197222222222222*G0_0_0_13_1_1 - 0.0165873015873017*G0_0_0_14_1_0 - 0.0532539682539684*G0_0_0_14_1_1 - 0.0396031746031746*G0_0_0_15_1_0 + 0.157619047619048*G0_0_0_15_1_1 + 0.0165873015873017*G0_0_0_16_1_0 - 0.0366666666666669*G0_0_0_16_1_1 + 0.306666666666666*G0_0_0_17_1_0 + 0.109444444444444*G0_0_0_17_1_1 - 0.306666666666666*G0_0_0_18_1_0 - 0.197222222222222*G0_0_0_18_1_1 - 0.0561904761904752*G0_0_0_19_1_1 - 0.120952380952381*G0_0_1_0_0_0 - 0.120952380952381*G0_0_1_0_0_1 - 0.12095238095238*G0_0_1_2_0_1 + 0.149047619047618*G0_0_1_3_0_0 - 0.213809523809523*G0_0_1_4_0_0 + 0.056190476190476*G0_0_1_4_0_1 - 0.0928571428571428*G0_0_1_5_0_0 + 0.120952380952381*G0_0_1_5_0_1 + 0.213809523809523*G0_0_1_6_0_0 + 0.12095238095238*G0_0_1_6_0_1 + 0.269999999999999*G0_0_1_7_0_0 + 0.0561904761904751*G0_0_1_7_0_1 - 0.149047619047617*G0_0_1_8_0_0 - 0.0561904761904752*G0_0_1_9_0_0 - 0.112380952380951*G0_0_1_9_0_1 - 0.120952380952381*G0_0_1_10_1_0 - 0.120952380952381*G0_0_1_10_1_1 - 0.12095238095238*G0_0_1_12_1_1 + 0.149047619047618*G0_0_1_13_1_0 - 0.213809523809523*G0_0_1_14_1_0 + 0.056190476190476*G0_0_1_14_1_1 - 0.0928571428571428*G0_0_1_15_1_0 + 0.120952380952381*G0_0_1_15_1_1 + 0.213809523809523*G0_0_1_16_1_0 + 0.12095238095238*G0_0_1_16_1_1 + 0.269999999999999*G0_0_1_17_1_0 + 0.0561904761904751*G0_0_1_17_1_1 - 0.149047619047617*G0_0_1_18_1_0 - 0.0561904761904752*G0_0_1_19_1_0 - 0.112380952380951*G0_0_1_19_1_1;
    A[2] = -A[497] - 0.12095238095238*G0_0_1_0_0_0 - 0.12095238095238*G0_0_1_0_0_1 - 0.120952380952381*G0_0_1_1_0_0 + 0.0561904761904756*G0_0_1_3_0_0 - 0.213809523809524*G0_0_1_3_0_1 + 0.149047619047619*G0_0_1_4_0_1 + 0.0561904761904757*G0_0_1_5_0_0 + 0.269999999999999*G0_0_1_5_0_1 - 0.149047619047618*G0_0_1_6_0_1 + 0.12095238095238*G0_0_1_7_0_0 - 0.092857142857143*G0_0_1_7_0_1 + 0.120952380952381*G0_0_1_8_0_0 + 0.213809523809524*G0_0_1_8_0_1 - 0.112380952380951*G0_0_1_9_0_0 - 0.0561904761904757*G0_0_1_9_0_1 - 0.12095238095238*G0_0_1_10_1_0 - 0.12095238095238*G0_0_1_10_1_1 - 0.120952380952381*G0_0_1_11_1_0 + 0.0561904761904756*G0_0_1_13_1_0 - 0.213809523809524*G0_0_1_13_1_1 + 0.149047619047619*G0_0_1_14_1_1 + 0.0561904761904757*G0_0_1_15_1_0 + 0.269999999999999*G0_0_1_15_1_1 - 0.149047619047618*G0_0_1_16_1_1 + 0.12095238095238*G0_0_1_17_1_0 - 0.092857142857143*G0_0_1_17_1_1 + 0.120952380952381*G0_0_1_18_1_0 + 0.213809523809524*G0_0_1_18_1_1 - 0.112380952380951*G0_0_1_19_1_0 - 0.0561904761904757*G0_0_1_19_1_1 - 0.137962962962963*G0_1_1_0_0_0 - 0.137962962962963*G0_1_1_0_0_1 + 0.017010582010582*G0_1_1_1_0_0 + 0.137962962962963*G0_1_1_2_0_1 - 0.0532539682539688*G0_1_1_3_0_0 - 0.0165873015873017*G0_1_1_3_0_1 + 0.197222222222223*G0_1_1_4_0_0 + 0.0396031746031749*G0_1_1_4_0_1 + 0.109444444444445*G0_1_1_5_0_0 + 0.306666666666666*G0_1_1_5_0_1 - 0.197222222222223*G0_1_1_6_0_0 - 0.306666666666667*G0_1_1_6_0_1 + 0.157619047619047*G0_1_1_7_0_0 - 0.0396031746031744*G0_1_1_7_0_1 - 0.0366666666666664*G0_1_1_8_0_0 + 0.0165873015873017*G0_1_1_8_0_1 - 0.0561904761904758*G0_1_1_9_0_0 - 0.137962962962963*G0_1_1_10_1_0 - 0.137962962962963*G0_1_1_10_1_1 + 0.017010582010582*G0_1_1_11_1_0 + 0.137962962962963*G0_1_1_12_1_1 - 0.0532539682539688*G0_1_1_13_1_0 - 0.0165873015873017*G0_1_1_13_1_1 + 0.197222222222223*G0_1_1_14_1_0 + 0.0396031746031749*G0_1_1_14_1_1 + 0.109444444444445*G0_1_1_15_1_0 + 0.306666666666666*G0_1_1_15_1_1 - 0.197222222222223*G0_1_1_16_1_0 - 0.306666666666667*G0_1_1_16_1_1 + 0.157619047619047*G0_1_1_17_1_0 - 0.0396031746031744*G0_1_1_17_1_1 - 0.0366666666666664*G0_1_1_18_1_0 + 0.0165873015873017*G0_1_1_18_1_1 - 0.0561904761904758*G0_1_1_19_1_0;
    A[538] = A[72] + 0.121904761904762*G0_1_0_0_0_0 + 0.121904761904762*G0_1_0_0_0_1 - 0.121904761904761*G0_1_0_1_0_0 - 0.121904761904761*G0_1_0_3_0_1 - 0.121904761904765*G0_1_0_5_0_1 - 0.365714285714283*G0_1_0_7_0_0 - 0.243809523809523*G0_1_0_7_0_1 + 0.365714285714282*G0_1_0_8_0_0 + 0.121904761904761*G0_1_0_8_0_1 + 0.243809523809527*G0_1_0_9_0_1 + 0.121904761904762*G0_1_0_10_1_0 + 0.121904761904762*G0_1_0_10_1_1 - 0.121904761904761*G0_1_0_11_1_0 - 0.121904761904761*G0_1_0_13_1_1 - 0.121904761904765*G0_1_0_15_1_1 - 0.365714285714283*G0_1_0_17_1_0 - 0.243809523809523*G0_1_0_17_1_1 + 0.365714285714282*G0_1_0_18_1_0 + 0.121904761904761*G0_1_0_18_1_1 + 0.243809523809527*G0_1_0_19_1_1 - 0.228571428571427*G0_1_1_0_0_0 - 0.228571428571427*G0_1_1_0_0_1 - 0.35047619047619*G0_1_1_1_0_0 - 0.0304761904761895*G0_1_1_3_0_0 - 0.655238095238093*G0_1_1_3_0_1 + 0.27428571428571*G0_1_1_4_0_1 - 0.0304761904761937*G0_1_1_5_0_0 + 0.502857142857137*G0_1_1_5_0_1 - 0.274285714285706*G0_1_1_6_0_1 + 0.106666666666666*G0_1_1_7_0_0 - 0.426666666666665*G0_1_1_7_0_1 + 0.472380952380951*G0_1_1_8_0_0 + 0.655238095238093*G0_1_1_8_0_1 + 0.0609523809523831*G0_1_1_9_0_0 + 0.152380952380956*G0_1_1_9_0_1 - 0.228571428571427*G0_1_1_10_1_0 - 0.228571428571427*G0_1_1_10_1_1 - 0.35047619047619*G0_1_1_11_1_0 - 0.0304761904761895*G0_1_1_13_1_0 - 0.655238095238093*G0_1_1_13_1_1 + 0.27428571428571*G0_1_1_14_1_1 - 0.0304761904761937*G0_1_1_15_1_0 + 0.502857142857137*G0_1_1_15_1_1 - 0.274285714285706*G0_1_1_16_1_1 + 0.106666666666666*G0_1_1_17_1_0 - 0.426666666666665*G0_1_1_17_1_1 + 0.472380952380951*G0_1_1_18_1_0 + 0.655238095238093*G0_1_1_18_1_1 + 0.0609523809523831*G0_1_1_19_1_0 + 0.152380952380956*G0_1_1_19_1_1;
    A[692] = 0.0;
    A[269] = 0.0;
    A[294] = 0.0;
    A[443] = 0.0;
    A[472] = A[7];
    A[392] = A[857];
    A[806] = -A[101] - 0.778835978835978*G0_0_0_0_0_0 - 0.778835978835977*G0_0_0_0_0_1 + 2.7089947089947*G0_0_0_1_0_0 + 0.677248677248675*G0_0_0_2_0_1 + 0.406349206349207*G0_0_0_3_0_0 + 4.92698412698411*G0_0_0_3_0_1 + 0.101587301587299*G0_0_0_4_0_0 - 2.38730158730158*G0_0_0_4_0_1 - 1.62539682539682*G0_0_0_5_0_0 + 0.0507936507936542*G0_0_0_5_0_1 - 0.101587301587299*G0_0_0_6_0_0 + 0.0507936507936481*G0_0_0_6_0_1 + 1.32063492063492*G0_0_0_7_0_0 - 0.355555555555553*G0_0_0_7_0_1 - 3.25079365079364*G0_0_0_8_0_0 - 4.92698412698411*G0_0_0_8_0_1 + 1.21904761904761*G0_0_0_9_0_0 + 2.74285714285713*G0_0_0_9_0_1 - 0.778835978835978*G0_0_0_10_1_0 - 0.778835978835977*G0_0_0_10_1_1 + 2.7089947089947*G0_0_0_11_1_0 + 0.677248677248675*G0_0_0_12_1_1 + 0.406349206349207*G0_0_0_13_1_0 + 4.92698412698411*G0_0_0_13_1_1 + 0.101587301587299*G0_0_0_14_1_0 - 2.38730158730158*G0_0_0_14_1_1 - 1.62539682539682*G0_0_0_15_1_0 + 0.0507936507936542*G0_0_0_15_1_1 - 0.101587301587299*G0_0_0_16_1_0 + 0.0507936507936481*G0_0_0_16_1_1 + 1.32063492063492*G0_0_0_17_1_0 - 0.355555555555553*G0_0_0_17_1_1 - 3.25079365079364*G0_0_0_18_1_0 - 4.92698412698411*G0_0_0_18_1_1 + 1.21904761904761*G0_0_0_19_1_0 + 2.74285714285713*G0_0_0_19_1_1 - 0.406349206349205*G0_0_1_0_0_0 - 0.406349206349204*G0_0_1_0_0_1 + 1.93015873015873*G0_0_1_1_0_0 + 0.406349206349206*G0_0_1_2_0_1 - 0.863492063492061*G0_0_1_3_0_0 + 2.64126984126984*G0_0_1_3_0_1 + 0.050793650793649*G0_0_1_4_0_0 - 1.93015873015873*G0_0_1_4_0_1 - 0.0507936507936531*G0_0_1_5_0_0 - 0.0507936507936494*G0_0_1_6_0_0 + 1.98095238095237*G0_0_1_7_0_0 + 1.93015873015872*G0_0_1_7_0_1 - 3.5047619047619*G0_0_1_8_0_0 - 2.64126984126984*G0_0_1_8_0_1 + 0.914285714285714*G0_0_1_9_0_0 - 0.406349206349205*G0_0_1_10_1_0 - 0.406349206349204*G0_0_1_10_1_1 + 1.93015873015873*G0_0_1_11_1_0 + 0.406349206349206*G0_0_1_12_1_1 - 0.863492063492061*G0_0_1_13_1_0 + 2.64126984126984*G0_0_1_13_1_1 + 0.050793650793649*G0_0_1_14_1_0 - 1.93015873015873*G0_0_1_14_1_1 - 0.0507936507936531*G0_0_1_15_1_0 - 0.0507936507936494*G0_0_1_16_1_0 + 1.98095238095237*G0_0_1_17_1_0 + 1.93015873015872*G0_0_1_17_1_1 - 3.5047619047619*G0_0_1_18_1_0 - 2.64126984126984*G0_0_1_18_1_1 + 0.914285714285714*G0_0_1_19_1_0;
    A[279] = -A[806] - 5.24190476190474*G0_0_0_0_0_0 - 5.24190476190474*G0_0_0_0_0_1 + 5.24190476190474*G0_0_0_1_0_0 + 1.34095238095237*G0_0_0_2_0_1 + 2.31619047619046*G0_0_0_3_0_0 + 8.89904761904758*G0_0_0_3_0_1 - 0.487619047619049*G0_0_0_4_0_0 - 3.1695238095238*G0_0_0_4_0_1 - 2.31619047619047*G0_0_0_5_0_0 + 6.58285714285712*G0_0_0_5_0_1 + 0.48761904761905*G0_0_0_6_0_0 - 2.68190476190475*G0_0_0_6_0_1 + 8.89904761904758*G0_0_0_7_0_0 - 8.89904761904758*G0_0_0_8_0_0 - 8.89904761904758*G0_0_0_8_0_1 + 3.16952380952381*G0_0_0_9_0_1 - 5.24190476190474*G0_0_0_10_1_0 - 5.24190476190474*G0_0_0_10_1_1 + 5.24190476190474*G0_0_0_11_1_0 + 1.34095238095237*G0_0_0_12_1_1 + 2.31619047619046*G0_0_0_13_1_0 + 8.89904761904758*G0_0_0_13_1_1 - 0.487619047619049*G0_0_0_14_1_0 - 3.1695238095238*G0_0_0_14_1_1 - 2.31619047619047*G0_0_0_15_1_0 + 6.58285714285712*G0_0_0_15_1_1 + 0.48761904761905*G0_0_0_16_1_0 - 2.68190476190475*G0_0_0_16_1_1 + 8.89904761904758*G0_0_0_17_1_0 - 8.89904761904758*G0_0_0_18_1_0 - 8.89904761904758*G0_0_0_18_1_1 + 3.16952380952381*G0_0_0_19_1_1 - 0.609523809523806*G0_0_1_0_0_0 - 0.609523809523805*G0_0_1_0_0_1 + 4.63238095238093*G0_0_1_1_0_0 + 0.670476190476186*G0_0_1_2_0_1 + 2.62095238095237*G0_0_1_3_0_0 + 9.20380952380948*G0_0_1_3_0_1 - 0.243809523809524*G0_0_1_4_0_0 - 2.86476190476189*G0_0_1_4_0_1 + 0.304761904761899*G0_0_1_5_0_0 + 0.243809523809524*G0_0_1_6_0_0 - 0.0609523809523776*G0_0_1_6_0_1 + 2.43809523809522*G0_0_1_7_0_0 + 2.74285714285713*G0_0_1_7_0_1 - 6.46095238095235*G0_0_1_8_0_0 - 9.20380952380948*G0_0_1_8_0_1 - 2.92571428571426*G0_0_1_9_0_0 + 0.121904761904766*G0_0_1_9_0_1 - 0.609523809523806*G0_0_1_10_1_0 - 0.609523809523805*G0_0_1_10_1_1 + 4.63238095238093*G0_0_1_11_1_0 + 0.670476190476186*G0_0_1_12_1_1 + 2.62095238095237*G0_0_1_13_1_0 + 9.20380952380948*G0_0_1_13_1_1 - 0.243809523809524*G0_0_1_14_1_0 - 2.86476190476189*G0_0_1_14_1_1 + 0.304761904761899*G0_0_1_15_1_0 + 0.243809523809524*G0_0_1_16_1_0 - 0.0609523809523776*G0_0_1_16_1_1 + 2.43809523809522*G0_0_1_17_1_0 + 2.74285714285713*G0_0_1_17_1_1 - 6.46095238095235*G0_0_1_18_1_0 - 9.20380952380948*G0_0_1_18_1_1 - 2.92571428571426*G0_0_1_19_1_0 + 0.121904761904766*G0_0_1_19_1_1 - 0.609523809523806*G0_1_0_0_0_0 - 0.609523809523805*G0_1_0_0_0_1 + 4.63238095238093*G0_1_0_1_0_0 + 0.670476190476186*G0_1_0_2_0_1 + 2.62095238095237*G0_1_0_3_0_0 + 9.20380952380948*G0_1_0_3_0_1 - 0.243809523809524*G0_1_0_4_0_0 - 2.86476190476189*G0_1_0_4_0_1 + 0.304761904761899*G0_1_0_5_0_0 + 0.243809523809524*G0_1_0_6_0_0 - 0.0609523809523777*G0_1_0_6_0_1 + 2.43809523809522*G0_1_0_7_0_0 + 2.74285714285713*G0_1_0_7_0_1 - 6.46095238095235*G0_1_0_8_0_0 - 9.20380952380948*G0_1_0_8_0_1 - 2.92571428571426*G0_1_0_9_0_0 + 0.121904761904766*G0_1_0_9_0_1 - 0.609523809523806*G0_1_0_10_1_0 - 0.609523809523805*G0_1_0_10_1_1 + 4.63238095238093*G0_1_0_11_1_0 + 0.670476190476186*G0_1_0_12_1_1 + 2.62095238095237*G0_1_0_13_1_0 + 9.20380952380948*G0_1_0_13_1_1 - 0.243809523809524*G0_1_0_14_1_0 - 2.86476190476189*G0_1_0_14_1_1 + 0.304761904761899*G0_1_0_15_1_0 + 0.243809523809524*G0_1_0_16_1_0 - 0.0609523809523777*G0_1_0_16_1_1 + 2.43809523809522*G0_1_0_17_1_0 + 2.74285714285713*G0_1_0_17_1_1 - 6.46095238095235*G0_1_0_18_1_0 - 9.20380952380948*G0_1_0_18_1_1 - 2.92571428571426*G0_1_0_19_1_0 + 0.121904761904766*G0_1_0_19_1_1 - 3.1153439153439*G0_1_1_0_0_0 - 3.1153439153439*G0_1_1_0_0_1 + 7.13820105820102*G0_1_1_1_0_0 + 1.65248677248676*G0_1_1_2_0_1 + 3.73841269841268*G0_1_1_3_0_0 + 13.9784126984126*G0_1_1_3_0_1 - 0.65015873015873*G0_1_1_4_0_0 - 5.40444444444441*G0_1_1_4_0_1 - 0.812698412698416*G0_1_1_5_0_0 + 3.65714285714283*G0_1_1_5_0_1 + 0.650158730158731*G0_1_1_6_0_0 - 2.1942857142857*G0_1_1_6_0_1 + 5.48571428571425*G0_1_1_7_0_0 + 1.015873015873*G0_1_1_7_0_1 - 9.50857142857137*G0_1_1_8_0_0 - 13.9784126984126*G0_1_1_8_0_1 - 2.92571428571426*G0_1_1_9_0_0 + 4.38857142857142*G0_1_1_9_0_1 - 3.1153439153439*G0_1_1_10_1_0 - 3.1153439153439*G0_1_1_10_1_1 + 7.13820105820102*G0_1_1_11_1_0 + 1.65248677248676*G0_1_1_12_1_1 + 3.73841269841268*G0_1_1_13_1_0 + 13.9784126984126*G0_1_1_13_1_1 - 0.65015873015873*G0_1_1_14_1_0 - 5.40444444444441*G0_1_1_14_1_1 - 0.812698412698416*G0_1_1_15_1_0 + 3.65714285714283*G0_1_1_15_1_1 + 0.650158730158731*G0_1_1_16_1_0 - 2.1942857142857*G0_1_1_16_1_1 + 5.48571428571425*G0_1_1_17_1_0 + 1.015873015873*G0_1_1_17_1_1 - 9.50857142857137*G0_1_1_18_1_0 - 13.9784126984126*G0_1_1_18_1_1 - 2.92571428571426*G0_1_1_19_1_0 + 4.38857142857142*G0_1_1_19_1_1;
    A[25] = 0.0;
    A[726] = 0.0;
    A[385] = 0.0;
    A[34] = A[40] + 0.59206349206349*G0_0_0_0_0_0 + 0.59206349206349*G0_0_0_0_0_1 - 1.47777777777777*G0_0_0_1_0_0 + 0.14126984126984*G0_0_0_2_0_1 - 0.9047619047619*G0_0_0_3_0_0 - 2.70476190476189*G0_0_0_3_0_1 + 0.733333333333329*G0_0_0_4_0_0 + 0.914285714285708*G0_0_0_4_0_1 + 0.228571428571428*G0_0_0_5_0_0 - 0.366666666666666*G0_0_0_5_0_1 - 0.73333333333333*G0_0_0_6_0_0 - 0.366666666666664*G0_0_0_6_0_1 - 1.78571428571428*G0_0_0_7_0_0 - 1.19047619047618*G0_0_0_7_0_1 + 2.67142857142856*G0_0_0_8_0_0 + 2.70476190476189*G0_0_0_8_0_1 + 0.676190476190472*G0_0_0_9_0_0 + 0.276190476190473*G0_0_0_9_0_1 + 0.59206349206349*G0_0_0_10_1_0 + 0.59206349206349*G0_0_0_10_1_1 - 1.47777777777777*G0_0_0_11_1_0 + 0.14126984126984*G0_0_0_12_1_1 - 0.9047619047619*G0_0_0_13_1_0 - 2.70476190476189*G0_0_0_13_1_1 + 0.733333333333329*G0_0_0_14_1_0 + 0.914285714285708*G0_0_0_14_1_1 + 0.228571428571428*G0_0_0_15_1_0 - 0.366666666666666*G0_0_0_15_1_1 - 0.73333333333333*G0_0_0_16_1_0 - 0.366666666666664*G0_0_0_16_1_1 - 1.78571428571428*G0_0_0_17_1_0 - 1.19047619047618*G0_0_0_17_1_1 + 2.67142857142856*G0_0_0_18_1_0 + 2.70476190476189*G0_0_0_18_1_1 + 0.676190476190472*G0_0_0_19_1_0 + 0.276190476190473*G0_0_0_19_1_1 + 0.45079365079365*G0_0_1_0_0_0 + 0.450793650793649*G0_0_1_0_0_1 - 2.95555555555554*G0_0_1_1_0_0 - 0.450793650793648*G0_0_1_2_0_1 - 0.938095238095233*G0_0_1_3_0_0 - 5.40952380952378*G0_0_1_3_0_1 + 0.138095238095239*G0_0_1_4_0_0 + 2.10476190476189*G0_0_1_4_0_1 - 0.138095238095235*G0_0_1_5_0_0 - 0.138095238095239*G0_0_1_6_0_0 - 1.96666666666666*G0_0_1_7_0_0 - 2.10476190476189*G0_0_1_7_0_1 + 4.47142857142855*G0_0_1_8_0_0 + 5.40952380952378*G0_0_1_8_0_1 + 1.07619047619047*G0_0_1_9_0_0 + 0.45079365079365*G0_0_1_10_1_0 + 0.450793650793649*G0_0_1_10_1_1 - 2.95555555555554*G0_0_1_11_1_0 - 0.450793650793648*G0_0_1_12_1_1 - 0.938095238095233*G0_0_1_13_1_0 - 5.40952380952378*G0_0_1_13_1_1 + 0.138095238095239*G0_0_1_14_1_0 + 2.10476190476189*G0_0_1_14_1_1 - 0.138095238095235*G0_0_1_15_1_0 - 0.138095238095239*G0_0_1_16_1_0 - 1.96666666666666*G0_0_1_17_1_0 - 2.10476190476189*G0_0_1_17_1_1 + 4.47142857142855*G0_0_1_18_1_0 + 5.40952380952378*G0_0_1_18_1_1 + 1.07619047619047*G0_0_1_19_1_0;
    A[757] = 0.0;
    A[418] = 0.0;
    A[784] = 0.0;
    A[116] = 0.0;
    A[819] = 0.0;
    A[149] = 0.0;
    A[210] = A[7] + 1.47777777777777*G0_0_1_0_0_0 + 1.47777777777777*G0_0_1_0_0_1 - 0.174603174603174*G0_0_1_1_0_0 - 0.276190476190474*G0_0_1_2_0_1 + 0.0531746031746031*G0_0_1_3_0_0 + 0.103968253968252*G0_0_1_3_0_1 + 0.0341269841269868*G0_0_1_4_0_0 + 0.0849206349206362*G0_0_1_4_0_1 + 0.351587301587302*G0_0_1_5_0_0 - 2.35317460317459*G0_0_1_5_0_1 - 0.0341269841269869*G0_0_1_6_0_0 + 1.15158730158729*G0_0_1_6_0_1 - 2.11825396825396*G0_0_1_7_0_0 + 0.586507936507934*G0_0_1_7_0_1 + 0.815079365079361*G0_0_1_8_0_0 - 0.103968253968252*G0_0_1_8_0_1 - 0.404761904761905*G0_0_1_9_0_0 - 0.671428571428572*G0_0_1_9_0_1 + 1.47777777777777*G0_0_1_10_1_0 + 1.47777777777777*G0_0_1_10_1_1 - 0.174603174603174*G0_0_1_11_1_0 - 0.276190476190474*G0_0_1_12_1_1 + 0.0531746031746031*G0_0_1_13_1_0 + 0.103968253968252*G0_0_1_13_1_1 + 0.0341269841269868*G0_0_1_14_1_0 + 0.0849206349206362*G0_0_1_14_1_1 + 0.351587301587302*G0_0_1_15_1_0 - 2.35317460317459*G0_0_1_15_1_1 - 0.0341269841269869*G0_0_1_16_1_0 + 1.15158730158729*G0_0_1_16_1_1 - 2.11825396825396*G0_0_1_17_1_0 + 0.586507936507934*G0_0_1_17_1_1 + 0.815079365079361*G0_0_1_18_1_0 - 0.103968253968252*G0_0_1_18_1_1 - 0.404761904761905*G0_0_1_19_1_0 - 0.671428571428572*G0_0_1_19_1_1 - 1.47777777777777*G0_1_0_0_0_0 - 1.47777777777777*G0_1_0_0_0_1 + 0.174603174603174*G0_1_0_1_0_0 + 0.276190476190474*G0_1_0_2_0_1 - 0.0531746031746031*G0_1_0_3_0_0 - 0.103968253968252*G0_1_0_3_0_1 - 0.0341269841269868*G0_1_0_4_0_0 - 0.0849206349206362*G0_1_0_4_0_1 - 0.351587301587302*G0_1_0_5_0_0 + 2.35317460317459*G0_1_0_5_0_1 + 0.0341269841269868*G0_1_0_6_0_0 - 1.15158730158729*G0_1_0_6_0_1 + 2.11825396825396*G0_1_0_7_0_0 - 0.586507936507934*G0_1_0_7_0_1 - 0.815079365079361*G0_1_0_8_0_0 + 0.103968253968252*G0_1_0_8_0_1 + 0.404761904761905*G0_1_0_9_0_0 + 0.671428571428571*G0_1_0_9_0_1 - 1.47777777777777*G0_1_0_10_1_0 - 1.47777777777777*G0_1_0_10_1_1 + 0.174603174603174*G0_1_0_11_1_0 + 0.276190476190474*G0_1_0_12_1_1 - 0.0531746031746031*G0_1_0_13_1_0 - 0.103968253968252*G0_1_0_13_1_1 - 0.0341269841269868*G0_1_0_14_1_0 - 0.0849206349206362*G0_1_0_14_1_1 - 0.351587301587302*G0_1_0_15_1_0 + 2.35317460317459*G0_1_0_15_1_1 + 0.0341269841269868*G0_1_0_16_1_0 - 1.15158730158729*G0_1_0_16_1_1 + 2.11825396825396*G0_1_0_17_1_0 - 0.586507936507934*G0_1_0_17_1_1 - 0.815079365079361*G0_1_0_18_1_0 + 0.103968253968252*G0_1_0_18_1_1 + 0.404761904761905*G0_1_0_19_1_0 + 0.671428571428571*G0_1_0_19_1_1;
    A[166] = 0.0;
    A[488] = 0.0;
    A[659] = A[194];
    A[575] = 0.0;
    A[678] = A[213];
    A[606] = 0.0;
    A[558] = -A[101] - 0.27089947089947*G0_0_0_0_0_0 - 0.27089947089947*G0_0_0_0_0_1 + 0.778835978835978*G0_0_0_1_0_0 + 0.372486772486769*G0_0_0_2_0_1 + 2.53968253968254*G0_0_0_3_0_0 + 2.28571428571428*G0_0_0_3_0_1 + 1.62539682539682*G0_0_0_4_0_0 + 2.28571428571428*G0_0_0_4_0_1 - 0.101587301587297*G0_0_0_5_0_0 - 0.0507936507936484*G0_0_0_5_0_1 - 1.62539682539682*G0_0_0_6_0_0 - 0.0507936507936509*G0_0_0_6_0_1 + 0.507936507936508*G0_0_0_7_0_0 + 0.457142857142862*G0_0_0_7_0_1 - 1.01587301587302*G0_0_0_8_0_0 - 2.28571428571428*G0_0_0_8_0_1 - 2.43809523809524*G0_0_0_9_0_0 - 2.74285714285714*G0_0_0_9_0_1 - 0.27089947089947*G0_0_0_10_1_0 - 0.27089947089947*G0_0_0_10_1_1 + 0.778835978835978*G0_0_0_11_1_0 + 0.372486772486769*G0_0_0_12_1_1 + 2.53968253968254*G0_0_0_13_1_0 + 2.28571428571428*G0_0_0_13_1_1 + 1.62539682539682*G0_0_0_14_1_0 + 2.28571428571428*G0_0_0_14_1_1 - 0.101587301587297*G0_0_0_15_1_0 - 0.0507936507936484*G0_0_0_15_1_1 - 1.62539682539682*G0_0_0_16_1_0 - 0.0507936507936509*G0_0_0_16_1_1 + 0.507936507936508*G0_0_0_17_1_0 + 0.457142857142862*G0_0_0_17_1_1 - 1.01587301587302*G0_0_0_18_1_0 - 2.28571428571428*G0_0_0_18_1_1 - 2.43809523809524*G0_0_0_19_1_0 - 2.74285714285714*G0_0_0_19_1_1 + 0.406349206349206*G0_1_0_0_0_0 + 0.406349206349205*G0_1_0_0_0_1 - 1.93015873015873*G0_1_0_1_0_0 - 0.406349206349207*G0_1_0_2_0_1 + 0.863492063492061*G0_1_0_3_0_0 - 2.64126984126984*G0_1_0_3_0_1 - 0.0507936507936493*G0_1_0_4_0_0 + 1.93015873015873*G0_1_0_4_0_1 + 0.0507936507936523*G0_1_0_5_0_0 + 0.0507936507936497*G0_1_0_6_0_0 - 1.98095238095237*G0_1_0_7_0_0 - 1.93015873015872*G0_1_0_7_0_1 + 3.5047619047619*G0_1_0_8_0_0 + 2.64126984126984*G0_1_0_8_0_1 - 0.914285714285713*G0_1_0_9_0_0 + 0.406349206349206*G0_1_0_10_1_0 + 0.406349206349205*G0_1_0_10_1_1 - 1.93015873015873*G0_1_0_11_1_0 - 0.406349206349207*G0_1_0_12_1_1 + 0.863492063492061*G0_1_0_13_1_0 - 2.64126984126984*G0_1_0_13_1_1 - 0.0507936507936493*G0_1_0_14_1_0 + 1.93015873015873*G0_1_0_14_1_1 + 0.0507936507936523*G0_1_0_15_1_0 + 0.0507936507936497*G0_1_0_16_1_0 - 1.98095238095237*G0_1_0_17_1_0 - 1.93015873015872*G0_1_0_17_1_1 + 3.5047619047619*G0_1_0_18_1_0 + 2.64126984126984*G0_1_0_18_1_1 - 0.914285714285713*G0_1_0_19_1_0;
    A[717] = A[252];
    A[637] = 0.0;
    A[353] = 0.0;
    A[16] = 0.0;
    A[733] = 0.0;
    A[420] = A[14] - 0.0101587301587299*G0_0_1_1_0_0 - 0.111746031746032*G0_0_1_2_0_1 + 0.153650793650793*G0_0_1_3_0_0 + 0.021587301587302*G0_0_1_3_0_1 - 0.143492063492063*G0_0_1_4_0_0 + 0.0901587301587294*G0_0_1_4_0_1 - 0.0698412698412703*G0_0_1_5_0_0 - 0.0698412698412708*G0_0_1_5_0_1 + 0.143492063492064*G0_0_1_6_0_0 + 0.181587301587303*G0_0_1_6_0_1 + 0.069841269841269*G0_0_1_7_0_0 + 0.0698412698412699*G0_0_1_7_0_1 - 0.0596825396825398*G0_0_1_8_0_0 - 0.0215873015873019*G0_0_1_8_0_1 - 0.0838095238095233*G0_0_1_9_0_0 - 0.16*G0_0_1_9_0_1 - 0.0101587301587299*G0_0_1_11_1_0 - 0.111746031746032*G0_0_1_12_1_1 + 0.153650793650793*G0_0_1_13_1_0 + 0.021587301587302*G0_0_1_13_1_1 - 0.143492063492063*G0_0_1_14_1_0 + 0.0901587301587294*G0_0_1_14_1_1 - 0.0698412698412703*G0_0_1_15_1_0 - 0.0698412698412708*G0_0_1_15_1_1 + 0.143492063492064*G0_0_1_16_1_0 + 0.181587301587303*G0_0_1_16_1_1 + 0.069841269841269*G0_0_1_17_1_0 + 0.0698412698412699*G0_0_1_17_1_1 - 0.0596825396825398*G0_0_1_18_1_0 - 0.0215873015873019*G0_0_1_18_1_1 - 0.0838095238095233*G0_0_1_19_1_0 - 0.16*G0_0_1_19_1_1 + 0.0101587301587299*G0_1_0_1_0_0 + 0.111746031746032*G0_1_0_2_0_1 - 0.153650793650793*G0_1_0_3_0_0 - 0.0215873015873019*G0_1_0_3_0_1 + 0.143492063492063*G0_1_0_4_0_0 - 0.0901587301587294*G0_1_0_4_0_1 + 0.0698412698412704*G0_1_0_5_0_0 + 0.0698412698412709*G0_1_0_5_0_1 - 0.143492063492064*G0_1_0_6_0_0 - 0.181587301587303*G0_1_0_6_0_1 - 0.069841269841269*G0_1_0_7_0_0 - 0.0698412698412699*G0_1_0_7_0_1 + 0.0596825396825398*G0_1_0_8_0_0 + 0.0215873015873019*G0_1_0_8_0_1 + 0.0838095238095232*G0_1_0_9_0_0 + 0.16*G0_1_0_9_0_1 + 0.0101587301587299*G0_1_0_11_1_0 + 0.111746031746032*G0_1_0_12_1_1 - 0.153650793650793*G0_1_0_13_1_0 - 0.0215873015873019*G0_1_0_13_1_1 + 0.143492063492063*G0_1_0_14_1_0 - 0.0901587301587294*G0_1_0_14_1_1 + 0.0698412698412704*G0_1_0_15_1_0 + 0.0698412698412709*G0_1_0_15_1_1 - 0.143492063492064*G0_1_0_16_1_0 - 0.181587301587303*G0_1_0_16_1_1 - 0.069841269841269*G0_1_0_17_1_0 - 0.0698412698412699*G0_1_0_17_1_1 + 0.0596825396825398*G0_1_0_18_1_0 + 0.0215873015873019*G0_1_0_18_1_1 + 0.0838095238095232*G0_1_0_19_1_0 + 0.16*G0_1_0_19_1_1;
    A[376] = 0.0;
    A[59] = 0.0;
    A[758] = 0.0;
    A[455] = 0.0;
    A[411] = 0.0;
    A[86] = 0.0;
    A[93] = A[558];
    A[824] = 0.0;
    A[849] = 0.0;
    A[175] = 0.0;
    A[882] = 0.0;
    A[495] = A[30];
    A[202] = 0.0;
    A[580] = 0.0;
    A[524] = 0.0;
    A[233] = 0.0;
    A[613] = 0.0;
    A[553] = 0.0;
    A[706] = A[181] + 0.126984126984126*G0_0_0_0_0_0 + 0.126984126984126*G0_0_0_0_0_1 + 0.256507936507935*G0_0_0_2_0_1 - 0.218412698412697*G0_0_0_3_0_0 + 0.4215873015873*G0_0_0_4_0_0 - 0.053333333333333*G0_0_0_4_0_1 + 0.294603174603173*G0_0_0_5_0_0 + 0.00253968253968256*G0_0_0_5_0_1 - 0.4215873015873*G0_0_0_6_0_0 - 0.386031746031744*G0_0_0_6_0_1 - 0.345396825396822*G0_0_0_7_0_0 - 0.0533333333333324*G0_0_0_7_0_1 + 0.218412698412696*G0_0_0_8_0_0 - 0.0761904761904755*G0_0_0_9_0_0 + 0.106666666666666*G0_0_0_9_0_1 + 0.126984126984126*G0_0_0_10_1_0 + 0.126984126984126*G0_0_0_10_1_1 + 0.256507936507935*G0_0_0_12_1_1 - 0.218412698412697*G0_0_0_13_1_0 + 0.4215873015873*G0_0_0_14_1_0 - 0.053333333333333*G0_0_0_14_1_1 + 0.294603174603173*G0_0_0_15_1_0 + 0.00253968253968256*G0_0_0_15_1_1 - 0.4215873015873*G0_0_0_16_1_0 - 0.386031746031744*G0_0_0_16_1_1 - 0.345396825396822*G0_0_0_17_1_0 - 0.0533333333333324*G0_0_0_17_1_1 + 0.218412698412696*G0_0_0_18_1_0 - 0.0761904761904755*G0_0_0_19_1_0 + 0.106666666666666*G0_0_0_19_1_1 - 0.12952380952381*G0_1_0_0_0_0 - 0.12952380952381*G0_1_0_0_0_1 + 0.129523809523809*G0_1_0_2_0_1 + 0.129523809523808*G0_1_0_4_0_0 + 0.259047619047617*G0_1_0_5_0_0 + 0.388571428571428*G0_1_0_5_0_1 - 0.129523809523808*G0_1_0_6_0_0 - 0.388571428571427*G0_1_0_6_0_1 + 0.129523809523811*G0_1_0_7_0_0 - 0.259047619047618*G0_1_0_9_0_0 - 0.12952380952381*G0_1_0_10_1_0 - 0.12952380952381*G0_1_0_10_1_1 + 0.129523809523809*G0_1_0_12_1_1 + 0.129523809523808*G0_1_0_14_1_0 + 0.259047619047617*G0_1_0_15_1_0 + 0.388571428571428*G0_1_0_15_1_1 - 0.129523809523808*G0_1_0_16_1_0 - 0.388571428571427*G0_1_0_16_1_1 + 0.129523809523811*G0_1_0_17_1_0 - 0.259047619047618*G0_1_0_19_1_0;
    A[151] = -A[706] - 0.0876190476190475*G0_1_0_0_0_0 - 0.0876190476190473*G0_1_0_0_0_1 + 0.590476190476191*G0_1_0_1_0_0 + 0.285714285714285*G0_1_0_2_0_1 + 0.0622222222222224*G0_1_0_3_0_0 + 1.07936507936508*G0_1_0_3_0_1 + 0.260317460317458*G0_1_0_4_0_0 - 0.452063492063493*G0_1_0_4_0_1 + 0.227301587301586*G0_1_0_5_0_0 + 0.156190476190475*G0_1_0_5_0_1 - 0.260317460317458*G0_1_0_6_0_0 - 0.354285714285712*G0_1_0_6_0_1 + 0.251428571428572*G0_1_0_7_0_0 + 0.322539682539683*G0_1_0_7_0_1 - 0.754285714285715*G0_1_0_8_0_0 - 1.07936507936508*G0_1_0_8_0_1 - 0.289523809523808*G0_1_0_9_0_0 + 0.12952380952381*G0_1_0_9_0_1 - 0.0876190476190475*G0_1_0_10_1_0 - 0.0876190476190473*G0_1_0_10_1_1 + 0.590476190476191*G0_1_0_11_1_0 + 0.285714285714285*G0_1_0_12_1_1 + 0.0622222222222224*G0_1_0_13_1_0 + 1.07936507936508*G0_1_0_13_1_1 + 0.260317460317458*G0_1_0_14_1_0 - 0.452063492063493*G0_1_0_14_1_1 + 0.227301587301586*G0_1_0_15_1_0 + 0.156190476190475*G0_1_0_15_1_1 - 0.260317460317458*G0_1_0_16_1_0 - 0.354285714285712*G0_1_0_16_1_1 + 0.251428571428572*G0_1_0_17_1_0 + 0.322539682539683*G0_1_0_17_1_1 - 0.754285714285715*G0_1_0_18_1_0 - 1.07936507936508*G0_1_0_18_1_1 - 0.289523809523808*G0_1_0_19_1_0 + 0.12952380952381*G0_1_0_19_1_1;
    A[240] = -A[706] + 0.0304761904761901*G0_0_0_0_0_0 + 0.0304761904761901*G0_0_0_0_0_1 + 0.0304761904761911*G0_0_0_1_0_0 - 0.289523809523807*G0_0_0_3_0_0 - 0.0838095238095216*G0_0_0_3_0_1 - 0.175238095238095*G0_0_0_4_0_1 - 0.289523809523807*G0_0_0_5_0_0 - 0.205714285714284*G0_0_0_5_0_1 + 0.175238095238094*G0_0_0_6_0_1 - 0.0304761904761897*G0_0_0_7_0_0 - 0.114285714285713*G0_0_0_7_0_1 - 0.0304761904761915*G0_0_0_8_0_0 + 0.0838095238095216*G0_0_0_8_0_1 + 0.579047619047614*G0_0_0_9_0_0 + 0.289523809523808*G0_0_0_9_0_1 + 0.0304761904761901*G0_0_0_10_1_0 + 0.0304761904761901*G0_0_0_10_1_1 + 0.0304761904761911*G0_0_0_11_1_0 - 0.289523809523807*G0_0_0_13_1_0 - 0.0838095238095216*G0_0_0_13_1_1 - 0.175238095238095*G0_0_0_14_1_1 - 0.289523809523807*G0_0_0_15_1_0 - 0.205714285714284*G0_0_0_15_1_1 + 0.175238095238094*G0_0_0_16_1_1 - 0.0304761904761897*G0_0_0_17_1_0 - 0.114285714285713*G0_0_0_17_1_1 - 0.0304761904761915*G0_0_0_18_1_0 + 0.0838095238095216*G0_0_0_18_1_1 + 0.579047619047614*G0_0_0_19_1_0 + 0.289523809523808*G0_0_0_19_1_1 + 0.0296296296296299*G0_0_1_0_0_0 + 0.02962962962963*G0_0_1_0_0_1 + 0.000846560846560314*G0_0_1_1_0_0 - 0.23915343915344*G0_0_1_2_0_1 + 0.0520634920634936*G0_0_1_3_0_0 + 0.00825396825396813*G0_0_1_3_0_1 - 0.431746031746034*G0_0_1_4_0_0 - 0.147936507936508*G0_0_1_4_0_1 - 0.341587301587302*G0_0_1_5_0_0 - 0.24952380952381*G0_0_1_5_0_1 + 0.431746031746034*G0_0_1_6_0_0 + 0.45904761904762*G0_0_1_6_0_1 + 0.0304761904761903*G0_0_1_7_0_0 - 0.0615873015873012*G0_0_1_7_0_1 - 0.0609523809523805*G0_0_1_8_0_0 - 0.00825396825396815*G0_0_1_8_0_1 + 0.289523809523808*G0_0_1_9_0_0 + 0.209523809523809*G0_0_1_9_0_1 + 0.0296296296296299*G0_0_1_10_1_0 + 0.02962962962963*G0_0_1_10_1_1 + 0.000846560846560314*G0_0_1_11_1_0 - 0.23915343915344*G0_0_1_12_1_1 + 0.0520634920634936*G0_0_1_13_1_0 + 0.00825396825396813*G0_0_1_13_1_1 - 0.431746031746034*G0_0_1_14_1_0 - 0.147936507936508*G0_0_1_14_1_1 - 0.341587301587302*G0_0_1_15_1_0 - 0.24952380952381*G0_0_1_15_1_1 + 0.431746031746034*G0_0_1_16_1_0 + 0.45904761904762*G0_0_1_16_1_1 + 0.0304761904761903*G0_0_1_17_1_0 - 0.0615873015873012*G0_0_1_17_1_1 - 0.0609523809523805*G0_0_1_18_1_0 - 0.00825396825396815*G0_0_1_18_1_1 + 0.289523809523808*G0_0_1_19_1_0 + 0.209523809523809*G0_0_1_19_1_1 + 0.603597883597881*G0_1_0_0_0_0 + 0.603597883597881*G0_1_0_0_0_1 - 0.0702645502645485*G0_1_0_1_0_0 - 0.298835978835977*G0_1_0_2_0_1 + 0.053333333333334*G0_1_0_3_0_0 + 0.0609523809523831*G0_1_0_3_0_1 - 0.396190476190474*G0_1_0_4_0_0 - 0.175238095238095*G0_1_0_4_0_1 - 0.053333333333332*G0_1_0_5_0_0 - 1.05904761904761*G0_1_0_5_0_1 + 0.396190476190474*G0_1_0_6_0_0 + 0.754285714285711*G0_1_0_6_0_1 - 0.830476190476186*G0_1_0_7_0_0 + 0.175238095238096*G0_1_0_7_0_1 + 0.297142857142853*G0_1_0_8_0_0 - 0.0609523809523831*G0_1_0_8_0_1 + 0.603597883597881*G0_1_0_10_1_0 + 0.603597883597881*G0_1_0_10_1_1 - 0.0702645502645485*G0_1_0_11_1_0 - 0.298835978835977*G0_1_0_12_1_1 + 0.053333333333334*G0_1_0_13_1_0 + 0.0609523809523831*G0_1_0_13_1_1 - 0.396190476190474*G0_1_0_14_1_0 - 0.175238095238095*G0_1_0_14_1_1 - 0.053333333333332*G0_1_0_15_1_0 - 1.05904761904761*G0_1_0_15_1_1 + 0.396190476190474*G0_1_0_16_1_0 + 0.754285714285711*G0_1_0_16_1_1 - 0.830476190476186*G0_1_0_17_1_0 + 0.175238095238096*G0_1_0_17_1_1 + 0.297142857142853*G0_1_0_18_1_0 - 0.0609523809523831*G0_1_0_18_1_1 + 0.620105820105818*G0_1_1_0_0_0 + 0.620105820105818*G0_1_1_0_0_1 - 0.0702645502645503*G0_1_1_1_0_0 - 0.411851851851852*G0_1_1_2_0_1 + 0.114920634920636*G0_1_1_3_0_0 + 0.0609523809523804*G0_1_1_3_0_1 - 0.544126984126985*G0_1_1_4_0_0 - 0.148571428571428*G0_1_1_4_0_1 - 0.217777777777778*G0_1_1_5_0_0 - 1.20507936507936*G0_1_1_5_0_1 + 0.544126984126985*G0_1_1_6_0_0 + 0.996825396825396*G0_1_1_6_0_1 - 0.785396825396823*G0_1_1_7_0_0 + 0.201904761904761*G0_1_1_7_0_1 + 0.235555555555554*G0_1_1_8_0_0 - 0.0609523809523804*G0_1_1_8_0_1 + 0.102857142857142*G0_1_1_9_0_0 - 0.0533333333333335*G0_1_1_9_0_1 + 0.620105820105818*G0_1_1_10_1_0 + 0.620105820105818*G0_1_1_10_1_1 - 0.0702645502645503*G0_1_1_11_1_0 - 0.411851851851852*G0_1_1_12_1_1 + 0.114920634920636*G0_1_1_13_1_0 + 0.0609523809523804*G0_1_1_13_1_1 - 0.544126984126985*G0_1_1_14_1_0 - 0.148571428571428*G0_1_1_14_1_1 - 0.217777777777778*G0_1_1_15_1_0 - 1.20507936507936*G0_1_1_15_1_1 + 0.544126984126985*G0_1_1_16_1_0 + 0.996825396825396*G0_1_1_16_1_1 - 0.785396825396823*G0_1_1_17_1_0 + 0.201904761904761*G0_1_1_17_1_1 + 0.235555555555554*G0_1_1_18_1_0 - 0.0609523809523804*G0_1_1_18_1_1 + 0.102857142857142*G0_1_1_19_1_0 - 0.0533333333333335*G0_1_1_19_1_1;
    A[736] = -A[151] + 0.41100529100529*G0_0_0_0_0_0 + 0.41100529100529*G0_0_0_0_0_1 - 0.649735449735448*G0_0_0_1_0_0 - 0.309417989417988*G0_0_0_2_0_1 + 0.139682539682539*G0_0_0_3_0_0 - 0.895238095238094*G0_0_0_3_0_1 - 0.370793650793649*G0_0_0_4_0_0 + 0.323809523809523*G0_0_0_4_0_1 + 0.0965079365079358*G0_0_0_5_0_0 - 0.439365079365079*G0_0_0_5_0_1 + 0.370793650793649*G0_0_0_6_0_0 + 0.337777777777778*G0_0_0_6_0_1 - 0.935873015873013*G0_0_0_7_0_0 - 0.399999999999999*G0_0_0_7_0_1 + 1.17460317460317*G0_0_0_8_0_0 + 0.895238095238094*G0_0_0_8_0_1 - 0.236190476190475*G0_0_0_9_0_0 + 0.0761904761904749*G0_0_0_9_0_1 + 0.41100529100529*G0_0_0_10_1_0 + 0.41100529100529*G0_0_0_10_1_1 - 0.649735449735448*G0_0_0_11_1_0 - 0.309417989417988*G0_0_0_12_1_1 + 0.139682539682539*G0_0_0_13_1_0 - 0.895238095238094*G0_0_0_13_1_1 - 0.370793650793649*G0_0_0_14_1_0 + 0.323809523809523*G0_0_0_14_1_1 + 0.0965079365079358*G0_0_0_15_1_0 - 0.439365079365079*G0_0_0_15_1_1 + 0.370793650793649*G0_0_0_16_1_0 + 0.337777777777778*G0_0_0_16_1_1 - 0.935873015873013*G0_0_0_17_1_0 - 0.399999999999999*G0_0_0_17_1_1 + 1.17460317460317*G0_0_0_18_1_0 + 0.895238095238094*G0_0_0_18_1_1 - 0.236190476190475*G0_0_0_19_1_0 + 0.0761904761904749*G0_0_0_19_1_1 + 0.101587301587301*G0_1_0_0_0_0 + 0.101587301587301*G0_1_0_0_0_1 + 0.101587301587301*G0_1_0_2_0_1 - 0.139682539682539*G0_1_0_3_0_0 + 0.165079365079363*G0_1_0_4_0_0 - 0.0761904761904785*G0_1_0_4_0_1 + 0.0634920634920629*G0_1_0_5_0_0 - 0.101587301587301*G0_1_0_5_0_1 - 0.165079365079363*G0_1_0_6_0_0 - 0.101587301587301*G0_1_0_6_0_1 - 0.241269841269838*G0_1_0_7_0_0 - 0.0761904761904741*G0_1_0_7_0_1 + 0.139682539682535*G0_1_0_8_0_0 + 0.0761904761904757*G0_1_0_9_0_0 + 0.152380952380952*G0_1_0_9_0_1 + 0.101587301587301*G0_1_0_10_1_0 + 0.101587301587301*G0_1_0_10_1_1 + 0.101587301587301*G0_1_0_12_1_1 - 0.139682539682539*G0_1_0_13_1_0 + 0.165079365079363*G0_1_0_14_1_0 - 0.0761904761904785*G0_1_0_14_1_1 + 0.0634920634920629*G0_1_0_15_1_0 - 0.101587301587301*G0_1_0_15_1_1 - 0.165079365079363*G0_1_0_16_1_0 - 0.101587301587301*G0_1_0_16_1_1 - 0.241269841269838*G0_1_0_17_1_0 - 0.0761904761904741*G0_1_0_17_1_1 + 0.139682539682535*G0_1_0_18_1_0 + 0.0761904761904757*G0_1_0_19_1_0 + 0.152380952380952*G0_1_0_19_1_1;
    A[271] = A[736];
    A[630] = 0.0;
    A[251] = A[716];
    A[675] = A[210];
    A[704] = 0.0;
    A[301] = A[766];
    A[257] = 0.0;
    A[23] = 0.0;
    A[740] = -A[743] - 0.528253968253966*G0_0_1_0_0_0 - 0.528253968253966*G0_0_1_0_0_1 + 0.142222222222219*G0_0_1_1_0_0 - 0.121904761904759*G0_0_1_3_0_0 - 0.111746031746033*G0_0_1_3_0_1 + 0.132063492063494*G0_0_1_4_0_1 - 0.121904761904762*G0_0_1_5_0_0 + 0.660317460317458*G0_0_1_5_0_1 - 0.132063492063492*G0_0_1_6_0_1 + 1.19873015873015*G0_0_1_7_0_0 + 0.416507936507932*G0_0_1_7_0_1 - 0.812698412698404*G0_0_1_8_0_0 + 0.111746031746033*G0_0_1_8_0_1 + 0.24380952380952*G0_0_1_9_0_0 - 0.548571428571426*G0_0_1_9_0_1 - 0.528253968253966*G0_0_1_10_1_0 - 0.528253968253966*G0_0_1_10_1_1 + 0.142222222222219*G0_0_1_11_1_0 - 0.121904761904759*G0_0_1_13_1_0 - 0.111746031746033*G0_0_1_13_1_1 + 0.132063492063494*G0_0_1_14_1_1 - 0.121904761904762*G0_0_1_15_1_0 + 0.660317460317458*G0_0_1_15_1_1 - 0.132063492063492*G0_0_1_16_1_1 + 1.19873015873015*G0_0_1_17_1_0 + 0.416507936507932*G0_0_1_17_1_1 - 0.812698412698404*G0_0_1_18_1_0 + 0.111746031746033*G0_0_1_18_1_1 + 0.24380952380952*G0_0_1_19_1_0 - 0.548571428571426*G0_0_1_19_1_1 + 0.826243386243381*G0_1_1_0_0_0 + 0.826243386243381*G0_1_1_0_0_1 + 0.128677248677247*G0_1_1_1_0_0 - 0.440211640211638*G0_1_1_2_0_1 - 0.294603174603172*G0_1_1_3_0_0 - 0.0406349206349223*G0_1_1_3_0_1 - 0.0507936507936511*G0_1_1_4_0_0 + 0.264126984126984*G0_1_1_4_0_1 - 0.497777777777777*G0_1_1_5_0_0 - 2.05206349206348*G0_1_1_5_0_1 + 0.0507936507936509*G0_1_1_6_0_0 + 1.66603174603174*G0_1_1_6_0_1 - 0.355555555555553*G0_1_1_7_0_0 + 1.19873015873015*G0_1_1_7_0_1 - 0.599365079365076*G0_1_1_8_0_0 + 0.0406349206349221*G0_1_1_8_0_1 + 0.792380952380949*G0_1_1_9_0_0 - 1.46285714285714*G0_1_1_9_0_1 + 0.826243386243381*G0_1_1_10_1_0 + 0.826243386243381*G0_1_1_10_1_1 + 0.128677248677247*G0_1_1_11_1_0 - 0.440211640211638*G0_1_1_12_1_1 - 0.294603174603172*G0_1_1_13_1_0 - 0.0406349206349223*G0_1_1_13_1_1 - 0.0507936507936511*G0_1_1_14_1_0 + 0.264126984126984*G0_1_1_14_1_1 - 0.497777777777777*G0_1_1_15_1_0 - 2.05206349206348*G0_1_1_15_1_1 + 0.0507936507936509*G0_1_1_16_1_0 + 1.66603174603174*G0_1_1_16_1_1 - 0.355555555555553*G0_1_1_17_1_0 + 1.19873015873015*G0_1_1_17_1_1 - 0.599365079365076*G0_1_1_18_1_0 + 0.0406349206349221*G0_1_1_18_1_1 + 0.792380952380949*G0_1_1_19_1_0 - 1.46285714285714*G0_1_1_19_1_1;
    A[403] = -A[740] - 1.56444444444443*G0_0_0_0_0_0 - 1.56444444444443*G0_0_0_0_0_1 + 3.53523809523807*G0_0_0_1_0_0 - 0.772063492063487*G0_0_0_2_0_1 + 9.26476190476184*G0_0_0_3_0_0 + 8.76698412698407*G0_0_0_3_0_1 + 2.07238095238096*G0_0_0_4_0_0 + 6.87746031746029*G0_0_0_4_0_1 - 3.65714285714285*G0_0_0_5_0_0 - 1.63555555555556*G0_0_0_5_0_1 - 2.07238095238095*G0_0_0_6_0_0 + 3.97206349206348*G0_0_0_6_0_1 + 4.59174603174599*G0_0_0_7_0_0 + 2.5701587301587*G0_0_0_7_0_1 - 6.56253968253964*G0_0_0_8_0_0 - 8.76698412698408*G0_0_0_8_0_1 - 5.60761904761899*G0_0_0_9_0_0 - 9.44761904761899*G0_0_0_9_0_1 - 1.56444444444443*G0_0_0_10_1_0 - 1.56444444444443*G0_0_0_10_1_1 + 3.53523809523807*G0_0_0_11_1_0 - 0.772063492063487*G0_0_0_12_1_1 + 9.26476190476184*G0_0_0_13_1_0 + 8.76698412698407*G0_0_0_13_1_1 + 2.07238095238096*G0_0_0_14_1_0 + 6.87746031746029*G0_0_0_14_1_1 - 3.65714285714285*G0_0_0_15_1_0 - 1.63555555555556*G0_0_0_15_1_1 - 2.07238095238095*G0_0_0_16_1_0 + 3.97206349206348*G0_0_0_16_1_1 + 4.59174603174599*G0_0_0_17_1_0 + 2.5701587301587*G0_0_0_17_1_1 - 6.56253968253964*G0_0_0_18_1_0 - 8.76698412698408*G0_0_0_18_1_1 - 5.60761904761899*G0_0_0_19_1_0 - 9.44761904761899*G0_0_0_19_1_1 - 1.57460317460316*G0_0_1_0_0_0 - 1.57460317460316*G0_0_1_0_0_1 + 2.57015873015871*G0_0_1_1_0_0 - 0.761904761904758*G0_0_1_2_0_1 + 9.1123809523809*G0_0_1_3_0_0 + 7.54793650793646*G0_0_1_3_0_1 + 4.89650793650792*G0_0_1_4_0_1 + 2.10285714285712*G0_0_1_5_0_0 + 2.05206349206347*G0_0_1_5_0_1 + 0.284444444444448*G0_0_1_6_0_1 + 4.50031746031742*G0_0_1_7_0_0 + 4.55111111111108*G0_0_1_7_0_1 - 5.49587301587298*G0_0_1_8_0_0 - 7.54793650793647*G0_0_1_8_0_1 - 11.215238095238*G0_0_1_9_0_0 - 9.44761904761899*G0_0_1_9_0_1 - 1.57460317460316*G0_0_1_10_1_0 - 1.57460317460316*G0_0_1_10_1_1 + 2.57015873015871*G0_0_1_11_1_0 - 0.761904761904758*G0_0_1_12_1_1 + 9.1123809523809*G0_0_1_13_1_0 + 7.54793650793646*G0_0_1_13_1_1 + 4.89650793650792*G0_0_1_14_1_1 + 2.10285714285712*G0_0_1_15_1_0 + 2.05206349206347*G0_0_1_15_1_1 + 0.284444444444448*G0_0_1_16_1_1 + 4.50031746031742*G0_0_1_17_1_0 + 4.55111111111108*G0_0_1_17_1_1 - 5.49587301587298*G0_0_1_18_1_0 - 7.54793650793647*G0_0_1_18_1_1 - 11.215238095238*G0_0_1_19_1_0 - 9.44761904761899*G0_0_1_19_1_1 - 1.5542857142857*G0_1_0_0_0_0 - 1.5542857142857*G0_1_0_0_0_1 + 2.54984126984126*G0_1_0_1_0_0 - 0.782222222222218*G0_1_0_2_0_1 + 9.28507936507931*G0_1_0_3_0_0 + 7.6292063492063*G0_1_0_3_0_1 - 0.0711111111111032*G0_1_0_4_0_0 + 4.91682539682537*G0_1_0_4_0_1 + 2.23492063492061*G0_1_0_5_0_0 + 2.11301587301585*G0_1_0_5_0_1 + 0.0711111111111066*G0_1_0_6_0_0 + 0.223492063492067*G0_1_0_6_0_1 + 4.40888888888886*G0_1_0_7_0_0 + 4.53079365079362*G0_1_0_7_0_1 - 5.40444444444441*G0_1_0_8_0_0 - 7.62920634920631*G0_1_0_8_0_1 - 11.5199999999999*G0_1_0_9_0_0 - 9.44761904761899*G0_1_0_9_0_1 - 1.5542857142857*G0_1_0_10_1_0 - 1.5542857142857*G0_1_0_10_1_1 + 2.54984126984126*G0_1_0_11_1_0 - 0.782222222222218*G0_1_0_12_1_1 + 9.28507936507931*G0_1_0_13_1_0 + 7.6292063492063*G0_1_0_13_1_1 - 0.0711111111111032*G0_1_0_14_1_0 + 4.91682539682537*G0_1_0_14_1_1 + 2.23492063492061*G0_1_0_15_1_0 + 2.11301587301585*G0_1_0_15_1_1 + 0.0711111111111066*G0_1_0_16_1_0 + 0.223492063492067*G0_1_0_16_1_1 + 4.40888888888886*G0_1_0_17_1_0 + 4.53079365079362*G0_1_0_17_1_1 - 5.40444444444441*G0_1_0_18_1_0 - 7.62920634920631*G0_1_0_18_1_1 - 11.5199999999999*G0_1_0_19_1_0 - 9.44761904761899*G0_1_0_19_1_1 - 0.792380952380944*G0_1_1_0_0_0 - 0.792380952380944*G0_1_1_0_0_1 + 5.11999999999997*G0_1_1_1_0_0 + 0.792380952380945*G0_1_1_2_0_1 + 11.3371428571428*G0_1_1_3_0_0 + 15.1771428571428*G0_1_1_3_0_1 - 0.121904761904761*G0_1_1_4_0_0 + 0.365714285714285*G0_1_1_4_0_1 + 1.95047619047617*G0_1_1_5_0_0 + 1.82857142857141*G0_1_1_5_0_1 + 0.121904761904766*G0_1_1_6_0_0 - 1.82857142857141*G0_1_1_6_0_1 - 0.487619047619063*G0_1_1_7_0_0 - 0.365714285714301*G0_1_1_7_0_1 - 3.83999999999996*G0_1_1_8_0_0 - 15.1771428571428*G0_1_1_8_0_1 - 13.287619047619*G0_1_1_9_0_0 - 0.792380952380944*G0_1_1_10_1_0 - 0.792380952380944*G0_1_1_10_1_1 + 5.11999999999997*G0_1_1_11_1_0 + 0.792380952380945*G0_1_1_12_1_1 + 11.3371428571428*G0_1_1_13_1_0 + 15.1771428571428*G0_1_1_13_1_1 - 0.121904761904761*G0_1_1_14_1_0 + 0.365714285714285*G0_1_1_14_1_1 + 1.95047619047617*G0_1_1_15_1_0 + 1.82857142857141*G0_1_1_15_1_1 + 0.121904761904766*G0_1_1_16_1_0 - 1.82857142857141*G0_1_1_16_1_1 - 0.487619047619063*G0_1_1_17_1_0 - 0.365714285714301*G0_1_1_17_1_1 - 3.83999999999996*G0_1_1_18_1_0 - 15.1771428571428*G0_1_1_18_1_1 - 13.287619047619*G0_1_1_19_1_0;
    A[899] = A[403] + 0.487619047619039*G0_0_0_0_0_0 + 0.487619047619037*G0_0_0_0_0_1 - 2.43809523809522*G0_0_0_1_0_0 + 5.85142857142855*G0_0_0_2_0_1 - 8.7771428571428*G0_0_0_3_0_0 - 8.53333333333328*G0_0_0_3_0_1 + 13.1657142857142*G0_0_0_4_0_0 + 4.63238095238095*G0_0_0_4_0_1 + 2.92571428571428*G0_0_0_5_0_0 + 1.21904761904763*G0_0_0_5_0_1 - 13.1657142857142*G0_0_0_6_0_0 - 7.55809523809522*G0_0_0_6_0_1 - 1.95047619047616*G0_0_0_7_0_0 - 0.243809523809508*G0_0_0_7_0_1 + 3.90095238095235*G0_0_0_8_0_0 + 8.53333333333329*G0_0_0_8_0_1 + 5.85142857142852*G0_0_0_9_0_0 - 4.38857142857144*G0_0_0_9_0_1 + 0.487619047619039*G0_0_0_10_1_0 + 0.487619047619037*G0_0_0_10_1_1 - 2.43809523809522*G0_0_0_11_1_0 + 5.85142857142855*G0_0_0_12_1_1 - 8.7771428571428*G0_0_0_13_1_0 - 8.53333333333328*G0_0_0_13_1_1 + 13.1657142857142*G0_0_0_14_1_0 + 4.63238095238095*G0_0_0_14_1_1 + 2.92571428571428*G0_0_0_15_1_0 + 1.21904761904763*G0_0_0_15_1_1 - 13.1657142857142*G0_0_0_16_1_0 - 7.55809523809522*G0_0_0_16_1_1 - 1.95047619047616*G0_0_0_17_1_0 - 0.243809523809508*G0_0_0_17_1_1 + 3.90095238095235*G0_0_0_18_1_0 + 8.53333333333329*G0_0_0_18_1_1 + 5.85142857142852*G0_0_0_19_1_0 - 4.38857142857144*G0_0_0_19_1_1 - 3.16952380952379*G0_0_1_1_0_0 + 3.1695238095238*G0_0_1_2_0_1 - 4.26666666666664*G0_0_1_3_0_0 - 7.43619047619044*G0_0_1_3_0_1 + 7.43619047619046*G0_0_1_4_0_0 + 4.26666666666666*G0_0_1_4_0_1 + 2.07238095238095*G0_0_1_5_0_0 + 2.07238095238096*G0_0_1_5_0_1 - 7.43619047619046*G0_0_1_6_0_0 - 5.24190476190476*G0_0_1_6_0_1 - 2.07238095238093*G0_0_1_7_0_0 - 2.07238095238094*G0_0_1_7_0_1 + 5.24190476190473*G0_0_1_8_0_0 + 7.43619047619044*G0_0_1_8_0_1 + 2.19428571428569*G0_0_1_9_0_0 - 2.19428571428572*G0_0_1_9_0_1 - 3.16952380952379*G0_0_1_11_1_0 + 3.1695238095238*G0_0_1_12_1_1 - 4.26666666666664*G0_0_1_13_1_0 - 7.43619047619044*G0_0_1_13_1_1 + 7.43619047619046*G0_0_1_14_1_0 + 4.26666666666666*G0_0_1_14_1_1 + 2.07238095238095*G0_0_1_15_1_0 + 2.07238095238096*G0_0_1_15_1_1 - 7.43619047619046*G0_0_1_16_1_0 - 5.24190476190476*G0_0_1_16_1_1 - 2.07238095238093*G0_0_1_17_1_0 - 2.07238095238094*G0_0_1_17_1_1 + 5.24190476190473*G0_0_1_18_1_0 + 7.43619047619044*G0_0_1_18_1_1 + 2.19428571428569*G0_0_1_19_1_0 - 2.19428571428572*G0_0_1_19_1_1 - 3.16952380952379*G0_1_0_1_0_0 + 3.1695238095238*G0_1_0_2_0_1 - 4.26666666666664*G0_1_0_3_0_0 - 7.43619047619044*G0_1_0_3_0_1 + 7.43619047619046*G0_1_0_4_0_0 + 4.26666666666666*G0_1_0_4_0_1 + 2.07238095238095*G0_1_0_5_0_0 + 2.07238095238096*G0_1_0_5_0_1 - 7.43619047619046*G0_1_0_6_0_0 - 5.24190476190476*G0_1_0_6_0_1 - 2.07238095238093*G0_1_0_7_0_0 - 2.07238095238094*G0_1_0_7_0_1 + 5.24190476190473*G0_1_0_8_0_0 + 7.43619047619044*G0_1_0_8_0_1 + 2.19428571428569*G0_1_0_9_0_0 - 2.19428571428572*G0_1_0_9_0_1 - 3.16952380952379*G0_1_0_11_1_0 + 3.1695238095238*G0_1_0_12_1_1 - 4.26666666666664*G0_1_0_13_1_0 - 7.43619047619044*G0_1_0_13_1_1 + 7.43619047619046*G0_1_0_14_1_0 + 4.26666666666666*G0_1_0_14_1_1 + 2.07238095238095*G0_1_0_15_1_0 + 2.07238095238096*G0_1_0_15_1_1 - 7.43619047619046*G0_1_0_16_1_0 - 5.24190476190476*G0_1_0_16_1_1 - 2.07238095238093*G0_1_0_17_1_0 - 2.07238095238094*G0_1_0_17_1_1 + 5.24190476190473*G0_1_0_18_1_0 + 7.43619047619044*G0_1_0_18_1_1 + 2.19428571428569*G0_1_0_19_1_0 - 2.19428571428572*G0_1_0_19_1_1 - 0.487619047619051*G0_1_1_0_0_0 - 0.487619047619052*G0_1_1_0_0_1 - 5.85142857142854*G0_1_1_1_0_0 + 2.43809523809523*G0_1_1_2_0_1 - 4.63238095238093*G0_1_1_3_0_0 - 13.1657142857142*G0_1_1_3_0_1 + 8.53333333333331*G0_1_1_4_0_0 + 8.77714285714282*G0_1_1_4_0_1 + 0.243809523809524*G0_1_1_5_0_0 + 1.95047619047619*G0_1_1_5_0_1 - 8.53333333333331*G0_1_1_6_0_0 - 3.90095238095237*G0_1_1_6_0_1 - 1.2190476190476*G0_1_1_7_0_0 - 2.92571428571427*G0_1_1_7_0_1 + 7.55809523809518*G0_1_1_8_0_0 + 13.1657142857142*G0_1_1_8_0_1 + 4.38857142857141*G0_1_1_9_0_0 - 5.85142857142856*G0_1_1_9_0_1 - 0.487619047619051*G0_1_1_10_1_0 - 0.487619047619052*G0_1_1_10_1_1 - 5.85142857142854*G0_1_1_11_1_0 + 2.43809523809523*G0_1_1_12_1_1 - 4.63238095238093*G0_1_1_13_1_0 - 13.1657142857142*G0_1_1_13_1_1 + 8.53333333333331*G0_1_1_14_1_0 + 8.77714285714282*G0_1_1_14_1_1 + 0.243809523809524*G0_1_1_15_1_0 + 1.95047619047619*G0_1_1_15_1_1 - 8.53333333333331*G0_1_1_16_1_0 - 3.90095238095237*G0_1_1_16_1_1 - 1.2190476190476*G0_1_1_17_1_0 - 2.92571428571427*G0_1_1_17_1_1 + 7.55809523809518*G0_1_1_18_1_0 + 13.1657142857142*G0_1_1_18_1_1 + 4.38857142857141*G0_1_1_19_1_0 - 5.85142857142856*G0_1_1_19_1_1;
    A[434] = A[899];
    A[624] = A[740] + 0.0203174603174589*G0_0_1_0_0_0 + 0.0203174603174589*G0_0_1_0_0_1 - 0.0203174603174583*G0_0_1_1_0_0 - 0.0203174603174597*G0_0_1_2_0_1 + 0.172698412698409*G0_0_1_3_0_0 + 0.0812698412698423*G0_0_1_3_0_1 - 0.0711111111111116*G0_0_1_4_0_0 + 0.0203174603174563*G0_0_1_4_0_1 + 0.13206349206349*G0_0_1_5_0_0 + 0.0609523809523817*G0_0_1_5_0_1 + 0.0711111111111116*G0_0_1_6_0_0 - 0.0609523809523809*G0_0_1_6_0_1 - 0.0914285714285682*G0_0_1_7_0_0 - 0.0203174603174605*G0_0_1_7_0_1 + 0.0914285714285678*G0_0_1_8_0_0 - 0.0812698412698424*G0_0_1_8_0_1 - 0.304761904761899*G0_0_1_9_0_0 + 0.0203174603174589*G0_0_1_10_1_0 + 0.0203174603174589*G0_0_1_10_1_1 - 0.0203174603174583*G0_0_1_11_1_0 - 0.0203174603174597*G0_0_1_12_1_1 + 0.172698412698409*G0_0_1_13_1_0 + 0.0812698412698423*G0_0_1_13_1_1 - 0.0711111111111116*G0_0_1_14_1_0 + 0.0203174603174563*G0_0_1_14_1_1 + 0.13206349206349*G0_0_1_15_1_0 + 0.0609523809523817*G0_0_1_15_1_1 + 0.0711111111111116*G0_0_1_16_1_0 - 0.0609523809523809*G0_0_1_16_1_1 - 0.0914285714285682*G0_0_1_17_1_0 - 0.0203174603174605*G0_0_1_17_1_1 + 0.0914285714285678*G0_0_1_18_1_0 - 0.0812698412698424*G0_0_1_18_1_1 - 0.304761904761899*G0_0_1_19_1_0 - 0.0203174603174589*G0_1_0_0_0_0 - 0.0203174603174589*G0_1_0_0_0_1 + 0.0203174603174584*G0_1_0_1_0_0 + 0.0203174603174597*G0_1_0_2_0_1 - 0.172698412698409*G0_1_0_3_0_0 - 0.0812698412698423*G0_1_0_3_0_1 + 0.0711111111111116*G0_1_0_4_0_0 - 0.0203174603174563*G0_1_0_4_0_1 - 0.13206349206349*G0_1_0_5_0_0 - 0.0609523809523818*G0_1_0_5_0_1 - 0.0711111111111116*G0_1_0_6_0_0 + 0.0609523809523809*G0_1_0_6_0_1 + 0.0914285714285683*G0_1_0_7_0_0 + 0.0203174603174607*G0_1_0_7_0_1 - 0.0914285714285678*G0_1_0_8_0_0 + 0.0812698412698424*G0_1_0_8_0_1 + 0.304761904761899*G0_1_0_9_0_0 - 0.0203174603174589*G0_1_0_10_1_0 - 0.0203174603174589*G0_1_0_10_1_1 + 0.0203174603174584*G0_1_0_11_1_0 + 0.0203174603174597*G0_1_0_12_1_1 - 0.172698412698409*G0_1_0_13_1_0 - 0.0812698412698423*G0_1_0_13_1_1 + 0.0711111111111116*G0_1_0_14_1_0 - 0.0203174603174563*G0_1_0_14_1_1 - 0.13206349206349*G0_1_0_15_1_0 - 0.0609523809523818*G0_1_0_15_1_1 - 0.0711111111111116*G0_1_0_16_1_0 + 0.0609523809523809*G0_1_0_16_1_1 + 0.0914285714285683*G0_1_0_17_1_0 + 0.0203174603174607*G0_1_0_17_1_1 - 0.0914285714285678*G0_1_0_18_1_0 + 0.0812698412698424*G0_1_0_18_1_1 + 0.304761904761899*G0_1_0_19_1_0;
    A[249] = -A[624] - 0.528253968253966*G0_1_0_0_0_0 - 0.528253968253966*G0_1_0_0_0_1 + 0.142222222222219*G0_1_0_1_0_0 - 0.121904761904759*G0_1_0_3_0_0 - 0.111746031746033*G0_1_0_3_0_1 + 0.132063492063494*G0_1_0_4_0_1 - 0.121904761904762*G0_1_0_5_0_0 + 0.660317460317458*G0_1_0_5_0_1 - 0.132063492063492*G0_1_0_6_0_1 + 1.19873015873015*G0_1_0_7_0_0 + 0.416507936507932*G0_1_0_7_0_1 - 0.812698412698404*G0_1_0_8_0_0 + 0.111746031746033*G0_1_0_8_0_1 + 0.24380952380952*G0_1_0_9_0_0 - 0.548571428571426*G0_1_0_9_0_1 - 0.528253968253966*G0_1_0_10_1_0 - 0.528253968253966*G0_1_0_10_1_1 + 0.142222222222219*G0_1_0_11_1_0 - 0.121904761904759*G0_1_0_13_1_0 - 0.111746031746033*G0_1_0_13_1_1 + 0.132063492063494*G0_1_0_14_1_1 - 0.121904761904762*G0_1_0_15_1_0 + 0.660317460317458*G0_1_0_15_1_1 - 0.132063492063492*G0_1_0_16_1_1 + 1.19873015873015*G0_1_0_17_1_0 + 0.416507936507932*G0_1_0_17_1_1 - 0.812698412698404*G0_1_0_18_1_0 + 0.111746031746033*G0_1_0_18_1_1 + 0.24380952380952*G0_1_0_19_1_0 - 0.548571428571426*G0_1_0_19_1_1 + 0.826243386243381*G0_1_1_0_0_0 + 0.826243386243381*G0_1_1_0_0_1 + 0.128677248677247*G0_1_1_1_0_0 - 0.440211640211638*G0_1_1_2_0_1 - 0.294603174603172*G0_1_1_3_0_0 - 0.0406349206349221*G0_1_1_3_0_1 - 0.0507936507936511*G0_1_1_4_0_0 + 0.264126984126984*G0_1_1_4_0_1 - 0.497777777777777*G0_1_1_5_0_0 - 2.05206349206348*G0_1_1_5_0_1 + 0.0507936507936509*G0_1_1_6_0_0 + 1.66603174603174*G0_1_1_6_0_1 - 0.355555555555553*G0_1_1_7_0_0 + 1.19873015873015*G0_1_1_7_0_1 - 0.599365079365076*G0_1_1_8_0_0 + 0.0406349206349221*G0_1_1_8_0_1 + 0.792380952380949*G0_1_1_9_0_0 - 1.46285714285714*G0_1_1_9_0_1 + 0.826243386243381*G0_1_1_10_1_0 + 0.826243386243381*G0_1_1_10_1_1 + 0.128677248677247*G0_1_1_11_1_0 - 0.440211640211638*G0_1_1_12_1_1 - 0.294603174603172*G0_1_1_13_1_0 - 0.0406349206349221*G0_1_1_13_1_1 - 0.0507936507936511*G0_1_1_14_1_0 + 0.264126984126984*G0_1_1_14_1_1 - 0.497777777777777*G0_1_1_15_1_0 - 2.05206349206348*G0_1_1_15_1_1 + 0.0507936507936509*G0_1_1_16_1_0 + 1.66603174603174*G0_1_1_16_1_1 - 0.355555555555553*G0_1_1_17_1_0 + 1.19873015873015*G0_1_1_17_1_1 - 0.599365079365076*G0_1_1_18_1_0 + 0.0406349206349221*G0_1_1_18_1_1 + 0.792380952380949*G0_1_1_19_1_0 - 1.46285714285714*G0_1_1_19_1_1;
    A[375] = 0.0;
    A[52] = 0.0;
    A[767] = A[70] + 0.0244444444444444*G0_0_1_0_0_0 + 0.0244444444444444*G0_0_1_0_0_1 + 0.0244444444444436*G0_0_1_1_0_0 - 0.00285714285714167*G0_0_1_3_0_0 + 0.0474603174603168*G0_0_1_3_0_1 - 0.0258730158730158*G0_0_1_4_0_1 - 0.00285714285714399*G0_0_1_5_0_0 - 0.0503174603174606*G0_0_1_5_0_1 + 0.0258730158730176*G0_0_1_6_0_1 - 0.0244444444444445*G0_0_1_7_0_0 + 0.0230158730158722*G0_0_1_7_0_1 - 0.0244444444444435*G0_0_1_8_0_0 - 0.0474603174603168*G0_0_1_8_0_1 + 0.00571428571428568*G0_0_1_9_0_0 + 0.00285714285714368*G0_0_1_9_0_1 + 0.0244444444444444*G0_0_1_10_1_0 + 0.0244444444444444*G0_0_1_10_1_1 + 0.0244444444444436*G0_0_1_11_1_0 - 0.00285714285714167*G0_0_1_13_1_0 + 0.0474603174603168*G0_0_1_13_1_1 - 0.0258730158730158*G0_0_1_14_1_1 - 0.00285714285714399*G0_0_1_15_1_0 - 0.0503174603174606*G0_0_1_15_1_1 + 0.0258730158730176*G0_0_1_16_1_1 - 0.0244444444444445*G0_0_1_17_1_0 + 0.0230158730158722*G0_0_1_17_1_1 - 0.0244444444444435*G0_0_1_18_1_0 - 0.0474603174603168*G0_0_1_18_1_1 + 0.00571428571428568*G0_0_1_19_1_0 + 0.00285714285714368*G0_0_1_19_1_1 - 0.0244444444444443*G0_1_0_0_0_0 - 0.0244444444444443*G0_1_0_0_0_1 - 0.0244444444444436*G0_1_0_1_0_0 + 0.00285714285714168*G0_1_0_3_0_0 - 0.0474603174603168*G0_1_0_3_0_1 + 0.0258730158730158*G0_1_0_4_0_1 + 0.00285714285714402*G0_1_0_5_0_0 + 0.0503174603174606*G0_1_0_5_0_1 - 0.0258730158730176*G0_1_0_6_0_1 + 0.0244444444444445*G0_1_0_7_0_0 - 0.0230158730158722*G0_1_0_7_0_1 + 0.0244444444444435*G0_1_0_8_0_0 + 0.0474603174603168*G0_1_0_8_0_1 - 0.00571428571428571*G0_1_0_9_0_0 - 0.00285714285714368*G0_1_0_9_0_1 - 0.0244444444444443*G0_1_0_10_1_0 - 0.0244444444444443*G0_1_0_10_1_1 - 0.0244444444444436*G0_1_0_11_1_0 + 0.00285714285714168*G0_1_0_13_1_0 - 0.0474603174603168*G0_1_0_13_1_1 + 0.0258730158730158*G0_1_0_14_1_1 + 0.00285714285714402*G0_1_0_15_1_0 + 0.0503174603174606*G0_1_0_15_1_1 - 0.0258730158730176*G0_1_0_16_1_1 + 0.0244444444444445*G0_1_0_17_1_0 - 0.0230158730158722*G0_1_0_17_1_1 + 0.0244444444444435*G0_1_0_18_1_0 + 0.0474603174603168*G0_1_0_18_1_1 - 0.00571428571428571*G0_1_0_19_1_0 - 0.00285714285714368*G0_1_0_19_1_1;
    A[452] = 0.0;
    A[81] = 0.0;
    A[802] = -A[562] - 0.171005291005291*G0_0_0_0_0_0 - 0.171005291005292*G0_0_0_0_0_1 - 0.245502645502641*G0_0_0_1_0_0 + 0.0541798941798926*G0_0_0_2_0_1 + 0.929523809523809*G0_0_0_3_0_0 + 0.21587301587302*G0_0_0_3_0_1 - 0.41142857142857*G0_0_0_4_0_0 + 0.00253968253968436*G0_0_0_4_0_1 + 1.47809523809523*G0_0_0_5_0_0 + 1.3231746031746*G0_0_0_5_0_1 + 0.411428571428571*G0_0_0_6_0_0 - 1.2063492063492*G0_0_0_6_0_1 - 0.203174603174597*G0_0_0_7_0_0 - 0.0482539682539652*G0_0_0_7_0_1 + 0.61968253968253*G0_0_0_8_0_0 - 0.21587301587302*G0_0_0_8_0_1 - 2.40761904761904*G0_0_0_9_0_0 + 0.045714285714281*G0_0_0_9_0_1 - 0.171005291005291*G0_0_0_10_1_0 - 0.171005291005292*G0_0_0_10_1_1 - 0.245502645502641*G0_0_0_11_1_0 + 0.0541798941798926*G0_0_0_12_1_1 + 0.929523809523809*G0_0_0_13_1_0 + 0.21587301587302*G0_0_0_13_1_1 - 0.41142857142857*G0_0_0_14_1_0 + 0.00253968253968436*G0_0_0_14_1_1 + 1.47809523809523*G0_0_0_15_1_0 + 1.3231746031746*G0_0_0_15_1_1 + 0.411428571428571*G0_0_0_16_1_0 - 1.2063492063492*G0_0_0_16_1_1 - 0.203174603174597*G0_0_0_17_1_0 - 0.0482539682539652*G0_0_0_17_1_1 + 0.61968253968253*G0_0_0_18_1_0 - 0.21587301587302*G0_0_0_18_1_1 - 2.40761904761904*G0_0_0_19_1_0 + 0.045714285714281*G0_0_0_19_1_1 - 0.116825396825393*G0_0_1_0_0_0 - 0.116825396825393*G0_0_1_0_0_1 - 0.116825396825396*G0_0_1_2_0_1 + 0.0939682539682571*G0_0_1_3_0_0 - 0.256507936507935*G0_0_1_4_0_0 - 0.0457142857142838*G0_0_1_4_0_1 - 0.139682539682534*G0_0_1_5_0_0 + 0.116825396825392*G0_0_1_5_0_1 + 0.256507936507935*G0_0_1_6_0_0 + 0.116825396825397*G0_0_1_6_0_1 + 0.210793650793645*G0_0_1_7_0_0 - 0.0457142857142807*G0_0_1_7_0_1 - 0.0939682539682537*G0_0_1_8_0_0 + 0.0457142857142768*G0_0_1_9_0_0 + 0.0914285714285639*G0_0_1_9_0_1 - 0.116825396825393*G0_0_1_10_1_0 - 0.116825396825393*G0_0_1_10_1_1 - 0.116825396825396*G0_0_1_12_1_1 + 0.0939682539682571*G0_0_1_13_1_0 - 0.256507936507935*G0_0_1_14_1_0 - 0.0457142857142838*G0_0_1_14_1_1 - 0.139682539682534*G0_0_1_15_1_0 + 0.116825396825392*G0_0_1_15_1_1 + 0.256507936507935*G0_0_1_16_1_0 + 0.116825396825397*G0_0_1_16_1_1 + 0.210793650793645*G0_0_1_17_1_0 - 0.0457142857142807*G0_0_1_17_1_1 - 0.0939682539682537*G0_0_1_18_1_0 + 0.0457142857142768*G0_0_1_19_1_0 + 0.0914285714285639*G0_0_1_19_1_1;
    A[13] = A[855] - 0.111746031746032*G0_0_1_1_0_0 - 0.0101587301587305*G0_0_1_2_0_1 + 0.0901587301587284*G0_0_1_3_0_0 - 0.143492063492063*G0_0_1_3_0_1 + 0.0215873015873021*G0_0_1_4_0_0 + 0.153650793650793*G0_0_1_4_0_1 + 0.069841269841269*G0_0_1_5_0_0 + 0.0698412698412638*G0_0_1_5_0_1 - 0.021587301587302*G0_0_1_6_0_0 - 0.0596825396825367*G0_0_1_6_0_1 - 0.0698412698412742*G0_0_1_7_0_0 - 0.069841269841269*G0_0_1_7_0_1 + 0.181587301587303*G0_0_1_8_0_0 + 0.143492063492063*G0_0_1_8_0_1 - 0.159999999999998*G0_0_1_9_0_0 - 0.0838095238095233*G0_0_1_9_0_1 - 0.111746031746032*G0_0_1_11_1_0 - 0.0101587301587305*G0_0_1_12_1_1 + 0.0901587301587284*G0_0_1_13_1_0 - 0.143492063492063*G0_0_1_13_1_1 + 0.0215873015873021*G0_0_1_14_1_0 + 0.153650793650793*G0_0_1_14_1_1 + 0.069841269841269*G0_0_1_15_1_0 + 0.0698412698412638*G0_0_1_15_1_1 - 0.021587301587302*G0_0_1_16_1_0 - 0.0596825396825367*G0_0_1_16_1_1 - 0.0698412698412742*G0_0_1_17_1_0 - 0.069841269841269*G0_0_1_17_1_1 + 0.181587301587303*G0_0_1_18_1_0 + 0.143492063492063*G0_0_1_18_1_1 - 0.159999999999998*G0_0_1_19_1_0 - 0.0838095238095233*G0_0_1_19_1_1 + 0.111746031746032*G0_1_0_1_0_0 + 0.0101587301587305*G0_1_0_2_0_1 - 0.0901587301587286*G0_1_0_3_0_0 + 0.143492063492063*G0_1_0_3_0_1 - 0.0215873015873021*G0_1_0_4_0_0 - 0.153650793650793*G0_1_0_4_0_1 - 0.069841269841269*G0_1_0_5_0_0 - 0.0698412698412637*G0_1_0_5_0_1 + 0.021587301587302*G0_1_0_6_0_0 + 0.0596825396825366*G0_1_0_6_0_1 + 0.0698412698412743*G0_1_0_7_0_0 + 0.069841269841269*G0_1_0_7_0_1 - 0.181587301587303*G0_1_0_8_0_0 - 0.143492063492063*G0_1_0_8_0_1 + 0.159999999999998*G0_1_0_9_0_0 + 0.0838095238095234*G0_1_0_9_0_1 + 0.111746031746032*G0_1_0_11_1_0 + 0.0101587301587305*G0_1_0_12_1_1 - 0.0901587301587286*G0_1_0_13_1_0 + 0.143492063492063*G0_1_0_13_1_1 - 0.0215873015873021*G0_1_0_14_1_0 - 0.153650793650793*G0_1_0_14_1_1 - 0.069841269841269*G0_1_0_15_1_0 - 0.0698412698412637*G0_1_0_15_1_1 + 0.021587301587302*G0_1_0_16_1_0 + 0.0596825396825366*G0_1_0_16_1_1 + 0.0698412698412743*G0_1_0_17_1_0 + 0.069841269841269*G0_1_0_17_1_1 - 0.181587301587303*G0_1_0_18_1_0 - 0.143492063492063*G0_1_0_18_1_1 + 0.159999999999998*G0_1_0_19_1_0 + 0.0838095238095234*G0_1_0_19_1_1;
    A[98] = -A[803] + 0.0135449735449745*G0_0_0_0_0_0 + 0.0135449735449744*G0_0_0_0_0_1 - 0.440211640211639*G0_0_0_1_0_0 - 1.35449735449735*G0_0_0_2_0_1 + 1.74730158730158*G0_0_0_3_0_0 - 0.0507936507936532*G0_0_0_3_0_1 - 2.33650793650792*G0_0_0_4_0_0 + 0.375873015873014*G0_0_0_4_0_1 - 0.284444444444444*G0_0_0_5_0_0 - 0.213333333333334*G0_0_0_5_0_1 + 2.33650793650792*G0_0_0_6_0_0 + 1.55428571428571*G0_0_0_6_0_1 + 0.24380952380952*G0_0_0_7_0_0 + 0.172698412698409*G0_0_0_7_0_1 + 0.182857142857145*G0_0_0_8_0_0 + 0.0507936507936529*G0_0_0_8_0_1 - 1.46285714285713*G0_0_0_9_0_0 - 0.548571428571423*G0_0_0_9_0_1 + 0.0135449735449745*G0_0_0_10_1_0 + 0.0135449735449744*G0_0_0_10_1_1 - 0.440211640211639*G0_0_0_11_1_0 - 1.35449735449735*G0_0_0_12_1_1 + 1.74730158730158*G0_0_0_13_1_0 - 0.0507936507936532*G0_0_0_13_1_1 - 2.33650793650792*G0_0_0_14_1_0 + 0.375873015873014*G0_0_0_14_1_1 - 0.284444444444444*G0_0_0_15_1_0 - 0.213333333333334*G0_0_0_15_1_1 + 2.33650793650792*G0_0_0_16_1_0 + 1.55428571428571*G0_0_0_16_1_1 + 0.24380952380952*G0_0_0_17_1_0 + 0.172698412698409*G0_0_0_17_1_1 + 0.182857142857145*G0_0_0_18_1_0 + 0.0507936507936529*G0_0_0_18_1_1 - 1.46285714285713*G0_0_0_19_1_0 - 0.548571428571423*G0_0_0_19_1_1 + 0.142222222222221*G0_0_1_0_0_0 + 0.142222222222221*G0_0_1_0_0_1 - 0.528253968253965*G0_0_1_2_0_1 + 0.132063492063487*G0_0_1_3_0_0 - 0.782222222222218*G0_0_1_4_0_0 - 0.121904761904762*G0_0_1_4_0_1 - 0.924444444444442*G0_0_1_5_0_0 - 0.812698412698407*G0_0_1_5_0_1 + 0.782222222222217*G0_0_1_6_0_0 + 1.19873015873015*G0_0_1_6_0_1 - 0.0101587301587299*G0_0_1_7_0_0 - 0.121904761904765*G0_0_1_7_0_1 - 0.132063492063488*G0_0_1_8_0_0 + 0.792380952380955*G0_0_1_9_0_0 + 0.243809523809527*G0_0_1_9_0_1 + 0.142222222222221*G0_0_1_10_1_0 + 0.142222222222221*G0_0_1_10_1_1 - 0.528253968253965*G0_0_1_12_1_1 + 0.132063492063487*G0_0_1_13_1_0 - 0.782222222222218*G0_0_1_14_1_0 - 0.121904761904762*G0_0_1_14_1_1 - 0.924444444444442*G0_0_1_15_1_0 - 0.812698412698407*G0_0_1_15_1_1 + 0.782222222222217*G0_0_1_16_1_0 + 1.19873015873015*G0_0_1_16_1_1 - 0.0101587301587299*G0_0_1_17_1_0 - 0.121904761904765*G0_0_1_17_1_1 - 0.132063492063488*G0_0_1_18_1_0 + 0.792380952380955*G0_0_1_19_1_0 + 0.243809523809527*G0_0_1_19_1_1;
    A[560] = -A[98] + 0.318306878306877*G0_0_1_0_0_0 + 0.318306878306877*G0_0_1_0_0_1 - 0.115132275132276*G0_0_1_1_0_0 - 0.64338624338624*G0_0_1_2_0_1 - 1.11746031746032*G0_0_1_3_0_0 - 0.640000000000002*G0_0_1_3_0_1 - 1.42222222222222*G0_0_1_4_0_0 - 1.37142857142857*G0_0_1_4_0_1 - 1.32063492063492*G0_0_1_5_0_0 - 1.1479365079365*G0_0_1_5_0_1 + 1.42222222222222*G0_0_1_6_0_0 + 1.47301587301587*G0_0_1_6_0_1 - 0.345396825396825*G0_0_1_7_0_0 - 0.518095238095239*G0_0_1_7_0_1 + 0.142222222222224*G0_0_1_8_0_0 + 0.640000000000003*G0_0_1_8_0_1 + 2.43809523809523*G0_0_1_9_0_0 + 1.88952380952381*G0_0_1_9_0_1 + 0.318306878306877*G0_0_1_10_1_0 + 0.318306878306877*G0_0_1_10_1_1 - 0.115132275132276*G0_0_1_11_1_0 - 0.64338624338624*G0_0_1_12_1_1 - 1.11746031746032*G0_0_1_13_1_0 - 0.640000000000002*G0_0_1_13_1_1 - 1.42222222222222*G0_0_1_14_1_0 - 1.37142857142857*G0_0_1_14_1_1 - 1.32063492063492*G0_0_1_15_1_0 - 1.1479365079365*G0_0_1_15_1_1 + 1.42222222222222*G0_0_1_16_1_0 + 1.47301587301587*G0_0_1_16_1_1 - 0.345396825396825*G0_0_1_17_1_0 - 0.518095238095239*G0_0_1_17_1_1 + 0.142222222222224*G0_0_1_18_1_0 + 0.640000000000003*G0_0_1_18_1_1 + 2.43809523809523*G0_0_1_19_1_0 + 1.88952380952381*G0_0_1_19_1_1 - 0.0135449735449751*G0_1_1_0_0_0 - 0.0135449735449747*G0_1_1_0_0_1 + 1.35449735449736*G0_1_1_1_0_0 + 0.44021164021164*G0_1_1_2_0_1 - 0.375873015873017*G0_1_1_3_0_0 + 2.33650793650794*G0_1_1_3_0_1 + 0.0507936507936506*G0_1_1_4_0_0 - 1.74730158730159*G0_1_1_4_0_1 - 0.172698412698414*G0_1_1_5_0_0 - 0.243809523809523*G0_1_1_5_0_1 - 0.0507936507936508*G0_1_1_6_0_0 - 0.182857142857143*G0_1_1_6_0_1 + 0.213333333333337*G0_1_1_7_0_0 + 0.284444444444446*G0_1_1_7_0_1 - 1.55428571428572*G0_1_1_8_0_0 - 2.33650793650793*G0_1_1_8_0_1 + 0.548571428571431*G0_1_1_9_0_0 + 1.46285714285714*G0_1_1_9_0_1 - 0.0135449735449751*G0_1_1_10_1_0 - 0.0135449735449747*G0_1_1_10_1_1 + 1.35449735449736*G0_1_1_11_1_0 + 0.44021164021164*G0_1_1_12_1_1 - 0.375873015873017*G0_1_1_13_1_0 + 2.33650793650794*G0_1_1_13_1_1 + 0.0507936507936506*G0_1_1_14_1_0 - 1.74730158730159*G0_1_1_14_1_1 - 0.172698412698414*G0_1_1_15_1_0 - 0.243809523809523*G0_1_1_15_1_1 - 0.0507936507936508*G0_1_1_16_1_0 - 0.182857142857143*G0_1_1_16_1_1 + 0.213333333333337*G0_1_1_17_1_0 + 0.284444444444446*G0_1_1_17_1_1 - 1.55428571428572*G0_1_1_18_1_0 - 2.33650793650793*G0_1_1_18_1_1 + 0.548571428571431*G0_1_1_19_1_0 + 1.46285714285714*G0_1_1_19_1_1;
    A[869] = A[560] - 0.595978835978832*G0_0_0_0_0_0 - 0.595978835978833*G0_0_0_0_0_1 - 1.76084656084655*G0_0_0_1_0_0 - 2.77671957671956*G0_0_0_2_0_1 + 6.62349206349203*G0_0_0_3_0_0 - 5.38412698412696*G0_0_0_4_0_0 + 2.25523809523808*G0_0_0_4_0_1 + 3.3726984126984*G0_0_0_5_0_0 + 3.08825396825396*G0_0_0_5_0_1 + 5.38412698412696*G0_0_0_6_0_0 + 0.284444444444441*G0_0_0_6_0_1 + 0.751746031746026*G0_0_0_7_0_0 + 1.03619047619047*G0_0_0_7_0_1 + 1.60507936507936*G0_0_0_8_0_0 - 9.99619047619043*G0_0_0_9_0_0 - 3.29142857142855*G0_0_0_9_0_1 - 0.595978835978832*G0_0_0_10_1_0 - 0.595978835978833*G0_0_0_10_1_1 - 1.76084656084655*G0_0_0_11_1_0 - 2.77671957671956*G0_0_0_12_1_1 + 6.62349206349203*G0_0_0_13_1_0 - 5.38412698412696*G0_0_0_14_1_0 + 2.25523809523808*G0_0_0_14_1_1 + 3.3726984126984*G0_0_0_15_1_0 + 3.08825396825396*G0_0_0_15_1_1 + 5.38412698412696*G0_0_0_16_1_0 + 0.284444444444441*G0_0_0_16_1_1 + 0.751746031746026*G0_0_0_17_1_0 + 1.03619047619047*G0_0_0_17_1_1 + 1.60507936507936*G0_0_0_18_1_0 - 9.99619047619043*G0_0_0_19_1_0 - 3.29142857142855*G0_0_0_19_1_1 + 0.26074074074074*G0_0_1_0_0_0 + 0.26074074074074*G0_0_1_0_0_1 - 1.17502645502645*G0_0_1_1_0_0 - 1.17502645502645*G0_0_1_2_0_1 + 4.51047619047616*G0_0_1_3_0_0 - 0.0914285714285684*G0_0_1_3_0_1 - 0.0914285714285634*G0_0_1_4_0_0 + 4.51047619047617*G0_0_1_4_0_1 - 1.15809523809523*G0_0_1_5_0_0 - 1.09714285714285*G0_0_1_5_0_1 + 0.0914285714285651*G0_0_1_6_0_0 + 2.01142857142856*G0_0_1_6_0_1 - 1.09714285714286*G0_0_1_7_0_0 - 1.15809523809524*G0_0_1_7_0_1 + 2.01142857142856*G0_0_1_8_0_0 + 0.091428571428569*G0_0_1_8_0_1 - 3.35238095238093*G0_0_1_9_0_0 - 3.35238095238093*G0_0_1_9_0_1 + 0.26074074074074*G0_0_1_10_1_0 + 0.26074074074074*G0_0_1_10_1_1 - 1.17502645502645*G0_0_1_11_1_0 - 1.17502645502645*G0_0_1_12_1_1 + 4.51047619047616*G0_0_1_13_1_0 - 0.0914285714285684*G0_0_1_13_1_1 - 0.0914285714285634*G0_0_1_14_1_0 + 4.51047619047617*G0_0_1_14_1_1 - 1.15809523809523*G0_0_1_15_1_0 - 1.09714285714285*G0_0_1_15_1_1 + 0.0914285714285651*G0_0_1_16_1_0 + 2.01142857142856*G0_0_1_16_1_1 - 1.09714285714286*G0_0_1_17_1_0 - 1.15809523809524*G0_0_1_17_1_1 + 2.01142857142856*G0_0_1_18_1_0 + 0.091428571428569*G0_0_1_18_1_1 - 3.35238095238093*G0_0_1_19_1_0 - 3.35238095238093*G0_0_1_19_1_1 - 0.518095238095236*G0_1_0_0_0_0 - 0.518095238095236*G0_1_0_0_0_1 - 0.335238095238093*G0_1_0_1_0_0 - 0.335238095238093*G0_1_0_2_0_1 + 3.98222222222221*G0_1_0_3_0_0 + 0.782222222222221*G0_1_0_3_0_1 + 0.782222222222223*G0_1_0_4_0_0 + 3.98222222222221*G0_1_0_4_0_1 + 1.0768253968254*G0_1_0_5_0_0 + 1.03619047619048*G0_1_0_5_0_1 - 0.782222222222221*G0_1_0_6_0_0 - 0.182857142857146*G0_1_0_6_0_1 + 1.03619047619047*G0_1_0_7_0_0 + 1.0768253968254*G0_1_0_7_0_1 - 0.182857142857145*G0_1_0_8_0_0 - 0.78222222222222*G0_1_0_8_0_1 - 5.05904761904761*G0_1_0_9_0_0 - 5.0590476190476*G0_1_0_9_0_1 - 0.518095238095236*G0_1_0_10_1_0 - 0.518095238095236*G0_1_0_10_1_1 - 0.335238095238093*G0_1_0_11_1_0 - 0.335238095238093*G0_1_0_12_1_1 + 3.98222222222221*G0_1_0_13_1_0 + 0.782222222222221*G0_1_0_13_1_1 + 0.782222222222223*G0_1_0_14_1_0 + 3.98222222222221*G0_1_0_14_1_1 + 1.0768253968254*G0_1_0_15_1_0 + 1.03619047619048*G0_1_0_15_1_1 - 0.782222222222221*G0_1_0_16_1_0 - 0.182857142857146*G0_1_0_16_1_1 + 1.03619047619047*G0_1_0_17_1_0 + 1.0768253968254*G0_1_0_17_1_1 - 0.182857142857145*G0_1_0_18_1_0 - 0.78222222222222*G0_1_0_18_1_1 - 5.05904761904761*G0_1_0_19_1_0 - 5.0590476190476*G0_1_0_19_1_1 - 0.595978835978831*G0_1_1_0_0_0 - 0.595978835978832*G0_1_1_0_0_1 - 2.77671957671957*G0_1_1_1_0_0 - 1.76084656084655*G0_1_1_2_0_1 + 2.25523809523808*G0_1_1_3_0_0 - 5.38412698412697*G0_1_1_3_0_1 + 6.62349206349204*G0_1_1_4_0_1 + 1.03619047619047*G0_1_1_5_0_0 + 0.75174603174603*G0_1_1_5_0_1 + 1.60507936507935*G0_1_1_6_0_1 + 3.08825396825395*G0_1_1_7_0_0 + 3.37269841269839*G0_1_1_7_0_1 + 0.28444444444445*G0_1_1_8_0_0 + 5.38412698412697*G0_1_1_8_0_1 - 3.29142857142855*G0_1_1_9_0_0 - 9.99619047619043*G0_1_1_9_0_1 - 0.595978835978831*G0_1_1_10_1_0 - 0.595978835978832*G0_1_1_10_1_1 - 2.77671957671957*G0_1_1_11_1_0 - 1.76084656084655*G0_1_1_12_1_1 + 2.25523809523808*G0_1_1_13_1_0 - 5.38412698412697*G0_1_1_13_1_1 + 6.62349206349204*G0_1_1_14_1_1 + 1.03619047619047*G0_1_1_15_1_0 + 0.75174603174603*G0_1_1_15_1_1 + 1.60507936507935*G0_1_1_16_1_1 + 3.08825396825395*G0_1_1_17_1_0 + 3.37269841269839*G0_1_1_17_1_1 + 0.28444444444445*G0_1_1_18_1_0 + 5.38412698412697*G0_1_1_18_1_1 - 3.29142857142855*G0_1_1_19_1_0 - 9.99619047619043*G0_1_1_19_1_1;
    A[404] = A[869];
    A[817] = 0.0;
    A[38] = A[36] + 0.126984126984126*G0_0_0_0_0_0 + 0.126984126984126*G0_0_0_0_0_1 + 0.256507936507935*G0_0_0_2_0_1 - 0.218412698412697*G0_0_0_3_0_0 + 0.4215873015873*G0_0_0_4_0_0 - 0.053333333333333*G0_0_0_4_0_1 + 0.294603174603173*G0_0_0_5_0_0 + 0.00253968253968256*G0_0_0_5_0_1 - 0.4215873015873*G0_0_0_6_0_0 - 0.386031746031744*G0_0_0_6_0_1 - 0.345396825396823*G0_0_0_7_0_0 - 0.0533333333333324*G0_0_0_7_0_1 + 0.218412698412696*G0_0_0_8_0_0 - 0.0761904761904755*G0_0_0_9_0_0 + 0.106666666666666*G0_0_0_9_0_1 + 0.126984126984126*G0_0_0_10_1_0 + 0.126984126984126*G0_0_0_10_1_1 + 0.256507936507935*G0_0_0_12_1_1 - 0.218412698412697*G0_0_0_13_1_0 + 0.4215873015873*G0_0_0_14_1_0 - 0.053333333333333*G0_0_0_14_1_1 + 0.294603174603173*G0_0_0_15_1_0 + 0.00253968253968256*G0_0_0_15_1_1 - 0.4215873015873*G0_0_0_16_1_0 - 0.386031746031744*G0_0_0_16_1_1 - 0.345396825396823*G0_0_0_17_1_0 - 0.0533333333333324*G0_0_0_17_1_1 + 0.218412698412696*G0_0_0_18_1_0 - 0.0761904761904755*G0_0_0_19_1_0 + 0.106666666666666*G0_0_0_19_1_1 - 0.12952380952381*G0_0_1_0_0_0 - 0.12952380952381*G0_0_1_0_0_1 + 0.129523809523809*G0_0_1_2_0_1 + 0.129523809523808*G0_0_1_4_0_0 + 0.259047619047618*G0_0_1_5_0_0 + 0.388571428571428*G0_0_1_5_0_1 - 0.129523809523808*G0_0_1_6_0_0 - 0.388571428571427*G0_0_1_6_0_1 + 0.129523809523811*G0_0_1_7_0_0 - 0.259047619047618*G0_0_1_9_0_0 - 0.12952380952381*G0_0_1_10_1_0 - 0.12952380952381*G0_0_1_10_1_1 + 0.129523809523809*G0_0_1_12_1_1 + 0.129523809523808*G0_0_1_14_1_0 + 0.259047619047618*G0_0_1_15_1_0 + 0.388571428571428*G0_0_1_15_1_1 - 0.129523809523808*G0_0_1_16_1_0 - 0.388571428571427*G0_0_1_16_1_1 + 0.129523809523811*G0_0_1_17_1_0 - 0.259047619047618*G0_0_1_19_1_0;
    A[500] = -A[38] - 0.0876190476190475*G0_0_1_0_0_0 - 0.0876190476190473*G0_0_1_0_0_1 + 0.590476190476191*G0_0_1_1_0_0 + 0.285714285714285*G0_0_1_2_0_1 + 0.0622222222222224*G0_0_1_3_0_0 + 1.07936507936508*G0_0_1_3_0_1 + 0.260317460317458*G0_0_1_4_0_0 - 0.452063492063493*G0_0_1_4_0_1 + 0.227301587301586*G0_0_1_5_0_0 + 0.156190476190475*G0_0_1_5_0_1 - 0.260317460317458*G0_0_1_6_0_0 - 0.354285714285712*G0_0_1_6_0_1 + 0.251428571428572*G0_0_1_7_0_0 + 0.322539682539683*G0_0_1_7_0_1 - 0.754285714285715*G0_0_1_8_0_0 - 1.07936507936508*G0_0_1_8_0_1 - 0.289523809523808*G0_0_1_9_0_0 + 0.12952380952381*G0_0_1_9_0_1 - 0.0876190476190475*G0_0_1_10_1_0 - 0.0876190476190473*G0_0_1_10_1_1 + 0.590476190476191*G0_0_1_11_1_0 + 0.285714285714285*G0_0_1_12_1_1 + 0.0622222222222224*G0_0_1_13_1_0 + 1.07936507936508*G0_0_1_13_1_1 + 0.260317460317458*G0_0_1_14_1_0 - 0.452063492063493*G0_0_1_14_1_1 + 0.227301587301586*G0_0_1_15_1_0 + 0.156190476190475*G0_0_1_15_1_1 - 0.260317460317458*G0_0_1_16_1_0 - 0.354285714285712*G0_0_1_16_1_1 + 0.251428571428572*G0_0_1_17_1_0 + 0.322539682539683*G0_0_1_17_1_1 - 0.754285714285715*G0_0_1_18_1_0 - 1.07936507936508*G0_0_1_18_1_1 - 0.289523809523808*G0_0_1_19_1_0 + 0.12952380952381*G0_0_1_19_1_1;
    A[504] = -A[500] + 0.41100529100529*G0_0_0_0_0_0 + 0.41100529100529*G0_0_0_0_0_1 - 0.649735449735448*G0_0_0_1_0_0 - 0.309417989417988*G0_0_0_2_0_1 + 0.139682539682539*G0_0_0_3_0_0 - 0.895238095238094*G0_0_0_3_0_1 - 0.370793650793649*G0_0_0_4_0_0 + 0.323809523809523*G0_0_0_4_0_1 + 0.0965079365079358*G0_0_0_5_0_0 - 0.439365079365079*G0_0_0_5_0_1 + 0.370793650793649*G0_0_0_6_0_0 + 0.337777777777778*G0_0_0_6_0_1 - 0.935873015873013*G0_0_0_7_0_0 - 0.399999999999999*G0_0_0_7_0_1 + 1.17460317460317*G0_0_0_8_0_0 + 0.895238095238094*G0_0_0_8_0_1 - 0.236190476190475*G0_0_0_9_0_0 + 0.0761904761904749*G0_0_0_9_0_1 + 0.41100529100529*G0_0_0_10_1_0 + 0.41100529100529*G0_0_0_10_1_1 - 0.649735449735448*G0_0_0_11_1_0 - 0.309417989417988*G0_0_0_12_1_1 + 0.139682539682539*G0_0_0_13_1_0 - 0.895238095238094*G0_0_0_13_1_1 - 0.370793650793649*G0_0_0_14_1_0 + 0.323809523809523*G0_0_0_14_1_1 + 0.0965079365079358*G0_0_0_15_1_0 - 0.439365079365079*G0_0_0_15_1_1 + 0.370793650793649*G0_0_0_16_1_0 + 0.337777777777778*G0_0_0_16_1_1 - 0.935873015873013*G0_0_0_17_1_0 - 0.399999999999999*G0_0_0_17_1_1 + 1.17460317460317*G0_0_0_18_1_0 + 0.895238095238094*G0_0_0_18_1_1 - 0.236190476190475*G0_0_0_19_1_0 + 0.0761904761904749*G0_0_0_19_1_1 + 0.101587301587301*G0_0_1_0_0_0 + 0.1015873015873*G0_0_1_0_0_1 + 0.101587301587301*G0_0_1_2_0_1 - 0.139682539682539*G0_0_1_3_0_0 + 0.165079365079363*G0_0_1_4_0_0 - 0.0761904761904786*G0_0_1_4_0_1 + 0.0634920634920629*G0_0_1_5_0_0 - 0.101587301587301*G0_0_1_5_0_1 - 0.165079365079363*G0_0_1_6_0_0 - 0.101587301587301*G0_0_1_6_0_1 - 0.241269841269838*G0_0_1_7_0_0 - 0.0761904761904739*G0_0_1_7_0_1 + 0.139682539682534*G0_0_1_8_0_0 + 0.0761904761904757*G0_0_1_9_0_0 + 0.152380952380952*G0_0_1_9_0_1 + 0.101587301587301*G0_0_1_10_1_0 + 0.1015873015873*G0_0_1_10_1_1 + 0.101587301587301*G0_0_1_12_1_1 - 0.139682539682539*G0_0_1_13_1_0 + 0.165079365079363*G0_0_1_14_1_0 - 0.0761904761904786*G0_0_1_14_1_1 + 0.0634920634920629*G0_0_1_15_1_0 - 0.101587301587301*G0_0_1_15_1_1 - 0.165079365079363*G0_0_1_16_1_0 - 0.101587301587301*G0_0_1_16_1_1 - 0.241269841269838*G0_0_1_17_1_0 - 0.0761904761904739*G0_0_1_17_1_1 + 0.139682539682534*G0_0_1_18_1_0 + 0.0761904761904757*G0_0_1_19_1_0 + 0.152380952380952*G0_0_1_19_1_1;
    A[840] = 0.0;
    A[75] = 0.0;
    A[152] = A[617];
    A[875] = 0.0;
    A[486] = 0.0;
    A[189] = A[654];
    A[517] = 0.0;
    A[620] = -A[245] + 0.406349206349206*G0_1_0_0_0_0 + 0.406349206349206*G0_1_0_0_0_1 - 0.406349206349206*G0_1_0_1_0_0 - 1.93015873015872*G0_1_0_2_0_1 + 1.93015873015872*G0_1_0_3_0_0 - 0.0507936507936547*G0_1_0_3_0_1 - 2.64126984126983*G0_1_0_4_0_0 + 0.86349206349206*G0_1_0_4_0_1 - 1.93015873015872*G0_1_0_5_0_0 - 1.98095238095238*G0_1_0_5_0_1 + 2.64126984126983*G0_1_0_6_0_0 + 3.50476190476189*G0_1_0_6_0_1 + 0.0507936507936499*G0_1_0_7_0_1 + 0.0507936507936545*G0_1_0_8_0_1 - 0.914285714285711*G0_1_0_9_0_1 + 0.406349206349206*G0_1_0_10_1_0 + 0.406349206349206*G0_1_0_10_1_1 - 0.406349206349206*G0_1_0_11_1_0 - 1.93015873015872*G0_1_0_12_1_1 + 1.93015873015872*G0_1_0_13_1_0 - 0.0507936507936547*G0_1_0_13_1_1 - 2.64126984126983*G0_1_0_14_1_0 + 0.86349206349206*G0_1_0_14_1_1 - 1.93015873015872*G0_1_0_15_1_0 - 1.98095238095238*G0_1_0_15_1_1 + 2.64126984126983*G0_1_0_16_1_0 + 3.50476190476189*G0_1_0_16_1_1 + 0.0507936507936499*G0_1_0_17_1_1 + 0.0507936507936545*G0_1_0_18_1_1 - 0.914285714285711*G0_1_0_19_1_1 - 0.270899470899469*G0_1_1_0_0_0 - 0.270899470899469*G0_1_1_0_0_1 + 0.372486772486775*G0_1_1_1_0_0 + 0.778835978835977*G0_1_1_2_0_1 + 2.28571428571427*G0_1_1_3_0_0 + 1.62539682539682*G0_1_1_3_0_1 + 2.28571428571428*G0_1_1_4_0_0 + 2.53968253968253*G0_1_1_4_0_1 + 0.457142857142852*G0_1_1_5_0_0 + 0.507936507936501*G0_1_1_5_0_1 - 2.28571428571428*G0_1_1_6_0_0 - 1.01587301587301*G0_1_1_6_0_1 - 0.0507936507936492*G0_1_1_7_0_0 - 0.101587301587298*G0_1_1_7_0_1 - 0.0507936507936571*G0_1_1_8_0_0 - 1.62539682539682*G0_1_1_8_0_1 - 2.74285714285713*G0_1_1_9_0_0 - 2.43809523809523*G0_1_1_9_0_1 - 0.270899470899469*G0_1_1_10_1_0 - 0.270899470899469*G0_1_1_10_1_1 + 0.372486772486775*G0_1_1_11_1_0 + 0.778835978835977*G0_1_1_12_1_1 + 2.28571428571427*G0_1_1_13_1_0 + 1.62539682539682*G0_1_1_13_1_1 + 2.28571428571428*G0_1_1_14_1_0 + 2.53968253968253*G0_1_1_14_1_1 + 0.457142857142852*G0_1_1_15_1_0 + 0.507936507936501*G0_1_1_15_1_1 - 2.28571428571428*G0_1_1_16_1_0 - 1.01587301587301*G0_1_1_16_1_1 - 0.0507936507936492*G0_1_1_17_1_0 - 0.101587301587298*G0_1_1_17_1_1 - 0.0507936507936571*G0_1_1_18_1_0 - 1.62539682539682*G0_1_1_18_1_1 - 2.74285714285713*G0_1_1_19_1_0 - 2.43809523809523*G0_1_1_19_1_1;
    A[544] = 0.0;
    A[508] = A[43];
    A[639] = 0.0;
    A[535] = A[70];
    A[666] = 0.0;
    A[697] = 0.0;
    A[308] = -A[305] - 0.116825396825395*G0_0_1_0_0_0 - 0.116825396825395*G0_0_1_0_0_1 - 0.116825396825392*G0_0_1_1_0_0 - 0.0457142857142883*G0_0_1_3_0_0 - 0.25650793650793*G0_0_1_3_0_1 + 0.0939682539682496*G0_0_1_4_0_1 - 0.0457142857142838*G0_0_1_5_0_0 + 0.210793650793647*G0_0_1_5_0_1 - 0.0939682539682541*G0_0_1_6_0_1 + 0.116825396825398*G0_0_1_7_0_0 - 0.139682539682535*G0_0_1_7_0_1 + 0.11682539682539*G0_0_1_8_0_0 + 0.25650793650793*G0_0_1_8_0_1 + 0.0914285714285721*G0_0_1_9_0_0 + 0.045714285714284*G0_0_1_9_0_1 - 0.116825396825395*G0_0_1_10_1_0 - 0.116825396825395*G0_0_1_10_1_1 - 0.116825396825392*G0_0_1_11_1_0 - 0.0457142857142883*G0_0_1_13_1_0 - 0.25650793650793*G0_0_1_13_1_1 + 0.0939682539682496*G0_0_1_14_1_1 - 0.0457142857142838*G0_0_1_15_1_0 + 0.210793650793647*G0_0_1_15_1_1 - 0.0939682539682541*G0_0_1_16_1_1 + 0.116825396825398*G0_0_1_17_1_0 - 0.139682539682535*G0_0_1_17_1_1 + 0.11682539682539*G0_0_1_18_1_0 + 0.25650793650793*G0_0_1_18_1_1 + 0.0914285714285721*G0_0_1_19_1_0 + 0.045714285714284*G0_0_1_19_1_1 - 0.171005291005289*G0_1_1_0_0_0 - 0.171005291005288*G0_1_1_0_0_1 + 0.0541798941798979*G0_1_1_1_0_0 - 0.245502645502643*G0_1_1_2_0_1 + 0.00253968253968019*G0_1_1_3_0_0 - 0.411428571428564*G0_1_1_3_0_1 + 0.215873015873017*G0_1_1_4_0_0 + 0.929523809523802*G0_1_1_4_0_1 - 0.0482539682539697*G0_1_1_5_0_0 - 0.203174603174606*G0_1_1_5_0_1 - 0.215873015873017*G0_1_1_6_0_0 + 0.619682539682538*G0_1_1_6_0_1 + 1.3231746031746*G0_1_1_7_0_0 + 1.47809523809523*G0_1_1_7_0_1 - 1.2063492063492*G0_1_1_8_0_0 + 0.411428571428564*G0_1_1_8_0_1 + 0.0457142857142894*G0_1_1_9_0_0 - 2.40761904761903*G0_1_1_9_0_1 - 0.171005291005289*G0_1_1_10_1_0 - 0.171005291005288*G0_1_1_10_1_1 + 0.0541798941798979*G0_1_1_11_1_0 - 0.245502645502643*G0_1_1_12_1_1 + 0.00253968253968019*G0_1_1_13_1_0 - 0.411428571428564*G0_1_1_13_1_1 + 0.215873015873017*G0_1_1_14_1_0 + 0.929523809523802*G0_1_1_14_1_1 - 0.0482539682539697*G0_1_1_15_1_0 - 0.203174603174606*G0_1_1_15_1_1 - 0.215873015873017*G0_1_1_16_1_0 + 0.619682539682538*G0_1_1_16_1_1 + 1.3231746031746*G0_1_1_17_1_0 + 1.47809523809523*G0_1_1_17_1_1 - 1.2063492063492*G0_1_1_18_1_0 + 0.411428571428564*G0_1_1_18_1_1 + 0.0457142857142894*G0_1_1_19_1_0 - 2.40761904761903*G0_1_1_19_1_1;
    A[306] = A[308] - 1.00571428571428*G0_0_0_0_0_0 - 1.00571428571428*G0_0_0_0_0_1 + 0.416507936507932*G0_0_0_1_0_0 - 0.0203174603174621*G0_0_0_2_0_1 - 1.06666666666666*G0_0_0_3_0_0 - 0.421587301587302*G0_0_0_3_0_1 + 0.030476190476186*G0_0_0_4_0_0 - 0.177777777777778*G0_0_0_4_0_1 - 1.31047619047618*G0_0_0_5_0_0 + 0.634920634920631*G0_0_0_5_0_1 - 0.0304761904761865*G0_0_0_6_0_0 + 0.391111111111111*G0_0_0_6_0_1 + 2.3974603174603*G0_0_0_7_0_0 + 0.452063492063489*G0_0_0_7_0_1 - 1.80825396825396*G0_0_0_8_0_0 + 0.421587301587302*G0_0_0_8_0_1 + 2.37714285714284*G0_0_0_9_0_0 - 0.274285714285712*G0_0_0_9_0_1 - 1.00571428571428*G0_0_0_10_1_0 - 1.00571428571428*G0_0_0_10_1_1 + 0.416507936507932*G0_0_0_11_1_0 - 0.0203174603174621*G0_0_0_12_1_1 - 1.06666666666666*G0_0_0_13_1_0 - 0.421587301587302*G0_0_0_13_1_1 + 0.030476190476186*G0_0_0_14_1_0 - 0.177777777777778*G0_0_0_14_1_1 - 1.31047619047618*G0_0_0_15_1_0 + 0.634920634920631*G0_0_0_15_1_1 - 0.0304761904761865*G0_0_0_16_1_0 + 0.391111111111111*G0_0_0_16_1_1 + 2.3974603174603*G0_0_0_17_1_0 + 0.452063492063489*G0_0_0_17_1_1 - 1.80825396825396*G0_0_0_18_1_0 + 0.421587301587302*G0_0_0_18_1_1 + 2.37714285714284*G0_0_0_19_1_0 - 0.274285714285712*G0_0_0_19_1_1 + 1.44761904761904*G0_0_1_0_0_0 + 1.44761904761904*G0_0_1_0_0_1 - 0.172698412698413*G0_0_1_1_0_0 - 0.147301587301589*G0_0_1_2_0_1 - 0.670476190476183*G0_0_1_3_0_0 - 0.172698412698413*G0_0_1_3_0_1 + 0.106666666666663*G0_0_1_4_0_0 - 0.416507936507932*G0_0_1_4_0_1 - 0.15238095238095*G0_0_1_5_0_0 - 2.46349206349206*G0_0_1_5_0_1 - 0.106666666666664*G0_0_1_6_0_0 + 1.1631746031746*G0_0_1_6_0_1 - 2.26031746031745*G0_0_1_7_0_0 + 0.0507936507936516*G0_0_1_7_0_1 + 0.985396825396822*G0_0_1_8_0_0 + 0.172698412698414*G0_0_1_8_0_1 + 0.822857142857133*G0_0_1_9_0_0 + 0.36571428571428*G0_0_1_9_0_1 + 1.44761904761904*G0_0_1_10_1_0 + 1.44761904761904*G0_0_1_10_1_1 - 0.172698412698413*G0_0_1_11_1_0 - 0.147301587301589*G0_0_1_12_1_1 - 0.670476190476183*G0_0_1_13_1_0 - 0.172698412698413*G0_0_1_13_1_1 + 0.106666666666663*G0_0_1_14_1_0 - 0.416507936507932*G0_0_1_14_1_1 - 0.15238095238095*G0_0_1_15_1_0 - 2.46349206349206*G0_0_1_15_1_1 - 0.106666666666664*G0_0_1_16_1_0 + 1.1631746031746*G0_0_1_16_1_1 - 2.26031746031745*G0_0_1_17_1_0 + 0.0507936507936516*G0_0_1_17_1_1 + 0.985396825396822*G0_0_1_18_1_0 + 0.172698412698414*G0_0_1_18_1_1 + 0.822857142857133*G0_0_1_19_1_0 + 0.36571428571428*G0_0_1_19_1_1 + 0.370793650793649*G0_1_0_0_0_0 + 0.370793650793649*G0_1_0_0_0_1 - 0.193015873015873*G0_1_0_1_0_0 + 0.0457142857142872*G0_1_0_2_0_1 - 0.452063492063491*G0_1_0_3_0_0 - 0.396190476190477*G0_1_0_3_0_1 + 0.0203174603174631*G0_1_0_4_0_0 - 0.274285714285711*G0_1_0_4_0_1 + 0.452063492063493*G0_1_0_5_0_0 - 0.299682539682536*G0_1_0_5_0_1 - 0.0203174603174632*G0_1_0_6_0_0 - 0.1168253968254*G0_1_0_6_0_1 - 0.599365079365077*G0_1_0_7_0_0 + 0.152380952380952*G0_1_0_7_0_1 + 0.421587301587302*G0_1_0_8_0_0 + 0.396190476190477*G0_1_0_8_0_1 + 0.12190476190476*G0_1_0_9_0_1 + 0.370793650793649*G0_1_0_10_1_0 + 0.370793650793649*G0_1_0_10_1_1 - 0.193015873015873*G0_1_0_11_1_0 + 0.0457142857142872*G0_1_0_12_1_1 - 0.452063492063491*G0_1_0_13_1_0 - 0.396190476190477*G0_1_0_13_1_1 + 0.0203174603174631*G0_1_0_14_1_0 - 0.274285714285711*G0_1_0_14_1_1 + 0.452063492063493*G0_1_0_15_1_0 - 0.299682539682536*G0_1_0_15_1_1 - 0.0203174603174632*G0_1_0_16_1_0 - 0.1168253968254*G0_1_0_16_1_1 - 0.599365079365077*G0_1_0_17_1_0 + 0.152380952380952*G0_1_0_17_1_1 + 0.421587301587302*G0_1_0_18_1_0 + 0.396190476190477*G0_1_0_18_1_1 + 0.12190476190476*G0_1_0_19_1_1 - 0.223492063492061*G0_1_1_0_0_0 - 0.223492063492061*G0_1_1_0_0_1 + 0.264126984126982*G0_1_1_2_0_1 - 0.446984126984122*G0_1_1_3_0_0 - 0.142222222222222*G0_1_1_4_0_0 - 0.853333333333327*G0_1_1_4_0_1 + 0.0812698412698451*G0_1_1_5_0_0 + 0.711111111111107*G0_1_1_5_0_1 + 0.142222222222222*G0_1_1_6_0_0 - 0.751746031746029*G0_1_1_6_0_1 - 0.223492063492065*G0_1_1_7_0_0 - 0.853333333333327*G0_1_1_7_0_1 + 0.446984126984128*G0_1_1_8_0_0 + 0.365714285714277*G0_1_1_9_0_0 + 1.70666666666665*G0_1_1_9_0_1 - 0.223492063492061*G0_1_1_10_1_0 - 0.223492063492061*G0_1_1_10_1_1 + 0.264126984126982*G0_1_1_12_1_1 - 0.446984126984122*G0_1_1_13_1_0 - 0.142222222222222*G0_1_1_14_1_0 - 0.853333333333327*G0_1_1_14_1_1 + 0.0812698412698451*G0_1_1_15_1_0 + 0.711111111111107*G0_1_1_15_1_1 + 0.142222222222222*G0_1_1_16_1_0 - 0.751746031746029*G0_1_1_16_1_1 - 0.223492063492065*G0_1_1_17_1_0 - 0.853333333333327*G0_1_1_17_1_1 + 0.446984126984128*G0_1_1_18_1_0 + 0.365714285714277*G0_1_1_19_1_0 + 1.70666666666665*G0_1_1_19_1_1;
    A[264] = 0.0;
    A[335] = -A[803] + 0.142222222222221*G0_0_1_0_0_0 + 0.142222222222221*G0_0_1_0_0_1 - 0.528253968253972*G0_0_1_1_0_0 - 0.121904761904762*G0_0_1_3_0_0 - 0.782222222222228*G0_0_1_3_0_1 + 0.132063492063496*G0_0_1_4_0_1 - 0.121904761904762*G0_0_1_5_0_0 - 0.010158730158728*G0_0_1_5_0_1 - 0.132063492063492*G0_0_1_6_0_1 - 0.812698412698411*G0_0_1_7_0_0 - 0.924444444444444*G0_0_1_7_0_1 + 1.19873015873016*G0_0_1_8_0_0 + 0.782222222222229*G0_0_1_8_0_1 + 0.243809523809524*G0_0_1_9_0_0 + 0.792380952380949*G0_0_1_9_0_1 + 0.142222222222221*G0_0_1_10_1_0 + 0.142222222222221*G0_0_1_10_1_1 - 0.528253968253972*G0_0_1_11_1_0 - 0.121904761904762*G0_0_1_13_1_0 - 0.782222222222228*G0_0_1_13_1_1 + 0.132063492063496*G0_0_1_14_1_1 - 0.121904761904762*G0_0_1_15_1_0 - 0.010158730158728*G0_0_1_15_1_1 - 0.132063492063492*G0_0_1_16_1_1 - 0.812698412698411*G0_0_1_17_1_0 - 0.924444444444444*G0_0_1_17_1_1 + 1.19873015873016*G0_0_1_18_1_0 + 0.782222222222229*G0_0_1_18_1_1 + 0.243809523809524*G0_0_1_19_1_0 + 0.792380952380949*G0_0_1_19_1_1 + 0.0135449735449753*G0_1_1_0_0_0 + 0.0135449735449749*G0_1_1_0_0_1 - 1.35449735449736*G0_1_1_1_0_0 - 0.440211640211639*G0_1_1_2_0_1 + 0.375873015873015*G0_1_1_3_0_0 - 2.33650793650794*G0_1_1_3_0_1 - 0.0507936507936489*G0_1_1_4_0_0 + 1.74730158730159*G0_1_1_4_0_1 + 0.172698412698414*G0_1_1_5_0_0 + 0.243809523809522*G0_1_1_5_0_1 + 0.0507936507936492*G0_1_1_6_0_0 + 0.182857142857143*G0_1_1_6_0_1 - 0.213333333333337*G0_1_1_7_0_0 - 0.284444444444445*G0_1_1_7_0_1 + 1.55428571428572*G0_1_1_8_0_0 + 2.33650793650794*G0_1_1_8_0_1 - 0.548571428571428*G0_1_1_9_0_0 - 1.46285714285714*G0_1_1_9_0_1 + 0.0135449735449753*G0_1_1_10_1_0 + 0.0135449735449749*G0_1_1_10_1_1 - 1.35449735449736*G0_1_1_11_1_0 - 0.440211640211639*G0_1_1_12_1_1 + 0.375873015873015*G0_1_1_13_1_0 - 2.33650793650794*G0_1_1_13_1_1 - 0.0507936507936489*G0_1_1_14_1_0 + 1.74730158730159*G0_1_1_14_1_1 + 0.172698412698414*G0_1_1_15_1_0 + 0.243809523809522*G0_1_1_15_1_1 + 0.0507936507936492*G0_1_1_16_1_0 + 0.182857142857143*G0_1_1_16_1_1 - 0.213333333333337*G0_1_1_17_1_0 - 0.284444444444445*G0_1_1_17_1_1 + 1.55428571428572*G0_1_1_18_1_0 + 2.33650793650794*G0_1_1_18_1_1 - 0.548571428571428*G0_1_1_19_1_0 - 1.46285714285714*G0_1_1_19_1_1;
    A[291] = 0.0;
    A[438] = 0.0;
    A[318] = 0.0;
    A[461] = 0.0;
    A[357] = 0.0;
    A[721] = 0.0;
    A[388] = 0.0;
    A[31] = -0.213888888888888*G0_0_0_0_0_0 - 0.213888888888888*G0_0_0_0_0_1 + 1.2329365079365*G0_0_0_1_0_0 + 0.213888888888888*G0_0_0_2_0_1 + 0.30674603174603*G0_0_0_3_0_0 + 2.19722222222221*G0_0_0_3_0_1 + 0.0115079365079359*G0_0_0_4_0_0 - 0.85992063492063*G0_0_0_4_0_1 - 0.0115079365079374*G0_0_0_5_0_0 - 0.0115079365079359*G0_0_0_6_0_0 + 0.871428571428567*G0_0_0_7_0_0 + 0.85992063492063*G0_0_0_7_0_1 - 1.89047619047618*G0_0_0_8_0_0 - 2.19722222222221*G0_0_0_8_0_1 - 0.295238095238092*G0_0_0_9_0_0 - 0.213888888888888*G0_0_0_10_1_0 - 0.213888888888888*G0_0_0_10_1_1 + 1.2329365079365*G0_0_0_11_1_0 + 0.213888888888888*G0_0_0_12_1_1 + 0.30674603174603*G0_0_0_13_1_0 + 2.19722222222221*G0_0_0_13_1_1 + 0.0115079365079359*G0_0_0_14_1_0 - 0.85992063492063*G0_0_0_14_1_1 - 0.0115079365079374*G0_0_0_15_1_0 - 0.0115079365079359*G0_0_0_16_1_0 + 0.871428571428567*G0_0_0_17_1_0 + 0.85992063492063*G0_0_0_17_1_1 - 1.89047619047618*G0_0_0_18_1_0 - 2.19722222222221*G0_0_0_18_1_1 - 0.295238095238092*G0_0_0_19_1_0;
    A[130] = A[769] - 0.0304761904761934*G0_0_1_0_0_0 - 0.0304761904761933*G0_0_1_0_0_1 + 0.133333333333338*G0_0_1_1_0_0 + 0.0304761904761898*G0_0_1_2_0_1 - 0.276190476190473*G0_0_1_3_0_0 + 0.0380952380952461*G0_0_1_3_0_1 + 0.0780952380952355*G0_0_1_4_0_0 - 0.133333333333335*G0_0_1_4_0_1 - 0.215238095238094*G0_0_1_5_0_0 - 0.137142857142854*G0_0_1_5_0_1 - 0.0780952380952355*G0_0_1_6_0_0 + 0.137142857142857*G0_0_1_6_0_1 + 0.211428571428581*G0_0_1_7_0_0 + 0.13333333333334*G0_0_1_7_0_1 - 0.314285714285725*G0_0_1_8_0_0 - 0.0380952380952459*G0_0_1_8_0_1 + 0.491428571428566*G0_0_1_9_0_0 - 0.0304761904761934*G0_0_1_10_1_0 - 0.0304761904761933*G0_0_1_10_1_1 + 0.133333333333338*G0_0_1_11_1_0 + 0.0304761904761898*G0_0_1_12_1_1 - 0.276190476190473*G0_0_1_13_1_0 + 0.0380952380952461*G0_0_1_13_1_1 + 0.0780952380952355*G0_0_1_14_1_0 - 0.133333333333335*G0_0_1_14_1_1 - 0.215238095238094*G0_0_1_15_1_0 - 0.137142857142854*G0_0_1_15_1_1 - 0.0780952380952355*G0_0_1_16_1_0 + 0.137142857142857*G0_0_1_16_1_1 + 0.211428571428581*G0_0_1_17_1_0 + 0.13333333333334*G0_0_1_17_1_1 - 0.314285714285725*G0_0_1_18_1_0 - 0.0380952380952459*G0_0_1_18_1_1 + 0.491428571428566*G0_0_1_19_1_0 + 0.0304761904761933*G0_1_0_0_0_0 + 0.0304761904761931*G0_1_0_0_0_1 - 0.133333333333338*G0_1_0_1_0_0 - 0.0304761904761898*G0_1_0_2_0_1 + 0.276190476190473*G0_1_0_3_0_0 - 0.0380952380952455*G0_1_0_3_0_1 - 0.0780952380952354*G0_1_0_4_0_0 + 0.133333333333334*G0_1_0_4_0_1 + 0.215238095238094*G0_1_0_5_0_0 + 0.137142857142854*G0_1_0_5_0_1 + 0.0780952380952355*G0_1_0_6_0_0 - 0.137142857142857*G0_1_0_6_0_1 - 0.211428571428581*G0_1_0_7_0_0 - 0.13333333333334*G0_1_0_7_0_1 + 0.314285714285724*G0_1_0_8_0_0 + 0.0380952380952453*G0_1_0_8_0_1 - 0.491428571428567*G0_1_0_9_0_0 + 0.0304761904761933*G0_1_0_10_1_0 + 0.0304761904761931*G0_1_0_10_1_1 - 0.133333333333338*G0_1_0_11_1_0 - 0.0304761904761898*G0_1_0_12_1_1 + 0.276190476190473*G0_1_0_13_1_0 - 0.0380952380952455*G0_1_0_13_1_1 - 0.0780952380952354*G0_1_0_14_1_0 + 0.133333333333334*G0_1_0_14_1_1 + 0.215238095238094*G0_1_0_15_1_0 + 0.137142857142854*G0_1_0_15_1_1 + 0.0780952380952355*G0_1_0_16_1_0 - 0.137142857142857*G0_1_0_16_1_1 - 0.211428571428581*G0_1_0_17_1_0 - 0.13333333333334*G0_1_0_17_1_1 + 0.314285714285724*G0_1_0_18_1_0 + 0.0380952380952453*G0_1_0_18_1_1 - 0.491428571428567*G0_1_0_19_1_0;
    A[161] = -A[716] + 0.142222222222221*G0_1_0_0_0_0 + 0.142222222222221*G0_1_0_0_0_1 - 0.528253968253972*G0_1_0_1_0_0 - 0.121904761904762*G0_1_0_3_0_0 - 0.782222222222228*G0_1_0_3_0_1 + 0.132063492063496*G0_1_0_4_0_1 - 0.121904761904762*G0_1_0_5_0_0 - 0.0101587301587281*G0_1_0_5_0_1 - 0.132063492063492*G0_1_0_6_0_1 - 0.812698412698411*G0_1_0_7_0_0 - 0.924444444444444*G0_1_0_7_0_1 + 1.19873015873016*G0_1_0_8_0_0 + 0.782222222222229*G0_1_0_8_0_1 + 0.243809523809524*G0_1_0_9_0_0 + 0.792380952380949*G0_1_0_9_0_1 + 0.142222222222221*G0_1_0_10_1_0 + 0.142222222222221*G0_1_0_10_1_1 - 0.528253968253972*G0_1_0_11_1_0 - 0.121904761904762*G0_1_0_13_1_0 - 0.782222222222228*G0_1_0_13_1_1 + 0.132063492063496*G0_1_0_14_1_1 - 0.121904761904762*G0_1_0_15_1_0 - 0.0101587301587281*G0_1_0_15_1_1 - 0.132063492063492*G0_1_0_16_1_1 - 0.812698412698411*G0_1_0_17_1_0 - 0.924444444444444*G0_1_0_17_1_1 + 1.19873015873016*G0_1_0_18_1_0 + 0.782222222222229*G0_1_0_18_1_1 + 0.243809523809524*G0_1_0_19_1_0 + 0.792380952380949*G0_1_0_19_1_1 + 0.0135449735449752*G0_1_1_0_0_0 + 0.0135449735449749*G0_1_1_0_0_1 - 1.35449735449736*G0_1_1_1_0_0 - 0.440211640211639*G0_1_1_2_0_1 + 0.375873015873015*G0_1_1_3_0_0 - 2.33650793650794*G0_1_1_3_0_1 - 0.050793650793649*G0_1_1_4_0_0 + 1.74730158730159*G0_1_1_4_0_1 + 0.172698412698414*G0_1_1_5_0_0 + 0.243809523809522*G0_1_1_5_0_1 + 0.0507936507936492*G0_1_1_6_0_0 + 0.182857142857143*G0_1_1_6_0_1 - 0.213333333333336*G0_1_1_7_0_0 - 0.284444444444445*G0_1_1_7_0_1 + 1.55428571428572*G0_1_1_8_0_0 + 2.33650793650794*G0_1_1_8_0_1 - 0.548571428571428*G0_1_1_9_0_0 - 1.46285714285714*G0_1_1_9_0_1 + 0.0135449735449752*G0_1_1_10_1_0 + 0.0135449735449749*G0_1_1_10_1_1 - 1.35449735449736*G0_1_1_11_1_0 - 0.440211640211639*G0_1_1_12_1_1 + 0.375873015873015*G0_1_1_13_1_0 - 2.33650793650794*G0_1_1_13_1_1 - 0.050793650793649*G0_1_1_14_1_0 + 1.74730158730159*G0_1_1_14_1_1 + 0.172698412698414*G0_1_1_15_1_0 + 0.243809523809522*G0_1_1_15_1_1 + 0.0507936507936492*G0_1_1_16_1_0 + 0.182857142857143*G0_1_1_16_1_1 - 0.213333333333336*G0_1_1_17_1_0 - 0.284444444444445*G0_1_1_17_1_1 + 1.55428571428572*G0_1_1_18_1_0 + 2.33650793650794*G0_1_1_18_1_1 - 0.548571428571428*G0_1_1_19_1_0 - 1.46285714285714*G0_1_1_19_1_1;
    A[113] = 0.0;
    A[180] = A[645];
    A[136] = 0.0;
    A[171] = 0.0;
    A[499] = A[34];
    A[206] = 0.0;
    A[648] = -A[656] + 0.826243386243381*G0_0_0_0_0_0 + 0.826243386243381*G0_0_0_0_0_1 - 0.440211640211637*G0_0_0_1_0_0 + 0.128677248677249*G0_0_0_2_0_1 + 0.264126984126979*G0_0_0_3_0_0 - 0.0507936507936511*G0_0_0_3_0_1 - 0.040634920634919*G0_0_0_4_0_0 - 0.294603174603175*G0_0_0_4_0_1 + 1.19873015873015*G0_0_0_5_0_0 - 0.355555555555556*G0_0_0_5_0_1 + 0.0406349206349191*G0_0_0_6_0_0 - 0.599365079365075*G0_0_0_6_0_1 - 2.05206349206348*G0_0_0_7_0_0 - 0.497777777777778*G0_0_0_7_0_1 + 1.66603174603174*G0_0_0_8_0_0 + 0.0507936507936508*G0_0_0_8_0_1 - 1.46285714285713*G0_0_0_9_0_0 + 0.792380952380954*G0_0_0_9_0_1 + 0.826243386243381*G0_0_0_10_1_0 + 0.826243386243381*G0_0_0_10_1_1 - 0.440211640211637*G0_0_0_11_1_0 + 0.128677248677249*G0_0_0_12_1_1 + 0.264126984126979*G0_0_0_13_1_0 - 0.0507936507936511*G0_0_0_13_1_1 - 0.040634920634919*G0_0_0_14_1_0 - 0.294603174603175*G0_0_0_14_1_1 + 1.19873015873015*G0_0_0_15_1_0 - 0.355555555555556*G0_0_0_15_1_1 + 0.0406349206349191*G0_0_0_16_1_0 - 0.599365079365075*G0_0_0_16_1_1 - 2.05206349206348*G0_0_0_17_1_0 - 0.497777777777778*G0_0_0_17_1_1 + 1.66603174603174*G0_0_0_18_1_0 + 0.0507936507936508*G0_0_0_18_1_1 - 1.46285714285713*G0_0_0_19_1_0 + 0.792380952380954*G0_0_0_19_1_1 - 0.528253968253971*G0_1_0_0_0_0 - 0.528253968253971*G0_1_0_0_0_1 + 0.142222222222221*G0_1_0_2_0_1 + 0.13206349206349*G0_1_0_3_0_0 - 0.111746031746033*G0_1_0_4_0_0 - 0.121904761904763*G0_1_0_4_0_1 + 0.41650793650793*G0_1_0_5_0_0 + 1.19873015873016*G0_1_0_5_0_1 + 0.111746031746033*G0_1_0_6_0_0 - 0.81269841269841*G0_1_0_6_0_1 + 0.660317460317464*G0_1_0_7_0_0 - 0.121904761904764*G0_1_0_7_0_1 - 0.132063492063494*G0_1_0_8_0_0 - 0.54857142857142*G0_1_0_9_0_0 + 0.243809523809528*G0_1_0_9_0_1 - 0.528253968253971*G0_1_0_10_1_0 - 0.528253968253971*G0_1_0_10_1_1 + 0.142222222222221*G0_1_0_12_1_1 + 0.13206349206349*G0_1_0_13_1_0 - 0.111746031746033*G0_1_0_14_1_0 - 0.121904761904763*G0_1_0_14_1_1 + 0.41650793650793*G0_1_0_15_1_0 + 1.19873015873016*G0_1_0_15_1_1 + 0.111746031746033*G0_1_0_16_1_0 - 0.81269841269841*G0_1_0_16_1_1 + 0.660317460317464*G0_1_0_17_1_0 - 0.121904761904764*G0_1_0_17_1_1 - 0.132063492063494*G0_1_0_18_1_0 - 0.54857142857142*G0_1_0_19_1_0 + 0.243809523809528*G0_1_0_19_1_1;
    A[96] = A[648] - 0.0203174603174619*G0_0_1_0_0_0 - 0.0203174603174618*G0_0_1_0_0_1 + 0.02031746031746*G0_0_1_1_0_0 + 0.0203174603174585*G0_0_1_2_0_1 - 0.0203174603174596*G0_0_1_3_0_0 + 0.0711111111111095*G0_0_1_3_0_1 - 0.0812698412698433*G0_0_1_4_0_0 - 0.172698412698411*G0_0_1_4_0_1 + 0.0203174603174572*G0_0_1_5_0_0 + 0.0914285714285715*G0_0_1_5_0_1 + 0.0812698412698434*G0_0_1_6_0_0 - 0.0914285714285684*G0_0_1_6_0_1 - 0.060952380952377*G0_0_1_7_0_0 - 0.132063492063491*G0_0_1_7_0_1 + 0.060952380952379*G0_0_1_8_0_0 - 0.0711111111111097*G0_0_1_8_0_1 + 0.304761904761903*G0_0_1_9_0_1 - 0.0203174603174619*G0_0_1_10_1_0 - 0.0203174603174618*G0_0_1_10_1_1 + 0.02031746031746*G0_0_1_11_1_0 + 0.0203174603174585*G0_0_1_12_1_1 - 0.0203174603174596*G0_0_1_13_1_0 + 0.0711111111111095*G0_0_1_13_1_1 - 0.0812698412698433*G0_0_1_14_1_0 - 0.172698412698411*G0_0_1_14_1_1 + 0.0203174603174572*G0_0_1_15_1_0 + 0.0914285714285715*G0_0_1_15_1_1 + 0.0812698412698434*G0_0_1_16_1_0 - 0.0914285714285684*G0_0_1_16_1_1 - 0.060952380952377*G0_0_1_17_1_0 - 0.132063492063491*G0_0_1_17_1_1 + 0.060952380952379*G0_0_1_18_1_0 - 0.0711111111111097*G0_0_1_18_1_1 + 0.304761904761903*G0_0_1_19_1_1 + 0.0203174603174619*G0_1_0_0_0_0 + 0.0203174603174619*G0_1_0_0_0_1 - 0.02031746031746*G0_1_0_1_0_0 - 0.0203174603174585*G0_1_0_2_0_1 + 0.0203174603174595*G0_1_0_3_0_0 - 0.0711111111111095*G0_1_0_3_0_1 + 0.0812698412698434*G0_1_0_4_0_0 + 0.172698412698411*G0_1_0_4_0_1 - 0.0203174603174571*G0_1_0_5_0_0 - 0.0914285714285716*G0_1_0_5_0_1 - 0.0812698412698434*G0_1_0_6_0_0 + 0.0914285714285683*G0_1_0_6_0_1 + 0.060952380952377*G0_1_0_7_0_0 + 0.132063492063491*G0_1_0_7_0_1 - 0.0609523809523789*G0_1_0_8_0_0 + 0.0711111111111097*G0_1_0_8_0_1 - 0.304761904761903*G0_1_0_9_0_1 + 0.0203174603174619*G0_1_0_10_1_0 + 0.0203174603174619*G0_1_0_10_1_1 - 0.02031746031746*G0_1_0_11_1_0 - 0.0203174603174585*G0_1_0_12_1_1 + 0.0203174603174595*G0_1_0_13_1_0 - 0.0711111111111095*G0_1_0_13_1_1 + 0.0812698412698434*G0_1_0_14_1_0 + 0.172698412698411*G0_1_0_14_1_1 - 0.0203174603174571*G0_1_0_15_1_0 - 0.0914285714285716*G0_1_0_15_1_1 - 0.0812698412698434*G0_1_0_16_1_0 + 0.0914285714285683*G0_1_0_16_1_1 + 0.060952380952377*G0_1_0_17_1_0 + 0.132063492063491*G0_1_0_17_1_1 - 0.0609523809523789*G0_1_0_18_1_0 + 0.0711111111111097*G0_1_0_18_1_1 - 0.304761904761903*G0_1_0_19_1_1;
    A[801] = -A[96] + 0.826243386243382*G0_0_0_0_0_0 + 0.826243386243381*G0_0_0_0_0_1 - 0.440211640211637*G0_0_0_1_0_0 + 0.128677248677249*G0_0_0_2_0_1 + 0.264126984126979*G0_0_0_3_0_0 - 0.0507936507936511*G0_0_0_3_0_1 - 0.0406349206349189*G0_0_0_4_0_0 - 0.294603174603175*G0_0_0_4_0_1 + 1.19873015873015*G0_0_0_5_0_0 - 0.355555555555556*G0_0_0_5_0_1 + 0.0406349206349191*G0_0_0_6_0_0 - 0.599365079365075*G0_0_0_6_0_1 - 2.05206349206348*G0_0_0_7_0_0 - 0.497777777777778*G0_0_0_7_0_1 + 1.66603174603174*G0_0_0_8_0_0 + 0.0507936507936508*G0_0_0_8_0_1 - 1.46285714285713*G0_0_0_9_0_0 + 0.792380952380954*G0_0_0_9_0_1 + 0.826243386243382*G0_0_0_10_1_0 + 0.826243386243381*G0_0_0_10_1_1 - 0.440211640211637*G0_0_0_11_1_0 + 0.128677248677249*G0_0_0_12_1_1 + 0.264126984126979*G0_0_0_13_1_0 - 0.0507936507936511*G0_0_0_13_1_1 - 0.0406349206349189*G0_0_0_14_1_0 - 0.294603174603175*G0_0_0_14_1_1 + 1.19873015873015*G0_0_0_15_1_0 - 0.355555555555556*G0_0_0_15_1_1 + 0.0406349206349191*G0_0_0_16_1_0 - 0.599365079365075*G0_0_0_16_1_1 - 2.05206349206348*G0_0_0_17_1_0 - 0.497777777777778*G0_0_0_17_1_1 + 1.66603174603174*G0_0_0_18_1_0 + 0.0507936507936508*G0_0_0_18_1_1 - 1.46285714285713*G0_0_0_19_1_0 + 0.792380952380954*G0_0_0_19_1_1 - 0.528253968253971*G0_0_1_0_0_0 - 0.528253968253971*G0_0_1_0_0_1 + 0.142222222222221*G0_0_1_2_0_1 + 0.13206349206349*G0_0_1_3_0_0 - 0.111746031746033*G0_0_1_4_0_0 - 0.121904761904763*G0_0_1_4_0_1 + 0.41650793650793*G0_0_1_5_0_0 + 1.19873015873016*G0_0_1_5_0_1 + 0.111746031746033*G0_0_1_6_0_0 - 0.81269841269841*G0_0_1_6_0_1 + 0.660317460317464*G0_0_1_7_0_0 - 0.121904761904764*G0_0_1_7_0_1 - 0.132063492063494*G0_0_1_8_0_0 - 0.54857142857142*G0_0_1_9_0_0 + 0.243809523809528*G0_0_1_9_0_1 - 0.528253968253971*G0_0_1_10_1_0 - 0.528253968253971*G0_0_1_10_1_1 + 0.142222222222221*G0_0_1_12_1_1 + 0.13206349206349*G0_0_1_13_1_0 - 0.111746031746033*G0_0_1_14_1_0 - 0.121904761904763*G0_0_1_14_1_1 + 0.41650793650793*G0_0_1_15_1_0 + 1.19873015873016*G0_0_1_15_1_1 + 0.111746031746033*G0_0_1_16_1_0 - 0.81269841269841*G0_0_1_16_1_1 + 0.660317460317464*G0_0_1_17_1_0 - 0.121904761904764*G0_0_1_17_1_1 - 0.132063492063494*G0_0_1_18_1_0 - 0.54857142857142*G0_0_1_19_1_0 + 0.243809523809528*G0_0_1_19_1_1;
    A[336] = A[801];
    A[685] = A[307] + 0.133333333333336*G0_0_1_0_0_0 + 0.133333333333335*G0_0_1_0_0_1 - 0.0304761904761916*G0_0_1_1_0_0 - 0.0304761904761894*G0_0_1_2_0_1 - 0.215238095238092*G0_0_1_3_0_0 - 0.0780952380952386*G0_0_1_3_0_1 - 0.0780952380952362*G0_0_1_4_0_0 - 0.215238095238093*G0_0_1_4_0_1 - 0.276190476190467*G0_0_1_5_0_0 - 0.314285714285712*G0_0_1_5_0_1 + 0.0780952380952361*G0_0_1_6_0_0 + 0.211428571428567*G0_0_1_6_0_1 - 0.314285714285718*G0_0_1_7_0_0 - 0.276190476190472*G0_0_1_7_0_1 + 0.211428571428573*G0_0_1_8_0_0 + 0.0780952380952389*G0_0_1_8_0_1 + 0.491428571428559*G0_0_1_9_0_0 + 0.491428571428564*G0_0_1_9_0_1 + 0.133333333333336*G0_0_1_10_1_0 + 0.133333333333335*G0_0_1_10_1_1 - 0.0304761904761916*G0_0_1_11_1_0 - 0.0304761904761894*G0_0_1_12_1_1 - 0.215238095238092*G0_0_1_13_1_0 - 0.0780952380952386*G0_0_1_13_1_1 - 0.0780952380952362*G0_0_1_14_1_0 - 0.215238095238093*G0_0_1_14_1_1 - 0.276190476190467*G0_0_1_15_1_0 - 0.314285714285712*G0_0_1_15_1_1 + 0.0780952380952361*G0_0_1_16_1_0 + 0.211428571428567*G0_0_1_16_1_1 - 0.314285714285718*G0_0_1_17_1_0 - 0.276190476190472*G0_0_1_17_1_1 + 0.211428571428573*G0_0_1_18_1_0 + 0.0780952380952389*G0_0_1_18_1_1 + 0.491428571428559*G0_0_1_19_1_0 + 0.491428571428564*G0_0_1_19_1_1 - 0.133333333333336*G0_1_0_0_0_0 - 0.133333333333336*G0_1_0_0_0_1 + 0.0304761904761916*G0_1_0_1_0_0 + 0.0304761904761894*G0_1_0_2_0_1 + 0.215238095238092*G0_1_0_3_0_0 + 0.0780952380952386*G0_1_0_3_0_1 + 0.0780952380952362*G0_1_0_4_0_0 + 0.215238095238093*G0_1_0_4_0_1 + 0.276190476190466*G0_1_0_5_0_0 + 0.314285714285712*G0_1_0_5_0_1 - 0.078095238095236*G0_1_0_6_0_0 - 0.211428571428567*G0_1_0_6_0_1 + 0.314285714285718*G0_1_0_7_0_0 + 0.276190476190472*G0_1_0_7_0_1 - 0.211428571428573*G0_1_0_8_0_0 - 0.0780952380952388*G0_1_0_8_0_1 - 0.491428571428559*G0_1_0_9_0_0 - 0.491428571428564*G0_1_0_9_0_1 - 0.133333333333336*G0_1_0_10_1_0 - 0.133333333333336*G0_1_0_10_1_1 + 0.0304761904761916*G0_1_0_11_1_0 + 0.0304761904761894*G0_1_0_12_1_1 + 0.215238095238092*G0_1_0_13_1_0 + 0.0780952380952386*G0_1_0_13_1_1 + 0.0780952380952362*G0_1_0_14_1_0 + 0.215238095238093*G0_1_0_14_1_1 + 0.276190476190466*G0_1_0_15_1_0 + 0.314285714285712*G0_1_0_15_1_1 - 0.078095238095236*G0_1_0_16_1_0 - 0.211428571428567*G0_1_0_16_1_1 + 0.314285714285718*G0_1_0_17_1_0 + 0.276190476190472*G0_1_0_17_1_1 - 0.211428571428573*G0_1_0_18_1_0 - 0.0780952380952388*G0_1_0_18_1_1 - 0.491428571428559*G0_1_0_19_1_0 - 0.491428571428564*G0_1_0_19_1_1;
    A[718] = -A[628] - 0.345396825396824*G0_1_0_0_0_0 - 0.345396825396824*G0_1_0_0_0_1 + 0.14222222222222*G0_1_0_1_0_0 + 1.21904761904762*G0_1_0_3_0_0 + 0.650158730158728*G0_1_0_3_0_1 + 0.711111111111115*G0_1_0_4_0_1 + 1.21904761904762*G0_1_0_5_0_0 + 1.05650793650794*G0_1_0_5_0_1 - 0.711111111111113*G0_1_0_6_0_1 + 0.833015873015871*G0_1_0_7_0_0 + 0.995555555555556*G0_1_0_7_0_1 - 0.629841269841266*G0_1_0_8_0_0 - 0.650158730158729*G0_1_0_8_0_1 - 2.43809523809524*G0_1_0_9_0_0 - 1.70666666666667*G0_1_0_9_0_1 - 0.345396825396824*G0_1_0_10_1_0 - 0.345396825396824*G0_1_0_10_1_1 + 0.14222222222222*G0_1_0_11_1_0 + 1.21904761904762*G0_1_0_13_1_0 + 0.650158730158728*G0_1_0_13_1_1 + 0.711111111111115*G0_1_0_14_1_1 + 1.21904761904762*G0_1_0_15_1_0 + 1.05650793650794*G0_1_0_15_1_1 - 0.711111111111113*G0_1_0_16_1_1 + 0.833015873015871*G0_1_0_17_1_0 + 0.995555555555556*G0_1_0_17_1_1 - 0.629841269841266*G0_1_0_18_1_0 - 0.650158730158729*G0_1_0_18_1_1 - 2.43809523809524*G0_1_0_19_1_0 - 1.70666666666667*G0_1_0_19_1_1 + 0.352169312169308*G0_1_1_0_0_0 + 0.352169312169307*G0_1_1_0_0_1 + 1.61862433862433*G0_1_1_1_0_0 + 0.54179894179894*G0_1_1_2_0_1 + 0.162539682539685*G0_1_1_3_0_0 + 3.71809523809523*G0_1_1_3_0_1 - 0.507936507936506*G0_1_1_4_0_0 - 2.98666666666665*G0_1_1_4_0_1 - 0.650158730158724*G0_1_1_5_0_0 - 0.629841269841261*G0_1_1_5_0_1 + 0.507936507936506*G0_1_1_6_0_0 - 0.264126984126987*G0_1_1_6_0_1 - 1.62539682539681*G0_1_1_7_0_0 - 1.64571428571427*G0_1_1_7_0_1 - 0.345396825396828*G0_1_1_8_0_0 - 3.71809523809523*G0_1_1_8_0_1 + 0.48761904761904*G0_1_1_9_0_0 + 4.63238095238093*G0_1_1_9_0_1 + 0.352169312169308*G0_1_1_10_1_0 + 0.352169312169307*G0_1_1_10_1_1 + 1.61862433862433*G0_1_1_11_1_0 + 0.54179894179894*G0_1_1_12_1_1 + 0.162539682539685*G0_1_1_13_1_0 + 3.71809523809523*G0_1_1_13_1_1 - 0.507936507936506*G0_1_1_14_1_0 - 2.98666666666665*G0_1_1_14_1_1 - 0.650158730158724*G0_1_1_15_1_0 - 0.629841269841261*G0_1_1_15_1_1 + 0.507936507936506*G0_1_1_16_1_0 - 0.264126984126987*G0_1_1_16_1_1 - 1.62539682539681*G0_1_1_17_1_0 - 1.64571428571427*G0_1_1_17_1_1 - 0.345396825396828*G0_1_1_18_1_0 - 3.71809523809523*G0_1_1_18_1_1 + 0.48761904761904*G0_1_1_19_1_0 + 4.63238095238093*G0_1_1_19_1_1;
    A[428] = -A[718] - 0.568888888888889*G0_0_0_0_0_0 - 0.568888888888889*G0_0_0_0_0_1 - 0.446984126984123*G0_0_0_1_0_0 + 1.82857142857141*G0_0_0_3_0_0 - 0.0406349206349229*G0_0_0_3_0_1 + 1.42222222222222*G0_0_0_4_0_1 + 1.82857142857143*G0_0_0_5_0_0 + 1.99111111111111*G0_0_0_5_0_1 - 1.42222222222224*G0_0_0_6_0_1 + 0.690793650793648*G0_0_0_7_0_0 + 0.528253968253965*G0_0_0_7_0_1 + 0.325079365079365*G0_0_0_8_0_0 + 0.0406349206349227*G0_0_0_8_0_1 - 3.65714285714284*G0_0_0_9_0_0 - 1.95047619047619*G0_0_0_9_0_1 - 0.568888888888889*G0_0_0_10_1_0 - 0.568888888888889*G0_0_0_10_1_1 - 0.446984126984123*G0_0_0_11_1_0 + 1.82857142857141*G0_0_0_13_1_0 - 0.0406349206349229*G0_0_0_13_1_1 + 1.42222222222222*G0_0_0_14_1_1 + 1.82857142857143*G0_0_0_15_1_0 + 1.99111111111111*G0_0_0_15_1_1 - 1.42222222222224*G0_0_0_16_1_1 + 0.690793650793648*G0_0_0_17_1_0 + 0.528253968253965*G0_0_0_17_1_1 + 0.325079365079365*G0_0_0_18_1_0 + 0.0406349206349227*G0_0_0_18_1_1 - 3.65714285714284*G0_0_0_19_1_0 - 1.95047619047619*G0_0_0_19_1_1 + 0.0677248677248679*G0_0_1_0_0_0 + 0.067724867724868*G0_0_1_0_0_1 + 0.297989417989422*G0_0_1_1_0_0 + 0.846560846560863*G0_0_1_2_0_1 - 1.17841269841271*G0_0_1_3_0_0 - 0.446984126984121*G0_0_1_3_0_1 + 2.84444444444447*G0_0_1_4_0_0 + 1.56444444444444*G0_0_1_4_0_1 - 1.38158730158729*G0_0_1_5_0_0 - 1.27999999999999*G0_0_1_5_0_1 - 2.84444444444447*G0_0_1_6_0_0 + 0.365714285714261*G0_0_1_6_0_1 + 0.36571428571428*G0_0_1_7_0_0 + 0.264126984126985*G0_0_1_7_0_1 - 0.731428571428572*G0_0_1_8_0_0 + 0.446984126984121*G0_0_1_8_0_1 + 2.56*G0_0_1_9_0_0 - 1.82857142857143*G0_0_1_9_0_1 + 0.0677248677248679*G0_0_1_10_1_0 + 0.067724867724868*G0_0_1_10_1_1 + 0.297989417989422*G0_0_1_11_1_0 + 0.846560846560863*G0_0_1_12_1_1 - 1.17841269841271*G0_0_1_13_1_0 - 0.446984126984121*G0_0_1_13_1_1 + 2.84444444444447*G0_0_1_14_1_0 + 1.56444444444444*G0_0_1_14_1_1 - 1.38158730158729*G0_0_1_15_1_0 - 1.27999999999999*G0_0_1_15_1_1 - 2.84444444444447*G0_0_1_16_1_0 + 0.365714285714261*G0_0_1_16_1_1 + 0.36571428571428*G0_0_1_17_1_0 + 0.264126984126985*G0_0_1_17_1_1 - 0.731428571428572*G0_0_1_18_1_0 + 0.446984126984121*G0_0_1_18_1_1 + 2.56*G0_0_1_19_1_0 - 1.82857142857143*G0_0_1_19_1_1 - 0.907513227513225*G0_1_0_0_0_0 - 0.907513227513225*G0_1_0_0_0_1 - 0.0677248677248676*G0_1_0_1_0_0 + 2.67513227513227*G0_1_0_2_0_1 + 0.162539682539686*G0_1_0_3_0_0 - 0.203174603174602*G0_1_0_3_0_1 + 5.28253968253966*G0_1_0_4_0_0 + 2.90539682539682*G0_1_0_4_0_1 + 3.61650793650793*G0_1_0_5_0_0 + 3.4742857142857*G0_1_0_5_0_1 - 5.28253968253967*G0_1_0_6_0_0 - 5.24190476190474*G0_1_0_6_0_1 + 0.731428571428571*G0_1_0_7_0_0 + 0.873650793650795*G0_1_0_7_0_1 + 0.24380952380952*G0_1_0_8_0_0 + 0.203174603174602*G0_1_0_8_0_1 - 3.77904761904761*G0_1_0_9_0_0 - 3.77904761904762*G0_1_0_9_0_1 - 0.907513227513225*G0_1_0_10_1_0 - 0.907513227513225*G0_1_0_10_1_1 - 0.0677248677248676*G0_1_0_11_1_0 + 2.67513227513227*G0_1_0_12_1_1 + 0.162539682539686*G0_1_0_13_1_0 - 0.203174603174602*G0_1_0_13_1_1 + 5.28253968253966*G0_1_0_14_1_0 + 2.90539682539682*G0_1_0_14_1_1 + 3.61650793650793*G0_1_0_15_1_0 + 3.4742857142857*G0_1_0_15_1_1 - 5.28253968253967*G0_1_0_16_1_0 - 5.24190476190474*G0_1_0_16_1_1 + 0.731428571428571*G0_1_0_17_1_0 + 0.873650793650795*G0_1_0_17_1_1 + 0.24380952380952*G0_1_0_18_1_0 + 0.203174603174602*G0_1_0_18_1_1 - 3.77904761904761*G0_1_0_19_1_0 - 3.77904761904762*G0_1_0_19_1_1 + 0.135449735449733*G0_1_1_0_0_0 + 0.135449735449733*G0_1_1_0_0_1 + 0.270899470899472*G0_1_1_1_0_0 + 1.65248677248677*G0_1_1_2_0_1 - 0.772063492063487*G0_1_1_3_0_0 + 3.61650793650793*G0_1_1_4_0_0 + 1.46285714285714*G0_1_1_4_0_1 + 1.99111111111111*G0_1_1_5_0_0 + 0.568888888888892*G0_1_1_5_0_1 - 3.61650793650793*G0_1_1_6_0_0 - 2.3568253968254*G0_1_1_6_0_1 + 0.0406349206349227*G0_1_1_7_0_0 + 1.46285714285714*G0_1_1_7_0_1 - 0.446984126984129*G0_1_1_8_0_0 - 1.21904761904762*G0_1_1_9_0_0 - 2.92571428571428*G0_1_1_9_0_1 + 0.135449735449733*G0_1_1_10_1_0 + 0.135449735449733*G0_1_1_10_1_1 + 0.270899470899472*G0_1_1_11_1_0 + 1.65248677248677*G0_1_1_12_1_1 - 0.772063492063487*G0_1_1_13_1_0 + 3.61650793650793*G0_1_1_14_1_0 + 1.46285714285714*G0_1_1_14_1_1 + 1.99111111111111*G0_1_1_15_1_0 + 0.568888888888892*G0_1_1_15_1_1 - 3.61650793650793*G0_1_1_16_1_0 - 2.3568253968254*G0_1_1_16_1_1 + 0.0406349206349227*G0_1_1_17_1_0 + 1.46285714285714*G0_1_1_17_1_1 - 0.446984126984129*G0_1_1_18_1_0 - 1.21904761904762*G0_1_1_19_1_0 - 2.92571428571428*G0_1_1_19_1_1;
    A[863] = A[718] - 0.243809523809523*G0_0_1_0_0_0 - 0.243809523809523*G0_0_1_0_0_1 + 0.0203174603174572*G0_0_1_1_0_0 + 0.406349206349198*G0_0_1_2_0_1 + 0.325079365079372*G0_0_1_3_0_0 + 0.22349206349206*G0_0_1_3_0_1 + 0.507936507936494*G0_0_1_4_0_0 + 0.223492063492066*G0_0_1_4_0_1 + 1.13777777777778*G0_0_1_5_0_0 + 1.07682539682539*G0_0_1_5_0_1 - 0.507936507936495*G0_0_1_6_0_0 - 1.23936507936507*G0_0_1_6_0_1 + 0.203174603174605*G0_0_1_7_0_0 + 0.264126984126988*G0_0_1_7_0_1 + 0.0203174603174606*G0_0_1_8_0_0 - 0.22349206349206*G0_0_1_8_0_1 - 1.46285714285715*G0_0_1_9_0_0 - 0.487619047619053*G0_0_1_9_0_1 - 0.243809523809523*G0_0_1_10_1_0 - 0.243809523809523*G0_0_1_10_1_1 + 0.0203174603174572*G0_0_1_11_1_0 + 0.406349206349198*G0_0_1_12_1_1 + 0.325079365079372*G0_0_1_13_1_0 + 0.22349206349206*G0_0_1_13_1_1 + 0.507936507936494*G0_0_1_14_1_0 + 0.223492063492066*G0_0_1_14_1_1 + 1.13777777777778*G0_0_1_15_1_0 + 1.07682539682539*G0_0_1_15_1_1 - 0.507936507936495*G0_0_1_16_1_0 - 1.23936507936507*G0_0_1_16_1_1 + 0.203174603174605*G0_0_1_17_1_0 + 0.264126984126988*G0_0_1_17_1_1 + 0.0203174603174606*G0_0_1_18_1_0 - 0.22349206349206*G0_0_1_18_1_1 - 1.46285714285715*G0_0_1_19_1_0 - 0.487619047619053*G0_0_1_19_1_1 + 0.243809523809523*G0_1_0_0_0_0 + 0.243809523809523*G0_1_0_0_0_1 - 0.0203174603174572*G0_1_0_1_0_0 - 0.406349206349198*G0_1_0_2_0_1 - 0.325079365079371*G0_1_0_3_0_0 - 0.22349206349206*G0_1_0_3_0_1 - 0.507936507936494*G0_1_0_4_0_0 - 0.223492063492066*G0_1_0_4_0_1 - 1.13777777777778*G0_1_0_5_0_0 - 1.07682539682539*G0_1_0_5_0_1 + 0.507936507936495*G0_1_0_6_0_0 + 1.23936507936507*G0_1_0_6_0_1 - 0.203174603174605*G0_1_0_7_0_0 - 0.264126984126988*G0_1_0_7_0_1 - 0.0203174603174604*G0_1_0_8_0_0 + 0.22349206349206*G0_1_0_8_0_1 + 1.46285714285715*G0_1_0_9_0_0 + 0.487619047619054*G0_1_0_9_0_1 + 0.243809523809523*G0_1_0_10_1_0 + 0.243809523809523*G0_1_0_10_1_1 - 0.0203174603174572*G0_1_0_11_1_0 - 0.406349206349198*G0_1_0_12_1_1 - 0.325079365079371*G0_1_0_13_1_0 - 0.22349206349206*G0_1_0_13_1_1 - 0.507936507936494*G0_1_0_14_1_0 - 0.223492063492066*G0_1_0_14_1_1 - 1.13777777777778*G0_1_0_15_1_0 - 1.07682539682539*G0_1_0_15_1_1 + 0.507936507936495*G0_1_0_16_1_0 + 1.23936507936507*G0_1_0_16_1_1 - 0.203174603174605*G0_1_0_17_1_0 - 0.264126984126988*G0_1_0_17_1_1 - 0.0203174603174604*G0_1_0_18_1_0 + 0.22349206349206*G0_1_0_18_1_1 + 1.46285714285715*G0_1_0_19_1_0 + 0.487619047619054*G0_1_0_19_1_1;
    A[254] = A[428] - 0.73142857142857*G0_0_1_0_0_0 - 0.73142857142857*G0_0_1_0_0_1 - 0.386031746031747*G0_0_1_1_0_0 + 1.4222222222222*G0_0_1_2_0_1 + 1.01587301587302*G0_0_1_3_0_0 + 0.0203174603174593*G0_0_1_3_0_1 + 1.9301587301587*G0_0_1_4_0_0 + 1.11746031746031*G0_0_1_4_0_1 + 3.86031746031744*G0_0_1_5_0_0 + 3.6774603174603*G0_0_1_5_0_1 - 1.9301587301587*G0_0_1_6_0_0 - 4.36825396825394*G0_0_1_6_0_1 + 0.162539682539685*G0_0_1_7_0_0 + 0.345396825396822*G0_0_1_7_0_1 + 0.954920634920631*G0_0_1_8_0_0 - 0.0203174603174596*G0_0_1_8_0_1 - 4.87619047619046*G0_0_1_9_0_0 - 1.46285714285713*G0_0_1_9_0_1 - 0.73142857142857*G0_0_1_10_1_0 - 0.73142857142857*G0_0_1_10_1_1 - 0.386031746031747*G0_0_1_11_1_0 + 1.4222222222222*G0_0_1_12_1_1 + 1.01587301587302*G0_0_1_13_1_0 + 0.0203174603174593*G0_0_1_13_1_1 + 1.9301587301587*G0_0_1_14_1_0 + 1.11746031746031*G0_0_1_14_1_1 + 3.86031746031744*G0_0_1_15_1_0 + 3.6774603174603*G0_0_1_15_1_1 - 1.9301587301587*G0_0_1_16_1_0 - 4.36825396825394*G0_0_1_16_1_1 + 0.162539682539685*G0_0_1_17_1_0 + 0.345396825396822*G0_0_1_17_1_1 + 0.954920634920631*G0_0_1_18_1_0 - 0.0203174603174596*G0_0_1_18_1_1 - 4.87619047619046*G0_0_1_19_1_0 - 1.46285714285713*G0_0_1_19_1_1 + 0.73142857142857*G0_1_0_0_0_0 + 0.73142857142857*G0_1_0_0_0_1 + 0.386031746031747*G0_1_0_1_0_0 - 1.4222222222222*G0_1_0_2_0_1 - 1.01587301587302*G0_1_0_3_0_0 - 0.0203174603174593*G0_1_0_3_0_1 - 1.9301587301587*G0_1_0_4_0_0 - 1.11746031746031*G0_1_0_4_0_1 - 3.86031746031744*G0_1_0_5_0_0 - 3.6774603174603*G0_1_0_5_0_1 + 1.9301587301587*G0_1_0_6_0_0 + 4.36825396825394*G0_1_0_6_0_1 - 0.162539682539685*G0_1_0_7_0_0 - 0.345396825396822*G0_1_0_7_0_1 - 0.954920634920632*G0_1_0_8_0_0 + 0.0203174603174596*G0_1_0_8_0_1 + 4.87619047619046*G0_1_0_9_0_0 + 1.46285714285713*G0_1_0_9_0_1 + 0.73142857142857*G0_1_0_10_1_0 + 0.73142857142857*G0_1_0_10_1_1 + 0.386031746031747*G0_1_0_11_1_0 - 1.4222222222222*G0_1_0_12_1_1 - 1.01587301587302*G0_1_0_13_1_0 - 0.0203174603174593*G0_1_0_13_1_1 - 1.9301587301587*G0_1_0_14_1_0 - 1.11746031746031*G0_1_0_14_1_1 - 3.86031746031744*G0_1_0_15_1_0 - 3.6774603174603*G0_1_0_15_1_1 + 1.9301587301587*G0_1_0_16_1_0 + 4.36825396825394*G0_1_0_16_1_1 - 0.162539682539685*G0_1_0_17_1_0 - 0.345396825396822*G0_1_0_17_1_1 - 0.954920634920632*G0_1_0_18_1_0 + 0.0203174603174596*G0_1_0_18_1_1 + 4.87619047619046*G0_1_0_19_1_0 + 1.46285714285713*G0_1_0_19_1_1;
    A[890] = -A[428] + 1.11746031746031*G0_0_1_0_0_0 + 1.11746031746031*G0_0_1_0_0_1 + 1.11746031746032*G0_0_1_1_0_0 - 4.87619047619046*G0_0_1_3_0_0 - 0.203174603174598*G0_0_1_3_0_1 - 3.55555555555554*G0_0_1_4_0_1 - 4.87619047619045*G0_0_1_5_0_0 - 4.67301587301586*G0_0_1_5_0_1 + 3.55555555555554*G0_0_1_6_0_1 - 1.11746031746031*G0_0_1_7_0_0 - 1.32063492063491*G0_0_1_7_0_1 - 1.11746031746032*G0_0_1_8_0_0 + 0.203174603174599*G0_0_1_8_0_1 + 9.75238095238092*G0_0_1_9_0_0 + 4.87619047619045*G0_0_1_9_0_1 + 1.11746031746031*G0_0_1_10_1_0 + 1.11746031746031*G0_0_1_10_1_1 + 1.11746031746032*G0_0_1_11_1_0 - 4.87619047619046*G0_0_1_13_1_0 - 0.203174603174598*G0_0_1_13_1_1 - 3.55555555555554*G0_0_1_14_1_1 - 4.87619047619045*G0_0_1_15_1_0 - 4.67301587301586*G0_0_1_15_1_1 + 3.55555555555554*G0_0_1_16_1_1 - 1.11746031746031*G0_0_1_17_1_0 - 1.32063492063491*G0_0_1_17_1_1 - 1.11746031746032*G0_0_1_18_1_0 + 0.203174603174599*G0_0_1_18_1_1 + 9.75238095238092*G0_0_1_19_1_0 + 4.87619047619045*G0_0_1_19_1_1 + 0.921058201058197*G0_1_1_0_0_0 + 0.921058201058198*G0_1_1_0_0_1 + 0.196402116402115*G0_1_1_1_0_0 - 0.880423280423275*G0_1_1_2_0_1 - 3.86031746031744*G0_1_1_3_0_0 - 1.76761904761904*G0_1_1_3_0_1 - 1.72698412698412*G0_1_1_4_0_0 - 2.74285714285713*G0_1_1_4_0_1 - 1.01587301587301*G0_1_1_5_0_0 - 2.58031746031745*G0_1_1_5_0_1 + 1.72698412698412*G0_1_1_6_0_0 + 2.53968253968252*G0_1_1_6_0_1 + 0.690793650793646*G0_1_1_7_0_0 + 2.25523809523809*G0_1_1_7_0_1 - 1.80825396825396*G0_1_1_8_0_0 + 1.76761904761904*G0_1_1_8_0_1 + 4.87619047619045*G0_1_1_9_0_0 + 0.487619047619044*G0_1_1_9_0_1 + 0.921058201058197*G0_1_1_10_1_0 + 0.921058201058198*G0_1_1_10_1_1 + 0.196402116402115*G0_1_1_11_1_0 - 0.880423280423275*G0_1_1_12_1_1 - 3.86031746031744*G0_1_1_13_1_0 - 1.76761904761904*G0_1_1_13_1_1 - 1.72698412698412*G0_1_1_14_1_0 - 2.74285714285713*G0_1_1_14_1_1 - 1.01587301587301*G0_1_1_15_1_0 - 2.58031746031745*G0_1_1_15_1_1 + 1.72698412698412*G0_1_1_16_1_0 + 2.53968253968252*G0_1_1_16_1_1 + 0.690793650793646*G0_1_1_17_1_0 + 2.25523809523809*G0_1_1_17_1_1 - 1.80825396825396*G0_1_1_18_1_0 + 1.76761904761904*G0_1_1_18_1_1 + 4.87619047619045*G0_1_1_19_1_0 + 0.487619047619044*G0_1_1_19_1_1;
    A[425] = A[890];
    A[860] = -A[863] - 0.345396825396824*G0_0_1_0_0_0 - 0.345396825396825*G0_0_1_0_0_1 + 0.14222222222222*G0_0_1_1_0_0 + 1.21904761904762*G0_0_1_3_0_0 + 0.650158730158728*G0_0_1_3_0_1 + 0.711111111111115*G0_0_1_4_0_1 + 1.21904761904762*G0_0_1_5_0_0 + 1.05650793650794*G0_0_1_5_0_1 - 0.711111111111113*G0_0_1_6_0_1 + 0.833015873015871*G0_0_1_7_0_0 + 0.995555555555557*G0_0_1_7_0_1 - 0.629841269841267*G0_0_1_8_0_0 - 0.650158730158729*G0_0_1_8_0_1 - 2.43809523809524*G0_0_1_9_0_0 - 1.70666666666667*G0_0_1_9_0_1 - 0.345396825396824*G0_0_1_10_1_0 - 0.345396825396825*G0_0_1_10_1_1 + 0.14222222222222*G0_0_1_11_1_0 + 1.21904761904762*G0_0_1_13_1_0 + 0.650158730158728*G0_0_1_13_1_1 + 0.711111111111115*G0_0_1_14_1_1 + 1.21904761904762*G0_0_1_15_1_0 + 1.05650793650794*G0_0_1_15_1_1 - 0.711111111111113*G0_0_1_16_1_1 + 0.833015873015871*G0_0_1_17_1_0 + 0.995555555555557*G0_0_1_17_1_1 - 0.629841269841267*G0_0_1_18_1_0 - 0.650158730158729*G0_0_1_18_1_1 - 2.43809523809524*G0_0_1_19_1_0 - 1.70666666666667*G0_0_1_19_1_1 + 0.352169312169308*G0_1_1_0_0_0 + 0.352169312169307*G0_1_1_0_0_1 + 1.61862433862433*G0_1_1_1_0_0 + 0.54179894179894*G0_1_1_2_0_1 + 0.162539682539685*G0_1_1_3_0_0 + 3.71809523809523*G0_1_1_3_0_1 - 0.507936507936505*G0_1_1_4_0_0 - 2.98666666666665*G0_1_1_4_0_1 - 0.650158730158724*G0_1_1_5_0_0 - 0.629841269841261*G0_1_1_5_0_1 + 0.507936507936505*G0_1_1_6_0_0 - 0.264126984126987*G0_1_1_6_0_1 - 1.62539682539681*G0_1_1_7_0_0 - 1.64571428571427*G0_1_1_7_0_1 - 0.345396825396828*G0_1_1_8_0_0 - 3.71809523809523*G0_1_1_8_0_1 + 0.48761904761904*G0_1_1_9_0_0 + 4.63238095238093*G0_1_1_9_0_1 + 0.352169312169308*G0_1_1_10_1_0 + 0.352169312169307*G0_1_1_10_1_1 + 1.61862433862433*G0_1_1_11_1_0 + 0.54179894179894*G0_1_1_12_1_1 + 0.162539682539685*G0_1_1_13_1_0 + 3.71809523809523*G0_1_1_13_1_1 - 0.507936507936505*G0_1_1_14_1_0 - 2.98666666666665*G0_1_1_14_1_1 - 0.650158730158724*G0_1_1_15_1_0 - 0.629841269841261*G0_1_1_15_1_1 + 0.507936507936505*G0_1_1_16_1_0 - 0.264126984126987*G0_1_1_16_1_1 - 1.62539682539681*G0_1_1_17_1_0 - 1.64571428571427*G0_1_1_17_1_1 - 0.345396825396828*G0_1_1_18_1_0 - 3.71809523809523*G0_1_1_18_1_1 + 0.48761904761904*G0_1_1_19_1_0 + 4.63238095238093*G0_1_1_19_1_1;
    A[431] = A[718] + 0.108359788359789*G0_0_0_0_0_0 + 0.108359788359789*G0_0_0_0_0_1 - 0.474074074074073*G0_0_0_1_0_0 + 0.196402116402109*G0_0_0_2_0_1 - 0.304761904761901*G0_0_0_3_0_0 - 0.914285714285711*G0_0_0_3_0_1 + 0.670476190476175*G0_0_0_4_0_0 + 0.609523809523802*G0_0_0_4_0_1 - 0.182857142857145*G0_0_0_5_0_0 - 0.121904761904765*G0_0_0_5_0_1 - 0.670476190476175*G0_0_0_6_0_0 - 0.182857142857133*G0_0_0_6_0_1 - 0.548571428571427*G0_0_0_7_0_0 - 0.609523809523807*G0_0_0_7_0_1 + 0.91428571428571*G0_0_0_8_0_0 + 0.914285714285711*G0_0_0_8_0_1 + 0.487619047619047*G0_0_0_9_0_0 + 0.108359788359789*G0_0_0_10_1_0 + 0.108359788359789*G0_0_0_10_1_1 - 0.474074074074073*G0_0_0_11_1_0 + 0.196402116402109*G0_0_0_12_1_1 - 0.304761904761901*G0_0_0_13_1_0 - 0.914285714285711*G0_0_0_13_1_1 + 0.670476190476175*G0_0_0_14_1_0 + 0.609523809523802*G0_0_0_14_1_1 - 0.182857142857145*G0_0_0_15_1_0 - 0.121904761904765*G0_0_0_15_1_1 - 0.670476190476175*G0_0_0_16_1_0 - 0.182857142857133*G0_0_0_16_1_1 - 0.548571428571427*G0_0_0_17_1_0 - 0.609523809523807*G0_0_0_17_1_1 + 0.91428571428571*G0_0_0_18_1_0 + 0.914285714285711*G0_0_0_18_1_1 + 0.487619047619047*G0_0_0_19_1_0 - 0.650158730158729*G0_0_1_1_0_0 + 0.650158730158718*G0_0_1_2_0_1 - 0.711111111111103*G0_0_1_3_0_0 - 1.36126984126984*G0_0_1_3_0_1 + 1.36126984126982*G0_0_1_4_0_0 + 0.711111111111106*G0_0_1_4_0_1 + 0.589206349206341*G0_0_1_5_0_0 + 0.589206349206342*G0_0_1_5_0_1 - 1.36126984126982*G0_0_1_6_0_0 - 1.23936507936506*G0_0_1_6_0_1 - 0.589206349206344*G0_0_1_7_0_0 - 0.589206349206345*G0_0_1_7_0_1 + 1.23936507936507*G0_0_1_8_0_0 + 1.36126984126984*G0_0_1_8_0_1 + 0.121904761904762*G0_0_1_9_0_0 - 0.121904761904762*G0_0_1_9_0_1 - 0.650158730158729*G0_0_1_11_1_0 + 0.650158730158718*G0_0_1_12_1_1 - 0.711111111111103*G0_0_1_13_1_0 - 1.36126984126984*G0_0_1_13_1_1 + 1.36126984126982*G0_0_1_14_1_0 + 0.711111111111106*G0_0_1_14_1_1 + 0.589206349206341*G0_0_1_15_1_0 + 0.589206349206342*G0_0_1_15_1_1 - 1.36126984126982*G0_0_1_16_1_0 - 1.23936507936506*G0_0_1_16_1_1 - 0.589206349206344*G0_0_1_17_1_0 - 0.589206349206345*G0_0_1_17_1_1 + 1.23936507936507*G0_0_1_18_1_0 + 1.36126984126984*G0_0_1_18_1_1 + 0.121904761904762*G0_0_1_19_1_0 - 0.121904761904762*G0_0_1_19_1_1 - 0.26412698412698*G0_1_0_1_0_0 + 0.264126984126981*G0_1_0_2_0_1 - 0.812698412698412*G0_1_0_3_0_0 - 1.07682539682539*G0_1_0_3_0_1 + 1.07682539682539*G0_1_0_4_0_0 + 0.812698412698402*G0_1_0_4_0_1 - 0.284444444444451*G0_1_0_5_0_0 - 0.284444444444451*G0_1_0_5_0_1 - 1.07682539682539*G0_1_0_6_0_0 + 0.0203174603174683*G0_1_0_6_0_1 + 0.284444444444441*G0_1_0_7_0_0 + 0.284444444444442*G0_1_0_7_0_1 - 0.0203174603174634*G0_1_0_8_0_0 + 1.07682539682539*G0_1_0_8_0_1 + 1.09714285714286*G0_1_0_9_0_0 - 1.09714285714284*G0_1_0_9_0_1 - 0.26412698412698*G0_1_0_11_1_0 + 0.264126984126981*G0_1_0_12_1_1 - 0.812698412698412*G0_1_0_13_1_0 - 1.07682539682539*G0_1_0_13_1_1 + 1.07682539682539*G0_1_0_14_1_0 + 0.812698412698402*G0_1_0_14_1_1 - 0.284444444444451*G0_1_0_15_1_0 - 0.284444444444451*G0_1_0_15_1_1 - 1.07682539682539*G0_1_0_16_1_0 + 0.0203174603174683*G0_1_0_16_1_1 + 0.284444444444441*G0_1_0_17_1_0 + 0.284444444444442*G0_1_0_17_1_1 - 0.0203174603174634*G0_1_0_18_1_0 + 1.07682539682539*G0_1_0_18_1_1 + 1.09714285714286*G0_1_0_19_1_0 - 1.09714285714284*G0_1_0_19_1_1 - 0.108359788359785*G0_1_1_0_0_0 - 0.108359788359785*G0_1_1_0_0_1 - 0.196402116402116*G0_1_1_1_0_0 + 0.474074074074067*G0_1_1_2_0_1 - 0.609523809523806*G0_1_1_3_0_0 - 0.670476190476187*G0_1_1_3_0_1 + 0.914285714285702*G0_1_1_4_0_0 + 0.304761904761899*G0_1_1_4_0_1 + 0.609523809523799*G0_1_1_5_0_0 + 0.548571428571418*G0_1_1_5_0_1 - 0.914285714285702*G0_1_1_6_0_0 - 0.9142857142857*G0_1_1_6_0_1 + 0.121904761904758*G0_1_1_7_0_0 + 0.182857142857139*G0_1_1_7_0_1 + 0.182857142857143*G0_1_1_8_0_0 + 0.670476190476187*G0_1_1_8_0_1 - 0.487619047619038*G0_1_1_9_0_1 - 0.108359788359785*G0_1_1_10_1_0 - 0.108359788359785*G0_1_1_10_1_1 - 0.196402116402116*G0_1_1_11_1_0 + 0.474074074074067*G0_1_1_12_1_1 - 0.609523809523806*G0_1_1_13_1_0 - 0.670476190476187*G0_1_1_13_1_1 + 0.914285714285702*G0_1_1_14_1_0 + 0.304761904761899*G0_1_1_14_1_1 + 0.609523809523799*G0_1_1_15_1_0 + 0.548571428571418*G0_1_1_15_1_1 - 0.914285714285702*G0_1_1_16_1_0 - 0.9142857142857*G0_1_1_16_1_1 + 0.121904761904758*G0_1_1_17_1_0 + 0.182857142857139*G0_1_1_17_1_1 + 0.182857142857143*G0_1_1_18_1_0 + 0.670476190476187*G0_1_1_18_1_1 - 0.487619047619038*G0_1_1_19_1_1;
    A[401] = -A[431] + 0.135449735449736*G0_0_0_0_0_0 + 0.135449735449736*G0_0_0_0_0_1 + 1.65248677248676*G0_0_0_1_0_0 + 0.270899470899469*G0_0_0_2_0_1 + 1.46285714285713*G0_0_0_3_0_0 + 3.61650793650791*G0_0_0_3_0_1 - 0.772063492063489*G0_0_0_4_0_1 + 1.46285714285713*G0_0_0_5_0_0 + 0.0406349206349189*G0_0_0_5_0_1 - 0.446984126984125*G0_0_0_6_0_1 + 0.568888888888881*G0_0_0_7_0_0 + 1.9911111111111*G0_0_0_7_0_1 - 2.35682539682538*G0_0_0_8_0_0 - 3.61650793650791*G0_0_0_8_0_1 - 2.92571428571426*G0_0_0_9_0_0 - 1.2190476190476*G0_0_0_9_0_1 + 0.135449735449736*G0_0_0_10_1_0 + 0.135449735449736*G0_0_0_10_1_1 + 1.65248677248676*G0_0_0_11_1_0 + 0.270899470899469*G0_0_0_12_1_1 + 1.46285714285713*G0_0_0_13_1_0 + 3.61650793650791*G0_0_0_13_1_1 - 0.772063492063489*G0_0_0_14_1_1 + 1.46285714285713*G0_0_0_15_1_0 + 0.0406349206349189*G0_0_0_15_1_1 - 0.446984126984125*G0_0_0_16_1_1 + 0.568888888888881*G0_0_0_17_1_0 + 1.9911111111111*G0_0_0_17_1_1 - 2.35682539682538*G0_0_0_18_1_0 - 3.61650793650791*G0_0_0_18_1_1 - 2.92571428571426*G0_0_0_19_1_0 - 1.2190476190476*G0_0_0_19_1_1 - 0.6637037037037*G0_0_1_0_0_0 - 0.663703703703699*G0_0_1_0_0_1 + 2.26878306878305*G0_0_1_1_0_0 - 0.0880423280423279*G0_0_1_2_0_1 + 2.68190476190475*G0_0_1_3_0_0 + 4.77460317460315*G0_0_1_3_0_1 - 0.426666666666662*G0_0_1_4_0_0 - 0.162539682539676*G0_0_1_4_0_1 + 0.609523809523804*G0_0_1_5_0_0 + 0.528253968253964*G0_0_1_5_0_1 + 0.426666666666663*G0_0_1_6_0_0 + 0.223492063492063*G0_0_1_6_0_1 + 2.3974603174603*G0_0_1_7_0_0 + 2.47873015873014*G0_0_1_7_0_1 - 4.00253968253966*G0_0_1_8_0_0 - 4.77460317460315*G0_0_1_8_0_1 - 3.29142857142855*G0_0_1_9_0_0 - 2.31619047619046*G0_0_1_9_0_1 - 0.6637037037037*G0_0_1_10_1_0 - 0.663703703703699*G0_0_1_10_1_1 + 2.26878306878305*G0_0_1_11_1_0 - 0.0880423280423279*G0_0_1_12_1_1 + 2.68190476190475*G0_0_1_13_1_0 + 4.77460317460315*G0_0_1_13_1_1 - 0.426666666666662*G0_0_1_14_1_0 - 0.162539682539676*G0_0_1_14_1_1 + 0.609523809523804*G0_0_1_15_1_0 + 0.528253968253964*G0_0_1_15_1_1 + 0.426666666666663*G0_0_1_16_1_0 + 0.223492063492063*G0_0_1_16_1_1 + 2.3974603174603*G0_0_1_17_1_0 + 2.47873015873014*G0_0_1_17_1_1 - 4.00253968253966*G0_0_1_18_1_0 - 4.77460317460315*G0_0_1_18_1_1 - 3.29142857142855*G0_0_1_19_1_0 - 2.31619047619046*G0_0_1_19_1_1 - 0.176084656084653*G0_1_0_0_0_0 - 0.176084656084654*G0_1_0_0_0_1 + 1.25291005291005*G0_1_0_1_0_0 + 0.318306878306877*G0_1_0_2_0_1 + 1.7879365079365*G0_1_0_3_0_0 + 3.35238095238094*G0_1_0_3_0_1 - 0.223492063492063*G0_1_0_4_0_0 - 0.853333333333334*G0_1_0_4_0_1 + 0.528253968253966*G0_1_0_5_0_0 + 0.568888888888885*G0_1_0_5_0_1 + 0.223492063492064*G0_1_0_6_0_0 - 0.711111111111109*G0_1_0_6_0_1 - 0.203174603174609*G0_1_0_7_0_0 - 0.243809523809526*G0_1_0_7_0_1 - 0.873650793650786*G0_1_0_8_0_0 - 3.35238095238094*G0_1_0_8_0_1 - 2.31619047619046*G0_1_0_9_0_0 + 1.09714285714286*G0_1_0_9_0_1 - 0.176084656084653*G0_1_0_10_1_0 - 0.176084656084654*G0_1_0_10_1_1 + 1.25291005291005*G0_1_0_11_1_0 + 0.318306878306877*G0_1_0_12_1_1 + 1.7879365079365*G0_1_0_13_1_0 + 3.35238095238094*G0_1_0_13_1_1 - 0.223492063492063*G0_1_0_14_1_0 - 0.853333333333334*G0_1_0_14_1_1 + 0.528253968253966*G0_1_0_15_1_0 + 0.568888888888885*G0_1_0_15_1_1 + 0.223492063492064*G0_1_0_16_1_0 - 0.711111111111109*G0_1_0_16_1_1 - 0.203174603174609*G0_1_0_17_1_0 - 0.243809523809526*G0_1_0_17_1_1 - 0.873650793650786*G0_1_0_18_1_0 - 3.35238095238094*G0_1_0_18_1_1 - 2.31619047619046*G0_1_0_19_1_0 + 1.09714285714286*G0_1_0_19_1_1 - 0.568888888888886*G0_1_1_0_0_0 - 0.568888888888886*G0_1_1_0_0_1 - 0.446984126984124*G0_1_1_2_0_1 + 1.42222222222222*G0_1_1_3_0_0 - 0.0406349206349184*G0_1_1_4_0_0 + 1.82857142857142*G0_1_1_4_0_1 + 0.528253968253965*G0_1_1_5_0_0 + 0.690793650793646*G0_1_1_5_0_1 + 0.0406349206349189*G0_1_1_6_0_0 + 0.325079365079364*G0_1_1_6_0_1 + 1.9911111111111*G0_1_1_7_0_0 + 1.82857142857142*G0_1_1_7_0_1 - 1.42222222222222*G0_1_1_8_0_0 - 1.95047619047618*G0_1_1_9_0_0 - 3.65714285714284*G0_1_1_9_0_1 - 0.568888888888886*G0_1_1_10_1_0 - 0.568888888888886*G0_1_1_10_1_1 - 0.446984126984124*G0_1_1_12_1_1 + 1.42222222222222*G0_1_1_13_1_0 - 0.0406349206349184*G0_1_1_14_1_0 + 1.82857142857142*G0_1_1_14_1_1 + 0.528253968253965*G0_1_1_15_1_0 + 0.690793650793646*G0_1_1_15_1_1 + 0.0406349206349189*G0_1_1_16_1_0 + 0.325079365079364*G0_1_1_16_1_1 + 1.9911111111111*G0_1_1_17_1_0 + 1.82857142857142*G0_1_1_17_1_1 - 1.42222222222222*G0_1_1_18_1_0 - 1.95047619047618*G0_1_1_19_1_0 - 3.65714285714284*G0_1_1_19_1_1;
    A[866] = A[401];
    A[888] = -A[431] + 0.352169312169311*G0_0_0_0_0_0 + 0.352169312169311*G0_0_0_0_0_1 + 0.541798941798937*G0_0_0_1_0_0 + 1.61862433862433*G0_0_0_2_0_1 - 2.98666666666665*G0_0_0_3_0_0 - 0.507936507936508*G0_0_0_3_0_1 + 3.71809523809521*G0_0_0_4_0_0 + 0.162539682539682*G0_0_0_4_0_1 - 1.64571428571428*G0_0_0_5_0_0 - 1.62539682539682*G0_0_0_5_0_1 - 3.71809523809522*G0_0_0_6_0_0 - 0.345396825396824*G0_0_0_6_0_1 - 0.629841269841268*G0_0_0_7_0_0 - 0.650158730158726*G0_0_0_7_0_1 - 0.26412698412698*G0_0_0_8_0_0 + 0.507936507936508*G0_0_0_8_0_1 + 4.63238095238092*G0_0_0_9_0_0 + 0.487619047619044*G0_0_0_9_0_1 + 0.352169312169311*G0_0_0_10_1_0 + 0.352169312169311*G0_0_0_10_1_1 + 0.541798941798937*G0_0_0_11_1_0 + 1.61862433862433*G0_0_0_12_1_1 - 2.98666666666665*G0_0_0_13_1_0 - 0.507936507936508*G0_0_0_13_1_1 + 3.71809523809521*G0_0_0_14_1_0 + 0.162539682539682*G0_0_0_14_1_1 - 1.64571428571428*G0_0_0_15_1_0 - 1.62539682539682*G0_0_0_15_1_1 - 3.71809523809522*G0_0_0_16_1_0 - 0.345396825396824*G0_0_0_16_1_1 - 0.629841269841268*G0_0_0_17_1_0 - 0.650158730158726*G0_0_0_17_1_1 - 0.26412698412698*G0_0_0_18_1_0 + 0.507936507936508*G0_0_0_18_1_1 + 4.63238095238092*G0_0_0_19_1_0 + 0.487619047619044*G0_0_0_19_1_1 - 0.345396825396823*G0_1_0_0_0_0 - 0.345396825396823*G0_1_0_0_0_1 + 0.142222222222223*G0_1_0_2_0_1 + 0.71111111111111*G0_1_0_3_0_0 + 0.65015873015873*G0_1_0_4_0_0 + 1.21904761904762*G0_1_0_4_0_1 + 0.995555555555555*G0_1_0_5_0_0 + 0.833015873015868*G0_1_0_5_0_1 - 0.65015873015873*G0_1_0_6_0_0 - 0.629841269841268*G0_1_0_6_0_1 + 1.05650793650793*G0_1_0_7_0_0 + 1.21904761904762*G0_1_0_7_0_1 - 0.711111111111111*G0_1_0_8_0_0 - 1.70666666666666*G0_1_0_9_0_0 - 2.43809523809523*G0_1_0_9_0_1 - 0.345396825396823*G0_1_0_10_1_0 - 0.345396825396823*G0_1_0_10_1_1 + 0.142222222222223*G0_1_0_12_1_1 + 0.71111111111111*G0_1_0_13_1_0 + 0.65015873015873*G0_1_0_14_1_0 + 1.21904761904762*G0_1_0_14_1_1 + 0.995555555555555*G0_1_0_15_1_0 + 0.833015873015868*G0_1_0_15_1_1 - 0.65015873015873*G0_1_0_16_1_0 - 0.629841269841268*G0_1_0_16_1_1 + 1.05650793650793*G0_1_0_17_1_0 + 1.21904761904762*G0_1_0_17_1_1 - 0.711111111111111*G0_1_0_18_1_0 - 1.70666666666666*G0_1_0_19_1_0 - 2.43809523809523*G0_1_0_19_1_1;
    A[569] = A[888] - 0.101587301587301*G0_0_1_0_0_0 - 0.101587301587301*G0_0_1_0_0_1 - 0.406349206349204*G0_0_1_1_0_0 + 0.121904761904762*G0_0_1_2_0_1 + 0.487619047619048*G0_0_1_3_0_0 - 0.507936507936503*G0_0_1_3_0_1 + 0.426666666666666*G0_0_1_4_0_0 + 0.893968253968251*G0_0_1_4_0_1 + 0.731428571428571*G0_0_1_5_0_0 + 0.629841269841268*G0_0_1_5_0_1 - 0.426666666666666*G0_0_1_6_0_0 - 0.650158730158729*G0_0_1_6_0_1 - 0.0203174603174602*G0_0_1_7_0_0 + 0.081269841269842*G0_0_1_7_0_1 + 0.528253968253965*G0_0_1_8_0_0 + 0.507936507936503*G0_0_1_8_0_1 - 1.21904761904762*G0_0_1_9_0_0 - 0.975238095238092*G0_0_1_9_0_1 - 0.101587301587301*G0_0_1_10_1_0 - 0.101587301587301*G0_0_1_10_1_1 - 0.406349206349204*G0_0_1_11_1_0 + 0.121904761904762*G0_0_1_12_1_1 + 0.487619047619048*G0_0_1_13_1_0 - 0.507936507936503*G0_0_1_13_1_1 + 0.426666666666666*G0_0_1_14_1_0 + 0.893968253968251*G0_0_1_14_1_1 + 0.731428571428571*G0_0_1_15_1_0 + 0.629841269841268*G0_0_1_15_1_1 - 0.426666666666666*G0_0_1_16_1_0 - 0.650158730158729*G0_0_1_16_1_1 - 0.0203174603174602*G0_0_1_17_1_0 + 0.081269841269842*G0_0_1_17_1_1 + 0.528253968253965*G0_0_1_18_1_0 + 0.507936507936503*G0_0_1_18_1_1 - 1.21904761904762*G0_0_1_19_1_0 - 0.975238095238092*G0_0_1_19_1_1 + 0.101587301587301*G0_1_0_0_0_0 + 0.101587301587301*G0_1_0_0_0_1 + 0.406349206349204*G0_1_0_1_0_0 - 0.121904761904762*G0_1_0_2_0_1 - 0.487619047619047*G0_1_0_3_0_0 + 0.507936507936503*G0_1_0_3_0_1 - 0.426666666666666*G0_1_0_4_0_0 - 0.893968253968251*G0_1_0_4_0_1 - 0.73142857142857*G0_1_0_5_0_0 - 0.629841269841268*G0_1_0_5_0_1 + 0.426666666666666*G0_1_0_6_0_0 + 0.650158730158729*G0_1_0_6_0_1 + 0.0203174603174602*G0_1_0_7_0_0 - 0.0812698412698419*G0_1_0_7_0_1 - 0.528253968253965*G0_1_0_8_0_0 - 0.507936507936503*G0_1_0_8_0_1 + 1.21904761904762*G0_1_0_9_0_0 + 0.975238095238092*G0_1_0_9_0_1 + 0.101587301587301*G0_1_0_10_1_0 + 0.101587301587301*G0_1_0_10_1_1 + 0.406349206349204*G0_1_0_11_1_0 - 0.121904761904762*G0_1_0_12_1_1 - 0.487619047619047*G0_1_0_13_1_0 + 0.507936507936503*G0_1_0_13_1_1 - 0.426666666666666*G0_1_0_14_1_0 - 0.893968253968251*G0_1_0_14_1_1 - 0.73142857142857*G0_1_0_15_1_0 - 0.629841269841268*G0_1_0_15_1_1 + 0.426666666666666*G0_1_0_16_1_0 + 0.650158730158729*G0_1_0_16_1_1 + 0.0203174603174602*G0_1_0_17_1_0 - 0.0812698412698419*G0_1_0_17_1_1 - 0.528253968253965*G0_1_0_18_1_0 - 0.507936507936503*G0_1_0_18_1_1 + 1.21904761904762*G0_1_0_19_1_0 + 0.975238095238092*G0_1_0_19_1_1;
    A[836] = -A[888] - 0.74497354497354*G0_0_0_0_0_0 - 0.74497354497354*G0_0_0_0_0_1 + 0.419894179894173*G0_0_0_1_0_0 + 1.25291005291004*G0_0_0_2_0_1 - 3.83999999999998*G0_0_0_3_0_0 - 1.84888888888888*G0_0_0_3_0_1 + 3.35238095238093*G0_0_0_4_0_0 + 0.528253968253969*G0_0_0_4_0_1 - 3.23047619047617*G0_0_0_5_0_0 - 0.893968253968247*G0_0_0_5_0_1 - 3.35238095238093*G0_0_0_6_0_0 + 0.386031746031743*G0_0_0_6_0_1 + 1.80825396825396*G0_0_0_7_0_0 - 0.528253968253964*G0_0_0_7_0_1 - 1.48317460317459*G0_0_0_8_0_0 + 1.84888888888889*G0_0_0_8_0_1 + 7.07047619047615*G0_0_0_9_0_0 - 0.74497354497354*G0_0_0_10_1_0 - 0.74497354497354*G0_0_0_10_1_1 + 0.419894179894173*G0_0_0_11_1_0 + 1.25291005291004*G0_0_0_12_1_1 - 3.83999999999998*G0_0_0_13_1_0 - 1.84888888888888*G0_0_0_13_1_1 + 3.35238095238093*G0_0_0_14_1_0 + 0.528253968253969*G0_0_0_14_1_1 - 3.23047619047617*G0_0_0_15_1_0 - 0.893968253968247*G0_0_0_15_1_1 - 3.35238095238093*G0_0_0_16_1_0 + 0.386031746031743*G0_0_0_16_1_1 + 1.80825396825396*G0_0_0_17_1_0 - 0.528253968253964*G0_0_0_17_1_1 - 1.48317460317459*G0_0_0_18_1_0 + 1.84888888888889*G0_0_0_18_1_1 + 7.07047619047615*G0_0_0_19_1_0 + 0.304761904761904*G0_0_1_0_0_0 + 0.304761904761904*G0_0_1_0_0_1 + 0.182857142857142*G0_0_1_2_0_1 - 0.487619047619046*G0_0_1_3_0_0 + 0.182857142857142*G0_0_1_4_0_0 - 0.487619047619043*G0_0_1_4_0_1 - 0.12190476190476*G0_0_1_5_0_0 - 0.426666666666664*G0_0_1_5_0_1 - 0.182857142857142*G0_0_1_6_0_0 - 0.0609523809523813*G0_0_1_6_0_1 - 0.792380952380949*G0_0_1_7_0_0 - 0.487619047619045*G0_0_1_7_0_1 + 0.487619047619049*G0_0_1_8_0_0 + 0.609523809523806*G0_0_1_9_0_0 + 0.975238095238087*G0_0_1_9_0_1 + 0.304761904761904*G0_0_1_10_1_0 + 0.304761904761904*G0_0_1_10_1_1 + 0.182857142857142*G0_0_1_12_1_1 - 0.487619047619046*G0_0_1_13_1_0 + 0.182857142857142*G0_0_1_14_1_0 - 0.487619047619043*G0_0_1_14_1_1 - 0.12190476190476*G0_0_1_15_1_0 - 0.426666666666664*G0_0_1_15_1_1 - 0.182857142857142*G0_0_1_16_1_0 - 0.0609523809523813*G0_0_1_16_1_1 - 0.792380952380949*G0_0_1_17_1_0 - 0.487619047619045*G0_0_1_17_1_1 + 0.487619047619049*G0_0_1_18_1_0 + 0.609523809523806*G0_0_1_19_1_0 + 0.975238095238087*G0_0_1_19_1_1 + 0.325079365079361*G0_1_0_0_0_0 + 0.325079365079362*G0_1_0_0_0_1 + 0.203174603174604*G0_1_0_2_0_1 - 0.0203174603174574*G0_1_0_3_0_0 + 0.711111111111111*G0_1_0_4_0_0 + 0.487619047619049*G0_1_0_4_0_1 + 0.386031746031746*G0_1_0_5_0_0 - 0.44698412698412*G0_1_0_5_0_1 - 0.711111111111111*G0_1_0_6_0_0 - 0.0812698412698444*G0_1_0_6_0_1 - 0.345396825396822*G0_1_0_7_0_0 + 0.487619047619044*G0_1_0_7_0_1 + 0.0203174603174605*G0_1_0_8_0_0 - 0.365714285714288*G0_1_0_9_0_0 - 0.975238095238094*G0_1_0_9_0_1 + 0.325079365079361*G0_1_0_10_1_0 + 0.325079365079362*G0_1_0_10_1_1 + 0.203174603174604*G0_1_0_12_1_1 - 0.0203174603174574*G0_1_0_13_1_0 + 0.711111111111111*G0_1_0_14_1_0 + 0.487619047619049*G0_1_0_14_1_1 + 0.386031746031746*G0_1_0_15_1_0 - 0.44698412698412*G0_1_0_15_1_1 - 0.711111111111111*G0_1_0_16_1_0 - 0.0812698412698444*G0_1_0_16_1_1 - 0.345396825396822*G0_1_0_17_1_0 + 0.487619047619044*G0_1_0_17_1_1 + 0.0203174603174605*G0_1_0_18_1_0 - 0.365714285714288*G0_1_0_19_1_0 - 0.975238095238094*G0_1_0_19_1_1 + 0.121904761904761*G0_1_1_0_0_0 + 0.121904761904761*G0_1_1_0_0_1 - 0.12190476190476*G0_1_1_2_0_1 - 0.121904761904758*G0_1_1_4_0_0 - 0.243809523809518*G0_1_1_5_0_0 - 0.365714285714281*G0_1_1_5_0_1 + 0.121904761904758*G0_1_1_6_0_0 + 0.36571428571428*G0_1_1_6_0_1 - 0.121904761904762*G0_1_1_7_0_0 + 0.243809523809521*G0_1_1_9_0_0 + 0.121904761904761*G0_1_1_10_1_0 + 0.121904761904761*G0_1_1_10_1_1 - 0.12190476190476*G0_1_1_12_1_1 - 0.121904761904758*G0_1_1_14_1_0 - 0.243809523809518*G0_1_1_15_1_0 - 0.365714285714281*G0_1_1_15_1_1 + 0.121904761904758*G0_1_1_16_1_0 + 0.36571428571428*G0_1_1_16_1_1 - 0.121904761904762*G0_1_1_17_1_0 + 0.243809523809521*G0_1_1_19_1_0;
    A[363] = -A[836] - 1.47640211640211*G0_0_0_0_0_0 - 1.47640211640211*G0_0_0_0_0_1 + 0.541798941798935*G0_0_0_1_0_0 - 0.697566137566133*G0_0_0_2_0_1 - 0.0609523809523815*G0_0_0_3_0_0 - 0.50793650793651*G0_0_0_3_0_1 + 0.182857142857146*G0_0_0_4_0_0 + 1.86920634920634*G0_0_0_4_0_1 - 3.35238095238093*G0_0_0_5_0_0 - 0.284444444444443*G0_0_0_5_0_1 - 0.182857142857146*G0_0_0_6_0_0 + 2.45841269841268*G0_0_0_6_0_1 + 4.12444444444442*G0_0_0_7_0_0 + 1.05650793650793*G0_0_0_7_0_1 - 3.18984126984125*G0_0_0_8_0_0 + 0.507936507936511*G0_0_0_8_0_1 + 3.41333333333331*G0_0_0_9_0_0 - 2.92571428571428*G0_0_0_9_0_1 - 1.47640211640211*G0_0_0_10_1_0 - 1.47640211640211*G0_0_0_10_1_1 + 0.541798941798935*G0_0_0_11_1_0 - 0.697566137566133*G0_0_0_12_1_1 - 0.0609523809523815*G0_0_0_13_1_0 - 0.50793650793651*G0_0_0_13_1_1 + 0.182857142857146*G0_0_0_14_1_0 + 1.86920634920634*G0_0_0_14_1_1 - 3.35238095238093*G0_0_0_15_1_0 - 0.284444444444443*G0_0_0_15_1_1 - 0.182857142857146*G0_0_0_16_1_0 + 2.45841269841268*G0_0_0_16_1_1 + 4.12444444444442*G0_0_0_17_1_0 + 1.05650793650793*G0_0_0_17_1_1 - 3.18984126984125*G0_0_0_18_1_0 + 0.507936507936511*G0_0_0_18_1_1 + 3.41333333333331*G0_0_0_19_1_0 - 2.92571428571428*G0_0_0_19_1_1 + 0.14222222222222*G0_1_0_0_0_0 + 0.14222222222222*G0_1_0_0_0_1 - 0.345396825396823*G0_1_0_2_0_1 + 0.711111111111108*G0_1_0_3_0_0 + 0.162539682539683*G0_1_0_4_0_0 + 1.21904761904761*G0_1_0_4_0_1 + 0.020317460317457*G0_1_0_5_0_0 - 0.629841269841266*G0_1_0_5_0_1 - 0.162539682539683*G0_1_0_6_0_0 + 0.833015873015869*G0_1_0_6_0_1 + 0.568888888888886*G0_1_0_7_0_0 + 1.21904761904761*G0_1_0_7_0_1 - 0.711111111111109*G0_1_0_8_0_0 - 0.731428571428565*G0_1_0_9_0_0 - 2.43809523809522*G0_1_0_9_0_1 + 0.14222222222222*G0_1_0_10_1_0 + 0.14222222222222*G0_1_0_10_1_1 - 0.345396825396823*G0_1_0_12_1_1 + 0.711111111111108*G0_1_0_13_1_0 + 0.162539682539683*G0_1_0_14_1_0 + 1.21904761904761*G0_1_0_14_1_1 + 0.020317460317457*G0_1_0_15_1_0 - 0.629841269841266*G0_1_0_15_1_1 - 0.162539682539683*G0_1_0_16_1_0 + 0.833015873015869*G0_1_0_16_1_1 + 0.568888888888886*G0_1_0_17_1_0 + 1.21904761904761*G0_1_0_17_1_1 - 0.711111111111109*G0_1_0_18_1_0 - 0.731428571428565*G0_1_0_19_1_0 - 2.43809523809522*G0_1_0_19_1_1;
    A[567] = A[363] + 0.020317460317461*G0_0_1_0_0_0 + 0.0203174603174609*G0_0_1_0_0_1 - 0.406349206349206*G0_0_1_1_0_0 - 0.243809523809523*G0_0_1_2_0_1 + 0.731428571428568*G0_0_1_3_0_0 - 0.507936507936508*G0_0_1_3_0_1 + 0.0609523809523816*G0_0_1_4_0_0 + 1.13777777777777*G0_0_1_4_0_1 + 0.243809523809524*G0_0_1_5_0_0 + 0.0203174603174601*G0_0_1_5_0_1 - 0.0609523809523813*G0_0_1_6_0_0 + 0.203174603174602*G0_0_1_6_0_1 + 0.1015873015873*G0_0_1_7_0_0 + 0.325079365079364*G0_0_1_7_0_1 + 0.284444444444445*G0_0_1_8_0_0 + 0.507936507936508*G0_0_1_8_0_1 - 0.975238095238092*G0_0_1_9_0_0 - 1.46285714285714*G0_0_1_9_0_1 + 0.020317460317461*G0_0_1_10_1_0 + 0.0203174603174609*G0_0_1_10_1_1 - 0.406349206349206*G0_0_1_11_1_0 - 0.243809523809523*G0_0_1_12_1_1 + 0.731428571428568*G0_0_1_13_1_0 - 0.507936507936508*G0_0_1_13_1_1 + 0.0609523809523816*G0_0_1_14_1_0 + 1.13777777777777*G0_0_1_14_1_1 + 0.243809523809524*G0_0_1_15_1_0 + 0.0203174603174601*G0_0_1_15_1_1 - 0.0609523809523813*G0_0_1_16_1_0 + 0.203174603174602*G0_0_1_16_1_1 + 0.1015873015873*G0_0_1_17_1_0 + 0.325079365079364*G0_0_1_17_1_1 + 0.284444444444445*G0_0_1_18_1_0 + 0.507936507936508*G0_0_1_18_1_1 - 0.975238095238092*G0_0_1_19_1_0 - 1.46285714285714*G0_0_1_19_1_1 - 0.020317460317461*G0_1_0_0_0_0 - 0.0203174603174609*G0_1_0_0_0_1 + 0.406349206349206*G0_1_0_1_0_0 + 0.243809523809523*G0_1_0_2_0_1 - 0.731428571428568*G0_1_0_3_0_0 + 0.507936507936508*G0_1_0_3_0_1 - 0.0609523809523816*G0_1_0_4_0_0 - 1.13777777777777*G0_1_0_4_0_1 - 0.243809523809524*G0_1_0_5_0_0 - 0.0203174603174601*G0_1_0_5_0_1 + 0.0609523809523814*G0_1_0_6_0_0 - 0.203174603174602*G0_1_0_6_0_1 - 0.1015873015873*G0_1_0_7_0_0 - 0.325079365079363*G0_1_0_7_0_1 - 0.284444444444445*G0_1_0_8_0_0 - 0.507936507936508*G0_1_0_8_0_1 + 0.975238095238092*G0_1_0_9_0_0 + 1.46285714285714*G0_1_0_9_0_1 - 0.020317460317461*G0_1_0_10_1_0 - 0.0203174603174609*G0_1_0_10_1_1 + 0.406349206349206*G0_1_0_11_1_0 + 0.243809523809523*G0_1_0_12_1_1 - 0.731428571428568*G0_1_0_13_1_0 + 0.507936507936508*G0_1_0_13_1_1 - 0.0609523809523816*G0_1_0_14_1_0 - 1.13777777777777*G0_1_0_14_1_1 - 0.243809523809524*G0_1_0_15_1_0 - 0.0203174603174601*G0_1_0_15_1_1 + 0.0609523809523814*G0_1_0_16_1_0 - 0.203174603174602*G0_1_0_16_1_1 - 0.1015873015873*G0_1_0_17_1_0 - 0.325079365079363*G0_1_0_17_1_1 - 0.284444444444445*G0_1_0_18_1_0 - 0.507936507936508*G0_1_0_18_1_1 + 0.975238095238092*G0_1_0_19_1_0 + 1.46285714285714*G0_1_0_19_1_1;
    A[658] = A[567] - 0.243809523809524*G0_0_0_0_0_0 - 0.243809523809524*G0_0_0_0_0_1 - 0.243809523809522*G0_0_0_1_0_0 - 0.731428571428565*G0_0_0_3_0_0 - 0.853333333333326*G0_0_0_3_0_1 - 0.12190476190476*G0_0_0_4_0_1 - 0.731428571428567*G0_0_0_5_0_0 + 0.121904761904764*G0_0_0_5_0_1 + 0.121904761904763*G0_0_0_6_0_1 + 0.243809523809527*G0_0_0_7_0_0 - 0.609523809523805*G0_0_0_7_0_1 + 0.24380952380952*G0_0_0_8_0_0 + 0.853333333333327*G0_0_0_8_0_1 + 1.46285714285713*G0_0_0_9_0_0 + 0.731428571428564*G0_0_0_9_0_1 - 0.243809523809524*G0_0_0_10_1_0 - 0.243809523809524*G0_0_0_10_1_1 - 0.243809523809522*G0_0_0_11_1_0 - 0.731428571428565*G0_0_0_13_1_0 - 0.853333333333326*G0_0_0_13_1_1 - 0.12190476190476*G0_0_0_14_1_1 - 0.731428571428567*G0_0_0_15_1_0 + 0.121904761904764*G0_0_0_15_1_1 + 0.121904761904763*G0_0_0_16_1_1 + 0.243809523809527*G0_0_0_17_1_0 - 0.609523809523805*G0_0_0_17_1_1 + 0.24380952380952*G0_0_0_18_1_0 + 0.853333333333327*G0_0_0_18_1_1 + 1.46285714285713*G0_0_0_19_1_0 + 0.731428571428564*G0_0_0_19_1_1 - 0.196402116402115*G0_0_1_0_0_0 - 0.196402116402115*G0_0_1_0_0_1 - 0.0474074074074055*G0_0_1_1_0_0 + 0.135449735449737*G0_0_1_2_0_1 - 0.365714285714283*G0_0_1_3_0_0 - 0.182857142857138*G0_0_1_3_0_1 - 0.365714285714286*G0_0_1_4_0_1 - 0.365714285714281*G0_0_1_5_0_0 + 0.304761904761904*G0_0_1_5_0_1 - 0.243809523809526*G0_0_1_6_0_1 - 0.0609523809523831*G0_0_1_7_0_0 - 0.731428571428568*G0_0_1_7_0_1 + 0.304761904761904*G0_0_1_8_0_0 + 0.182857142857138*G0_0_1_8_0_1 + 0.731428571428564*G0_0_1_9_0_0 + 1.09714285714285*G0_0_1_9_0_1 - 0.196402116402115*G0_0_1_10_1_0 - 0.196402116402115*G0_0_1_10_1_1 - 0.0474074074074055*G0_0_1_11_1_0 + 0.135449735449737*G0_0_1_12_1_1 - 0.365714285714283*G0_0_1_13_1_0 - 0.182857142857138*G0_0_1_13_1_1 - 0.365714285714286*G0_0_1_14_1_1 - 0.365714285714281*G0_0_1_15_1_0 + 0.304761904761904*G0_0_1_15_1_1 - 0.243809523809526*G0_0_1_16_1_1 - 0.0609523809523831*G0_0_1_17_1_0 - 0.731428571428568*G0_0_1_17_1_1 + 0.304761904761904*G0_0_1_18_1_0 + 0.182857142857138*G0_0_1_18_1_1 + 0.731428571428564*G0_0_1_19_1_0 + 1.09714285714285*G0_0_1_19_1_1 + 0.230264550264551*G0_1_0_0_0_0 + 0.230264550264551*G0_1_0_0_0_1 - 0.474074074074076*G0_1_0_1_0_0 - 0.35216931216931*G0_1_0_2_0_1 + 0.121904761904759*G0_1_0_3_0_0 - 0.914285714285717*G0_1_0_3_0_1 + 0.121904761904764*G0_1_0_4_0_0 + 1.03619047619047*G0_1_0_4_0_1 - 0.853333333333326*G0_1_0_5_0_0 - 0.91428571428571*G0_1_0_5_0_1 - 0.121904761904764*G0_1_0_6_0_0 + 1.03619047619047*G0_1_0_6_0_1 - 0.243809523809527*G0_1_0_7_0_0 - 0.182857142857142*G0_1_0_7_0_1 + 0.48761904761905*G0_1_0_8_0_0 + 0.914285714285718*G0_1_0_8_0_1 + 0.731428571428567*G0_1_0_9_0_0 - 0.853333333333333*G0_1_0_9_0_1 + 0.230264550264551*G0_1_0_10_1_0 + 0.230264550264551*G0_1_0_10_1_1 - 0.474074074074076*G0_1_0_11_1_0 - 0.35216931216931*G0_1_0_12_1_1 + 0.121904761904759*G0_1_0_13_1_0 - 0.914285714285717*G0_1_0_13_1_1 + 0.121904761904764*G0_1_0_14_1_0 + 1.03619047619047*G0_1_0_14_1_1 - 0.853333333333326*G0_1_0_15_1_0 - 0.91428571428571*G0_1_0_15_1_1 - 0.121904761904764*G0_1_0_16_1_0 + 1.03619047619047*G0_1_0_16_1_1 - 0.243809523809527*G0_1_0_17_1_0 - 0.182857142857142*G0_1_0_17_1_1 + 0.48761904761905*G0_1_0_18_1_0 + 0.914285714285718*G0_1_0_18_1_1 + 0.731428571428567*G0_1_0_19_1_0 - 0.853333333333333*G0_1_0_19_1_1 + 0.474074074074068*G0_1_1_0_0_0 + 0.474074074074068*G0_1_1_0_0_1 + 0.196402116402114*G0_1_1_1_0_0 - 0.108359788359786*G0_1_1_2_0_1 + 0.487619047619041*G0_1_1_3_0_0 + 0.670476190476182*G0_1_1_3_0_1 + 0.0609523809523833*G0_1_1_4_0_0 + 0.182857142857141*G0_1_1_4_0_1 - 0.914285714285702*G0_1_1_5_0_1 - 0.0609523809523831*G0_1_1_6_0_0 + 0.54857142857142*G0_1_1_6_0_1 - 0.609523809523801*G0_1_1_7_0_0 + 0.3047619047619*G0_1_1_7_0_1 - 0.0609523809523806*G0_1_1_8_0_0 - 0.670476190476182*G0_1_1_8_0_1 - 0.487619047619041*G0_1_1_9_0_0 - 0.487619047619042*G0_1_1_9_0_1 + 0.474074074074068*G0_1_1_10_1_0 + 0.474074074074068*G0_1_1_10_1_1 + 0.196402116402114*G0_1_1_11_1_0 - 0.108359788359786*G0_1_1_12_1_1 + 0.487619047619041*G0_1_1_13_1_0 + 0.670476190476182*G0_1_1_13_1_1 + 0.0609523809523833*G0_1_1_14_1_0 + 0.182857142857141*G0_1_1_14_1_1 - 0.914285714285702*G0_1_1_15_1_1 - 0.0609523809523831*G0_1_1_16_1_0 + 0.54857142857142*G0_1_1_16_1_1 - 0.609523809523801*G0_1_1_17_1_0 + 0.3047619047619*G0_1_1_17_1_1 - 0.0609523809523806*G0_1_1_18_1_0 - 0.670476190476182*G0_1_1_18_1_1 - 0.487619047619041*G0_1_1_19_1_0 - 0.487619047619042*G0_1_1_19_1_1;
    A[396] = A[658] + 0.406349206349205*G0_0_1_0_0_0 + 0.406349206349205*G0_0_1_0_0_1 - 0.0203174603174637*G0_0_1_1_0_0 - 0.243809523809524*G0_0_1_2_0_1 - 0.243809523809526*G0_0_1_3_0_0 - 0.223492063492071*G0_0_1_3_0_1 + 0.0609523809523802*G0_0_1_4_0_0 + 0.264126984126985*G0_0_1_4_0_1 - 0.731428571428569*G0_0_1_5_0_0 - 1.23936507936507*G0_0_1_5_0_1 - 0.0609523809523804*G0_0_1_6_0_0 + 1.07682539682539*G0_0_1_6_0_1 - 0.284444444444443*G0_0_1_7_0_0 + 0.223492063492063*G0_0_1_7_0_1 - 0.101587301587298*G0_0_1_8_0_0 + 0.223492063492071*G0_0_1_8_0_1 + 0.975238095238096*G0_0_1_9_0_0 - 0.487619047619048*G0_0_1_9_0_1 + 0.406349206349205*G0_0_1_10_1_0 + 0.406349206349205*G0_0_1_10_1_1 - 0.0203174603174637*G0_0_1_11_1_0 - 0.243809523809524*G0_0_1_12_1_1 - 0.243809523809526*G0_0_1_13_1_0 - 0.223492063492071*G0_0_1_13_1_1 + 0.0609523809523802*G0_0_1_14_1_0 + 0.264126984126985*G0_0_1_14_1_1 - 0.731428571428569*G0_0_1_15_1_0 - 1.23936507936507*G0_0_1_15_1_1 - 0.0609523809523804*G0_0_1_16_1_0 + 1.07682539682539*G0_0_1_16_1_1 - 0.284444444444443*G0_0_1_17_1_0 + 0.223492063492063*G0_0_1_17_1_1 - 0.101587301587298*G0_0_1_18_1_0 + 0.223492063492071*G0_0_1_18_1_1 + 0.975238095238096*G0_0_1_19_1_0 - 0.487619047619048*G0_0_1_19_1_1 - 0.406349206349205*G0_1_0_0_0_0 - 0.406349206349205*G0_1_0_0_0_1 + 0.0203174603174638*G0_1_0_1_0_0 + 0.243809523809524*G0_1_0_2_0_1 + 0.243809523809526*G0_1_0_3_0_0 + 0.223492063492071*G0_1_0_3_0_1 - 0.0609523809523801*G0_1_0_4_0_0 - 0.264126984126985*G0_1_0_4_0_1 + 0.731428571428569*G0_1_0_5_0_0 + 1.23936507936507*G0_1_0_5_0_1 + 0.0609523809523802*G0_1_0_6_0_0 - 1.07682539682539*G0_1_0_6_0_1 + 0.284444444444443*G0_1_0_7_0_0 - 0.223492063492063*G0_1_0_7_0_1 + 0.101587301587298*G0_1_0_8_0_0 - 0.223492063492071*G0_1_0_8_0_1 - 0.975238095238096*G0_1_0_9_0_0 + 0.487619047619048*G0_1_0_9_0_1 - 0.406349206349205*G0_1_0_10_1_0 - 0.406349206349205*G0_1_0_10_1_1 + 0.0203174603174638*G0_1_0_11_1_0 + 0.243809523809524*G0_1_0_12_1_1 + 0.243809523809526*G0_1_0_13_1_0 + 0.223492063492071*G0_1_0_13_1_1 - 0.0609523809523801*G0_1_0_14_1_0 - 0.264126984126985*G0_1_0_14_1_1 + 0.731428571428569*G0_1_0_15_1_0 + 1.23936507936507*G0_1_0_15_1_1 + 0.0609523809523802*G0_1_0_16_1_0 - 1.07682539682539*G0_1_0_16_1_1 + 0.284444444444443*G0_1_0_17_1_0 - 0.223492063492063*G0_1_0_17_1_1 + 0.101587301587298*G0_1_0_18_1_0 - 0.223492063492071*G0_1_0_18_1_1 - 0.975238095238096*G0_1_0_19_1_0 + 0.487619047619048*G0_1_0_19_1_1;
    A[342] = -A[567] - 1.47640211640211*G0_0_0_0_0_0 - 1.47640211640211*G0_0_0_0_0_1 + 0.541798941798935*G0_0_0_1_0_0 - 0.697566137566133*G0_0_0_2_0_1 - 0.0609523809523811*G0_0_0_3_0_0 - 0.50793650793651*G0_0_0_3_0_1 + 0.182857142857146*G0_0_0_4_0_0 + 1.86920634920634*G0_0_0_4_0_1 - 3.35238095238093*G0_0_0_5_0_0 - 0.284444444444443*G0_0_0_5_0_1 - 0.182857142857146*G0_0_0_6_0_0 + 2.45841269841268*G0_0_0_6_0_1 + 4.12444444444442*G0_0_0_7_0_0 + 1.05650793650793*G0_0_0_7_0_1 - 3.18984126984125*G0_0_0_8_0_0 + 0.50793650793651*G0_0_0_8_0_1 + 3.41333333333331*G0_0_0_9_0_0 - 2.92571428571428*G0_0_0_9_0_1 - 1.47640211640211*G0_0_0_10_1_0 - 1.47640211640211*G0_0_0_10_1_1 + 0.541798941798935*G0_0_0_11_1_0 - 0.697566137566133*G0_0_0_12_1_1 - 0.0609523809523811*G0_0_0_13_1_0 - 0.50793650793651*G0_0_0_13_1_1 + 0.182857142857146*G0_0_0_14_1_0 + 1.86920634920634*G0_0_0_14_1_1 - 3.35238095238093*G0_0_0_15_1_0 - 0.284444444444443*G0_0_0_15_1_1 - 0.182857142857146*G0_0_0_16_1_0 + 2.45841269841268*G0_0_0_16_1_1 + 4.12444444444442*G0_0_0_17_1_0 + 1.05650793650793*G0_0_0_17_1_1 - 3.18984126984125*G0_0_0_18_1_0 + 0.50793650793651*G0_0_0_18_1_1 + 3.41333333333331*G0_0_0_19_1_0 - 2.92571428571428*G0_0_0_19_1_1 + 0.14222222222222*G0_0_1_0_0_0 + 0.14222222222222*G0_0_1_0_0_1 - 0.345396825396823*G0_0_1_2_0_1 + 0.711111111111108*G0_0_1_3_0_0 + 0.162539682539683*G0_0_1_4_0_0 + 1.21904761904761*G0_0_1_4_0_1 + 0.0203174603174571*G0_0_1_5_0_0 - 0.629841269841266*G0_0_1_5_0_1 - 0.162539682539683*G0_0_1_6_0_0 + 0.833015873015869*G0_0_1_6_0_1 + 0.568888888888887*G0_0_1_7_0_0 + 1.21904761904761*G0_0_1_7_0_1 - 0.711111111111109*G0_0_1_8_0_0 - 0.731428571428566*G0_0_1_9_0_0 - 2.43809523809522*G0_0_1_9_0_1 + 0.14222222222222*G0_0_1_10_1_0 + 0.14222222222222*G0_0_1_10_1_1 - 0.345396825396823*G0_0_1_12_1_1 + 0.711111111111108*G0_0_1_13_1_0 + 0.162539682539683*G0_0_1_14_1_0 + 1.21904761904761*G0_0_1_14_1_1 + 0.0203174603174571*G0_0_1_15_1_0 - 0.629841269841266*G0_0_1_15_1_1 - 0.162539682539683*G0_0_1_16_1_0 + 0.833015873015869*G0_0_1_16_1_1 + 0.568888888888887*G0_0_1_17_1_0 + 1.21904761904761*G0_0_1_17_1_1 - 0.711111111111109*G0_0_1_18_1_0 - 0.731428571428566*G0_0_1_19_1_0 - 2.43809523809522*G0_0_1_19_1_1;
    A[441] = 0.0;
    A[329] = 0.0;
    A[390] = A[855];
    A[346] = 0.0;
    A[804] = A[363] - 1.01587301587302*G0_0_0_0_0_0 - 1.01587301587302*G0_0_0_0_0_1 + 0.77206349206349*G0_0_0_1_0_0 + 0.772063492063487*G0_0_0_2_0_1 - 0.934603174603169*G0_0_0_3_0_0 + 1.07682539682539*G0_0_0_3_0_1 - 0.142222222222226*G0_0_0_4_0_0 - 2.15365079365079*G0_0_0_4_0_1 + 0.203174603174601*G0_0_0_5_0_0 + 2.13333333333333*G0_0_0_5_0_1 + 0.142222222222226*G0_0_0_6_0_0 - 1.8895238095238*G0_0_0_6_0_1 + 0.914285714285717*G0_0_0_7_0_0 - 1.01587301587301*G0_0_0_7_0_1 - 0.670476190476191*G0_0_0_8_0_0 - 1.07682539682539*G0_0_0_8_0_1 + 0.731428571428569*G0_0_0_9_0_0 + 3.1695238095238*G0_0_0_9_0_1 - 1.01587301587302*G0_0_0_10_1_0 - 1.01587301587302*G0_0_0_10_1_1 + 0.77206349206349*G0_0_0_11_1_0 + 0.772063492063487*G0_0_0_12_1_1 - 0.934603174603169*G0_0_0_13_1_0 + 1.07682539682539*G0_0_0_13_1_1 - 0.142222222222226*G0_0_0_14_1_0 - 2.15365079365079*G0_0_0_14_1_1 + 0.203174603174601*G0_0_0_15_1_0 + 2.13333333333333*G0_0_0_15_1_1 + 0.142222222222226*G0_0_0_16_1_0 - 1.8895238095238*G0_0_0_16_1_1 + 0.914285714285717*G0_0_0_17_1_0 - 1.01587301587301*G0_0_0_17_1_1 - 0.670476190476191*G0_0_0_18_1_0 - 1.07682539682539*G0_0_0_18_1_1 + 0.731428571428569*G0_0_0_19_1_0 + 3.1695238095238*G0_0_0_19_1_1 - 0.0846560846560828*G0_0_1_0_0_0 - 0.0846560846560827*G0_0_1_0_0_1 + 0.592592592592585*G0_0_1_1_0_0 + 0.308148148148145*G0_0_1_2_0_1 + 0.13206349206349*G0_0_1_3_0_0 + 1.37142857142856*G0_0_1_3_0_1 - 0.0812698412698415*G0_0_1_4_0_0 - 1.03619047619047*G0_0_1_4_0_1 - 0.13206349206349*G0_0_1_5_0_0 + 0.223492063492062*G0_0_1_5_0_1 + 0.0812698412698416*G0_0_1_6_0_0 - 0.446984126984125*G0_0_1_6_0_1 - 0.375873015873018*G0_0_1_7_0_0 - 0.73142857142857*G0_0_1_7_0_1 - 0.132063492063484*G0_0_1_8_0_0 - 1.37142857142856*G0_0_1_8_0_1 + 1.76761904761904*G0_0_1_9_0_1 - 0.0846560846560828*G0_0_1_10_1_0 - 0.0846560846560827*G0_0_1_10_1_1 + 0.592592592592585*G0_0_1_11_1_0 + 0.308148148148145*G0_0_1_12_1_1 + 0.13206349206349*G0_0_1_13_1_0 + 1.37142857142856*G0_0_1_13_1_1 - 0.0812698412698415*G0_0_1_14_1_0 - 1.03619047619047*G0_0_1_14_1_1 - 0.13206349206349*G0_0_1_15_1_0 + 0.223492063492062*G0_0_1_15_1_1 + 0.0812698412698416*G0_0_1_16_1_0 - 0.446984126984125*G0_0_1_16_1_1 - 0.375873015873018*G0_0_1_17_1_0 - 0.73142857142857*G0_0_1_17_1_1 - 0.132063492063484*G0_0_1_18_1_0 - 1.37142857142856*G0_0_1_18_1_1 + 1.76761904761904*G0_0_1_19_1_1 + 0.0304761904761913*G0_1_0_0_0_0 + 0.0304761904761917*G0_1_0_0_0_1 + 0.863492063492059*G0_1_0_1_0_0 + 0.355555555555554*G0_1_0_2_0_1 - 0.9447619047619*G0_1_0_3_0_0 + 1.16825396825396*G0_1_0_3_0_1 - 1.60507936507936*G0_1_0_4_0_1 - 0.0304761904761883*G0_1_0_5_0_0 - 0.162539682539683*G0_1_0_5_0_1 - 0.223492063492063*G0_1_0_6_0_1 + 0.19301587301587*G0_1_0_7_0_0 + 0.325079365079365*G0_1_0_7_0_1 - 1.08698412698412*G0_1_0_8_0_0 - 1.16825396825396*G0_1_0_8_0_1 + 0.975238095238088*G0_1_0_9_0_0 + 1.27999999999999*G0_1_0_9_0_1 + 0.0304761904761913*G0_1_0_10_1_0 + 0.0304761904761917*G0_1_0_10_1_1 + 0.863492063492059*G0_1_0_11_1_0 + 0.355555555555554*G0_1_0_12_1_1 - 0.9447619047619*G0_1_0_13_1_0 + 1.16825396825396*G0_1_0_13_1_1 - 1.60507936507936*G0_1_0_14_1_1 - 0.0304761904761883*G0_1_0_15_1_0 - 0.162539682539683*G0_1_0_15_1_1 - 0.223492063492063*G0_1_0_16_1_1 + 0.19301587301587*G0_1_0_17_1_0 + 0.325079365079365*G0_1_0_17_1_1 - 1.08698412698412*G0_1_0_18_1_0 - 1.16825396825396*G0_1_0_18_1_1 + 0.975238095238088*G0_1_0_19_1_0 + 1.27999999999999*G0_1_0_19_1_1 - 0.196402116402115*G0_1_1_0_0_0 - 0.196402116402115*G0_1_1_0_0_1 + 1.35449735449734*G0_1_1_1_0_0 + 0.196402116402115*G0_1_1_2_0_1 + 0.2031746031746*G0_1_1_3_0_0 + 2.33650793650791*G0_1_1_3_0_1 - 0.0406349206349199*G0_1_1_4_0_0 - 1.01587301587301*G0_1_1_4_0_1 - 0.0812698412698404*G0_1_1_5_0_0 - 0.12190476190476*G0_1_1_5_0_1 + 0.0406349206349199*G0_1_1_6_0_0 + 0.12190476190476*G0_1_1_6_0_1 + 0.975238095238088*G0_1_1_7_0_0 + 1.01587301587301*G0_1_1_7_0_1 - 2.13333333333332*G0_1_1_8_0_0 - 2.33650793650792*G0_1_1_8_0_1 - 0.12190476190476*G0_1_1_9_0_0 - 0.196402116402115*G0_1_1_10_1_0 - 0.196402116402115*G0_1_1_10_1_1 + 1.35449735449734*G0_1_1_11_1_0 + 0.196402116402115*G0_1_1_12_1_1 + 0.2031746031746*G0_1_1_13_1_0 + 2.33650793650791*G0_1_1_13_1_1 - 0.0406349206349199*G0_1_1_14_1_0 - 1.01587301587301*G0_1_1_14_1_1 - 0.0812698412698404*G0_1_1_15_1_0 - 0.12190476190476*G0_1_1_15_1_1 + 0.0406349206349199*G0_1_1_16_1_0 + 0.12190476190476*G0_1_1_16_1_1 + 0.975238095238088*G0_1_1_17_1_0 + 1.01587301587301*G0_1_1_17_1_1 - 2.13333333333332*G0_1_1_18_1_0 - 2.33650793650792*G0_1_1_18_1_1 - 0.12190476190476*G0_1_1_19_1_0;
    A[27] = 0.0;
    A[728] = 0.0;
    A[387] = 0.0;
    A[56] = 0.0;
    A[755] = 0.0;
    A[416] = 0.0;
    A[61] = 0.017010582010582*G0_1_0_0_0_0 + 0.017010582010582*G0_1_0_0_0_1 - 0.137962962962963*G0_1_0_1_0_0 - 0.137962962962962*G0_1_0_2_0_1 + 0.109444444444444*G0_1_0_3_0_0 - 0.197222222222223*G0_1_0_3_0_1 - 0.197222222222221*G0_1_0_4_0_0 + 0.109444444444444*G0_1_0_4_0_1 - 0.0532539682539681*G0_1_0_5_0_0 - 0.0366666666666665*G0_1_0_5_0_1 + 0.197222222222221*G0_1_0_6_0_0 + 0.157619047619047*G0_1_0_6_0_1 - 0.0366666666666668*G0_1_0_7_0_0 - 0.0532539682539685*G0_1_0_7_0_1 + 0.157619047619048*G0_1_0_8_0_0 + 0.197222222222223*G0_1_0_8_0_1 - 0.0561904761904756*G0_1_0_9_0_0 - 0.0561904761904759*G0_1_0_9_0_1 + 0.017010582010582*G0_1_0_10_1_0 + 0.017010582010582*G0_1_0_10_1_1 - 0.137962962962963*G0_1_0_11_1_0 - 0.137962962962962*G0_1_0_12_1_1 + 0.109444444444444*G0_1_0_13_1_0 - 0.197222222222223*G0_1_0_13_1_1 - 0.197222222222221*G0_1_0_14_1_0 + 0.109444444444444*G0_1_0_14_1_1 - 0.0532539682539681*G0_1_0_15_1_0 - 0.0366666666666665*G0_1_0_15_1_1 + 0.197222222222221*G0_1_0_16_1_0 + 0.157619047619047*G0_1_0_16_1_1 - 0.0366666666666668*G0_1_0_17_1_0 - 0.0532539682539685*G0_1_0_17_1_1 + 0.157619047619048*G0_1_0_18_1_0 + 0.197222222222223*G0_1_0_18_1_1 - 0.0561904761904756*G0_1_0_19_1_0 - 0.0561904761904759*G0_1_0_19_1_1;
    A[466] = -A[61] - 0.137962962962963*G0_0_0_0_0_0 - 0.137962962962963*G0_0_0_0_0_1 + 0.137962962962963*G0_0_0_1_0_0 + 0.017010582010582*G0_0_0_2_0_1 + 0.0396031746031743*G0_0_0_3_0_0 + 0.197222222222222*G0_0_0_3_0_1 - 0.0165873015873017*G0_0_0_4_0_0 - 0.0532539682539684*G0_0_0_4_0_1 - 0.0396031746031746*G0_0_0_5_0_0 + 0.157619047619048*G0_0_0_5_0_1 + 0.0165873015873017*G0_0_0_6_0_0 - 0.0366666666666669*G0_0_0_6_0_1 + 0.306666666666666*G0_0_0_7_0_0 + 0.109444444444444*G0_0_0_7_0_1 - 0.306666666666666*G0_0_0_8_0_0 - 0.197222222222222*G0_0_0_8_0_1 - 0.0561904761904752*G0_0_0_9_0_1 - 0.137962962962963*G0_0_0_10_1_0 - 0.137962962962963*G0_0_0_10_1_1 + 0.137962962962963*G0_0_0_11_1_0 + 0.017010582010582*G0_0_0_12_1_1 + 0.0396031746031743*G0_0_0_13_1_0 + 0.197222222222222*G0_0_0_13_1_1 - 0.0165873015873017*G0_0_0_14_1_0 - 0.0532539682539684*G0_0_0_14_1_1 - 0.0396031746031746*G0_0_0_15_1_0 + 0.157619047619048*G0_0_0_15_1_1 + 0.0165873015873017*G0_0_0_16_1_0 - 0.0366666666666669*G0_0_0_16_1_1 + 0.306666666666666*G0_0_0_17_1_0 + 0.109444444444444*G0_0_0_17_1_1 - 0.306666666666666*G0_0_0_18_1_0 - 0.197222222222222*G0_0_0_18_1_1 - 0.0561904761904752*G0_0_0_19_1_1 - 0.120952380952381*G0_1_0_0_0_0 - 0.120952380952381*G0_1_0_0_0_1 - 0.12095238095238*G0_1_0_2_0_1 + 0.149047619047618*G0_1_0_3_0_0 - 0.213809523809523*G0_1_0_4_0_0 + 0.056190476190476*G0_1_0_4_0_1 - 0.0928571428571427*G0_1_0_5_0_0 + 0.120952380952381*G0_1_0_5_0_1 + 0.213809523809523*G0_1_0_6_0_0 + 0.12095238095238*G0_1_0_6_0_1 + 0.269999999999999*G0_1_0_7_0_0 + 0.0561904761904751*G0_1_0_7_0_1 - 0.149047619047617*G0_1_0_8_0_0 - 0.0561904761904752*G0_1_0_9_0_0 - 0.112380952380951*G0_1_0_9_0_1 - 0.120952380952381*G0_1_0_10_1_0 - 0.120952380952381*G0_1_0_10_1_1 - 0.12095238095238*G0_1_0_12_1_1 + 0.149047619047618*G0_1_0_13_1_0 - 0.213809523809523*G0_1_0_14_1_0 + 0.056190476190476*G0_1_0_14_1_1 - 0.0928571428571427*G0_1_0_15_1_0 + 0.120952380952381*G0_1_0_15_1_1 + 0.213809523809523*G0_1_0_16_1_0 + 0.12095238095238*G0_1_0_16_1_1 + 0.269999999999999*G0_1_0_17_1_0 + 0.0561904761904751*G0_1_0_17_1_1 - 0.149047619047617*G0_1_0_18_1_0 - 0.0561904761904752*G0_1_0_19_1_0 - 0.112380952380951*G0_1_0_19_1_1;
    A[782] = 0.0;
    A[893] = A[428];
    A[118] = 0.0;
    A[821] = 0.0;
    A[852] = 0.0;
    A[212] = A[677];
    A[626] = A[161];
    A[490] = 0.0;
    A[209] = 0.0;
    A[577] = 0.0;
    A[521] = 0.0;
    A[234] = 0.0;
    A[676] = A[502] - 0.0244444444444437*G0_0_1_0_0_0 - 0.0244444444444437*G0_0_1_0_0_1 - 0.0244444444444434*G0_0_1_2_0_1 + 0.0258730158730159*G0_0_1_3_0_0 - 0.0474603174603159*G0_0_1_4_0_0 + 0.00285714285714198*G0_0_1_4_0_1 - 0.0230158730158715*G0_0_1_5_0_0 + 0.0244444444444438*G0_0_1_5_0_1 + 0.0474603174603159*G0_0_1_6_0_0 + 0.0244444444444434*G0_0_1_6_0_1 + 0.0503174603174596*G0_0_1_7_0_0 + 0.00285714285714429*G0_0_1_7_0_1 - 0.0258730158730173*G0_0_1_8_0_0 - 0.00285714285714447*G0_0_1_9_0_0 - 0.00571428571428635*G0_0_1_9_0_1 - 0.0244444444444437*G0_0_1_10_1_0 - 0.0244444444444437*G0_0_1_10_1_1 - 0.0244444444444434*G0_0_1_12_1_1 + 0.0258730158730159*G0_0_1_13_1_0 - 0.0474603174603159*G0_0_1_14_1_0 + 0.00285714285714198*G0_0_1_14_1_1 - 0.0230158730158715*G0_0_1_15_1_0 + 0.0244444444444438*G0_0_1_15_1_1 + 0.0474603174603159*G0_0_1_16_1_0 + 0.0244444444444434*G0_0_1_16_1_1 + 0.0503174603174596*G0_0_1_17_1_0 + 0.00285714285714429*G0_0_1_17_1_1 - 0.0258730158730173*G0_0_1_18_1_0 - 0.00285714285714447*G0_0_1_19_1_0 - 0.00571428571428635*G0_0_1_19_1_1 + 0.0244444444444437*G0_1_0_0_0_0 + 0.0244444444444437*G0_1_0_0_0_1 + 0.0244444444444434*G0_1_0_2_0_1 - 0.0258730158730159*G0_1_0_3_0_0 + 0.0474603174603159*G0_1_0_4_0_0 - 0.002857142857142*G0_1_0_4_0_1 + 0.0230158730158715*G0_1_0_5_0_0 - 0.0244444444444438*G0_1_0_5_0_1 - 0.0474603174603159*G0_1_0_6_0_0 - 0.0244444444444434*G0_1_0_6_0_1 - 0.0503174603174596*G0_1_0_7_0_0 - 0.00285714285714431*G0_1_0_7_0_1 + 0.0258730158730173*G0_1_0_8_0_0 + 0.00285714285714444*G0_1_0_9_0_0 + 0.00571428571428638*G0_1_0_9_0_1 + 0.0244444444444437*G0_1_0_10_1_0 + 0.0244444444444437*G0_1_0_10_1_1 + 0.0244444444444434*G0_1_0_12_1_1 - 0.0258730158730159*G0_1_0_13_1_0 + 0.0474603174603159*G0_1_0_14_1_0 - 0.002857142857142*G0_1_0_14_1_1 + 0.0230158730158715*G0_1_0_15_1_0 - 0.0244444444444438*G0_1_0_15_1_1 - 0.0474603174603159*G0_1_0_16_1_0 - 0.0244444444444434*G0_1_0_16_1_1 - 0.0503174603174596*G0_1_0_17_1_0 - 0.00285714285714431*G0_1_0_17_1_1 + 0.0258730158730173*G0_1_0_18_1_0 + 0.00285714285714444*G0_1_0_19_1_0 + 0.00571428571428638*G0_1_0_19_1_1;
    A[600] = 0.0;
    A[556] = A[91];
    A[635] = 0.0;
    A[670] = 0.0;
    A[277] = A[219] + 1.09206349206349*G0_0_1_0_0_0 + 1.09206349206349*G0_0_1_0_0_1 - 0.213333333333332*G0_0_1_1_0_0 - 0.11174603174603*G0_0_1_2_0_1 - 0.0939682539682516*G0_0_1_3_0_0 + 0.0533333333333321*G0_0_1_3_0_1 + 0.0279365079365104*G0_0_1_4_0_0 - 0.220952380952377*G0_0_1_4_0_1 - 0.317460317460313*G0_0_1_5_0_0 - 1.815873015873*G0_0_1_5_0_1 - 0.0279365079365104*G0_0_1_6_0_0 + 0.83555555555555*G0_0_1_6_0_1 - 2.14603174603173*G0_0_1_7_0_0 - 0.647619047619043*G0_0_1_7_0_1 + 1.26730158730158*G0_0_1_8_0_0 - 0.0533333333333317*G0_0_1_8_0_1 + 0.411428571428565*G0_0_1_9_0_0 + 0.868571428571419*G0_0_1_9_0_1 + 1.09206349206349*G0_0_1_10_1_0 + 1.09206349206349*G0_0_1_10_1_1 - 0.213333333333332*G0_0_1_11_1_0 - 0.11174603174603*G0_0_1_12_1_1 - 0.0939682539682516*G0_0_1_13_1_0 + 0.0533333333333321*G0_0_1_13_1_1 + 0.0279365079365104*G0_0_1_14_1_0 - 0.220952380952377*G0_0_1_14_1_1 - 0.317460317460313*G0_0_1_15_1_0 - 1.815873015873*G0_0_1_15_1_1 - 0.0279365079365104*G0_0_1_16_1_0 + 0.83555555555555*G0_0_1_16_1_1 - 2.14603174603173*G0_0_1_17_1_0 - 0.647619047619043*G0_0_1_17_1_1 + 1.26730158730158*G0_0_1_18_1_0 - 0.0533333333333317*G0_0_1_18_1_1 + 0.411428571428565*G0_0_1_19_1_0 + 0.868571428571419*G0_0_1_19_1_1 - 1.09206349206349*G0_1_0_0_0_0 - 1.09206349206349*G0_1_0_0_0_1 + 0.213333333333332*G0_1_0_1_0_0 + 0.11174603174603*G0_1_0_2_0_1 + 0.0939682539682516*G0_1_0_3_0_0 - 0.0533333333333321*G0_1_0_3_0_1 - 0.0279365079365104*G0_1_0_4_0_0 + 0.220952380952377*G0_1_0_4_0_1 + 0.317460317460313*G0_1_0_5_0_0 + 1.815873015873*G0_1_0_5_0_1 + 0.0279365079365104*G0_1_0_6_0_0 - 0.83555555555555*G0_1_0_6_0_1 + 2.14603174603173*G0_1_0_7_0_0 + 0.647619047619043*G0_1_0_7_0_1 - 1.26730158730158*G0_1_0_8_0_0 + 0.0533333333333317*G0_1_0_8_0_1 - 0.411428571428565*G0_1_0_9_0_0 - 0.868571428571419*G0_1_0_9_0_1 - 1.09206349206349*G0_1_0_10_1_0 - 1.09206349206349*G0_1_0_10_1_1 + 0.213333333333332*G0_1_0_11_1_0 + 0.11174603174603*G0_1_0_12_1_1 + 0.0939682539682516*G0_1_0_13_1_0 - 0.0533333333333321*G0_1_0_13_1_1 - 0.0279365079365104*G0_1_0_14_1_0 + 0.220952380952377*G0_1_0_14_1_1 + 0.317460317460313*G0_1_0_15_1_0 + 1.815873015873*G0_1_0_15_1_1 + 0.0279365079365104*G0_1_0_16_1_0 - 0.83555555555555*G0_1_0_16_1_1 + 2.14603174603173*G0_1_0_17_1_0 + 0.647619047619043*G0_1_0_17_1_1 - 1.26730158730158*G0_1_0_18_1_0 + 0.0533333333333317*G0_1_0_18_1_1 - 0.411428571428565*G0_1_0_19_1_0 - 0.868571428571419*G0_1_0_19_1_1;
    A[367] = -A[277] - 0.877037037037036*G0_0_0_0_0_0 - 0.877037037037036*G0_0_0_0_0_1 - 0.35216931216931*G0_0_0_1_0_0 + 0.612910052910055*G0_0_0_2_0_1 + 1.53904761904761*G0_0_0_3_0_0 - 0.0939682539682523*G0_0_0_3_0_1 + 1.18857142857143*G0_0_0_4_0_0 + 1.85650793650793*G0_0_0_4_0_1 + 2.08761904761905*G0_0_0_5_0_0 + 2.63873015873016*G0_0_0_5_0_1 - 1.18857142857143*G0_0_0_6_0_0 - 2.37460317460318*G0_0_0_6_0_1 + 1.02603174603174*G0_0_0_7_0_0 + 0.474920634920632*G0_0_0_7_0_1 + 0.203174603174603*G0_0_0_8_0_0 + 0.0939682539682522*G0_0_0_8_0_1 - 3.62666666666666*G0_0_0_9_0_0 - 2.33142857142856*G0_0_0_9_0_1 - 0.877037037037036*G0_0_0_10_1_0 - 0.877037037037036*G0_0_0_10_1_1 - 0.35216931216931*G0_0_0_11_1_0 + 0.612910052910055*G0_0_0_12_1_1 + 1.53904761904761*G0_0_0_13_1_0 - 0.0939682539682523*G0_0_0_13_1_1 + 1.18857142857143*G0_0_0_14_1_0 + 1.85650793650793*G0_0_0_14_1_1 + 2.08761904761905*G0_0_0_15_1_0 + 2.63873015873016*G0_0_0_15_1_1 - 1.18857142857143*G0_0_0_16_1_0 - 2.37460317460318*G0_0_0_16_1_1 + 1.02603174603174*G0_0_0_17_1_0 + 0.474920634920632*G0_0_0_17_1_1 + 0.203174603174603*G0_0_0_18_1_0 + 0.0939682539682522*G0_0_0_18_1_1 - 3.62666666666666*G0_0_0_19_1_0 - 2.33142857142856*G0_0_0_19_1_1 + 0.422433862433857*G0_0_1_0_0_0 + 0.422433862433857*G0_0_1_0_0_1 + 0.334391534391533*G0_0_1_1_0_0 - 0.112592592592589*G0_0_1_2_0_1 - 0.551111111111108*G0_0_1_3_0_0 - 0.152380952380953*G0_0_1_3_0_1 + 1.55936507936508*G0_0_1_4_0_0 + 1.60761904761904*G0_0_1_4_0_1 - 3.1974603174603*G0_0_1_5_0_0 - 2.98920634920633*G0_0_1_5_0_1 - 1.55936507936508*G0_0_1_6_0_0 + 2.67936507936506*G0_0_1_6_0_1 + 0.0634920634920682*G0_0_1_7_0_0 - 0.144761904761905*G0_0_1_7_0_1 - 0.82031746031746*G0_0_1_8_0_0 + 0.152380952380955*G0_0_1_8_0_1 + 3.74857142857141*G0_0_1_9_0_0 - 1.46285714285714*G0_0_1_9_0_1 + 0.422433862433857*G0_0_1_10_1_0 + 0.422433862433857*G0_0_1_10_1_1 + 0.334391534391533*G0_0_1_11_1_0 - 0.112592592592589*G0_0_1_12_1_1 - 0.551111111111108*G0_0_1_13_1_0 - 0.152380952380953*G0_0_1_13_1_1 + 1.55936507936508*G0_0_1_14_1_0 + 1.60761904761904*G0_0_1_14_1_1 - 3.1974603174603*G0_0_1_15_1_0 - 2.98920634920633*G0_0_1_15_1_1 - 1.55936507936508*G0_0_1_16_1_0 + 2.67936507936506*G0_0_1_16_1_1 + 0.0634920634920682*G0_0_1_17_1_0 - 0.144761904761905*G0_0_1_17_1_1 - 0.82031746031746*G0_0_1_18_1_0 + 0.152380952380955*G0_0_1_18_1_1 + 3.74857142857141*G0_0_1_19_1_0 - 1.46285714285714*G0_0_1_19_1_1 - 0.0601058201058204*G0_1_0_0_0_0 - 0.0601058201058205*G0_1_0_0_0_1 - 0.0313227513227496*G0_1_0_1_0_0 + 0.639153439153439*G0_1_0_2_0_1 + 0.319999999999997*G0_1_0_3_0_0 - 0.175238095238092*G0_1_0_3_0_1 + 2.4*G0_1_0_4_0_0 + 2.2247619047619*G0_1_0_4_0_1 - 0.822857142857138*G0_1_0_5_0_0 - 0.56380952380952*G0_1_0_5_0_1 - 2.4*G0_1_0_6_0_0 - 0.015238095238099*G0_1_0_6_0_1 - 0.259047619047618*G0_1_0_7_0_1 + 0.0914285714285686*G0_1_0_8_0_0 + 0.175238095238093*G0_1_0_8_0_1 + 0.50285714285714*G0_1_0_9_0_0 - 1.96571428571428*G0_1_0_9_0_1 - 0.0601058201058204*G0_1_0_10_1_0 - 0.0601058201058205*G0_1_0_10_1_1 - 0.0313227513227496*G0_1_0_11_1_0 + 0.639153439153439*G0_1_0_12_1_1 + 0.319999999999997*G0_1_0_13_1_0 - 0.175238095238092*G0_1_0_13_1_1 + 2.4*G0_1_0_14_1_0 + 2.2247619047619*G0_1_0_14_1_1 - 0.822857142857138*G0_1_0_15_1_0 - 0.56380952380952*G0_1_0_15_1_1 - 2.4*G0_1_0_16_1_0 - 0.015238095238099*G0_1_0_16_1_1 - 0.259047619047618*G0_1_0_17_1_1 + 0.0914285714285686*G0_1_0_18_1_0 + 0.175238095238093*G0_1_0_18_1_1 + 0.50285714285714*G0_1_0_19_1_0 - 1.96571428571428*G0_1_0_19_1_1 + 0.579047619047618*G0_1_1_0_0_0 + 0.579047619047618*G0_1_1_0_0_1 + 0.579047619047619*G0_1_1_2_0_1 + 0.40380952380952*G0_1_1_3_0_0 + 2.14095238095238*G0_1_1_4_0_0 + 1.96571428571428*G0_1_1_4_0_1 + 1.56190476190475*G0_1_1_5_0_0 - 0.579047619047618*G0_1_1_5_0_1 - 2.14095238095238*G0_1_1_6_0_0 - 0.579047619047618*G0_1_1_6_0_1 - 0.175238095238097*G0_1_1_7_0_0 + 1.96571428571428*G0_1_1_7_0_1 - 0.403809523809523*G0_1_1_8_0_0 - 1.96571428571427*G0_1_1_9_0_0 - 3.93142857142856*G0_1_1_9_0_1 + 0.579047619047618*G0_1_1_10_1_0 + 0.579047619047618*G0_1_1_10_1_1 + 0.579047619047619*G0_1_1_12_1_1 + 0.40380952380952*G0_1_1_13_1_0 + 2.14095238095238*G0_1_1_14_1_0 + 1.96571428571428*G0_1_1_14_1_1 + 1.56190476190475*G0_1_1_15_1_0 - 0.579047619047618*G0_1_1_15_1_1 - 2.14095238095238*G0_1_1_16_1_0 - 0.579047619047618*G0_1_1_16_1_1 - 0.175238095238097*G0_1_1_17_1_0 + 1.96571428571428*G0_1_1_17_1_1 - 0.403809523809523*G0_1_1_18_1_0 - 1.96571428571427*G0_1_1_19_1_0 - 3.93142857142856*G0_1_1_19_1_1;
    A[132] = A[367] - 0.12190476190476*G0_0_0_0_0_0 - 0.12190476190476*G0_0_0_0_0_1 + 0.426666666666663*G0_0_0_1_0_0 + 0.579047619047612*G0_0_0_3_0_1 - 0.152380952380957*G0_0_0_4_0_1 - 0.0304761904761981*G0_0_0_5_0_1 + 0.152380952380962*G0_0_0_6_0_1 + 0.670476190476186*G0_0_0_7_0_0 + 0.700952380952374*G0_0_0_7_0_1 - 0.97523809523809*G0_0_0_8_0_0 - 0.579047619047612*G0_0_0_8_0_1 - 0.548571428571417*G0_0_0_9_0_1 - 0.12190476190476*G0_0_0_10_1_0 - 0.12190476190476*G0_0_0_10_1_1 + 0.426666666666663*G0_0_0_11_1_0 + 0.579047619047612*G0_0_0_13_1_1 - 0.152380952380957*G0_0_0_14_1_1 - 0.0304761904761981*G0_0_0_15_1_1 + 0.152380952380962*G0_0_0_16_1_1 + 0.670476190476186*G0_0_0_17_1_0 + 0.700952380952374*G0_0_0_17_1_1 - 0.97523809523809*G0_0_0_18_1_0 - 0.579047619047612*G0_0_0_18_1_1 - 0.548571428571417*G0_0_0_19_1_1 + 0.416507936507937*G0_0_1_0_0_0 + 0.416507936507936*G0_0_1_0_0_1 - 0.416507936507936*G0_0_1_1_0_0 + 0.132063492063492*G0_0_1_2_0_1 + 2.1790476190476*G0_0_1_3_0_0 + 0.853333333333325*G0_0_1_3_0_1 - 0.655238095238092*G0_0_1_4_0_0 + 0.121904761904757*G0_0_1_4_0_1 + 4.67809523809522*G0_0_1_5_0_0 + 2.10285714285713*G0_0_1_5_0_1 + 0.655238095238093*G0_0_1_6_0_0 - 2.65142857142856*G0_0_1_6_0_1 - 1.05142857142857*G0_0_1_7_0_0 + 1.52380952380951*G0_0_1_7_0_1 + 1.05142857142857*G0_0_1_8_0_0 - 0.853333333333326*G0_0_1_8_0_1 - 6.85714285714282*G0_0_1_9_0_0 - 1.64571428571427*G0_0_1_9_0_1 + 0.416507936507937*G0_0_1_10_1_0 + 0.416507936507936*G0_0_1_10_1_1 - 0.416507936507936*G0_0_1_11_1_0 + 0.132063492063492*G0_0_1_12_1_1 + 2.1790476190476*G0_0_1_13_1_0 + 0.853333333333325*G0_0_1_13_1_1 - 0.655238095238092*G0_0_1_14_1_0 + 0.121904761904757*G0_0_1_14_1_1 + 4.67809523809522*G0_0_1_15_1_0 + 2.10285714285713*G0_0_1_15_1_1 + 0.655238095238093*G0_0_1_16_1_0 - 2.65142857142856*G0_0_1_16_1_1 - 1.05142857142857*G0_0_1_17_1_0 + 1.52380952380951*G0_0_1_17_1_1 + 1.05142857142857*G0_0_1_18_1_0 - 0.853333333333326*G0_0_1_18_1_1 - 6.85714285714282*G0_0_1_19_1_0 - 1.64571428571427*G0_0_1_19_1_1 - 0.19301587301587*G0_1_0_0_0_0 - 0.19301587301587*G0_1_0_0_0_1 + 0.497777777777771*G0_1_0_1_0_0 - 0.843174603174601*G0_1_0_2_0_1 + 1.78285714285713*G0_1_0_3_0_0 + 1.5390476190476*G0_1_0_3_0_1 - 2.24*G0_1_0_4_0_0 - 0.655238095238095*G0_1_0_4_0_1 + 2.33142857142856*G0_1_0_5_0_0 + 1.20380952380952*G0_1_0_5_0_1 + 2.24*G0_1_0_6_0_0 - 0.167619047619047*G0_1_0_6_0_1 + 1.44761904761903*G0_1_0_7_0_0 + 2.57523809523808*G0_1_0_7_0_1 - 1.75238095238094*G0_1_0_8_0_0 - 1.5390476190476*G0_1_0_8_0_1 - 4.1142857142857*G0_1_0_9_0_0 - 1.91999999999998*G0_1_0_9_0_1 - 0.19301587301587*G0_1_0_10_1_0 - 0.19301587301587*G0_1_0_10_1_1 + 0.497777777777771*G0_1_0_11_1_0 - 0.843174603174601*G0_1_0_12_1_1 + 1.78285714285713*G0_1_0_13_1_0 + 1.5390476190476*G0_1_0_13_1_1 - 2.24*G0_1_0_14_1_0 - 0.655238095238095*G0_1_0_14_1_1 + 2.33142857142856*G0_1_0_15_1_0 + 1.20380952380952*G0_1_0_15_1_1 + 2.24*G0_1_0_16_1_0 - 0.167619047619047*G0_1_0_16_1_1 + 1.44761904761903*G0_1_0_17_1_0 + 2.57523809523808*G0_1_0_17_1_1 - 1.75238095238094*G0_1_0_18_1_0 - 1.5390476190476*G0_1_0_18_1_1 - 4.1142857142857*G0_1_0_19_1_0 - 1.91999999999998*G0_1_0_19_1_1 - 2.30603174603173*G0_1_1_0_0_0 - 2.30603174603174*G0_1_1_0_0_1 + 0.690793650793645*G0_1_1_1_0_0 - 0.284444444444445*G0_1_1_2_0_1 + 1.5695238095238*G0_1_1_3_0_0 + 1.5542857142857*G0_1_1_3_0_1 - 2.08761904761904*G0_1_1_4_0_0 - 1.09714285714285*G0_1_1_4_0_1 - 0.0152380952380942*G0_1_1_5_0_0 + 3.99238095238093*G0_1_1_5_0_1 + 2.08761904761904*G0_1_1_6_0_0 - 1.40190476190476*G0_1_1_6_0_1 + 3.27619047619046*G0_1_1_7_0_0 - 0.731428571428572*G0_1_1_7_0_1 - 1.66095238095237*G0_1_1_8_0_0 - 1.5542857142857*G0_1_1_8_0_1 - 1.55428571428571*G0_1_1_9_0_0 + 1.82857142857143*G0_1_1_9_0_1 - 2.30603174603173*G0_1_1_10_1_0 - 2.30603174603174*G0_1_1_10_1_1 + 0.690793650793645*G0_1_1_11_1_0 - 0.284444444444445*G0_1_1_12_1_1 + 1.5695238095238*G0_1_1_13_1_0 + 1.5542857142857*G0_1_1_13_1_1 - 2.08761904761904*G0_1_1_14_1_0 - 1.09714285714285*G0_1_1_14_1_1 - 0.0152380952380942*G0_1_1_15_1_0 + 3.99238095238093*G0_1_1_15_1_1 + 2.08761904761904*G0_1_1_16_1_0 - 1.40190476190476*G0_1_1_16_1_1 + 3.27619047619046*G0_1_1_17_1_0 - 0.731428571428572*G0_1_1_17_1_1 - 1.66095238095237*G0_1_1_18_1_0 - 1.5542857142857*G0_1_1_18_1_1 - 1.55428571428571*G0_1_1_19_1_0 + 1.82857142857143*G0_1_1_19_1_1;
    A[597] = A[132];
    A[892] = -A[277] - 0.0643386243386262*G0_0_0_0_0_0 - 0.0643386243386262*G0_0_0_0_0_1 - 0.646772486772487*G0_0_0_1_0_0 - 2.63788359788359*G0_0_0_2_0_1 + 1.63047619047619*G0_0_0_3_0_0 + 0.424126984126981*G0_0_0_3_0_1 - 7.9542857142857*G0_0_0_4_0_0 - 4.75682539682538*G0_0_0_4_0_1 + 2.17904761904761*G0_0_0_5_0_0 + 2.12063492063492*G0_0_0_5_0_1 + 7.9542857142857*G0_0_0_6_0_0 + 0.581587301587305*G0_0_0_6_0_1 - 0.284444444444439*G0_0_0_7_0_0 - 0.226031746031745*G0_0_0_7_0_1 + 0.995555555555555*G0_0_0_8_0_0 - 0.424126984126982*G0_0_0_8_0_1 - 3.80952380952381*G0_0_0_9_0_0 + 4.98285714285713*G0_0_0_9_0_1 - 0.0643386243386262*G0_0_0_10_1_0 - 0.0643386243386262*G0_0_0_10_1_1 - 0.646772486772487*G0_0_0_11_1_0 - 2.63788359788359*G0_0_0_12_1_1 + 1.63047619047619*G0_0_0_13_1_0 + 0.424126984126981*G0_0_0_13_1_1 - 7.9542857142857*G0_0_0_14_1_0 - 4.75682539682538*G0_0_0_14_1_1 + 2.17904761904761*G0_0_0_15_1_0 + 2.12063492063492*G0_0_0_15_1_1 + 7.9542857142857*G0_0_0_16_1_0 + 0.581587301587305*G0_0_0_16_1_1 - 0.284444444444439*G0_0_0_17_1_0 - 0.226031746031745*G0_0_0_17_1_1 + 0.995555555555555*G0_0_0_18_1_0 - 0.424126984126982*G0_0_0_18_1_1 - 3.80952380952381*G0_0_0_19_1_0 + 4.98285714285713*G0_0_0_19_1_1 + 1.55513227513226*G0_0_1_0_0_0 + 1.55513227513226*G0_0_1_0_0_1 - 0.53925925925926*G0_0_1_1_0_0 - 3.01291005291004*G0_0_1_2_0_1 + 0.97269841269842*G0_0_1_3_0_0 + 0.396190476190472*G0_0_1_3_0_1 - 6.92825396825395*G0_0_1_4_0_0 - 3.87809523809522*G0_0_1_4_0_1 - 0.972698412698403*G0_0_1_5_0_0 - 2.60825396825395*G0_0_1_5_0_1 + 6.92825396825395*G0_0_1_6_0_0 + 4.06603174603173*G0_0_1_6_0_1 - 2.51174603174601*G0_0_1_7_0_0 - 0.876190476190472*G0_0_1_7_0_1 + 1.49587301587301*G0_0_1_8_0_0 - 0.396190476190472*G0_0_1_8_0_1 + 4.75428571428569*G0_0_1_9_0_1 + 1.55513227513226*G0_0_1_10_1_0 + 1.55513227513226*G0_0_1_10_1_1 - 0.53925925925926*G0_0_1_11_1_0 - 3.01291005291004*G0_0_1_12_1_1 + 0.97269841269842*G0_0_1_13_1_0 + 0.396190476190472*G0_0_1_13_1_1 - 6.92825396825395*G0_0_1_14_1_0 - 3.87809523809522*G0_0_1_14_1_1 - 0.972698412698403*G0_0_1_15_1_0 - 2.60825396825395*G0_0_1_15_1_1 + 6.92825396825395*G0_0_1_16_1_0 + 4.06603174603173*G0_0_1_16_1_1 - 2.51174603174601*G0_0_1_17_1_0 - 0.876190476190472*G0_0_1_17_1_1 + 1.49587301587301*G0_0_1_18_1_0 - 0.396190476190472*G0_0_1_18_1_1 + 4.75428571428569*G0_0_1_19_1_1 + 1.10306878306878*G0_1_0_0_0_0 + 1.10306878306878*G0_1_0_0_0_1 + 0.253121693121693*G0_1_0_1_0_0 - 2.2916402116402*G0_1_0_2_0_1 - 1.14285714285714*G0_1_0_3_0_0 + 0.312380952380952*G0_1_0_3_0_1 - 5.5085714285714*G0_1_0_4_0_0 - 4.4190476190476*G0_1_0_4_0_1 - 1.64571428571428*G0_1_0_5_0_0 - 2.65142857142856*G0_1_0_5_0_1 + 5.5085714285714*G0_1_0_6_0_0 + 3.83999999999998*G0_1_0_6_0_1 - 0.838095238095234*G0_1_0_7_0_0 + 0.16761904761905*G0_1_0_7_0_1 - 0.518095238095235*G0_1_0_8_0_0 - 0.312380952380953*G0_1_0_8_0_1 + 2.78857142857141*G0_1_0_9_0_0 + 4.25142857142855*G0_1_0_9_0_1 + 1.10306878306878*G0_1_0_10_1_0 + 1.10306878306878*G0_1_0_10_1_1 + 0.253121693121693*G0_1_0_11_1_0 - 2.2916402116402*G0_1_0_12_1_1 - 1.14285714285714*G0_1_0_13_1_0 + 0.312380952380952*G0_1_0_13_1_1 - 5.5085714285714*G0_1_0_14_1_0 - 4.4190476190476*G0_1_0_14_1_1 - 1.64571428571428*G0_1_0_15_1_0 - 2.65142857142856*G0_1_0_15_1_1 + 5.5085714285714*G0_1_0_16_1_0 + 3.83999999999998*G0_1_0_16_1_1 - 0.838095238095234*G0_1_0_17_1_0 + 0.16761904761905*G0_1_0_17_1_1 - 0.518095238095235*G0_1_0_18_1_0 - 0.312380952380953*G0_1_0_18_1_1 + 2.78857142857141*G0_1_0_19_1_0 + 4.25142857142855*G0_1_0_19_1_1 - 1.18857142857142*G0_1_1_0_0_0 - 1.18857142857142*G0_1_1_0_0_1 - 1.18857142857142*G0_1_1_2_0_1 - 0.937142857142851*G0_1_1_3_0_0 - 4.50285714285712*G0_1_1_4_0_0 - 4.25142857142855*G0_1_1_4_0_1 - 3.31428571428569*G0_1_1_5_0_0 + 1.18857142857143*G0_1_1_5_0_1 + 4.50285714285712*G0_1_1_6_0_0 + 1.18857142857142*G0_1_1_6_0_1 + 0.251428571428573*G0_1_1_7_0_0 - 4.25142857142855*G0_1_1_7_0_1 + 0.937142857142852*G0_1_1_8_0_0 + 4.25142857142854*G0_1_1_9_0_0 + 8.5028571428571*G0_1_1_9_0_1 - 1.18857142857142*G0_1_1_10_1_0 - 1.18857142857142*G0_1_1_10_1_1 - 1.18857142857142*G0_1_1_12_1_1 - 0.937142857142851*G0_1_1_13_1_0 - 4.50285714285712*G0_1_1_14_1_0 - 4.25142857142855*G0_1_1_14_1_1 - 3.31428571428569*G0_1_1_15_1_0 + 1.18857142857143*G0_1_1_15_1_1 + 4.50285714285712*G0_1_1_16_1_0 + 1.18857142857142*G0_1_1_16_1_1 + 0.251428571428573*G0_1_1_17_1_0 - 4.25142857142855*G0_1_1_17_1_1 + 0.937142857142852*G0_1_1_18_1_0 + 4.25142857142854*G0_1_1_19_1_0 + 8.5028571428571*G0_1_1_19_1_1;
    A[427] = A[892];
    A[312] = A[132] + 2.30603174603173*G0_0_0_0_0_0 + 2.30603174603173*G0_0_0_0_0_1 + 0.284444444444447*G0_0_0_1_0_0 - 0.690793650793646*G0_0_0_2_0_1 + 1.09714285714285*G0_0_0_3_0_0 + 2.08761904761904*G0_0_0_3_0_1 - 1.5542857142857*G0_0_0_4_0_0 - 1.5695238095238*G0_0_0_4_0_1 + 0.731428571428564*G0_0_0_5_0_0 - 3.27619047619046*G0_0_0_5_0_1 + 1.55428571428571*G0_0_0_6_0_0 + 1.66095238095237*G0_0_0_6_0_1 - 3.99238095238093*G0_0_0_7_0_0 + 0.0152380952380959*G0_0_0_7_0_1 + 1.40190476190475*G0_0_0_8_0_0 - 2.08761904761904*G0_0_0_8_0_1 - 1.82857142857141*G0_0_0_9_0_0 + 1.55428571428571*G0_0_0_9_0_1 + 2.30603174603173*G0_0_0_10_1_0 + 2.30603174603173*G0_0_0_10_1_1 + 0.284444444444447*G0_0_0_11_1_0 - 0.690793650793646*G0_0_0_12_1_1 + 1.09714285714285*G0_0_0_13_1_0 + 2.08761904761904*G0_0_0_13_1_1 - 1.5542857142857*G0_0_0_14_1_0 - 1.5695238095238*G0_0_0_14_1_1 + 0.731428571428564*G0_0_0_15_1_0 - 3.27619047619046*G0_0_0_15_1_1 + 1.55428571428571*G0_0_0_16_1_0 + 1.66095238095237*G0_0_0_16_1_1 - 3.99238095238093*G0_0_0_17_1_0 + 0.0152380952380959*G0_0_0_17_1_1 + 1.40190476190475*G0_0_0_18_1_0 - 2.08761904761904*G0_0_0_18_1_1 - 1.82857142857141*G0_0_0_19_1_0 + 1.55428571428571*G0_0_0_19_1_1 - 0.416507936507929*G0_0_1_0_0_0 - 0.41650793650793*G0_0_1_0_0_1 + 0.203174603174604*G0_0_1_1_0_0 + 0.0812698412698354*G0_0_1_2_0_1 + 0.259047619047621*G0_0_1_3_0_0 + 1.37142857142857*G0_0_1_3_0_1 - 1.56952380952381*G0_0_1_4_0_0 - 2.55999999999999*G0_0_1_4_0_1 - 1.81333333333332*G0_0_1_5_0_0 + 0.761904761904746*G0_0_1_5_0_1 + 1.56952380952381*G0_0_1_6_0_0 - 0.426666666666654*G0_0_1_6_0_1 - 1.81333333333332*G0_0_1_7_0_0 - 4.38857142857139*G0_0_1_7_0_1 + 2.02666666666665*G0_0_1_8_0_0 - 1.37142857142857*G0_0_1_8_0_1 + 1.5542857142857*G0_0_1_9_0_0 + 6.94857142857138*G0_0_1_9_0_1 - 0.416507936507929*G0_0_1_10_1_0 - 0.41650793650793*G0_0_1_10_1_1 + 0.203174603174604*G0_0_1_11_1_0 + 0.0812698412698354*G0_0_1_12_1_1 + 0.259047619047621*G0_0_1_13_1_0 + 1.37142857142857*G0_0_1_13_1_1 - 1.56952380952381*G0_0_1_14_1_0 - 2.55999999999999*G0_0_1_14_1_1 - 1.81333333333332*G0_0_1_15_1_0 + 0.761904761904746*G0_0_1_15_1_1 + 1.56952380952381*G0_0_1_16_1_0 - 0.426666666666654*G0_0_1_16_1_1 - 1.81333333333332*G0_0_1_17_1_0 - 4.38857142857139*G0_0_1_17_1_1 + 2.02666666666665*G0_0_1_18_1_0 - 1.37142857142857*G0_0_1_18_1_1 + 1.5542857142857*G0_0_1_19_1_0 + 6.94857142857138*G0_0_1_19_1_1 + 0.193015873015872*G0_1_0_0_0_0 + 0.193015873015872*G0_1_0_0_0_1 + 0.507936507936511*G0_1_0_1_0_0 - 0.162539682539683*G0_1_0_2_0_1 + 0.27428571428571*G0_1_0_3_0_0 + 1.52380952380952*G0_1_0_3_0_1 - 0.82285714285714*G0_1_0_4_0_0 - 1.40190476190476*G0_1_0_4_0_1 - 2.28571428571429*G0_1_0_5_0_0 - 1.15809523809524*G0_1_0_5_0_1 + 0.822857142857141*G0_1_0_6_0_0 + 1.12761904761905*G0_1_0_6_0_1 - 1.49333333333333*G0_1_0_7_0_0 - 2.62095238095237*G0_1_0_7_0_1 + 0.792380952380942*G0_1_0_8_0_0 - 1.52380952380953*G0_1_0_8_0_1 + 2.01142857142858*G0_1_0_9_0_0 + 4.02285714285713*G0_1_0_9_0_1 + 0.193015873015872*G0_1_0_10_1_0 + 0.193015873015872*G0_1_0_10_1_1 + 0.507936507936511*G0_1_0_11_1_0 - 0.162539682539683*G0_1_0_12_1_1 + 0.27428571428571*G0_1_0_13_1_0 + 1.52380952380952*G0_1_0_13_1_1 - 0.82285714285714*G0_1_0_14_1_0 - 1.40190476190476*G0_1_0_14_1_1 - 2.28571428571429*G0_1_0_15_1_0 - 1.15809523809524*G0_1_0_15_1_1 + 0.822857142857141*G0_1_0_16_1_0 + 1.12761904761905*G0_1_0_16_1_1 - 1.49333333333333*G0_1_0_17_1_0 - 2.62095238095237*G0_1_0_17_1_1 + 0.792380952380942*G0_1_0_18_1_0 - 1.52380952380953*G0_1_0_18_1_1 + 2.01142857142858*G0_1_0_19_1_0 + 4.02285714285713*G0_1_0_19_1_1 + 0.121904761904765*G0_1_1_0_0_0 + 0.121904761904766*G0_1_1_0_0_1 - 0.426666666666667*G0_1_1_2_0_1 + 0.152380952380952*G0_1_1_3_0_0 - 0.579047619047619*G0_1_1_4_0_0 - 0.700952380952376*G0_1_1_5_0_0 - 0.670476190476195*G0_1_1_5_0_1 + 0.579047619047619*G0_1_1_6_0_0 + 0.975238095238097*G0_1_1_6_0_1 + 0.0304761904761883*G0_1_1_7_0_0 - 0.152380952380955*G0_1_1_8_0_0 + 0.548571428571424*G0_1_1_9_0_0 + 0.121904761904765*G0_1_1_10_1_0 + 0.121904761904766*G0_1_1_10_1_1 - 0.426666666666667*G0_1_1_12_1_1 + 0.152380952380952*G0_1_1_13_1_0 - 0.579047619047619*G0_1_1_14_1_0 - 0.700952380952376*G0_1_1_15_1_0 - 0.670476190476195*G0_1_1_15_1_1 + 0.579047619047619*G0_1_1_16_1_0 + 0.975238095238097*G0_1_1_16_1_1 + 0.0304761904761883*G0_1_1_17_1_0 - 0.152380952380955*G0_1_1_18_1_0 + 0.548571428571424*G0_1_1_19_1_0;
    A[309] = -A[312] + 4.86264550264548*G0_0_0_0_0_0 + 4.86264550264548*G0_0_0_0_0_1 - 1.55089947089946*G0_0_0_1_0_0 - 0.540105820105817*G0_0_0_2_0_1 + 1.78285714285713*G0_0_0_3_0_0 - 0.23873015873016*G0_0_0_3_0_1 + 0.365714285714286*G0_0_0_4_0_0 + 1.37650793650793*G0_0_0_4_0_1 + 4.79999999999997*G0_0_0_5_0_0 - 5.35365079365077*G0_0_0_5_0_1 - 0.365714285714286*G0_0_0_6_0_0 + 1.03111111111111*G0_0_0_6_0_1 - 7.78158730158727*G0_0_0_7_0_0 + 2.37206349206348*G0_0_0_7_0_1 + 4.46984126984125*G0_0_0_8_0_0 + 0.238730158730158*G0_0_0_8_0_1 - 6.58285714285711*G0_0_0_9_0_0 - 3.74857142857141*G0_0_0_9_0_1 + 4.86264550264548*G0_0_0_10_1_0 + 4.86264550264548*G0_0_0_10_1_1 - 1.55089947089946*G0_0_0_11_1_0 - 0.540105820105817*G0_0_0_12_1_1 + 1.78285714285713*G0_0_0_13_1_0 - 0.23873015873016*G0_0_0_13_1_1 + 0.365714285714286*G0_0_0_14_1_0 + 1.37650793650793*G0_0_0_14_1_1 + 4.79999999999997*G0_0_0_15_1_0 - 5.35365079365077*G0_0_0_15_1_1 - 0.365714285714286*G0_0_0_16_1_0 + 1.03111111111111*G0_0_0_16_1_1 - 7.78158730158727*G0_0_0_17_1_0 + 2.37206349206348*G0_0_0_17_1_1 + 4.46984126984125*G0_0_0_18_1_0 + 0.238730158730158*G0_0_0_18_1_1 - 6.58285714285711*G0_0_0_19_1_0 - 3.74857142857141*G0_0_0_19_1_1 - 0.314074074074071*G0_0_1_0_0_0 - 0.314074074074071*G0_0_1_0_0_1 - 0.737354497354494*G0_0_1_1_0_0 - 0.0211640211640221*G0_0_1_2_0_1 + 0.708571428571425*G0_0_1_3_0_0 - 0.906666666666662*G0_0_1_3_0_1 + 0.899047619047614*G0_0_1_4_0_1 + 0.479999999999999*G0_0_1_5_0_0 + 1.08190476190475*G0_0_1_5_0_1 - 0.746666666666661*G0_0_1_6_0_1 - 0.16*G0_0_1_7_0_0 - 0.761904761904756*G0_0_1_7_0_1 + 1.21142857142856*G0_0_1_8_0_0 + 0.906666666666663*G0_0_1_8_0_1 - 1.18857142857142*G0_0_1_9_0_0 - 0.13714285714286*G0_0_1_9_0_1 - 0.314074074074071*G0_0_1_10_1_0 - 0.314074074074071*G0_0_1_10_1_1 - 0.737354497354494*G0_0_1_11_1_0 - 0.0211640211640221*G0_0_1_12_1_1 + 0.708571428571425*G0_0_1_13_1_0 - 0.906666666666662*G0_0_1_13_1_1 + 0.899047619047614*G0_0_1_14_1_1 + 0.479999999999999*G0_0_1_15_1_0 + 1.08190476190475*G0_0_1_15_1_1 - 0.746666666666661*G0_0_1_16_1_1 - 0.16*G0_0_1_17_1_0 - 0.761904761904756*G0_0_1_17_1_1 + 1.21142857142856*G0_0_1_18_1_0 + 0.906666666666663*G0_0_1_18_1_1 - 1.18857142857142*G0_0_1_19_1_0 - 0.13714285714286*G0_0_1_19_1_1 - 0.568042328042322*G0_1_0_0_0_0 - 0.568042328042323*G0_1_0_0_0_1 - 0.564656084656081*G0_1_0_1_0_0 - 0.0516402116402128*G0_1_0_2_0_1 + 1.35365079365078*G0_1_0_3_0_0 - 0.0990476190476159*G0_1_0_3_0_1 - 0.208253968253967*G0_1_0_4_0_0 + 0.731428571428565*G0_1_0_4_0_1 - 1.17079365079365*G0_1_0_5_0_0 + 0.904126984126971*G0_1_0_5_0_1 + 0.208253968253968*G0_1_0_6_0_0 - 0.284444444444436*G0_1_0_6_0_1 - 0.744126984126985*G0_1_0_7_0_0 - 2.81904761904761*G0_1_0_7_0_1 + 1.87682539682539*G0_1_0_8_0_0 + 0.0990476190476159*G0_1_0_8_0_1 - 0.182857142857133*G0_1_0_9_0_0 + 2.08761904761904*G0_1_0_9_0_1 - 0.568042328042322*G0_1_0_10_1_0 - 0.568042328042323*G0_1_0_10_1_1 - 0.564656084656081*G0_1_0_11_1_0 - 0.0516402116402128*G0_1_0_12_1_1 + 1.35365079365078*G0_1_0_13_1_0 - 0.0990476190476159*G0_1_0_13_1_1 - 0.208253968253967*G0_1_0_14_1_0 + 0.731428571428565*G0_1_0_14_1_1 - 1.17079365079365*G0_1_0_15_1_0 + 0.904126984126971*G0_1_0_15_1_1 + 0.208253968253968*G0_1_0_16_1_0 - 0.284444444444436*G0_1_0_16_1_1 - 0.744126984126985*G0_1_0_17_1_0 - 2.81904761904761*G0_1_0_17_1_1 + 1.87682539682539*G0_1_0_18_1_0 + 0.0990476190476159*G0_1_0_18_1_1 - 0.182857142857133*G0_1_0_19_1_0 + 2.08761904761904*G0_1_0_19_1_1 - 0.00507936507936457*G0_1_1_0_0_0 - 0.00507936507936446*G0_1_1_0_0_1 - 0.863492063492058*G0_1_1_1_0_0 - 0.543492063492061*G0_1_1_2_0_1 + 0.929523809523805*G0_1_1_3_0_0 - 1.44761904761904*G0_1_1_3_0_1 + 0.0152380952380959*G0_1_1_4_0_0 + 2.07238095238094*G0_1_1_4_0_1 + 0.350476190476191*G0_1_1_5_0_0 - 0.0152380952380955*G0_1_1_6_0_0 + 0.548571428571426*G0_1_1_6_0_1 + 0.502857142857142*G0_1_1_7_0_0 + 0.853333333333333*G0_1_1_7_0_1 + 0.365714285714279*G0_1_1_8_0_0 + 1.44761904761904*G0_1_1_8_0_1 - 1.28*G0_1_1_9_0_0 - 2.92571428571427*G0_1_1_9_0_1 - 0.00507936507936457*G0_1_1_10_1_0 - 0.00507936507936446*G0_1_1_10_1_1 - 0.863492063492058*G0_1_1_11_1_0 - 0.543492063492061*G0_1_1_12_1_1 + 0.929523809523805*G0_1_1_13_1_0 - 1.44761904761904*G0_1_1_13_1_1 + 0.0152380952380959*G0_1_1_14_1_0 + 2.07238095238094*G0_1_1_14_1_1 + 0.350476190476191*G0_1_1_15_1_0 - 0.0152380952380955*G0_1_1_16_1_0 + 0.548571428571426*G0_1_1_16_1_1 + 0.502857142857142*G0_1_1_17_1_0 + 0.853333333333333*G0_1_1_17_1_1 + 0.365714285714279*G0_1_1_18_1_0 + 1.44761904761904*G0_1_1_18_1_1 - 1.28*G0_1_1_19_1_0 - 2.92571428571427*G0_1_1_19_1_1;
    A[775] = A[312] - 4.7669841269841*G0_0_0_0_0_0 - 4.76698412698411*G0_0_0_0_0_1 + 2.99936507936506*G0_0_0_1_0_0 + 0.85460317460317*G0_0_0_2_0_1 - 0.902857142857138*G0_0_0_3_0_0 + 3.55809523809522*G0_0_0_3_0_1 - 0.548571428571429*G0_0_0_4_0_0 - 2.86476190476189*G0_0_0_4_0_1 - 5.31428571428569*G0_0_0_5_0_0 + 4.88761904761903*G0_0_0_5_0_1 + 0.548571428571428*G0_0_0_6_0_0 - 0.975238095238094*G0_0_0_6_0_1 + 7.21523809523806*G0_0_0_7_0_0 - 2.98666666666665*G0_0_0_7_0_1 - 5.44761904761902*G0_0_0_8_0_0 - 3.55809523809522*G0_0_0_8_0_1 + 6.21714285714282*G0_0_0_9_0_0 + 5.85142857142854*G0_0_0_9_0_1 - 4.7669841269841*G0_0_0_10_1_0 - 4.76698412698411*G0_0_0_10_1_1 + 2.99936507936506*G0_0_0_11_1_0 + 0.85460317460317*G0_0_0_12_1_1 - 0.902857142857138*G0_0_0_13_1_0 + 3.55809523809522*G0_0_0_13_1_1 - 0.548571428571429*G0_0_0_14_1_0 - 2.86476190476189*G0_0_0_14_1_1 - 5.31428571428569*G0_0_0_15_1_0 + 4.88761904761903*G0_0_0_15_1_1 + 0.548571428571428*G0_0_0_16_1_0 - 0.975238095238094*G0_0_0_16_1_1 + 7.21523809523806*G0_0_0_17_1_0 - 2.98666666666665*G0_0_0_17_1_1 - 5.44761904761902*G0_0_0_18_1_0 - 3.55809523809522*G0_0_0_18_1_1 + 6.21714285714282*G0_0_0_19_1_0 + 5.85142857142854*G0_0_0_19_1_1 + 0.9695238095238*G0_0_1_0_0_0 + 0.969523809523802*G0_0_1_0_0_1 + 2.83619047619046*G0_0_1_1_0_0 - 0.00952380952380671*G0_0_1_2_0_1 + 0.108571428571427*G0_0_1_3_0_0 + 4.75999999999998*G0_0_1_3_0_1 - 1.80571428571428*G0_0_1_4_0_1 + 0.279999999999996*G0_0_1_5_0_0 - 2.76571428571426*G0_0_1_5_0_1 + 1.80571428571427*G0_0_1_6_0_1 + 1.01142857142857*G0_0_1_7_0_0 + 4.05714285714283*G0_0_1_7_0_1 - 4.81714285714283*G0_0_1_8_0_0 - 4.75999999999998*G0_0_1_8_0_1 - 0.388571428571423*G0_0_1_9_0_0 - 2.25142857142855*G0_0_1_9_0_1 + 0.9695238095238*G0_0_1_10_1_0 + 0.969523809523802*G0_0_1_10_1_1 + 2.83619047619046*G0_0_1_11_1_0 - 0.00952380952380671*G0_0_1_12_1_1 + 0.108571428571427*G0_0_1_13_1_0 + 4.75999999999998*G0_0_1_13_1_1 - 1.80571428571428*G0_0_1_14_1_1 + 0.279999999999996*G0_0_1_15_1_0 - 2.76571428571426*G0_0_1_15_1_1 + 1.80571428571427*G0_0_1_16_1_1 + 1.01142857142857*G0_0_1_17_1_0 + 4.05714285714283*G0_0_1_17_1_1 - 4.81714285714283*G0_0_1_18_1_0 - 4.75999999999998*G0_0_1_18_1_1 - 0.388571428571423*G0_0_1_19_1_0 - 2.25142857142855*G0_0_1_19_1_1 + 0.359999999999996*G0_1_0_0_0_0 + 0.359999999999997*G0_1_0_0_0_1 + 2.19619047619046*G0_1_0_1_0_0 + 0.569523809523808*G0_1_0_2_0_1 - 0.287619047619043*G0_1_0_3_0_0 + 3.89142857142855*G0_1_0_3_0_1 - 0.0304761904761913*G0_1_0_4_0_0 - 2.58285714285713*G0_1_0_4_0_1 + 1.04190476190476*G0_1_0_5_0_0 - 0.556190476190467*G0_1_0_5_0_1 + 0.0304761904761909*G0_1_0_6_0_0 - 0.373333333333338*G0_1_0_6_0_1 + 0.40190476190476*G0_1_0_7_0_0 + 1.99999999999999*G0_1_0_7_0_1 - 2.95809523809522*G0_1_0_8_0_0 - 3.89142857142855*G0_1_0_8_0_1 - 0.754285714285717*G0_1_0_9_0_0 + 0.582857142857141*G0_1_0_9_0_1 + 0.359999999999996*G0_1_0_10_1_0 + 0.359999999999997*G0_1_0_10_1_1 + 2.19619047619046*G0_1_0_11_1_0 + 0.569523809523808*G0_1_0_12_1_1 - 0.287619047619043*G0_1_0_13_1_0 + 3.89142857142855*G0_1_0_13_1_1 - 0.0304761904761913*G0_1_0_14_1_0 - 2.58285714285713*G0_1_0_14_1_1 + 1.04190476190476*G0_1_0_15_1_0 - 0.556190476190467*G0_1_0_15_1_1 + 0.0304761904761909*G0_1_0_16_1_0 - 0.373333333333338*G0_1_0_16_1_1 + 0.40190476190476*G0_1_0_17_1_0 + 1.99999999999999*G0_1_0_17_1_1 - 2.95809523809522*G0_1_0_18_1_0 - 3.89142857142855*G0_1_0_18_1_1 - 0.754285714285717*G0_1_0_19_1_0 + 0.582857142857141*G0_1_0_19_1_1 + 0.344126984126982*G0_1_1_0_0_0 + 0.344126984126982*G0_1_1_0_0_1 + 2.50158730158729*G0_1_1_1_0_0 + 1.39301587301587*G0_1_1_2_0_1 + 0.662857142857138*G0_1_1_3_0_0 + 6.34285714285711*G0_1_1_3_0_1 - 0.365714285714286*G0_1_1_4_0_0 - 4.93714285714283*G0_1_1_4_0_1 - 0.640000000000002*G0_1_1_5_0_0 + 0.365714285714286*G0_1_1_6_0_0 - 1.73714285714285*G0_1_1_6_0_1 - 3.38285714285713*G0_1_1_7_0_0 - 4.02285714285714*G0_1_1_7_0_1 + 0.537142857142867*G0_1_1_8_0_0 - 6.34285714285711*G0_1_1_8_0_1 - 0.0228571428571369*G0_1_1_9_0_0 + 8.95999999999997*G0_1_1_9_0_1 + 0.344126984126982*G0_1_1_10_1_0 + 0.344126984126982*G0_1_1_10_1_1 + 2.50158730158729*G0_1_1_11_1_0 + 1.39301587301587*G0_1_1_12_1_1 + 0.662857142857138*G0_1_1_13_1_0 + 6.34285714285711*G0_1_1_13_1_1 - 0.365714285714286*G0_1_1_14_1_0 - 4.93714285714283*G0_1_1_14_1_1 - 0.640000000000002*G0_1_1_15_1_0 + 0.365714285714286*G0_1_1_16_1_0 - 1.73714285714285*G0_1_1_16_1_1 - 3.38285714285713*G0_1_1_17_1_0 - 4.02285714285714*G0_1_1_17_1_1 + 0.537142857142867*G0_1_1_18_1_0 - 6.34285714285711*G0_1_1_18_1_1 - 0.0228571428571369*G0_1_1_19_1_0 + 8.95999999999997*G0_1_1_19_1_1;
    A[370] = A[312] + 0.609523809523804*G0_0_1_0_0_0 + 0.609523809523805*G0_0_1_0_0_1 + 0.639999999999999*G0_0_1_1_0_0 - 0.579047619047614*G0_0_1_2_0_1 + 0.39619047619047*G0_0_1_3_0_0 + 0.868571428571427*G0_0_1_3_0_1 + 0.0304761904761918*G0_0_1_4_0_0 + 0.777142857142849*G0_0_1_4_0_1 - 0.761904761904765*G0_0_1_5_0_0 - 2.2095238095238*G0_0_1_5_0_1 - 0.0304761904761918*G0_0_1_6_0_0 + 2.17904761904761*G0_0_1_6_0_1 + 0.609523809523806*G0_0_1_7_0_0 + 2.05714285714284*G0_0_1_7_0_1 - 1.85904761904761*G0_0_1_8_0_0 - 0.868571428571428*G0_0_1_8_0_1 + 0.365714285714294*G0_0_1_9_0_0 - 2.83428571428569*G0_0_1_9_0_1 + 0.609523809523804*G0_0_1_10_1_0 + 0.609523809523805*G0_0_1_10_1_1 + 0.639999999999999*G0_0_1_11_1_0 - 0.579047619047614*G0_0_1_12_1_1 + 0.39619047619047*G0_0_1_13_1_0 + 0.868571428571427*G0_0_1_13_1_1 + 0.0304761904761918*G0_0_1_14_1_0 + 0.777142857142849*G0_0_1_14_1_1 - 0.761904761904765*G0_0_1_15_1_0 - 2.2095238095238*G0_0_1_15_1_1 - 0.0304761904761918*G0_0_1_16_1_0 + 2.17904761904761*G0_0_1_16_1_1 + 0.609523809523806*G0_0_1_17_1_0 + 2.05714285714284*G0_0_1_17_1_1 - 1.85904761904761*G0_0_1_18_1_0 - 0.868571428571428*G0_0_1_18_1_1 + 0.365714285714294*G0_0_1_19_1_0 - 2.83428571428569*G0_0_1_19_1_1 - 0.609523809523804*G0_1_0_0_0_0 - 0.609523809523804*G0_1_0_0_0_1 - 0.639999999999999*G0_1_0_1_0_0 + 0.579047619047614*G0_1_0_2_0_1 - 0.39619047619047*G0_1_0_3_0_0 - 0.868571428571427*G0_1_0_3_0_1 - 0.0304761904761917*G0_1_0_4_0_0 - 0.777142857142849*G0_1_0_4_0_1 + 0.761904761904766*G0_1_0_5_0_0 + 2.2095238095238*G0_1_0_5_0_1 + 0.0304761904761918*G0_1_0_6_0_0 - 2.17904761904761*G0_1_0_6_0_1 - 0.609523809523806*G0_1_0_7_0_0 - 2.05714285714284*G0_1_0_7_0_1 + 1.85904761904761*G0_1_0_8_0_0 + 0.868571428571428*G0_1_0_8_0_1 - 0.365714285714295*G0_1_0_9_0_0 + 2.83428571428569*G0_1_0_9_0_1 - 0.609523809523804*G0_1_0_10_1_0 - 0.609523809523804*G0_1_0_10_1_1 - 0.639999999999999*G0_1_0_11_1_0 + 0.579047619047614*G0_1_0_12_1_1 - 0.39619047619047*G0_1_0_13_1_0 - 0.868571428571427*G0_1_0_13_1_1 - 0.0304761904761917*G0_1_0_14_1_0 - 0.777142857142849*G0_1_0_14_1_1 + 0.761904761904766*G0_1_0_15_1_0 + 2.2095238095238*G0_1_0_15_1_1 + 0.0304761904761918*G0_1_0_16_1_0 - 2.17904761904761*G0_1_0_16_1_1 - 0.609523809523806*G0_1_0_17_1_0 - 2.05714285714284*G0_1_0_17_1_1 + 1.85904761904761*G0_1_0_18_1_0 + 0.868571428571428*G0_1_0_18_1_1 - 0.365714285714295*G0_1_0_19_1_0 + 2.83428571428569*G0_1_0_19_1_1;
    A[652] = A[309] - 2.68359788359788*G0_0_0_0_0_0 - 2.68359788359788*G0_0_0_0_0_1 + 1.71851851851851*G0_0_0_1_0_0 - 1.01417989417989*G0_0_0_2_0_1 + 1.38666666666666*G0_0_0_3_0_0 + 2.92063492063491*G0_0_0_3_0_1 - 3.36761904761903*G0_0_0_4_0_0 - 2.16888888888888*G0_0_0_4_0_1 - 3.21523809523808*G0_0_0_5_0_0 + 2.54984126984126*G0_0_0_5_0_1 + 3.36761904761903*G0_0_0_6_0_0 + 1.1479365079365*G0_0_0_6_0_1 + 4.45968253968252*G0_0_0_7_0_0 - 1.30539682539682*G0_0_0_7_0_1 - 3.49460317460316*G0_0_0_8_0_0 - 2.92063492063491*G0_0_0_8_0_1 + 1.82857142857142*G0_0_0_9_0_0 + 3.4742857142857*G0_0_0_9_0_1 - 2.68359788359788*G0_0_0_10_1_0 - 2.68359788359788*G0_0_0_10_1_1 + 1.71851851851851*G0_0_0_11_1_0 - 1.01417989417989*G0_0_0_12_1_1 + 1.38666666666666*G0_0_0_13_1_0 + 2.92063492063491*G0_0_0_13_1_1 - 3.36761904761903*G0_0_0_14_1_0 - 2.16888888888888*G0_0_0_14_1_1 - 3.21523809523808*G0_0_0_15_1_0 + 2.54984126984126*G0_0_0_15_1_1 + 3.36761904761903*G0_0_0_16_1_0 + 1.1479365079365*G0_0_0_16_1_1 + 4.45968253968252*G0_0_0_17_1_0 - 1.30539682539682*G0_0_0_17_1_1 - 3.49460317460316*G0_0_0_18_1_0 - 2.92063492063491*G0_0_0_18_1_1 + 1.82857142857142*G0_0_0_19_1_0 + 3.4742857142857*G0_0_0_19_1_1 + 0.50285714285714*G0_0_1_1_0_0 - 0.502857142857141*G0_0_1_2_0_1 + 2.62857142857142*G0_0_1_3_0_0 + 3.13142857142856*G0_0_1_3_0_1 - 3.13142857142856*G0_0_1_4_0_0 - 2.62857142857141*G0_0_1_4_0_1 + 1.62285714285714*G0_0_1_5_0_0 + 1.62285714285713*G0_0_1_5_0_1 + 3.13142857142856*G0_0_1_6_0_0 - 1.11999999999999*G0_0_1_6_0_1 - 1.62285714285714*G0_0_1_7_0_0 - 1.62285714285713*G0_0_1_7_0_1 + 1.12*G0_0_1_8_0_0 - 3.13142857142856*G0_0_1_8_0_1 - 4.25142857142855*G0_0_1_9_0_0 + 4.25142857142855*G0_0_1_9_0_1 + 0.50285714285714*G0_0_1_11_1_0 - 0.502857142857141*G0_0_1_12_1_1 + 2.62857142857142*G0_0_1_13_1_0 + 3.13142857142856*G0_0_1_13_1_1 - 3.13142857142856*G0_0_1_14_1_0 - 2.62857142857141*G0_0_1_14_1_1 + 1.62285714285714*G0_0_1_15_1_0 + 1.62285714285713*G0_0_1_15_1_1 + 3.13142857142856*G0_0_1_16_1_0 - 1.11999999999999*G0_0_1_16_1_1 - 1.62285714285714*G0_0_1_17_1_0 - 1.62285714285713*G0_0_1_17_1_1 + 1.12*G0_0_1_18_1_0 - 3.13142857142856*G0_0_1_18_1_1 - 4.25142857142855*G0_0_1_19_1_0 + 4.25142857142855*G0_0_1_19_1_1 + 1.51873015873015*G0_1_0_1_0_0 - 1.51873015873015*G0_1_0_2_0_1 + 1.43492063492063*G0_1_0_3_0_0 + 2.95365079365078*G0_1_0_3_0_1 - 2.95365079365078*G0_1_0_4_0_0 - 1.43492063492063*G0_1_0_4_0_1 - 1.60253968253968*G0_1_0_5_0_0 - 1.60253968253967*G0_1_0_5_0_1 + 2.95365079365078*G0_1_0_6_0_0 + 3.12126984126982*G0_1_0_6_0_1 + 1.60253968253968*G0_1_0_7_0_0 + 1.60253968253967*G0_1_0_7_0_1 - 3.12126984126983*G0_1_0_8_0_0 - 2.95365079365078*G0_1_0_8_0_1 + 0.167619047619047*G0_1_0_9_0_0 - 0.16761904761904*G0_1_0_9_0_1 + 1.51873015873015*G0_1_0_11_1_0 - 1.51873015873015*G0_1_0_12_1_1 + 1.43492063492063*G0_1_0_13_1_0 + 2.95365079365078*G0_1_0_13_1_1 - 2.95365079365078*G0_1_0_14_1_0 - 1.43492063492063*G0_1_0_14_1_1 - 1.60253968253968*G0_1_0_15_1_0 - 1.60253968253967*G0_1_0_15_1_1 + 2.95365079365078*G0_1_0_16_1_0 + 3.12126984126982*G0_1_0_16_1_1 + 1.60253968253968*G0_1_0_17_1_0 + 1.60253968253967*G0_1_0_17_1_1 - 3.12126984126983*G0_1_0_18_1_0 - 2.95365079365078*G0_1_0_18_1_1 + 0.167619047619047*G0_1_0_19_1_0 - 0.16761904761904*G0_1_0_19_1_1 + 2.68359788359787*G0_1_1_0_0_0 + 2.68359788359787*G0_1_1_0_0_1 + 1.01417989417989*G0_1_1_1_0_0 - 1.71851851851851*G0_1_1_2_0_1 + 2.16888888888888*G0_1_1_3_0_0 + 3.36761904761902*G0_1_1_3_0_1 - 2.92063492063491*G0_1_1_4_0_0 - 1.38666666666666*G0_1_1_4_0_1 + 1.30539682539682*G0_1_1_5_0_0 - 4.45968253968251*G0_1_1_5_0_1 + 2.92063492063491*G0_1_1_6_0_0 + 3.49460317460316*G0_1_1_6_0_1 - 2.54984126984126*G0_1_1_7_0_0 + 3.21523809523808*G0_1_1_7_0_1 - 1.1479365079365*G0_1_1_8_0_0 - 3.36761904761903*G0_1_1_8_0_1 - 3.4742857142857*G0_1_1_9_0_0 - 1.82857142857142*G0_1_1_9_0_1 + 2.68359788359787*G0_1_1_10_1_0 + 2.68359788359787*G0_1_1_10_1_1 + 1.01417989417989*G0_1_1_11_1_0 - 1.71851851851851*G0_1_1_12_1_1 + 2.16888888888888*G0_1_1_13_1_0 + 3.36761904761902*G0_1_1_13_1_1 - 2.92063492063491*G0_1_1_14_1_0 - 1.38666666666666*G0_1_1_14_1_1 + 1.30539682539682*G0_1_1_15_1_0 - 4.45968253968251*G0_1_1_15_1_1 + 2.92063492063491*G0_1_1_16_1_0 + 3.49460317460316*G0_1_1_16_1_1 - 2.54984126984126*G0_1_1_17_1_0 + 3.21523809523808*G0_1_1_17_1_1 - 1.1479365079365*G0_1_1_18_1_0 - 3.36761904761903*G0_1_1_18_1_1 - 3.4742857142857*G0_1_1_19_1_0 - 1.82857142857142*G0_1_1_19_1_1;
    A[187] = A[652];
    A[216] = A[652] - 0.863492063492065*G0_0_1_0_0_0 - 0.863492063492064*G0_0_1_0_0_1 + 0.548571428571426*G0_0_1_1_0_0 - 0.467301587301586*G0_0_1_2_0_1 - 0.944761904761899*G0_0_1_3_0_0 - 0.238730158730158*G0_0_1_3_0_1 - 0.0609523809523846*G0_0_1_4_0_0 + 0.248888888888886*G0_0_1_4_0_1 - 4.1142857142857*G0_0_1_5_0_0 - 1.19365079365078*G0_0_1_5_0_1 + 0.0609523809523846*G0_0_1_6_0_0 + 2.52444444444443*G0_0_1_6_0_1 + 2.03174603174603*G0_0_1_7_0_0 - 0.888888888888889*G0_0_1_7_0_1 - 1.71682539682539*G0_0_1_8_0_0 + 0.23873015873016*G0_0_1_8_0_1 + 5.0590476190476*G0_0_1_9_0_0 + 0.640000000000001*G0_0_1_9_0_1 - 0.863492063492065*G0_0_1_10_1_0 - 0.863492063492064*G0_0_1_10_1_1 + 0.548571428571426*G0_0_1_11_1_0 - 0.467301587301586*G0_0_1_12_1_1 - 0.944761904761899*G0_0_1_13_1_0 - 0.238730158730158*G0_0_1_13_1_1 - 0.0609523809523846*G0_0_1_14_1_0 + 0.248888888888886*G0_0_1_14_1_1 - 4.1142857142857*G0_0_1_15_1_0 - 1.19365079365078*G0_0_1_15_1_1 + 0.0609523809523846*G0_0_1_16_1_0 + 2.52444444444443*G0_0_1_16_1_1 + 2.03174603174603*G0_0_1_17_1_0 - 0.888888888888889*G0_0_1_17_1_1 - 1.71682539682539*G0_0_1_18_1_0 + 0.23873015873016*G0_0_1_18_1_1 + 5.0590476190476*G0_0_1_19_1_0 + 0.640000000000001*G0_0_1_19_1_1 + 0.863492063492065*G0_1_0_0_0_0 + 0.863492063492064*G0_1_0_0_0_1 - 0.548571428571426*G0_1_0_1_0_0 + 0.467301587301587*G0_1_0_2_0_1 + 0.944761904761899*G0_1_0_3_0_0 + 0.238730158730158*G0_1_0_3_0_1 + 0.0609523809523851*G0_1_0_4_0_0 - 0.248888888888886*G0_1_0_4_0_1 + 4.1142857142857*G0_1_0_5_0_0 + 1.19365079365078*G0_1_0_5_0_1 - 0.0609523809523846*G0_1_0_6_0_0 - 2.52444444444443*G0_1_0_6_0_1 - 2.03174603174603*G0_1_0_7_0_0 + 0.888888888888889*G0_1_0_7_0_1 + 1.71682539682539*G0_1_0_8_0_0 - 0.238730158730159*G0_1_0_8_0_1 - 5.0590476190476*G0_1_0_9_0_0 - 0.640000000000001*G0_1_0_9_0_1 + 0.863492063492065*G0_1_0_10_1_0 + 0.863492063492064*G0_1_0_10_1_1 - 0.548571428571426*G0_1_0_11_1_0 + 0.467301587301587*G0_1_0_12_1_1 + 0.944761904761899*G0_1_0_13_1_0 + 0.238730158730158*G0_1_0_13_1_1 + 0.0609523809523851*G0_1_0_14_1_0 - 0.248888888888886*G0_1_0_14_1_1 + 4.1142857142857*G0_1_0_15_1_0 + 1.19365079365078*G0_1_0_15_1_1 - 0.0609523809523846*G0_1_0_16_1_0 - 2.52444444444443*G0_1_0_16_1_1 - 2.03174603174603*G0_1_0_17_1_0 + 0.888888888888889*G0_1_0_17_1_1 + 1.71682539682539*G0_1_0_18_1_0 - 0.238730158730159*G0_1_0_18_1_1 - 5.0590476190476*G0_1_0_19_1_0 - 0.640000000000001*G0_1_0_19_1_1;
    A[832] = A[367];
    A[274] = A[277] + 0.365714285714285*G0_0_0_0_0_0 + 0.365714285714285*G0_0_0_0_0_1 - 0.121904761904762*G0_0_0_1_0_0 - 0.0914285714285649*G0_0_0_3_0_0 - 0.0457142857142847*G0_0_0_3_0_1 - 0.167619047619042*G0_0_0_4_0_1 - 0.0914285714285707*G0_0_0_5_0_0 - 0.533333333333334*G0_0_0_5_0_1 + 0.167619047619051*G0_0_0_6_0_1 - 0.853333333333329*G0_0_0_7_0_0 - 0.411428571428566*G0_0_0_7_0_1 + 0.609523809523806*G0_0_0_8_0_0 + 0.0457142857142847*G0_0_0_8_0_1 + 0.182857142857136*G0_0_0_9_0_0 + 0.579047619047609*G0_0_0_9_0_1 + 0.365714285714285*G0_0_0_10_1_0 + 0.365714285714285*G0_0_0_10_1_1 - 0.121904761904762*G0_0_0_11_1_0 - 0.0914285714285649*G0_0_0_13_1_0 - 0.0457142857142847*G0_0_0_13_1_1 - 0.167619047619042*G0_0_0_14_1_1 - 0.0914285714285707*G0_0_0_15_1_0 - 0.533333333333334*G0_0_0_15_1_1 + 0.167619047619051*G0_0_0_16_1_1 - 0.853333333333329*G0_0_0_17_1_0 - 0.411428571428566*G0_0_0_17_1_1 + 0.609523809523806*G0_0_0_18_1_0 + 0.0457142857142847*G0_0_0_18_1_1 + 0.182857142857136*G0_0_0_19_1_0 + 0.579047619047609*G0_0_0_19_1_1 - 1.3815873015873*G0_0_1_0_0_0 - 1.3815873015873*G0_0_1_0_0_1 + 0.223492063492064*G0_0_1_1_0_0 + 0.421587301587298*G0_0_1_2_0_1 - 0.457142857142853*G0_0_1_3_0_0 - 0.220952380952375*G0_0_1_3_0_1 + 0.243809523809519*G0_0_1_4_0_0 - 0.19047619047619*G0_0_1_4_0_1 - 0.121904761904765*G0_0_1_5_0_0 + 2.26285714285714*G0_0_1_5_0_1 - 0.243809523809519*G0_0_1_6_0_0 - 1.30285714285714*G0_0_1_6_0_1 + 2.13333333333333*G0_0_1_7_0_0 - 0.25142857142857*G0_0_1_7_0_1 - 0.975238095238094*G0_0_1_8_0_0 + 0.220952380952375*G0_0_1_8_0_1 + 0.579047619047617*G0_0_1_9_0_0 + 0.441904761904761*G0_0_1_9_0_1 - 1.3815873015873*G0_0_1_10_1_0 - 1.3815873015873*G0_0_1_10_1_1 + 0.223492063492064*G0_0_1_11_1_0 + 0.421587301587298*G0_0_1_12_1_1 - 0.457142857142853*G0_0_1_13_1_0 - 0.220952380952375*G0_0_1_13_1_1 + 0.243809523809519*G0_0_1_14_1_0 - 0.19047619047619*G0_0_1_14_1_1 - 0.121904761904765*G0_0_1_15_1_0 + 2.26285714285714*G0_0_1_15_1_1 - 0.243809523809519*G0_0_1_16_1_0 - 1.30285714285714*G0_0_1_16_1_1 + 2.13333333333333*G0_0_1_17_1_0 - 0.25142857142857*G0_0_1_17_1_1 - 0.975238095238094*G0_0_1_18_1_0 + 0.220952380952375*G0_0_1_18_1_1 + 0.579047619047617*G0_0_1_19_1_0 + 0.441904761904761*G0_0_1_19_1_1 - 0.269206349206347*G0_1_0_0_0_0 - 0.269206349206347*G0_1_0_0_0_1 - 0.00507936507936571*G0_1_0_1_0_0 + 0.177777777777774*G0_1_0_2_0_1 - 0.33523809523809*G0_1_0_3_0_0 - 0.106666666666666*G0_1_0_3_0_1 + 0.0761904761904728*G0_1_0_4_0_0 - 0.335238095238091*G0_1_0_4_0_1 - 0.487619047619046*G0_1_0_5_0_0 + 0.36571428571428*G0_1_0_5_0_1 - 0.076190476190473*G0_1_0_6_0_0 - 0.274285714285708*G0_1_0_6_0_1 - 0.853333333333326*G0_1_0_7_0_1 + 0.274285714285713*G0_1_0_8_0_0 + 0.106666666666666*G0_1_0_8_0_1 + 0.822857142857137*G0_1_0_9_0_0 + 1.18857142857142*G0_1_0_9_0_1 - 0.269206349206347*G0_1_0_10_1_0 - 0.269206349206347*G0_1_0_10_1_1 - 0.00507936507936571*G0_1_0_11_1_0 + 0.177777777777774*G0_1_0_12_1_1 - 0.33523809523809*G0_1_0_13_1_0 - 0.106666666666666*G0_1_0_13_1_1 + 0.0761904761904728*G0_1_0_14_1_0 - 0.335238095238091*G0_1_0_14_1_1 - 0.487619047619046*G0_1_0_15_1_0 + 0.36571428571428*G0_1_0_15_1_1 - 0.076190476190473*G0_1_0_16_1_0 - 0.274285714285708*G0_1_0_16_1_1 - 0.853333333333326*G0_1_0_17_1_1 + 0.274285714285713*G0_1_0_18_1_0 + 0.106666666666666*G0_1_0_18_1_1 + 0.822857142857137*G0_1_0_19_1_0 + 1.18857142857142*G0_1_0_19_1_1 + 1.18349206349206*G0_1_1_0_0_0 + 1.18349206349206*G0_1_1_0_0_1 + 0.172698412698412*G0_1_1_1_0_0 - 0.299682539682539*G0_1_1_2_0_1 - 0.891428571428567*G0_1_1_3_0_0 - 0.106666666666668*G0_1_1_3_0_1 + 0.297142857142855*G0_1_1_4_0_0 - 0.0152380952380933*G0_1_1_4_0_1 - 0.982857142857142*G0_1_1_5_0_0 - 2.86476190476189*G0_1_1_5_0_1 - 0.297142857142856*G0_1_1_6_0_0 + 1.98095238095237*G0_1_1_6_0_1 - 1.04380952380952*G0_1_1_7_0_0 + 0.838095238095233*G0_1_1_7_0_1 - 0.312380952380953*G0_1_1_8_0_0 + 0.106666666666669*G0_1_1_8_0_1 + 1.87428571428571*G0_1_1_9_0_0 - 0.822857142857141*G0_1_1_9_0_1 + 1.18349206349206*G0_1_1_10_1_0 + 1.18349206349206*G0_1_1_10_1_1 + 0.172698412698412*G0_1_1_11_1_0 - 0.299682539682539*G0_1_1_12_1_1 - 0.891428571428567*G0_1_1_13_1_0 - 0.106666666666668*G0_1_1_13_1_1 + 0.297142857142855*G0_1_1_14_1_0 - 0.0152380952380933*G0_1_1_14_1_1 - 0.982857142857142*G0_1_1_15_1_0 - 2.86476190476189*G0_1_1_15_1_1 - 0.297142857142856*G0_1_1_16_1_0 + 1.98095238095237*G0_1_1_16_1_1 - 1.04380952380952*G0_1_1_17_1_0 + 0.838095238095233*G0_1_1_17_1_1 - 0.312380952380953*G0_1_1_18_1_0 + 0.106666666666669*G0_1_1_18_1_1 + 1.87428571428571*G0_1_1_19_1_0 - 0.822857142857141*G0_1_1_19_1_1;
    A[310] = A[775];
    A[745] = A[309] - 0.863492063492056*G0_0_1_0_0_0 - 0.863492063492056*G0_0_1_0_0_1 - 0.467301587301586*G0_0_1_1_0_0 + 0.548571428571424*G0_0_1_2_0_1 + 0.248888888888888*G0_0_1_3_0_0 - 0.0609523809523806*G0_0_1_3_0_1 - 0.238730158730159*G0_0_1_4_0_0 - 0.944761904761899*G0_0_1_4_0_1 - 0.888888888888884*G0_0_1_5_0_0 + 2.03174603174602*G0_0_1_5_0_1 + 0.238730158730159*G0_0_1_6_0_0 - 1.71682539682538*G0_0_1_6_0_1 - 1.19365079365079*G0_0_1_7_0_0 - 4.11428571428569*G0_0_1_7_0_1 + 2.52444444444443*G0_0_1_8_0_0 + 0.0609523809523815*G0_0_1_8_0_1 + 0.639999999999996*G0_0_1_9_0_0 + 5.05904761904759*G0_0_1_9_0_1 - 0.863492063492056*G0_0_1_10_1_0 - 0.863492063492056*G0_0_1_10_1_1 - 0.467301587301586*G0_0_1_11_1_0 + 0.548571428571424*G0_0_1_12_1_1 + 0.248888888888888*G0_0_1_13_1_0 - 0.0609523809523806*G0_0_1_13_1_1 - 0.238730158730159*G0_0_1_14_1_0 - 0.944761904761899*G0_0_1_14_1_1 - 0.888888888888884*G0_0_1_15_1_0 + 2.03174603174602*G0_0_1_15_1_1 + 0.238730158730159*G0_0_1_16_1_0 - 1.71682539682538*G0_0_1_16_1_1 - 1.19365079365079*G0_0_1_17_1_0 - 4.11428571428569*G0_0_1_17_1_1 + 2.52444444444443*G0_0_1_18_1_0 + 0.0609523809523815*G0_0_1_18_1_1 + 0.639999999999996*G0_0_1_19_1_0 + 5.05904761904759*G0_0_1_19_1_1 + 0.863492063492056*G0_1_0_0_0_0 + 0.863492063492056*G0_1_0_0_0_1 + 0.467301587301586*G0_1_0_1_0_0 - 0.548571428571424*G0_1_0_2_0_1 - 0.248888888888888*G0_1_0_3_0_0 + 0.0609523809523806*G0_1_0_3_0_1 + 0.238730158730159*G0_1_0_4_0_0 + 0.944761904761899*G0_1_0_4_0_1 + 0.888888888888884*G0_1_0_5_0_0 - 2.03174603174602*G0_1_0_5_0_1 - 0.238730158730159*G0_1_0_6_0_0 + 1.71682539682538*G0_1_0_6_0_1 + 1.19365079365079*G0_1_0_7_0_0 + 4.11428571428569*G0_1_0_7_0_1 - 2.52444444444443*G0_1_0_8_0_0 - 0.0609523809523815*G0_1_0_8_0_1 - 0.639999999999996*G0_1_0_9_0_0 - 5.05904761904759*G0_1_0_9_0_1 + 0.863492063492056*G0_1_0_10_1_0 + 0.863492063492056*G0_1_0_10_1_1 + 0.467301587301586*G0_1_0_11_1_0 - 0.548571428571424*G0_1_0_12_1_1 - 0.248888888888888*G0_1_0_13_1_0 + 0.0609523809523806*G0_1_0_13_1_1 + 0.238730158730159*G0_1_0_14_1_0 + 0.944761904761899*G0_1_0_14_1_1 + 0.888888888888884*G0_1_0_15_1_0 - 2.03174603174602*G0_1_0_15_1_1 - 0.238730158730159*G0_1_0_16_1_0 + 1.71682539682538*G0_1_0_16_1_1 + 1.19365079365079*G0_1_0_17_1_0 + 4.11428571428569*G0_1_0_17_1_1 - 2.52444444444443*G0_1_0_18_1_0 - 0.0609523809523815*G0_1_0_18_1_1 - 0.639999999999996*G0_1_0_19_1_0 - 5.05904761904759*G0_1_0_19_1_1;
    A[364] = A[132] + 0.335238095238092*G0_0_1_1_0_0 - 0.335238095238096*G0_0_1_2_0_1 + 0.380952380952382*G0_0_1_3_0_0 + 0.716190476190472*G0_0_1_3_0_1 - 0.716190476190475*G0_0_1_4_0_0 - 0.380952380952376*G0_0_1_4_0_1 - 0.289523809523802*G0_0_1_5_0_0 - 0.28952380952381*G0_0_1_5_0_1 + 0.716190476190475*G0_0_1_6_0_0 + 0.624761904761903*G0_0_1_6_0_1 + 0.289523809523807*G0_0_1_7_0_0 + 0.289523809523816*G0_0_1_7_0_1 - 0.624761904761901*G0_0_1_8_0_0 - 0.716190476190472*G0_0_1_8_0_1 - 0.0914285714285796*G0_0_1_9_0_0 + 0.091428571428561*G0_0_1_9_0_1 + 0.335238095238092*G0_0_1_11_1_0 - 0.335238095238096*G0_0_1_12_1_1 + 0.380952380952382*G0_0_1_13_1_0 + 0.716190476190472*G0_0_1_13_1_1 - 0.716190476190475*G0_0_1_14_1_0 - 0.380952380952376*G0_0_1_14_1_1 - 0.289523809523802*G0_0_1_15_1_0 - 0.28952380952381*G0_0_1_15_1_1 + 0.716190476190475*G0_0_1_16_1_0 + 0.624761904761903*G0_0_1_16_1_1 + 0.289523809523807*G0_0_1_17_1_0 + 0.289523809523816*G0_0_1_17_1_1 - 0.624761904761901*G0_0_1_18_1_0 - 0.716190476190472*G0_0_1_18_1_1 - 0.0914285714285796*G0_0_1_19_1_0 + 0.091428571428561*G0_0_1_19_1_1 - 0.335238095238092*G0_1_0_1_0_0 + 0.335238095238096*G0_1_0_2_0_1 - 0.380952380952381*G0_1_0_3_0_0 - 0.716190476190471*G0_1_0_3_0_1 + 0.716190476190475*G0_1_0_4_0_0 + 0.380952380952376*G0_1_0_4_0_1 + 0.289523809523802*G0_1_0_5_0_0 + 0.28952380952381*G0_1_0_5_0_1 - 0.716190476190475*G0_1_0_6_0_0 - 0.624761904761903*G0_1_0_6_0_1 - 0.289523809523807*G0_1_0_7_0_0 - 0.289523809523816*G0_1_0_7_0_1 + 0.624761904761901*G0_1_0_8_0_0 + 0.716190476190472*G0_1_0_8_0_1 + 0.0914285714285792*G0_1_0_9_0_0 - 0.0914285714285614*G0_1_0_9_0_1 - 0.335238095238092*G0_1_0_11_1_0 + 0.335238095238096*G0_1_0_12_1_1 - 0.380952380952381*G0_1_0_13_1_0 - 0.716190476190471*G0_1_0_13_1_1 + 0.716190476190475*G0_1_0_14_1_0 + 0.380952380952376*G0_1_0_14_1_1 + 0.289523809523802*G0_1_0_15_1_0 + 0.28952380952381*G0_1_0_15_1_1 - 0.716190476190475*G0_1_0_16_1_0 - 0.624761904761903*G0_1_0_16_1_1 - 0.289523809523807*G0_1_0_17_1_0 - 0.289523809523816*G0_1_0_17_1_1 + 0.624761904761901*G0_1_0_18_1_0 + 0.716190476190472*G0_1_0_18_1_1 + 0.0914285714285792*G0_1_0_19_1_0 - 0.0914285714285614*G0_1_0_19_1_1;
    A[687] = A[367] + 0.609523809523809*G0_0_1_0_0_0 + 0.609523809523809*G0_0_1_0_0_1 - 0.579047619047615*G0_0_1_1_0_0 + 0.639999999999998*G0_0_1_2_0_1 + 0.777142857142854*G0_0_1_3_0_0 + 0.0304761904761931*G0_0_1_3_0_1 + 0.868571428571428*G0_0_1_4_0_0 + 0.396190476190475*G0_0_1_4_0_1 + 2.05714285714285*G0_0_1_5_0_0 + 0.609523809523803*G0_0_1_5_0_1 - 0.868571428571428*G0_0_1_6_0_0 - 1.85904761904761*G0_0_1_6_0_1 - 2.2095238095238*G0_0_1_7_0_0 - 0.761904761904755*G0_0_1_7_0_1 + 2.17904761904761*G0_0_1_8_0_0 - 0.0304761904761934*G0_0_1_8_0_1 - 2.8342857142857*G0_0_1_9_0_0 + 0.36571428571428*G0_0_1_9_0_1 + 0.609523809523809*G0_0_1_10_1_0 + 0.609523809523809*G0_0_1_10_1_1 - 0.579047619047615*G0_0_1_11_1_0 + 0.639999999999998*G0_0_1_12_1_1 + 0.777142857142854*G0_0_1_13_1_0 + 0.0304761904761931*G0_0_1_13_1_1 + 0.868571428571428*G0_0_1_14_1_0 + 0.396190476190475*G0_0_1_14_1_1 + 2.05714285714285*G0_0_1_15_1_0 + 0.609523809523803*G0_0_1_15_1_1 - 0.868571428571428*G0_0_1_16_1_0 - 1.85904761904761*G0_0_1_16_1_1 - 2.2095238095238*G0_0_1_17_1_0 - 0.761904761904755*G0_0_1_17_1_1 + 2.17904761904761*G0_0_1_18_1_0 - 0.0304761904761934*G0_0_1_18_1_1 - 2.8342857142857*G0_0_1_19_1_0 + 0.36571428571428*G0_0_1_19_1_1 - 0.609523809523809*G0_1_0_0_0_0 - 0.609523809523809*G0_1_0_0_0_1 + 0.579047619047615*G0_1_0_1_0_0 - 0.639999999999998*G0_1_0_2_0_1 - 0.777142857142853*G0_1_0_3_0_0 - 0.030476190476193*G0_1_0_3_0_1 - 0.868571428571428*G0_1_0_4_0_0 - 0.396190476190476*G0_1_0_4_0_1 - 2.05714285714285*G0_1_0_5_0_0 - 0.609523809523803*G0_1_0_5_0_1 + 0.868571428571428*G0_1_0_6_0_0 + 1.85904761904761*G0_1_0_6_0_1 + 2.2095238095238*G0_1_0_7_0_0 + 0.761904761904755*G0_1_0_7_0_1 - 2.17904761904761*G0_1_0_8_0_0 + 0.0304761904761934*G0_1_0_8_0_1 + 2.8342857142857*G0_1_0_9_0_0 - 0.36571428571428*G0_1_0_9_0_1 - 0.609523809523809*G0_1_0_10_1_0 - 0.609523809523809*G0_1_0_10_1_1 + 0.579047619047615*G0_1_0_11_1_0 - 0.639999999999998*G0_1_0_12_1_1 - 0.777142857142853*G0_1_0_13_1_0 - 0.030476190476193*G0_1_0_13_1_1 - 0.868571428571428*G0_1_0_14_1_0 - 0.396190476190476*G0_1_0_14_1_1 - 2.05714285714285*G0_1_0_15_1_0 - 0.609523809523803*G0_1_0_15_1_1 + 0.868571428571428*G0_1_0_16_1_0 + 1.85904761904761*G0_1_0_16_1_1 + 2.2095238095238*G0_1_0_17_1_0 + 0.761904761904755*G0_1_0_17_1_1 - 2.17904761904761*G0_1_0_18_1_0 + 0.0304761904761934*G0_1_0_18_1_1 + 2.8342857142857*G0_1_0_19_1_0 - 0.36571428571428*G0_1_0_19_1_1;
    A[829] = A[364];
    A[124] = A[775] + 2.31746031746031*G0_0_0_0_0_0 + 2.31746031746031*G0_0_0_0_0_1 - 2.92698412698412*G0_0_0_1_0_0 + 2.33777777777776*G0_0_0_2_0_1 - 0.559999999999991*G0_0_0_3_0_0 - 5.5238095238095*G0_0_0_3_0_1 + 8.44571428571424*G0_0_0_4_0_0 + 8.14476190476188*G0_0_0_4_0_1 + 5.13142857142854*G0_0_0_5_0_0 - 1.45904761904762*G0_0_0_5_0_1 - 8.44571428571424*G0_0_0_6_0_0 - 3.19619047619045*G0_0_0_6_0_1 - 3.28380952380951*G0_0_0_7_0_0 + 3.30666666666665*G0_0_0_7_0_1 + 3.89333333333331*G0_0_0_8_0_0 + 5.5238095238095*G0_0_0_8_0_1 - 4.57142857142855*G0_0_0_9_0_0 - 11.4514285714285*G0_0_0_9_0_1 + 2.31746031746031*G0_0_0_10_1_0 + 2.31746031746031*G0_0_0_10_1_1 - 2.92698412698412*G0_0_0_11_1_0 + 2.33777777777776*G0_0_0_12_1_1 - 0.559999999999991*G0_0_0_13_1_0 - 5.5238095238095*G0_0_0_13_1_1 + 8.44571428571424*G0_0_0_14_1_0 + 8.14476190476188*G0_0_0_14_1_1 + 5.13142857142854*G0_0_0_15_1_0 - 1.45904761904762*G0_0_0_15_1_1 - 8.44571428571424*G0_0_0_16_1_0 - 3.19619047619045*G0_0_0_16_1_1 - 3.28380952380951*G0_0_0_17_1_0 + 3.30666666666665*G0_0_0_17_1_1 + 3.89333333333331*G0_0_0_18_1_0 + 5.5238095238095*G0_0_0_18_1_1 - 4.57142857142855*G0_0_0_19_1_0 - 11.4514285714285*G0_0_0_19_1_1 - 0.314920634920632*G0_0_1_0_0_0 - 0.314920634920633*G0_0_1_0_0_1 - 2.92698412698412*G0_0_1_1_0_0 - 0.294603174603176*G0_0_1_2_0_1 + 0.352380952380951*G0_0_1_3_0_0 - 5.52380952380951*G0_0_1_3_0_1 + 1.46095238095237*G0_0_1_4_0_0 + 4.70476190476189*G0_0_1_4_0_1 + 0.779047619047616*G0_0_1_5_0_0 + 1.17333333333333*G0_0_1_5_0_1 - 1.46095238095237*G0_0_1_6_0_0 - 0.563809523809516*G0_0_1_6_0_1 + 0.260952380952382*G0_0_1_7_0_0 - 0.133333333333329*G0_0_1_7_0_1 + 2.98095238095237*G0_0_1_8_0_0 + 5.52380952380951*G0_0_1_8_0_1 - 1.13142857142857*G0_0_1_9_0_0 - 4.57142857142856*G0_0_1_9_0_1 - 0.314920634920632*G0_0_1_10_1_0 - 0.314920634920633*G0_0_1_10_1_1 - 2.92698412698412*G0_0_1_11_1_0 - 0.294603174603176*G0_0_1_12_1_1 + 0.352380952380951*G0_0_1_13_1_0 - 5.52380952380951*G0_0_1_13_1_1 + 1.46095238095237*G0_0_1_14_1_0 + 4.70476190476189*G0_0_1_14_1_1 + 0.779047619047616*G0_0_1_15_1_0 + 1.17333333333333*G0_0_1_15_1_1 - 1.46095238095237*G0_0_1_16_1_0 - 0.563809523809516*G0_0_1_16_1_1 + 0.260952380952382*G0_0_1_17_1_0 - 0.133333333333329*G0_0_1_17_1_1 + 2.98095238095237*G0_0_1_18_1_0 + 5.52380952380951*G0_0_1_18_1_1 - 1.13142857142857*G0_0_1_19_1_0 - 4.57142857142856*G0_0_1_19_1_1 - 0.314920634920632*G0_1_0_0_0_0 - 0.314920634920633*G0_1_0_0_0_1 - 2.92698412698412*G0_1_0_1_0_0 - 0.294603174603176*G0_1_0_2_0_1 + 0.35238095238095*G0_1_0_3_0_0 - 5.52380952380951*G0_1_0_3_0_1 + 1.46095238095237*G0_1_0_4_0_0 + 4.70476190476189*G0_1_0_4_0_1 + 0.779047619047615*G0_1_0_5_0_0 + 1.17333333333333*G0_1_0_5_0_1 - 1.46095238095237*G0_1_0_6_0_0 - 0.563809523809516*G0_1_0_6_0_1 + 0.260952380952382*G0_1_0_7_0_0 - 0.133333333333329*G0_1_0_7_0_1 + 2.98095238095237*G0_1_0_8_0_0 + 5.52380952380951*G0_1_0_8_0_1 - 1.13142857142857*G0_1_0_9_0_0 - 4.57142857142856*G0_1_0_9_0_1 - 0.314920634920632*G0_1_0_10_1_0 - 0.314920634920633*G0_1_0_10_1_1 - 2.92698412698412*G0_1_0_11_1_0 - 0.294603174603176*G0_1_0_12_1_1 + 0.35238095238095*G0_1_0_13_1_0 - 5.52380952380951*G0_1_0_13_1_1 + 1.46095238095237*G0_1_0_14_1_0 + 4.70476190476189*G0_1_0_14_1_1 + 0.779047619047615*G0_1_0_15_1_0 + 1.17333333333333*G0_1_0_15_1_1 - 1.46095238095237*G0_1_0_16_1_0 - 0.563809523809516*G0_1_0_16_1_1 + 0.260952380952382*G0_1_0_17_1_0 - 0.133333333333329*G0_1_0_17_1_1 + 2.98095238095237*G0_1_0_18_1_0 + 5.52380952380951*G0_1_0_18_1_1 - 1.13142857142857*G0_1_0_19_1_0 - 4.57142857142856*G0_1_0_19_1_1 - 0.60952380952381*G0_1_1_0_0_0 - 0.609523809523809*G0_1_1_0_0_1 - 0.609523809523806*G0_1_1_2_0_1 + 2.89523809523809*G0_1_1_3_0_0 + 1.06666666666666*G0_1_1_4_0_0 + 4.57142857142855*G0_1_1_4_0_1 + 1.67619047619047*G0_1_1_5_0_0 + 0.609523809523809*G0_1_1_5_0_1 - 1.06666666666666*G0_1_1_6_0_0 + 0.609523809523808*G0_1_1_6_0_1 + 3.5047619047619*G0_1_1_7_0_0 + 4.57142857142856*G0_1_1_7_0_1 - 2.8952380952381*G0_1_1_8_0_0 - 4.57142857142856*G0_1_1_9_0_0 - 9.14285714285712*G0_1_1_9_0_1 - 0.60952380952381*G0_1_1_10_1_0 - 0.609523809523809*G0_1_1_10_1_1 - 0.609523809523806*G0_1_1_12_1_1 + 2.89523809523809*G0_1_1_13_1_0 + 1.06666666666666*G0_1_1_14_1_0 + 4.57142857142855*G0_1_1_14_1_1 + 1.67619047619047*G0_1_1_15_1_0 + 0.609523809523809*G0_1_1_15_1_1 - 1.06666666666666*G0_1_1_16_1_0 + 0.609523809523808*G0_1_1_16_1_1 + 3.5047619047619*G0_1_1_17_1_0 + 4.57142857142856*G0_1_1_17_1_1 - 2.8952380952381*G0_1_1_18_1_0 - 4.57142857142856*G0_1_1_19_1_0 - 9.14285714285712*G0_1_1_19_1_1;
    A[681] = A[216];
    A[280] = A[745];
    A[589] = A[124];
    A[222] = A[687];
    A[594] = A[274] + 0.020317460317466*G0_0_1_0_0_0 + 0.020317460317466*G0_0_1_0_0_1 - 0.0152380952380979*G0_0_1_1_0_0 - 0.132063492063494*G0_0_1_2_0_1 + 0.215873015873014*G0_0_1_3_0_0 + 0.0609523809523771*G0_0_1_3_0_1 - 0.195555555555557*G0_0_1_4_0_0 + 0.0761904761904763*G0_0_1_4_0_1 - 0.0482539682539682*G0_0_1_5_0_0 - 0.0812698412698503*G0_0_1_5_0_1 + 0.195555555555557*G0_0_1_6_0_0 + 0.193015873015878*G0_0_1_6_0_1 + 0.0126984126984038*G0_0_1_7_0_0 + 0.0457142857142863*G0_0_1_7_0_1 - 0.0177777777777723*G0_0_1_8_0_0 - 0.0609523809523775*G0_0_1_8_0_1 - 0.167619047619046*G0_0_1_9_0_0 - 0.121904761904762*G0_0_1_9_0_1 + 0.020317460317466*G0_0_1_10_1_0 + 0.020317460317466*G0_0_1_10_1_1 - 0.0152380952380979*G0_0_1_11_1_0 - 0.132063492063494*G0_0_1_12_1_1 + 0.215873015873014*G0_0_1_13_1_0 + 0.0609523809523771*G0_0_1_13_1_1 - 0.195555555555557*G0_0_1_14_1_0 + 0.0761904761904763*G0_0_1_14_1_1 - 0.0482539682539682*G0_0_1_15_1_0 - 0.0812698412698503*G0_0_1_15_1_1 + 0.195555555555557*G0_0_1_16_1_0 + 0.193015873015878*G0_0_1_16_1_1 + 0.0126984126984038*G0_0_1_17_1_0 + 0.0457142857142863*G0_0_1_17_1_1 - 0.0177777777777723*G0_0_1_18_1_0 - 0.0609523809523775*G0_0_1_18_1_1 - 0.167619047619046*G0_0_1_19_1_0 - 0.121904761904762*G0_0_1_19_1_1 - 0.020317460317466*G0_1_0_0_0_0 - 0.020317460317466*G0_1_0_0_0_1 + 0.0152380952380978*G0_1_0_1_0_0 + 0.132063492063494*G0_1_0_2_0_1 - 0.215873015873014*G0_1_0_3_0_0 - 0.0609523809523772*G0_1_0_3_0_1 + 0.195555555555557*G0_1_0_4_0_0 - 0.076190476190476*G0_1_0_4_0_1 + 0.0482539682539682*G0_1_0_5_0_0 + 0.0812698412698503*G0_1_0_5_0_1 - 0.195555555555557*G0_1_0_6_0_0 - 0.193015873015878*G0_1_0_6_0_1 - 0.0126984126984038*G0_1_0_7_0_0 - 0.0457142857142862*G0_1_0_7_0_1 + 0.0177777777777723*G0_1_0_8_0_0 + 0.0609523809523775*G0_1_0_8_0_1 + 0.167619047619046*G0_1_0_9_0_0 + 0.121904761904762*G0_1_0_9_0_1 - 0.020317460317466*G0_1_0_10_1_0 - 0.020317460317466*G0_1_0_10_1_1 + 0.0152380952380978*G0_1_0_11_1_0 + 0.132063492063494*G0_1_0_12_1_1 - 0.215873015873014*G0_1_0_13_1_0 - 0.0609523809523772*G0_1_0_13_1_1 + 0.195555555555557*G0_1_0_14_1_0 - 0.076190476190476*G0_1_0_14_1_1 + 0.0482539682539682*G0_1_0_15_1_0 + 0.0812698412698503*G0_1_0_15_1_1 - 0.195555555555557*G0_1_0_16_1_0 - 0.193015873015878*G0_1_0_16_1_1 - 0.0126984126984038*G0_1_0_17_1_0 - 0.0457142857142862*G0_1_0_17_1_1 + 0.0177777777777723*G0_1_0_18_1_0 + 0.0609523809523775*G0_1_0_18_1_1 + 0.167619047619046*G0_1_0_19_1_0 + 0.121904761904762*G0_1_0_19_1_1;
    A[834] = A[594] - 1.94031746031745*G0_0_0_0_0_0 - 1.94031746031745*G0_0_0_0_0_1 + 0.0507936507936486*G0_0_0_1_0_0 + 0.172698412698413*G0_0_0_2_0_1 - 1.81333333333333*G0_0_0_3_0_0 - 1.4095238095238*G0_0_0_3_0_1 - 0.335238095238094*G0_0_0_4_0_0 - 0.860952380952381*G0_0_0_4_0_1 - 1.8742857142857*G0_0_0_5_0_0 + 2.33904761904761*G0_0_0_5_0_1 + 0.335238095238093*G0_0_0_6_0_0 - 0.571428571428571*G0_0_0_6_0_1 + 3.04761904761902*G0_0_0_7_0_0 - 1.16571428571428*G0_0_0_7_0_1 - 1.15809523809523*G0_0_0_8_0_0 + 1.4095238095238*G0_0_0_8_0_1 + 3.68761904761903*G0_0_0_9_0_0 + 2.02666666666666*G0_0_0_9_0_1 - 1.94031746031745*G0_0_0_10_1_0 - 1.94031746031745*G0_0_0_10_1_1 + 0.0507936507936486*G0_0_0_11_1_0 + 0.172698412698413*G0_0_0_12_1_1 - 1.81333333333333*G0_0_0_13_1_0 - 1.4095238095238*G0_0_0_13_1_1 - 0.335238095238094*G0_0_0_14_1_0 - 0.860952380952381*G0_0_0_14_1_1 - 1.8742857142857*G0_0_0_15_1_0 + 2.33904761904761*G0_0_0_15_1_1 + 0.335238095238093*G0_0_0_16_1_0 - 0.571428571428571*G0_0_0_16_1_1 + 3.04761904761902*G0_0_0_17_1_0 - 1.16571428571428*G0_0_0_17_1_1 - 1.15809523809523*G0_0_0_18_1_0 + 1.4095238095238*G0_0_0_18_1_1 + 3.68761904761903*G0_0_0_19_1_0 + 2.02666666666666*G0_0_0_19_1_1 + 1.01841269841269*G0_0_1_0_0_0 + 1.01841269841269*G0_0_1_0_0_1 - 0.698412698412695*G0_0_1_1_0_0 + 0.124444444444447*G0_0_1_2_0_1 - 1.14285714285714*G0_0_1_3_0_0 - 1.25714285714285*G0_0_1_3_0_1 + 0.0228571428571442*G0_0_1_4_0_0 - 0.685714285714285*G0_0_1_4_0_1 + 1.18857142857143*G0_0_1_5_0_0 - 0.731428571428559*G0_0_1_5_0_1 - 0.0228571428571444*G0_0_1_6_0_0 - 0.411428571428577*G0_0_1_6_0_1 - 1.91999999999999*G0_0_1_7_0_0 + 1.59999999999999*G0_0_1_8_0_0 + 1.25714285714285*G0_0_1_8_0_1 - 0.0457142857142885*G0_0_1_9_0_0 + 0.685714285714284*G0_0_1_9_0_1 + 1.01841269841269*G0_0_1_10_1_0 + 1.01841269841269*G0_0_1_10_1_1 - 0.698412698412695*G0_0_1_11_1_0 + 0.124444444444447*G0_0_1_12_1_1 - 1.14285714285714*G0_0_1_13_1_0 - 1.25714285714285*G0_0_1_13_1_1 + 0.0228571428571442*G0_0_1_14_1_0 - 0.685714285714285*G0_0_1_14_1_1 + 1.18857142857143*G0_0_1_15_1_0 - 0.731428571428559*G0_0_1_15_1_1 - 0.0228571428571444*G0_0_1_16_1_0 - 0.411428571428577*G0_0_1_16_1_1 - 1.91999999999999*G0_0_1_17_1_0 + 1.59999999999999*G0_0_1_18_1_0 + 1.25714285714285*G0_0_1_18_1_1 - 0.0457142857142885*G0_0_1_19_1_0 + 0.685714285714284*G0_0_1_19_1_1 - 0.383492063492061*G0_1_0_0_0_0 - 0.38349206349206*G0_1_0_0_0_1 + 0.0177777777777748*G0_1_0_1_0_0 - 0.39365079365079*G0_1_0_2_0_1 - 1.27238095238095*G0_1_0_3_0_0 - 1.37904761904762*G0_1_0_3_0_1 - 0.152380952380951*G0_1_0_4_0_0 + 0.365714285714283*G0_1_0_4_0_1 + 0.0228571428571444*G0_1_0_5_0_0 + 0.15238095238095*G0_1_0_6_0_0 + 0.777142857142849*G0_1_0_6_0_1 + 2.46095238095236*G0_1_0_7_0_0 + 2.48380952380951*G0_1_0_7_0_1 - 2.09523809523808*G0_1_0_8_0_0 + 1.37904761904762*G0_1_0_8_0_1 + 1.2495238095238*G0_1_0_9_0_0 - 2.84952380952379*G0_1_0_9_0_1 - 0.383492063492061*G0_1_0_10_1_0 - 0.38349206349206*G0_1_0_10_1_1 + 0.0177777777777748*G0_1_0_11_1_0 - 0.39365079365079*G0_1_0_12_1_1 - 1.27238095238095*G0_1_0_13_1_0 - 1.37904761904762*G0_1_0_13_1_1 - 0.152380952380951*G0_1_0_14_1_0 + 0.365714285714283*G0_1_0_14_1_1 + 0.0228571428571444*G0_1_0_15_1_0 + 0.15238095238095*G0_1_0_16_1_0 + 0.777142857142849*G0_1_0_16_1_1 + 2.46095238095236*G0_1_0_17_1_0 + 2.48380952380951*G0_1_0_17_1_1 - 2.09523809523808*G0_1_0_18_1_0 + 1.37904761904762*G0_1_0_18_1_1 + 1.2495238095238*G0_1_0_19_1_0 - 2.84952380952379*G0_1_0_19_1_1 + 2.57523809523808*G0_1_1_0_0_0 + 2.57523809523808*G0_1_1_0_0_1 - 0.0304761904761901*G0_1_1_1_0_0 - 1.14285714285713*G0_1_1_2_0_1 - 1.09714285714285*G0_1_1_3_0_0 - 1.02095238095238*G0_1_1_3_0_1 + 1.03619047619047*G0_1_1_4_0_1 + 1.18857142857143*G0_1_1_5_0_0 - 4.96761904761901*G0_1_1_5_0_1 + 3.53523809523807*G0_1_1_6_0_1 - 0.609523809523802*G0_1_1_7_0_0 + 5.54666666666664*G0_1_1_7_0_1 - 1.93523809523809*G0_1_1_8_0_0 + 1.02095238095238*G0_1_1_8_0_1 - 0.0914285714285725*G0_1_1_9_0_0 - 6.58285714285711*G0_1_1_9_0_1 + 2.57523809523808*G0_1_1_10_1_0 + 2.57523809523808*G0_1_1_10_1_1 - 0.0304761904761901*G0_1_1_11_1_0 - 1.14285714285713*G0_1_1_12_1_1 - 1.09714285714285*G0_1_1_13_1_0 - 1.02095238095238*G0_1_1_13_1_1 + 1.03619047619047*G0_1_1_14_1_1 + 1.18857142857143*G0_1_1_15_1_0 - 4.96761904761901*G0_1_1_15_1_1 + 3.53523809523807*G0_1_1_16_1_1 - 0.609523809523802*G0_1_1_17_1_0 + 5.54666666666664*G0_1_1_17_1_1 - 1.93523809523809*G0_1_1_18_1_0 + 1.02095238095238*G0_1_1_18_1_1 - 0.0914285714285725*G0_1_1_19_1_0 - 6.58285714285711*G0_1_1_19_1_1;
    A[747] = A[834] - 1.42222222222222*G0_0_1_0_0_0 - 1.42222222222222*G0_0_1_0_0_1 + 0.731428571428568*G0_0_1_1_0_0 - 0.386031746031743*G0_0_1_2_0_1 - 0.345396825396824*G0_0_1_3_0_0 - 0.182857142857141*G0_0_1_3_0_1 + 0.020317460317462*G0_0_1_4_0_0 + 0.975238095238091*G0_0_1_4_0_1 - 1.11746031746031*G0_0_1_5_0_0 + 0.812698412698411*G0_0_1_5_0_1 - 0.0203174603174624*G0_0_1_6_0_0 + 0.995555555555549*G0_0_1_6_0_1 + 4.36825396825395*G0_0_1_7_0_0 + 2.43809523809522*G0_0_1_7_0_1 - 3.6774603174603*G0_0_1_8_0_0 + 0.182857142857141*G0_0_1_8_0_1 + 1.46285714285714*G0_0_1_9_0_0 - 3.41333333333331*G0_0_1_9_0_1 - 1.42222222222222*G0_0_1_10_1_0 - 1.42222222222222*G0_0_1_10_1_1 + 0.731428571428568*G0_0_1_11_1_0 - 0.386031746031743*G0_0_1_12_1_1 - 0.345396825396824*G0_0_1_13_1_0 - 0.182857142857141*G0_0_1_13_1_1 + 0.020317460317462*G0_0_1_14_1_0 + 0.975238095238091*G0_0_1_14_1_1 - 1.11746031746031*G0_0_1_15_1_0 + 0.812698412698411*G0_0_1_15_1_1 - 0.0203174603174624*G0_0_1_16_1_0 + 0.995555555555549*G0_0_1_16_1_1 + 4.36825396825395*G0_0_1_17_1_0 + 2.43809523809522*G0_0_1_17_1_1 - 3.6774603174603*G0_0_1_18_1_0 + 0.182857142857141*G0_0_1_18_1_1 + 1.46285714285714*G0_0_1_19_1_0 - 3.41333333333331*G0_0_1_19_1_1 + 1.42222222222222*G0_1_0_0_0_0 + 1.42222222222222*G0_1_0_0_0_1 - 0.731428571428568*G0_1_0_1_0_0 + 0.386031746031743*G0_1_0_2_0_1 + 0.345396825396824*G0_1_0_3_0_0 + 0.182857142857141*G0_1_0_3_0_1 - 0.020317460317462*G0_1_0_4_0_0 - 0.975238095238091*G0_1_0_4_0_1 + 1.11746031746031*G0_1_0_5_0_0 - 0.812698412698411*G0_1_0_5_0_1 + 0.0203174603174625*G0_1_0_6_0_0 - 0.995555555555549*G0_1_0_6_0_1 - 4.36825396825395*G0_1_0_7_0_0 - 2.43809523809522*G0_1_0_7_0_1 + 3.6774603174603*G0_1_0_8_0_0 - 0.182857142857141*G0_1_0_8_0_1 - 1.46285714285714*G0_1_0_9_0_0 + 3.41333333333331*G0_1_0_9_0_1 + 1.42222222222222*G0_1_0_10_1_0 + 1.42222222222222*G0_1_0_10_1_1 - 0.731428571428568*G0_1_0_11_1_0 + 0.386031746031743*G0_1_0_12_1_1 + 0.345396825396824*G0_1_0_13_1_0 + 0.182857142857141*G0_1_0_13_1_1 - 0.020317460317462*G0_1_0_14_1_0 - 0.975238095238091*G0_1_0_14_1_1 + 1.11746031746031*G0_1_0_15_1_0 - 0.812698412698411*G0_1_0_15_1_1 + 0.0203174603174625*G0_1_0_16_1_0 - 0.995555555555549*G0_1_0_16_1_1 - 4.36825396825395*G0_1_0_17_1_0 - 2.43809523809522*G0_1_0_17_1_1 + 3.6774603174603*G0_1_0_18_1_0 - 0.182857142857141*G0_1_0_18_1_1 - 1.46285714285714*G0_1_0_19_1_0 + 3.41333333333331*G0_1_0_19_1_1;
    A[448] = 0.0;
    A[304] = A[769];
    A[475] = A[765] + 1.47777777777777*G0_0_1_0_0_0 + 1.47777777777777*G0_0_1_0_0_1 - 0.276190476190474*G0_0_1_1_0_0 - 0.174603174603174*G0_0_1_2_0_1 + 0.0849206349206355*G0_0_1_3_0_0 + 0.034126984126984*G0_0_1_3_0_1 + 0.103968253968254*G0_0_1_4_0_0 + 0.0531746031746039*G0_0_1_4_0_1 + 0.586507936507934*G0_0_1_5_0_0 - 2.11825396825396*G0_0_1_5_0_1 - 0.103968253968254*G0_0_1_6_0_0 + 0.815079365079362*G0_0_1_6_0_1 - 2.35317460317459*G0_0_1_7_0_0 + 0.351587301587301*G0_0_1_7_0_1 + 1.1515873015873*G0_0_1_8_0_0 - 0.0341269841269842*G0_0_1_8_0_1 - 0.671428571428569*G0_0_1_9_0_0 - 0.404761904761905*G0_0_1_9_0_1 + 1.47777777777777*G0_0_1_10_1_0 + 1.47777777777777*G0_0_1_10_1_1 - 0.276190476190474*G0_0_1_11_1_0 - 0.174603174603174*G0_0_1_12_1_1 + 0.0849206349206355*G0_0_1_13_1_0 + 0.034126984126984*G0_0_1_13_1_1 + 0.103968253968254*G0_0_1_14_1_0 + 0.0531746031746039*G0_0_1_14_1_1 + 0.586507936507934*G0_0_1_15_1_0 - 2.11825396825396*G0_0_1_15_1_1 - 0.103968253968254*G0_0_1_16_1_0 + 0.815079365079362*G0_0_1_16_1_1 - 2.35317460317459*G0_0_1_17_1_0 + 0.351587301587301*G0_0_1_17_1_1 + 1.1515873015873*G0_0_1_18_1_0 - 0.0341269841269842*G0_0_1_18_1_1 - 0.671428571428569*G0_0_1_19_1_0 - 0.404761904761905*G0_0_1_19_1_1 - 1.47777777777777*G0_1_0_0_0_0 - 1.47777777777777*G0_1_0_0_0_1 + 0.276190476190474*G0_1_0_1_0_0 + 0.174603174603174*G0_1_0_2_0_1 - 0.0849206349206355*G0_1_0_3_0_0 - 0.034126984126984*G0_1_0_3_0_1 - 0.103968253968254*G0_1_0_4_0_0 - 0.0531746031746038*G0_1_0_4_0_1 - 0.586507936507934*G0_1_0_5_0_0 + 2.11825396825396*G0_1_0_5_0_1 + 0.103968253968254*G0_1_0_6_0_0 - 0.815079365079362*G0_1_0_6_0_1 + 2.35317460317459*G0_1_0_7_0_0 - 0.351587301587301*G0_1_0_7_0_1 - 1.1515873015873*G0_1_0_8_0_0 + 0.0341269841269842*G0_1_0_8_0_1 + 0.671428571428569*G0_1_0_9_0_0 + 0.404761904761905*G0_1_0_9_0_1 - 1.47777777777777*G0_1_0_10_1_0 - 1.47777777777777*G0_1_0_10_1_1 + 0.276190476190474*G0_1_0_11_1_0 + 0.174603174603174*G0_1_0_12_1_1 - 0.0849206349206355*G0_1_0_13_1_0 - 0.034126984126984*G0_1_0_13_1_1 - 0.103968253968254*G0_1_0_14_1_0 - 0.0531746031746038*G0_1_0_14_1_1 - 0.586507936507934*G0_1_0_15_1_0 + 2.11825396825396*G0_1_0_15_1_1 + 0.103968253968254*G0_1_0_16_1_0 - 0.815079365079362*G0_1_0_16_1_1 + 2.35317460317459*G0_1_0_17_1_0 - 0.351587301587301*G0_1_0_17_1_1 - 1.1515873015873*G0_1_0_18_1_0 + 0.0341269841269842*G0_1_0_18_1_1 + 0.671428571428569*G0_1_0_19_1_0 + 0.404761904761905*G0_1_0_19_1_1;
    A[339] = A[804];
    A[18] = 0.0;
    A[735] = A[270];
    A[426] = A[194] + 0.406349206349208*G0_0_1_0_0_0 + 0.406349206349209*G0_0_1_0_0_1 + 0.101587301587302*G0_0_1_1_0_0 + 0.121904761904764*G0_0_1_2_0_1 - 0.731428571428572*G0_0_1_3_0_0 - 0.101587301587299*G0_0_1_3_0_1 + 0.42666666666667*G0_0_1_4_0_0 - 0.223492063492065*G0_0_1_4_0_1 - 0.487619047619043*G0_0_1_5_0_0 - 0.995555555555556*G0_0_1_5_0_1 - 0.426666666666671*G0_0_1_6_0_0 + 0.467301587301583*G0_0_1_6_0_1 - 0.528253968253973*G0_0_1_7_0_0 - 0.0203174603174608*G0_0_1_7_0_1 + 0.0203174603174624*G0_0_1_8_0_0 + 0.101587301587299*G0_0_1_8_0_1 + 1.21904761904762*G0_0_1_9_0_0 + 0.243809523809526*G0_0_1_9_0_1 + 0.406349206349208*G0_0_1_10_1_0 + 0.406349206349209*G0_0_1_10_1_1 + 0.101587301587302*G0_0_1_11_1_0 + 0.121904761904764*G0_0_1_12_1_1 - 0.731428571428572*G0_0_1_13_1_0 - 0.101587301587299*G0_0_1_13_1_1 + 0.42666666666667*G0_0_1_14_1_0 - 0.223492063492065*G0_0_1_14_1_1 - 0.487619047619043*G0_0_1_15_1_0 - 0.995555555555556*G0_0_1_15_1_1 - 0.426666666666671*G0_0_1_16_1_0 + 0.467301587301583*G0_0_1_16_1_1 - 0.528253968253973*G0_0_1_17_1_0 - 0.0203174603174608*G0_0_1_17_1_1 + 0.0203174603174624*G0_0_1_18_1_0 + 0.101587301587299*G0_0_1_18_1_1 + 1.21904761904762*G0_0_1_19_1_0 + 0.243809523809526*G0_0_1_19_1_1 - 0.406349206349208*G0_1_0_0_0_0 - 0.406349206349209*G0_1_0_0_0_1 - 0.101587301587302*G0_1_0_1_0_0 - 0.121904761904764*G0_1_0_2_0_1 + 0.731428571428572*G0_1_0_3_0_0 + 0.101587301587299*G0_1_0_3_0_1 - 0.42666666666667*G0_1_0_4_0_0 + 0.223492063492065*G0_1_0_4_0_1 + 0.487619047619043*G0_1_0_5_0_0 + 0.995555555555556*G0_1_0_5_0_1 + 0.42666666666667*G0_1_0_6_0_0 - 0.467301587301583*G0_1_0_6_0_1 + 0.528253968253973*G0_1_0_7_0_0 + 0.0203174603174608*G0_1_0_7_0_1 - 0.0203174603174625*G0_1_0_8_0_0 - 0.101587301587299*G0_1_0_8_0_1 - 1.21904761904762*G0_1_0_9_0_0 - 0.243809523809526*G0_1_0_9_0_1 - 0.406349206349208*G0_1_0_10_1_0 - 0.406349206349209*G0_1_0_10_1_1 - 0.101587301587302*G0_1_0_11_1_0 - 0.121904761904764*G0_1_0_12_1_1 + 0.731428571428572*G0_1_0_13_1_0 + 0.101587301587299*G0_1_0_13_1_1 - 0.42666666666667*G0_1_0_14_1_0 + 0.223492063492065*G0_1_0_14_1_1 + 0.487619047619043*G0_1_0_15_1_0 + 0.995555555555556*G0_1_0_15_1_1 + 0.42666666666667*G0_1_0_16_1_0 - 0.467301587301583*G0_1_0_16_1_1 + 0.528253968253973*G0_1_0_17_1_0 + 0.0203174603174608*G0_1_0_17_1_1 - 0.0203174603174625*G0_1_0_18_1_0 - 0.101587301587299*G0_1_0_18_1_1 - 1.21904761904762*G0_1_0_19_1_0 - 0.243809523809526*G0_1_0_19_1_1;
    A[748] = A[426] + 1.08359788359788*G0_0_0_0_0_0 + 1.08359788359788*G0_0_0_0_0_1 + 0.948148148148142*G0_0_0_1_0_0 - 1.59153439153439*G0_0_0_2_0_1 + 1.52380952380952*G0_0_0_3_0_0 + 2.33650793650792*G0_0_0_3_0_1 - 2.74285714285714*G0_0_0_4_0_0 - 1.01587301587301*G0_0_0_4_0_1 - 0.304761904761909*G0_0_0_5_0_0 - 2.64126984126983*G0_0_0_5_0_1 + 2.74285714285714*G0_0_0_6_0_0 + 3.14920634920634*G0_0_0_6_0_1 - 0.101587301587303*G0_0_0_7_0_0 + 2.23492063492062*G0_0_0_7_0_1 - 1.93015873015872*G0_0_0_8_0_0 - 2.33650793650792*G0_0_0_8_0_1 - 1.21904761904761*G0_0_0_9_0_0 - 1.21904761904761*G0_0_0_9_0_1 + 1.08359788359788*G0_0_0_10_1_0 + 1.08359788359788*G0_0_0_10_1_1 + 0.948148148148142*G0_0_0_11_1_0 - 1.59153439153439*G0_0_0_12_1_1 + 1.52380952380952*G0_0_0_13_1_0 + 2.33650793650792*G0_0_0_13_1_1 - 2.74285714285714*G0_0_0_14_1_0 - 1.01587301587301*G0_0_0_14_1_1 - 0.304761904761909*G0_0_0_15_1_0 - 2.64126984126983*G0_0_0_15_1_1 + 2.74285714285714*G0_0_0_16_1_0 + 3.14920634920634*G0_0_0_16_1_1 - 0.101587301587303*G0_0_0_17_1_0 + 2.23492063492062*G0_0_0_17_1_1 - 1.93015873015872*G0_0_0_18_1_0 - 2.33650793650792*G0_0_0_18_1_1 - 1.21904761904761*G0_0_0_19_1_0 - 1.21904761904761*G0_0_0_19_1_1 + 1.4831746031746*G0_0_1_1_0_0 - 1.4831746031746*G0_0_1_2_0_1 + 1.42222222222222*G0_0_1_3_0_0 + 2.90539682539681*G0_0_1_3_0_1 - 2.90539682539682*G0_0_1_4_0_0 - 1.42222222222222*G0_0_1_4_0_1 - 1.54412698412698*G0_0_1_5_0_0 - 1.54412698412696*G0_0_1_5_0_1 + 2.90539682539682*G0_0_1_6_0_0 + 3.02730158730157*G0_0_1_6_0_1 + 1.54412698412699*G0_0_1_7_0_0 + 1.54412698412697*G0_0_1_7_0_1 - 3.02730158730157*G0_0_1_8_0_0 - 2.90539682539681*G0_0_1_8_0_1 + 0.121904761904764*G0_0_1_9_0_0 - 0.121904761904754*G0_0_1_9_0_1 + 1.4831746031746*G0_0_1_11_1_0 - 1.4831746031746*G0_0_1_12_1_1 + 1.42222222222222*G0_0_1_13_1_0 + 2.90539682539681*G0_0_1_13_1_1 - 2.90539682539682*G0_0_1_14_1_0 - 1.42222222222222*G0_0_1_14_1_1 - 1.54412698412698*G0_0_1_15_1_0 - 1.54412698412696*G0_0_1_15_1_1 + 2.90539682539682*G0_0_1_16_1_0 + 3.02730158730157*G0_0_1_16_1_1 + 1.54412698412699*G0_0_1_17_1_0 + 1.54412698412697*G0_0_1_17_1_1 - 3.02730158730157*G0_0_1_18_1_0 - 2.90539682539681*G0_0_1_18_1_1 + 0.121904761904764*G0_0_1_19_1_0 - 0.121904761904754*G0_0_1_19_1_1 + 1.46285714285713*G0_1_0_1_0_0 - 1.46285714285713*G0_1_0_2_0_1 + 0.91428571428571*G0_1_0_3_0_0 + 2.37714285714284*G0_1_0_3_0_1 - 2.37714285714284*G0_1_0_4_0_0 - 0.914285714285709*G0_1_0_4_0_1 - 2.01142857142856*G0_1_0_5_0_0 - 2.01142857142856*G0_1_0_5_0_1 + 2.37714285714285*G0_1_0_6_0_0 + 3.47428571428569*G0_1_0_6_0_1 + 2.01142857142856*G0_1_0_7_0_0 + 2.01142857142856*G0_1_0_7_0_1 - 3.47428571428569*G0_1_0_8_0_0 - 2.37714285714284*G0_1_0_8_0_1 + 1.09714285714285*G0_1_0_9_0_0 - 1.09714285714284*G0_1_0_9_0_1 + 1.46285714285713*G0_1_0_11_1_0 - 1.46285714285713*G0_1_0_12_1_1 + 0.91428571428571*G0_1_0_13_1_0 + 2.37714285714284*G0_1_0_13_1_1 - 2.37714285714284*G0_1_0_14_1_0 - 0.914285714285709*G0_1_0_14_1_1 - 2.01142857142856*G0_1_0_15_1_0 - 2.01142857142856*G0_1_0_15_1_1 + 2.37714285714285*G0_1_0_16_1_0 + 3.47428571428569*G0_1_0_16_1_1 + 2.01142857142856*G0_1_0_17_1_0 + 2.01142857142856*G0_1_0_17_1_1 - 3.47428571428569*G0_1_0_18_1_0 - 2.37714285714284*G0_1_0_18_1_1 + 1.09714285714285*G0_1_0_19_1_0 - 1.09714285714284*G0_1_0_19_1_1 - 1.08359788359788*G0_1_1_0_0_0 - 1.08359788359788*G0_1_1_0_0_1 + 1.59153439153438*G0_1_1_1_0_0 - 0.948148148148143*G0_1_1_2_0_1 + 1.01587301587301*G0_1_1_3_0_0 + 2.74285714285713*G0_1_1_3_0_1 - 2.33650793650792*G0_1_1_4_0_0 - 1.52380952380951*G0_1_1_4_0_1 - 2.23492063492062*G0_1_1_5_0_0 + 0.10158730158731*G0_1_1_5_0_1 + 2.33650793650793*G0_1_1_6_0_0 + 1.93015873015872*G0_1_1_6_0_1 + 2.64126984126983*G0_1_1_7_0_0 + 0.304761904761901*G0_1_1_7_0_1 - 3.14920634920633*G0_1_1_8_0_0 - 2.74285714285713*G0_1_1_8_0_1 + 1.21904761904761*G0_1_1_9_0_0 + 1.21904761904762*G0_1_1_9_0_1 - 1.08359788359788*G0_1_1_10_1_0 - 1.08359788359788*G0_1_1_10_1_1 + 1.59153439153438*G0_1_1_11_1_0 - 0.948148148148143*G0_1_1_12_1_1 + 1.01587301587301*G0_1_1_13_1_0 + 2.74285714285713*G0_1_1_13_1_1 - 2.33650793650792*G0_1_1_14_1_0 - 1.52380952380951*G0_1_1_14_1_1 - 2.23492063492062*G0_1_1_15_1_0 + 0.10158730158731*G0_1_1_15_1_1 + 2.33650793650793*G0_1_1_16_1_0 + 1.93015873015872*G0_1_1_16_1_1 + 2.64126984126983*G0_1_1_17_1_0 + 0.304761904761901*G0_1_1_17_1_1 - 3.14920634920633*G0_1_1_18_1_0 - 2.74285714285713*G0_1_1_18_1_1 + 1.21904761904761*G0_1_1_19_1_0 + 1.21904761904762*G0_1_1_19_1_1;
    A[864] = A[748] - 0.406349206349201*G0_0_1_0_0_0 - 0.406349206349201*G0_0_1_0_0_1 - 0.121904761904764*G0_0_1_1_0_0 - 0.101587301587302*G0_0_1_2_0_1 + 0.223492063492066*G0_0_1_3_0_0 - 0.426666666666666*G0_0_1_3_0_1 + 0.101587301587302*G0_0_1_4_0_0 + 0.731428571428572*G0_0_1_4_0_1 + 0.0203174603174606*G0_0_1_5_0_0 + 0.528253968253962*G0_0_1_5_0_1 - 0.101587301587301*G0_0_1_6_0_0 - 0.0203174603174574*G0_0_1_6_0_1 + 0.995555555555545*G0_0_1_7_0_0 + 0.487619047619044*G0_0_1_7_0_1 - 0.46730158730158*G0_0_1_8_0_0 + 0.426666666666665*G0_0_1_8_0_1 - 0.243809523809527*G0_0_1_9_0_0 - 1.21904761904762*G0_0_1_9_0_1 - 0.406349206349201*G0_0_1_10_1_0 - 0.406349206349201*G0_0_1_10_1_1 - 0.121904761904764*G0_0_1_11_1_0 - 0.101587301587302*G0_0_1_12_1_1 + 0.223492063492066*G0_0_1_13_1_0 - 0.426666666666666*G0_0_1_13_1_1 + 0.101587301587302*G0_0_1_14_1_0 + 0.731428571428572*G0_0_1_14_1_1 + 0.0203174603174606*G0_0_1_15_1_0 + 0.528253968253962*G0_0_1_15_1_1 - 0.101587301587301*G0_0_1_16_1_0 - 0.0203174603174574*G0_0_1_16_1_1 + 0.995555555555545*G0_0_1_17_1_0 + 0.487619047619044*G0_0_1_17_1_1 - 0.46730158730158*G0_0_1_18_1_0 + 0.426666666666665*G0_0_1_18_1_1 - 0.243809523809527*G0_0_1_19_1_0 - 1.21904761904762*G0_0_1_19_1_1 + 0.406349206349202*G0_1_0_0_0_0 + 0.406349206349202*G0_1_0_0_0_1 + 0.121904761904764*G0_1_0_1_0_0 + 0.101587301587302*G0_1_0_2_0_1 - 0.223492063492066*G0_1_0_3_0_0 + 0.426666666666667*G0_1_0_3_0_1 - 0.101587301587302*G0_1_0_4_0_0 - 0.731428571428573*G0_1_0_4_0_1 - 0.0203174603174605*G0_1_0_5_0_0 - 0.528253968253962*G0_1_0_5_0_1 + 0.101587301587302*G0_1_0_6_0_0 + 0.0203174603174575*G0_1_0_6_0_1 - 0.995555555555545*G0_1_0_7_0_0 - 0.487619047619044*G0_1_0_7_0_1 + 0.467301587301579*G0_1_0_8_0_0 - 0.426666666666666*G0_1_0_8_0_1 + 0.243809523809527*G0_1_0_9_0_0 + 1.21904761904762*G0_1_0_9_0_1 + 0.406349206349202*G0_1_0_10_1_0 + 0.406349206349202*G0_1_0_10_1_1 + 0.121904761904764*G0_1_0_11_1_0 + 0.101587301587302*G0_1_0_12_1_1 - 0.223492063492066*G0_1_0_13_1_0 + 0.426666666666667*G0_1_0_13_1_1 - 0.101587301587302*G0_1_0_14_1_0 - 0.731428571428573*G0_1_0_14_1_1 - 0.0203174603174605*G0_1_0_15_1_0 - 0.528253968253962*G0_1_0_15_1_1 + 0.101587301587302*G0_1_0_16_1_0 + 0.0203174603174575*G0_1_0_16_1_1 - 0.995555555555545*G0_1_0_17_1_0 - 0.487619047619044*G0_1_0_17_1_1 + 0.467301587301579*G0_1_0_18_1_0 - 0.426666666666666*G0_1_0_18_1_1 + 0.243809523809527*G0_1_0_19_1_0 + 1.21904761904762*G0_1_0_19_1_1;
    A[283] = A[748];
    A[399] = A[864];
    A[378] = 0.0;
    A[49] = 0.0;
    A[764] = 0.0;
    A[457] = 0.0;
    A[409] = 0.0;
    A[84] = 0.0;
    A[793] = 0.0;
    A[8] = A[240] + 0.590476190476188*G0_0_1_0_0_0 + 0.590476190476188*G0_0_1_0_0_1 - 0.0711111111111104*G0_0_1_1_0_0 - 0.17269841269841*G0_0_1_2_0_1 + 0.0628571428571416*G0_0_1_3_0_0 + 0.052698412698412*G0_0_1_3_0_1 - 0.112380952380949*G0_0_1_4_0_0 - 0.000634920634920072*G0_0_1_4_0_1 + 0.123809523809524*G0_0_1_5_0_0 - 0.955555555555551*G0_0_1_5_0_1 + 0.112380952380949*G0_0_1_6_0_0 + 0.537777777777774*G0_0_1_6_0_1 - 0.815873015873012*G0_0_1_7_0_0 + 0.263492063492063*G0_0_1_7_0_1 + 0.296507936507935*G0_0_1_8_0_0 - 0.052698412698412*G0_0_1_8_0_1 - 0.186666666666666*G0_0_1_9_0_0 - 0.262857142857143*G0_0_1_9_0_1 + 0.590476190476188*G0_0_1_10_1_0 + 0.590476190476188*G0_0_1_10_1_1 - 0.0711111111111104*G0_0_1_11_1_0 - 0.17269841269841*G0_0_1_12_1_1 + 0.0628571428571416*G0_0_1_13_1_0 + 0.052698412698412*G0_0_1_13_1_1 - 0.112380952380949*G0_0_1_14_1_0 - 0.000634920634920072*G0_0_1_14_1_1 + 0.123809523809524*G0_0_1_15_1_0 - 0.955555555555551*G0_0_1_15_1_1 + 0.112380952380949*G0_0_1_16_1_0 + 0.537777777777774*G0_0_1_16_1_1 - 0.815873015873012*G0_0_1_17_1_0 + 0.263492063492063*G0_0_1_17_1_1 + 0.296507936507935*G0_0_1_18_1_0 - 0.052698412698412*G0_0_1_18_1_1 - 0.186666666666666*G0_0_1_19_1_0 - 0.262857142857143*G0_0_1_19_1_1 - 0.590476190476188*G0_1_0_0_0_0 - 0.590476190476188*G0_1_0_0_0_1 + 0.0711111111111104*G0_1_0_1_0_0 + 0.17269841269841*G0_1_0_2_0_1 - 0.0628571428571416*G0_1_0_3_0_0 - 0.052698412698412*G0_1_0_3_0_1 + 0.112380952380949*G0_1_0_4_0_0 + 0.000634920634920072*G0_1_0_4_0_1 - 0.123809523809524*G0_1_0_5_0_0 + 0.955555555555551*G0_1_0_5_0_1 - 0.112380952380949*G0_1_0_6_0_0 - 0.537777777777774*G0_1_0_6_0_1 + 0.815873015873012*G0_1_0_7_0_0 - 0.263492063492063*G0_1_0_7_0_1 - 0.296507936507935*G0_1_0_8_0_0 + 0.052698412698412*G0_1_0_8_0_1 + 0.186666666666666*G0_1_0_9_0_0 + 0.262857142857143*G0_1_0_9_0_1 - 0.590476190476188*G0_1_0_10_1_0 - 0.590476190476188*G0_1_0_10_1_1 + 0.0711111111111104*G0_1_0_11_1_0 + 0.17269841269841*G0_1_0_12_1_1 - 0.0628571428571416*G0_1_0_13_1_0 - 0.052698412698412*G0_1_0_13_1_1 + 0.112380952380949*G0_1_0_14_1_0 + 0.000634920634920072*G0_1_0_14_1_1 - 0.123809523809524*G0_1_0_15_1_0 + 0.955555555555551*G0_1_0_15_1_1 - 0.112380952380949*G0_1_0_16_1_0 - 0.537777777777774*G0_1_0_16_1_1 + 0.815873015873012*G0_1_0_17_1_0 - 0.263492063492063*G0_1_0_17_1_1 - 0.296507936507935*G0_1_0_18_1_0 + 0.052698412698412*G0_1_0_18_1_1 + 0.186666666666666*G0_1_0_19_1_0 + 0.262857142857143*G0_1_0_19_1_1;
    A[5] = -A[8] + 0.590476190476187*G0_0_1_0_0_0 + 0.590476190476188*G0_0_1_0_0_1 - 0.0876190476190465*G0_0_1_1_0_0 - 0.285714285714285*G0_0_1_2_0_1 + 0.227301587301586*G0_0_1_3_0_0 + 0.0711111111111108*G0_0_1_3_0_1 - 0.26031746031746*G0_0_1_4_0_0 + 0.0939682539682524*G0_0_1_4_0_1 + 0.0622222222222212*G0_0_1_5_0_0 - 1.01714285714285*G0_0_1_5_0_1 + 0.26031746031746*G0_0_1_6_0_0 + 0.71238095238095*G0_0_1_6_0_1 - 0.75428571428571*G0_0_1_7_0_0 + 0.325079365079364*G0_0_1_7_0_1 + 0.251428571428569*G0_0_1_8_0_0 - 0.0711111111111109*G0_0_1_8_0_1 - 0.289523809523807*G0_0_1_9_0_0 - 0.419047619047617*G0_0_1_9_0_1 + 0.590476190476187*G0_0_1_10_1_0 + 0.590476190476188*G0_0_1_10_1_1 - 0.0876190476190465*G0_0_1_11_1_0 - 0.285714285714285*G0_0_1_12_1_1 + 0.227301587301586*G0_0_1_13_1_0 + 0.0711111111111108*G0_0_1_13_1_1 - 0.26031746031746*G0_0_1_14_1_0 + 0.0939682539682524*G0_0_1_14_1_1 + 0.0622222222222212*G0_0_1_15_1_0 - 1.01714285714285*G0_0_1_15_1_1 + 0.26031746031746*G0_0_1_16_1_0 + 0.71238095238095*G0_0_1_16_1_1 - 0.75428571428571*G0_0_1_17_1_0 + 0.325079365079364*G0_0_1_17_1_1 + 0.251428571428569*G0_0_1_18_1_0 - 0.0711111111111109*G0_0_1_18_1_1 - 0.289523809523807*G0_0_1_19_1_0 - 0.419047619047617*G0_0_1_19_1_1 + 0.590476190476187*G0_1_1_0_0_0 + 0.590476190476188*G0_1_1_0_0_1 - 0.0876190476190467*G0_1_1_1_0_0 - 0.285714285714285*G0_1_1_2_0_1 + 0.227301587301586*G0_1_1_3_0_0 + 0.0711111111111111*G0_1_1_3_0_1 - 0.260317460317462*G0_1_1_4_0_0 + 0.0939682539682519*G0_1_1_4_0_1 + 0.0622222222222208*G0_1_1_5_0_0 - 1.01714285714285*G0_1_1_5_0_1 + 0.260317460317462*G0_1_1_6_0_0 + 0.712380952380951*G0_1_1_6_0_1 - 0.75428571428571*G0_1_1_7_0_0 + 0.325079365079363*G0_1_1_7_0_1 + 0.251428571428569*G0_1_1_8_0_0 - 0.0711111111111111*G0_1_1_8_0_1 - 0.289523809523807*G0_1_1_9_0_0 - 0.419047619047616*G0_1_1_9_0_1 + 0.590476190476187*G0_1_1_10_1_0 + 0.590476190476188*G0_1_1_10_1_1 - 0.0876190476190467*G0_1_1_11_1_0 - 0.285714285714285*G0_1_1_12_1_1 + 0.227301587301586*G0_1_1_13_1_0 + 0.0711111111111111*G0_1_1_13_1_1 - 0.260317460317462*G0_1_1_14_1_0 + 0.0939682539682519*G0_1_1_14_1_1 + 0.0622222222222208*G0_1_1_15_1_0 - 1.01714285714285*G0_1_1_15_1_1 + 0.260317460317462*G0_1_1_16_1_0 + 0.712380952380951*G0_1_1_16_1_1 - 0.75428571428571*G0_1_1_17_1_0 + 0.325079365079363*G0_1_1_17_1_1 + 0.251428571428569*G0_1_1_18_1_0 - 0.0711111111111111*G0_1_1_18_1_1 - 0.289523809523807*G0_1_1_19_1_0 - 0.419047619047616*G0_1_1_19_1_1;
    A[469] = A[5] - 0.0355555555555557*G0_0_0_1_0_0 - 0.25111111111111*G0_0_0_2_0_1 + 0.321587301587299*G0_0_0_3_0_0 + 0.0350793650793644*G0_0_0_3_0_1 - 0.357460317460316*G0_0_0_4_0_0 + 0.144603174603173*G0_0_0_4_0_1 - 0.18063492063492*G0_0_0_5_0_0 - 0.144920634920637*G0_0_0_5_0_1 + 0.357460317460316*G0_0_0_6_0_0 + 0.396031746031746*G0_0_0_6_0_1 + 0.109206349206346*G0_0_0_7_0_0 + 0.0734920634920631*G0_0_0_7_0_1 - 0.073650793650792*G0_0_0_8_0_0 - 0.0350793650793644*G0_0_0_8_0_1 - 0.140952380952379*G0_0_0_9_0_0 - 0.218095238095236*G0_0_0_9_0_1 - 0.0355555555555557*G0_0_0_11_1_0 - 0.25111111111111*G0_0_0_12_1_1 + 0.321587301587299*G0_0_0_13_1_0 + 0.0350793650793644*G0_0_0_13_1_1 - 0.357460317460316*G0_0_0_14_1_0 + 0.144603174603173*G0_0_0_14_1_1 - 0.18063492063492*G0_0_0_15_1_0 - 0.144920634920637*G0_0_0_15_1_1 + 0.357460317460316*G0_0_0_16_1_0 + 0.396031746031746*G0_0_0_16_1_1 + 0.109206349206346*G0_0_0_17_1_0 + 0.0734920634920631*G0_0_0_17_1_1 - 0.073650793650792*G0_0_0_18_1_0 - 0.0350793650793644*G0_0_0_18_1_1 - 0.140952380952379*G0_0_0_19_1_0 - 0.218095238095236*G0_0_0_19_1_1 + 0.0053968253968236*G0_0_1_1_0_0 - 0.162539682539682*G0_0_1_2_0_1 + 0.180158730158729*G0_0_1_3_0_0 + 0.0641269841269815*G0_0_1_3_0_1 - 0.256984126984124*G0_0_1_4_0_0 + 0.0269841269841285*G0_0_1_4_0_1 - 0.144920634920633*G0_0_1_5_0_0 - 0.109206349206353*G0_0_1_5_0_1 + 0.256984126984124*G0_0_1_6_0_0 + 0.271746031746031*G0_0_1_6_0_1 + 0.0734920634920577*G0_0_1_7_0_0 + 0.0377777777777777*G0_0_1_7_0_1 - 0.0788888888888844*G0_0_1_8_0_0 - 0.0641269841269815*G0_0_1_8_0_1 - 0.035238095238096*G0_0_1_9_0_0 - 0.0647619047619059*G0_0_1_9_0_1 + 0.0053968253968236*G0_0_1_11_1_0 - 0.162539682539682*G0_0_1_12_1_1 + 0.180158730158729*G0_0_1_13_1_0 + 0.0641269841269815*G0_0_1_13_1_1 - 0.256984126984124*G0_0_1_14_1_0 + 0.0269841269841285*G0_0_1_14_1_1 - 0.144920634920633*G0_0_1_15_1_0 - 0.109206349206353*G0_0_1_15_1_1 + 0.256984126984124*G0_0_1_16_1_0 + 0.271746031746031*G0_0_1_16_1_1 + 0.0734920634920577*G0_0_1_17_1_0 + 0.0377777777777777*G0_0_1_17_1_1 - 0.0788888888888844*G0_0_1_18_1_0 - 0.0641269841269815*G0_0_1_18_1_1 - 0.035238095238096*G0_0_1_19_1_0 - 0.0647619047619059*G0_0_1_19_1_1 - 0.035555555555556*G0_1_0_1_0_0 - 0.251111111111112*G0_1_0_2_0_1 + 0.3215873015873*G0_1_0_3_0_0 + 0.0350793650793644*G0_1_0_3_0_1 - 0.35746031746032*G0_1_0_4_0_0 + 0.144603174603172*G0_1_0_4_0_1 - 0.180634920634922*G0_1_0_5_0_0 - 0.144920634920639*G0_1_0_5_0_1 + 0.35746031746032*G0_1_0_6_0_0 + 0.396031746031749*G0_1_0_6_0_1 + 0.109206349206346*G0_1_0_7_0_0 + 0.0734920634920629*G0_1_0_7_0_1 - 0.0736507936507922*G0_1_0_8_0_0 - 0.0350793650793644*G0_1_0_8_0_1 - 0.140952380952378*G0_1_0_9_0_0 - 0.218095238095235*G0_1_0_9_0_1 - 0.035555555555556*G0_1_0_11_1_0 - 0.251111111111112*G0_1_0_12_1_1 + 0.3215873015873*G0_1_0_13_1_0 + 0.0350793650793644*G0_1_0_13_1_1 - 0.35746031746032*G0_1_0_14_1_0 + 0.144603174603172*G0_1_0_14_1_1 - 0.180634920634922*G0_1_0_15_1_0 - 0.144920634920639*G0_1_0_15_1_1 + 0.35746031746032*G0_1_0_16_1_0 + 0.396031746031749*G0_1_0_16_1_1 + 0.109206349206346*G0_1_0_17_1_0 + 0.0734920634920629*G0_1_0_17_1_1 - 0.0736507936507922*G0_1_0_18_1_0 - 0.0350793650793644*G0_1_0_18_1_1 - 0.140952380952378*G0_1_0_19_1_0 - 0.218095238095235*G0_1_0_19_1_1 + 0.00539682539682346*G0_1_1_1_0_0 - 0.162539682539682*G0_1_1_2_0_1 + 0.180158730158728*G0_1_1_3_0_0 + 0.064126984126981*G0_1_1_3_0_1 - 0.256984126984125*G0_1_1_4_0_0 + 0.026984126984128*G0_1_1_4_0_1 - 0.144920634920633*G0_1_1_5_0_0 - 0.109206349206353*G0_1_1_5_0_1 + 0.256984126984125*G0_1_1_6_0_0 + 0.271746031746032*G0_1_1_6_0_1 + 0.0734920634920577*G0_1_1_7_0_0 + 0.0377777777777777*G0_1_1_7_0_1 - 0.0788888888888844*G0_1_1_8_0_0 - 0.064126984126981*G0_1_1_8_0_1 - 0.0352380952380947*G0_1_1_9_0_0 - 0.0647619047619054*G0_1_1_9_0_1 + 0.00539682539682346*G0_1_1_11_1_0 - 0.162539682539682*G0_1_1_12_1_1 + 0.180158730158728*G0_1_1_13_1_0 + 0.064126984126981*G0_1_1_13_1_1 - 0.256984126984125*G0_1_1_14_1_0 + 0.026984126984128*G0_1_1_14_1_1 - 0.144920634920633*G0_1_1_15_1_0 - 0.109206349206353*G0_1_1_15_1_1 + 0.256984126984125*G0_1_1_16_1_0 + 0.271746031746032*G0_1_1_16_1_1 + 0.0734920634920577*G0_1_1_17_1_0 + 0.0377777777777777*G0_1_1_17_1_1 - 0.0788888888888844*G0_1_1_18_1_0 - 0.064126984126981*G0_1_1_18_1_1 - 0.0352380952380947*G0_1_1_19_1_0 - 0.0647619047619054*G0_1_1_19_1_1;
    A[585] = A[469] - 0.0244444444444434*G0_0_1_1_0_0 + 0.0244444444444434*G0_0_1_2_0_1 - 0.0230158730158728*G0_0_1_3_0_0 - 0.0474603174603159*G0_0_1_3_0_1 + 0.0474603174603147*G0_0_1_4_0_0 + 0.0230158730158708*G0_0_1_4_0_1 + 0.0258730158730142*G0_0_1_5_0_0 + 0.025873015873016*G0_0_1_5_0_1 - 0.0474603174603146*G0_0_1_6_0_0 - 0.0503174603174586*G0_0_1_6_0_1 - 0.0258730158730138*G0_0_1_7_0_0 - 0.0258730158730158*G0_0_1_7_0_1 + 0.050317460317458*G0_0_1_8_0_0 + 0.0474603174603159*G0_0_1_8_0_1 - 0.00285714285714134*G0_0_1_9_0_0 + 0.00285714285714472*G0_0_1_9_0_1 - 0.0244444444444434*G0_0_1_11_1_0 + 0.0244444444444434*G0_0_1_12_1_1 - 0.0230158730158728*G0_0_1_13_1_0 - 0.0474603174603159*G0_0_1_13_1_1 + 0.0474603174603147*G0_0_1_14_1_0 + 0.0230158730158708*G0_0_1_14_1_1 + 0.0258730158730142*G0_0_1_15_1_0 + 0.025873015873016*G0_0_1_15_1_1 - 0.0474603174603146*G0_0_1_16_1_0 - 0.0503174603174586*G0_0_1_16_1_1 - 0.0258730158730138*G0_0_1_17_1_0 - 0.0258730158730158*G0_0_1_17_1_1 + 0.050317460317458*G0_0_1_18_1_0 + 0.0474603174603159*G0_0_1_18_1_1 - 0.00285714285714134*G0_0_1_19_1_0 + 0.00285714285714472*G0_0_1_19_1_1 + 0.0244444444444434*G0_1_0_1_0_0 - 0.0244444444444434*G0_1_0_2_0_1 + 0.0230158730158728*G0_1_0_3_0_0 + 0.047460317460316*G0_1_0_3_0_1 - 0.0474603174603147*G0_1_0_4_0_0 - 0.0230158730158709*G0_1_0_4_0_1 - 0.0258730158730142*G0_1_0_5_0_0 - 0.025873015873016*G0_1_0_5_0_1 + 0.0474603174603146*G0_1_0_6_0_0 + 0.0503174603174586*G0_1_0_6_0_1 + 0.0258730158730138*G0_1_0_7_0_0 + 0.0258730158730158*G0_1_0_7_0_1 - 0.0503174603174581*G0_1_0_8_0_0 - 0.047460317460316*G0_1_0_8_0_1 + 0.00285714285714134*G0_1_0_9_0_0 - 0.00285714285714472*G0_1_0_9_0_1 + 0.0244444444444434*G0_1_0_11_1_0 - 0.0244444444444434*G0_1_0_12_1_1 + 0.0230158730158728*G0_1_0_13_1_0 + 0.047460317460316*G0_1_0_13_1_1 - 0.0474603174603147*G0_1_0_14_1_0 - 0.0230158730158709*G0_1_0_14_1_1 - 0.0258730158730142*G0_1_0_15_1_0 - 0.025873015873016*G0_1_0_15_1_1 + 0.0474603174603146*G0_1_0_16_1_0 + 0.0503174603174586*G0_1_0_16_1_1 + 0.0258730158730138*G0_1_0_17_1_0 + 0.0258730158730158*G0_1_0_17_1_1 - 0.0503174603174581*G0_1_0_18_1_0 - 0.047460317460316*G0_1_0_18_1_1 + 0.00285714285714134*G0_1_0_19_1_0 - 0.00285714285714472*G0_1_0_19_1_1;
    A[470] = A[5];
    A[555] = A[5] + 0.126984126984126*G0_0_0_1_0_0 - 0.256507936507935*G0_0_0_2_0_1 + 0.294603174603173*G0_0_0_3_0_0 + 0.29206349206349*G0_0_0_3_0_1 - 0.421587301587299*G0_0_0_4_0_0 - 0.0355555555555551*G0_0_0_4_0_1 - 0.218412698412697*G0_0_0_5_0_0 - 0.218412698412699*G0_0_0_5_0_1 + 0.421587301587299*G0_0_0_6_0_0 + 0.474920634920633*G0_0_0_6_0_1 + 0.218412698412696*G0_0_0_7_0_0 + 0.218412698412697*G0_0_0_7_0_1 - 0.345396825396822*G0_0_0_8_0_0 - 0.29206349206349*G0_0_0_8_0_1 - 0.0761904761904753*G0_0_0_9_0_0 - 0.182857142857142*G0_0_0_9_0_1 + 0.126984126984126*G0_0_0_11_1_0 - 0.256507936507935*G0_0_0_12_1_1 + 0.294603174603173*G0_0_0_13_1_0 + 0.29206349206349*G0_0_0_13_1_1 - 0.421587301587299*G0_0_0_14_1_0 - 0.0355555555555551*G0_0_0_14_1_1 - 0.218412698412697*G0_0_0_15_1_0 - 0.218412698412699*G0_0_0_15_1_1 + 0.421587301587299*G0_0_0_16_1_0 + 0.474920634920633*G0_0_0_16_1_1 + 0.218412698412696*G0_0_0_17_1_0 + 0.218412698412697*G0_0_0_17_1_1 - 0.345396825396822*G0_0_0_18_1_0 - 0.29206349206349*G0_0_0_18_1_1 - 0.0761904761904753*G0_0_0_19_1_0 - 0.182857142857142*G0_0_0_19_1_1 + 0.143492063492062*G0_0_1_1_0_0 - 0.143492063492062*G0_0_1_2_0_1 + 0.130158730158728*G0_0_1_3_0_0 + 0.27365079365079*G0_0_1_3_0_1 - 0.27365079365079*G0_0_1_4_0_0 - 0.130158730158728*G0_0_1_4_0_1 - 0.156825396825395*G0_0_1_5_0_0 - 0.156825396825398*G0_0_1_5_0_1 + 0.27365079365079*G0_0_1_6_0_0 + 0.300317460317458*G0_0_1_6_0_1 + 0.156825396825393*G0_0_1_7_0_0 + 0.156825396825396*G0_0_1_7_0_1 - 0.300317460317456*G0_0_1_8_0_0 - 0.27365079365079*G0_0_1_8_0_1 + 0.0266666666666667*G0_0_1_9_0_0 - 0.0266666666666669*G0_0_1_9_0_1 + 0.143492063492062*G0_0_1_11_1_0 - 0.143492063492062*G0_0_1_12_1_1 + 0.130158730158728*G0_0_1_13_1_0 + 0.27365079365079*G0_0_1_13_1_1 - 0.27365079365079*G0_0_1_14_1_0 - 0.130158730158728*G0_0_1_14_1_1 - 0.156825396825395*G0_0_1_15_1_0 - 0.156825396825398*G0_0_1_15_1_1 + 0.27365079365079*G0_0_1_16_1_0 + 0.300317460317458*G0_0_1_16_1_1 + 0.156825396825393*G0_0_1_17_1_0 + 0.156825396825396*G0_0_1_17_1_1 - 0.300317460317456*G0_0_1_18_1_0 - 0.27365079365079*G0_0_1_18_1_1 + 0.0266666666666667*G0_0_1_19_1_0 - 0.0266666666666669*G0_0_1_19_1_1 + 0.239999999999999*G0_1_0_1_0_0 - 0.24*G0_1_0_2_0_1 + 0.2*G0_1_0_3_0_0 + 0.439999999999998*G0_1_0_3_0_1 - 0.440000000000001*G0_1_0_4_0_0 - 0.2*G0_1_0_4_0_1 - 0.28*G0_1_0_5_0_0 - 0.280000000000001*G0_1_0_5_0_1 + 0.440000000000001*G0_1_0_6_0_0 + 0.520000000000001*G0_1_0_6_0_1 + 0.279999999999997*G0_1_0_7_0_0 + 0.279999999999999*G0_1_0_7_0_1 - 0.519999999999997*G0_1_0_8_0_0 - 0.439999999999999*G0_1_0_8_0_1 + 0.0799999999999997*G0_1_0_9_0_0 - 0.0799999999999988*G0_1_0_9_0_1 + 0.239999999999999*G0_1_0_11_1_0 - 0.24*G0_1_0_12_1_1 + 0.2*G0_1_0_13_1_0 + 0.439999999999998*G0_1_0_13_1_1 - 0.440000000000001*G0_1_0_14_1_0 - 0.2*G0_1_0_14_1_1 - 0.28*G0_1_0_15_1_0 - 0.280000000000001*G0_1_0_15_1_1 + 0.440000000000001*G0_1_0_16_1_0 + 0.520000000000001*G0_1_0_16_1_1 + 0.279999999999997*G0_1_0_17_1_0 + 0.279999999999999*G0_1_0_17_1_1 - 0.519999999999997*G0_1_0_18_1_0 - 0.439999999999999*G0_1_0_18_1_1 + 0.0799999999999997*G0_1_0_19_1_0 - 0.0799999999999988*G0_1_0_19_1_1 + 0.256507936507935*G0_1_1_1_0_0 - 0.126984126984127*G0_1_1_2_0_1 + 0.0355555555555556*G0_1_1_3_0_0 + 0.421587301587299*G0_1_1_3_0_1 - 0.29206349206349*G0_1_1_4_0_0 - 0.294603174603172*G0_1_1_4_0_1 - 0.218412698412697*G0_1_1_5_0_0 - 0.218412698412699*G0_1_1_5_0_1 + 0.29206349206349*G0_1_1_6_0_0 + 0.345396825396825*G0_1_1_6_0_1 + 0.218412698412695*G0_1_1_7_0_0 + 0.218412698412697*G0_1_1_7_0_1 - 0.474920634920631*G0_1_1_8_0_0 - 0.421587301587299*G0_1_1_8_0_1 + 0.182857142857141*G0_1_1_9_0_0 + 0.0761904761904753*G0_1_1_9_0_1 + 0.256507936507935*G0_1_1_11_1_0 - 0.126984126984127*G0_1_1_12_1_1 + 0.0355555555555556*G0_1_1_13_1_0 + 0.421587301587299*G0_1_1_13_1_1 - 0.29206349206349*G0_1_1_14_1_0 - 0.294603174603172*G0_1_1_14_1_1 - 0.218412698412697*G0_1_1_15_1_0 - 0.218412698412699*G0_1_1_15_1_1 + 0.29206349206349*G0_1_1_16_1_0 + 0.345396825396825*G0_1_1_16_1_1 + 0.218412698412695*G0_1_1_17_1_0 + 0.218412698412697*G0_1_1_17_1_1 - 0.474920634920631*G0_1_1_18_1_0 - 0.421587301587299*G0_1_1_18_1_1 + 0.182857142857141*G0_1_1_19_1_0 + 0.0761904761904753*G0_1_1_19_1_1;
    A[795] = -A[555] + 0.59047619047619*G0_0_0_0_0_0 + 0.59047619047619*G0_0_0_0_0_1 - 0.285714285714285*G0_0_0_1_0_0 - 0.0876190476190473*G0_0_0_2_0_1 + 0.0939682539682533*G0_0_0_3_0_0 - 0.26031746031746*G0_0_0_3_0_1 + 0.071111111111112*G0_0_0_4_0_0 + 0.227301587301587*G0_0_0_4_0_1 + 0.325079365079364*G0_0_0_5_0_0 - 0.754285714285715*G0_0_0_5_0_1 - 0.0711111111111119*G0_0_0_6_0_0 + 0.251428571428572*G0_0_0_6_0_1 - 1.01714285714286*G0_0_0_7_0_0 + 0.0622222222222223*G0_0_0_7_0_1 + 0.712380952380951*G0_0_0_8_0_0 + 0.26031746031746*G0_0_0_8_0_1 - 0.419047619047617*G0_0_0_9_0_0 - 0.28952380952381*G0_0_0_9_0_1 + 0.59047619047619*G0_0_0_10_1_0 + 0.59047619047619*G0_0_0_10_1_1 - 0.285714285714285*G0_0_0_11_1_0 - 0.0876190476190473*G0_0_0_12_1_1 + 0.0939682539682533*G0_0_0_13_1_0 - 0.26031746031746*G0_0_0_13_1_1 + 0.071111111111112*G0_0_0_14_1_0 + 0.227301587301587*G0_0_0_14_1_1 + 0.325079365079364*G0_0_0_15_1_0 - 0.754285714285715*G0_0_0_15_1_1 - 0.0711111111111119*G0_0_0_16_1_0 + 0.251428571428572*G0_0_0_16_1_1 - 1.01714285714286*G0_0_0_17_1_0 + 0.0622222222222223*G0_0_0_17_1_1 + 0.712380952380951*G0_0_0_18_1_0 + 0.26031746031746*G0_0_0_18_1_1 - 0.419047619047617*G0_0_0_19_1_0 - 0.28952380952381*G0_0_0_19_1_1 + 0.59047619047619*G0_0_1_0_0_0 + 0.59047619047619*G0_0_1_0_0_1 - 0.285714285714285*G0_0_1_1_0_0 - 0.0876190476190469*G0_0_1_2_0_1 + 0.0939682539682528*G0_0_1_3_0_0 - 0.26031746031746*G0_0_1_3_0_1 + 0.0711111111111124*G0_0_1_4_0_0 + 0.227301587301587*G0_0_1_4_0_1 + 0.325079365079364*G0_0_1_5_0_0 - 0.754285714285715*G0_0_1_5_0_1 - 0.0711111111111123*G0_0_1_6_0_0 + 0.251428571428572*G0_0_1_6_0_1 - 1.01714285714286*G0_0_1_7_0_0 + 0.062222222222222*G0_0_1_7_0_1 + 0.712380952380951*G0_0_1_8_0_0 + 0.26031746031746*G0_0_1_8_0_1 - 0.419047619047617*G0_0_1_9_0_0 - 0.289523809523809*G0_0_1_9_0_1 + 0.59047619047619*G0_0_1_10_1_0 + 0.59047619047619*G0_0_1_10_1_1 - 0.285714285714285*G0_0_1_11_1_0 - 0.0876190476190469*G0_0_1_12_1_1 + 0.0939682539682528*G0_0_1_13_1_0 - 0.26031746031746*G0_0_1_13_1_1 + 0.0711111111111124*G0_0_1_14_1_0 + 0.227301587301587*G0_0_1_14_1_1 + 0.325079365079364*G0_0_1_15_1_0 - 0.754285714285715*G0_0_1_15_1_1 - 0.0711111111111123*G0_0_1_16_1_0 + 0.251428571428572*G0_0_1_16_1_1 - 1.01714285714286*G0_0_1_17_1_0 + 0.062222222222222*G0_0_1_17_1_1 + 0.712380952380951*G0_0_1_18_1_0 + 0.26031746031746*G0_0_1_18_1_1 - 0.419047619047617*G0_0_1_19_1_0 - 0.289523809523809*G0_0_1_19_1_1;
    A[4] = A[469];
    A[886] = A[421];
    A[95] = A[560];
    A[810] = 0.0;
    A[126] = A[274] + 0.0897354497354514*G0_0_0_0_0_0 + 0.0897354497354515*G0_0_0_0_0_1 + 0.0423280423280416*G0_0_0_1_0_0 + 0.250582010582005*G0_0_0_2_0_1 - 0.594285714285711*G0_0_0_3_0_0 - 0.0888888888888882*G0_0_0_3_0_1 + 0.259047619047609*G0_0_0_4_0_0 - 0.454603174603177*G0_0_0_4_0_1 + 0.0761904761904725*G0_0_0_5_0_0 - 0.0177777777777827*G0_0_0_5_0_1 - 0.259047619047609*G0_0_0_6_0_0 - 0.322539682539674*G0_0_0_6_0_1 - 0.294603174603176*G0_0_0_7_0_0 - 0.200634920634921*G0_0_0_7_0_1 + 0.162539682539683*G0_0_0_8_0_0 + 0.0888888888888883*G0_0_0_8_0_1 + 0.518095238095238*G0_0_0_9_0_0 + 0.655238095238098*G0_0_0_9_0_1 + 0.0897354497354514*G0_0_0_10_1_0 + 0.0897354497354515*G0_0_0_10_1_1 + 0.0423280423280416*G0_0_0_11_1_0 + 0.250582010582005*G0_0_0_12_1_1 - 0.594285714285711*G0_0_0_13_1_0 - 0.0888888888888882*G0_0_0_13_1_1 + 0.259047619047609*G0_0_0_14_1_0 - 0.454603174603177*G0_0_0_14_1_1 + 0.0761904761904725*G0_0_0_15_1_0 - 0.0177777777777827*G0_0_0_15_1_1 - 0.259047619047609*G0_0_0_16_1_0 - 0.322539682539674*G0_0_0_16_1_1 - 0.294603174603176*G0_0_0_17_1_0 - 0.200634920634921*G0_0_0_17_1_1 + 0.162539682539683*G0_0_0_18_1_0 + 0.0888888888888883*G0_0_0_18_1_1 + 0.518095238095238*G0_0_0_19_1_0 + 0.655238095238098*G0_0_0_19_1_1 - 0.0355555555555579*G0_0_1_1_0_0 + 0.0355555555555547*G0_0_1_2_0_1 - 0.0126984126984111*G0_0_1_3_0_0 - 0.0482539682539707*G0_0_1_3_0_1 + 0.0482539682539675*G0_0_1_4_0_0 + 0.0126984126984145*G0_0_1_4_0_1 + 0.0584126984126986*G0_0_1_5_0_0 + 0.0584126984126984*G0_0_1_5_0_1 - 0.0482539682539675*G0_0_1_6_0_0 - 0.0939682539682538*G0_0_1_6_0_1 - 0.0584126984127015*G0_0_1_7_0_0 - 0.0584126984127007*G0_0_1_7_0_1 + 0.0939682539682583*G0_0_1_8_0_0 + 0.0482539682539706*G0_0_1_8_0_1 - 0.0457142857142876*G0_0_1_9_0_0 + 0.0457142857142865*G0_0_1_9_0_1 - 0.0355555555555579*G0_0_1_11_1_0 + 0.0355555555555547*G0_0_1_12_1_1 - 0.0126984126984111*G0_0_1_13_1_0 - 0.0482539682539707*G0_0_1_13_1_1 + 0.0482539682539675*G0_0_1_14_1_0 + 0.0126984126984145*G0_0_1_14_1_1 + 0.0584126984126986*G0_0_1_15_1_0 + 0.0584126984126984*G0_0_1_15_1_1 - 0.0482539682539675*G0_0_1_16_1_0 - 0.0939682539682538*G0_0_1_16_1_1 - 0.0584126984127015*G0_0_1_17_1_0 - 0.0584126984127007*G0_0_1_17_1_1 + 0.0939682539682583*G0_0_1_18_1_0 + 0.0482539682539706*G0_0_1_18_1_1 - 0.0457142857142876*G0_0_1_19_1_0 + 0.0457142857142865*G0_0_1_19_1_1 - 0.152380952380953*G0_1_0_1_0_0 + 0.152380952380951*G0_1_0_2_0_1 - 0.152380952380955*G0_1_0_3_0_0 - 0.304761904761908*G0_1_0_3_0_1 + 0.304761904761902*G0_1_0_4_0_0 + 0.152380952380951*G0_1_0_4_0_1 + 0.152380952380947*G0_1_0_5_0_0 + 0.152380952380952*G0_1_0_5_0_1 - 0.304761904761902*G0_1_0_6_0_0 - 0.304761904761902*G0_1_0_6_0_1 - 0.152380952380951*G0_1_0_7_0_0 - 0.152380952380956*G0_1_0_7_0_1 + 0.304761904761905*G0_1_0_8_0_0 + 0.304761904761908*G0_1_0_8_0_1 - 0.152380952380953*G0_1_0_11_1_0 + 0.152380952380951*G0_1_0_12_1_1 - 0.152380952380955*G0_1_0_13_1_0 - 0.304761904761908*G0_1_0_13_1_1 + 0.304761904761902*G0_1_0_14_1_0 + 0.152380952380951*G0_1_0_14_1_1 + 0.152380952380947*G0_1_0_15_1_0 + 0.152380952380952*G0_1_0_15_1_1 - 0.304761904761902*G0_1_0_16_1_0 - 0.304761904761902*G0_1_0_16_1_1 - 0.152380952380951*G0_1_0_17_1_0 - 0.152380952380956*G0_1_0_17_1_1 + 0.304761904761905*G0_1_0_18_1_0 + 0.304761904761908*G0_1_0_18_1_1 - 0.0897354497354552*G0_1_1_0_0_0 - 0.0897354497354554*G0_1_1_0_0_1 - 0.25058201058201*G0_1_1_1_0_0 - 0.0423280423280422*G0_1_1_2_0_1 + 0.454603174603174*G0_1_1_3_0_0 - 0.259047619047619*G0_1_1_3_0_1 + 0.088888888888887*G0_1_1_4_0_0 + 0.594285714285713*G0_1_1_4_0_1 + 0.200634920634917*G0_1_1_5_0_0 + 0.294603174603183*G0_1_1_5_0_1 - 0.0888888888888868*G0_1_1_6_0_0 - 0.162539682539685*G0_1_1_6_0_1 + 0.0177777777777857*G0_1_1_7_0_0 - 0.0761904761904796*G0_1_1_7_0_1 + 0.322539682539679*G0_1_1_8_0_0 + 0.259047619047619*G0_1_1_8_0_1 - 0.655238095238092*G0_1_1_9_0_0 - 0.518095238095233*G0_1_1_9_0_1 - 0.0897354497354552*G0_1_1_10_1_0 - 0.0897354497354554*G0_1_1_10_1_1 - 0.25058201058201*G0_1_1_11_1_0 - 0.0423280423280422*G0_1_1_12_1_1 + 0.454603174603174*G0_1_1_13_1_0 - 0.259047619047619*G0_1_1_13_1_1 + 0.088888888888887*G0_1_1_14_1_0 + 0.594285714285713*G0_1_1_14_1_1 + 0.200634920634917*G0_1_1_15_1_0 + 0.294603174603183*G0_1_1_15_1_1 - 0.0888888888888868*G0_1_1_16_1_0 - 0.162539682539685*G0_1_1_16_1_1 + 0.0177777777777857*G0_1_1_17_1_0 - 0.0761904761904796*G0_1_1_17_1_1 + 0.322539682539679*G0_1_1_18_1_0 + 0.259047619047619*G0_1_1_18_1_1 - 0.655238095238092*G0_1_1_19_1_0 - 0.518095238095233*G0_1_1_19_1_1;
    A[851] = 0.0;
    A[880] = 0.0;
    A[481] = 0.0;
    A[200] = 0.0;
    A[582] = 0.0;
    A[522] = 0.0;
    A[227] = 0.0;
    A[615] = A[5] + 0.0165079365079362*G0_0_1_1_0_0 + 0.113015873015874*G0_0_1_2_0_1 - 0.164444444444444*G0_0_1_3_0_0 - 0.0184126984126989*G0_0_1_3_0_1 + 0.147936507936511*G0_0_1_4_0_0 - 0.0946031746031725*G0_0_1_4_0_1 + 0.0615873015873032*G0_0_1_5_0_0 + 0.0615873015873022*G0_0_1_5_0_1 - 0.147936507936511*G0_0_1_6_0_0 - 0.174603174603177*G0_0_1_6_0_1 - 0.0615873015873022*G0_0_1_7_0_0 - 0.0615873015873011*G0_0_1_7_0_1 + 0.0450793650793658*G0_0_1_8_0_0 + 0.0184126984126989*G0_0_1_8_0_1 + 0.102857142857141*G0_0_1_9_0_0 + 0.156190476190474*G0_0_1_9_0_1 + 0.0165079365079362*G0_0_1_11_1_0 + 0.113015873015874*G0_0_1_12_1_1 - 0.164444444444444*G0_0_1_13_1_0 - 0.0184126984126989*G0_0_1_13_1_1 + 0.147936507936511*G0_0_1_14_1_0 - 0.0946031746031725*G0_0_1_14_1_1 + 0.0615873015873032*G0_0_1_15_1_0 + 0.0615873015873022*G0_0_1_15_1_1 - 0.147936507936511*G0_0_1_16_1_0 - 0.174603174603177*G0_0_1_16_1_1 - 0.0615873015873022*G0_0_1_17_1_0 - 0.0615873015873011*G0_0_1_17_1_1 + 0.0450793650793658*G0_0_1_18_1_0 + 0.0184126984126989*G0_0_1_18_1_1 + 0.102857142857141*G0_0_1_19_1_0 + 0.156190476190474*G0_0_1_19_1_1 - 0.0165079365079362*G0_1_0_1_0_0 - 0.113015873015874*G0_1_0_2_0_1 + 0.164444444444444*G0_1_0_3_0_0 + 0.0184126984126989*G0_1_0_3_0_1 - 0.147936507936511*G0_1_0_4_0_0 + 0.0946031746031725*G0_1_0_4_0_1 - 0.0615873015873033*G0_1_0_5_0_0 - 0.0615873015873022*G0_1_0_5_0_1 + 0.147936507936511*G0_1_0_6_0_0 + 0.174603174603177*G0_1_0_6_0_1 + 0.0615873015873022*G0_1_0_7_0_0 + 0.0615873015873011*G0_1_0_7_0_1 - 0.0450793650793658*G0_1_0_8_0_0 - 0.0184126984126989*G0_1_0_8_0_1 - 0.102857142857141*G0_1_0_9_0_0 - 0.156190476190474*G0_1_0_9_0_1 - 0.0165079365079362*G0_1_0_11_1_0 - 0.113015873015874*G0_1_0_12_1_1 + 0.164444444444444*G0_1_0_13_1_0 + 0.0184126984126989*G0_1_0_13_1_1 - 0.147936507936511*G0_1_0_14_1_0 + 0.0946031746031725*G0_1_0_14_1_1 - 0.0615873015873033*G0_1_0_15_1_0 - 0.0615873015873022*G0_1_0_15_1_1 + 0.147936507936511*G0_1_0_16_1_0 + 0.174603174603177*G0_1_0_16_1_1 + 0.0615873015873022*G0_1_0_17_1_0 + 0.0615873015873011*G0_1_0_17_1_1 - 0.0450793650793658*G0_1_0_18_1_0 - 0.0184126984126989*G0_1_0_18_1_1 - 0.102857142857141*G0_1_0_19_1_0 - 0.156190476190474*G0_1_0_19_1_1;
    A[551] = 0.0;
    A[708] = -A[716] + 0.0135449735449745*G0_0_0_0_0_0 + 0.0135449735449744*G0_0_0_0_0_1 - 0.440211640211639*G0_0_0_1_0_0 - 1.35449735449735*G0_0_0_2_0_1 + 1.74730158730157*G0_0_0_3_0_0 - 0.0507936507936532*G0_0_0_3_0_1 - 2.33650793650792*G0_0_0_4_0_0 + 0.375873015873014*G0_0_0_4_0_1 - 0.284444444444444*G0_0_0_5_0_0 - 0.213333333333334*G0_0_0_5_0_1 + 2.33650793650792*G0_0_0_6_0_0 + 1.55428571428571*G0_0_0_6_0_1 + 0.24380952380952*G0_0_0_7_0_0 + 0.172698412698409*G0_0_0_7_0_1 + 0.182857142857145*G0_0_0_8_0_0 + 0.0507936507936529*G0_0_0_8_0_1 - 1.46285714285713*G0_0_0_9_0_0 - 0.548571428571423*G0_0_0_9_0_1 + 0.0135449735449745*G0_0_0_10_1_0 + 0.0135449735449744*G0_0_0_10_1_1 - 0.440211640211639*G0_0_0_11_1_0 - 1.35449735449735*G0_0_0_12_1_1 + 1.74730158730157*G0_0_0_13_1_0 - 0.0507936507936532*G0_0_0_13_1_1 - 2.33650793650792*G0_0_0_14_1_0 + 0.375873015873014*G0_0_0_14_1_1 - 0.284444444444444*G0_0_0_15_1_0 - 0.213333333333334*G0_0_0_15_1_1 + 2.33650793650792*G0_0_0_16_1_0 + 1.55428571428571*G0_0_0_16_1_1 + 0.24380952380952*G0_0_0_17_1_0 + 0.172698412698409*G0_0_0_17_1_1 + 0.182857142857145*G0_0_0_18_1_0 + 0.0507936507936529*G0_0_0_18_1_1 - 1.46285714285713*G0_0_0_19_1_0 - 0.548571428571423*G0_0_0_19_1_1 + 0.142222222222221*G0_1_0_0_0_0 + 0.14222222222222*G0_1_0_0_0_1 - 0.528253968253965*G0_1_0_2_0_1 + 0.132063492063487*G0_1_0_3_0_0 - 0.782222222222217*G0_1_0_4_0_0 - 0.121904761904762*G0_1_0_4_0_1 - 0.924444444444442*G0_1_0_5_0_0 - 0.812698412698407*G0_1_0_5_0_1 + 0.782222222222217*G0_1_0_6_0_0 + 1.19873015873015*G0_1_0_6_0_1 - 0.0101587301587298*G0_1_0_7_0_0 - 0.121904761904765*G0_1_0_7_0_1 - 0.132063492063488*G0_1_0_8_0_0 + 0.792380952380955*G0_1_0_9_0_0 + 0.243809523809527*G0_1_0_9_0_1 + 0.142222222222221*G0_1_0_10_1_0 + 0.14222222222222*G0_1_0_10_1_1 - 0.528253968253965*G0_1_0_12_1_1 + 0.132063492063487*G0_1_0_13_1_0 - 0.782222222222217*G0_1_0_14_1_0 - 0.121904761904762*G0_1_0_14_1_1 - 0.924444444444442*G0_1_0_15_1_0 - 0.812698412698407*G0_1_0_15_1_1 + 0.782222222222217*G0_1_0_16_1_0 + 1.19873015873015*G0_1_0_16_1_1 - 0.0101587301587298*G0_1_0_17_1_0 - 0.121904761904765*G0_1_0_17_1_1 - 0.132063492063488*G0_1_0_18_1_0 + 0.792380952380955*G0_1_0_19_1_0 + 0.243809523809527*G0_1_0_19_1_1;
    A[644] = 0.0;
    A[253] = A[718];
    A[673] = 0.0;
    A[278] = A[743];
    A[698] = 0.0;
    A[315] = 0.0;
    A[259] = 0.0;
    A[344] = -A[569] + 0.352169312169311*G0_0_0_0_0_0 + 0.352169312169311*G0_0_0_0_0_1 + 0.541798941798936*G0_0_0_1_0_0 + 1.61862433862433*G0_0_0_2_0_1 - 2.98666666666665*G0_0_0_3_0_0 - 0.507936507936508*G0_0_0_3_0_1 + 3.71809523809521*G0_0_0_4_0_0 + 0.162539682539682*G0_0_0_4_0_1 - 1.64571428571428*G0_0_0_5_0_0 - 1.62539682539682*G0_0_0_5_0_1 - 3.71809523809522*G0_0_0_6_0_0 - 0.345396825396824*G0_0_0_6_0_1 - 0.629841269841268*G0_0_0_7_0_0 - 0.650158730158726*G0_0_0_7_0_1 - 0.26412698412698*G0_0_0_8_0_0 + 0.507936507936508*G0_0_0_8_0_1 + 4.63238095238092*G0_0_0_9_0_0 + 0.487619047619044*G0_0_0_9_0_1 + 0.352169312169311*G0_0_0_10_1_0 + 0.352169312169311*G0_0_0_10_1_1 + 0.541798941798936*G0_0_0_11_1_0 + 1.61862433862433*G0_0_0_12_1_1 - 2.98666666666665*G0_0_0_13_1_0 - 0.507936507936508*G0_0_0_13_1_1 + 3.71809523809521*G0_0_0_14_1_0 + 0.162539682539682*G0_0_0_14_1_1 - 1.64571428571428*G0_0_0_15_1_0 - 1.62539682539682*G0_0_0_15_1_1 - 3.71809523809522*G0_0_0_16_1_0 - 0.345396825396824*G0_0_0_16_1_1 - 0.629841269841268*G0_0_0_17_1_0 - 0.650158730158726*G0_0_0_17_1_1 - 0.26412698412698*G0_0_0_18_1_0 + 0.507936507936508*G0_0_0_18_1_1 + 4.63238095238092*G0_0_0_19_1_0 + 0.487619047619044*G0_0_0_19_1_1 - 0.345396825396823*G0_0_1_0_0_0 - 0.345396825396823*G0_0_1_0_0_1 + 0.142222222222223*G0_0_1_2_0_1 + 0.711111111111111*G0_0_1_3_0_0 + 0.65015873015873*G0_0_1_4_0_0 + 1.21904761904762*G0_0_1_4_0_1 + 0.995555555555555*G0_0_1_5_0_0 + 0.833015873015868*G0_0_1_5_0_1 - 0.65015873015873*G0_0_1_6_0_0 - 0.629841269841269*G0_0_1_6_0_1 + 1.05650793650793*G0_0_1_7_0_0 + 1.21904761904762*G0_0_1_7_0_1 - 0.711111111111111*G0_0_1_8_0_0 - 1.70666666666667*G0_0_1_9_0_0 - 2.43809523809523*G0_0_1_9_0_1 - 0.345396825396823*G0_0_1_10_1_0 - 0.345396825396823*G0_0_1_10_1_1 + 0.142222222222223*G0_0_1_12_1_1 + 0.711111111111111*G0_0_1_13_1_0 + 0.65015873015873*G0_0_1_14_1_0 + 1.21904761904762*G0_0_1_14_1_1 + 0.995555555555555*G0_0_1_15_1_0 + 0.833015873015868*G0_0_1_15_1_1 - 0.65015873015873*G0_0_1_16_1_0 - 0.629841269841269*G0_0_1_16_1_1 + 1.05650793650793*G0_0_1_17_1_0 + 1.21904761904762*G0_0_1_17_1_1 - 0.711111111111111*G0_0_1_18_1_0 - 1.70666666666667*G0_0_1_19_1_0 - 2.43809523809523*G0_0_1_19_1_1;
    A[288] = 0.0;
    A[742] = A[277];
    A[429] = A[830] + 0.474074074074075*G0_0_0_0_0_0 + 0.474074074074075*G0_0_0_0_0_1 - 0.108359788359789*G0_0_0_1_0_0 + 0.19640211640211*G0_0_0_2_0_1 + 0.18285714285714*G0_0_0_3_0_0 + 0.0609523809523798*G0_0_0_3_0_1 + 0.670476190476177*G0_0_0_4_0_0 + 0.487619047619039*G0_0_0_4_0_1 + 0.304761904761897*G0_0_0_5_0_0 - 0.609523809523815*G0_0_0_5_0_1 - 0.670476190476177*G0_0_0_6_0_0 - 0.0609523809523707*G0_0_0_6_0_1 - 0.914285714285715*G0_0_0_7_0_0 + 0.548571428571428*G0_0_0_8_0_0 - 0.0609523809523797*G0_0_0_8_0_1 - 0.487619047619038*G0_0_0_9_0_0 - 0.487619047619036*G0_0_0_9_0_1 + 0.474074074074075*G0_0_0_10_1_0 + 0.474074074074075*G0_0_0_10_1_1 - 0.108359788359789*G0_0_0_11_1_0 + 0.19640211640211*G0_0_0_12_1_1 + 0.18285714285714*G0_0_0_13_1_0 + 0.0609523809523798*G0_0_0_13_1_1 + 0.670476190476177*G0_0_0_14_1_0 + 0.487619047619039*G0_0_0_14_1_1 + 0.304761904761897*G0_0_0_15_1_0 - 0.609523809523815*G0_0_0_15_1_1 - 0.670476190476177*G0_0_0_16_1_0 - 0.0609523809523707*G0_0_0_16_1_1 - 0.914285714285715*G0_0_0_17_1_0 + 0.548571428571428*G0_0_0_18_1_0 - 0.0609523809523797*G0_0_0_18_1_1 - 0.487619047619038*G0_0_0_19_1_0 - 0.487619047619036*G0_0_0_19_1_1 - 0.196402116402118*G0_0_1_0_0_0 - 0.196402116402118*G0_0_1_0_0_1 + 0.135449735449733*G0_0_1_1_0_0 - 0.0474074074074067*G0_0_1_2_0_1 - 0.365714285714281*G0_0_1_3_0_0 - 0.182857142857143*G0_0_1_4_0_0 - 0.365714285714283*G0_0_1_4_0_1 - 0.731428571428566*G0_0_1_5_0_0 - 0.0609523809523738*G0_0_1_5_0_1 + 0.182857142857142*G0_0_1_6_0_0 + 0.304761904761898*G0_0_1_6_0_1 + 0.304761904761905*G0_0_1_7_0_0 - 0.365714285714287*G0_0_1_7_0_1 - 0.24380952380952*G0_0_1_8_0_0 + 1.09714285714285*G0_0_1_9_0_0 + 0.73142857142857*G0_0_1_9_0_1 - 0.196402116402118*G0_0_1_10_1_0 - 0.196402116402118*G0_0_1_10_1_1 + 0.135449735449733*G0_0_1_11_1_0 - 0.0474074074074067*G0_0_1_12_1_1 - 0.365714285714281*G0_0_1_13_1_0 - 0.182857142857143*G0_0_1_14_1_0 - 0.365714285714283*G0_0_1_14_1_1 - 0.731428571428566*G0_0_1_15_1_0 - 0.0609523809523738*G0_0_1_15_1_1 + 0.182857142857142*G0_0_1_16_1_0 + 0.304761904761898*G0_0_1_16_1_1 + 0.304761904761905*G0_0_1_17_1_0 - 0.365714285714287*G0_0_1_17_1_1 - 0.24380952380952*G0_0_1_18_1_0 + 1.09714285714285*G0_0_1_19_1_0 + 0.73142857142857*G0_0_1_19_1_1 + 0.230264550264555*G0_1_0_0_0_0 + 0.230264550264555*G0_1_0_0_0_1 - 0.352169312169311*G0_1_0_1_0_0 - 0.474074074074076*G0_1_0_2_0_1 + 1.03619047619047*G0_1_0_3_0_0 + 0.121904761904761*G0_1_0_3_0_1 - 0.914285714285718*G0_1_0_4_0_0 + 0.121904761904755*G0_1_0_4_0_1 - 0.182857142857147*G0_1_0_5_0_0 - 0.243809523809535*G0_1_0_5_0_1 + 0.914285714285718*G0_1_0_6_0_0 + 0.487619047619056*G0_1_0_6_0_1 - 0.914285714285719*G0_1_0_7_0_0 - 0.853333333333332*G0_1_0_7_0_1 + 1.03619047619047*G0_1_0_8_0_0 - 0.121904761904761*G0_1_0_8_0_1 - 0.853333333333322*G0_1_0_9_0_0 + 0.731428571428576*G0_1_0_9_0_1 + 0.230264550264555*G0_1_0_10_1_0 + 0.230264550264555*G0_1_0_10_1_1 - 0.352169312169311*G0_1_0_11_1_0 - 0.474074074074076*G0_1_0_12_1_1 + 1.03619047619047*G0_1_0_13_1_0 + 0.121904761904761*G0_1_0_13_1_1 - 0.914285714285718*G0_1_0_14_1_0 + 0.121904761904755*G0_1_0_14_1_1 - 0.182857142857147*G0_1_0_15_1_0 - 0.243809523809535*G0_1_0_15_1_1 + 0.914285714285718*G0_1_0_16_1_0 + 0.487619047619056*G0_1_0_16_1_1 - 0.914285714285719*G0_1_0_17_1_0 - 0.853333333333332*G0_1_0_17_1_1 + 1.03619047619047*G0_1_0_18_1_0 - 0.121904761904761*G0_1_0_18_1_1 - 0.853333333333322*G0_1_0_19_1_0 + 0.731428571428576*G0_1_0_19_1_1 - 0.243809523809524*G0_1_1_0_0_0 - 0.243809523809524*G0_1_1_0_0_1 - 0.243809523809523*G0_1_1_2_0_1 - 0.121904761904759*G0_1_1_3_0_0 - 0.853333333333332*G0_1_1_4_0_0 - 0.731428571428569*G0_1_1_4_0_1 - 0.609523809523807*G0_1_1_5_0_0 + 0.243809523809527*G0_1_1_5_0_1 + 0.853333333333332*G0_1_1_6_0_0 + 0.243809523809521*G0_1_1_6_0_1 + 0.121904761904764*G0_1_1_7_0_0 - 0.731428571428569*G0_1_1_7_0_1 + 0.121904761904761*G0_1_1_8_0_0 + 0.731428571428566*G0_1_1_9_0_0 + 1.46285714285714*G0_1_1_9_0_1 - 0.243809523809524*G0_1_1_10_1_0 - 0.243809523809524*G0_1_1_10_1_1 - 0.243809523809523*G0_1_1_12_1_1 - 0.121904761904759*G0_1_1_13_1_0 - 0.853333333333332*G0_1_1_14_1_0 - 0.731428571428569*G0_1_1_14_1_1 - 0.609523809523807*G0_1_1_15_1_0 + 0.243809523809527*G0_1_1_15_1_1 + 0.853333333333332*G0_1_1_16_1_0 + 0.243809523809521*G0_1_1_16_1_1 + 0.121904761904764*G0_1_1_17_1_0 - 0.731428571428569*G0_1_1_17_1_1 + 0.121904761904761*G0_1_1_18_1_0 + 0.731428571428566*G0_1_1_19_1_0 + 1.46285714285714*G0_1_1_19_1_1;
    A[369] = A[834];
    A[50] = 0.0;
    A[773] = A[308];
    A[462] = 0.0;
    A[79] = 0.0;
    A[800] = A[335];
    A[15] = 0.0;
    A[835] = A[370];
    A[44] = A[509];
    A[842] = 0.0;
    A[73] = A[538];
    A[150] = A[615];
    A[873] = 0.0;
    A[106] = 0.0;
    A[195] = 0.0;
    A[591] = A[126];
    A[515] = 0.0;
    A[224] = A[892] + 0.640000000000002*G0_0_1_0_0_0 + 0.640000000000002*G0_0_1_0_0_1 + 0.57904761904762*G0_0_1_1_0_0 + 0.609523809523814*G0_0_1_2_0_1 - 2.20952380952381*G0_0_1_3_0_0 - 0.0304761904761874*G0_0_1_3_0_1 + 1.44761904761906*G0_0_1_4_0_0 - 0.761904761904758*G0_0_1_4_0_1 - 0.990476190476185*G0_0_1_5_0_0 - 1.85904761904762*G0_0_1_5_0_1 - 1.44761904761906*G0_0_1_6_0_0 + 0.609523809523802*G0_0_1_6_0_1 - 0.472380952380957*G0_0_1_7_0_0 + 0.396190476190479*G0_0_1_7_0_1 - 0.746666666666665*G0_0_1_8_0_0 + 0.0304761904761872*G0_0_1_8_0_1 + 3.2*G0_0_1_9_0_0 + 0.36571428571428*G0_0_1_9_0_1 + 0.640000000000002*G0_0_1_10_1_0 + 0.640000000000002*G0_0_1_10_1_1 + 0.57904761904762*G0_0_1_11_1_0 + 0.609523809523814*G0_0_1_12_1_1 - 2.20952380952381*G0_0_1_13_1_0 - 0.0304761904761874*G0_0_1_13_1_1 + 1.44761904761906*G0_0_1_14_1_0 - 0.761904761904758*G0_0_1_14_1_1 - 0.990476190476185*G0_0_1_15_1_0 - 1.85904761904762*G0_0_1_15_1_1 - 1.44761904761906*G0_0_1_16_1_0 + 0.609523809523802*G0_0_1_16_1_1 - 0.472380952380957*G0_0_1_17_1_0 + 0.396190476190479*G0_0_1_17_1_1 - 0.746666666666665*G0_0_1_18_1_0 + 0.0304761904761872*G0_0_1_18_1_1 + 3.2*G0_0_1_19_1_0 + 0.36571428571428*G0_0_1_19_1_1 - 0.640000000000002*G0_1_0_0_0_0 - 0.640000000000002*G0_1_0_0_0_1 - 0.57904761904762*G0_1_0_1_0_0 - 0.609523809523814*G0_1_0_2_0_1 + 2.20952380952381*G0_1_0_3_0_0 + 0.0304761904761873*G0_1_0_3_0_1 - 1.44761904761906*G0_1_0_4_0_0 + 0.761904761904758*G0_1_0_4_0_1 + 0.990476190476185*G0_1_0_5_0_0 + 1.85904761904762*G0_1_0_5_0_1 + 1.44761904761906*G0_1_0_6_0_0 - 0.609523809523803*G0_1_0_6_0_1 + 0.472380952380957*G0_1_0_7_0_0 - 0.396190476190479*G0_1_0_7_0_1 + 0.746666666666666*G0_1_0_8_0_0 - 0.0304761904761872*G0_1_0_8_0_1 - 3.19999999999999*G0_1_0_9_0_0 - 0.36571428571428*G0_1_0_9_0_1 - 0.640000000000002*G0_1_0_10_1_0 - 0.640000000000002*G0_1_0_10_1_1 - 0.57904761904762*G0_1_0_11_1_0 - 0.609523809523814*G0_1_0_12_1_1 + 2.20952380952381*G0_1_0_13_1_0 + 0.0304761904761873*G0_1_0_13_1_1 - 1.44761904761906*G0_1_0_14_1_0 + 0.761904761904758*G0_1_0_14_1_1 + 0.990476190476185*G0_1_0_15_1_0 + 1.85904761904762*G0_1_0_15_1_1 + 1.44761904761906*G0_1_0_16_1_0 - 0.609523809523803*G0_1_0_16_1_1 + 0.472380952380957*G0_1_0_17_1_0 - 0.396190476190479*G0_1_0_17_1_1 + 0.746666666666666*G0_1_0_18_1_0 - 0.0304761904761872*G0_1_0_18_1_1 - 3.19999999999999*G0_1_0_19_1_0 - 0.36571428571428*G0_1_0_19_1_1;
    A[134] = A[224] + 0.609523809523805*G0_0_0_0_0_0 + 0.609523809523806*G0_0_0_0_0_1 + 0.609523809523812*G0_0_0_1_0_0 - 4.57142857142857*G0_0_0_3_0_0 - 1.06666666666666*G0_0_0_3_0_1 - 2.89523809523808*G0_0_0_4_0_1 - 4.57142857142855*G0_0_0_5_0_0 - 3.50476190476189*G0_0_0_5_0_1 + 2.89523809523807*G0_0_0_6_0_1 - 0.609523809523807*G0_0_0_7_0_0 - 1.67619047619047*G0_0_0_7_0_1 - 0.609523809523811*G0_0_0_8_0_0 + 1.06666666666666*G0_0_0_8_0_1 + 9.14285714285711*G0_0_0_9_0_0 + 4.57142857142855*G0_0_0_9_0_1 + 0.609523809523805*G0_0_0_10_1_0 + 0.609523809523806*G0_0_0_10_1_1 + 0.609523809523812*G0_0_0_11_1_0 - 4.57142857142857*G0_0_0_13_1_0 - 1.06666666666666*G0_0_0_13_1_1 - 2.89523809523808*G0_0_0_14_1_1 - 4.57142857142855*G0_0_0_15_1_0 - 3.50476190476189*G0_0_0_15_1_1 + 2.89523809523807*G0_0_0_16_1_1 - 0.609523809523807*G0_0_0_17_1_0 - 1.67619047619047*G0_0_0_17_1_1 - 0.609523809523811*G0_0_0_18_1_0 + 1.06666666666666*G0_0_0_18_1_1 + 9.14285714285711*G0_0_0_19_1_0 + 4.57142857142855*G0_0_0_19_1_1 + 0.284444444444442*G0_0_1_0_0_0 + 0.284444444444442*G0_0_1_0_0_1 + 0.325079365079363*G0_0_1_1_0_0 + 1.57460317460316*G0_0_1_2_0_1 - 3.35238095238093*G0_0_1_3_0_0 - 0.639999999999997*G0_0_1_3_0_1 + 2.59047619047617*G0_0_1_4_0_0 - 1.37142857142857*G0_0_1_4_0_1 - 1.21904761904761*G0_0_1_5_0_0 - 0.792380952380949*G0_0_1_5_0_1 - 2.59047619047617*G0_0_1_6_0_0 - 1.06666666666666*G0_0_1_6_0_1 - 1.31047619047618*G0_0_1_7_0_0 - 1.73714285714284*G0_0_1_7_0_1 + 0.700952380952373*G0_0_1_8_0_0 + 0.639999999999998*G0_0_1_8_0_1 + 4.57142857142855*G0_0_1_9_0_0 + 3.10857142857141*G0_0_1_9_0_1 + 0.284444444444442*G0_0_1_10_1_0 + 0.284444444444442*G0_0_1_10_1_1 + 0.325079365079363*G0_0_1_11_1_0 + 1.57460317460316*G0_0_1_12_1_1 - 3.35238095238093*G0_0_1_13_1_0 - 0.639999999999997*G0_0_1_13_1_1 + 2.59047619047617*G0_0_1_14_1_0 - 1.37142857142857*G0_0_1_14_1_1 - 1.21904761904761*G0_0_1_15_1_0 - 0.792380952380949*G0_0_1_15_1_1 - 2.59047619047617*G0_0_1_16_1_0 - 1.06666666666666*G0_0_1_16_1_1 - 1.31047619047618*G0_0_1_17_1_0 - 1.73714285714284*G0_0_1_17_1_1 + 0.700952380952373*G0_0_1_18_1_0 + 0.639999999999998*G0_0_1_18_1_1 + 4.57142857142855*G0_0_1_19_1_0 + 3.10857142857141*G0_0_1_19_1_1 + 0.345396825396828*G0_1_0_0_0_0 + 0.345396825396828*G0_1_0_0_0_1 + 0.264126984126985*G0_1_0_1_0_0 + 2.79365079365079*G0_1_0_2_0_1 - 4.57142857142856*G0_1_0_3_0_0 - 1.53904761904761*G0_1_0_3_0_1 + 5.48571428571427*G0_1_0_4_0_0 - 0.0761904761904812*G0_1_0_4_0_1 - 0.472380952380957*G0_1_0_5_0_1 - 5.48571428571427*G0_1_0_6_0_0 - 2.66666666666666*G0_1_0_6_0_1 - 1.03619047619048*G0_1_0_7_0_0 - 0.56380952380952*G0_1_0_7_0_1 + 0.426666666666665*G0_1_0_8_0_0 + 1.53904761904761*G0_1_0_8_0_1 + 4.57142857142856*G0_1_0_9_0_0 + 0.640000000000001*G0_1_0_9_0_1 + 0.345396825396828*G0_1_0_10_1_0 + 0.345396825396828*G0_1_0_10_1_1 + 0.264126984126985*G0_1_0_11_1_0 + 2.79365079365079*G0_1_0_12_1_1 - 4.57142857142856*G0_1_0_13_1_0 - 1.53904761904761*G0_1_0_13_1_1 + 5.48571428571427*G0_1_0_14_1_0 - 0.0761904761904812*G0_1_0_14_1_1 - 0.472380952380957*G0_1_0_15_1_1 - 5.48571428571427*G0_1_0_16_1_0 - 2.66666666666666*G0_1_0_16_1_1 - 1.03619047619048*G0_1_0_17_1_0 - 0.56380952380952*G0_1_0_17_1_1 + 0.426666666666665*G0_1_0_18_1_0 + 1.53904761904761*G0_1_0_18_1_1 + 4.57142857142856*G0_1_0_19_1_0 + 0.640000000000001*G0_1_0_19_1_1 + 0.711111111111113*G0_1_1_0_0_0 + 0.711111111111113*G0_1_1_0_0_1 + 0.69079365079365*G0_1_1_1_0_0 + 2.18412698412697*G0_1_1_2_0_1 - 0.259047619047617*G0_1_1_3_0_0 + 1.55428571428571*G0_1_1_3_0_1 + 4.03809523809521*G0_1_1_4_0_0 + 0.731428571428565*G0_1_1_4_0_1 + 3.09333333333332*G0_1_1_5_0_0 + 0.426666666666653*G0_1_1_5_0_1 - 4.03809523809521*G0_1_1_6_0_0 - 3.32190476190474*G0_1_1_6_0_1 - 1.56952380952381*G0_1_1_7_0_0 + 1.09714285714286*G0_1_1_7_0_1 + 0.167619047619043*G0_1_1_8_0_0 - 1.55428571428571*G0_1_1_8_0_1 - 2.8342857142857*G0_1_1_9_0_0 - 1.82857142857142*G0_1_1_9_0_1 + 0.711111111111113*G0_1_1_10_1_0 + 0.711111111111113*G0_1_1_10_1_1 + 0.69079365079365*G0_1_1_11_1_0 + 2.18412698412697*G0_1_1_12_1_1 - 0.259047619047617*G0_1_1_13_1_0 + 1.55428571428571*G0_1_1_13_1_1 + 4.03809523809521*G0_1_1_14_1_0 + 0.731428571428565*G0_1_1_14_1_1 + 3.09333333333332*G0_1_1_15_1_0 + 0.426666666666653*G0_1_1_15_1_1 - 4.03809523809521*G0_1_1_16_1_0 - 3.32190476190474*G0_1_1_16_1_1 - 1.56952380952381*G0_1_1_17_1_0 + 1.09714285714286*G0_1_1_17_1_1 + 0.167619047619043*G0_1_1_18_1_0 - 1.55428571428571*G0_1_1_18_1_1 - 2.8342857142857*G0_1_1_19_1_0 - 1.82857142857142*G0_1_1_19_1_1;
    A[314] = A[134] - 1.03619047619047*G0_0_0_0_0_0 - 1.03619047619047*G0_0_0_0_0_1 + 0.426666666666664*G0_0_0_1_0_0 + 2.65142857142856*G0_0_0_2_0_1 + 2.37714285714285*G0_0_0_3_0_0 + 0.807619047619044*G0_0_0_3_0_1 + 7.67999999999997*G0_0_0_4_0_0 + 7.02476190476188*G0_0_0_4_0_1 + 2.1942857142857*G0_0_0_5_0_0 + 1.93523809523809*G0_0_0_5_0_1 - 7.67999999999997*G0_0_0_6_0_0 - 3.55047619047617*G0_0_0_6_0_1 + 2.13333333333333*G0_0_0_7_0_0 + 2.39238095238094*G0_0_0_7_0_1 - 1.52380952380952*G0_0_0_8_0_0 - 0.807619047619044*G0_0_0_8_0_1 - 4.57142857142855*G0_0_0_9_0_0 - 9.41714285714282*G0_0_0_9_0_1 - 1.03619047619047*G0_0_0_10_1_0 - 1.03619047619047*G0_0_0_10_1_1 + 0.426666666666664*G0_0_0_11_1_0 + 2.65142857142856*G0_0_0_12_1_1 + 2.37714285714285*G0_0_0_13_1_0 + 0.807619047619044*G0_0_0_13_1_1 + 7.67999999999997*G0_0_0_14_1_0 + 7.02476190476188*G0_0_0_14_1_1 + 2.1942857142857*G0_0_0_15_1_0 + 1.93523809523809*G0_0_0_15_1_1 - 7.67999999999997*G0_0_0_16_1_0 - 3.55047619047617*G0_0_0_16_1_1 + 2.13333333333333*G0_0_0_17_1_0 + 2.39238095238094*G0_0_0_17_1_1 - 1.52380952380952*G0_0_0_18_1_0 - 0.807619047619044*G0_0_0_18_1_1 - 4.57142857142855*G0_0_0_19_1_0 - 9.41714285714282*G0_0_0_19_1_1 - 0.507936507936509*G0_0_1_0_0_0 - 0.507936507936509*G0_0_1_0_0_1 + 0.203174603174602*G0_0_1_1_0_0 + 0.538412698412704*G0_0_1_2_0_1 + 3.55047619047617*G0_0_1_3_0_0 + 1.37142857142856*G0_0_1_3_0_1 + 2.54476190476191*G0_0_1_4_0_0 + 4.38857142857141*G0_0_1_4_0_1 + 2.39238095238094*G0_0_1_5_0_0 + 1.40190476190476*G0_0_1_5_0_1 - 2.54476190476191*G0_0_1_6_0_0 - 1.43238095238096*G0_0_1_6_0_1 + 1.5695238095238*G0_0_1_7_0_0 + 2.55999999999998*G0_0_1_7_0_1 - 1.26476190476189*G0_0_1_8_0_0 - 1.37142857142856*G0_0_1_8_0_1 - 5.94285714285711*G0_0_1_9_0_0 - 6.94857142857139*G0_0_1_9_0_1 - 0.507936507936509*G0_0_1_10_1_0 - 0.507936507936509*G0_0_1_10_1_1 + 0.203174603174602*G0_0_1_11_1_0 + 0.538412698412704*G0_0_1_12_1_1 + 3.55047619047617*G0_0_1_13_1_0 + 1.37142857142856*G0_0_1_13_1_1 + 2.54476190476191*G0_0_1_14_1_0 + 4.38857142857141*G0_0_1_14_1_1 + 2.39238095238094*G0_0_1_15_1_0 + 1.40190476190476*G0_0_1_15_1_1 - 2.54476190476191*G0_0_1_16_1_0 - 1.43238095238096*G0_0_1_16_1_1 + 1.5695238095238*G0_0_1_17_1_0 + 2.55999999999998*G0_0_1_17_1_1 - 1.26476190476189*G0_0_1_18_1_0 - 1.37142857142856*G0_0_1_18_1_1 - 5.94285714285711*G0_0_1_19_1_0 - 6.94857142857139*G0_0_1_19_1_1 - 0.264126984126983*G0_1_0_0_0_0 - 0.264126984126983*G0_1_0_0_0_1 + 0.507936507936508*G0_1_0_1_0_0 - 0.0711111111111083*G0_1_0_2_0_1 + 2.46857142857142*G0_1_0_3_0_0 + 1.52380952380952*G0_1_0_3_0_1 + 1.09714285714286*G0_1_0_4_0_0 + 2.62095238095238*G0_1_0_4_0_1 + 0.0914285714285648*G0_1_0_5_0_0 - 0.152380952380956*G0_1_0_5_0_1 - 1.09714285714286*G0_1_0_6_0_0 + 0.487619047619048*G0_1_0_6_0_1 + 1.15809523809523*G0_1_0_7_0_0 + 1.40190476190475*G0_1_0_7_0_1 - 1.40190476190476*G0_1_0_8_0_0 - 1.52380952380952*G0_1_0_8_0_1 - 2.55999999999998*G0_1_0_9_0_0 - 4.02285714285713*G0_1_0_9_0_1 - 0.264126984126983*G0_1_0_10_1_0 - 0.264126984126983*G0_1_0_10_1_1 + 0.507936507936508*G0_1_0_11_1_0 - 0.0711111111111083*G0_1_0_12_1_1 + 2.46857142857142*G0_1_0_13_1_0 + 1.52380952380952*G0_1_0_13_1_1 + 1.09714285714286*G0_1_0_14_1_0 + 2.62095238095238*G0_1_0_14_1_1 + 0.0914285714285648*G0_1_0_15_1_0 - 0.152380952380956*G0_1_0_15_1_1 - 1.09714285714286*G0_1_0_16_1_0 + 0.487619047619048*G0_1_0_16_1_1 + 1.15809523809523*G0_1_0_17_1_0 + 1.40190476190475*G0_1_0_17_1_1 - 1.40190476190476*G0_1_0_18_1_0 - 1.52380952380952*G0_1_0_18_1_1 - 2.55999999999998*G0_1_0_19_1_0 - 4.02285714285713*G0_1_0_19_1_1 - 0.426666666666666*G0_1_1_0_0_0 - 0.426666666666666*G0_1_1_0_0_1 + 0.121904761904764*G0_1_1_2_0_1 + 0.15238095238095*G0_1_1_3_0_0 - 0.0304761904761845*G0_1_1_4_0_0 + 0.396190476190474*G0_1_1_5_0_0 + 0.975238095238094*G0_1_1_5_0_1 + 0.0304761904761845*G0_1_1_6_0_0 - 0.670476190476192*G0_1_1_6_0_1 + 0.579047619047615*G0_1_1_7_0_0 - 0.152380952380944*G0_1_1_8_0_0 - 0.548571428571424*G0_1_1_9_0_0 - 0.426666666666666*G0_1_1_10_1_0 - 0.426666666666666*G0_1_1_10_1_1 + 0.121904761904764*G0_1_1_12_1_1 + 0.15238095238095*G0_1_1_13_1_0 - 0.0304761904761845*G0_1_1_14_1_0 + 0.396190476190474*G0_1_1_15_1_0 + 0.975238095238094*G0_1_1_15_1_1 + 0.0304761904761845*G0_1_1_16_1_0 - 0.670476190476192*G0_1_1_16_1_1 + 0.579047619047615*G0_1_1_17_1_0 - 0.152380952380944*G0_1_1_18_1_0 - 0.548571428571424*G0_1_1_19_1_0;
    A[394] = A[134] - 0.294603174603175*G0_0_0_0_0_0 - 0.294603174603175*G0_0_0_0_0_1 + 0.812698412698408*G0_0_0_1_0_0 + 3.25079365079363*G0_0_0_2_0_1 + 0.0914285714285796*G0_0_0_3_0_0 + 0.60952380952381*G0_0_0_3_0_1 + 9.1428571428571*G0_0_0_4_0_0 + 6.18666666666665*G0_0_0_4_0_1 + 0.091428571428571*G0_0_0_5_0_0 - 0.426666666666662*G0_0_0_5_0_1 - 9.14285714285711*G0_0_0_6_0_0 - 2.5295238095238*G0_0_0_6_0_1 + 0.792380952380952*G0_0_0_7_0_0 + 1.31047619047619*G0_0_0_7_0_1 - 1.31047619047619*G0_0_0_8_0_0 - 0.609523809523809*G0_0_0_8_0_1 - 0.182857142857151*G0_0_0_9_0_0 - 7.49714285714284*G0_0_0_9_0_1 - 0.294603174603175*G0_0_0_10_1_0 - 0.294603174603175*G0_0_0_10_1_1 + 0.812698412698408*G0_0_0_11_1_0 + 3.25079365079363*G0_0_0_12_1_1 + 0.0914285714285796*G0_0_0_13_1_0 + 0.60952380952381*G0_0_0_13_1_1 + 9.1428571428571*G0_0_0_14_1_0 + 6.18666666666665*G0_0_0_14_1_1 + 0.091428571428571*G0_0_0_15_1_0 - 0.426666666666662*G0_0_0_15_1_1 - 9.14285714285711*G0_0_0_16_1_0 - 2.5295238095238*G0_0_0_16_1_1 + 0.792380952380952*G0_0_0_17_1_0 + 1.31047619047619*G0_0_0_17_1_1 - 1.31047619047619*G0_0_0_18_1_0 - 0.609523809523809*G0_0_0_18_1_1 - 0.182857142857151*G0_0_0_19_1_0 - 7.49714285714284*G0_0_0_19_1_1 - 0.959999999999994*G0_0_1_1_0_0 + 0.960000000000002*G0_0_1_2_0_1 - 1.14285714285714*G0_0_1_3_0_0 - 2.10285714285713*G0_0_1_3_0_1 + 2.10285714285714*G0_0_1_4_0_0 + 1.14285714285714*G0_0_1_4_0_1 + 0.777142857142851*G0_0_1_5_0_0 + 0.777142857142856*G0_0_1_5_0_1 - 2.10285714285714*G0_0_1_6_0_0 - 1.73714285714286*G0_0_1_6_0_1 - 0.777142857142855*G0_0_1_7_0_0 - 0.777142857142862*G0_0_1_7_0_1 + 1.73714285714285*G0_0_1_8_0_0 + 2.10285714285713*G0_0_1_8_0_1 + 0.365714285714289*G0_0_1_9_0_0 - 0.365714285714278*G0_0_1_9_0_1 - 0.959999999999994*G0_0_1_11_1_0 + 0.960000000000002*G0_0_1_12_1_1 - 1.14285714285714*G0_0_1_13_1_0 - 2.10285714285713*G0_0_1_13_1_1 + 2.10285714285714*G0_0_1_14_1_0 + 1.14285714285714*G0_0_1_14_1_1 + 0.777142857142851*G0_0_1_15_1_0 + 0.777142857142856*G0_0_1_15_1_1 - 2.10285714285714*G0_0_1_16_1_0 - 1.73714285714286*G0_0_1_16_1_1 - 0.777142857142855*G0_0_1_17_1_0 - 0.777142857142862*G0_0_1_17_1_1 + 1.73714285714285*G0_0_1_18_1_0 + 2.10285714285713*G0_0_1_18_1_1 + 0.365714285714289*G0_0_1_19_1_0 - 0.365714285714278*G0_0_1_19_1_1 + 0.289523809523814*G0_1_0_1_0_0 - 0.289523809523802*G0_1_0_2_0_1 - 0.0761904761904741*G0_1_0_3_0_0 + 0.213333333333343*G0_1_0_3_0_1 - 0.21333333333332*G0_1_0_4_0_0 + 0.0761904761904795*G0_1_0_4_0_1 - 0.655238095238091*G0_1_0_5_0_0 - 0.655238095238091*G0_1_0_5_0_1 + 0.21333333333332*G0_1_0_6_0_0 + 0.944761904761894*G0_1_0_6_0_1 + 0.655238095238095*G0_1_0_7_0_0 + 0.655238095238095*G0_1_0_7_0_1 - 0.944761904761907*G0_1_0_8_0_0 - 0.213333333333344*G0_1_0_8_0_1 + 0.731428571428565*G0_1_0_9_0_0 - 0.731428571428574*G0_1_0_9_0_1 + 0.289523809523814*G0_1_0_11_1_0 - 0.289523809523802*G0_1_0_12_1_1 - 0.0761904761904741*G0_1_0_13_1_0 + 0.213333333333343*G0_1_0_13_1_1 - 0.21333333333332*G0_1_0_14_1_0 + 0.0761904761904795*G0_1_0_14_1_1 - 0.655238095238091*G0_1_0_15_1_0 - 0.655238095238091*G0_1_0_15_1_1 + 0.21333333333332*G0_1_0_16_1_0 + 0.944761904761894*G0_1_0_16_1_1 + 0.655238095238095*G0_1_0_17_1_0 + 0.655238095238095*G0_1_0_17_1_1 - 0.944761904761907*G0_1_0_18_1_0 - 0.213333333333344*G0_1_0_18_1_1 + 0.731428571428565*G0_1_0_19_1_0 - 0.731428571428574*G0_1_0_19_1_1 + 0.294603174603172*G0_1_1_0_0_0 + 0.294603174603171*G0_1_1_0_0_1 - 3.25079365079364*G0_1_1_1_0_0 - 0.812698412698402*G0_1_1_2_0_1 - 6.18666666666664*G0_1_1_3_0_0 - 9.1428571428571*G0_1_1_3_0_1 - 0.6095238095238*G0_1_1_4_0_0 - 0.0914285714285747*G0_1_1_4_0_1 - 1.31047619047618*G0_1_1_5_0_0 - 0.792380952380943*G0_1_1_5_0_1 + 0.609523809523798*G0_1_1_6_0_0 + 1.31047619047617*G0_1_1_6_0_1 + 0.426666666666664*G0_1_1_7_0_0 - 0.0914285714285761*G0_1_1_7_0_1 + 2.5295238095238*G0_1_1_8_0_0 + 9.1428571428571*G0_1_1_8_0_1 + 7.49714285714282*G0_1_1_9_0_0 + 0.182857142857146*G0_1_1_9_0_1 + 0.294603174603172*G0_1_1_10_1_0 + 0.294603174603171*G0_1_1_10_1_1 - 3.25079365079364*G0_1_1_11_1_0 - 0.812698412698402*G0_1_1_12_1_1 - 6.18666666666664*G0_1_1_13_1_0 - 9.1428571428571*G0_1_1_13_1_1 - 0.6095238095238*G0_1_1_14_1_0 - 0.0914285714285747*G0_1_1_14_1_1 - 1.31047619047618*G0_1_1_15_1_0 - 0.792380952380943*G0_1_1_15_1_1 + 0.609523809523798*G0_1_1_16_1_0 + 1.31047619047617*G0_1_1_16_1_1 + 0.426666666666664*G0_1_1_17_1_0 - 0.0914285714285761*G0_1_1_17_1_1 + 2.5295238095238*G0_1_1_18_1_0 + 9.1428571428571*G0_1_1_18_1_1 + 7.49714285714282*G0_1_1_19_1_0 + 0.182857142857146*G0_1_1_19_1_1;
    A[599] = A[134];
    A[688] = A[394] - 0.426666666666661*G0_0_0_0_0_0 - 0.426666666666661*G0_0_0_0_0_1 + 0.121904761904761*G0_0_0_1_0_0 - 0.0304761904761955*G0_0_0_3_0_1 + 0.15238095238094*G0_0_0_4_0_1 + 0.579047619047605*G0_0_0_5_0_1 - 0.152380952380939*G0_0_0_6_0_1 + 0.975238095238086*G0_0_0_7_0_0 + 0.396190476190469*G0_0_0_7_0_1 - 0.670476190476186*G0_0_0_8_0_0 + 0.0304761904761958*G0_0_0_8_0_1 - 0.548571428571409*G0_0_0_9_0_1 - 0.426666666666661*G0_0_0_10_1_0 - 0.426666666666661*G0_0_0_10_1_1 + 0.121904761904761*G0_0_0_11_1_0 - 0.0304761904761955*G0_0_0_13_1_1 + 0.15238095238094*G0_0_0_14_1_1 + 0.579047619047605*G0_0_0_15_1_1 - 0.152380952380939*G0_0_0_16_1_1 + 0.975238095238086*G0_0_0_17_1_0 + 0.396190476190469*G0_0_0_17_1_1 - 0.670476190476186*G0_0_0_18_1_0 + 0.0304761904761958*G0_0_0_18_1_1 - 0.548571428571409*G0_0_0_19_1_1 - 0.843174603174596*G0_0_1_0_0_0 - 0.843174603174596*G0_0_1_0_0_1 + 0.538412698412692*G0_0_1_1_0_0 - 0.132063492063496*G0_0_1_2_0_1 + 4.67809523809521*G0_0_1_3_0_0 + 2.54476190476188*G0_0_1_3_0_1 + 0.655238095238088*G0_0_1_4_0_0 + 3.4590476190476*G0_0_1_4_0_1 + 2.1790476190476*G0_0_1_5_0_0 + 1.90476190476189*G0_0_1_5_0_1 - 0.655238095238086*G0_0_1_6_0_0 - 0.929523809523796*G0_0_1_6_0_1 + 2.02666666666665*G0_0_1_7_0_0 + 2.30095238095237*G0_0_1_7_0_1 - 1.72190476190475*G0_0_1_8_0_0 - 2.54476190476188*G0_0_1_8_0_1 - 6.85714285714282*G0_0_1_9_0_0 - 5.75999999999997*G0_0_1_9_0_1 - 0.843174603174596*G0_0_1_10_1_0 - 0.843174603174596*G0_0_1_10_1_1 + 0.538412698412692*G0_0_1_11_1_0 - 0.132063492063496*G0_0_1_12_1_1 + 4.67809523809521*G0_0_1_13_1_0 + 2.54476190476188*G0_0_1_13_1_1 + 0.655238095238088*G0_0_1_14_1_0 + 3.4590476190476*G0_0_1_14_1_1 + 2.1790476190476*G0_0_1_15_1_0 + 1.90476190476189*G0_0_1_15_1_1 - 0.655238095238086*G0_0_1_16_1_0 - 0.929523809523796*G0_0_1_16_1_1 + 2.02666666666665*G0_0_1_17_1_0 + 2.30095238095237*G0_0_1_17_1_1 - 1.72190476190475*G0_0_1_18_1_0 - 2.54476190476188*G0_0_1_18_1_1 - 6.85714285714282*G0_0_1_19_1_0 - 5.75999999999997*G0_0_1_19_1_1 + 0.0711111111111112*G0_1_0_0_0_0 + 0.0711111111111112*G0_1_0_0_0_1 - 0.0711111111111147*G0_1_0_1_0_0 + 0.843174603174593*G0_1_0_2_0_1 + 2.33142857142856*G0_1_0_3_0_0 + 1.09714285714284*G0_1_0_3_0_1 + 2.23999999999998*G0_1_0_4_0_0 + 2.55999999999999*G0_1_0_4_0_1 + 1.78285714285713*G0_1_0_5_0_0 + 0.822857142857134*G0_1_0_5_0_1 - 2.23999999999998*G0_1_0_6_0_0 - 1.73714285714284*G0_1_0_6_0_1 - 0.777142857142852*G0_1_0_7_0_0 + 0.182857142857139*G0_1_0_7_0_1 + 0.777142857142855*G0_1_0_8_0_0 - 1.09714285714284*G0_1_0_8_0_1 - 4.11428571428568*G0_1_0_9_0_0 - 2.74285714285713*G0_1_0_9_0_1 + 0.0711111111111112*G0_1_0_10_1_0 + 0.0711111111111112*G0_1_0_10_1_1 - 0.0711111111111147*G0_1_0_11_1_0 + 0.843174603174593*G0_1_0_12_1_1 + 2.33142857142856*G0_1_0_13_1_0 + 1.09714285714284*G0_1_0_13_1_1 + 2.23999999999998*G0_1_0_14_1_0 + 2.55999999999999*G0_1_0_14_1_1 + 1.78285714285713*G0_1_0_15_1_0 + 0.822857142857134*G0_1_0_15_1_1 - 2.23999999999998*G0_1_0_16_1_0 - 1.73714285714284*G0_1_0_16_1_1 - 0.777142857142852*G0_1_0_17_1_0 + 0.182857142857139*G0_1_0_17_1_1 + 0.777142857142855*G0_1_0_18_1_0 - 1.09714285714284*G0_1_0_18_1_1 - 4.11428571428568*G0_1_0_19_1_0 - 2.74285714285713*G0_1_0_19_1_1 - 1.03619047619047*G0_1_1_0_0_0 - 1.03619047619047*G0_1_1_0_0_1 + 2.65142857142855*G0_1_1_1_0_0 + 0.426666666666659*G0_1_1_2_0_1 + 7.02476190476187*G0_1_1_3_0_0 + 7.67999999999995*G0_1_1_3_0_1 + 0.807619047619042*G0_1_1_4_0_0 + 2.37714285714285*G0_1_1_4_0_1 + 2.39238095238094*G0_1_1_5_0_0 + 2.13333333333331*G0_1_1_5_0_1 - 0.807619047619039*G0_1_1_6_0_0 - 1.52380952380951*G0_1_1_6_0_1 + 1.93523809523808*G0_1_1_7_0_0 + 2.1942857142857*G0_1_1_7_0_1 - 3.55047619047617*G0_1_1_8_0_0 - 7.67999999999996*G0_1_1_8_0_1 - 9.41714285714281*G0_1_1_9_0_0 - 4.57142857142855*G0_1_1_9_0_1 - 1.03619047619047*G0_1_1_10_1_0 - 1.03619047619047*G0_1_1_10_1_1 + 2.65142857142855*G0_1_1_11_1_0 + 0.426666666666659*G0_1_1_12_1_1 + 7.02476190476187*G0_1_1_13_1_0 + 7.67999999999995*G0_1_1_13_1_1 + 0.807619047619042*G0_1_1_14_1_0 + 2.37714285714285*G0_1_1_14_1_1 + 2.39238095238094*G0_1_1_15_1_0 + 2.13333333333331*G0_1_1_15_1_1 - 0.807619047619039*G0_1_1_16_1_0 - 1.52380952380951*G0_1_1_16_1_1 + 1.93523809523808*G0_1_1_17_1_0 + 2.1942857142857*G0_1_1_17_1_1 - 3.55047619047617*G0_1_1_18_1_0 - 7.67999999999996*G0_1_1_18_1_1 - 9.41714285714281*G0_1_1_19_1_0 - 4.57142857142855*G0_1_1_19_1_1;
    A[779] = A[314];
    A[895] = A[314] - 0.335238095238089*G0_0_1_0_0_0 - 0.33523809523809*G0_0_1_0_0_1 - 0.335238095238092*G0_0_1_1_0_0 - 0.0914285714285735*G0_0_1_3_0_0 - 0.716190476190471*G0_0_1_3_0_1 + 0.289523809523806*G0_0_1_4_0_1 - 0.0914285714285757*G0_0_1_5_0_0 + 0.624761904761892*G0_0_1_5_0_1 - 0.289523809523802*G0_0_1_6_0_1 + 0.335238095238088*G0_0_1_7_0_0 - 0.380952380952379*G0_0_1_7_0_1 + 0.335238095238093*G0_0_1_8_0_0 + 0.71619047619047*G0_0_1_8_0_1 + 0.182857142857149*G0_0_1_9_0_0 + 0.091428571428573*G0_0_1_9_0_1 - 0.335238095238089*G0_0_1_10_1_0 - 0.33523809523809*G0_0_1_10_1_1 - 0.335238095238092*G0_0_1_11_1_0 - 0.0914285714285735*G0_0_1_13_1_0 - 0.716190476190471*G0_0_1_13_1_1 + 0.289523809523806*G0_0_1_14_1_1 - 0.0914285714285757*G0_0_1_15_1_0 + 0.624761904761892*G0_0_1_15_1_1 - 0.289523809523802*G0_0_1_16_1_1 + 0.335238095238088*G0_0_1_17_1_0 - 0.380952380952379*G0_0_1_17_1_1 + 0.335238095238093*G0_0_1_18_1_0 + 0.71619047619047*G0_0_1_18_1_1 + 0.182857142857149*G0_0_1_19_1_0 + 0.091428571428573*G0_0_1_19_1_1 + 0.335238095238089*G0_1_0_0_0_0 + 0.335238095238089*G0_1_0_0_0_1 + 0.335238095238092*G0_1_0_1_0_0 + 0.0914285714285736*G0_1_0_3_0_0 + 0.716190476190471*G0_1_0_3_0_1 - 0.289523809523806*G0_1_0_4_0_1 + 0.0914285714285756*G0_1_0_5_0_0 - 0.624761904761891*G0_1_0_5_0_1 + 0.289523809523801*G0_1_0_6_0_1 - 0.335238095238088*G0_1_0_7_0_0 + 0.380952380952379*G0_1_0_7_0_1 - 0.335238095238093*G0_1_0_8_0_0 - 0.71619047619047*G0_1_0_8_0_1 - 0.182857142857149*G0_1_0_9_0_0 - 0.0914285714285729*G0_1_0_9_0_1 + 0.335238095238089*G0_1_0_10_1_0 + 0.335238095238089*G0_1_0_10_1_1 + 0.335238095238092*G0_1_0_11_1_0 + 0.0914285714285736*G0_1_0_13_1_0 + 0.716190476190471*G0_1_0_13_1_1 - 0.289523809523806*G0_1_0_14_1_1 + 0.0914285714285756*G0_1_0_15_1_0 - 0.624761904761891*G0_1_0_15_1_1 + 0.289523809523801*G0_1_0_16_1_1 - 0.335238095238088*G0_1_0_17_1_0 + 0.380952380952379*G0_1_0_17_1_1 - 0.335238095238093*G0_1_0_18_1_0 - 0.71619047619047*G0_1_0_18_1_1 - 0.182857142857149*G0_1_0_19_1_0 - 0.0914285714285729*G0_1_0_19_1_1;
    A[859] = A[394];
    A[397] = A[688] + 0.335238095238092*G0_0_1_0_0_0 + 0.335238095238092*G0_0_1_0_0_1 + 0.335238095238096*G0_0_1_2_0_1 - 0.289523809523808*G0_0_1_3_0_0 + 0.716190476190475*G0_0_1_4_0_0 + 0.0914285714285678*G0_0_1_4_0_1 + 0.380952380952381*G0_0_1_5_0_0 - 0.33523809523809*G0_0_1_5_0_1 - 0.716190476190476*G0_0_1_6_0_0 - 0.335238095238099*G0_0_1_6_0_1 - 0.624761904761899*G0_0_1_7_0_0 + 0.0914285714285714*G0_0_1_7_0_1 + 0.289523809523803*G0_0_1_8_0_0 - 0.0914285714285729*G0_0_1_9_0_0 - 0.182857142857139*G0_0_1_9_0_1 + 0.335238095238092*G0_0_1_10_1_0 + 0.335238095238092*G0_0_1_10_1_1 + 0.335238095238096*G0_0_1_12_1_1 - 0.289523809523808*G0_0_1_13_1_0 + 0.716190476190475*G0_0_1_14_1_0 + 0.0914285714285678*G0_0_1_14_1_1 + 0.380952380952381*G0_0_1_15_1_0 - 0.33523809523809*G0_0_1_15_1_1 - 0.716190476190476*G0_0_1_16_1_0 - 0.335238095238099*G0_0_1_16_1_1 - 0.624761904761899*G0_0_1_17_1_0 + 0.0914285714285714*G0_0_1_17_1_1 + 0.289523809523803*G0_0_1_18_1_0 - 0.0914285714285729*G0_0_1_19_1_0 - 0.182857142857139*G0_0_1_19_1_1 - 0.335238095238092*G0_1_0_0_0_0 - 0.335238095238092*G0_1_0_0_0_1 - 0.335238095238097*G0_1_0_2_0_1 + 0.289523809523808*G0_1_0_3_0_0 - 0.716190476190475*G0_1_0_4_0_0 - 0.0914285714285676*G0_1_0_4_0_1 - 0.380952380952381*G0_1_0_5_0_0 + 0.33523809523809*G0_1_0_5_0_1 + 0.716190476190475*G0_1_0_6_0_0 + 0.335238095238099*G0_1_0_6_0_1 + 0.624761904761899*G0_1_0_7_0_0 - 0.0914285714285714*G0_1_0_7_0_1 - 0.289523809523804*G0_1_0_8_0_0 + 0.091428571428573*G0_1_0_9_0_0 + 0.182857142857139*G0_1_0_9_0_1 - 0.335238095238092*G0_1_0_10_1_0 - 0.335238095238092*G0_1_0_10_1_1 - 0.335238095238097*G0_1_0_12_1_1 + 0.289523809523808*G0_1_0_13_1_0 - 0.716190476190475*G0_1_0_14_1_0 - 0.0914285714285676*G0_1_0_14_1_1 - 0.380952380952381*G0_1_0_15_1_0 + 0.33523809523809*G0_1_0_15_1_1 + 0.716190476190475*G0_1_0_16_1_0 + 0.335238095238099*G0_1_0_16_1_1 + 0.624761904761899*G0_1_0_17_1_0 - 0.0914285714285714*G0_1_0_17_1_1 - 0.289523809523804*G0_1_0_18_1_0 + 0.091428571428573*G0_1_0_19_1_0 + 0.182857142857139*G0_1_0_19_1_1;
    A[215] = -A[224] - 0.665396825396822*G0_0_0_0_0_0 - 0.665396825396823*G0_0_0_0_0_1 - 0.655238095238096*G0_0_0_1_0_0 + 0.66031746031744*G0_0_0_2_0_1 + 0.761904761904777*G0_0_0_3_0_0 + 0.233650793650793*G0_0_0_3_0_1 - 2.05714285714289*G0_0_0_4_0_0 - 2.84444444444444*G0_0_0_4_0_1 + 6.24761904761902*G0_0_0_5_0_0 + 5.61777777777775*G0_0_0_5_0_1 + 2.05714285714289*G0_0_0_6_0_0 - 5.61269841269837*G0_0_0_6_0_1 - 0.619682539682535*G0_0_0_7_0_0 + 0.0101587301587298*G0_0_0_7_0_1 + 1.94031746031745*G0_0_0_8_0_0 - 0.233650793650794*G0_0_0_8_0_1 - 7.00952380952379*G0_0_0_9_0_0 + 2.83428571428571*G0_0_0_9_0_1 - 0.665396825396822*G0_0_0_10_1_0 - 0.665396825396823*G0_0_0_10_1_1 - 0.655238095238096*G0_0_0_11_1_0 + 0.66031746031744*G0_0_0_12_1_1 + 0.761904761904777*G0_0_0_13_1_0 + 0.233650793650793*G0_0_0_13_1_1 - 2.05714285714289*G0_0_0_14_1_0 - 2.84444444444444*G0_0_0_14_1_1 + 6.24761904761902*G0_0_0_15_1_0 + 5.61777777777775*G0_0_0_15_1_1 + 2.05714285714289*G0_0_0_16_1_0 - 5.61269841269837*G0_0_0_16_1_1 - 0.619682539682535*G0_0_0_17_1_0 + 0.0101587301587298*G0_0_0_17_1_1 + 1.94031746031745*G0_0_0_18_1_0 - 0.233650793650794*G0_0_0_18_1_1 - 7.00952380952379*G0_0_0_19_1_0 + 2.83428571428571*G0_0_0_19_1_1 + 0.0601058201058209*G0_0_1_0_0_0 + 0.0601058201058211*G0_0_1_0_0_1 + 0.0313227513227492*G0_0_1_1_0_0 - 0.639153439153439*G0_0_1_2_0_1 - 0.319999999999996*G0_0_1_3_0_0 + 0.175238095238092*G0_0_1_3_0_1 - 2.4*G0_0_1_4_0_0 - 2.2247619047619*G0_0_1_4_0_1 + 0.82285714285714*G0_0_1_5_0_0 + 0.56380952380952*G0_0_1_5_0_1 + 2.4*G0_0_1_6_0_0 + 0.0152380952380984*G0_0_1_6_0_1 + 0.259047619047617*G0_0_1_7_0_1 - 0.0914285714285676*G0_0_1_8_0_0 - 0.175238095238093*G0_0_1_8_0_1 - 0.502857142857143*G0_0_1_9_0_0 + 1.96571428571428*G0_0_1_9_0_1 + 0.0601058201058209*G0_0_1_10_1_0 + 0.0601058201058211*G0_0_1_10_1_1 + 0.0313227513227492*G0_0_1_11_1_0 - 0.639153439153439*G0_0_1_12_1_1 - 0.319999999999996*G0_0_1_13_1_0 + 0.175238095238092*G0_0_1_13_1_1 - 2.4*G0_0_1_14_1_0 - 2.2247619047619*G0_0_1_14_1_1 + 0.82285714285714*G0_0_1_15_1_0 + 0.56380952380952*G0_0_1_15_1_1 + 2.4*G0_0_1_16_1_0 + 0.0152380952380984*G0_0_1_16_1_1 + 0.259047619047617*G0_0_1_17_1_1 - 0.0914285714285676*G0_0_1_18_1_0 - 0.175238095238093*G0_0_1_18_1_1 - 0.502857142857143*G0_0_1_19_1_0 + 1.96571428571428*G0_0_1_19_1_1 - 0.691640211640213*G0_1_0_0_0_0 - 0.691640211640213*G0_1_0_0_0_1 - 0.334391534391536*G0_1_0_1_0_0 - 0.156613756613767*G0_1_0_2_0_1 + 0.568888888888901*G0_1_0_3_0_0 + 0.152380952380951*G0_1_0_3_0_1 - 2.34920634920636*G0_1_0_4_0_0 - 2.11047619047618*G0_1_0_4_0_1 + 2.67682539682538*G0_1_0_5_0_0 + 3.25841269841269*G0_1_0_5_0_1 + 2.34920634920636*G0_1_0_6_0_0 - 2.41015873015871*G0_1_0_6_0_1 + 0.223492063492069*G0_1_0_7_0_0 - 0.35809523809524*G0_1_0_7_0_1 + 0.802539682539681*G0_1_0_8_0_0 - 0.152380952380952*G0_1_0_8_0_1 - 3.24571428571428*G0_1_0_9_0_0 + 2.46857142857142*G0_1_0_9_0_1 - 0.691640211640213*G0_1_0_10_1_0 - 0.691640211640213*G0_1_0_10_1_1 - 0.334391534391536*G0_1_0_11_1_0 - 0.156613756613767*G0_1_0_12_1_1 + 0.568888888888901*G0_1_0_13_1_0 + 0.152380952380951*G0_1_0_13_1_1 - 2.34920634920636*G0_1_0_14_1_0 - 2.11047619047618*G0_1_0_14_1_1 + 2.67682539682538*G0_1_0_15_1_0 + 3.25841269841269*G0_1_0_15_1_1 + 2.34920634920636*G0_1_0_16_1_0 - 2.41015873015871*G0_1_0_16_1_1 + 0.223492063492069*G0_1_0_17_1_0 - 0.35809523809524*G0_1_0_17_1_1 + 0.802539682539681*G0_1_0_18_1_0 - 0.152380952380952*G0_1_0_18_1_1 - 3.24571428571428*G0_1_0_19_1_0 + 2.46857142857142*G0_1_0_19_1_1 - 0.579047619047621*G0_1_1_0_0_0 - 0.579047619047622*G0_1_1_0_0_1 - 0.579047619047619*G0_1_1_2_0_1 - 0.40380952380952*G0_1_1_3_0_0 - 2.14095238095238*G0_1_1_4_0_0 - 1.96571428571428*G0_1_1_4_0_1 - 1.56190476190476*G0_1_1_5_0_0 + 0.579047619047625*G0_1_1_5_0_1 + 2.14095238095238*G0_1_1_6_0_0 + 0.579047619047615*G0_1_1_6_0_1 + 0.175238095238102*G0_1_1_7_0_0 - 1.96571428571428*G0_1_1_7_0_1 + 0.403809523809521*G0_1_1_8_0_0 + 1.96571428571427*G0_1_1_9_0_0 + 3.93142857142856*G0_1_1_9_0_1 - 0.579047619047621*G0_1_1_10_1_0 - 0.579047619047622*G0_1_1_10_1_1 - 0.579047619047619*G0_1_1_12_1_1 - 0.40380952380952*G0_1_1_13_1_0 - 2.14095238095238*G0_1_1_14_1_0 - 1.96571428571428*G0_1_1_14_1_1 - 1.56190476190476*G0_1_1_15_1_0 + 0.579047619047625*G0_1_1_15_1_1 + 2.14095238095238*G0_1_1_16_1_0 + 0.579047619047615*G0_1_1_16_1_1 + 0.175238095238102*G0_1_1_17_1_0 - 1.96571428571428*G0_1_1_17_1_1 + 0.403809523809521*G0_1_1_18_1_0 + 1.96571428571427*G0_1_1_19_1_0 + 3.93142857142856*G0_1_1_19_1_1;
    A[683] = -A[215] - 0.355555555555555*G0_0_1_0_0_0 - 0.355555555555555*G0_0_1_0_0_1 - 0.761904761904763*G0_0_1_1_0_0 - 1.95555555555555*G0_0_1_2_0_1 + 3.27619047619046*G0_0_1_3_0_0 + 0.292063492063484*G0_0_1_3_0_1 - 4.41904761904761*G0_0_1_4_0_0 - 0.241269841269844*G0_0_1_4_0_1 + 1.6*G0_0_1_5_0_0 + 1.68888888888889*G0_0_1_5_0_1 + 4.41904761904761*G0_0_1_6_0_0 + 0.622222222222216*G0_0_1_6_0_1 + 0.558730158730156*G0_0_1_7_0_0 + 0.469841269841264*G0_0_1_7_0_1 + 0.558730158730163*G0_0_1_8_0_0 - 0.292063492063485*G0_0_1_8_0_1 - 4.87619047619046*G0_0_1_9_0_0 - 0.228571428571422*G0_0_1_9_0_1 - 0.355555555555555*G0_0_1_10_1_0 - 0.355555555555555*G0_0_1_10_1_1 - 0.761904761904763*G0_0_1_11_1_0 - 1.95555555555555*G0_0_1_12_1_1 + 3.27619047619046*G0_0_1_13_1_0 + 0.292063492063484*G0_0_1_13_1_1 - 4.41904761904761*G0_0_1_14_1_0 - 0.241269841269844*G0_0_1_14_1_1 + 1.6*G0_0_1_15_1_0 + 1.68888888888889*G0_0_1_15_1_1 + 4.41904761904761*G0_0_1_16_1_0 + 0.622222222222216*G0_0_1_16_1_1 + 0.558730158730156*G0_0_1_17_1_0 + 0.469841269841264*G0_0_1_17_1_1 + 0.558730158730163*G0_0_1_18_1_0 - 0.292063492063485*G0_0_1_18_1_1 - 4.87619047619046*G0_0_1_19_1_0 - 0.228571428571422*G0_0_1_19_1_1 + 1.31724867724867*G0_1_1_0_0_0 + 1.31724867724867*G0_1_1_0_0_1 - 0.580740740740741*G0_1_1_1_0_0 - 2.25185185185184*G0_1_1_2_0_1 + 2.57777777777777*G0_1_1_3_0_0 + 0.426666666666658*G0_1_1_3_0_1 - 4.12698412698411*G0_1_1_4_0_0 - 0.304761904761907*G0_1_1_4_0_1 + 1.76507936507936*G0_1_1_5_0_0 - 1.4526984126984*G0_1_1_5_0_1 + 4.12698412698411*G0_1_1_6_0_0 + 2.38730158730157*G0_1_1_6_0_1 - 0.993015873015866*G0_1_1_7_0_0 + 2.22476190476189*G0_1_1_7_0_1 + 0.256507936507939*G0_1_1_8_0_0 - 0.42666666666666*G0_1_1_8_0_1 - 4.34285714285713*G0_1_1_9_0_0 - 1.91999999999998*G0_1_1_9_0_1 + 1.31724867724867*G0_1_1_10_1_0 + 1.31724867724867*G0_1_1_10_1_1 - 0.580740740740741*G0_1_1_11_1_0 - 2.25185185185184*G0_1_1_12_1_1 + 2.57777777777777*G0_1_1_13_1_0 + 0.426666666666658*G0_1_1_13_1_1 - 4.12698412698411*G0_1_1_14_1_0 - 0.304761904761907*G0_1_1_14_1_1 + 1.76507936507936*G0_1_1_15_1_0 - 1.4526984126984*G0_1_1_15_1_1 + 4.12698412698411*G0_1_1_16_1_0 + 2.38730158730157*G0_1_1_16_1_1 - 0.993015873015866*G0_1_1_17_1_0 + 2.22476190476189*G0_1_1_17_1_1 + 0.256507936507939*G0_1_1_18_1_0 - 0.42666666666666*G0_1_1_18_1_1 - 4.34285714285713*G0_1_1_19_1_0 - 1.91999999999998*G0_1_1_19_1_1;
    A[805] = A[683] + 0.834708994708992*G0_0_0_0_0_0 + 0.834708994708991*G0_0_0_0_0_1 - 3.08994708994708*G0_0_0_1_0_0 + 2.6395767195767*G0_0_0_2_0_1 - 2.78857142857141*G0_0_0_3_0_0 - 6.24761904761902*G0_0_0_3_0_1 + 5.9580952380952*G0_0_0_4_0_0 + 3.68761904761903*G0_0_0_4_0_1 + 4.86095238095235*G0_0_0_5_0_0 + 2.08761904761903*G0_0_0_5_0_1 - 5.9580952380952*G0_0_0_6_0_0 - 5.56190476190473*G0_0_0_6_0_1 - 2.89523809523808*G0_0_0_7_0_0 - 0.121904761904759*G0_0_0_7_0_1 + 5.15047619047616*G0_0_0_8_0_0 + 6.24761904761902*G0_0_0_8_0_1 - 2.07238095238095*G0_0_0_9_0_0 - 3.56571428571428*G0_0_0_9_0_1 + 0.834708994708992*G0_0_0_10_1_0 + 0.834708994708991*G0_0_0_10_1_1 - 3.08994708994708*G0_0_0_11_1_0 + 2.6395767195767*G0_0_0_12_1_1 - 2.78857142857141*G0_0_0_13_1_0 - 6.24761904761902*G0_0_0_13_1_1 + 5.9580952380952*G0_0_0_14_1_0 + 3.68761904761903*G0_0_0_14_1_1 + 4.86095238095235*G0_0_0_15_1_0 + 2.08761904761903*G0_0_0_15_1_1 - 5.9580952380952*G0_0_0_16_1_0 - 5.56190476190473*G0_0_0_16_1_1 - 2.89523809523808*G0_0_0_17_1_0 - 0.121904761904759*G0_0_0_17_1_1 + 5.15047619047616*G0_0_0_18_1_0 + 6.24761904761902*G0_0_0_18_1_1 - 2.07238095238095*G0_0_0_19_1_0 - 3.56571428571428*G0_0_0_19_1_1 - 2.7326984126984*G0_0_1_1_0_0 + 2.7326984126984*G0_0_1_2_0_1 - 4.73650793650791*G0_0_1_3_0_0 - 7.46920634920631*G0_0_1_3_0_1 + 7.46920634920632*G0_0_1_4_0_0 + 4.73650793650792*G0_0_1_4_0_1 + 0.72888888888888*G0_0_1_5_0_0 + 0.728888888888878*G0_0_1_5_0_1 - 7.46920634920632*G0_0_1_6_0_0 - 3.46158730158728*G0_0_1_6_0_1 - 0.728888888888881*G0_0_1_7_0_0 - 0.728888888888877*G0_0_1_7_0_1 + 3.46158730158727*G0_0_1_8_0_0 + 7.46920634920631*G0_0_1_8_0_1 + 4.00761904761903*G0_0_1_9_0_0 - 4.00761904761904*G0_0_1_9_0_1 - 2.7326984126984*G0_0_1_11_1_0 + 2.7326984126984*G0_0_1_12_1_1 - 4.73650793650791*G0_0_1_13_1_0 - 7.46920634920631*G0_0_1_13_1_1 + 7.46920634920632*G0_0_1_14_1_0 + 4.73650793650792*G0_0_1_14_1_1 + 0.72888888888888*G0_0_1_15_1_0 + 0.728888888888878*G0_0_1_15_1_1 - 7.46920634920632*G0_0_1_16_1_0 - 3.46158730158728*G0_0_1_16_1_1 - 0.728888888888881*G0_0_1_17_1_0 - 0.728888888888877*G0_0_1_17_1_1 + 3.46158730158727*G0_0_1_18_1_0 + 7.46920634920631*G0_0_1_18_1_1 + 4.00761904761903*G0_0_1_19_1_0 - 4.00761904761904*G0_0_1_19_1_1 - 2.41777777777777*G0_1_0_1_0_0 + 2.41777777777776*G0_1_0_2_0_1 - 1.89206349206348*G0_1_0_3_0_0 - 4.30984126984125*G0_1_0_3_0_1 + 4.30984126984124*G0_1_0_4_0_0 + 1.89206349206348*G0_1_0_4_0_1 + 2.94349206349205*G0_1_0_5_0_0 + 2.94349206349205*G0_1_0_5_0_1 - 4.30984126984124*G0_1_0_6_0_0 - 5.36126984126981*G0_1_0_6_0_1 - 2.94349206349205*G0_1_0_7_0_0 - 2.94349206349205*G0_1_0_7_0_1 + 5.36126984126981*G0_1_0_8_0_0 + 4.30984126984125*G0_1_0_8_0_1 - 1.05142857142857*G0_1_0_9_0_0 + 1.05142857142856*G0_1_0_9_0_1 - 2.41777777777777*G0_1_0_11_1_0 + 2.41777777777776*G0_1_0_12_1_1 - 1.89206349206348*G0_1_0_13_1_0 - 4.30984126984125*G0_1_0_13_1_1 + 4.30984126984124*G0_1_0_14_1_0 + 1.89206349206348*G0_1_0_14_1_1 + 2.94349206349205*G0_1_0_15_1_0 + 2.94349206349205*G0_1_0_15_1_1 - 4.30984126984124*G0_1_0_16_1_0 - 5.36126984126981*G0_1_0_16_1_1 - 2.94349206349205*G0_1_0_17_1_0 - 2.94349206349205*G0_1_0_17_1_1 + 5.36126984126981*G0_1_0_18_1_0 + 4.30984126984125*G0_1_0_18_1_1 - 1.05142857142857*G0_1_0_19_1_0 + 1.05142857142856*G0_1_0_19_1_1 - 0.83470899470899*G0_1_1_0_0_0 - 0.834708994708992*G0_1_1_0_0_1 - 2.6395767195767*G0_1_1_1_0_0 + 3.08994708994708*G0_1_1_2_0_1 - 3.68761904761903*G0_1_1_3_0_0 - 5.9580952380952*G0_1_1_3_0_1 + 6.24761904761902*G0_1_1_4_0_0 + 2.78857142857141*G0_1_1_4_0_1 + 0.121904761904757*G0_1_1_5_0_0 + 2.89523809523808*G0_1_1_5_0_1 - 6.24761904761902*G0_1_1_6_0_0 - 5.15047619047616*G0_1_1_6_0_1 - 2.08761904761904*G0_1_1_7_0_0 - 4.86095238095235*G0_1_1_7_0_1 + 5.56190476190473*G0_1_1_8_0_0 + 5.9580952380952*G0_1_1_8_0_1 + 3.56571428571427*G0_1_1_9_0_0 + 2.07238095238094*G0_1_1_9_0_1 - 0.83470899470899*G0_1_1_10_1_0 - 0.834708994708992*G0_1_1_10_1_1 - 2.6395767195767*G0_1_1_11_1_0 + 3.08994708994708*G0_1_1_12_1_1 - 3.68761904761903*G0_1_1_13_1_0 - 5.9580952380952*G0_1_1_13_1_1 + 6.24761904761902*G0_1_1_14_1_0 + 2.78857142857141*G0_1_1_14_1_1 + 0.121904761904757*G0_1_1_15_1_0 + 2.89523809523808*G0_1_1_15_1_1 - 6.24761904761902*G0_1_1_16_1_0 - 5.15047619047616*G0_1_1_16_1_1 - 2.08761904761904*G0_1_1_17_1_0 - 4.86095238095235*G0_1_1_17_1_1 + 5.56190476190473*G0_1_1_18_1_0 + 5.9580952380952*G0_1_1_18_1_1 + 3.56571428571427*G0_1_1_19_1_0 + 2.07238095238094*G0_1_1_19_1_1;
    A[559] = A[805] - 1.71851851851851*G0_0_0_0_0_0 - 1.71851851851851*G0_0_0_0_0_1 + 2.68359788359787*G0_0_0_1_0_0 - 1.01417989417989*G0_0_0_2_0_1 + 3.21523809523807*G0_0_0_3_0_0 + 5.76507936507934*G0_0_0_3_0_1 - 3.36761904761903*G0_0_0_4_0_0 - 2.21968253968254*G0_0_0_4_0_1 - 1.38666666666666*G0_0_0_5_0_0 + 1.53396825396825*G0_0_0_5_0_1 + 3.36761904761903*G0_0_0_6_0_0 + 1.19873015873015*G0_0_0_6_0_1 + 3.49460317460316*G0_0_0_7_0_0 + 0.573968253968247*G0_0_0_7_0_1 - 4.45968253968252*G0_0_0_8_0_0 - 5.76507936507934*G0_0_0_8_0_1 - 1.82857142857141*G0_0_0_9_0_0 + 1.64571428571429*G0_0_0_9_0_1 - 1.71851851851851*G0_0_0_10_1_0 - 1.71851851851851*G0_0_0_10_1_1 + 2.68359788359787*G0_0_0_11_1_0 - 1.01417989417989*G0_0_0_12_1_1 + 3.21523809523807*G0_0_0_13_1_0 + 5.76507936507934*G0_0_0_13_1_1 - 3.36761904761903*G0_0_0_14_1_0 - 2.21968253968254*G0_0_0_14_1_1 - 1.38666666666666*G0_0_0_15_1_0 + 1.53396825396825*G0_0_0_15_1_1 + 3.36761904761903*G0_0_0_16_1_0 + 1.19873015873015*G0_0_0_16_1_1 + 3.49460317460316*G0_0_0_17_1_0 + 0.573968253968247*G0_0_0_17_1_1 - 4.45968253968252*G0_0_0_18_1_0 - 5.76507936507934*G0_0_0_18_1_1 - 1.82857142857141*G0_0_0_19_1_0 + 1.64571428571429*G0_0_0_19_1_1 - 0.748359788359785*G0_0_1_0_0_0 - 0.748359788359784*G0_0_1_0_0_1 + 3.54708994708993*G0_0_1_1_0_0 + 0.0372486772486776*G0_0_1_2_0_1 + 5.7269841269841*G0_0_1_3_0_0 + 8.68571428571425*G0_0_1_3_0_1 - 0.47492063492063*G0_0_1_4_0_0 + 0.0761904761904759*G0_0_1_4_0_1 + 0.993015873015867*G0_0_1_5_0_0 + 0.721269841269837*G0_0_1_5_0_1 + 0.474920634920632*G0_0_1_6_0_0 - 0.0101587301587314*G0_0_1_6_0_1 + 2.09015873015872*G0_0_1_7_0_0 + 2.36190476190475*G0_0_1_7_0_1 - 4.88888888888886*G0_0_1_8_0_0 - 8.68571428571425*G0_0_1_8_0_1 - 6.71999999999997*G0_0_1_9_0_0 - 2.43809523809522*G0_0_1_9_0_1 - 0.748359788359785*G0_0_1_10_1_0 - 0.748359788359784*G0_0_1_10_1_1 + 3.54708994708993*G0_0_1_11_1_0 + 0.0372486772486776*G0_0_1_12_1_1 + 5.7269841269841*G0_0_1_13_1_0 + 8.68571428571425*G0_0_1_13_1_1 - 0.47492063492063*G0_0_1_14_1_0 + 0.0761904761904759*G0_0_1_14_1_1 + 0.993015873015867*G0_0_1_15_1_0 + 0.721269841269837*G0_0_1_15_1_1 + 0.474920634920632*G0_0_1_16_1_0 - 0.0101587301587314*G0_0_1_16_1_1 + 2.09015873015872*G0_0_1_17_1_0 + 2.36190476190475*G0_0_1_17_1_1 - 4.88888888888886*G0_0_1_18_1_0 - 8.68571428571425*G0_0_1_18_1_1 - 6.71999999999997*G0_0_1_19_1_0 - 2.43809523809522*G0_0_1_19_1_1 - 0.667089947089944*G0_1_0_0_0_0 - 0.667089947089943*G0_1_0_0_0_1 + 1.82010582010582*G0_1_0_1_0_0 - 0.044021164021161*G0_1_0_2_0_1 + 0.723809523809517*G0_1_0_3_0_0 + 2.84444444444444*G0_1_0_3_0_1 - 0.175238095238093*G0_1_0_4_0_0 - 0.431746031746037*G0_1_0_4_0_1 + 0.297142857142855*G0_1_0_5_0_0 + 0.325079365079361*G0_1_0_5_0_1 + 0.175238095238093*G0_1_0_6_0_0 + 0.386031746031743*G0_1_0_6_0_1 + 2.89777777777776*G0_1_0_7_0_0 + 2.86984126984126*G0_1_0_7_0_1 - 4.05079365079364*G0_1_0_8_0_0 - 2.84444444444444*G0_1_0_8_0_1 - 1.02095238095237*G0_1_0_9_0_0 - 2.43809523809522*G0_1_0_9_0_1 - 0.667089947089944*G0_1_0_10_1_0 - 0.667089947089943*G0_1_0_10_1_1 + 1.82010582010582*G0_1_0_11_1_0 - 0.044021164021161*G0_1_0_12_1_1 + 0.723809523809517*G0_1_0_13_1_0 + 2.84444444444444*G0_1_0_13_1_1 - 0.175238095238093*G0_1_0_14_1_0 - 0.431746031746037*G0_1_0_14_1_1 + 0.297142857142855*G0_1_0_15_1_0 + 0.325079365079361*G0_1_0_15_1_1 + 0.175238095238093*G0_1_0_16_1_0 + 0.386031746031743*G0_1_0_16_1_1 + 2.89777777777776*G0_1_0_17_1_0 + 2.86984126984126*G0_1_0_17_1_1 - 4.05079365079364*G0_1_0_18_1_0 - 2.84444444444444*G0_1_0_18_1_1 - 1.02095238095237*G0_1_0_19_1_0 - 2.43809523809522*G0_1_0_19_1_1 - 0.711111111111106*G0_1_1_0_0_0 - 0.711111111111106*G0_1_1_0_0_1 - 0.711111111111107*G0_1_1_2_0_1 + 1.93015873015872*G0_1_1_3_0_0 - 0.203174603174599*G0_1_1_4_0_0 + 2.43809523809523*G0_1_1_4_0_1 + 0.507936507936506*G0_1_1_5_0_0 + 0.711111111111107*G0_1_1_5_0_1 + 0.2031746031746*G0_1_1_6_0_0 + 0.711111111111106*G0_1_1_6_0_1 + 2.64126984126982*G0_1_1_7_0_0 + 2.43809523809522*G0_1_1_7_0_1 - 1.93015873015871*G0_1_1_8_0_0 - 2.43809523809523*G0_1_1_9_0_0 - 4.87619047619045*G0_1_1_9_0_1 - 0.711111111111106*G0_1_1_10_1_0 - 0.711111111111106*G0_1_1_10_1_1 - 0.711111111111107*G0_1_1_12_1_1 + 1.93015873015872*G0_1_1_13_1_0 - 0.203174603174599*G0_1_1_14_1_0 + 2.43809523809523*G0_1_1_14_1_1 + 0.507936507936506*G0_1_1_15_1_0 + 0.711111111111107*G0_1_1_15_1_1 + 0.2031746031746*G0_1_1_16_1_0 + 0.711111111111106*G0_1_1_16_1_1 + 2.64126984126982*G0_1_1_17_1_0 + 2.43809523809522*G0_1_1_17_1_1 - 1.93015873015871*G0_1_1_18_1_0 - 2.43809523809523*G0_1_1_19_1_0 - 4.87619047619045*G0_1_1_19_1_1;
    A[125] = A[559] + 0.172698412698411*G0_0_0_0_0_0 + 0.172698412698411*G0_0_0_0_0_1 - 0.304761904761904*G0_0_0_1_0_0 - 1.62539682539681*G0_0_0_2_0_1 + 2.01142857142856*G0_0_0_3_0_0 + 0.279365079365075*G0_0_0_3_0_1 - 2.59047619047616*G0_0_0_4_0_0 + 0.462222222222227*G0_0_0_4_0_1 - 1.03619047619047*G0_0_0_5_0_0 - 0.980317460317451*G0_0_0_5_0_1 + 2.59047619047617*G0_0_0_6_0_0 + 2.43301587301585*G0_0_0_6_0_1 + 0.111746031746032*G0_0_0_7_0_0 + 0.0558730158730151*G0_0_0_7_0_1 + 0.0203174603174627*G0_0_0_8_0_0 - 0.279365079365076*G0_0_0_8_0_1 - 0.975238095238095*G0_0_0_9_0_0 - 0.518095238095242*G0_0_0_9_0_1 + 0.172698412698411*G0_0_0_10_1_0 + 0.172698412698411*G0_0_0_10_1_1 - 0.304761904761904*G0_0_0_11_1_0 - 1.62539682539681*G0_0_0_12_1_1 + 2.01142857142856*G0_0_0_13_1_0 + 0.279365079365075*G0_0_0_13_1_1 - 2.59047619047616*G0_0_0_14_1_0 + 0.462222222222227*G0_0_0_14_1_1 - 1.03619047619047*G0_0_0_15_1_0 - 0.980317460317451*G0_0_0_15_1_1 + 2.59047619047617*G0_0_0_16_1_0 + 2.43301587301585*G0_0_0_16_1_1 + 0.111746031746032*G0_0_0_17_1_0 + 0.0558730158730151*G0_0_0_17_1_1 + 0.0203174603174627*G0_0_0_18_1_0 - 0.279365079365076*G0_0_0_18_1_1 - 0.975238095238095*G0_0_0_19_1_0 - 0.518095238095242*G0_0_0_19_1_1 - 0.777142857142857*G0_0_1_1_0_0 + 0.777142857142856*G0_0_1_2_0_1 - 0.914285714285713*G0_0_1_3_0_0 - 1.69142857142857*G0_0_1_3_0_1 + 1.69142857142857*G0_0_1_4_0_0 + 0.914285714285713*G0_0_1_4_0_1 + 0.639999999999996*G0_0_1_5_0_0 + 0.639999999999999*G0_0_1_5_0_1 - 1.69142857142857*G0_0_1_6_0_0 - 1.41714285714285*G0_0_1_6_0_1 - 0.639999999999999*G0_0_1_7_0_0 - 0.640000000000003*G0_0_1_7_0_1 + 1.41714285714286*G0_0_1_8_0_0 + 1.69142857142857*G0_0_1_8_0_1 + 0.274285714285717*G0_0_1_9_0_0 - 0.274285714285713*G0_0_1_9_0_1 - 0.777142857142857*G0_0_1_11_1_0 + 0.777142857142856*G0_0_1_12_1_1 - 0.914285714285713*G0_0_1_13_1_0 - 1.69142857142857*G0_0_1_13_1_1 + 1.69142857142857*G0_0_1_14_1_0 + 0.914285714285713*G0_0_1_14_1_1 + 0.639999999999996*G0_0_1_15_1_0 + 0.639999999999999*G0_0_1_15_1_1 - 1.69142857142857*G0_0_1_16_1_0 - 1.41714285714285*G0_0_1_16_1_1 - 0.639999999999999*G0_0_1_17_1_0 - 0.640000000000003*G0_0_1_17_1_1 + 1.41714285714286*G0_0_1_18_1_0 + 1.69142857142857*G0_0_1_18_1_1 + 0.274285714285717*G0_0_1_19_1_0 - 0.274285714285713*G0_0_1_19_1_1 + 0.553650793650788*G0_1_0_1_0_0 - 0.553650793650789*G0_1_0_2_0_1 + 0.736507936507935*G0_1_0_3_0_0 + 1.29015873015872*G0_1_0_3_0_1 - 1.29015873015872*G0_1_0_4_0_0 - 0.736507936507925*G0_1_0_4_0_1 - 0.370793650793645*G0_1_0_5_0_0 - 0.370793650793645*G0_1_0_5_0_1 + 1.29015873015872*G0_1_0_6_0_0 + 0.924444444444434*G0_1_0_6_0_1 + 0.370793650793649*G0_1_0_7_0_0 + 0.370793650793649*G0_1_0_7_0_1 - 0.924444444444436*G0_1_0_8_0_0 - 1.29015873015872*G0_1_0_8_0_1 - 0.36571428571429*G0_1_0_9_0_0 + 0.365714285714277*G0_1_0_9_0_1 + 0.553650793650788*G0_1_0_11_1_0 - 0.553650793650789*G0_1_0_12_1_1 + 0.736507936507935*G0_1_0_13_1_0 + 1.29015873015872*G0_1_0_13_1_1 - 1.29015873015872*G0_1_0_14_1_0 - 0.736507936507925*G0_1_0_14_1_1 - 0.370793650793645*G0_1_0_15_1_0 - 0.370793650793645*G0_1_0_15_1_1 + 1.29015873015872*G0_1_0_16_1_0 + 0.924444444444434*G0_1_0_16_1_1 + 0.370793650793649*G0_1_0_17_1_0 + 0.370793650793649*G0_1_0_17_1_1 - 0.924444444444436*G0_1_0_18_1_0 - 1.29015873015872*G0_1_0_18_1_1 - 0.36571428571429*G0_1_0_19_1_0 + 0.365714285714277*G0_1_0_19_1_1 - 0.172698412698413*G0_1_1_0_0_0 - 0.172698412698413*G0_1_1_0_0_1 + 1.62539682539682*G0_1_1_1_0_0 + 0.304761904761905*G0_1_1_2_0_1 - 0.462222222222221*G0_1_1_3_0_0 + 2.59047619047617*G0_1_1_3_0_1 - 0.279365079365075*G0_1_1_4_0_0 - 2.01142857142856*G0_1_1_4_0_1 - 0.0558730158730157*G0_1_1_5_0_0 - 0.111746031746028*G0_1_1_5_0_1 + 0.279365079365075*G0_1_1_6_0_0 - 0.0203174603174636*G0_1_1_6_0_1 + 0.980317460317455*G0_1_1_7_0_0 + 1.03619047619047*G0_1_1_7_0_1 - 2.43301587301586*G0_1_1_8_0_0 - 2.59047619047617*G0_1_1_8_0_1 + 0.518095238095237*G0_1_1_9_0_0 + 0.975238095238089*G0_1_1_9_0_1 - 0.172698412698413*G0_1_1_10_1_0 - 0.172698412698413*G0_1_1_10_1_1 + 1.62539682539682*G0_1_1_11_1_0 + 0.304761904761905*G0_1_1_12_1_1 - 0.462222222222221*G0_1_1_13_1_0 + 2.59047619047617*G0_1_1_13_1_1 - 0.279365079365075*G0_1_1_14_1_0 - 2.01142857142856*G0_1_1_14_1_1 - 0.0558730158730157*G0_1_1_15_1_0 - 0.111746031746028*G0_1_1_15_1_1 + 0.279365079365075*G0_1_1_16_1_0 - 0.0203174603174636*G0_1_1_16_1_1 + 0.980317460317455*G0_1_1_17_1_0 + 1.03619047619047*G0_1_1_17_1_1 - 2.43301587301586*G0_1_1_18_1_0 - 2.59047619047617*G0_1_1_18_1_1 + 0.518095238095237*G0_1_1_19_1_0 + 0.975238095238089*G0_1_1_19_1_1;
    A[588] = A[559] + 0.548571428571426*G0_0_1_0_0_0 + 0.548571428571426*G0_0_1_0_0_1 - 0.863492063492059*G0_0_1_1_0_0 + 0.467301587301587*G0_0_1_2_0_1 - 4.1142857142857*G0_0_1_3_0_0 - 2.92063492063491*G0_0_1_3_0_1 + 0.0609523809523787*G0_0_1_4_0_0 - 2.46349206349206*G0_0_1_4_0_1 - 0.944761904761902*G0_0_1_5_0_0 - 0.706031746031742*G0_0_1_5_0_1 - 0.0609523809523802*G0_0_1_6_0_0 - 0.30984126984127*G0_0_1_6_0_1 - 1.71682539682539*G0_0_1_7_0_0 - 1.95555555555555*G0_0_1_7_0_1 + 2.03174603174602*G0_0_1_8_0_0 + 2.92063492063491*G0_0_1_8_0_1 + 5.0590476190476*G0_0_1_9_0_0 + 4.41904761904761*G0_0_1_9_0_1 + 0.548571428571426*G0_0_1_10_1_0 + 0.548571428571426*G0_0_1_10_1_1 - 0.863492063492059*G0_0_1_11_1_0 + 0.467301587301587*G0_0_1_12_1_1 - 4.1142857142857*G0_0_1_13_1_0 - 2.92063492063491*G0_0_1_13_1_1 + 0.0609523809523787*G0_0_1_14_1_0 - 2.46349206349206*G0_0_1_14_1_1 - 0.944761904761902*G0_0_1_15_1_0 - 0.706031746031742*G0_0_1_15_1_1 - 0.0609523809523802*G0_0_1_16_1_0 - 0.30984126984127*G0_0_1_16_1_1 - 1.71682539682539*G0_0_1_17_1_0 - 1.95555555555555*G0_0_1_17_1_1 + 2.03174603174602*G0_0_1_18_1_0 + 2.92063492063491*G0_0_1_18_1_1 + 5.0590476190476*G0_0_1_19_1_0 + 4.41904761904761*G0_0_1_19_1_1 - 0.548571428571426*G0_1_0_0_0_0 - 0.548571428571426*G0_1_0_0_0_1 + 0.863492063492059*G0_1_0_1_0_0 - 0.467301587301587*G0_1_0_2_0_1 + 4.1142857142857*G0_1_0_3_0_0 + 2.92063492063491*G0_1_0_3_0_1 - 0.0609523809523787*G0_1_0_4_0_0 + 2.46349206349206*G0_1_0_4_0_1 + 0.944761904761902*G0_1_0_5_0_0 + 0.706031746031742*G0_1_0_5_0_1 + 0.0609523809523803*G0_1_0_6_0_0 + 0.30984126984127*G0_1_0_6_0_1 + 1.71682539682539*G0_1_0_7_0_0 + 1.95555555555555*G0_1_0_7_0_1 - 2.03174603174602*G0_1_0_8_0_0 - 2.92063492063491*G0_1_0_8_0_1 - 5.0590476190476*G0_1_0_9_0_0 - 4.41904761904761*G0_1_0_9_0_1 - 0.548571428571426*G0_1_0_10_1_0 - 0.548571428571426*G0_1_0_10_1_1 + 0.863492063492059*G0_1_0_11_1_0 - 0.467301587301587*G0_1_0_12_1_1 + 4.1142857142857*G0_1_0_13_1_0 + 2.92063492063491*G0_1_0_13_1_1 - 0.0609523809523787*G0_1_0_14_1_0 + 2.46349206349206*G0_1_0_14_1_1 + 0.944761904761902*G0_1_0_15_1_0 + 0.706031746031742*G0_1_0_15_1_1 + 0.0609523809523803*G0_1_0_16_1_0 + 0.30984126984127*G0_1_0_16_1_1 + 1.71682539682539*G0_1_0_17_1_0 + 1.95555555555555*G0_1_0_17_1_1 - 2.03174603174602*G0_1_0_18_1_0 - 2.92063492063491*G0_1_0_18_1_1 - 5.0590476190476*G0_1_0_19_1_0 - 4.41904761904761*G0_1_0_19_1_1;
    A[334] = -A[559] - 0.181164021164019*G0_0_0_0_0_0 - 0.181164021164019*G0_0_0_0_0_1 - 0.296296296296296*G0_0_0_1_0_0 - 1.67280423280422*G0_0_0_2_0_1 + 2.05714285714284*G0_0_0_3_0_0 + 0.292063492063486*G0_0_0_3_0_1 - 3.30666666666665*G0_0_0_4_0_0 - 0.165079365079366*G0_0_0_4_0_1 + 0.167619047619047*G0_0_0_5_0_0 + 0.30222222222222*G0_0_0_5_0_1 + 3.30666666666665*G0_0_0_6_0_0 + 1.55174603174602*G0_0_0_6_0_1 + 0.833015873015866*G0_0_0_7_0_0 + 0.698412698412691*G0_0_0_7_0_1 - 0.35555555555555*G0_0_0_8_0_0 - 0.292063492063486*G0_0_0_8_0_1 - 2.22476190476189*G0_0_0_9_0_0 - 0.533333333333325*G0_0_0_9_0_1 - 0.181164021164019*G0_0_0_10_1_0 - 0.181164021164019*G0_0_0_10_1_1 - 0.296296296296296*G0_0_0_11_1_0 - 1.67280423280422*G0_0_0_12_1_1 + 2.05714285714284*G0_0_0_13_1_0 + 0.292063492063486*G0_0_0_13_1_1 - 3.30666666666665*G0_0_0_14_1_0 - 0.165079365079366*G0_0_0_14_1_1 + 0.167619047619047*G0_0_0_15_1_0 + 0.30222222222222*G0_0_0_15_1_1 + 3.30666666666665*G0_0_0_16_1_0 + 1.55174603174602*G0_0_0_16_1_1 + 0.833015873015866*G0_0_0_17_1_0 + 0.698412698412691*G0_0_0_17_1_1 - 0.35555555555555*G0_0_0_18_1_0 - 0.292063492063486*G0_0_0_18_1_1 - 2.22476190476189*G0_0_0_19_1_0 - 0.533333333333325*G0_0_0_19_1_1 - 0.761904761904761*G0_0_1_0_0_0 - 0.76190476190476*G0_0_1_0_0_1 + 1.95555555555556*G0_0_1_1_0_0 - 0.355555555555552*G0_0_1_2_0_1 + 3.79682539682538*G0_0_1_3_0_0 + 4.41904761904762*G0_0_1_3_0_1 - 0.0888888888888856*G0_0_1_4_0_0 + 1.59999999999999*G0_0_1_4_0_1 + 0.850793650793649*G0_0_1_5_0_0 + 0.558730158730158*G0_0_1_5_0_1 + 0.0888888888888869*G0_0_1_6_0_0 + 0.558730158730154*G0_0_1_6_0_1 + 2.98412698412698*G0_0_1_7_0_0 + 3.27619047619047*G0_0_1_7_0_1 - 4.17777777777777*G0_0_1_8_0_0 - 4.41904761904762*G0_0_1_8_0_1 - 4.64761904761903*G0_0_1_9_0_0 - 4.87619047619046*G0_0_1_9_0_1 - 0.761904761904761*G0_0_1_10_1_0 - 0.76190476190476*G0_0_1_10_1_1 + 1.95555555555556*G0_0_1_11_1_0 - 0.355555555555552*G0_0_1_12_1_1 + 3.79682539682538*G0_0_1_13_1_0 + 4.41904761904762*G0_0_1_13_1_1 - 0.0888888888888856*G0_0_1_14_1_0 + 1.59999999999999*G0_0_1_14_1_1 + 0.850793650793649*G0_0_1_15_1_0 + 0.558730158730158*G0_0_1_15_1_1 + 0.0888888888888869*G0_0_1_16_1_0 + 0.558730158730154*G0_0_1_16_1_1 + 2.98412698412698*G0_0_1_17_1_0 + 3.27619047619047*G0_0_1_17_1_1 - 4.17777777777777*G0_0_1_18_1_0 - 4.41904761904762*G0_0_1_18_1_1 - 4.64761904761903*G0_0_1_19_1_0 - 4.87619047619046*G0_0_1_19_1_1;
    A[131] = -A[588] - 0.181164021164019*G0_0_0_0_0_0 - 0.181164021164019*G0_0_0_0_0_1 - 0.296296296296296*G0_0_0_1_0_0 - 1.67280423280422*G0_0_0_2_0_1 + 2.05714285714284*G0_0_0_3_0_0 + 0.292063492063486*G0_0_0_3_0_1 - 3.30666666666665*G0_0_0_4_0_0 - 0.165079365079366*G0_0_0_4_0_1 + 0.167619047619046*G0_0_0_5_0_0 + 0.30222222222222*G0_0_0_5_0_1 + 3.30666666666665*G0_0_0_6_0_0 + 1.55174603174602*G0_0_0_6_0_1 + 0.833015873015866*G0_0_0_7_0_0 + 0.698412698412691*G0_0_0_7_0_1 - 0.35555555555555*G0_0_0_8_0_0 - 0.292063492063486*G0_0_0_8_0_1 - 2.22476190476189*G0_0_0_9_0_0 - 0.533333333333325*G0_0_0_9_0_1 - 0.181164021164019*G0_0_0_10_1_0 - 0.181164021164019*G0_0_0_10_1_1 - 0.296296296296296*G0_0_0_11_1_0 - 1.67280423280422*G0_0_0_12_1_1 + 2.05714285714284*G0_0_0_13_1_0 + 0.292063492063486*G0_0_0_13_1_1 - 3.30666666666665*G0_0_0_14_1_0 - 0.165079365079366*G0_0_0_14_1_1 + 0.167619047619046*G0_0_0_15_1_0 + 0.30222222222222*G0_0_0_15_1_1 + 3.30666666666665*G0_0_0_16_1_0 + 1.55174603174602*G0_0_0_16_1_1 + 0.833015873015866*G0_0_0_17_1_0 + 0.698412698412691*G0_0_0_17_1_1 - 0.35555555555555*G0_0_0_18_1_0 - 0.292063492063486*G0_0_0_18_1_1 - 2.22476190476189*G0_0_0_19_1_0 - 0.533333333333325*G0_0_0_19_1_1 - 0.761904761904761*G0_1_0_0_0_0 - 0.76190476190476*G0_1_0_0_0_1 + 1.95555555555556*G0_1_0_1_0_0 - 0.355555555555552*G0_1_0_2_0_1 + 3.79682539682538*G0_1_0_3_0_0 + 4.41904761904762*G0_1_0_3_0_1 - 0.0888888888888856*G0_1_0_4_0_0 + 1.59999999999999*G0_1_0_4_0_1 + 0.850793650793649*G0_1_0_5_0_0 + 0.558730158730158*G0_1_0_5_0_1 + 0.088888888888887*G0_1_0_6_0_0 + 0.558730158730154*G0_1_0_6_0_1 + 2.98412698412698*G0_1_0_7_0_0 + 3.27619047619047*G0_1_0_7_0_1 - 4.17777777777777*G0_1_0_8_0_0 - 4.41904761904762*G0_1_0_8_0_1 - 4.64761904761903*G0_1_0_9_0_0 - 4.87619047619046*G0_1_0_9_0_1 - 0.761904761904761*G0_1_0_10_1_0 - 0.76190476190476*G0_1_0_10_1_1 + 1.95555555555556*G0_1_0_11_1_0 - 0.355555555555552*G0_1_0_12_1_1 + 3.79682539682538*G0_1_0_13_1_0 + 4.41904761904762*G0_1_0_13_1_1 - 0.0888888888888856*G0_1_0_14_1_0 + 1.59999999999999*G0_1_0_14_1_1 + 0.850793650793649*G0_1_0_15_1_0 + 0.558730158730158*G0_1_0_15_1_1 + 0.088888888888887*G0_1_0_16_1_0 + 0.558730158730154*G0_1_0_16_1_1 + 2.98412698412698*G0_1_0_17_1_0 + 3.27619047619047*G0_1_0_17_1_1 - 4.17777777777777*G0_1_0_18_1_0 - 4.41904761904762*G0_1_0_18_1_1 - 4.64761904761903*G0_1_0_19_1_0 - 4.87619047619046*G0_1_0_19_1_1;
    A[247] = A[683] + 0.467301587301587*G0_0_1_0_0_0 + 0.467301587301587*G0_0_1_0_0_1 + 0.548571428571428*G0_0_1_1_0_0 + 0.863492063492063*G0_0_1_2_0_1 - 1.95555555555555*G0_0_1_3_0_0 - 0.238730158730156*G0_0_1_3_0_1 + 2.92063492063492*G0_0_1_4_0_0 + 0.888888888888888*G0_0_1_4_0_1 - 2.46349206349206*G0_0_1_5_0_0 - 2.52444444444444*G0_0_1_5_0_1 - 2.92063492063492*G0_0_1_6_0_0 + 1.19365079365079*G0_0_1_6_0_1 - 0.30984126984127*G0_0_1_7_0_0 - 0.248888888888885*G0_0_1_7_0_1 - 0.706031746031746*G0_0_1_8_0_0 + 0.238730158730157*G0_0_1_8_0_1 + 4.41904761904761*G0_0_1_9_0_0 - 0.640000000000002*G0_0_1_9_0_1 + 0.467301587301587*G0_0_1_10_1_0 + 0.467301587301587*G0_0_1_10_1_1 + 0.548571428571428*G0_0_1_11_1_0 + 0.863492063492063*G0_0_1_12_1_1 - 1.95555555555555*G0_0_1_13_1_0 - 0.238730158730156*G0_0_1_13_1_1 + 2.92063492063492*G0_0_1_14_1_0 + 0.888888888888888*G0_0_1_14_1_1 - 2.46349206349206*G0_0_1_15_1_0 - 2.52444444444444*G0_0_1_15_1_1 - 2.92063492063492*G0_0_1_16_1_0 + 1.19365079365079*G0_0_1_16_1_1 - 0.30984126984127*G0_0_1_17_1_0 - 0.248888888888885*G0_0_1_17_1_1 - 0.706031746031746*G0_0_1_18_1_0 + 0.238730158730157*G0_0_1_18_1_1 + 4.41904761904761*G0_0_1_19_1_0 - 0.640000000000002*G0_0_1_19_1_1 - 0.467301587301587*G0_1_0_0_0_0 - 0.467301587301587*G0_1_0_0_0_1 - 0.548571428571428*G0_1_0_1_0_0 - 0.863492063492063*G0_1_0_2_0_1 + 1.95555555555555*G0_1_0_3_0_0 + 0.238730158730156*G0_1_0_3_0_1 - 2.92063492063492*G0_1_0_4_0_0 - 0.888888888888888*G0_1_0_4_0_1 + 2.46349206349206*G0_1_0_5_0_0 + 2.52444444444444*G0_1_0_5_0_1 + 2.92063492063492*G0_1_0_6_0_0 - 1.19365079365079*G0_1_0_6_0_1 + 0.30984126984127*G0_1_0_7_0_0 + 0.248888888888885*G0_1_0_7_0_1 + 0.706031746031746*G0_1_0_8_0_0 - 0.238730158730157*G0_1_0_8_0_1 - 4.41904761904761*G0_1_0_9_0_0 + 0.640000000000002*G0_1_0_9_0_1 - 0.467301587301587*G0_1_0_10_1_0 - 0.467301587301587*G0_1_0_10_1_1 - 0.548571428571428*G0_1_0_11_1_0 - 0.863492063492063*G0_1_0_12_1_1 + 1.95555555555555*G0_1_0_13_1_0 + 0.238730158730156*G0_1_0_13_1_1 - 2.92063492063492*G0_1_0_14_1_0 - 0.888888888888888*G0_1_0_14_1_1 + 2.46349206349206*G0_1_0_15_1_0 + 2.52444444444444*G0_1_0_15_1_1 + 2.92063492063492*G0_1_0_16_1_0 - 1.19365079365079*G0_1_0_16_1_1 + 0.30984126984127*G0_1_0_17_1_0 + 0.248888888888885*G0_1_0_17_1_1 + 0.706031746031746*G0_1_0_18_1_0 - 0.238730158730157*G0_1_0_18_1_1 - 4.41904761904761*G0_1_0_19_1_0 + 0.640000000000002*G0_1_0_19_1_1;
    A[94] = A[559];
    A[590] = A[125];
    A[712] = A[247];
    A[340] = A[805];
    A[154] = A[125] + 0.548571428571425*G0_0_1_0_0_0 + 0.548571428571425*G0_0_1_0_0_1 + 0.467301587301586*G0_0_1_1_0_0 - 0.863492063492058*G0_0_1_2_0_1 - 2.46349206349205*G0_0_1_3_0_0 + 0.0609523809523819*G0_0_1_3_0_1 - 2.92063492063491*G0_0_1_4_0_0 - 4.1142857142857*G0_0_1_4_0_1 - 1.95555555555554*G0_0_1_5_0_0 - 1.71682539682539*G0_0_1_5_0_1 + 2.92063492063491*G0_0_1_6_0_0 + 2.03174603174602*G0_0_1_6_0_1 - 0.706031746031741*G0_0_1_7_0_0 - 0.944761904761897*G0_0_1_7_0_1 - 0.309841269841269*G0_0_1_8_0_0 - 0.060952380952382*G0_0_1_8_0_1 + 4.4190476190476*G0_0_1_9_0_0 + 5.0590476190476*G0_0_1_9_0_1 + 0.548571428571425*G0_0_1_10_1_0 + 0.548571428571425*G0_0_1_10_1_1 + 0.467301587301586*G0_0_1_11_1_0 - 0.863492063492058*G0_0_1_12_1_1 - 2.46349206349205*G0_0_1_13_1_0 + 0.0609523809523819*G0_0_1_13_1_1 - 2.92063492063491*G0_0_1_14_1_0 - 4.1142857142857*G0_0_1_14_1_1 - 1.95555555555554*G0_0_1_15_1_0 - 1.71682539682539*G0_0_1_15_1_1 + 2.92063492063491*G0_0_1_16_1_0 + 2.03174603174602*G0_0_1_16_1_1 - 0.706031746031741*G0_0_1_17_1_0 - 0.944761904761897*G0_0_1_17_1_1 - 0.309841269841269*G0_0_1_18_1_0 - 0.060952380952382*G0_0_1_18_1_1 + 4.4190476190476*G0_0_1_19_1_0 + 5.0590476190476*G0_0_1_19_1_1 - 0.548571428571425*G0_1_0_0_0_0 - 0.548571428571425*G0_1_0_0_0_1 - 0.467301587301586*G0_1_0_1_0_0 + 0.863492063492058*G0_1_0_2_0_1 + 2.46349206349205*G0_1_0_3_0_0 - 0.0609523809523819*G0_1_0_3_0_1 + 2.92063492063491*G0_1_0_4_0_0 + 4.1142857142857*G0_1_0_4_0_1 + 1.95555555555554*G0_1_0_5_0_0 + 1.71682539682539*G0_1_0_5_0_1 - 2.92063492063491*G0_1_0_6_0_0 - 2.03174603174602*G0_1_0_6_0_1 + 0.706031746031741*G0_1_0_7_0_0 + 0.944761904761897*G0_1_0_7_0_1 + 0.309841269841269*G0_1_0_8_0_0 + 0.060952380952382*G0_1_0_8_0_1 - 4.4190476190476*G0_1_0_9_0_0 - 5.0590476190476*G0_1_0_9_0_1 - 0.548571428571425*G0_1_0_10_1_0 - 0.548571428571425*G0_1_0_10_1_1 - 0.467301587301586*G0_1_0_11_1_0 + 0.863492063492058*G0_1_0_12_1_1 + 2.46349206349205*G0_1_0_13_1_0 - 0.0609523809523819*G0_1_0_13_1_1 + 2.92063492063491*G0_1_0_14_1_0 + 4.1142857142857*G0_1_0_14_1_1 + 1.95555555555554*G0_1_0_15_1_0 + 1.71682539682539*G0_1_0_15_1_1 - 2.92063492063491*G0_1_0_16_1_0 - 2.03174603174602*G0_1_0_16_1_1 + 0.706031746031741*G0_1_0_17_1_0 + 0.944761904761897*G0_1_0_17_1_1 + 0.309841269841269*G0_1_0_18_1_0 + 0.060952380952382*G0_1_0_18_1_1 - 4.4190476190476*G0_1_0_19_1_0 - 5.0590476190476*G0_1_0_19_1_1;
    A[709] = -A[154] - 0.761904761904759*G0_1_0_0_0_0 - 0.76190476190476*G0_1_0_0_0_1 - 0.355555555555553*G0_1_0_1_0_0 + 1.95555555555554*G0_1_0_2_0_1 + 1.6*G0_1_0_3_0_0 - 0.0888888888888847*G0_1_0_3_0_1 + 4.41904761904759*G0_1_0_4_0_0 + 3.79682539682538*G0_1_0_4_0_1 + 3.27619047619046*G0_1_0_5_0_0 + 2.98412698412697*G0_1_0_5_0_1 - 4.41904761904759*G0_1_0_6_0_0 - 4.17777777777776*G0_1_0_6_0_1 + 0.558730158730156*G0_1_0_7_0_0 + 0.850793650793643*G0_1_0_7_0_1 + 0.558730158730156*G0_1_0_8_0_0 + 0.0888888888888848*G0_1_0_8_0_1 - 4.87619047619046*G0_1_0_9_0_0 - 4.64761904761902*G0_1_0_9_0_1 - 0.761904761904759*G0_1_0_10_1_0 - 0.76190476190476*G0_1_0_10_1_1 - 0.355555555555553*G0_1_0_11_1_0 + 1.95555555555554*G0_1_0_12_1_1 + 1.6*G0_1_0_13_1_0 - 0.0888888888888847*G0_1_0_13_1_1 + 4.41904761904759*G0_1_0_14_1_0 + 3.79682539682538*G0_1_0_14_1_1 + 3.27619047619046*G0_1_0_15_1_0 + 2.98412698412697*G0_1_0_15_1_1 - 4.41904761904759*G0_1_0_16_1_0 - 4.17777777777776*G0_1_0_16_1_1 + 0.558730158730156*G0_1_0_17_1_0 + 0.850793650793643*G0_1_0_17_1_1 + 0.558730158730156*G0_1_0_18_1_0 + 0.0888888888888848*G0_1_0_18_1_1 - 4.87619047619046*G0_1_0_19_1_0 - 4.64761904761902*G0_1_0_19_1_1 - 0.181164021164021*G0_1_1_0_0_0 - 0.181164021164021*G0_1_1_0_0_1 - 1.67280423280423*G0_1_1_1_0_0 - 0.296296296296297*G0_1_1_2_0_1 - 0.165079365079364*G0_1_1_3_0_0 - 3.30666666666666*G0_1_1_3_0_1 + 0.292063492063489*G0_1_1_4_0_0 + 2.05714285714285*G0_1_1_4_0_1 + 0.698412698412695*G0_1_1_5_0_0 + 0.833015873015873*G0_1_1_5_0_1 - 0.292063492063488*G0_1_1_6_0_0 - 0.355555555555555*G0_1_1_6_0_1 + 0.302222222222217*G0_1_1_7_0_0 + 0.167619047619039*G0_1_1_7_0_1 + 1.55174603174604*G0_1_1_8_0_0 + 3.30666666666667*G0_1_1_8_0_1 - 0.533333333333331*G0_1_1_9_0_0 - 2.22476190476189*G0_1_1_9_0_1 - 0.181164021164021*G0_1_1_10_1_0 - 0.181164021164021*G0_1_1_10_1_1 - 1.67280423280423*G0_1_1_11_1_0 - 0.296296296296297*G0_1_1_12_1_1 - 0.165079365079364*G0_1_1_13_1_0 - 3.30666666666666*G0_1_1_13_1_1 + 0.292063492063489*G0_1_1_14_1_0 + 2.05714285714285*G0_1_1_14_1_1 + 0.698412698412695*G0_1_1_15_1_0 + 0.833015873015873*G0_1_1_15_1_1 - 0.292063492063488*G0_1_1_16_1_0 - 0.355555555555555*G0_1_1_16_1_1 + 0.302222222222217*G0_1_1_17_1_0 + 0.167619047619039*G0_1_1_17_1_1 + 1.55174603174604*G0_1_1_18_1_0 + 3.30666666666667*G0_1_1_18_1_1 - 0.533333333333331*G0_1_1_19_1_0 - 2.22476190476189*G0_1_1_19_1_1;
    A[799] = A[334];
    A[128] = -A[125] - 0.761904761904759*G0_0_1_0_0_0 - 0.76190476190476*G0_0_1_0_0_1 - 0.355555555555553*G0_0_1_1_0_0 + 1.95555555555554*G0_0_1_2_0_1 + 1.6*G0_0_1_3_0_0 - 0.0888888888888847*G0_0_1_3_0_1 + 4.4190476190476*G0_0_1_4_0_0 + 3.79682539682538*G0_0_1_4_0_1 + 3.27619047619046*G0_0_1_5_0_0 + 2.98412698412697*G0_0_1_5_0_1 - 4.41904761904759*G0_0_1_6_0_0 - 4.17777777777776*G0_0_1_6_0_1 + 0.558730158730156*G0_0_1_7_0_0 + 0.850793650793643*G0_0_1_7_0_1 + 0.558730158730156*G0_0_1_8_0_0 + 0.0888888888888848*G0_0_1_8_0_1 - 4.87619047619046*G0_0_1_9_0_0 - 4.64761904761902*G0_0_1_9_0_1 - 0.761904761904759*G0_0_1_10_1_0 - 0.76190476190476*G0_0_1_10_1_1 - 0.355555555555553*G0_0_1_11_1_0 + 1.95555555555554*G0_0_1_12_1_1 + 1.6*G0_0_1_13_1_0 - 0.0888888888888847*G0_0_1_13_1_1 + 4.4190476190476*G0_0_1_14_1_0 + 3.79682539682538*G0_0_1_14_1_1 + 3.27619047619046*G0_0_1_15_1_0 + 2.98412698412697*G0_0_1_15_1_1 - 4.41904761904759*G0_0_1_16_1_0 - 4.17777777777776*G0_0_1_16_1_1 + 0.558730158730156*G0_0_1_17_1_0 + 0.850793650793643*G0_0_1_17_1_1 + 0.558730158730156*G0_0_1_18_1_0 + 0.0888888888888848*G0_0_1_18_1_1 - 4.87619047619046*G0_0_1_19_1_0 - 4.64761904761902*G0_0_1_19_1_1 - 0.181164021164021*G0_1_1_0_0_0 - 0.181164021164021*G0_1_1_0_0_1 - 1.67280423280423*G0_1_1_1_0_0 - 0.296296296296297*G0_1_1_2_0_1 - 0.165079365079364*G0_1_1_3_0_0 - 3.30666666666666*G0_1_1_3_0_1 + 0.292063492063489*G0_1_1_4_0_0 + 2.05714285714285*G0_1_1_4_0_1 + 0.698412698412695*G0_1_1_5_0_0 + 0.833015873015873*G0_1_1_5_0_1 - 0.292063492063488*G0_1_1_6_0_0 - 0.355555555555555*G0_1_1_6_0_1 + 0.302222222222217*G0_1_1_7_0_0 + 0.167619047619039*G0_1_1_7_0_1 + 1.55174603174604*G0_1_1_8_0_0 + 3.30666666666667*G0_1_1_8_0_1 - 0.533333333333331*G0_1_1_9_0_0 - 2.22476190476189*G0_1_1_9_0_1 - 0.181164021164021*G0_1_1_10_1_0 - 0.181164021164021*G0_1_1_10_1_1 - 1.67280423280423*G0_1_1_11_1_0 - 0.296296296296297*G0_1_1_12_1_1 - 0.165079365079364*G0_1_1_13_1_0 - 3.30666666666666*G0_1_1_13_1_1 + 0.292063492063489*G0_1_1_14_1_0 + 2.05714285714285*G0_1_1_14_1_1 + 0.698412698412695*G0_1_1_15_1_0 + 0.833015873015873*G0_1_1_15_1_1 - 0.292063492063488*G0_1_1_16_1_0 - 0.355555555555555*G0_1_1_16_1_1 + 0.302222222222217*G0_1_1_17_1_0 + 0.167619047619039*G0_1_1_17_1_1 + 1.55174603174604*G0_1_1_18_1_0 + 3.30666666666667*G0_1_1_18_1_1 - 0.533333333333331*G0_1_1_19_1_0 - 2.22476190476189*G0_1_1_19_1_1;
    A[244] = A[709];
    A[123] = A[588];
    A[776] = A[805] + 0.467301587301585*G0_0_1_0_0_0 + 0.467301587301585*G0_0_1_0_0_1 + 0.863492063492055*G0_0_1_1_0_0 + 0.548571428571425*G0_0_1_2_0_1 + 0.888888888888883*G0_0_1_3_0_0 + 2.9206349206349*G0_0_1_3_0_1 - 0.238730158730159*G0_0_1_4_0_0 - 1.95555555555555*G0_0_1_4_0_1 - 0.24888888888889*G0_0_1_5_0_0 - 0.309841269841266*G0_0_1_5_0_1 + 0.238730158730159*G0_0_1_6_0_0 - 0.706031746031744*G0_0_1_6_0_1 - 2.52444444444444*G0_0_1_7_0_0 - 2.46349206349206*G0_0_1_7_0_1 + 1.1936507936508*G0_0_1_8_0_0 - 2.9206349206349*G0_0_1_8_0_1 - 0.639999999999994*G0_0_1_9_0_0 + 4.41904761904761*G0_0_1_9_0_1 + 0.467301587301585*G0_0_1_10_1_0 + 0.467301587301585*G0_0_1_10_1_1 + 0.863492063492055*G0_0_1_11_1_0 + 0.548571428571425*G0_0_1_12_1_1 + 0.888888888888883*G0_0_1_13_1_0 + 2.9206349206349*G0_0_1_13_1_1 - 0.238730158730159*G0_0_1_14_1_0 - 1.95555555555555*G0_0_1_14_1_1 - 0.24888888888889*G0_0_1_15_1_0 - 0.309841269841266*G0_0_1_15_1_1 + 0.238730158730159*G0_0_1_16_1_0 - 0.706031746031744*G0_0_1_16_1_1 - 2.52444444444444*G0_0_1_17_1_0 - 2.46349206349206*G0_0_1_17_1_1 + 1.1936507936508*G0_0_1_18_1_0 - 2.9206349206349*G0_0_1_18_1_1 - 0.639999999999994*G0_0_1_19_1_0 + 4.41904761904761*G0_0_1_19_1_1 - 0.467301587301585*G0_1_0_0_0_0 - 0.467301587301584*G0_1_0_0_0_1 - 0.863492063492056*G0_1_0_1_0_0 - 0.548571428571425*G0_1_0_2_0_1 - 0.888888888888883*G0_1_0_3_0_0 - 2.9206349206349*G0_1_0_3_0_1 + 0.238730158730159*G0_1_0_4_0_0 + 1.95555555555555*G0_1_0_4_0_1 + 0.24888888888889*G0_1_0_5_0_0 + 0.309841269841266*G0_1_0_5_0_1 - 0.238730158730159*G0_1_0_6_0_0 + 0.706031746031744*G0_1_0_6_0_1 + 2.52444444444444*G0_1_0_7_0_0 + 2.46349206349206*G0_1_0_7_0_1 - 1.1936507936508*G0_1_0_8_0_0 + 2.9206349206349*G0_1_0_8_0_1 + 0.639999999999994*G0_1_0_9_0_0 - 4.41904761904761*G0_1_0_9_0_1 - 0.467301587301585*G0_1_0_10_1_0 - 0.467301587301584*G0_1_0_10_1_1 - 0.863492063492056*G0_1_0_11_1_0 - 0.548571428571425*G0_1_0_12_1_1 - 0.888888888888883*G0_1_0_13_1_0 - 2.9206349206349*G0_1_0_13_1_1 + 0.238730158730159*G0_1_0_14_1_0 + 1.95555555555555*G0_1_0_14_1_1 + 0.24888888888889*G0_1_0_15_1_0 + 0.309841269841266*G0_1_0_15_1_1 - 0.238730158730159*G0_1_0_16_1_0 + 0.706031746031744*G0_1_0_16_1_1 + 2.52444444444444*G0_1_0_17_1_0 + 2.46349206349206*G0_1_0_17_1_1 - 1.1936507936508*G0_1_0_18_1_0 + 2.9206349206349*G0_1_0_18_1_1 + 0.639999999999994*G0_1_0_19_1_0 - 4.41904761904761*G0_1_0_19_1_1;
    A[303] = -A[776] + 1.31724867724867*G0_0_0_0_0_0 + 1.31724867724867*G0_0_0_0_0_1 - 2.25185185185184*G0_0_0_1_0_0 - 0.580740740740739*G0_0_0_2_0_1 - 0.304761904761904*G0_0_0_3_0_0 - 4.12698412698411*G0_0_0_3_0_1 + 0.426666666666666*G0_0_0_4_0_0 + 2.57777777777777*G0_0_0_4_0_1 + 2.22476190476189*G0_0_0_5_0_0 - 0.993015873015873*G0_0_0_5_0_1 - 0.426666666666666*G0_0_0_6_0_0 + 0.256507936507939*G0_0_0_6_0_1 - 1.45269841269841*G0_0_0_7_0_0 + 1.76507936507936*G0_0_0_7_0_1 + 2.38730158730158*G0_0_0_8_0_0 + 4.12698412698411*G0_0_0_8_0_1 - 1.91999999999999*G0_0_0_9_0_0 - 4.34285714285713*G0_0_0_9_0_1 + 1.31724867724867*G0_0_0_10_1_0 + 1.31724867724867*G0_0_0_10_1_1 - 2.25185185185184*G0_0_0_11_1_0 - 0.580740740740739*G0_0_0_12_1_1 - 0.304761904761904*G0_0_0_13_1_0 - 4.12698412698411*G0_0_0_13_1_1 + 0.426666666666666*G0_0_0_14_1_0 + 2.57777777777777*G0_0_0_14_1_1 + 2.22476190476189*G0_0_0_15_1_0 - 0.993015873015873*G0_0_0_15_1_1 - 0.426666666666666*G0_0_0_16_1_0 + 0.256507936507939*G0_0_0_16_1_1 - 1.45269841269841*G0_0_0_17_1_0 + 1.76507936507936*G0_0_0_17_1_1 + 2.38730158730158*G0_0_0_18_1_0 + 4.12698412698411*G0_0_0_18_1_1 - 1.91999999999999*G0_0_0_19_1_0 - 4.34285714285713*G0_0_0_19_1_1 - 0.355555555555553*G0_1_0_0_0_0 - 0.355555555555553*G0_1_0_0_0_1 - 1.95555555555555*G0_1_0_1_0_0 - 0.761904761904758*G0_1_0_2_0_1 - 0.241269841269842*G0_1_0_3_0_0 - 4.4190476190476*G0_1_0_3_0_1 + 0.292063492063494*G0_1_0_4_0_0 + 3.27619047619046*G0_1_0_4_0_1 + 0.469841269841269*G0_1_0_5_0_0 + 0.558730158730155*G0_1_0_5_0_1 - 0.292063492063494*G0_1_0_6_0_0 + 0.558730158730156*G0_1_0_6_0_1 + 1.68888888888888*G0_1_0_7_0_0 + 1.59999999999999*G0_1_0_7_0_1 + 0.622222222222219*G0_1_0_8_0_0 + 4.4190476190476*G0_1_0_8_0_1 - 0.228571428571426*G0_1_0_9_0_0 - 4.87619047619046*G0_1_0_9_0_1 - 0.355555555555553*G0_1_0_10_1_0 - 0.355555555555553*G0_1_0_10_1_1 - 1.95555555555555*G0_1_0_11_1_0 - 0.761904761904758*G0_1_0_12_1_1 - 0.241269841269842*G0_1_0_13_1_0 - 4.4190476190476*G0_1_0_13_1_1 + 0.292063492063494*G0_1_0_14_1_0 + 3.27619047619046*G0_1_0_14_1_1 + 0.469841269841269*G0_1_0_15_1_0 + 0.558730158730155*G0_1_0_15_1_1 - 0.292063492063494*G0_1_0_16_1_0 + 0.558730158730156*G0_1_0_16_1_1 + 1.68888888888888*G0_1_0_17_1_0 + 1.59999999999999*G0_1_0_17_1_1 + 0.622222222222219*G0_1_0_18_1_0 + 4.4190476190476*G0_1_0_18_1_1 - 0.228571428571426*G0_1_0_19_1_0 - 4.87619047619046*G0_1_0_19_1_1;
    A[619] = A[154];
    A[565] = -A[805] + 1.31724867724867*G0_0_0_0_0_0 + 1.31724867724867*G0_0_0_0_0_1 - 2.25185185185184*G0_0_0_1_0_0 - 0.580740740740739*G0_0_0_2_0_1 - 0.304761904761904*G0_0_0_3_0_0 - 4.12698412698411*G0_0_0_3_0_1 + 0.426666666666666*G0_0_0_4_0_0 + 2.57777777777777*G0_0_0_4_0_1 + 2.22476190476189*G0_0_0_5_0_0 - 0.993015873015873*G0_0_0_5_0_1 - 0.426666666666666*G0_0_0_6_0_0 + 0.256507936507939*G0_0_0_6_0_1 - 1.45269841269841*G0_0_0_7_0_0 + 1.76507936507936*G0_0_0_7_0_1 + 2.38730158730158*G0_0_0_8_0_0 + 4.12698412698411*G0_0_0_8_0_1 - 1.91999999999999*G0_0_0_9_0_0 - 4.34285714285713*G0_0_0_9_0_1 + 1.31724867724867*G0_0_0_10_1_0 + 1.31724867724867*G0_0_0_10_1_1 - 2.25185185185184*G0_0_0_11_1_0 - 0.580740740740739*G0_0_0_12_1_1 - 0.304761904761904*G0_0_0_13_1_0 - 4.12698412698411*G0_0_0_13_1_1 + 0.426666666666666*G0_0_0_14_1_0 + 2.57777777777777*G0_0_0_14_1_1 + 2.22476190476189*G0_0_0_15_1_0 - 0.993015873015873*G0_0_0_15_1_1 - 0.426666666666666*G0_0_0_16_1_0 + 0.256507936507939*G0_0_0_16_1_1 - 1.45269841269841*G0_0_0_17_1_0 + 1.76507936507936*G0_0_0_17_1_1 + 2.38730158730158*G0_0_0_18_1_0 + 4.12698412698411*G0_0_0_18_1_1 - 1.91999999999999*G0_0_0_19_1_0 - 4.34285714285713*G0_0_0_19_1_1 - 0.355555555555553*G0_0_1_0_0_0 - 0.355555555555553*G0_0_1_0_0_1 - 1.95555555555555*G0_0_1_1_0_0 - 0.761904761904758*G0_0_1_2_0_1 - 0.241269841269842*G0_0_1_3_0_0 - 4.4190476190476*G0_0_1_3_0_1 + 0.292063492063494*G0_0_1_4_0_0 + 3.27619047619046*G0_0_1_4_0_1 + 0.469841269841269*G0_0_1_5_0_0 + 0.558730158730155*G0_0_1_5_0_1 - 0.292063492063494*G0_0_1_6_0_0 + 0.558730158730156*G0_0_1_6_0_1 + 1.68888888888888*G0_0_1_7_0_0 + 1.59999999999999*G0_0_1_7_0_1 + 0.622222222222219*G0_0_1_8_0_0 + 4.4190476190476*G0_0_1_8_0_1 - 0.228571428571426*G0_0_1_9_0_0 - 4.87619047619046*G0_0_1_9_0_1 - 0.355555555555553*G0_0_1_10_1_0 - 0.355555555555553*G0_0_1_10_1_1 - 1.95555555555555*G0_0_1_11_1_0 - 0.761904761904758*G0_0_1_12_1_1 - 0.241269841269842*G0_0_1_13_1_0 - 4.4190476190476*G0_0_1_13_1_1 + 0.292063492063494*G0_0_1_14_1_0 + 3.27619047619046*G0_0_1_14_1_1 + 0.469841269841269*G0_0_1_15_1_0 + 0.558730158730155*G0_0_1_15_1_1 - 0.292063492063494*G0_0_1_16_1_0 + 0.558730158730156*G0_0_1_16_1_1 + 1.68888888888888*G0_0_1_17_1_0 + 1.59999999999999*G0_0_1_17_1_1 + 0.622222222222219*G0_0_1_18_1_0 + 4.4190476190476*G0_0_1_18_1_1 - 0.228571428571426*G0_0_1_19_1_0 - 4.87619047619046*G0_0_1_19_1_1;
    A[862] = A[397];
    A[157] = A[215] - 0.111746031746032*G0_0_1_0_0_0 - 0.111746031746032*G0_0_1_0_0_1 + 0.213333333333335*G0_0_1_1_0_0 + 1.09206349206349*G0_0_1_2_0_1 - 1.32063492063491*G0_0_1_3_0_0 - 0.053333333333328*G0_0_1_3_0_1 + 1.49841269841269*G0_0_1_4_0_0 - 0.647619047619044*G0_0_1_4_0_1 + 0.863492063492059*G0_0_1_5_0_0 + 0.835555555555551*G0_0_1_5_0_1 - 1.49841269841269*G0_0_1_6_0_0 - 1.81587301587301*G0_0_1_6_0_1 - 0.248888888888886*G0_0_1_7_0_0 - 0.220952380952379*G0_0_1_7_0_1 + 0.147301587301583*G0_0_1_8_0_0 + 0.0533333333333281*G0_0_1_8_0_1 + 0.457142857142853*G0_0_1_9_0_0 + 0.868571428571423*G0_0_1_9_0_1 - 0.111746031746032*G0_0_1_10_1_0 - 0.111746031746032*G0_0_1_10_1_1 + 0.213333333333335*G0_0_1_11_1_0 + 1.09206349206349*G0_0_1_12_1_1 - 1.32063492063491*G0_0_1_13_1_0 - 0.053333333333328*G0_0_1_13_1_1 + 1.49841269841269*G0_0_1_14_1_0 - 0.647619047619044*G0_0_1_14_1_1 + 0.863492063492059*G0_0_1_15_1_0 + 0.835555555555551*G0_0_1_15_1_1 - 1.49841269841269*G0_0_1_16_1_0 - 1.81587301587301*G0_0_1_16_1_1 - 0.248888888888886*G0_0_1_17_1_0 - 0.220952380952379*G0_0_1_17_1_1 + 0.147301587301583*G0_0_1_18_1_0 + 0.0533333333333281*G0_0_1_18_1_1 + 0.457142857142853*G0_0_1_19_1_0 + 0.868571428571423*G0_0_1_19_1_1 + 0.111746031746032*G0_1_0_0_0_0 + 0.111746031746032*G0_1_0_0_0_1 - 0.213333333333335*G0_1_0_1_0_0 - 1.09206349206349*G0_1_0_2_0_1 + 1.32063492063491*G0_1_0_3_0_0 + 0.053333333333328*G0_1_0_3_0_1 - 1.49841269841269*G0_1_0_4_0_0 + 0.647619047619044*G0_1_0_4_0_1 - 0.863492063492059*G0_1_0_5_0_0 - 0.835555555555552*G0_1_0_5_0_1 + 1.49841269841269*G0_1_0_6_0_0 + 1.81587301587301*G0_1_0_6_0_1 + 0.248888888888886*G0_1_0_7_0_0 + 0.220952380952379*G0_1_0_7_0_1 - 0.147301587301583*G0_1_0_8_0_0 - 0.0533333333333282*G0_1_0_8_0_1 - 0.457142857142853*G0_1_0_9_0_0 - 0.868571428571423*G0_1_0_9_0_1 + 0.111746031746032*G0_1_0_10_1_0 + 0.111746031746032*G0_1_0_10_1_1 - 0.213333333333335*G0_1_0_11_1_0 - 1.09206349206349*G0_1_0_12_1_1 + 1.32063492063491*G0_1_0_13_1_0 + 0.053333333333328*G0_1_0_13_1_1 - 1.49841269841269*G0_1_0_14_1_0 + 0.647619047619044*G0_1_0_14_1_1 - 0.863492063492059*G0_1_0_15_1_0 - 0.835555555555552*G0_1_0_15_1_1 + 1.49841269841269*G0_1_0_16_1_0 + 1.81587301587301*G0_1_0_16_1_1 + 0.248888888888886*G0_1_0_17_1_0 + 0.220952380952379*G0_1_0_17_1_1 - 0.147301587301583*G0_1_0_18_1_0 - 0.0533333333333282*G0_1_0_18_1_1 - 0.457142857142853*G0_1_0_19_1_0 - 0.868571428571423*G0_1_0_19_1_1;
    A[100] = A[565];
    A[133] = A[394] - 0.579047619047616*G0_0_1_0_0_0 - 0.579047619047616*G0_0_1_0_0_1 + 0.60952380952381*G0_0_1_1_0_0 - 0.639999999999993*G0_0_1_2_0_1 + 2.05714285714285*G0_0_1_3_0_0 + 1.44761904761905*G0_0_1_3_0_1 - 0.868571428571417*G0_0_1_4_0_0 + 0.990476190476184*G0_0_1_4_0_1 + 0.777142857142859*G0_0_1_5_0_0 + 0.746666666666664*G0_0_1_5_0_1 + 0.868571428571418*G0_0_1_6_0_0 + 0.472380952380943*G0_0_1_6_0_1 + 2.17904761904761*G0_0_1_7_0_0 + 2.2095238095238*G0_0_1_7_0_1 - 2.2095238095238*G0_0_1_8_0_0 - 1.44761904761905*G0_0_1_8_0_1 - 2.83428571428571*G0_0_1_9_0_0 - 3.19999999999998*G0_0_1_9_0_1 - 0.579047619047616*G0_0_1_10_1_0 - 0.579047619047616*G0_0_1_10_1_1 + 0.60952380952381*G0_0_1_11_1_0 - 0.639999999999993*G0_0_1_12_1_1 + 2.05714285714285*G0_0_1_13_1_0 + 1.44761904761905*G0_0_1_13_1_1 - 0.868571428571417*G0_0_1_14_1_0 + 0.990476190476184*G0_0_1_14_1_1 + 0.777142857142859*G0_0_1_15_1_0 + 0.746666666666664*G0_0_1_15_1_1 + 0.868571428571418*G0_0_1_16_1_0 + 0.472380952380943*G0_0_1_16_1_1 + 2.17904761904761*G0_0_1_17_1_0 + 2.2095238095238*G0_0_1_17_1_1 - 2.2095238095238*G0_0_1_18_1_0 - 1.44761904761905*G0_0_1_18_1_1 - 2.83428571428571*G0_0_1_19_1_0 - 3.19999999999998*G0_0_1_19_1_1 + 0.579047619047616*G0_1_0_0_0_0 + 0.579047619047616*G0_1_0_0_0_1 - 0.60952380952381*G0_1_0_1_0_0 + 0.639999999999992*G0_1_0_2_0_1 - 2.05714285714285*G0_1_0_3_0_0 - 1.44761904761905*G0_1_0_3_0_1 + 0.868571428571418*G0_1_0_4_0_0 - 0.990476190476183*G0_1_0_4_0_1 - 0.777142857142859*G0_1_0_5_0_0 - 0.746666666666664*G0_1_0_5_0_1 - 0.868571428571418*G0_1_0_6_0_0 - 0.472380952380943*G0_1_0_6_0_1 - 2.1790476190476*G0_1_0_7_0_0 - 2.2095238095238*G0_1_0_7_0_1 + 2.2095238095238*G0_1_0_8_0_0 + 1.44761904761905*G0_1_0_8_0_1 + 2.8342857142857*G0_1_0_9_0_0 + 3.19999999999998*G0_1_0_9_0_1 + 0.579047619047616*G0_1_0_10_1_0 + 0.579047619047616*G0_1_0_10_1_1 - 0.60952380952381*G0_1_0_11_1_0 + 0.639999999999992*G0_1_0_12_1_1 - 2.05714285714285*G0_1_0_13_1_0 - 1.44761904761905*G0_1_0_13_1_1 + 0.868571428571418*G0_1_0_14_1_0 - 0.990476190476183*G0_1_0_14_1_1 - 0.777142857142859*G0_1_0_15_1_0 - 0.746666666666664*G0_1_0_15_1_1 - 0.868571428571418*G0_1_0_16_1_0 - 0.472380952380943*G0_1_0_16_1_1 - 2.1790476190476*G0_1_0_17_1_0 - 2.2095238095238*G0_1_0_17_1_1 + 2.2095238095238*G0_1_0_18_1_0 + 1.44761904761905*G0_1_0_18_1_1 + 2.8342857142857*G0_1_0_19_1_0 + 3.19999999999998*G0_1_0_19_1_1;
    A[622] = A[157];
    A[542] = 0.0;
    A[664] = 0.0;
    A[691] = 0.0;
    A[266] = 0.0;
    A[337] = A[802];
    A[297] = 0.0;
    A[749] = A[429] + 0.406349206349212*G0_0_1_0_0_0 + 0.406349206349212*G0_0_1_0_0_1 - 0.243809523809523*G0_0_1_1_0_0 - 0.0203174603174651*G0_0_1_2_0_1 + 0.264126984126981*G0_0_1_3_0_0 + 0.060952380952381*G0_0_1_3_0_1 - 0.223492063492069*G0_0_1_4_0_0 - 0.243809523809526*G0_0_1_4_0_1 + 0.22349206349206*G0_0_1_5_0_0 - 0.284444444444459*G0_0_1_5_0_1 + 0.223492063492069*G0_0_1_6_0_0 - 0.101587301587288*G0_0_1_6_0_1 - 1.23936507936508*G0_0_1_7_0_0 - 0.731428571428563*G0_0_1_7_0_1 + 1.07682539682539*G0_0_1_8_0_0 - 0.0609523809523808*G0_0_1_8_0_1 - 0.487619047619041*G0_0_1_9_0_0 + 0.975238095238089*G0_0_1_9_0_1 + 0.406349206349212*G0_0_1_10_1_0 + 0.406349206349212*G0_0_1_10_1_1 - 0.243809523809523*G0_0_1_11_1_0 - 0.0203174603174651*G0_0_1_12_1_1 + 0.264126984126981*G0_0_1_13_1_0 + 0.060952380952381*G0_0_1_13_1_1 - 0.223492063492069*G0_0_1_14_1_0 - 0.243809523809526*G0_0_1_14_1_1 + 0.22349206349206*G0_0_1_15_1_0 - 0.284444444444459*G0_0_1_15_1_1 + 0.223492063492069*G0_0_1_16_1_0 - 0.101587301587288*G0_0_1_16_1_1 - 1.23936507936508*G0_0_1_17_1_0 - 0.731428571428563*G0_0_1_17_1_1 + 1.07682539682539*G0_0_1_18_1_0 - 0.0609523809523808*G0_0_1_18_1_1 - 0.487619047619041*G0_0_1_19_1_0 + 0.975238095238089*G0_0_1_19_1_1 - 0.406349206349213*G0_1_0_0_0_0 - 0.406349206349212*G0_1_0_0_0_1 + 0.243809523809523*G0_1_0_1_0_0 + 0.0203174603174651*G0_1_0_2_0_1 - 0.264126984126981*G0_1_0_3_0_0 - 0.0609523809523808*G0_1_0_3_0_1 + 0.223492063492069*G0_1_0_4_0_0 + 0.243809523809526*G0_1_0_4_0_1 - 0.22349206349206*G0_1_0_5_0_0 + 0.284444444444459*G0_1_0_5_0_1 - 0.223492063492069*G0_1_0_6_0_0 + 0.101587301587288*G0_1_0_6_0_1 + 1.23936507936508*G0_1_0_7_0_0 + 0.731428571428563*G0_1_0_7_0_1 - 1.07682539682539*G0_1_0_8_0_0 + 0.0609523809523806*G0_1_0_8_0_1 + 0.487619047619041*G0_1_0_9_0_0 - 0.975238095238089*G0_1_0_9_0_1 - 0.406349206349213*G0_1_0_10_1_0 - 0.406349206349212*G0_1_0_10_1_1 + 0.243809523809523*G0_1_0_11_1_0 + 0.0203174603174651*G0_1_0_12_1_1 - 0.264126984126981*G0_1_0_13_1_0 - 0.0609523809523808*G0_1_0_13_1_1 + 0.223492063492069*G0_1_0_14_1_0 + 0.243809523809526*G0_1_0_14_1_1 - 0.22349206349206*G0_1_0_15_1_0 + 0.284444444444459*G0_1_0_15_1_1 - 0.223492063492069*G0_1_0_16_1_0 + 0.101587301587288*G0_1_0_16_1_1 + 1.23936507936508*G0_1_0_17_1_0 + 0.731428571428563*G0_1_0_17_1_1 - 1.07682539682539*G0_1_0_18_1_0 + 0.0609523809523806*G0_1_0_18_1_1 + 0.487619047619041*G0_1_0_19_1_0 - 0.975238095238089*G0_1_0_19_1_1;
    A[436] = 0.0;
    A[360] = A[887] + 0.973544973544967*G0_0_0_0_0_0 + 0.973544973544967*G0_0_0_0_0_1 - 0.125291005291004*G0_0_0_1_0_0 - 0.023703703703703*G0_0_0_2_0_1 + 0.678095238095234*G0_0_0_3_0_0 + 0.372063492063489*G0_0_0_3_0_1 + 0.441904761904761*G0_0_0_4_0_0 + 0.646349206349203*G0_0_0_4_0_1 + 0.799999999999994*G0_0_0_5_0_0 - 1.26349206349206*G0_0_0_5_0_1 - 0.441904761904761*G0_0_0_6_0_0 + 0.313650793650792*G0_0_0_6_0_1 - 1.49841269841269*G0_0_0_7_0_0 + 0.565079365079361*G0_0_0_7_0_1 + 0.650158730158725*G0_0_0_8_0_0 - 0.37206349206349*G0_0_0_8_0_1 - 1.47809523809523*G0_0_0_9_0_0 - 1.21142857142856*G0_0_0_9_0_1 + 0.973544973544967*G0_0_0_10_1_0 + 0.973544973544967*G0_0_0_10_1_1 - 0.125291005291004*G0_0_0_11_1_0 - 0.023703703703703*G0_0_0_12_1_1 + 0.678095238095234*G0_0_0_13_1_0 + 0.372063492063489*G0_0_0_13_1_1 + 0.441904761904761*G0_0_0_14_1_0 + 0.646349206349203*G0_0_0_14_1_1 + 0.799999999999994*G0_0_0_15_1_0 - 1.26349206349206*G0_0_0_15_1_1 - 0.441904761904761*G0_0_0_16_1_0 + 0.313650793650792*G0_0_0_16_1_1 - 1.49841269841269*G0_0_0_17_1_0 + 0.565079365079361*G0_0_0_17_1_1 + 0.650158730158725*G0_0_0_18_1_0 - 0.37206349206349*G0_0_0_18_1_1 - 1.47809523809523*G0_0_0_19_1_0 - 1.21142857142856*G0_0_0_19_1_1 + 0.871957671957666*G0_0_1_0_0_0 + 0.871957671957666*G0_0_1_0_0_1 - 0.226878306878304*G0_0_1_1_0_0 - 0.023703703703698*G0_0_1_2_0_1 + 0.944761904761894*G0_0_1_3_0_0 + 0.302222222222219*G0_0_1_3_0_1 + 0.441904761904771*G0_0_1_4_0_0 + 0.881269841269839*G0_0_1_4_0_1 + 1.06666666666666*G0_0_1_5_0_0 - 0.926984126984119*G0_0_1_5_0_1 - 0.44190476190477*G0_0_1_6_0_0 + 0.0787301587301522*G0_0_1_6_0_1 - 1.39682539682539*G0_0_1_7_0_0 + 0.596825396825393*G0_0_1_7_0_1 + 0.751746031746025*G0_0_1_8_0_0 - 0.302222222222219*G0_0_1_8_0_1 - 2.01142857142856*G0_0_1_9_0_0 - 1.47809523809523*G0_0_1_9_0_1 + 0.871957671957666*G0_0_1_10_1_0 + 0.871957671957666*G0_0_1_10_1_1 - 0.226878306878304*G0_0_1_11_1_0 - 0.023703703703698*G0_0_1_12_1_1 + 0.944761904761894*G0_0_1_13_1_0 + 0.302222222222219*G0_0_1_13_1_1 + 0.441904761904771*G0_0_1_14_1_0 + 0.881269841269839*G0_0_1_14_1_1 + 1.06666666666666*G0_0_1_15_1_0 - 0.926984126984119*G0_0_1_15_1_1 - 0.44190476190477*G0_0_1_16_1_0 + 0.0787301587301522*G0_0_1_16_1_1 - 1.39682539682539*G0_0_1_17_1_0 + 0.596825396825393*G0_0_1_17_1_1 + 0.751746031746025*G0_0_1_18_1_0 - 0.302222222222219*G0_0_1_18_1_1 - 2.01142857142856*G0_0_1_19_1_0 - 1.47809523809523*G0_0_1_19_1_1 + 0.973544973544969*G0_1_0_0_0_0 + 0.973544973544969*G0_1_0_0_0_1 - 0.0237037037037036*G0_1_0_1_0_0 - 0.125291005291004*G0_1_0_2_0_1 + 0.646349206349203*G0_1_0_3_0_0 + 0.441904761904759*G0_1_0_3_0_1 + 0.372063492063491*G0_1_0_4_0_0 + 0.678095238095236*G0_1_0_4_0_1 + 0.565079365079362*G0_1_0_5_0_0 - 1.49841269841269*G0_1_0_5_0_1 - 0.372063492063491*G0_1_0_6_0_0 + 0.650158730158728*G0_1_0_6_0_1 - 1.26349206349206*G0_1_0_7_0_0 + 0.799999999999996*G0_1_0_7_0_1 + 0.313650793650792*G0_1_0_8_0_0 - 0.441904761904759*G0_1_0_8_0_1 - 1.21142857142856*G0_1_0_9_0_0 - 1.47809523809523*G0_1_0_9_0_1 + 0.973544973544969*G0_1_0_10_1_0 + 0.973544973544969*G0_1_0_10_1_1 - 0.0237037037037036*G0_1_0_11_1_0 - 0.125291005291004*G0_1_0_12_1_1 + 0.646349206349203*G0_1_0_13_1_0 + 0.441904761904759*G0_1_0_13_1_1 + 0.372063492063491*G0_1_0_14_1_0 + 0.678095238095236*G0_1_0_14_1_1 + 0.565079365079362*G0_1_0_15_1_0 - 1.49841269841269*G0_1_0_15_1_1 - 0.372063492063491*G0_1_0_16_1_0 + 0.650158730158728*G0_1_0_16_1_1 - 1.26349206349206*G0_1_0_17_1_0 + 0.799999999999996*G0_1_0_17_1_1 + 0.313650793650792*G0_1_0_18_1_0 - 0.441904761904759*G0_1_0_18_1_1 - 1.21142857142856*G0_1_0_19_1_0 - 1.47809523809523*G0_1_0_19_1_1 + 0.848253968253964*G0_1_1_0_0_0 + 0.848253968253965*G0_1_1_0_0_1 + 0.848253968253965*G0_1_1_2_0_1 - 0.10920634920635*G0_1_1_3_0_0 + 2.43555555555555*G0_1_1_4_0_0 + 1.47809523809523*G0_1_1_4_0_1 + 1.58730158730158*G0_1_1_5_0_0 - 0.848253968253964*G0_1_1_5_0_1 - 2.43555555555555*G0_1_1_6_0_0 - 0.848253968253965*G0_1_1_6_0_1 - 0.957460317460314*G0_1_1_7_0_0 + 1.47809523809523*G0_1_1_7_0_1 + 0.109206349206348*G0_1_1_8_0_0 - 1.47809523809523*G0_1_1_9_0_0 - 2.95619047619046*G0_1_1_9_0_1 + 0.848253968253964*G0_1_1_10_1_0 + 0.848253968253965*G0_1_1_10_1_1 + 0.848253968253965*G0_1_1_12_1_1 - 0.10920634920635*G0_1_1_13_1_0 + 2.43555555555555*G0_1_1_14_1_0 + 1.47809523809523*G0_1_1_14_1_1 + 1.58730158730158*G0_1_1_15_1_0 - 0.848253968253964*G0_1_1_15_1_1 - 2.43555555555555*G0_1_1_16_1_0 - 0.848253968253965*G0_1_1_16_1_1 - 0.957460317460314*G0_1_1_17_1_0 + 1.47809523809523*G0_1_1_17_1_1 + 0.109206349206348*G0_1_1_18_1_0 - 1.47809523809523*G0_1_1_19_1_0 - 2.95619047619046*G0_1_1_19_1_1;
    A[316] = 0.0;
    A[774] = A[309];
    A[471] = A[645] + 2.80423280423279*G0_0_1_0_0_0 + 2.80423280423279*G0_0_1_0_0_1 - 0.423280423280421*G0_0_1_1_0_0 - 0.423280423280421*G0_0_1_2_0_1 + 0.14920634920635*G0_0_1_3_0_0 + 0.149206349206347*G0_0_1_3_0_1 + 0.14920634920635*G0_0_1_4_0_0 + 0.149206349206351*G0_0_1_4_0_1 + 0.860317460317457*G0_0_1_5_0_0 - 4.25714285714284*G0_0_1_5_0_1 - 0.14920634920635*G0_0_1_6_0_0 + 1.87619047619047*G0_0_1_6_0_1 - 4.25714285714283*G0_0_1_7_0_0 + 0.860317460317456*G0_0_1_7_0_1 + 1.87619047619046*G0_0_1_8_0_0 - 0.149206349206347*G0_0_1_8_0_1 - 1.00952380952381*G0_0_1_9_0_0 - 1.00952380952381*G0_0_1_9_0_1 + 2.80423280423279*G0_0_1_10_1_0 + 2.80423280423279*G0_0_1_10_1_1 - 0.423280423280421*G0_0_1_11_1_0 - 0.423280423280421*G0_0_1_12_1_1 + 0.14920634920635*G0_0_1_13_1_0 + 0.149206349206347*G0_0_1_13_1_1 + 0.14920634920635*G0_0_1_14_1_0 + 0.149206349206351*G0_0_1_14_1_1 + 0.860317460317457*G0_0_1_15_1_0 - 4.25714285714284*G0_0_1_15_1_1 - 0.14920634920635*G0_0_1_16_1_0 + 1.87619047619047*G0_0_1_16_1_1 - 4.25714285714283*G0_0_1_17_1_0 + 0.860317460317456*G0_0_1_17_1_1 + 1.87619047619046*G0_0_1_18_1_0 - 0.149206349206347*G0_0_1_18_1_1 - 1.00952380952381*G0_0_1_19_1_0 - 1.00952380952381*G0_0_1_19_1_1 - 2.80423280423279*G0_1_0_0_0_0 - 2.80423280423279*G0_1_0_0_0_1 + 0.423280423280421*G0_1_0_1_0_0 + 0.423280423280421*G0_1_0_2_0_1 - 0.14920634920635*G0_1_0_3_0_0 - 0.149206349206347*G0_1_0_3_0_1 - 0.14920634920635*G0_1_0_4_0_0 - 0.149206349206351*G0_1_0_4_0_1 - 0.860317460317457*G0_1_0_5_0_0 + 4.25714285714284*G0_1_0_5_0_1 + 0.14920634920635*G0_1_0_6_0_0 - 1.87619047619047*G0_1_0_6_0_1 + 4.25714285714283*G0_1_0_7_0_0 - 0.860317460317456*G0_1_0_7_0_1 - 1.87619047619046*G0_1_0_8_0_0 + 0.149206349206347*G0_1_0_8_0_1 + 1.00952380952381*G0_1_0_9_0_0 + 1.00952380952381*G0_1_0_9_0_1 - 2.80423280423279*G0_1_0_10_1_0 - 2.80423280423279*G0_1_0_10_1_1 + 0.423280423280421*G0_1_0_11_1_0 + 0.423280423280421*G0_1_0_12_1_1 - 0.14920634920635*G0_1_0_13_1_0 - 0.149206349206347*G0_1_0_13_1_1 - 0.14920634920635*G0_1_0_14_1_0 - 0.149206349206351*G0_1_0_14_1_1 - 0.860317460317457*G0_1_0_15_1_0 + 4.25714285714284*G0_1_0_15_1_1 + 0.14920634920635*G0_1_0_16_1_0 - 1.87619047619047*G0_1_0_16_1_1 + 4.25714285714283*G0_1_0_17_1_0 - 0.860317460317456*G0_1_0_17_1_1 - 1.87619047619046*G0_1_0_18_1_0 + 0.149206349206347*G0_1_0_18_1_1 + 1.00952380952381*G0_1_0_19_1_0 + 1.00952380952381*G0_1_0_19_1_1;
    A[395] = A[860];
    A[359] = 0.0;
    A[6] = A[471];
    A[723] = 0.0;
    A[37] = A[502];
    A[752] = 0.0;
    A[865] = A[224] - 0.396190476190475*G0_0_0_0_0_0 - 0.396190476190476*G0_0_0_0_0_1 - 0.761904761904753*G0_0_0_1_0_0 + 2.56*G0_0_0_2_0_1 - 5.21142857142855*G0_0_0_3_0_0 - 4.49523809523807*G0_0_0_3_0_1 + 7.58857142857142*G0_0_0_4_0_0 + 3.55047619047618*G0_0_0_4_0_1 - 5.57714285714283*G0_0_0_5_0_0 - 2.36190476190475*G0_0_0_5_0_1 - 7.58857142857142*G0_0_0_6_0_0 + 0.198095238095226*G0_0_0_6_0_1 - 0.243809523809518*G0_0_0_7_0_0 - 3.4590476190476*G0_0_0_7_0_1 + 1.40190476190474*G0_0_0_8_0_0 + 4.49523809523807*G0_0_0_8_0_1 + 10.7885714285714*G0_0_0_9_0_0 - 0.0914285714285885*G0_0_0_9_0_1 - 0.396190476190475*G0_0_0_10_1_0 - 0.396190476190476*G0_0_0_10_1_1 - 0.761904761904753*G0_0_0_11_1_0 + 2.56*G0_0_0_12_1_1 - 5.21142857142855*G0_0_0_13_1_0 - 4.49523809523807*G0_0_0_13_1_1 + 7.58857142857142*G0_0_0_14_1_0 + 3.55047619047618*G0_0_0_14_1_1 - 5.57714285714283*G0_0_0_15_1_0 - 2.36190476190475*G0_0_0_15_1_1 - 7.58857142857142*G0_0_0_16_1_0 + 0.198095238095226*G0_0_0_16_1_1 - 0.243809523809518*G0_0_0_17_1_0 - 3.4590476190476*G0_0_0_17_1_1 + 1.40190476190474*G0_0_0_18_1_0 + 4.49523809523807*G0_0_0_18_1_1 + 10.7885714285714*G0_0_0_19_1_0 - 0.0914285714285885*G0_0_0_19_1_1 - 2.2095238095238*G0_0_1_1_0_0 + 2.2095238095238*G0_0_1_2_0_1 - 3.1238095238095*G0_0_1_3_0_0 - 5.3333333333333*G0_0_1_3_0_1 + 5.33333333333331*G0_0_1_4_0_0 + 3.12380952380951*G0_0_1_4_0_1 + 1.29523809523809*G0_0_1_5_0_0 + 1.2952380952381*G0_0_1_5_0_1 - 5.33333333333331*G0_0_1_6_0_0 - 3.50476190476189*G0_0_1_6_0_1 - 1.29523809523808*G0_0_1_7_0_0 - 1.29523809523808*G0_0_1_7_0_1 + 3.50476190476188*G0_0_1_8_0_0 + 5.3333333333333*G0_0_1_8_0_1 + 1.82857142857141*G0_0_1_9_0_0 - 1.82857142857143*G0_0_1_9_0_1 - 2.2095238095238*G0_0_1_11_1_0 + 2.2095238095238*G0_0_1_12_1_1 - 3.1238095238095*G0_0_1_13_1_0 - 5.3333333333333*G0_0_1_13_1_1 + 5.33333333333331*G0_0_1_14_1_0 + 3.12380952380951*G0_0_1_14_1_1 + 1.29523809523809*G0_0_1_15_1_0 + 1.2952380952381*G0_0_1_15_1_1 - 5.33333333333331*G0_0_1_16_1_0 - 3.50476190476189*G0_0_1_16_1_1 - 1.29523809523808*G0_0_1_17_1_0 - 1.29523809523808*G0_0_1_17_1_1 + 3.50476190476188*G0_0_1_18_1_0 + 5.3333333333333*G0_0_1_18_1_1 + 1.82857142857141*G0_0_1_19_1_0 - 1.82857142857143*G0_0_1_19_1_1 - 2.23999999999998*G0_1_0_1_0_0 + 2.24*G0_1_0_2_0_1 - 4.57142857142855*G0_1_0_3_0_0 - 6.81142857142853*G0_1_0_3_0_1 + 6.81142857142856*G0_1_0_4_0_0 + 4.57142857142855*G0_1_0_4_0_1 - 0.091428571428569*G0_1_0_5_0_0 - 0.0914285714285811*G0_1_0_5_0_1 - 6.81142857142856*G0_1_0_6_0_0 - 2.14857142857142*G0_1_0_6_0_1 + 0.0914285714285688*G0_1_0_7_0_0 + 0.0914285714285821*G0_1_0_7_0_1 + 2.14857142857141*G0_1_0_8_0_0 + 6.81142857142854*G0_1_0_8_0_1 + 4.66285714285712*G0_1_0_9_0_0 - 4.66285714285714*G0_1_0_9_0_1 - 2.23999999999998*G0_1_0_11_1_0 + 2.24*G0_1_0_12_1_1 - 4.57142857142855*G0_1_0_13_1_0 - 6.81142857142853*G0_1_0_13_1_1 + 6.81142857142856*G0_1_0_14_1_0 + 4.57142857142855*G0_1_0_14_1_1 - 0.091428571428569*G0_1_0_15_1_0 - 0.0914285714285811*G0_1_0_15_1_1 - 6.81142857142856*G0_1_0_16_1_0 - 2.14857142857142*G0_1_0_16_1_1 + 0.0914285714285688*G0_1_0_17_1_0 + 0.0914285714285821*G0_1_0_17_1_1 + 2.14857142857141*G0_1_0_18_1_0 + 6.81142857142854*G0_1_0_18_1_1 + 4.66285714285712*G0_1_0_19_1_0 - 4.66285714285714*G0_1_0_19_1_1 + 0.396190476190475*G0_1_1_0_0_0 + 0.396190476190476*G0_1_1_0_0_1 - 2.55999999999998*G0_1_1_1_0_0 + 0.761904761904759*G0_1_1_2_0_1 - 3.55047619047617*G0_1_1_3_0_0 - 7.58857142857139*G0_1_1_3_0_1 + 4.49523809523808*G0_1_1_4_0_0 + 5.21142857142855*G0_1_1_4_0_1 + 3.4590476190476*G0_1_1_5_0_0 + 0.243809523809519*G0_1_1_5_0_1 - 4.49523809523808*G0_1_1_6_0_0 - 1.40190476190475*G0_1_1_6_0_1 + 2.36190476190475*G0_1_1_7_0_0 + 5.57714285714284*G0_1_1_7_0_1 - 0.198095238095247*G0_1_1_8_0_0 + 7.58857142857139*G0_1_1_8_0_1 + 0.0914285714285672*G0_1_1_9_0_0 - 10.7885714285714*G0_1_1_9_0_1 + 0.396190476190475*G0_1_1_10_1_0 + 0.396190476190476*G0_1_1_10_1_1 - 2.55999999999998*G0_1_1_11_1_0 + 0.761904761904759*G0_1_1_12_1_1 - 3.55047619047617*G0_1_1_13_1_0 - 7.58857142857139*G0_1_1_13_1_1 + 4.49523809523808*G0_1_1_14_1_0 + 5.21142857142855*G0_1_1_14_1_1 + 3.4590476190476*G0_1_1_15_1_0 + 0.243809523809519*G0_1_1_15_1_1 - 4.49523809523808*G0_1_1_16_1_0 - 1.40190476190475*G0_1_1_16_1_1 + 2.36190476190475*G0_1_1_17_1_0 + 5.57714285714284*G0_1_1_17_1_1 - 0.198095238095247*G0_1_1_18_1_0 + 7.58857142857139*G0_1_1_18_1_1 + 0.0914285714285672*G0_1_1_19_1_0 - 10.7885714285714*G0_1_1_19_1_1;
    A[64] = A[67] + 0.450793650793649*G0_1_0_0_0_0 + 0.450793650793649*G0_1_0_0_0_1 - 0.45079365079365*G0_1_0_1_0_0 - 2.95555555555554*G0_1_0_2_0_1 + 2.10476190476189*G0_1_0_3_0_0 + 0.138095238095233*G0_1_0_3_0_1 - 5.40952380952377*G0_1_0_4_0_0 - 0.938095238095233*G0_1_0_4_0_1 - 2.10476190476189*G0_1_0_5_0_0 - 1.96666666666665*G0_1_0_5_0_1 + 5.40952380952377*G0_1_0_6_0_0 + 4.47142857142854*G0_1_0_6_0_1 - 0.138095238095238*G0_1_0_7_0_1 - 0.138095238095234*G0_1_0_8_0_1 + 1.07619047619047*G0_1_0_9_0_1 + 0.450793650793649*G0_1_0_10_1_0 + 0.450793650793649*G0_1_0_10_1_1 - 0.45079365079365*G0_1_0_11_1_0 - 2.95555555555554*G0_1_0_12_1_1 + 2.10476190476189*G0_1_0_13_1_0 + 0.138095238095233*G0_1_0_13_1_1 - 5.40952380952377*G0_1_0_14_1_0 - 0.938095238095233*G0_1_0_14_1_1 - 2.10476190476189*G0_1_0_15_1_0 - 1.96666666666665*G0_1_0_15_1_1 + 5.40952380952377*G0_1_0_16_1_0 + 4.47142857142854*G0_1_0_16_1_1 - 0.138095238095238*G0_1_0_17_1_1 - 0.138095238095234*G0_1_0_18_1_1 + 1.07619047619047*G0_1_0_19_1_1 + 0.592063492063489*G0_1_1_0_0_0 + 0.592063492063489*G0_1_1_0_0_1 + 0.141269841269842*G0_1_1_1_0_0 - 1.47777777777777*G0_1_1_2_0_1 + 0.914285714285708*G0_1_1_3_0_0 + 0.733333333333331*G0_1_1_3_0_1 - 2.70476190476189*G0_1_1_4_0_0 - 0.9047619047619*G0_1_1_4_0_1 - 1.19047619047618*G0_1_1_5_0_0 - 1.78571428571427*G0_1_1_5_0_1 + 2.70476190476189*G0_1_1_6_0_0 + 2.67142857142855*G0_1_1_6_0_1 - 0.366666666666664*G0_1_1_7_0_0 + 0.228571428571429*G0_1_1_7_0_1 - 0.366666666666666*G0_1_1_8_0_0 - 0.733333333333331*G0_1_1_8_0_1 + 0.276190476190474*G0_1_1_9_0_0 + 0.676190476190472*G0_1_1_9_0_1 + 0.592063492063489*G0_1_1_10_1_0 + 0.592063492063489*G0_1_1_10_1_1 + 0.141269841269842*G0_1_1_11_1_0 - 1.47777777777777*G0_1_1_12_1_1 + 0.914285714285708*G0_1_1_13_1_0 + 0.733333333333331*G0_1_1_13_1_1 - 2.70476190476189*G0_1_1_14_1_0 - 0.9047619047619*G0_1_1_14_1_1 - 1.19047619047618*G0_1_1_15_1_0 - 1.78571428571427*G0_1_1_15_1_1 + 2.70476190476189*G0_1_1_16_1_0 + 2.67142857142855*G0_1_1_16_1_1 - 0.366666666666664*G0_1_1_17_1_0 + 0.228571428571429*G0_1_1_17_1_1 - 0.366666666666666*G0_1_1_18_1_0 - 0.733333333333331*G0_1_1_18_1_1 + 0.276190476190474*G0_1_1_19_1_0 + 0.676190476190472*G0_1_1_19_1_1;
    A[159] = A[624];
    A[898] = A[869] - 0.975238095238091*G0_0_1_0_0_0 - 0.975238095238091*G0_0_1_0_0_1 + 0.975238095238089*G0_0_1_1_0_0 + 0.975238095238085*G0_0_1_2_0_1 + 0.853333333333341*G0_0_1_3_0_0 + 1.5847619047619*G0_0_1_3_0_1 + 1.58476190476189*G0_0_1_4_0_0 + 0.853333333333339*G0_0_1_4_0_1 + 2.80380952380952*G0_0_1_5_0_0 + 2.55999999999999*G0_0_1_5_0_1 - 1.58476190476189*G0_0_1_6_0_0 - 2.55999999999998*G0_0_1_6_0_1 + 2.56*G0_0_1_7_0_0 + 2.80380952380952*G0_0_1_7_0_1 - 2.55999999999999*G0_0_1_8_0_0 - 1.5847619047619*G0_0_1_8_0_1 - 3.65714285714286*G0_0_1_9_0_0 - 3.65714285714286*G0_0_1_9_0_1 - 0.975238095238091*G0_0_1_10_1_0 - 0.975238095238091*G0_0_1_10_1_1 + 0.975238095238089*G0_0_1_11_1_0 + 0.975238095238085*G0_0_1_12_1_1 + 0.853333333333341*G0_0_1_13_1_0 + 1.5847619047619*G0_0_1_13_1_1 + 1.58476190476189*G0_0_1_14_1_0 + 0.853333333333339*G0_0_1_14_1_1 + 2.80380952380952*G0_0_1_15_1_0 + 2.55999999999999*G0_0_1_15_1_1 - 1.58476190476189*G0_0_1_16_1_0 - 2.55999999999998*G0_0_1_16_1_1 + 2.56*G0_0_1_17_1_0 + 2.80380952380952*G0_0_1_17_1_1 - 2.55999999999999*G0_0_1_18_1_0 - 1.5847619047619*G0_0_1_18_1_1 - 3.65714285714286*G0_0_1_19_1_0 - 3.65714285714286*G0_0_1_19_1_1 + 0.975238095238092*G0_1_0_0_0_0 + 0.975238095238092*G0_1_0_0_0_1 - 0.975238095238089*G0_1_0_1_0_0 - 0.975238095238085*G0_1_0_2_0_1 - 0.853333333333342*G0_1_0_3_0_0 - 1.5847619047619*G0_1_0_3_0_1 - 1.58476190476189*G0_1_0_4_0_0 - 0.853333333333341*G0_1_0_4_0_1 - 2.80380952380952*G0_1_0_5_0_0 - 2.55999999999999*G0_1_0_5_0_1 + 1.58476190476189*G0_1_0_6_0_0 + 2.55999999999998*G0_1_0_6_0_1 - 2.56*G0_1_0_7_0_0 - 2.80380952380952*G0_1_0_7_0_1 + 2.55999999999999*G0_1_0_8_0_0 + 1.5847619047619*G0_1_0_8_0_1 + 3.65714285714286*G0_1_0_9_0_0 + 3.65714285714286*G0_1_0_9_0_1 + 0.975238095238092*G0_1_0_10_1_0 + 0.975238095238092*G0_1_0_10_1_1 - 0.975238095238089*G0_1_0_11_1_0 - 0.975238095238085*G0_1_0_12_1_1 - 0.853333333333342*G0_1_0_13_1_0 - 1.5847619047619*G0_1_0_13_1_1 - 1.58476190476189*G0_1_0_14_1_0 - 0.853333333333341*G0_1_0_14_1_1 - 2.80380952380952*G0_1_0_15_1_0 - 2.55999999999999*G0_1_0_15_1_1 + 1.58476190476189*G0_1_0_16_1_0 + 2.55999999999998*G0_1_0_16_1_1 - 2.56*G0_1_0_17_1_0 - 2.80380952380952*G0_1_0_17_1_1 + 2.55999999999999*G0_1_0_18_1_0 + 1.5847619047619*G0_1_0_18_1_1 + 3.65714285714286*G0_1_0_19_1_0 + 3.65714285714286*G0_1_0_19_1_1;
    A[897] = A[898] + 1.95047619047618*G0_0_0_0_0_0 + 1.95047619047618*G0_0_0_0_0_1 + 1.95047619047618*G0_0_0_1_0_0 - 8.77714285714282*G0_0_0_3_0_0 - 0.487619047619043*G0_0_0_3_0_1 - 6.33904761904759*G0_0_0_4_0_1 - 8.77714285714283*G0_0_0_5_0_0 - 8.28952380952378*G0_0_0_5_0_1 + 6.3390476190476*G0_0_0_6_0_1 - 1.95047619047618*G0_0_0_7_0_0 - 2.43809523809522*G0_0_0_7_0_1 - 1.95047619047619*G0_0_0_8_0_0 + 0.487619047619043*G0_0_0_8_0_1 + 17.5542857142856*G0_0_0_9_0_0 + 8.77714285714281*G0_0_0_9_0_1 + 1.95047619047618*G0_0_0_10_1_0 + 1.95047619047618*G0_0_0_10_1_1 + 1.95047619047618*G0_0_0_11_1_0 - 8.77714285714282*G0_0_0_13_1_0 - 0.487619047619043*G0_0_0_13_1_1 - 6.33904761904759*G0_0_0_14_1_1 - 8.77714285714283*G0_0_0_15_1_0 - 8.28952380952378*G0_0_0_15_1_1 + 6.3390476190476*G0_0_0_16_1_1 - 1.95047619047618*G0_0_0_17_1_0 - 2.43809523809522*G0_0_0_17_1_1 - 1.95047619047619*G0_0_0_18_1_0 + 0.487619047619043*G0_0_0_18_1_1 + 17.5542857142856*G0_0_0_19_1_0 + 8.77714285714281*G0_0_0_19_1_1 + 1.66603174603174*G0_0_1_0_0_0 + 1.66603174603174*G0_0_1_0_0_1 + 0.284444444444445*G0_0_1_1_0_0 - 1.05650793650794*G0_0_1_2_0_1 - 6.58285714285711*G0_0_1_3_0_0 - 1.34095238095237*G0_0_1_3_0_1 - 5.11999999999999*G0_0_1_4_0_0 - 9.02095238095234*G0_0_1_4_0_1 - 2.19428571428571*G0_0_1_5_0_0 - 3.04761904761904*G0_0_1_5_0_1 + 5.11999999999999*G0_0_1_6_0_0 + 2.43809523809524*G0_0_1_6_0_1 - 2.80380952380951*G0_0_1_7_0_0 - 1.95047619047617*G0_0_1_7_0_1 + 0.853333333333326*G0_0_1_8_0_0 + 1.34095238095237*G0_0_1_8_0_1 + 8.77714285714282*G0_0_1_9_0_0 + 10.9714285714285*G0_0_1_9_0_1 + 1.66603174603174*G0_0_1_10_1_0 + 1.66603174603174*G0_0_1_10_1_1 + 0.284444444444445*G0_0_1_11_1_0 - 1.05650793650794*G0_0_1_12_1_1 - 6.58285714285711*G0_0_1_13_1_0 - 1.34095238095237*G0_0_1_13_1_1 - 5.11999999999999*G0_0_1_14_1_0 - 9.02095238095234*G0_0_1_14_1_1 - 2.19428571428571*G0_0_1_15_1_0 - 3.04761904761904*G0_0_1_15_1_1 + 5.11999999999999*G0_0_1_16_1_0 + 2.43809523809524*G0_0_1_16_1_1 - 2.80380952380951*G0_0_1_17_1_0 - 1.95047619047617*G0_0_1_17_1_1 + 0.853333333333326*G0_0_1_18_1_0 + 1.34095238095237*G0_0_1_18_1_1 + 8.77714285714282*G0_0_1_19_1_0 + 10.9714285714285*G0_0_1_19_1_1 - 0.284444444444446*G0_1_0_0_0_0 - 0.284444444444445*G0_1_0_0_0_1 + 2.23492063492062*G0_1_0_1_0_0 + 0.893968253968243*G0_1_0_2_0_1 - 8.53333333333328*G0_1_0_3_0_0 - 1.9504761904762*G0_1_0_4_0_0 - 9.14285714285709*G0_1_0_4_0_1 - 0.24380952380952*G0_1_0_5_0_0 + 0.243809523809525*G0_1_0_5_0_1 + 1.95047619047619*G0_1_0_6_0_0 - 0.853333333333324*G0_1_0_6_0_1 + 2.31619047619048*G0_1_0_7_0_0 + 1.82857142857143*G0_1_0_7_0_1 - 4.26666666666665*G0_1_0_8_0_0 + 8.7771428571428*G0_1_0_9_0_0 + 7.31428571428566*G0_1_0_9_0_1 - 0.284444444444446*G0_1_0_10_1_0 - 0.284444444444445*G0_1_0_10_1_1 + 2.23492063492062*G0_1_0_11_1_0 + 0.893968253968243*G0_1_0_12_1_1 - 8.53333333333328*G0_1_0_13_1_0 - 1.9504761904762*G0_1_0_14_1_0 - 9.14285714285709*G0_1_0_14_1_1 - 0.24380952380952*G0_1_0_15_1_0 + 0.243809523809525*G0_1_0_15_1_1 + 1.95047619047619*G0_1_0_16_1_0 - 0.853333333333324*G0_1_0_16_1_1 + 2.31619047619048*G0_1_0_17_1_0 + 1.82857142857143*G0_1_0_17_1_1 - 4.26666666666665*G0_1_0_18_1_0 + 8.7771428571428*G0_1_0_19_1_0 + 7.31428571428566*G0_1_0_19_1_1 + 2.03174603174602*G0_1_1_0_0_0 + 2.03174603174602*G0_1_1_0_0_1 + 2.60063492063491*G0_1_1_1_0_0 - 0.0812698412698487*G0_1_1_2_0_1 - 7.19238095238091*G0_1_1_3_0_0 + 2.19428571428571*G0_1_1_3_0_1 - 3.5352380952381*G0_1_1_4_0_0 - 10.24*G0_1_1_4_0_1 - 0.853333333333328*G0_1_1_5_0_0 - 3.90095238095236*G0_1_1_5_0_1 + 3.53523809523809*G0_1_1_6_0_0 + 1.95047619047619*G0_1_1_6_0_1 - 1.58476190476189*G0_1_1_7_0_0 + 1.46285714285715*G0_1_1_7_0_1 - 3.04761904761904*G0_1_1_8_0_0 - 2.19428571428571*G0_1_1_8_0_1 + 8.04571428571423*G0_1_1_9_0_0 + 8.7771428571428*G0_1_1_9_0_1 + 2.03174603174602*G0_1_1_10_1_0 + 2.03174603174602*G0_1_1_10_1_1 + 2.60063492063491*G0_1_1_11_1_0 - 0.0812698412698487*G0_1_1_12_1_1 - 7.19238095238091*G0_1_1_13_1_0 + 2.19428571428571*G0_1_1_13_1_1 - 3.5352380952381*G0_1_1_14_1_0 - 10.24*G0_1_1_14_1_1 - 0.853333333333328*G0_1_1_15_1_0 - 3.90095238095236*G0_1_1_15_1_1 + 3.53523809523809*G0_1_1_16_1_0 + 1.95047619047619*G0_1_1_16_1_1 - 1.58476190476189*G0_1_1_17_1_0 + 1.46285714285715*G0_1_1_17_1_1 - 3.04761904761904*G0_1_1_18_1_0 - 2.19428571428571*G0_1_1_18_1_1 + 8.04571428571423*G0_1_1_19_1_0 + 8.7771428571428*G0_1_1_19_1_1;
    A[373] = A[898] + 2.03174603174602*G0_0_0_0_0_0 + 2.03174603174602*G0_0_0_0_0_1 - 0.0812698412698398*G0_0_0_1_0_0 + 2.60063492063491*G0_0_0_2_0_1 - 10.2399999999999*G0_0_0_3_0_0 - 3.53523809523808*G0_0_0_3_0_1 + 2.1942857142857*G0_0_0_4_0_0 - 7.19238095238091*G0_0_0_4_0_1 + 1.46285714285714*G0_0_0_5_0_0 - 1.58476190476189*G0_0_0_5_0_1 - 2.19428571428571*G0_0_0_6_0_0 - 3.04761904761904*G0_0_0_6_0_1 - 3.90095238095235*G0_0_0_7_0_0 - 0.853333333333318*G0_0_0_7_0_1 + 1.95047619047617*G0_0_0_8_0_0 + 3.53523809523807*G0_0_0_8_0_1 + 8.7771428571428*G0_0_0_9_0_0 + 8.04571428571423*G0_0_0_9_0_1 + 2.03174603174602*G0_0_0_10_1_0 + 2.03174603174602*G0_0_0_10_1_1 - 0.0812698412698398*G0_0_0_11_1_0 + 2.60063492063491*G0_0_0_12_1_1 - 10.2399999999999*G0_0_0_13_1_0 - 3.53523809523808*G0_0_0_13_1_1 + 2.1942857142857*G0_0_0_14_1_0 - 7.19238095238091*G0_0_0_14_1_1 + 1.46285714285714*G0_0_0_15_1_0 - 1.58476190476189*G0_0_0_15_1_1 - 2.19428571428571*G0_0_0_16_1_0 - 3.04761904761904*G0_0_0_16_1_1 - 3.90095238095235*G0_0_0_17_1_0 - 0.853333333333318*G0_0_0_17_1_1 + 1.95047619047617*G0_0_0_18_1_0 + 3.53523809523807*G0_0_0_18_1_1 + 8.7771428571428*G0_0_0_19_1_0 + 8.04571428571423*G0_0_0_19_1_1 + 1.66603174603173*G0_0_1_0_0_0 + 1.66603174603173*G0_0_1_0_0_1 - 1.05650793650793*G0_0_1_1_0_0 + 0.284444444444447*G0_0_1_2_0_1 - 9.02095238095233*G0_0_1_3_0_0 - 5.11999999999997*G0_0_1_3_0_1 - 1.34095238095237*G0_0_1_4_0_0 - 6.58285714285711*G0_0_1_4_0_1 - 1.95047619047618*G0_0_1_5_0_0 - 2.8038095238095*G0_0_1_5_0_1 + 1.34095238095237*G0_0_1_6_0_0 + 0.853333333333322*G0_0_1_6_0_1 - 3.04761904761902*G0_0_1_7_0_0 - 2.1942857142857*G0_0_1_7_0_1 + 2.43809523809522*G0_0_1_8_0_0 + 5.11999999999997*G0_0_1_8_0_1 + 10.9714285714285*G0_0_1_9_0_0 + 8.77714285714281*G0_0_1_9_0_1 + 1.66603174603173*G0_0_1_10_1_0 + 1.66603174603173*G0_0_1_10_1_1 - 1.05650793650793*G0_0_1_11_1_0 + 0.284444444444447*G0_0_1_12_1_1 - 9.02095238095233*G0_0_1_13_1_0 - 5.11999999999997*G0_0_1_13_1_1 - 1.34095238095237*G0_0_1_14_1_0 - 6.58285714285711*G0_0_1_14_1_1 - 1.95047619047618*G0_0_1_15_1_0 - 2.8038095238095*G0_0_1_15_1_1 + 1.34095238095237*G0_0_1_16_1_0 + 0.853333333333322*G0_0_1_16_1_1 - 3.04761904761902*G0_0_1_17_1_0 - 2.1942857142857*G0_0_1_17_1_1 + 2.43809523809522*G0_0_1_18_1_0 + 5.11999999999997*G0_0_1_18_1_1 + 10.9714285714285*G0_0_1_19_1_0 + 8.77714285714281*G0_0_1_19_1_1 - 0.284444444444445*G0_1_0_0_0_0 - 0.284444444444445*G0_1_0_0_0_1 + 0.89396825396825*G0_1_0_1_0_0 + 2.23492063492062*G0_1_0_2_0_1 - 9.14285714285709*G0_1_0_3_0_0 - 1.95047619047618*G0_1_0_3_0_1 - 8.53333333333329*G0_1_0_4_0_1 + 1.82857142857143*G0_1_0_5_0_0 + 2.31619047619047*G0_1_0_5_0_1 - 4.26666666666664*G0_1_0_6_0_1 + 0.243809523809536*G0_1_0_7_0_0 - 0.243809523809504*G0_1_0_7_0_1 - 0.853333333333339*G0_1_0_8_0_0 + 1.95047619047618*G0_1_0_8_0_1 + 7.31428571428566*G0_1_0_9_0_0 + 8.77714285714279*G0_1_0_9_0_1 - 0.284444444444445*G0_1_0_10_1_0 - 0.284444444444445*G0_1_0_10_1_1 + 0.89396825396825*G0_1_0_11_1_0 + 2.23492063492062*G0_1_0_12_1_1 - 9.14285714285709*G0_1_0_13_1_0 - 1.95047619047618*G0_1_0_13_1_1 - 8.53333333333329*G0_1_0_14_1_1 + 1.82857142857143*G0_1_0_15_1_0 + 2.31619047619047*G0_1_0_15_1_1 - 4.26666666666664*G0_1_0_16_1_1 + 0.243809523809536*G0_1_0_17_1_0 - 0.243809523809504*G0_1_0_17_1_1 - 0.853333333333339*G0_1_0_18_1_0 + 1.95047619047618*G0_1_0_18_1_1 + 7.31428571428566*G0_1_0_19_1_0 + 8.77714285714279*G0_1_0_19_1_1 + 1.95047619047618*G0_1_1_0_0_0 + 1.95047619047618*G0_1_1_0_0_1 + 1.95047619047618*G0_1_1_2_0_1 - 6.33904761904758*G0_1_1_3_0_0 - 0.487619047619059*G0_1_1_4_0_0 - 8.77714285714282*G0_1_1_4_0_1 - 2.43809523809522*G0_1_1_5_0_0 - 1.95047619047618*G0_1_1_5_0_1 + 0.487619047619057*G0_1_1_6_0_0 - 1.95047619047618*G0_1_1_6_0_1 - 8.28952380952376*G0_1_1_7_0_0 - 8.77714285714281*G0_1_1_7_0_1 + 6.33904761904758*G0_1_1_8_0_0 + 8.7771428571428*G0_1_1_9_0_0 + 17.5542857142856*G0_1_1_9_0_1 + 1.95047619047618*G0_1_1_10_1_0 + 1.95047619047618*G0_1_1_10_1_1 + 1.95047619047618*G0_1_1_12_1_1 - 6.33904761904758*G0_1_1_13_1_0 - 0.487619047619059*G0_1_1_14_1_0 - 8.77714285714282*G0_1_1_14_1_1 - 2.43809523809522*G0_1_1_15_1_0 - 1.95047619047618*G0_1_1_15_1_1 + 0.487619047619057*G0_1_1_16_1_0 - 1.95047619047618*G0_1_1_16_1_1 - 8.28952380952376*G0_1_1_17_1_0 - 8.77714285714281*G0_1_1_17_1_1 + 6.33904761904758*G0_1_1_18_1_0 + 8.7771428571428*G0_1_1_19_1_0 + 17.5542857142856*G0_1_1_19_1_1;
    A[432] = A[897];
    A[838] = A[373];
    A[402] = A[373] - 0.975238095238087*G0_0_1_0_0_0 - 0.975238095238087*G0_0_1_0_0_1 + 0.975238095238089*G0_0_1_1_0_0 + 0.975238095238088*G0_0_1_2_0_1 - 0.975238095238093*G0_0_1_3_0_0 + 1.58476190476189*G0_0_1_3_0_1 - 0.243809523809525*G0_0_1_4_0_0 - 2.80380952380951*G0_0_1_4_0_1 + 0.975238095238089*G0_0_1_5_0_0 + 2.55999999999998*G0_0_1_5_0_1 + 0.243809523809525*G0_0_1_6_0_0 - 2.55999999999998*G0_0_1_6_0_1 + 0.731428571428564*G0_0_1_7_0_0 - 0.853333333333328*G0_0_1_7_0_1 - 0.731428571428566*G0_0_1_8_0_0 - 1.58476190476189*G0_0_1_8_0_1 + 3.65714285714284*G0_0_1_9_0_1 - 0.975238095238087*G0_0_1_10_1_0 - 0.975238095238087*G0_0_1_10_1_1 + 0.975238095238089*G0_0_1_11_1_0 + 0.975238095238088*G0_0_1_12_1_1 - 0.975238095238093*G0_0_1_13_1_0 + 1.58476190476189*G0_0_1_13_1_1 - 0.243809523809525*G0_0_1_14_1_0 - 2.80380952380951*G0_0_1_14_1_1 + 0.975238095238089*G0_0_1_15_1_0 + 2.55999999999998*G0_0_1_15_1_1 + 0.243809523809525*G0_0_1_16_1_0 - 2.55999999999998*G0_0_1_16_1_1 + 0.731428571428564*G0_0_1_17_1_0 - 0.853333333333328*G0_0_1_17_1_1 - 0.731428571428566*G0_0_1_18_1_0 - 1.58476190476189*G0_0_1_18_1_1 + 3.65714285714284*G0_0_1_19_1_1 + 0.975238095238087*G0_1_0_0_0_0 + 0.975238095238087*G0_1_0_0_0_1 - 0.975238095238089*G0_1_0_1_0_0 - 0.975238095238088*G0_1_0_2_0_1 + 0.975238095238093*G0_1_0_3_0_0 - 1.58476190476189*G0_1_0_3_0_1 + 0.243809523809525*G0_1_0_4_0_0 + 2.80380952380951*G0_1_0_4_0_1 - 0.975238095238089*G0_1_0_5_0_0 - 2.55999999999998*G0_1_0_5_0_1 - 0.243809523809525*G0_1_0_6_0_0 + 2.55999999999998*G0_1_0_6_0_1 - 0.731428571428564*G0_1_0_7_0_0 + 0.853333333333328*G0_1_0_7_0_1 + 0.731428571428566*G0_1_0_8_0_0 + 1.58476190476189*G0_1_0_8_0_1 - 3.65714285714284*G0_1_0_9_0_1 + 0.975238095238087*G0_1_0_10_1_0 + 0.975238095238087*G0_1_0_10_1_1 - 0.975238095238089*G0_1_0_11_1_0 - 0.975238095238088*G0_1_0_12_1_1 + 0.975238095238093*G0_1_0_13_1_0 - 1.58476190476189*G0_1_0_13_1_1 + 0.243809523809525*G0_1_0_14_1_0 + 2.80380952380951*G0_1_0_14_1_1 - 0.975238095238089*G0_1_0_15_1_0 - 2.55999999999998*G0_1_0_15_1_1 - 0.243809523809525*G0_1_0_16_1_0 + 2.55999999999998*G0_1_0_16_1_1 - 0.731428571428564*G0_1_0_17_1_0 + 0.853333333333328*G0_1_0_17_1_1 + 0.731428571428566*G0_1_0_18_1_0 + 1.58476190476189*G0_1_0_18_1_1 - 3.65714285714284*G0_1_0_19_1_1;
    A[115] = 0.0;
    A[138] = 0.0;
    A[596] = A[131];
    A[217] = A[775] + 2.92698412698412*G0_0_0_0_0_0 + 2.92698412698412*G0_0_0_0_0_1 - 2.31746031746031*G0_0_0_1_0_0 + 2.33777777777777*G0_0_0_2_0_1 - 5.13142857142855*G0_0_0_3_0_0 - 6.59047619047616*G0_0_0_3_0_1 + 8.44571428571425*G0_0_0_4_0_0 + 5.24952380952379*G0_0_0_4_0_1 + 0.559999999999987*G0_0_0_5_0_0 - 4.96380952380951*G0_0_0_5_0_1 - 8.44571428571425*G0_0_0_6_0_0 - 0.300952380952371*G0_0_0_6_0_1 - 3.89333333333331*G0_0_0_7_0_0 + 1.63047619047618*G0_0_0_7_0_1 + 3.2838095238095*G0_0_0_8_0_0 + 6.59047619047616*G0_0_0_8_0_1 + 4.57142857142856*G0_0_0_9_0_0 - 6.87999999999998*G0_0_0_9_0_1 + 2.92698412698412*G0_0_0_10_1_0 + 2.92698412698412*G0_0_0_10_1_1 - 2.31746031746031*G0_0_0_11_1_0 + 2.33777777777777*G0_0_0_12_1_1 - 5.13142857142855*G0_0_0_13_1_0 - 6.59047619047616*G0_0_0_13_1_1 + 8.44571428571425*G0_0_0_14_1_0 + 5.24952380952379*G0_0_0_14_1_1 + 0.559999999999987*G0_0_0_15_1_0 - 4.96380952380951*G0_0_0_15_1_1 - 8.44571428571425*G0_0_0_16_1_0 - 0.300952380952371*G0_0_0_16_1_1 - 3.89333333333331*G0_0_0_17_1_0 + 1.63047619047618*G0_0_0_17_1_1 + 3.2838095238095*G0_0_0_18_1_0 + 6.59047619047616*G0_0_0_18_1_1 + 4.57142857142856*G0_0_0_19_1_0 - 6.87999999999998*G0_0_0_19_1_1 - 2.63238095238094*G0_0_1_1_0_0 + 2.63238095238094*G0_0_1_2_0_1 - 4.35238095238093*G0_0_1_3_0_0 - 6.98476190476187*G0_0_1_3_0_1 + 6.98476190476188*G0_0_1_4_0_0 + 4.35238095238094*G0_0_1_4_0_1 + 0.912380952380943*G0_0_1_5_0_0 + 0.912380952380939*G0_0_1_5_0_1 - 6.98476190476188*G0_0_1_6_0_0 - 3.54476190476188*G0_0_1_6_0_1 - 0.912380952380947*G0_0_1_7_0_0 - 0.912380952380941*G0_0_1_7_0_1 + 3.54476190476188*G0_0_1_8_0_0 + 6.98476190476187*G0_0_1_8_0_1 + 3.43999999999999*G0_0_1_9_0_0 - 3.44*G0_0_1_9_0_1 - 2.63238095238094*G0_0_1_11_1_0 + 2.63238095238094*G0_0_1_12_1_1 - 4.35238095238093*G0_0_1_13_1_0 - 6.98476190476187*G0_0_1_13_1_1 + 6.98476190476188*G0_0_1_14_1_0 + 4.35238095238094*G0_0_1_14_1_1 + 0.912380952380943*G0_0_1_15_1_0 + 0.912380952380939*G0_0_1_15_1_1 - 6.98476190476188*G0_0_1_16_1_0 - 3.54476190476188*G0_0_1_16_1_1 - 0.912380952380947*G0_0_1_17_1_0 - 0.912380952380941*G0_0_1_17_1_1 + 3.54476190476188*G0_0_1_18_1_0 + 6.98476190476187*G0_0_1_18_1_1 + 3.43999999999999*G0_0_1_19_1_0 - 3.44*G0_0_1_19_1_1 - 2.63238095238094*G0_1_0_1_0_0 + 2.63238095238094*G0_1_0_2_0_1 - 4.35238095238093*G0_1_0_3_0_0 - 6.98476190476187*G0_1_0_3_0_1 + 6.98476190476188*G0_1_0_4_0_0 + 4.35238095238094*G0_1_0_4_0_1 + 0.912380952380943*G0_1_0_5_0_0 + 0.912380952380939*G0_1_0_5_0_1 - 6.98476190476188*G0_1_0_6_0_0 - 3.54476190476188*G0_1_0_6_0_1 - 0.912380952380948*G0_1_0_7_0_0 - 0.912380952380941*G0_1_0_7_0_1 + 3.54476190476188*G0_1_0_8_0_0 + 6.98476190476187*G0_1_0_8_0_1 + 3.43999999999999*G0_1_0_9_0_0 - 3.44*G0_1_0_9_0_1 - 2.63238095238094*G0_1_0_11_1_0 + 2.63238095238094*G0_1_0_12_1_1 - 4.35238095238093*G0_1_0_13_1_0 - 6.98476190476187*G0_1_0_13_1_1 + 6.98476190476188*G0_1_0_14_1_0 + 4.35238095238094*G0_1_0_14_1_1 + 0.912380952380943*G0_1_0_15_1_0 + 0.912380952380939*G0_1_0_15_1_1 - 6.98476190476188*G0_1_0_16_1_0 - 3.54476190476188*G0_1_0_16_1_1 - 0.912380952380948*G0_1_0_17_1_0 - 0.912380952380941*G0_1_0_17_1_1 + 3.54476190476188*G0_1_0_18_1_0 + 6.98476190476187*G0_1_0_18_1_1 + 3.43999999999999*G0_1_0_19_1_0 - 3.44*G0_1_0_19_1_1 - 2.92698412698411*G0_1_1_0_0_0 - 2.92698412698411*G0_1_1_0_0_1 - 2.33777777777776*G0_1_1_1_0_0 + 2.31746031746031*G0_1_1_2_0_1 - 5.24952380952378*G0_1_1_3_0_0 - 8.44571428571424*G0_1_1_3_0_1 + 6.59047619047616*G0_1_1_4_0_0 + 5.13142857142855*G0_1_1_4_0_1 - 1.63047619047619*G0_1_1_5_0_0 + 3.89333333333331*G0_1_1_5_0_1 - 6.59047619047616*G0_1_1_6_0_0 - 3.2838095238095*G0_1_1_6_0_1 + 4.9638095238095*G0_1_1_7_0_0 - 0.559999999999987*G0_1_1_7_0_1 + 0.300952380952367*G0_1_1_8_0_0 + 8.44571428571424*G0_1_1_8_0_1 + 6.87999999999997*G0_1_1_9_0_0 - 4.57142857142856*G0_1_1_9_0_1 - 2.92698412698411*G0_1_1_10_1_0 - 2.92698412698411*G0_1_1_10_1_1 - 2.33777777777776*G0_1_1_11_1_0 + 2.31746031746031*G0_1_1_12_1_1 - 5.24952380952378*G0_1_1_13_1_0 - 8.44571428571424*G0_1_1_13_1_1 + 6.59047619047616*G0_1_1_14_1_0 + 5.13142857142855*G0_1_1_14_1_1 - 1.63047619047619*G0_1_1_15_1_0 + 3.89333333333331*G0_1_1_15_1_1 - 6.59047619047616*G0_1_1_16_1_0 - 3.2838095238095*G0_1_1_16_1_1 + 4.9638095238095*G0_1_1_17_1_0 - 0.559999999999987*G0_1_1_17_1_1 + 0.300952380952367*G0_1_1_18_1_0 + 8.44571428571424*G0_1_1_18_1_1 + 6.87999999999997*G0_1_1_19_1_0 - 4.57142857142856*G0_1_1_19_1_1;
    A[169] = 0.0;
    A[629] = -A[254] + 1.11746031746031*G0_1_0_0_0_0 + 1.11746031746031*G0_1_0_0_0_1 + 1.11746031746032*G0_1_0_1_0_0 - 4.87619047619046*G0_1_0_3_0_0 - 0.203174603174598*G0_1_0_3_0_1 - 3.55555555555554*G0_1_0_4_0_1 - 4.87619047619046*G0_1_0_5_0_0 - 4.67301587301586*G0_1_0_5_0_1 + 3.55555555555554*G0_1_0_6_0_1 - 1.11746031746031*G0_1_0_7_0_0 - 1.32063492063491*G0_1_0_7_0_1 - 1.11746031746032*G0_1_0_8_0_0 + 0.203174603174599*G0_1_0_8_0_1 + 9.75238095238092*G0_1_0_9_0_0 + 4.87619047619045*G0_1_0_9_0_1 + 1.11746031746031*G0_1_0_10_1_0 + 1.11746031746031*G0_1_0_10_1_1 + 1.11746031746032*G0_1_0_11_1_0 - 4.87619047619046*G0_1_0_13_1_0 - 0.203174603174598*G0_1_0_13_1_1 - 3.55555555555554*G0_1_0_14_1_1 - 4.87619047619046*G0_1_0_15_1_0 - 4.67301587301586*G0_1_0_15_1_1 + 3.55555555555554*G0_1_0_16_1_1 - 1.11746031746031*G0_1_0_17_1_0 - 1.32063492063491*G0_1_0_17_1_1 - 1.11746031746032*G0_1_0_18_1_0 + 0.203174603174599*G0_1_0_18_1_1 + 9.75238095238092*G0_1_0_19_1_0 + 4.87619047619045*G0_1_0_19_1_1 + 0.921058201058197*G0_1_1_0_0_0 + 0.921058201058198*G0_1_1_0_0_1 + 0.196402116402115*G0_1_1_1_0_0 - 0.880423280423275*G0_1_1_2_0_1 - 3.86031746031744*G0_1_1_3_0_0 - 1.76761904761904*G0_1_1_3_0_1 - 1.72698412698412*G0_1_1_4_0_0 - 2.74285714285713*G0_1_1_4_0_1 - 1.01587301587301*G0_1_1_5_0_0 - 2.58031746031745*G0_1_1_5_0_1 + 1.72698412698412*G0_1_1_6_0_0 + 2.53968253968252*G0_1_1_6_0_1 + 0.690793650793646*G0_1_1_7_0_0 + 2.25523809523809*G0_1_1_7_0_1 - 1.80825396825396*G0_1_1_8_0_0 + 1.76761904761904*G0_1_1_8_0_1 + 4.87619047619045*G0_1_1_9_0_0 + 0.487619047619044*G0_1_1_9_0_1 + 0.921058201058197*G0_1_1_10_1_0 + 0.921058201058198*G0_1_1_10_1_1 + 0.196402116402115*G0_1_1_11_1_0 - 0.880423280423275*G0_1_1_12_1_1 - 3.86031746031744*G0_1_1_13_1_0 - 1.76761904761904*G0_1_1_13_1_1 - 1.72698412698412*G0_1_1_14_1_0 - 2.74285714285713*G0_1_1_14_1_1 - 1.01587301587301*G0_1_1_15_1_0 - 2.58031746031745*G0_1_1_15_1_1 + 1.72698412698412*G0_1_1_16_1_0 + 2.53968253968252*G0_1_1_16_1_1 + 0.690793650793646*G0_1_1_17_1_0 + 2.25523809523809*G0_1_1_17_1_1 - 1.80825396825396*G0_1_1_18_1_0 + 1.76761904761904*G0_1_1_18_1_1 + 4.87619047619045*G0_1_1_19_1_0 + 0.487619047619044*G0_1_1_19_1_1;
    A[501] = A[36];
    A[204] = 0.0;
    A[646] = A[181];
    A[570] = 0.0;
    A[526] = A[61];
    A[239] = 0.0;
    A[563] = A[98];
    A[241] = A[706];
    A[298] = 0.0;
    A[447] = 0.0;
    A[327] = 0.0;
    A[468] = A[555] + 0.113015873015874*G0_0_1_1_0_0 + 0.0165079365079358*G0_0_1_2_0_1 - 0.0946031746031727*G0_0_1_3_0_0 + 0.147936507936509*G0_0_1_3_0_1 - 0.0184126984126998*G0_0_1_4_0_0 - 0.164444444444444*G0_0_1_4_0_1 - 0.0615873015873014*G0_0_1_5_0_0 - 0.0615873015873014*G0_0_1_5_0_1 + 0.0184126984126997*G0_0_1_6_0_0 + 0.0450793650793658*G0_0_1_6_0_1 + 0.0615873015873025*G0_0_1_7_0_0 + 0.0615873015873024*G0_0_1_7_0_1 - 0.174603174603176*G0_0_1_8_0_0 - 0.147936507936509*G0_0_1_8_0_1 + 0.156190476190474*G0_0_1_9_0_0 + 0.102857142857142*G0_0_1_9_0_1 + 0.113015873015874*G0_0_1_11_1_0 + 0.0165079365079358*G0_0_1_12_1_1 - 0.0946031746031727*G0_0_1_13_1_0 + 0.147936507936509*G0_0_1_13_1_1 - 0.0184126984126998*G0_0_1_14_1_0 - 0.164444444444444*G0_0_1_14_1_1 - 0.0615873015873014*G0_0_1_15_1_0 - 0.0615873015873014*G0_0_1_15_1_1 + 0.0184126984126997*G0_0_1_16_1_0 + 0.0450793650793658*G0_0_1_16_1_1 + 0.0615873015873025*G0_0_1_17_1_0 + 0.0615873015873024*G0_0_1_17_1_1 - 0.174603174603176*G0_0_1_18_1_0 - 0.147936507936509*G0_0_1_18_1_1 + 0.156190476190474*G0_0_1_19_1_0 + 0.102857142857142*G0_0_1_19_1_1 - 0.113015873015874*G0_1_0_1_0_0 - 0.0165079365079358*G0_1_0_2_0_1 + 0.0946031746031727*G0_1_0_3_0_0 - 0.147936507936509*G0_1_0_3_0_1 + 0.0184126984126998*G0_1_0_4_0_0 + 0.164444444444444*G0_1_0_4_0_1 + 0.0615873015873014*G0_1_0_5_0_0 + 0.0615873015873014*G0_1_0_5_0_1 - 0.0184126984126997*G0_1_0_6_0_0 - 0.0450793650793658*G0_1_0_6_0_1 - 0.0615873015873024*G0_1_0_7_0_0 - 0.0615873015873024*G0_1_0_7_0_1 + 0.174603174603176*G0_1_0_8_0_0 + 0.147936507936509*G0_1_0_8_0_1 - 0.156190476190474*G0_1_0_9_0_0 - 0.102857142857142*G0_1_0_9_0_1 - 0.113015873015874*G0_1_0_11_1_0 - 0.0165079365079358*G0_1_0_12_1_1 + 0.0946031746031727*G0_1_0_13_1_0 - 0.147936507936509*G0_1_0_13_1_1 + 0.0184126984126998*G0_1_0_14_1_0 + 0.164444444444444*G0_1_0_14_1_1 + 0.0615873015873014*G0_1_0_15_1_0 + 0.0615873015873014*G0_1_0_15_1_1 - 0.0184126984126997*G0_1_0_16_1_0 - 0.0450793650793658*G0_1_0_16_1_1 - 0.0615873015873024*G0_1_0_17_1_0 - 0.0615873015873024*G0_1_0_17_1_1 + 0.174603174603176*G0_1_0_18_1_0 + 0.147936507936509*G0_1_0_18_1_1 - 0.156190476190474*G0_1_0_19_1_0 - 0.102857142857142*G0_1_0_19_1_1;
    A[476] = -A[468] + 0.59047619047619*G0_0_0_0_0_0 + 0.59047619047619*G0_0_0_0_0_1 - 0.285714285714285*G0_0_0_1_0_0 - 0.0876190476190473*G0_0_0_2_0_1 + 0.0939682539682533*G0_0_0_3_0_0 - 0.26031746031746*G0_0_0_3_0_1 + 0.0711111111111119*G0_0_0_4_0_0 + 0.227301587301587*G0_0_0_4_0_1 + 0.325079365079364*G0_0_0_5_0_0 - 0.754285714285715*G0_0_0_5_0_1 - 0.0711111111111119*G0_0_0_6_0_0 + 0.251428571428572*G0_0_0_6_0_1 - 1.01714285714286*G0_0_0_7_0_0 + 0.0622222222222223*G0_0_0_7_0_1 + 0.712380952380951*G0_0_0_8_0_0 + 0.26031746031746*G0_0_0_8_0_1 - 0.419047619047617*G0_0_0_9_0_0 - 0.28952380952381*G0_0_0_9_0_1 + 0.59047619047619*G0_0_0_10_1_0 + 0.59047619047619*G0_0_0_10_1_1 - 0.285714285714285*G0_0_0_11_1_0 - 0.0876190476190473*G0_0_0_12_1_1 + 0.0939682539682533*G0_0_0_13_1_0 - 0.26031746031746*G0_0_0_13_1_1 + 0.0711111111111119*G0_0_0_14_1_0 + 0.227301587301587*G0_0_0_14_1_1 + 0.325079365079364*G0_0_0_15_1_0 - 0.754285714285715*G0_0_0_15_1_1 - 0.0711111111111119*G0_0_0_16_1_0 + 0.251428571428572*G0_0_0_16_1_1 - 1.01714285714286*G0_0_0_17_1_0 + 0.0622222222222223*G0_0_0_17_1_1 + 0.712380952380951*G0_0_0_18_1_0 + 0.26031746031746*G0_0_0_18_1_1 - 0.419047619047617*G0_0_0_19_1_0 - 0.28952380952381*G0_0_0_19_1_1 + 0.59047619047619*G0_1_0_0_0_0 + 0.59047619047619*G0_1_0_0_0_1 - 0.285714285714285*G0_1_0_1_0_0 - 0.0876190476190469*G0_1_0_2_0_1 + 0.0939682539682528*G0_1_0_3_0_0 - 0.26031746031746*G0_1_0_3_0_1 + 0.0711111111111124*G0_1_0_4_0_0 + 0.227301587301587*G0_1_0_4_0_1 + 0.325079365079364*G0_1_0_5_0_0 - 0.754285714285715*G0_1_0_5_0_1 - 0.0711111111111124*G0_1_0_6_0_0 + 0.251428571428572*G0_1_0_6_0_1 - 1.01714285714286*G0_1_0_7_0_0 + 0.062222222222222*G0_1_0_7_0_1 + 0.712380952380951*G0_1_0_8_0_0 + 0.26031746031746*G0_1_0_8_0_1 - 0.419047619047617*G0_1_0_9_0_0 - 0.289523809523809*G0_1_0_9_0_1 + 0.59047619047619*G0_1_0_10_1_0 + 0.59047619047619*G0_1_0_10_1_1 - 0.285714285714285*G0_1_0_11_1_0 - 0.0876190476190469*G0_1_0_12_1_1 + 0.0939682539682528*G0_1_0_13_1_0 - 0.26031746031746*G0_1_0_13_1_1 + 0.0711111111111124*G0_1_0_14_1_0 + 0.227301587301587*G0_1_0_14_1_1 + 0.325079365079364*G0_1_0_15_1_0 - 0.754285714285715*G0_1_0_15_1_1 - 0.0711111111111124*G0_1_0_16_1_0 + 0.251428571428572*G0_1_0_16_1_1 - 1.01714285714286*G0_1_0_17_1_0 + 0.062222222222222*G0_1_0_17_1_1 + 0.712380952380951*G0_1_0_18_1_0 + 0.26031746031746*G0_1_0_18_1_1 - 0.419047619047617*G0_1_0_19_1_0 - 0.289523809523809*G0_1_0_19_1_1;
    A[11] = A[476];
    A[348] = 0.0;
    A[29] = 0.0;
    A[730] = 0.0;
    A[381] = 0.0;
    A[833] = A[368];
    A[54] = 0.0;
    A[761] = 0.0;
    A[414] = 0.0;
    A[856] = A[43] - 0.101587301587301*G0_0_1_0_0_0 - 0.101587301587301*G0_0_1_0_0_1 - 0.101587301587301*G0_0_1_2_0_1 + 0.234920634920634*G0_0_1_3_0_0 - 0.0698412698412698*G0_0_1_4_0_0 + 0.266666666666664*G0_0_1_4_0_1 + 0.0317460317460318*G0_0_1_5_0_0 + 0.101587301587301*G0_0_1_5_0_1 + 0.0698412698412699*G0_0_1_6_0_0 + 0.101587301587301*G0_0_1_6_0_1 + 0.336507936507934*G0_0_1_7_0_0 + 0.266666666666665*G0_0_1_7_0_1 - 0.234920634920634*G0_0_1_8_0_0 - 0.266666666666666*G0_0_1_9_0_0 - 0.533333333333329*G0_0_1_9_0_1 - 0.101587301587301*G0_0_1_10_1_0 - 0.101587301587301*G0_0_1_10_1_1 - 0.101587301587301*G0_0_1_12_1_1 + 0.234920634920634*G0_0_1_13_1_0 - 0.0698412698412698*G0_0_1_14_1_0 + 0.266666666666664*G0_0_1_14_1_1 + 0.0317460317460318*G0_0_1_15_1_0 + 0.101587301587301*G0_0_1_15_1_1 + 0.0698412698412699*G0_0_1_16_1_0 + 0.101587301587301*G0_0_1_16_1_1 + 0.336507936507934*G0_0_1_17_1_0 + 0.266666666666665*G0_0_1_17_1_1 - 0.234920634920634*G0_0_1_18_1_0 - 0.266666666666666*G0_0_1_19_1_0 - 0.533333333333329*G0_0_1_19_1_1 + 0.101587301587301*G0_1_0_0_0_0 + 0.101587301587301*G0_1_0_0_0_1 + 0.101587301587301*G0_1_0_2_0_1 - 0.234920634920634*G0_1_0_3_0_0 + 0.0698412698412698*G0_1_0_4_0_0 - 0.266666666666664*G0_1_0_4_0_1 - 0.0317460317460318*G0_1_0_5_0_0 - 0.101587301587301*G0_1_0_5_0_1 - 0.0698412698412699*G0_1_0_6_0_0 - 0.101587301587301*G0_1_0_6_0_1 - 0.336507936507934*G0_1_0_7_0_0 - 0.266666666666665*G0_1_0_7_0_1 + 0.234920634920634*G0_1_0_8_0_0 + 0.266666666666666*G0_1_0_9_0_0 + 0.533333333333329*G0_1_0_9_0_1 + 0.101587301587301*G0_1_0_10_1_0 + 0.101587301587301*G0_1_0_10_1_1 + 0.101587301587301*G0_1_0_12_1_1 - 0.234920634920634*G0_1_0_13_1_0 + 0.0698412698412698*G0_1_0_14_1_0 - 0.266666666666664*G0_1_0_14_1_1 - 0.0317460317460318*G0_1_0_15_1_0 - 0.101587301587301*G0_1_0_15_1_1 - 0.0698412698412699*G0_1_0_16_1_0 - 0.101587301587301*G0_1_0_16_1_1 - 0.336507936507934*G0_1_0_17_1_0 - 0.266666666666665*G0_1_0_17_1_1 + 0.234920634920634*G0_1_0_18_1_0 + 0.266666666666666*G0_1_0_19_1_0 + 0.533333333333329*G0_1_0_19_1_1;
    A[780] = 0.0;
    A[891] = A[426];
    A[823] = 0.0;
    A[145] = 0.0;
    A[854] = 0.0;
    A[178] = 0.0;
    A[885] = A[420];
    A[492] = 0.0;
    A[199] = 0.0;
    A[655] = A[306] - 1.09206349206349*G0_0_1_0_0_0 - 1.09206349206349*G0_0_1_0_0_1 + 0.11174603174603*G0_0_1_1_0_0 + 0.213333333333332*G0_0_1_2_0_1 + 0.220952380952378*G0_0_1_3_0_0 - 0.0279365079365102*G0_0_1_3_0_1 - 0.0533333333333345*G0_0_1_4_0_0 + 0.0939682539682531*G0_0_1_4_0_1 + 0.647619047619043*G0_0_1_5_0_0 + 2.14603174603174*G0_0_1_5_0_1 + 0.0533333333333346*G0_0_1_6_0_0 - 1.26730158730158*G0_0_1_6_0_1 + 1.81587301587301*G0_0_1_7_0_0 + 0.317460317460315*G0_0_1_7_0_1 - 0.835555555555552*G0_0_1_8_0_0 + 0.0279365079365098*G0_0_1_8_0_1 - 0.868571428571422*G0_0_1_9_0_0 - 0.411428571428567*G0_0_1_9_0_1 - 1.09206349206349*G0_0_1_10_1_0 - 1.09206349206349*G0_0_1_10_1_1 + 0.11174603174603*G0_0_1_11_1_0 + 0.213333333333332*G0_0_1_12_1_1 + 0.220952380952378*G0_0_1_13_1_0 - 0.0279365079365102*G0_0_1_13_1_1 - 0.0533333333333345*G0_0_1_14_1_0 + 0.0939682539682531*G0_0_1_14_1_1 + 0.647619047619043*G0_0_1_15_1_0 + 2.14603174603174*G0_0_1_15_1_1 + 0.0533333333333346*G0_0_1_16_1_0 - 1.26730158730158*G0_0_1_16_1_1 + 1.81587301587301*G0_0_1_17_1_0 + 0.317460317460315*G0_0_1_17_1_1 - 0.835555555555552*G0_0_1_18_1_0 + 0.0279365079365098*G0_0_1_18_1_1 - 0.868571428571422*G0_0_1_19_1_0 - 0.411428571428567*G0_0_1_19_1_1 + 1.09206349206349*G0_1_0_0_0_0 + 1.09206349206349*G0_1_0_0_0_1 - 0.11174603174603*G0_1_0_1_0_0 - 0.213333333333332*G0_1_0_2_0_1 - 0.220952380952378*G0_1_0_3_0_0 + 0.0279365079365103*G0_1_0_3_0_1 + 0.0533333333333346*G0_1_0_4_0_0 - 0.0939682539682531*G0_1_0_4_0_1 - 0.647619047619043*G0_1_0_5_0_0 - 2.14603174603174*G0_1_0_5_0_1 - 0.0533333333333346*G0_1_0_6_0_0 + 1.26730158730158*G0_1_0_6_0_1 - 1.81587301587301*G0_1_0_7_0_0 - 0.317460317460315*G0_1_0_7_0_1 + 0.835555555555553*G0_1_0_8_0_0 - 0.0279365079365099*G0_1_0_8_0_1 + 0.868571428571421*G0_1_0_9_0_0 + 0.411428571428567*G0_1_0_9_0_1 + 1.09206349206349*G0_1_0_10_1_0 + 1.09206349206349*G0_1_0_10_1_1 - 0.11174603174603*G0_1_0_11_1_0 - 0.213333333333332*G0_1_0_12_1_1 - 0.220952380952378*G0_1_0_13_1_0 + 0.0279365079365103*G0_1_0_13_1_1 + 0.0533333333333346*G0_1_0_14_1_0 - 0.0939682539682531*G0_1_0_14_1_1 - 0.647619047619043*G0_1_0_15_1_0 - 2.14603174603174*G0_1_0_15_1_1 - 0.0533333333333346*G0_1_0_16_1_0 + 1.26730158730158*G0_1_0_16_1_1 - 1.81587301587301*G0_1_0_17_1_0 - 0.317460317460315*G0_1_0_17_1_1 + 0.835555555555553*G0_1_0_18_1_0 - 0.0279365079365099*G0_1_0_18_1_1 + 0.868571428571421*G0_1_0_19_1_0 + 0.411428571428567*G0_1_0_19_1_1;
    A[579] = 0.0;
    A[519] = 0.0;
    A[236] = 0.0;
    A[682] = A[217];
    A[602] = 0.0;
    A[554] = 0.0;
    A[713] = -A[245] - 0.406349206349206*G0_0_1_0_0_0 - 0.406349206349206*G0_0_1_0_0_1 + 0.406349206349206*G0_0_1_1_0_0 + 1.93015873015872*G0_0_1_2_0_1 - 1.93015873015872*G0_0_1_3_0_0 + 0.0507936507936547*G0_0_1_3_0_1 + 2.64126984126982*G0_0_1_4_0_0 - 0.863492063492061*G0_0_1_4_0_1 + 1.93015873015872*G0_0_1_5_0_0 + 1.98095238095237*G0_0_1_5_0_1 - 2.64126984126983*G0_0_1_6_0_0 - 3.50476190476189*G0_0_1_6_0_1 - 0.0507936507936502*G0_0_1_7_0_1 - 0.0507936507936545*G0_0_1_8_0_1 + 0.914285714285711*G0_0_1_9_0_1 - 0.406349206349206*G0_0_1_10_1_0 - 0.406349206349206*G0_0_1_10_1_1 + 0.406349206349206*G0_0_1_11_1_0 + 1.93015873015872*G0_0_1_12_1_1 - 1.93015873015872*G0_0_1_13_1_0 + 0.0507936507936547*G0_0_1_13_1_1 + 2.64126984126982*G0_0_1_14_1_0 - 0.863492063492061*G0_0_1_14_1_1 + 1.93015873015872*G0_0_1_15_1_0 + 1.98095238095237*G0_0_1_15_1_1 - 2.64126984126983*G0_0_1_16_1_0 - 3.50476190476189*G0_0_1_16_1_1 - 0.0507936507936502*G0_0_1_17_1_1 - 0.0507936507936545*G0_0_1_18_1_1 + 0.914285714285711*G0_0_1_19_1_1 - 0.778835978835975*G0_1_1_0_0_0 - 0.778835978835975*G0_1_1_0_0_1 + 0.677248677248678*G0_1_1_1_0_0 + 2.7089947089947*G0_1_1_2_0_1 - 2.38730158730158*G0_1_1_3_0_0 + 0.101587301587307*G0_1_1_3_0_1 + 4.92698412698411*G0_1_1_4_0_0 + 0.406349206349207*G0_1_1_4_0_1 - 0.355555555555559*G0_1_1_5_0_0 + 1.32063492063491*G0_1_1_5_0_1 - 4.92698412698411*G0_1_1_6_0_0 - 3.25079365079363*G0_1_1_6_0_1 + 0.0507936507936511*G0_1_1_7_0_0 - 1.62539682539682*G0_1_1_7_0_1 + 0.050793650793645*G0_1_1_8_0_0 - 0.101587301587306*G0_1_1_8_0_1 + 2.74285714285714*G0_1_1_9_0_0 + 1.21904761904761*G0_1_1_9_0_1 - 0.778835978835975*G0_1_1_10_1_0 - 0.778835978835975*G0_1_1_10_1_1 + 0.677248677248678*G0_1_1_11_1_0 + 2.7089947089947*G0_1_1_12_1_1 - 2.38730158730158*G0_1_1_13_1_0 + 0.101587301587307*G0_1_1_13_1_1 + 4.92698412698411*G0_1_1_14_1_0 + 0.406349206349207*G0_1_1_14_1_1 - 0.355555555555559*G0_1_1_15_1_0 + 1.32063492063491*G0_1_1_15_1_1 - 4.92698412698411*G0_1_1_16_1_0 - 3.25079365079363*G0_1_1_16_1_1 + 0.0507936507936511*G0_1_1_17_1_0 - 1.62539682539682*G0_1_1_17_1_1 + 0.050793650793645*G0_1_1_18_1_0 - 0.101587301587306*G0_1_1_18_1_1 + 2.74285714285714*G0_1_1_19_1_0 + 1.21904761904761*G0_1_1_19_1_1;
    A[186] = -A[713] - 3.1153439153439*G0_0_0_0_0_0 - 3.1153439153439*G0_0_0_0_0_1 + 1.65248677248677*G0_0_0_1_0_0 + 7.13820105820101*G0_0_0_2_0_1 - 5.40444444444441*G0_0_0_3_0_0 - 0.65015873015872*G0_0_0_3_0_1 + 13.9784126984126*G0_0_0_4_0_0 + 3.73841269841268*G0_0_0_4_0_1 + 1.015873015873*G0_0_0_5_0_0 + 5.48571428571425*G0_0_0_5_0_1 - 13.9784126984126*G0_0_0_6_0_0 - 9.50857142857137*G0_0_0_6_0_1 + 3.65714285714284*G0_0_0_7_0_0 - 0.812698412698407*G0_0_0_7_0_1 - 2.19428571428571*G0_0_0_8_0_0 + 0.650158730158723*G0_0_0_8_0_1 + 4.38857142857141*G0_0_0_9_0_0 - 2.92571428571427*G0_0_0_9_0_1 - 3.1153439153439*G0_0_0_10_1_0 - 3.1153439153439*G0_0_0_10_1_1 + 1.65248677248677*G0_0_0_11_1_0 + 7.13820105820101*G0_0_0_12_1_1 - 5.40444444444441*G0_0_0_13_1_0 - 0.65015873015872*G0_0_0_13_1_1 + 13.9784126984126*G0_0_0_14_1_0 + 3.73841269841268*G0_0_0_14_1_1 + 1.015873015873*G0_0_0_15_1_0 + 5.48571428571425*G0_0_0_15_1_1 - 13.9784126984126*G0_0_0_16_1_0 - 9.50857142857137*G0_0_0_16_1_1 + 3.65714285714284*G0_0_0_17_1_0 - 0.812698412698407*G0_0_0_17_1_1 - 2.19428571428571*G0_0_0_18_1_0 + 0.650158730158723*G0_0_0_18_1_1 + 4.38857142857141*G0_0_0_19_1_0 - 2.92571428571427*G0_0_0_19_1_1 - 0.609523809523811*G0_0_1_0_0_0 - 0.609523809523811*G0_0_1_0_0_1 + 0.670476190476189*G0_0_1_1_0_0 + 4.63238095238093*G0_0_1_2_0_1 - 2.86476190476189*G0_0_1_3_0_0 - 0.24380952380952*G0_0_1_3_0_1 + 9.20380952380947*G0_0_1_4_0_0 + 2.62095238095237*G0_0_1_4_0_1 + 2.74285714285712*G0_0_1_5_0_0 + 2.43809523809523*G0_0_1_5_0_1 - 9.20380952380948*G0_0_1_6_0_0 - 6.46095238095235*G0_0_1_6_0_1 + 0.304761904761901*G0_0_1_7_0_1 - 0.0609523809523865*G0_0_1_8_0_0 + 0.243809523809521*G0_0_1_8_0_1 + 0.121904761904766*G0_0_1_9_0_0 - 2.92571428571427*G0_0_1_9_0_1 - 0.609523809523811*G0_0_1_10_1_0 - 0.609523809523811*G0_0_1_10_1_1 + 0.670476190476189*G0_0_1_11_1_0 + 4.63238095238093*G0_0_1_12_1_1 - 2.86476190476189*G0_0_1_13_1_0 - 0.24380952380952*G0_0_1_13_1_1 + 9.20380952380947*G0_0_1_14_1_0 + 2.62095238095237*G0_0_1_14_1_1 + 2.74285714285712*G0_0_1_15_1_0 + 2.43809523809523*G0_0_1_15_1_1 - 9.20380952380948*G0_0_1_16_1_0 - 6.46095238095235*G0_0_1_16_1_1 + 0.304761904761901*G0_0_1_17_1_1 - 0.0609523809523865*G0_0_1_18_1_0 + 0.243809523809521*G0_0_1_18_1_1 + 0.121904761904766*G0_0_1_19_1_0 - 2.92571428571427*G0_0_1_19_1_1 - 0.609523809523811*G0_1_0_0_0_0 - 0.609523809523811*G0_1_0_0_0_1 + 0.670476190476189*G0_1_0_1_0_0 + 4.63238095238093*G0_1_0_2_0_1 - 2.86476190476189*G0_1_0_3_0_0 - 0.24380952380952*G0_1_0_3_0_1 + 9.20380952380947*G0_1_0_4_0_0 + 2.62095238095237*G0_1_0_4_0_1 + 2.74285714285712*G0_1_0_5_0_0 + 2.43809523809523*G0_1_0_5_0_1 - 9.20380952380948*G0_1_0_6_0_0 - 6.46095238095235*G0_1_0_6_0_1 + 0.304761904761901*G0_1_0_7_0_1 - 0.0609523809523865*G0_1_0_8_0_0 + 0.243809523809521*G0_1_0_8_0_1 + 0.121904761904766*G0_1_0_9_0_0 - 2.92571428571427*G0_1_0_9_0_1 - 0.609523809523811*G0_1_0_10_1_0 - 0.609523809523811*G0_1_0_10_1_1 + 0.670476190476189*G0_1_0_11_1_0 + 4.63238095238093*G0_1_0_12_1_1 - 2.86476190476189*G0_1_0_13_1_0 - 0.24380952380952*G0_1_0_13_1_1 + 9.20380952380947*G0_1_0_14_1_0 + 2.62095238095237*G0_1_0_14_1_1 + 2.74285714285712*G0_1_0_15_1_0 + 2.43809523809523*G0_1_0_15_1_1 - 9.20380952380948*G0_1_0_16_1_0 - 6.46095238095235*G0_1_0_16_1_1 + 0.304761904761901*G0_1_0_17_1_1 - 0.0609523809523865*G0_1_0_18_1_0 + 0.243809523809521*G0_1_0_18_1_1 + 0.121904761904766*G0_1_0_19_1_0 - 2.92571428571427*G0_1_0_19_1_1 - 5.24190476190474*G0_1_1_0_0_0 - 5.24190476190474*G0_1_1_0_0_1 + 1.34095238095238*G0_1_1_1_0_0 + 5.24190476190474*G0_1_1_2_0_1 - 3.1695238095238*G0_1_1_3_0_0 - 0.487619047619039*G0_1_1_3_0_1 + 8.89904761904758*G0_1_1_4_0_0 + 2.31619047619046*G0_1_1_4_0_1 + 8.89904761904757*G0_1_1_5_0_1 - 8.89904761904758*G0_1_1_6_0_0 - 8.89904761904757*G0_1_1_6_0_1 + 6.58285714285711*G0_1_1_7_0_0 - 2.31619047619047*G0_1_1_7_0_1 - 2.68190476190475*G0_1_1_8_0_0 + 0.487619047619041*G0_1_1_8_0_1 + 3.16952380952381*G0_1_1_9_0_0 - 5.24190476190474*G0_1_1_10_1_0 - 5.24190476190474*G0_1_1_10_1_1 + 1.34095238095238*G0_1_1_11_1_0 + 5.24190476190474*G0_1_1_12_1_1 - 3.1695238095238*G0_1_1_13_1_0 - 0.487619047619039*G0_1_1_13_1_1 + 8.89904761904758*G0_1_1_14_1_0 + 2.31619047619046*G0_1_1_14_1_1 + 8.89904761904757*G0_1_1_15_1_1 - 8.89904761904758*G0_1_1_16_1_0 - 8.89904761904757*G0_1_1_16_1_1 + 6.58285714285711*G0_1_1_17_1_0 - 2.31619047619047*G0_1_1_17_1_1 - 2.68190476190475*G0_1_1_18_1_0 + 0.487619047619041*G0_1_1_18_1_1 + 3.16952380952381*G0_1_1_19_1_0;
    A[633] = 0.0;
    A[248] = A[713];
    A[668] = 0.0;
    A[275] = A[740];
    A[703] = 0.0;
    A[302] = A[767];
    A[477] = A[360] + 0.101587301587301*G0_0_1_1_0_0 - 0.101587301587301*G0_0_1_2_0_1 - 0.0317460317460302*G0_0_1_3_0_0 + 0.0698412698412698*G0_0_1_3_0_1 - 0.0698412698412693*G0_0_1_4_0_0 + 0.0317460317460325*G0_0_1_4_0_1 - 0.234920634920632*G0_0_1_5_0_0 - 0.234920634920637*G0_0_1_5_0_1 + 0.0698412698412694*G0_0_1_6_0_0 + 0.336507936507935*G0_0_1_6_0_1 + 0.234920634920631*G0_0_1_7_0_0 + 0.234920634920635*G0_0_1_7_0_1 - 0.336507936507933*G0_0_1_8_0_0 - 0.0698412698412698*G0_0_1_8_0_1 + 0.266666666666662*G0_0_1_9_0_0 - 0.266666666666668*G0_0_1_9_0_1 + 0.101587301587301*G0_0_1_11_1_0 - 0.101587301587301*G0_0_1_12_1_1 - 0.0317460317460302*G0_0_1_13_1_0 + 0.0698412698412698*G0_0_1_13_1_1 - 0.0698412698412693*G0_0_1_14_1_0 + 0.0317460317460325*G0_0_1_14_1_1 - 0.234920634920632*G0_0_1_15_1_0 - 0.234920634920637*G0_0_1_15_1_1 + 0.0698412698412694*G0_0_1_16_1_0 + 0.336507936507935*G0_0_1_16_1_1 + 0.234920634920631*G0_0_1_17_1_0 + 0.234920634920635*G0_0_1_17_1_1 - 0.336507936507933*G0_0_1_18_1_0 - 0.0698412698412698*G0_0_1_18_1_1 + 0.266666666666662*G0_0_1_19_1_0 - 0.266666666666668*G0_0_1_19_1_1 - 0.101587301587301*G0_1_0_1_0_0 + 0.101587301587301*G0_1_0_2_0_1 + 0.0317460317460302*G0_1_0_3_0_0 - 0.0698412698412698*G0_1_0_3_0_1 + 0.0698412698412693*G0_1_0_4_0_0 - 0.0317460317460325*G0_1_0_4_0_1 + 0.234920634920632*G0_1_0_5_0_0 + 0.234920634920636*G0_1_0_5_0_1 - 0.0698412698412694*G0_1_0_6_0_0 - 0.336507936507936*G0_1_0_6_0_1 - 0.234920634920631*G0_1_0_7_0_0 - 0.234920634920635*G0_1_0_7_0_1 + 0.336507936507933*G0_1_0_8_0_0 + 0.0698412698412698*G0_1_0_8_0_1 - 0.266666666666662*G0_1_0_9_0_0 + 0.266666666666668*G0_1_0_9_0_1 - 0.101587301587301*G0_1_0_11_1_0 + 0.101587301587301*G0_1_0_12_1_1 + 0.0317460317460302*G0_1_0_13_1_0 - 0.0698412698412698*G0_1_0_13_1_1 + 0.0698412698412693*G0_1_0_14_1_0 - 0.0317460317460325*G0_1_0_14_1_1 + 0.234920634920632*G0_1_0_15_1_0 + 0.234920634920636*G0_1_0_15_1_1 - 0.0698412698412694*G0_1_0_16_1_0 - 0.336507936507936*G0_1_0_16_1_1 - 0.234920634920631*G0_1_0_17_1_0 - 0.234920634920635*G0_1_0_17_1_1 + 0.336507936507933*G0_1_0_18_1_0 + 0.0698412698412698*G0_1_0_18_1_1 - 0.266666666666662*G0_1_0_19_1_0 + 0.266666666666668*G0_1_0_19_1_1;
    A[341] = A[806];
    A[20] = 0.0;
    A[424] = A[134] - 0.579047619047616*G0_0_1_0_0_0 - 0.579047619047616*G0_0_1_0_0_1 - 0.639999999999998*G0_0_1_1_0_0 + 0.609523809523811*G0_0_1_2_0_1 + 0.990476190476181*G0_0_1_3_0_0 - 0.868571428571427*G0_0_1_3_0_1 + 1.44761904761905*G0_0_1_4_0_0 + 2.05714285714284*G0_0_1_4_0_1 + 2.2095238095238*G0_0_1_5_0_0 + 2.17904761904761*G0_0_1_5_0_1 - 1.44761904761905*G0_0_1_6_0_0 - 2.20952380952381*G0_0_1_6_0_1 + 0.746666666666656*G0_0_1_7_0_0 + 0.777142857142844*G0_0_1_7_0_1 + 0.472380952380958*G0_0_1_8_0_0 + 0.868571428571427*G0_0_1_8_0_1 - 3.19999999999998*G0_0_1_9_0_0 - 2.83428571428569*G0_0_1_9_0_1 - 0.579047619047616*G0_0_1_10_1_0 - 0.579047619047616*G0_0_1_10_1_1 - 0.639999999999998*G0_0_1_11_1_0 + 0.609523809523811*G0_0_1_12_1_1 + 0.990476190476181*G0_0_1_13_1_0 - 0.868571428571427*G0_0_1_13_1_1 + 1.44761904761905*G0_0_1_14_1_0 + 2.05714285714284*G0_0_1_14_1_1 + 2.2095238095238*G0_0_1_15_1_0 + 2.17904761904761*G0_0_1_15_1_1 - 1.44761904761905*G0_0_1_16_1_0 - 2.20952380952381*G0_0_1_16_1_1 + 0.746666666666656*G0_0_1_17_1_0 + 0.777142857142844*G0_0_1_17_1_1 + 0.472380952380958*G0_0_1_18_1_0 + 0.868571428571427*G0_0_1_18_1_1 - 3.19999999999998*G0_0_1_19_1_0 - 2.83428571428569*G0_0_1_19_1_1 + 0.579047619047615*G0_1_0_0_0_0 + 0.579047619047616*G0_1_0_0_0_1 + 0.639999999999998*G0_1_0_1_0_0 - 0.609523809523811*G0_1_0_2_0_1 - 0.99047619047618*G0_1_0_3_0_0 + 0.868571428571427*G0_1_0_3_0_1 - 1.44761904761905*G0_1_0_4_0_0 - 2.05714285714284*G0_1_0_4_0_1 - 2.2095238095238*G0_1_0_5_0_0 - 2.17904761904761*G0_1_0_5_0_1 + 1.44761904761905*G0_1_0_6_0_0 + 2.20952380952381*G0_1_0_6_0_1 - 0.746666666666655*G0_1_0_7_0_0 - 0.777142857142843*G0_1_0_7_0_1 - 0.472380952380958*G0_1_0_8_0_0 - 0.868571428571427*G0_1_0_8_0_1 + 3.19999999999998*G0_1_0_9_0_0 + 2.83428571428569*G0_1_0_9_0_1 + 0.579047619047615*G0_1_0_10_1_0 + 0.579047619047616*G0_1_0_10_1_1 + 0.639999999999998*G0_1_0_11_1_0 - 0.609523809523811*G0_1_0_12_1_1 - 0.99047619047618*G0_1_0_13_1_0 + 0.868571428571427*G0_1_0_13_1_1 - 1.44761904761905*G0_1_0_14_1_0 - 2.05714285714284*G0_1_0_14_1_1 - 2.2095238095238*G0_1_0_15_1_0 - 2.17904761904761*G0_1_0_15_1_1 + 1.44761904761905*G0_1_0_16_1_0 + 2.20952380952381*G0_1_0_16_1_1 - 0.746666666666655*G0_1_0_17_1_0 - 0.777142857142843*G0_1_0_17_1_1 - 0.472380952380958*G0_1_0_18_1_0 - 0.868571428571427*G0_1_0_18_1_1 + 3.19999999999998*G0_1_0_19_1_0 + 2.83428571428569*G0_1_0_19_1_1;
    A[372] = -3.49460317460315*G0_0_0_0_0_0 - 3.49460317460315*G0_0_0_0_0_1 + 1.54412698412698*G0_0_0_1_0_0 - 0.77206349206349*G0_0_0_2_0_1 + 3.53523809523807*G0_0_0_3_0_0 + 1.95047619047618*G0_0_0_3_0_1 + 2.07238095238095*G0_0_0_4_0_0 + 5.9733333333333*G0_0_0_4_0_1 - 9.38666666666664*G0_0_0_5_0_0 - 0.609523809523822*G0_0_0_5_0_1 - 2.07238095238095*G0_0_0_6_0_0 + 4.87619047619047*G0_0_0_6_0_1 + 6.46095238095234*G0_0_0_7_0_0 - 2.31619047619047*G0_0_0_7_0_1 - 4.51047619047616*G0_0_0_8_0_0 - 1.95047619047618*G0_0_0_8_0_1 + 5.85142857142857*G0_0_0_9_0_0 - 3.65714285714283*G0_0_0_9_0_1 - 3.49460317460315*G0_0_0_10_1_0 - 3.49460317460315*G0_0_0_10_1_1 + 1.54412698412698*G0_0_0_11_1_0 - 0.77206349206349*G0_0_0_12_1_1 + 3.53523809523807*G0_0_0_13_1_0 + 1.95047619047618*G0_0_0_13_1_1 + 2.07238095238095*G0_0_0_14_1_0 + 5.9733333333333*G0_0_0_14_1_1 - 9.38666666666664*G0_0_0_15_1_0 - 0.609523809523822*G0_0_0_15_1_1 - 2.07238095238095*G0_0_0_16_1_0 + 4.87619047619047*G0_0_0_16_1_1 + 6.46095238095234*G0_0_0_17_1_0 - 2.31619047619047*G0_0_0_17_1_1 - 4.51047619047616*G0_0_0_18_1_0 - 1.95047619047618*G0_0_0_18_1_1 + 5.85142857142857*G0_0_0_19_1_0 - 3.65714285714283*G0_0_0_19_1_1 - 0.954920634920627*G0_0_1_0_0_0 - 0.954920634920627*G0_0_1_0_0_1 - 0.142222222222222*G0_0_1_1_0_0 - 0.142222222222221*G0_0_1_2_0_1 + 5.91238095238092*G0_0_1_3_0_0 + 1.8895238095238*G0_0_1_3_0_1 + 1.88952380952381*G0_0_1_4_0_0 + 5.91238095238092*G0_0_1_4_0_1 - 0.0609523809523859*G0_0_1_5_0_0 + 1.09714285714284*G0_0_1_5_0_1 - 1.8895238095238*G0_0_1_6_0_0 + 1.09714285714284*G0_0_1_7_0_0 - 0.0609523809523873*G0_0_1_7_0_1 - 1.8895238095238*G0_0_1_8_0_1 - 5.85142857142853*G0_0_1_9_0_0 - 5.85142857142854*G0_0_1_9_0_1 - 0.954920634920627*G0_0_1_10_1_0 - 0.954920634920627*G0_0_1_10_1_1 - 0.142222222222222*G0_0_1_11_1_0 - 0.142222222222221*G0_0_1_12_1_1 + 5.91238095238092*G0_0_1_13_1_0 + 1.8895238095238*G0_0_1_13_1_1 + 1.88952380952381*G0_0_1_14_1_0 + 5.91238095238092*G0_0_1_14_1_1 - 0.0609523809523859*G0_0_1_15_1_0 + 1.09714285714284*G0_0_1_15_1_1 - 1.8895238095238*G0_0_1_16_1_0 + 1.09714285714284*G0_0_1_17_1_0 - 0.0609523809523873*G0_0_1_17_1_1 - 1.8895238095238*G0_0_1_18_1_1 - 5.85142857142853*G0_0_1_19_1_0 - 5.85142857142854*G0_0_1_19_1_1 - 0.954920634920627*G0_1_0_0_0_0 - 0.954920634920627*G0_1_0_0_0_1 - 0.142222222222222*G0_1_0_1_0_0 - 0.142222222222221*G0_1_0_2_0_1 + 5.91238095238092*G0_1_0_3_0_0 + 1.8895238095238*G0_1_0_3_0_1 + 1.88952380952381*G0_1_0_4_0_0 + 5.91238095238092*G0_1_0_4_0_1 - 0.0609523809523859*G0_1_0_5_0_0 + 1.09714285714284*G0_1_0_5_0_1 - 1.8895238095238*G0_1_0_6_0_0 + 1.09714285714284*G0_1_0_7_0_0 - 0.0609523809523873*G0_1_0_7_0_1 - 1.8895238095238*G0_1_0_8_0_1 - 5.85142857142853*G0_1_0_9_0_0 - 5.85142857142854*G0_1_0_9_0_1 - 0.954920634920627*G0_1_0_10_1_0 - 0.954920634920627*G0_1_0_10_1_1 - 0.142222222222222*G0_1_0_11_1_0 - 0.142222222222221*G0_1_0_12_1_1 + 5.91238095238092*G0_1_0_13_1_0 + 1.8895238095238*G0_1_0_13_1_1 + 1.88952380952381*G0_1_0_14_1_0 + 5.91238095238092*G0_1_0_14_1_1 - 0.0609523809523859*G0_1_0_15_1_0 + 1.09714285714284*G0_1_0_15_1_1 - 1.8895238095238*G0_1_0_16_1_0 + 1.09714285714284*G0_1_0_17_1_0 - 0.0609523809523873*G0_1_0_17_1_1 - 1.8895238095238*G0_1_0_18_1_1 - 5.85142857142853*G0_1_0_19_1_0 - 5.85142857142854*G0_1_0_19_1_1 - 3.49460317460315*G0_1_1_0_0_0 - 3.49460317460316*G0_1_1_0_0_1 - 0.772063492063489*G0_1_1_1_0_0 + 1.54412698412698*G0_1_1_2_0_1 + 5.9733333333333*G0_1_1_3_0_0 + 2.07238095238095*G0_1_1_3_0_1 + 1.95047619047619*G0_1_1_4_0_0 + 3.53523809523808*G0_1_1_4_0_1 - 2.31619047619047*G0_1_1_5_0_0 + 6.46095238095234*G0_1_1_5_0_1 - 1.95047619047618*G0_1_1_6_0_0 - 4.51047619047617*G0_1_1_6_0_1 - 0.609523809523816*G0_1_1_7_0_0 - 9.38666666666663*G0_1_1_7_0_1 + 4.87619047619046*G0_1_1_8_0_0 - 2.07238095238094*G0_1_1_8_0_1 - 3.65714285714284*G0_1_1_9_0_0 + 5.85142857142855*G0_1_1_9_0_1 - 3.49460317460315*G0_1_1_10_1_0 - 3.49460317460316*G0_1_1_10_1_1 - 0.772063492063489*G0_1_1_11_1_0 + 1.54412698412698*G0_1_1_12_1_1 + 5.9733333333333*G0_1_1_13_1_0 + 2.07238095238095*G0_1_1_13_1_1 + 1.95047619047619*G0_1_1_14_1_0 + 3.53523809523808*G0_1_1_14_1_1 - 2.31619047619047*G0_1_1_15_1_0 + 6.46095238095234*G0_1_1_15_1_1 - 1.95047619047618*G0_1_1_16_1_0 - 4.51047619047617*G0_1_1_16_1_1 - 0.609523809523816*G0_1_1_17_1_0 - 9.38666666666663*G0_1_1_17_1_1 + 4.87619047619046*G0_1_1_18_1_0 - 2.07238095238094*G0_1_1_18_1_1 - 3.65714285714284*G0_1_1_19_1_0 + 5.85142857142855*G0_1_1_19_1_1;
    A[47] = 0.0;
    A[762] = 0.0;
    A[451] = 0.0;
    A[407] = 0.0;
    A[82] = 0.0;
    A[791] = 0.0;
    A[10] = A[475];
    A[97] = A[562];
    A[812] = 0.0;
    A[41] = A[506];
    A[120] = A[585];
    A[845] = 0.0;
    A[155] = A[620];
    A[878] = 0.0;
    A[483] = 0.0;
    A[190] = A[655];
    A[584] = 0.0;
    A[512] = 0.0;
    A[229] = 0.0;
    A[609] = 0.0;
    A[549] = 0.0;
    A[505] = A[40];
    A[642] = 0.0;
    A[255] = 0.0;
    A[663] = 0.0;
    A[284] = A[749];
    A[700] = 0.0;
    A[313] = A[865] - 0.639999999999994*G0_0_1_0_0_0 - 0.639999999999994*G0_0_1_0_0_1 - 0.609523809523807*G0_0_1_1_0_0 - 0.579047619047617*G0_0_1_2_0_1 + 0.761904761904756*G0_0_1_3_0_0 - 1.44761904761905*G0_0_1_3_0_1 + 0.0304761904761927*G0_0_1_4_0_0 + 2.2095238095238*G0_0_1_4_0_1 - 0.396190476190478*G0_0_1_5_0_0 + 0.472380952380942*G0_0_1_5_0_1 - 0.0304761904761923*G0_0_1_6_0_0 + 0.74666666666667*G0_0_1_6_0_1 + 1.85904761904761*G0_0_1_7_0_0 + 0.990476190476187*G0_0_1_7_0_1 - 0.609523809523806*G0_0_1_8_0_0 + 1.44761904761905*G0_0_1_8_0_1 - 0.365714285714278*G0_0_1_9_0_0 - 3.19999999999999*G0_0_1_9_0_1 - 0.639999999999994*G0_0_1_10_1_0 - 0.639999999999994*G0_0_1_10_1_1 - 0.609523809523807*G0_0_1_11_1_0 - 0.579047619047617*G0_0_1_12_1_1 + 0.761904761904756*G0_0_1_13_1_0 - 1.44761904761905*G0_0_1_13_1_1 + 0.0304761904761927*G0_0_1_14_1_0 + 2.2095238095238*G0_0_1_14_1_1 - 0.396190476190478*G0_0_1_15_1_0 + 0.472380952380942*G0_0_1_15_1_1 - 0.0304761904761923*G0_0_1_16_1_0 + 0.74666666666667*G0_0_1_16_1_1 + 1.85904761904761*G0_0_1_17_1_0 + 0.990476190476187*G0_0_1_17_1_1 - 0.609523809523806*G0_0_1_18_1_0 + 1.44761904761905*G0_0_1_18_1_1 - 0.365714285714278*G0_0_1_19_1_0 - 3.19999999999999*G0_0_1_19_1_1 + 0.639999999999994*G0_1_0_0_0_0 + 0.639999999999994*G0_1_0_0_0_1 + 0.609523809523808*G0_1_0_1_0_0 + 0.579047619047617*G0_1_0_2_0_1 - 0.761904761904756*G0_1_0_3_0_0 + 1.44761904761905*G0_1_0_3_0_1 - 0.0304761904761927*G0_1_0_4_0_0 - 2.2095238095238*G0_1_0_4_0_1 + 0.396190476190478*G0_1_0_5_0_0 - 0.472380952380942*G0_1_0_5_0_1 + 0.0304761904761923*G0_1_0_6_0_0 - 0.74666666666667*G0_1_0_6_0_1 - 1.85904761904761*G0_1_0_7_0_0 - 0.990476190476187*G0_1_0_7_0_1 + 0.609523809523806*G0_1_0_8_0_0 - 1.44761904761905*G0_1_0_8_0_1 + 0.365714285714278*G0_1_0_9_0_0 + 3.19999999999999*G0_1_0_9_0_1 + 0.639999999999994*G0_1_0_10_1_0 + 0.639999999999994*G0_1_0_10_1_1 + 0.609523809523808*G0_1_0_11_1_0 + 0.579047619047617*G0_1_0_12_1_1 - 0.761904761904756*G0_1_0_13_1_0 + 1.44761904761905*G0_1_0_13_1_1 - 0.0304761904761927*G0_1_0_14_1_0 - 2.2095238095238*G0_1_0_14_1_1 + 0.396190476190478*G0_1_0_15_1_0 - 0.472380952380942*G0_1_0_15_1_1 + 0.0304761904761923*G0_1_0_16_1_0 - 0.74666666666667*G0_1_0_16_1_1 - 1.85904761904761*G0_1_0_17_1_0 - 0.990476190476187*G0_1_0_17_1_1 + 0.609523809523806*G0_1_0_18_1_0 - 1.44761904761905*G0_1_0_18_1_1 + 0.365714285714278*G0_1_0_19_1_0 + 3.19999999999999*G0_1_0_19_1_1;
    A[261] = 0.0;
    A[330] = A[795];
    A[286] = 0.0;
    A[744] = A[279];
    A[435] = 0.0;
    A[371] = A[836];
    A[323] = 0.0;
    A[771] = A[306];
    A[464] = 0.0;
    A[400] = A[865];
    A[77] = 0.0;
    A[798] = A[333];
    A[1] = A[466];
    A[102] = A[567];
    A[837] = A[372];
    A[42] = A[509] + 0.228571428571427*G0_0_0_0_0_0 + 0.228571428571427*G0_0_0_0_0_1 + 0.350476190476188*G0_0_0_2_0_1 - 0.274285714285712*G0_0_0_3_0_0 + 0.65523809523809*G0_0_0_4_0_0 + 0.0304761904761883*G0_0_0_4_0_1 + 0.426666666666663*G0_0_0_5_0_0 - 0.106666666666667*G0_0_0_5_0_1 - 0.65523809523809*G0_0_0_6_0_0 - 0.472380952380948*G0_0_0_6_0_1 - 0.50285714285714*G0_0_0_7_0_0 + 0.0304761904761907*G0_0_0_7_0_1 + 0.27428571428571*G0_0_0_8_0_0 - 0.15238095238095*G0_0_0_9_0_0 - 0.0609523809523788*G0_0_0_9_0_1 + 0.228571428571427*G0_0_0_10_1_0 + 0.228571428571427*G0_0_0_10_1_1 + 0.350476190476188*G0_0_0_12_1_1 - 0.274285714285712*G0_0_0_13_1_0 + 0.65523809523809*G0_0_0_14_1_0 + 0.0304761904761883*G0_0_0_14_1_1 + 0.426666666666663*G0_0_0_15_1_0 - 0.106666666666667*G0_0_0_15_1_1 - 0.65523809523809*G0_0_0_16_1_0 - 0.472380952380948*G0_0_0_16_1_1 - 0.50285714285714*G0_0_0_17_1_0 + 0.0304761904761907*G0_0_0_17_1_1 + 0.27428571428571*G0_0_0_18_1_0 - 0.15238095238095*G0_0_0_19_1_0 - 0.0609523809523788*G0_0_0_19_1_1 - 0.12190476190476*G0_0_1_0_0_0 - 0.121904761904761*G0_0_1_0_0_1 + 0.121904761904761*G0_0_1_2_0_1 + 0.12190476190476*G0_0_1_4_0_0 + 0.243809523809522*G0_0_1_5_0_0 + 0.365714285714282*G0_0_1_5_0_1 - 0.12190476190476*G0_0_1_6_0_0 - 0.365714285714282*G0_0_1_6_0_1 + 0.121904761904761*G0_0_1_7_0_0 - 0.243809523809523*G0_0_1_9_0_0 - 0.12190476190476*G0_0_1_10_1_0 - 0.121904761904761*G0_0_1_10_1_1 + 0.121904761904761*G0_0_1_12_1_1 + 0.12190476190476*G0_0_1_14_1_0 + 0.243809523809522*G0_0_1_15_1_0 + 0.365714285714282*G0_0_1_15_1_1 - 0.12190476190476*G0_0_1_16_1_0 - 0.365714285714282*G0_0_1_16_1_1 + 0.121904761904761*G0_0_1_17_1_0 - 0.243809523809523*G0_0_1_19_1_0;
    A[135] = 0.0;
    A[868] = A[403];
    A[71] = A[534] - 0.129523809523809*G0_1_0_0_0_0 - 0.129523809523809*G0_1_0_0_0_1 + 0.12952380952381*G0_1_0_1_0_0 + 0.12952380952381*G0_1_0_3_0_1 + 0.129523809523808*G0_1_0_5_0_1 + 0.388571428571427*G0_1_0_7_0_0 + 0.259047619047619*G0_1_0_7_0_1 - 0.388571428571428*G0_1_0_8_0_0 - 0.129523809523811*G0_1_0_8_0_1 - 0.259047619047618*G0_1_0_9_0_1 - 0.129523809523809*G0_1_0_10_1_0 - 0.129523809523809*G0_1_0_10_1_1 + 0.12952380952381*G0_1_0_11_1_0 + 0.12952380952381*G0_1_0_13_1_1 + 0.129523809523808*G0_1_0_15_1_1 + 0.388571428571427*G0_1_0_17_1_0 + 0.259047619047619*G0_1_0_17_1_1 - 0.388571428571428*G0_1_0_18_1_0 - 0.129523809523811*G0_1_0_18_1_1 - 0.259047619047618*G0_1_0_19_1_1 + 0.126984126984126*G0_1_1_0_0_0 + 0.126984126984126*G0_1_1_0_0_1 + 0.256507936507937*G0_1_1_1_0_0 - 0.0533333333333323*G0_1_1_3_0_0 + 0.421587301587302*G0_1_1_3_0_1 - 0.218412698412698*G0_1_1_4_0_1 - 0.0533333333333334*G0_1_1_5_0_0 - 0.345396825396824*G0_1_1_5_0_1 + 0.218412698412698*G0_1_1_6_0_1 + 0.00253968253968336*G0_1_1_7_0_0 + 0.294603174603174*G0_1_1_7_0_1 - 0.386031746031746*G0_1_1_8_0_0 - 0.421587301587302*G0_1_1_8_0_1 + 0.106666666666666*G0_1_1_9_0_0 - 0.0761904761904756*G0_1_1_9_0_1 + 0.126984126984126*G0_1_1_10_1_0 + 0.126984126984126*G0_1_1_10_1_1 + 0.256507936507937*G0_1_1_11_1_0 - 0.0533333333333323*G0_1_1_13_1_0 + 0.421587301587302*G0_1_1_13_1_1 - 0.218412698412698*G0_1_1_14_1_1 - 0.0533333333333334*G0_1_1_15_1_0 - 0.345396825396824*G0_1_1_15_1_1 + 0.218412698412698*G0_1_1_16_1_1 + 0.00253968253968336*G0_1_1_17_1_0 + 0.294603174603174*G0_1_1_17_1_1 - 0.386031746031746*G0_1_1_18_1_0 - 0.421587301587302*G0_1_1_18_1_1 + 0.106666666666666*G0_1_1_19_1_0 - 0.0761904761904756*G0_1_1_19_1_1;
    A[63] = -A[71] - 0.0876190476190473*G0_1_0_0_0_0 - 0.0876190476190473*G0_1_0_0_0_1 + 0.285714285714286*G0_1_0_1_0_0 + 0.590476190476187*G0_1_0_2_0_1 - 0.452063492063488*G0_1_0_3_0_0 + 0.260317460317462*G0_1_0_3_0_1 + 1.07936507936507*G0_1_0_4_0_0 + 0.0622222222222222*G0_1_0_4_0_1 + 0.322539682539682*G0_1_0_5_0_0 + 0.25142857142857*G0_1_0_5_0_1 - 1.07936507936507*G0_1_0_6_0_0 - 0.754285714285711*G0_1_0_6_0_1 + 0.156190476190476*G0_1_0_7_0_0 + 0.227301587301588*G0_1_0_7_0_1 - 0.354285714285715*G0_1_0_8_0_0 - 0.260317460317462*G0_1_0_8_0_1 + 0.129523809523806*G0_1_0_9_0_0 - 0.28952380952381*G0_1_0_9_0_1 - 0.0876190476190473*G0_1_0_10_1_0 - 0.0876190476190473*G0_1_0_10_1_1 + 0.285714285714286*G0_1_0_11_1_0 + 0.590476190476187*G0_1_0_12_1_1 - 0.452063492063488*G0_1_0_13_1_0 + 0.260317460317462*G0_1_0_13_1_1 + 1.07936507936507*G0_1_0_14_1_0 + 0.0622222222222222*G0_1_0_14_1_1 + 0.322539682539682*G0_1_0_15_1_0 + 0.25142857142857*G0_1_0_15_1_1 - 1.07936507936507*G0_1_0_16_1_0 - 0.754285714285711*G0_1_0_16_1_1 + 0.156190476190476*G0_1_0_17_1_0 + 0.227301587301588*G0_1_0_17_1_1 - 0.354285714285715*G0_1_0_18_1_0 - 0.260317460317462*G0_1_0_18_1_1 + 0.129523809523806*G0_1_0_19_1_0 - 0.28952380952381*G0_1_0_19_1_1;
    A[531] = -A[63] + 0.101587301587301*G0_1_0_0_0_0 + 0.101587301587301*G0_1_0_0_0_1 + 0.101587301587301*G0_1_0_1_0_0 - 0.0761904761904766*G0_1_0_3_0_0 + 0.165079365079364*G0_1_0_3_0_1 - 0.139682539682538*G0_1_0_4_0_1 - 0.0761904761904743*G0_1_0_5_0_0 - 0.241269841269839*G0_1_0_5_0_1 + 0.139682539682536*G0_1_0_6_0_1 - 0.101587301587301*G0_1_0_7_0_0 + 0.0634920634920642*G0_1_0_7_0_1 - 0.101587301587301*G0_1_0_8_0_0 - 0.165079365079364*G0_1_0_8_0_1 + 0.152380952380951*G0_1_0_9_0_0 + 0.0761904761904743*G0_1_0_9_0_1 + 0.101587301587301*G0_1_0_10_1_0 + 0.101587301587301*G0_1_0_10_1_1 + 0.101587301587301*G0_1_0_11_1_0 - 0.0761904761904766*G0_1_0_13_1_0 + 0.165079365079364*G0_1_0_13_1_1 - 0.139682539682538*G0_1_0_14_1_1 - 0.0761904761904743*G0_1_0_15_1_0 - 0.241269841269839*G0_1_0_15_1_1 + 0.139682539682536*G0_1_0_16_1_1 - 0.101587301587301*G0_1_0_17_1_0 + 0.0634920634920642*G0_1_0_17_1_1 - 0.101587301587301*G0_1_0_18_1_0 - 0.165079365079364*G0_1_0_18_1_1 + 0.152380952380951*G0_1_0_19_1_0 + 0.0761904761904743*G0_1_0_19_1_1 + 0.41100529100529*G0_1_1_0_0_0 + 0.41100529100529*G0_1_1_0_0_1 - 0.30941798941799*G0_1_1_1_0_0 - 0.649735449735448*G0_1_1_2_0_1 + 0.323809523809523*G0_1_1_3_0_0 - 0.370793650793652*G0_1_1_3_0_1 - 0.895238095238093*G0_1_1_4_0_0 + 0.13968253968254*G0_1_1_4_0_1 - 0.399999999999999*G0_1_1_5_0_0 - 0.935873015873013*G0_1_1_5_0_1 + 0.895238095238093*G0_1_1_6_0_0 + 1.17460317460317*G0_1_1_6_0_1 - 0.439365079365078*G0_1_1_7_0_0 + 0.0965079365079355*G0_1_1_7_0_1 + 0.337777777777778*G0_1_1_8_0_0 + 0.370793650793652*G0_1_1_8_0_1 + 0.076190476190476*G0_1_1_9_0_0 - 0.236190476190476*G0_1_1_9_0_1 + 0.41100529100529*G0_1_1_10_1_0 + 0.41100529100529*G0_1_1_10_1_1 - 0.30941798941799*G0_1_1_11_1_0 - 0.649735449735448*G0_1_1_12_1_1 + 0.323809523809523*G0_1_1_13_1_0 - 0.370793650793652*G0_1_1_13_1_1 - 0.895238095238093*G0_1_1_14_1_0 + 0.13968253968254*G0_1_1_14_1_1 - 0.399999999999999*G0_1_1_15_1_0 - 0.935873015873013*G0_1_1_15_1_1 + 0.895238095238093*G0_1_1_16_1_0 + 1.17460317460317*G0_1_1_16_1_1 - 0.439365079365078*G0_1_1_17_1_0 + 0.0965079365079355*G0_1_1_17_1_1 + 0.337777777777778*G0_1_1_18_1_0 + 0.370793650793652*G0_1_1_18_1_1 + 0.076190476190476*G0_1_1_19_1_0 - 0.236190476190476*G0_1_1_19_1_1;
    A[797] = A[71] - 0.0165079365079364*G0_0_1_0_0_0 - 0.0165079365079364*G0_0_1_0_0_1 + 0.113015873015873*G0_0_1_1_0_0 - 0.0266666666666663*G0_0_1_3_0_0 + 0.147936507936509*G0_0_1_3_0_1 - 0.0615873015873018*G0_0_1_4_0_1 - 0.0266666666666663*G0_0_1_5_0_0 - 0.0450793650793651*G0_0_1_5_0_1 + 0.0615873015873014*G0_0_1_6_0_1 + 0.146031746031746*G0_0_1_7_0_0 + 0.164444444444445*G0_0_1_7_0_1 - 0.242539682539683*G0_0_1_8_0_0 - 0.147936507936509*G0_0_1_8_0_1 + 0.0533333333333326*G0_0_1_9_0_0 - 0.102857142857143*G0_0_1_9_0_1 - 0.0165079365079364*G0_0_1_10_1_0 - 0.0165079365079364*G0_0_1_10_1_1 + 0.113015873015873*G0_0_1_11_1_0 - 0.0266666666666663*G0_0_1_13_1_0 + 0.147936507936509*G0_0_1_13_1_1 - 0.0615873015873018*G0_0_1_14_1_1 - 0.0266666666666663*G0_0_1_15_1_0 - 0.0450793650793651*G0_0_1_15_1_1 + 0.0615873015873014*G0_0_1_16_1_1 + 0.146031746031746*G0_0_1_17_1_0 + 0.164444444444445*G0_0_1_17_1_1 - 0.242539682539683*G0_0_1_18_1_0 - 0.147936507936509*G0_0_1_18_1_1 + 0.0533333333333326*G0_0_1_19_1_0 - 0.102857142857143*G0_0_1_19_1_1 + 0.0165079365079364*G0_1_0_0_0_0 + 0.0165079365079364*G0_1_0_0_0_1 - 0.113015873015873*G0_1_0_1_0_0 + 0.0266666666666663*G0_1_0_3_0_0 - 0.147936507936509*G0_1_0_3_0_1 + 0.0615873015873018*G0_1_0_4_0_1 + 0.0266666666666663*G0_1_0_5_0_0 + 0.0450793650793651*G0_1_0_5_0_1 - 0.0615873015873014*G0_1_0_6_0_1 - 0.146031746031746*G0_1_0_7_0_0 - 0.164444444444445*G0_1_0_7_0_1 + 0.242539682539683*G0_1_0_8_0_0 + 0.147936507936509*G0_1_0_8_0_1 - 0.0533333333333326*G0_1_0_9_0_0 + 0.102857142857143*G0_1_0_9_0_1 + 0.0165079365079364*G0_1_0_10_1_0 + 0.0165079365079364*G0_1_0_10_1_1 - 0.113015873015873*G0_1_0_11_1_0 + 0.0266666666666663*G0_1_0_13_1_0 - 0.147936507936509*G0_1_0_13_1_1 + 0.0615873015873018*G0_1_0_14_1_1 + 0.0266666666666663*G0_1_0_15_1_0 + 0.0450793650793651*G0_1_0_15_1_1 - 0.0615873015873014*G0_1_0_16_1_1 - 0.146031746031746*G0_1_0_17_1_0 - 0.164444444444445*G0_1_0_17_1_1 + 0.242539682539683*G0_1_0_18_1_0 + 0.147936507936509*G0_1_0_18_1_1 - 0.0533333333333326*G0_1_0_19_1_0 + 0.102857142857143*G0_1_0_19_1_1;
    A[92] = -A[797] - 0.0876190476190473*G0_0_1_0_0_0 - 0.0876190476190473*G0_0_1_0_0_1 + 0.285714285714286*G0_0_1_1_0_0 + 0.590476190476187*G0_0_1_2_0_1 - 0.452063492063488*G0_0_1_3_0_0 + 0.260317460317462*G0_0_1_3_0_1 + 1.07936507936507*G0_0_1_4_0_0 + 0.0622222222222222*G0_0_1_4_0_1 + 0.322539682539682*G0_0_1_5_0_0 + 0.25142857142857*G0_0_1_5_0_1 - 1.07936507936507*G0_0_1_6_0_0 - 0.75428571428571*G0_0_1_6_0_1 + 0.156190476190476*G0_0_1_7_0_0 + 0.227301587301588*G0_0_1_7_0_1 - 0.354285714285715*G0_0_1_8_0_0 - 0.260317460317462*G0_0_1_8_0_1 + 0.129523809523806*G0_0_1_9_0_0 - 0.28952380952381*G0_0_1_9_0_1 - 0.0876190476190473*G0_0_1_10_1_0 - 0.0876190476190473*G0_0_1_10_1_1 + 0.285714285714286*G0_0_1_11_1_0 + 0.590476190476187*G0_0_1_12_1_1 - 0.452063492063488*G0_0_1_13_1_0 + 0.260317460317462*G0_0_1_13_1_1 + 1.07936507936507*G0_0_1_14_1_0 + 0.0622222222222222*G0_0_1_14_1_1 + 0.322539682539682*G0_0_1_15_1_0 + 0.25142857142857*G0_0_1_15_1_1 - 1.07936507936507*G0_0_1_16_1_0 - 0.75428571428571*G0_0_1_16_1_1 + 0.156190476190476*G0_0_1_17_1_0 + 0.227301587301588*G0_0_1_17_1_1 - 0.354285714285715*G0_0_1_18_1_0 - 0.260317460317462*G0_0_1_18_1_1 + 0.129523809523806*G0_0_1_19_1_0 - 0.28952380952381*G0_0_1_19_1_1;
    A[647] = -A[92] + 0.101587301587301*G0_0_1_0_0_0 + 0.101587301587301*G0_0_1_0_0_1 + 0.101587301587301*G0_0_1_1_0_0 - 0.0761904761904767*G0_0_1_3_0_0 + 0.165079365079364*G0_0_1_3_0_1 - 0.139682539682538*G0_0_1_4_0_1 - 0.0761904761904742*G0_0_1_5_0_0 - 0.241269841269839*G0_0_1_5_0_1 + 0.139682539682536*G0_0_1_6_0_1 - 0.101587301587301*G0_0_1_7_0_0 + 0.0634920634920642*G0_0_1_7_0_1 - 0.101587301587301*G0_0_1_8_0_0 - 0.165079365079364*G0_0_1_8_0_1 + 0.152380952380951*G0_0_1_9_0_0 + 0.0761904761904742*G0_0_1_9_0_1 + 0.101587301587301*G0_0_1_10_1_0 + 0.101587301587301*G0_0_1_10_1_1 + 0.101587301587301*G0_0_1_11_1_0 - 0.0761904761904767*G0_0_1_13_1_0 + 0.165079365079364*G0_0_1_13_1_1 - 0.139682539682538*G0_0_1_14_1_1 - 0.0761904761904742*G0_0_1_15_1_0 - 0.241269841269839*G0_0_1_15_1_1 + 0.139682539682536*G0_0_1_16_1_1 - 0.101587301587301*G0_0_1_17_1_0 + 0.0634920634920642*G0_0_1_17_1_1 - 0.101587301587301*G0_0_1_18_1_0 - 0.165079365079364*G0_0_1_18_1_1 + 0.152380952380951*G0_0_1_19_1_0 + 0.0761904761904742*G0_0_1_19_1_1 + 0.41100529100529*G0_1_1_0_0_0 + 0.41100529100529*G0_1_1_0_0_1 - 0.30941798941799*G0_1_1_1_0_0 - 0.649735449735448*G0_1_1_2_0_1 + 0.323809523809523*G0_1_1_3_0_0 - 0.370793650793652*G0_1_1_3_0_1 - 0.895238095238093*G0_1_1_4_0_0 + 0.13968253968254*G0_1_1_4_0_1 - 0.399999999999999*G0_1_1_5_0_0 - 0.935873015873013*G0_1_1_5_0_1 + 0.895238095238093*G0_1_1_6_0_0 + 1.17460317460317*G0_1_1_6_0_1 - 0.439365079365078*G0_1_1_7_0_0 + 0.0965079365079355*G0_1_1_7_0_1 + 0.337777777777778*G0_1_1_8_0_0 + 0.370793650793652*G0_1_1_8_0_1 + 0.076190476190476*G0_1_1_9_0_0 - 0.236190476190476*G0_1_1_9_0_1 + 0.41100529100529*G0_1_1_10_1_0 + 0.41100529100529*G0_1_1_10_1_1 - 0.30941798941799*G0_1_1_11_1_0 - 0.649735449735448*G0_1_1_12_1_1 + 0.323809523809523*G0_1_1_13_1_0 - 0.370793650793652*G0_1_1_13_1_1 - 0.895238095238093*G0_1_1_14_1_0 + 0.13968253968254*G0_1_1_14_1_1 - 0.399999999999999*G0_1_1_15_1_0 - 0.935873015873013*G0_1_1_15_1_1 + 0.895238095238093*G0_1_1_16_1_0 + 1.17460317460317*G0_1_1_16_1_1 - 0.439365079365078*G0_1_1_17_1_0 + 0.0965079365079355*G0_1_1_17_1_1 + 0.337777777777778*G0_1_1_18_1_0 + 0.370793650793652*G0_1_1_18_1_1 + 0.076190476190476*G0_1_1_19_1_0 - 0.236190476190476*G0_1_1_19_1_1;
    A[557] = A[92];
    A[182] = A[647];
    A[66] = A[531];
    A[528] = A[63];
    A[737] = A[797] + 0.129523809523809*G0_0_1_0_0_0 + 0.129523809523809*G0_0_1_0_0_1 - 0.12952380952381*G0_0_1_1_0_0 - 0.12952380952381*G0_0_1_3_0_1 - 0.129523809523808*G0_0_1_5_0_1 - 0.388571428571427*G0_0_1_7_0_0 - 0.259047619047619*G0_0_1_7_0_1 + 0.388571428571428*G0_0_1_8_0_0 + 0.129523809523811*G0_0_1_8_0_1 + 0.259047619047618*G0_0_1_9_0_1 + 0.129523809523809*G0_0_1_10_1_0 + 0.129523809523809*G0_0_1_10_1_1 - 0.12952380952381*G0_0_1_11_1_0 - 0.12952380952381*G0_0_1_13_1_1 - 0.129523809523808*G0_0_1_15_1_1 - 0.388571428571427*G0_0_1_17_1_0 - 0.259047619047619*G0_0_1_17_1_1 + 0.388571428571428*G0_0_1_18_1_0 + 0.129523809523811*G0_0_1_18_1_1 + 0.259047619047618*G0_0_1_19_1_1 - 0.126984126984126*G0_1_1_0_0_0 - 0.126984126984126*G0_1_1_0_0_1 - 0.256507936507937*G0_1_1_1_0_0 + 0.0533333333333323*G0_1_1_3_0_0 - 0.421587301587302*G0_1_1_3_0_1 + 0.218412698412698*G0_1_1_4_0_1 + 0.0533333333333334*G0_1_1_5_0_0 + 0.345396825396824*G0_1_1_5_0_1 - 0.218412698412698*G0_1_1_6_0_1 - 0.00253968253968336*G0_1_1_7_0_0 - 0.294603174603174*G0_1_1_7_0_1 + 0.386031746031746*G0_1_1_8_0_0 + 0.421587301587302*G0_1_1_8_0_1 - 0.106666666666666*G0_1_1_9_0_0 + 0.0761904761904756*G0_1_1_9_0_1 - 0.126984126984126*G0_1_1_10_1_0 - 0.126984126984126*G0_1_1_10_1_1 - 0.256507936507937*G0_1_1_11_1_0 + 0.0533333333333323*G0_1_1_13_1_0 - 0.421587301587302*G0_1_1_13_1_1 + 0.218412698412698*G0_1_1_14_1_1 + 0.0533333333333334*G0_1_1_15_1_0 + 0.345396825396824*G0_1_1_15_1_1 - 0.218412698412698*G0_1_1_16_1_1 - 0.00253968253968336*G0_1_1_17_1_0 - 0.294603174603174*G0_1_1_17_1_1 + 0.386031746031746*G0_1_1_18_1_0 + 0.421587301587302*G0_1_1_18_1_1 - 0.106666666666666*G0_1_1_19_1_0 + 0.0761904761904756*G0_1_1_19_1_1;
    A[164] = A[629];
    A[871] = 0.0;
    A[108] = 0.0;
    A[193] = A[658];
    A[141] = 0.0;
    A[593] = A[128];
    A[218] = A[683];
    A[616] = A[151];
    A[540] = 0.0;
    A[496] = A[31];
    A[651] = A[186];
    A[539] = A[887] - 0.101587301587301*G0_0_1_0_0_0 - 0.101587301587302*G0_0_1_0_0_1 - 0.1015873015873*G0_0_1_1_0_0 + 0.266666666666661*G0_0_1_3_0_0 - 0.06984126984127*G0_0_1_3_0_1 + 0.234920634920636*G0_0_1_4_0_1 + 0.266666666666668*G0_0_1_5_0_0 + 0.336507936507937*G0_0_1_5_0_1 - 0.23492063492064*G0_0_1_6_0_1 + 0.101587301587301*G0_0_1_7_0_0 + 0.031746031746032*G0_0_1_7_0_1 + 0.1015873015873*G0_0_1_8_0_0 + 0.06984126984127*G0_0_1_8_0_1 - 0.533333333333329*G0_0_1_9_0_0 - 0.266666666666668*G0_0_1_9_0_1 - 0.101587301587301*G0_0_1_10_1_0 - 0.101587301587302*G0_0_1_10_1_1 - 0.1015873015873*G0_0_1_11_1_0 + 0.266666666666661*G0_0_1_13_1_0 - 0.06984126984127*G0_0_1_13_1_1 + 0.234920634920636*G0_0_1_14_1_1 + 0.266666666666668*G0_0_1_15_1_0 + 0.336507936507937*G0_0_1_15_1_1 - 0.23492063492064*G0_0_1_16_1_1 + 0.101587301587301*G0_0_1_17_1_0 + 0.031746031746032*G0_0_1_17_1_1 + 0.1015873015873*G0_0_1_18_1_0 + 0.06984126984127*G0_0_1_18_1_1 - 0.533333333333329*G0_0_1_19_1_0 - 0.266666666666668*G0_0_1_19_1_1 + 0.101587301587301*G0_1_0_0_0_0 + 0.101587301587302*G0_1_0_0_0_1 + 0.1015873015873*G0_1_0_1_0_0 - 0.266666666666661*G0_1_0_3_0_0 + 0.06984126984127*G0_1_0_3_0_1 - 0.234920634920636*G0_1_0_4_0_1 - 0.266666666666668*G0_1_0_5_0_0 - 0.336507936507937*G0_1_0_5_0_1 + 0.23492063492064*G0_1_0_6_0_1 - 0.101587301587301*G0_1_0_7_0_0 - 0.031746031746032*G0_1_0_7_0_1 - 0.1015873015873*G0_1_0_8_0_0 - 0.06984126984127*G0_1_0_8_0_1 + 0.533333333333329*G0_1_0_9_0_0 + 0.266666666666668*G0_1_0_9_0_1 + 0.101587301587301*G0_1_0_10_1_0 + 0.101587301587302*G0_1_0_10_1_1 + 0.1015873015873*G0_1_0_11_1_0 - 0.266666666666661*G0_1_0_13_1_0 + 0.06984126984127*G0_1_0_13_1_1 - 0.234920634920636*G0_1_0_14_1_1 - 0.266666666666668*G0_1_0_15_1_0 - 0.336507936507937*G0_1_0_15_1_1 + 0.23492063492064*G0_1_0_16_1_1 - 0.101587301587301*G0_1_0_17_1_0 - 0.031746031746032*G0_1_0_17_1_1 - 0.1015873015873*G0_1_0_18_1_0 - 0.06984126984127*G0_1_0_18_1_1 + 0.533333333333329*G0_1_0_19_1_0 + 0.266666666666668*G0_1_0_19_1_1;
    A[686] = A[221];
    A[566] = A[101];
    A[693] = 0.0;
    A[268] = 0.0;
    A[295] = 0.0;
    A[442] = 0.0;
    A[362] = A[827];
    A[473] = A[8];
    A[393] = -A[401] + 0.921058201058195*G0_0_0_0_0_0 + 0.921058201058196*G0_0_0_0_0_1 - 0.880423280423276*G0_0_0_1_0_0 + 0.196402116402115*G0_0_0_2_0_1 - 2.74285714285713*G0_0_0_3_0_0 - 1.72698412698412*G0_0_0_3_0_1 - 1.76761904761904*G0_0_0_4_0_0 - 3.86031746031745*G0_0_0_4_0_1 + 2.25523809523808*G0_0_0_5_0_0 + 0.690793650793647*G0_0_0_5_0_1 + 1.76761904761904*G0_0_0_6_0_0 - 1.80825396825396*G0_0_0_6_0_1 - 2.58031746031745*G0_0_0_7_0_0 - 1.01587301587301*G0_0_0_7_0_1 + 2.53968253968253*G0_0_0_8_0_0 + 1.72698412698412*G0_0_0_8_0_1 + 0.487619047619055*G0_0_0_9_0_0 + 4.87619047619046*G0_0_0_9_0_1 + 0.921058201058195*G0_0_0_10_1_0 + 0.921058201058196*G0_0_0_10_1_1 - 0.880423280423276*G0_0_0_11_1_0 + 0.196402116402115*G0_0_0_12_1_1 - 2.74285714285713*G0_0_0_13_1_0 - 1.72698412698412*G0_0_0_13_1_1 - 1.76761904761904*G0_0_0_14_1_0 - 3.86031746031745*G0_0_0_14_1_1 + 2.25523809523808*G0_0_0_15_1_0 + 0.690793650793647*G0_0_0_15_1_1 + 1.76761904761904*G0_0_0_16_1_0 - 1.80825396825396*G0_0_0_16_1_1 - 2.58031746031745*G0_0_0_17_1_0 - 1.01587301587301*G0_0_0_17_1_1 + 2.53968253968253*G0_0_0_18_1_0 + 1.72698412698412*G0_0_0_18_1_1 + 0.487619047619055*G0_0_0_19_1_0 + 4.87619047619046*G0_0_0_19_1_1 + 1.11746031746031*G0_1_0_0_0_0 + 1.11746031746031*G0_1_0_0_0_1 + 1.11746031746031*G0_1_0_2_0_1 - 3.55555555555554*G0_1_0_3_0_0 - 0.203174603174611*G0_1_0_4_0_0 - 4.87619047619046*G0_1_0_4_0_1 - 1.32063492063492*G0_1_0_5_0_0 - 1.11746031746031*G0_1_0_5_0_1 + 0.203174603174609*G0_1_0_6_0_0 - 1.11746031746031*G0_1_0_6_0_1 - 4.67301587301585*G0_1_0_7_0_0 - 4.87619047619046*G0_1_0_7_0_1 + 3.55555555555555*G0_1_0_8_0_0 + 4.87619047619046*G0_1_0_9_0_0 + 9.75238095238092*G0_1_0_9_0_1 + 1.11746031746031*G0_1_0_10_1_0 + 1.11746031746031*G0_1_0_10_1_1 + 1.11746031746031*G0_1_0_12_1_1 - 3.55555555555554*G0_1_0_13_1_0 - 0.203174603174611*G0_1_0_14_1_0 - 4.87619047619046*G0_1_0_14_1_1 - 1.32063492063492*G0_1_0_15_1_0 - 1.11746031746031*G0_1_0_15_1_1 + 0.203174603174609*G0_1_0_16_1_0 - 1.11746031746031*G0_1_0_16_1_1 - 4.67301587301585*G0_1_0_17_1_0 - 4.87619047619046*G0_1_0_17_1_1 + 3.55555555555555*G0_1_0_18_1_0 + 4.87619047619046*G0_1_0_19_1_0 + 9.75238095238092*G0_1_0_19_1_1;
    A[103] = A[393] + 0.386031746031744*G0_0_1_0_0_0 + 0.386031746031744*G0_0_1_0_0_1 + 1.42222222222221*G0_0_1_1_0_0 + 0.731428571428565*G0_0_1_2_0_1 - 2.43809523809523*G0_0_1_3_0_0 + 1.93015873015871*G0_0_1_3_0_1 - 0.182857142857148*G0_0_1_4_0_0 - 3.86031746031744*G0_0_1_4_0_1 - 0.975238095238094*G0_0_1_5_0_0 - 0.95492063492063*G0_0_1_5_0_1 + 0.182857142857147*G0_0_1_6_0_0 - 0.162539682539679*G0_0_1_6_0_1 - 0.995555555555553*G0_0_1_7_0_0 - 1.01587301587302*G0_0_1_7_0_1 - 0.812698412698399*G0_0_1_8_0_0 - 1.93015873015871*G0_0_1_8_0_1 + 3.41333333333332*G0_0_1_9_0_0 + 4.87619047619046*G0_0_1_9_0_1 + 0.386031746031744*G0_0_1_10_1_0 + 0.386031746031744*G0_0_1_10_1_1 + 1.42222222222221*G0_0_1_11_1_0 + 0.731428571428565*G0_0_1_12_1_1 - 2.43809523809523*G0_0_1_13_1_0 + 1.93015873015871*G0_0_1_13_1_1 - 0.182857142857148*G0_0_1_14_1_0 - 3.86031746031744*G0_0_1_14_1_1 - 0.975238095238094*G0_0_1_15_1_0 - 0.95492063492063*G0_0_1_15_1_1 + 0.182857142857147*G0_0_1_16_1_0 - 0.162539682539679*G0_0_1_16_1_1 - 0.995555555555553*G0_0_1_17_1_0 - 1.01587301587302*G0_0_1_17_1_1 - 0.812698412698399*G0_0_1_18_1_0 - 1.93015873015871*G0_0_1_18_1_1 + 3.41333333333332*G0_0_1_19_1_0 + 4.87619047619046*G0_0_1_19_1_1 - 0.386031746031744*G0_1_0_0_0_0 - 0.386031746031744*G0_1_0_0_0_1 - 1.42222222222221*G0_1_0_1_0_0 - 0.731428571428565*G0_1_0_2_0_1 + 2.43809523809523*G0_1_0_3_0_0 - 1.93015873015871*G0_1_0_3_0_1 + 0.182857142857148*G0_1_0_4_0_0 + 3.86031746031744*G0_1_0_4_0_1 + 0.975238095238094*G0_1_0_5_0_0 + 0.95492063492063*G0_1_0_5_0_1 - 0.182857142857147*G0_1_0_6_0_0 + 0.16253968253968*G0_1_0_6_0_1 + 0.995555555555553*G0_1_0_7_0_0 + 1.01587301587302*G0_1_0_7_0_1 + 0.812698412698399*G0_1_0_8_0_0 + 1.93015873015871*G0_1_0_8_0_1 - 3.41333333333332*G0_1_0_9_0_0 - 4.87619047619046*G0_1_0_9_0_1 - 0.386031746031744*G0_1_0_10_1_0 - 0.386031746031744*G0_1_0_10_1_1 - 1.42222222222221*G0_1_0_11_1_0 - 0.731428571428565*G0_1_0_12_1_1 + 2.43809523809523*G0_1_0_13_1_0 - 1.93015873015871*G0_1_0_13_1_1 + 0.182857142857148*G0_1_0_14_1_0 + 3.86031746031744*G0_1_0_14_1_1 + 0.975238095238094*G0_1_0_15_1_0 + 0.95492063492063*G0_1_0_15_1_1 - 0.182857142857147*G0_1_0_16_1_0 + 0.16253968253968*G0_1_0_16_1_1 + 0.995555555555553*G0_1_0_17_1_0 + 1.01587301587302*G0_1_0_17_1_1 + 0.812698412698399*G0_1_0_18_1_0 + 1.93015873015871*G0_1_0_18_1_1 - 3.41333333333332*G0_1_0_19_1_0 - 4.87619047619046*G0_1_0_19_1_1;
    A[808] = -A[103] + 0.921058201058195*G0_0_0_0_0_0 + 0.921058201058195*G0_0_0_0_0_1 - 0.880423280423276*G0_0_0_1_0_0 + 0.196402116402115*G0_0_0_2_0_1 - 2.74285714285713*G0_0_0_3_0_0 - 1.72698412698412*G0_0_0_3_0_1 - 1.76761904761905*G0_0_0_4_0_0 - 3.86031746031745*G0_0_0_4_0_1 + 2.25523809523808*G0_0_0_5_0_0 + 0.690793650793647*G0_0_0_5_0_1 + 1.76761904761904*G0_0_0_6_0_0 - 1.80825396825396*G0_0_0_6_0_1 - 2.58031746031745*G0_0_0_7_0_0 - 1.01587301587301*G0_0_0_7_0_1 + 2.53968253968253*G0_0_0_8_0_0 + 1.72698412698412*G0_0_0_8_0_1 + 0.487619047619056*G0_0_0_9_0_0 + 4.87619047619046*G0_0_0_9_0_1 + 0.921058201058195*G0_0_0_10_1_0 + 0.921058201058195*G0_0_0_10_1_1 - 0.880423280423276*G0_0_0_11_1_0 + 0.196402116402115*G0_0_0_12_1_1 - 2.74285714285713*G0_0_0_13_1_0 - 1.72698412698412*G0_0_0_13_1_1 - 1.76761904761905*G0_0_0_14_1_0 - 3.86031746031745*G0_0_0_14_1_1 + 2.25523809523808*G0_0_0_15_1_0 + 0.690793650793647*G0_0_0_15_1_1 + 1.76761904761904*G0_0_0_16_1_0 - 1.80825396825396*G0_0_0_16_1_1 - 2.58031746031745*G0_0_0_17_1_0 - 1.01587301587301*G0_0_0_17_1_1 + 2.53968253968253*G0_0_0_18_1_0 + 1.72698412698412*G0_0_0_18_1_1 + 0.487619047619056*G0_0_0_19_1_0 + 4.87619047619046*G0_0_0_19_1_1 + 1.11746031746031*G0_0_1_0_0_0 + 1.11746031746031*G0_0_1_0_0_1 + 1.11746031746031*G0_0_1_2_0_1 - 3.55555555555554*G0_0_1_3_0_0 - 0.203174603174611*G0_0_1_4_0_0 - 4.87619047619046*G0_0_1_4_0_1 - 1.32063492063492*G0_0_1_5_0_0 - 1.11746031746031*G0_0_1_5_0_1 + 0.20317460317461*G0_0_1_6_0_0 - 1.11746031746031*G0_0_1_6_0_1 - 4.67301587301585*G0_0_1_7_0_0 - 4.87619047619046*G0_0_1_7_0_1 + 3.55555555555555*G0_0_1_8_0_0 + 4.87619047619046*G0_0_1_9_0_0 + 9.75238095238092*G0_0_1_9_0_1 + 1.11746031746031*G0_0_1_10_1_0 + 1.11746031746031*G0_0_1_10_1_1 + 1.11746031746031*G0_0_1_12_1_1 - 3.55555555555554*G0_0_1_13_1_0 - 0.203174603174611*G0_0_1_14_1_0 - 4.87619047619046*G0_0_1_14_1_1 - 1.32063492063492*G0_0_1_15_1_0 - 1.11746031746031*G0_0_1_15_1_1 + 0.20317460317461*G0_0_1_16_1_0 - 1.11746031746031*G0_0_1_16_1_1 - 4.67301587301585*G0_0_1_17_1_0 - 4.87619047619046*G0_0_1_17_1_1 + 3.55555555555555*G0_0_1_18_1_0 + 4.87619047619046*G0_0_1_19_1_0 + 9.75238095238092*G0_0_1_19_1_1;
    A[568] = A[103];
    A[809] = A[344];
    A[24] = 0.0;
    A[725] = 0.0;
    A[384] = 0.0;
    A[826] = A[361];
    A[35] = A[500];
    A[750] = 0.0;
    A[419] = 0.0;
    A[867] = A[402];
    A[62] = A[527];
    A[787] = 0.0;
    A[896] = A[431];
    A[117] = 0.0;
    A[184] = A[126] + 0.0203174603174641*G0_0_1_0_0_0 + 0.0203174603174639*G0_0_1_0_0_1 - 0.132063492063493*G0_0_1_1_0_0 - 0.0152380952380974*G0_0_1_2_0_1 + 0.0761904761904703*G0_0_1_3_0_0 - 0.19555555555556*G0_0_1_3_0_1 + 0.060952380952378*G0_0_1_4_0_0 + 0.215873015873012*G0_0_1_4_0_1 + 0.0457142857142804*G0_0_1_5_0_0 + 0.0126984126984037*G0_0_1_5_0_1 - 0.060952380952378*G0_0_1_6_0_0 - 0.0177777777777703*G0_0_1_6_0_1 - 0.0812698412698458*G0_0_1_7_0_0 - 0.0482539682539693*G0_0_1_7_0_1 + 0.193015873015875*G0_0_1_8_0_0 + 0.19555555555556*G0_0_1_8_0_1 - 0.12190476190475*G0_0_1_9_0_0 - 0.167619047619043*G0_0_1_9_0_1 + 0.0203174603174641*G0_0_1_10_1_0 + 0.0203174603174639*G0_0_1_10_1_1 - 0.132063492063493*G0_0_1_11_1_0 - 0.0152380952380974*G0_0_1_12_1_1 + 0.0761904761904703*G0_0_1_13_1_0 - 0.19555555555556*G0_0_1_13_1_1 + 0.060952380952378*G0_0_1_14_1_0 + 0.215873015873012*G0_0_1_14_1_1 + 0.0457142857142804*G0_0_1_15_1_0 + 0.0126984126984037*G0_0_1_15_1_1 - 0.060952380952378*G0_0_1_16_1_0 - 0.0177777777777703*G0_0_1_16_1_1 - 0.0812698412698458*G0_0_1_17_1_0 - 0.0482539682539693*G0_0_1_17_1_1 + 0.193015873015875*G0_0_1_18_1_0 + 0.19555555555556*G0_0_1_18_1_1 - 0.12190476190475*G0_0_1_19_1_0 - 0.167619047619043*G0_0_1_19_1_1 - 0.020317460317464*G0_1_0_0_0_0 - 0.0203174603174639*G0_1_0_0_0_1 + 0.132063492063493*G0_1_0_1_0_0 + 0.0152380952380974*G0_1_0_2_0_1 - 0.0761904761904704*G0_1_0_3_0_0 + 0.19555555555556*G0_1_0_3_0_1 - 0.0609523809523781*G0_1_0_4_0_0 - 0.215873015873012*G0_1_0_4_0_1 - 0.0457142857142805*G0_1_0_5_0_0 - 0.0126984126984036*G0_1_0_5_0_1 + 0.0609523809523781*G0_1_0_6_0_0 + 0.0177777777777702*G0_1_0_6_0_1 + 0.0812698412698457*G0_1_0_7_0_0 + 0.0482539682539693*G0_1_0_7_0_1 - 0.193015873015875*G0_1_0_8_0_0 - 0.19555555555556*G0_1_0_8_0_1 + 0.121904761904751*G0_1_0_9_0_0 + 0.167619047619043*G0_1_0_9_0_1 - 0.020317460317464*G0_1_0_10_1_0 - 0.0203174603174639*G0_1_0_10_1_1 + 0.132063492063493*G0_1_0_11_1_0 + 0.0152380952380974*G0_1_0_12_1_1 - 0.0761904761904704*G0_1_0_13_1_0 + 0.19555555555556*G0_1_0_13_1_1 - 0.0609523809523781*G0_1_0_14_1_0 - 0.215873015873012*G0_1_0_14_1_1 - 0.0457142857142805*G0_1_0_15_1_0 - 0.0126984126984036*G0_1_0_15_1_1 + 0.0609523809523781*G0_1_0_16_1_0 + 0.0177777777777702*G0_1_0_16_1_1 + 0.0812698412698457*G0_1_0_17_1_0 + 0.0482539682539693*G0_1_0_17_1_1 - 0.193015873015875*G0_1_0_18_1_0 - 0.19555555555556*G0_1_0_18_1_1 + 0.121904761904751*G0_1_0_19_1_0 + 0.167619047619043*G0_1_0_19_1_1;
    A[192] = A[184] + 2.57523809523808*G0_0_0_0_0_0 + 2.57523809523808*G0_0_0_0_0_1 - 1.14285714285714*G0_0_0_1_0_0 - 0.0304761904761853*G0_0_0_2_0_1 + 1.03619047619047*G0_0_0_3_0_0 - 1.02095238095237*G0_0_0_4_0_0 - 1.09714285714285*G0_0_0_4_0_1 + 5.54666666666665*G0_0_0_5_0_0 - 0.609523809523799*G0_0_0_5_0_1 + 1.02095238095237*G0_0_0_6_0_0 - 1.9352380952381*G0_0_0_6_0_1 - 4.96761904761902*G0_0_0_7_0_0 + 1.18857142857142*G0_0_0_7_0_1 + 3.53523809523808*G0_0_0_8_0_0 - 6.58285714285712*G0_0_0_9_0_0 - 0.0914285714285707*G0_0_0_9_0_1 + 2.57523809523808*G0_0_0_10_1_0 + 2.57523809523808*G0_0_0_10_1_1 - 1.14285714285714*G0_0_0_11_1_0 - 0.0304761904761853*G0_0_0_12_1_1 + 1.03619047619047*G0_0_0_13_1_0 - 1.02095238095237*G0_0_0_14_1_0 - 1.09714285714285*G0_0_0_14_1_1 + 5.54666666666665*G0_0_0_15_1_0 - 0.609523809523799*G0_0_0_15_1_1 + 1.02095238095237*G0_0_0_16_1_0 - 1.9352380952381*G0_0_0_16_1_1 - 4.96761904761902*G0_0_0_17_1_0 + 1.18857142857142*G0_0_0_17_1_1 + 3.53523809523808*G0_0_0_18_1_0 - 6.58285714285712*G0_0_0_19_1_0 - 0.0914285714285707*G0_0_0_19_1_1 + 1.01841269841269*G0_0_1_0_0_0 + 1.01841269841269*G0_0_1_0_0_1 + 0.124444444444444*G0_0_1_1_0_0 - 0.698412698412692*G0_0_1_2_0_1 - 0.68571428571428*G0_0_1_3_0_0 + 0.0228571428571446*G0_0_1_3_0_1 - 1.25714285714285*G0_0_1_4_0_0 - 1.14285714285714*G0_0_1_4_0_1 - 1.91999999999998*G0_0_1_5_0_1 + 1.25714285714285*G0_0_1_6_0_0 + 1.59999999999998*G0_0_1_6_0_1 - 0.731428571428565*G0_0_1_7_0_0 + 1.18857142857142*G0_0_1_7_0_1 - 0.411428571428568*G0_0_1_8_0_0 - 0.0228571428571451*G0_0_1_8_0_1 + 0.685714285714274*G0_0_1_9_0_0 - 0.0457142857142807*G0_0_1_9_0_1 + 1.01841269841269*G0_0_1_10_1_0 + 1.01841269841269*G0_0_1_10_1_1 + 0.124444444444444*G0_0_1_11_1_0 - 0.698412698412692*G0_0_1_12_1_1 - 0.68571428571428*G0_0_1_13_1_0 + 0.0228571428571446*G0_0_1_13_1_1 - 1.25714285714285*G0_0_1_14_1_0 - 1.14285714285714*G0_0_1_14_1_1 - 1.91999999999998*G0_0_1_15_1_1 + 1.25714285714285*G0_0_1_16_1_0 + 1.59999999999998*G0_0_1_16_1_1 - 0.731428571428565*G0_0_1_17_1_0 + 1.18857142857142*G0_0_1_17_1_1 - 0.411428571428568*G0_0_1_18_1_0 - 0.0228571428571451*G0_0_1_18_1_1 + 0.685714285714274*G0_0_1_19_1_0 - 0.0457142857142807*G0_0_1_19_1_1 - 0.383492063492055*G0_1_0_0_0_0 - 0.383492063492056*G0_1_0_0_0_1 - 0.393650793650793*G0_1_0_1_0_0 + 0.0177777777777772*G0_1_0_2_0_1 + 0.365714285714283*G0_1_0_3_0_0 - 0.152380952380951*G0_1_0_3_0_1 - 1.37904761904761*G0_1_0_4_0_0 - 1.27238095238095*G0_1_0_4_0_1 + 2.48380952380952*G0_1_0_5_0_0 + 2.46095238095236*G0_1_0_5_0_1 + 1.37904761904761*G0_1_0_6_0_0 - 2.09523809523808*G0_1_0_6_0_1 + 0.0228571428571464*G0_1_0_7_0_1 + 0.777142857142858*G0_1_0_8_0_0 + 0.15238095238095*G0_1_0_8_0_1 - 2.8495238095238*G0_1_0_9_0_0 + 1.2495238095238*G0_1_0_9_0_1 - 0.383492063492055*G0_1_0_10_1_0 - 0.383492063492056*G0_1_0_10_1_1 - 0.393650793650793*G0_1_0_11_1_0 + 0.0177777777777772*G0_1_0_12_1_1 + 0.365714285714283*G0_1_0_13_1_0 - 0.152380952380951*G0_1_0_13_1_1 - 1.37904761904761*G0_1_0_14_1_0 - 1.27238095238095*G0_1_0_14_1_1 + 2.48380952380952*G0_1_0_15_1_0 + 2.46095238095236*G0_1_0_15_1_1 + 1.37904761904761*G0_1_0_16_1_0 - 2.09523809523808*G0_1_0_16_1_1 + 0.0228571428571464*G0_1_0_17_1_1 + 0.777142857142858*G0_1_0_18_1_0 + 0.15238095238095*G0_1_0_18_1_1 - 2.8495238095238*G0_1_0_19_1_0 + 1.2495238095238*G0_1_0_19_1_1 - 1.94031746031745*G0_1_1_0_0_0 - 1.94031746031745*G0_1_1_0_0_1 + 0.172698412698411*G0_1_1_1_0_0 + 0.0507936507936506*G0_1_1_2_0_1 - 0.860952380952375*G0_1_1_3_0_0 - 0.33523809523809*G0_1_1_3_0_1 - 1.4095238095238*G0_1_1_4_0_0 - 1.81333333333333*G0_1_1_4_0_1 - 1.16571428571427*G0_1_1_5_0_0 + 3.04761904761903*G0_1_1_5_0_1 + 1.4095238095238*G0_1_1_6_0_0 - 1.15809523809523*G0_1_1_6_0_1 + 2.3390476190476*G0_1_1_7_0_0 - 1.8742857142857*G0_1_1_7_0_1 - 0.571428571428564*G0_1_1_8_0_0 + 0.33523809523809*G0_1_1_8_0_1 + 2.02666666666665*G0_1_1_9_0_0 + 3.68761904761903*G0_1_1_9_0_1 - 1.94031746031745*G0_1_1_10_1_0 - 1.94031746031745*G0_1_1_10_1_1 + 0.172698412698411*G0_1_1_11_1_0 + 0.0507936507936506*G0_1_1_12_1_1 - 0.860952380952375*G0_1_1_13_1_0 - 0.33523809523809*G0_1_1_13_1_1 - 1.4095238095238*G0_1_1_14_1_0 - 1.81333333333333*G0_1_1_14_1_1 - 1.16571428571427*G0_1_1_15_1_0 + 3.04761904761903*G0_1_1_15_1_1 + 1.4095238095238*G0_1_1_16_1_0 - 1.15809523809523*G0_1_1_16_1_1 + 2.3390476190476*G0_1_1_17_1_0 - 1.8742857142857*G0_1_1_17_1_1 - 0.571428571428564*G0_1_1_18_1_0 + 0.33523809523809*G0_1_1_18_1_1 + 2.02666666666665*G0_1_1_19_1_0 + 3.68761904761903*G0_1_1_19_1_1;
    A[366] = A[192] - 1.42222222222221*G0_0_1_0_0_0 - 1.42222222222221*G0_0_1_0_0_1 - 0.386031746031744*G0_0_1_1_0_0 + 0.731428571428566*G0_0_1_2_0_1 + 0.975238095238093*G0_0_1_3_0_0 + 0.0203174603174642*G0_0_1_3_0_1 - 0.182857142857141*G0_0_1_4_0_0 - 0.34539682539682*G0_0_1_4_0_1 + 2.43809523809523*G0_0_1_5_0_0 + 4.36825396825394*G0_0_1_5_0_1 + 0.182857142857141*G0_0_1_6_0_0 - 3.6774603174603*G0_0_1_6_0_1 + 0.812698412698401*G0_0_1_7_0_0 - 1.11746031746031*G0_0_1_7_0_1 + 0.995555555555552*G0_0_1_8_0_0 - 0.0203174603174646*G0_0_1_8_0_1 - 3.41333333333333*G0_0_1_9_0_0 + 1.46285714285713*G0_0_1_9_0_1 - 1.42222222222221*G0_0_1_10_1_0 - 1.42222222222221*G0_0_1_10_1_1 - 0.386031746031744*G0_0_1_11_1_0 + 0.731428571428566*G0_0_1_12_1_1 + 0.975238095238093*G0_0_1_13_1_0 + 0.0203174603174642*G0_0_1_13_1_1 - 0.182857142857141*G0_0_1_14_1_0 - 0.34539682539682*G0_0_1_14_1_1 + 2.43809523809523*G0_0_1_15_1_0 + 4.36825396825394*G0_0_1_15_1_1 + 0.182857142857141*G0_0_1_16_1_0 - 3.6774603174603*G0_0_1_16_1_1 + 0.812698412698401*G0_0_1_17_1_0 - 1.11746031746031*G0_0_1_17_1_1 + 0.995555555555552*G0_0_1_18_1_0 - 0.0203174603174646*G0_0_1_18_1_1 - 3.41333333333333*G0_0_1_19_1_0 + 1.46285714285713*G0_0_1_19_1_1 + 1.42222222222221*G0_1_0_0_0_0 + 1.42222222222221*G0_1_0_0_0_1 + 0.386031746031744*G0_1_0_1_0_0 - 0.731428571428566*G0_1_0_2_0_1 - 0.975238095238093*G0_1_0_3_0_0 - 0.0203174603174642*G0_1_0_3_0_1 + 0.182857142857141*G0_1_0_4_0_0 + 0.34539682539682*G0_1_0_4_0_1 - 2.43809523809523*G0_1_0_5_0_0 - 4.36825396825394*G0_1_0_5_0_1 - 0.182857142857141*G0_1_0_6_0_0 + 3.6774603174603*G0_1_0_6_0_1 - 0.812698412698401*G0_1_0_7_0_0 + 1.1174603174603*G0_1_0_7_0_1 - 0.995555555555552*G0_1_0_8_0_0 + 0.0203174603174646*G0_1_0_8_0_1 + 3.41333333333332*G0_1_0_9_0_0 - 1.46285714285713*G0_1_0_9_0_1 + 1.42222222222221*G0_1_0_10_1_0 + 1.42222222222221*G0_1_0_10_1_1 + 0.386031746031744*G0_1_0_11_1_0 - 0.731428571428566*G0_1_0_12_1_1 - 0.975238095238093*G0_1_0_13_1_0 - 0.0203174603174642*G0_1_0_13_1_1 + 0.182857142857141*G0_1_0_14_1_0 + 0.34539682539682*G0_1_0_14_1_1 - 2.43809523809523*G0_1_0_15_1_0 - 4.36825396825394*G0_1_0_15_1_1 - 0.182857142857141*G0_1_0_16_1_0 + 3.6774603174603*G0_1_0_16_1_1 - 0.812698412698401*G0_1_0_17_1_0 + 1.1174603174603*G0_1_0_17_1_1 - 0.995555555555552*G0_1_0_18_1_0 + 0.0203174603174646*G0_1_0_18_1_1 + 3.41333333333332*G0_1_0_19_1_0 - 1.46285714285713*G0_1_0_19_1_1;
    A[831] = A[366];
    A[657] = A[192];
    A[148] = 0.0;
    A[598] = A[133];
    A[211] = A[676];
    A[167] = 0.0;
    A[503] = A[38];
    A[572] = 0.0;
    A[532] = A[67];
    A[689] = A[224];
    A[605] = 0.0;
    A[561] = A[96];
    A[714] = A[249];
    A[243] = A[708];
    A[272] = A[737];
    A[445] = 0.0;
    A[325] = 0.0;
    A[478] = A[13];
    A[350] = 0.0;
    A[732] = 0.0;
    A[423] = A[888];
    A[383] = 0.0;
    A[759] = 0.0;
    A[412] = 0.0;
    A[858] = A[393];
    A[89] = 0.0;
    A[794] = 0.0;
    A[889] = A[424];
    A[90] = A[555];
    A[825] = A[360];
    A[147] = 0.0;
    A[848] = 0.0;
    A[176] = 0.0;
    A[883] = 0.0;
    A[494] = 0.0;
    A[197] = 0.0;
    A[581] = 0.0;
    A[525] = -A[61] - 0.12095238095238*G0_1_0_0_0_0 - 0.12095238095238*G0_1_0_0_0_1 - 0.120952380952381*G0_1_0_1_0_0 + 0.0561904761904756*G0_1_0_3_0_0 - 0.213809523809524*G0_1_0_3_0_1 + 0.149047619047619*G0_1_0_4_0_1 + 0.0561904761904757*G0_1_0_5_0_0 + 0.269999999999999*G0_1_0_5_0_1 - 0.149047619047618*G0_1_0_6_0_1 + 0.12095238095238*G0_1_0_7_0_0 - 0.092857142857143*G0_1_0_7_0_1 + 0.120952380952381*G0_1_0_8_0_0 + 0.213809523809524*G0_1_0_8_0_1 - 0.112380952380951*G0_1_0_9_0_0 - 0.0561904761904757*G0_1_0_9_0_1 - 0.12095238095238*G0_1_0_10_1_0 - 0.12095238095238*G0_1_0_10_1_1 - 0.120952380952381*G0_1_0_11_1_0 + 0.0561904761904756*G0_1_0_13_1_0 - 0.213809523809524*G0_1_0_13_1_1 + 0.149047619047619*G0_1_0_14_1_1 + 0.0561904761904757*G0_1_0_15_1_0 + 0.269999999999999*G0_1_0_15_1_1 - 0.149047619047618*G0_1_0_16_1_1 + 0.12095238095238*G0_1_0_17_1_0 - 0.092857142857143*G0_1_0_17_1_1 + 0.120952380952381*G0_1_0_18_1_0 + 0.213809523809524*G0_1_0_18_1_1 - 0.112380952380951*G0_1_0_19_1_0 - 0.0561904761904757*G0_1_0_19_1_1 - 0.137962962962963*G0_1_1_0_0_0 - 0.137962962962963*G0_1_1_0_0_1 + 0.017010582010582*G0_1_1_1_0_0 + 0.137962962962963*G0_1_1_2_0_1 - 0.0532539682539688*G0_1_1_3_0_0 - 0.0165873015873017*G0_1_1_3_0_1 + 0.197222222222223*G0_1_1_4_0_0 + 0.0396031746031749*G0_1_1_4_0_1 + 0.109444444444445*G0_1_1_5_0_0 + 0.306666666666666*G0_1_1_5_0_1 - 0.197222222222223*G0_1_1_6_0_0 - 0.306666666666667*G0_1_1_6_0_1 + 0.157619047619047*G0_1_1_7_0_0 - 0.0396031746031744*G0_1_1_7_0_1 - 0.0366666666666664*G0_1_1_8_0_0 + 0.0165873015873017*G0_1_1_8_0_1 - 0.0561904761904758*G0_1_1_9_0_0 - 0.137962962962963*G0_1_1_10_1_0 - 0.137962962962963*G0_1_1_10_1_1 + 0.017010582010582*G0_1_1_11_1_0 + 0.137962962962963*G0_1_1_12_1_1 - 0.0532539682539688*G0_1_1_13_1_0 - 0.0165873015873017*G0_1_1_13_1_1 + 0.197222222222223*G0_1_1_14_1_0 + 0.0396031746031749*G0_1_1_14_1_1 + 0.109444444444445*G0_1_1_15_1_0 + 0.306666666666666*G0_1_1_15_1_1 - 0.197222222222223*G0_1_1_16_1_0 - 0.306666666666667*G0_1_1_16_1_1 + 0.157619047619047*G0_1_1_17_1_0 - 0.0396031746031744*G0_1_1_17_1_1 - 0.0366666666666664*G0_1_1_18_1_0 + 0.0165873015873017*G0_1_1_18_1_1 - 0.0561904761904758*G0_1_1_19_1_0;
    A[230] = 0.0;
    A[680] = A[215];
    A[612] = 0.0;
    A[552] = 0.0;
    A[707] = A[242];
    A[631] = 0.0;
    A[250] = A[715];
    A[674] = 0.0;
    A[281] = A[804] + 0.135449735449735*G0_0_1_0_0_0 + 0.135449735449735*G0_0_1_0_0_1 - 0.135449735449732*G0_0_1_1_0_0 - 0.196402116402115*G0_0_1_2_0_1 - 0.345396825396822*G0_0_1_3_0_0 - 0.711111111111102*G0_0_1_3_0_1 + 0.142222222222222*G0_0_1_4_0_0 + 0.568888888888885*G0_0_1_4_0_1 + 0.345396825396825*G0_0_1_5_0_0 - 0.365714285714284*G0_0_1_5_0_1 - 0.142222222222222*G0_0_1_6_0_0 + 0.426666666666664*G0_0_1_6_0_1 + 0.670476190476188*G0_0_1_7_0_0 + 1.3815873015873*G0_0_1_7_0_1 - 0.670476190476191*G0_0_1_8_0_0 + 0.711111111111102*G0_0_1_8_0_1 - 1.95047619047618*G0_0_1_9_0_1 + 0.135449735449735*G0_0_1_10_1_0 + 0.135449735449735*G0_0_1_10_1_1 - 0.135449735449732*G0_0_1_11_1_0 - 0.196402116402115*G0_0_1_12_1_1 - 0.345396825396822*G0_0_1_13_1_0 - 0.711111111111102*G0_0_1_13_1_1 + 0.142222222222222*G0_0_1_14_1_0 + 0.568888888888885*G0_0_1_14_1_1 + 0.345396825396825*G0_0_1_15_1_0 - 0.365714285714284*G0_0_1_15_1_1 - 0.142222222222222*G0_0_1_16_1_0 + 0.426666666666664*G0_0_1_16_1_1 + 0.670476190476188*G0_0_1_17_1_0 + 1.3815873015873*G0_0_1_17_1_1 - 0.670476190476191*G0_0_1_18_1_0 + 0.711111111111102*G0_0_1_18_1_1 - 1.95047619047618*G0_0_1_19_1_1 - 0.135449735449735*G0_1_0_0_0_0 - 0.135449735449735*G0_1_0_0_0_1 + 0.135449735449732*G0_1_0_1_0_0 + 0.196402116402115*G0_1_0_2_0_1 + 0.345396825396822*G0_1_0_3_0_0 + 0.711111111111103*G0_1_0_3_0_1 - 0.142222222222222*G0_1_0_4_0_0 - 0.568888888888885*G0_1_0_4_0_1 - 0.345396825396825*G0_1_0_5_0_0 + 0.365714285714284*G0_1_0_5_0_1 + 0.142222222222222*G0_1_0_6_0_0 - 0.426666666666664*G0_1_0_6_0_1 - 0.670476190476188*G0_1_0_7_0_0 - 1.3815873015873*G0_1_0_7_0_1 + 0.670476190476191*G0_1_0_8_0_0 - 0.711111111111102*G0_1_0_8_0_1 + 1.95047619047618*G0_1_0_9_0_1 - 0.135449735449735*G0_1_0_10_1_0 - 0.135449735449735*G0_1_0_10_1_1 + 0.135449735449732*G0_1_0_11_1_0 + 0.196402116402115*G0_1_0_12_1_1 + 0.345396825396822*G0_1_0_13_1_0 + 0.711111111111103*G0_1_0_13_1_1 - 0.142222222222222*G0_1_0_14_1_0 - 0.568888888888885*G0_1_0_14_1_1 - 0.345396825396825*G0_1_0_15_1_0 + 0.365714285714284*G0_1_0_15_1_1 + 0.142222222222222*G0_1_0_16_1_0 - 0.426666666666664*G0_1_0_16_1_1 - 0.670476190476188*G0_1_0_17_1_0 - 1.3815873015873*G0_1_0_17_1_1 + 0.670476190476191*G0_1_0_18_1_0 - 0.711111111111102*G0_1_0_18_1_1 + 1.95047619047618*G0_1_0_19_1_1;
    A[273] = -A[281] - 1.46962962962963*G0_0_0_0_0_0 - 1.46962962962963*G0_0_0_0_0_1 + 1.08359788359788*G0_0_0_1_0_0 + 0.331851851851851*G0_0_0_2_0_1 - 0.182857142857142*G0_0_0_3_0_0 + 1.47301587301587*G0_0_0_3_0_1 - 0.243809523809524*G0_0_0_4_0_0 - 1.14793650793651*G0_0_0_4_0_1 - 1.27999999999999*G0_0_0_5_0_0 + 1.69650793650794*G0_0_0_5_0_1 + 0.243809523809524*G0_0_0_6_0_0 - 0.55873015873016*G0_0_0_6_0_1 + 2.23492063492063*G0_0_0_7_0_0 - 0.741587301587299*G0_0_0_7_0_1 - 1.84888888888888*G0_0_0_8_0_0 - 1.47301587301587*G0_0_0_8_0_1 + 1.46285714285714*G0_0_0_9_0_0 + 1.8895238095238*G0_0_0_9_0_1 - 1.46962962962963*G0_0_0_10_1_0 - 1.46962962962963*G0_0_0_10_1_1 + 1.08359788359788*G0_0_0_11_1_0 + 0.331851851851851*G0_0_0_12_1_1 - 0.182857142857142*G0_0_0_13_1_0 + 1.47301587301587*G0_0_0_13_1_1 - 0.243809523809524*G0_0_0_14_1_0 - 1.14793650793651*G0_0_0_14_1_1 - 1.27999999999999*G0_0_0_15_1_0 + 1.69650793650794*G0_0_0_15_1_1 + 0.243809523809524*G0_0_0_16_1_0 - 0.55873015873016*G0_0_0_16_1_1 + 2.23492063492063*G0_0_0_17_1_0 - 0.741587301587299*G0_0_0_17_1_1 - 1.84888888888888*G0_0_0_18_1_0 - 1.47301587301587*G0_0_0_18_1_1 + 1.46285714285714*G0_0_0_19_1_0 + 1.8895238095238*G0_0_0_19_1_1 - 0.115132275132274*G0_1_0_0_0_0 - 0.115132275132274*G0_1_0_0_0_1 + 0.643386243386241*G0_1_0_1_0_0 + 0.318306878306877*G0_1_0_2_0_1 - 0.0507936507936524*G0_1_0_3_0_0 + 1.42222222222221*G0_1_0_3_0_1 - 0.172698412698412*G0_1_0_4_0_0 - 1.32063492063492*G0_1_0_4_0_1 - 0.497777777777777*G0_1_0_5_0_0 + 0.142222222222219*G0_1_0_5_0_1 + 0.172698412698412*G0_1_0_6_0_0 - 0.345396825396822*G0_1_0_6_0_1 - 0.477460317460316*G0_1_0_7_0_0 - 1.11746031746031*G0_1_0_7_0_1 - 0.0507936507936495*G0_1_0_8_0_0 - 1.42222222222221*G0_1_0_8_0_1 + 0.548571428571429*G0_1_0_9_0_0 + 2.43809523809523*G0_1_0_9_0_1 - 0.115132275132274*G0_1_0_10_1_0 - 0.115132275132274*G0_1_0_10_1_1 + 0.643386243386241*G0_1_0_11_1_0 + 0.318306878306877*G0_1_0_12_1_1 - 0.0507936507936524*G0_1_0_13_1_0 + 1.42222222222221*G0_1_0_13_1_1 - 0.172698412698412*G0_1_0_14_1_0 - 1.32063492063492*G0_1_0_14_1_1 - 0.497777777777777*G0_1_0_15_1_0 + 0.142222222222219*G0_1_0_15_1_1 + 0.172698412698412*G0_1_0_16_1_0 - 0.345396825396822*G0_1_0_16_1_1 - 0.477460317460316*G0_1_0_17_1_0 - 1.11746031746031*G0_1_0_17_1_1 - 0.0507936507936495*G0_1_0_18_1_0 - 1.42222222222221*G0_1_0_18_1_1 + 0.548571428571429*G0_1_0_19_1_0 + 2.43809523809523*G0_1_0_19_1_1;
    A[621] = A[273] + 0.284444444444443*G0_0_0_0_0_0 + 0.284444444444444*G0_0_0_0_0_1 + 0.507936507936505*G0_0_0_1_0_0 - 1.44253968253967*G0_0_0_2_0_1 + 1.36126984126983*G0_0_0_3_0_0 + 1.26984126984126*G0_0_0_3_0_1 - 2.35682539682538*G0_0_0_4_0_0 - 0.314920634920632*G0_0_0_4_0_1 - 1.11746031746031*G0_0_0_5_0_0 - 1.55428571428571*G0_0_0_5_0_1 + 2.35682539682538*G0_0_0_6_0_0 + 2.71238095238093*G0_0_0_6_0_1 + 0.670476190476185*G0_0_0_7_0_0 + 1.10730158730158*G0_0_0_7_0_1 - 1.46285714285713*G0_0_0_8_0_0 - 1.26984126984126*G0_0_0_8_0_1 - 0.243809523809519*G0_0_0_9_0_0 - 0.792380952380948*G0_0_0_9_0_1 + 0.284444444444443*G0_0_0_10_1_0 + 0.284444444444444*G0_0_0_10_1_1 + 0.507936507936505*G0_0_0_11_1_0 - 1.44253968253967*G0_0_0_12_1_1 + 1.36126984126983*G0_0_0_13_1_0 + 1.26984126984126*G0_0_0_13_1_1 - 2.35682539682538*G0_0_0_14_1_0 - 0.314920634920632*G0_0_0_14_1_1 - 1.11746031746031*G0_0_0_15_1_0 - 1.55428571428571*G0_0_0_15_1_1 + 2.35682539682538*G0_0_0_16_1_0 + 2.71238095238093*G0_0_0_16_1_1 + 0.670476190476185*G0_0_0_17_1_0 + 1.10730158730158*G0_0_0_17_1_1 - 1.46285714285713*G0_0_0_18_1_0 - 1.26984126984126*G0_0_0_18_1_1 - 0.243809523809519*G0_0_0_19_1_0 - 0.792380952380948*G0_0_0_19_1_1 + 1.17841269841269*G0_0_1_1_0_0 - 1.17841269841269*G0_0_1_2_0_1 + 0.96507936507936*G0_0_1_3_0_0 + 2.14349206349205*G0_0_1_3_0_1 - 2.14349206349205*G0_0_1_4_0_0 - 0.965079365079361*G0_0_1_4_0_1 - 1.39174603174603*G0_0_1_5_0_0 - 1.39174603174603*G0_0_1_5_0_1 + 2.14349206349205*G0_0_1_6_0_0 + 2.57015873015872*G0_0_1_6_0_1 + 1.39174603174602*G0_0_1_7_0_0 + 1.39174603174603*G0_0_1_7_0_1 - 2.57015873015872*G0_0_1_8_0_0 - 2.14349206349206*G0_0_1_8_0_1 + 0.426666666666666*G0_0_1_9_0_0 - 0.426666666666664*G0_0_1_9_0_1 + 1.17841269841269*G0_0_1_11_1_0 - 1.17841269841269*G0_0_1_12_1_1 + 0.96507936507936*G0_0_1_13_1_0 + 2.14349206349205*G0_0_1_13_1_1 - 2.14349206349205*G0_0_1_14_1_0 - 0.965079365079361*G0_0_1_14_1_1 - 1.39174603174603*G0_0_1_15_1_0 - 1.39174603174603*G0_0_1_15_1_1 + 2.14349206349205*G0_0_1_16_1_0 + 2.57015873015872*G0_0_1_16_1_1 + 1.39174603174602*G0_0_1_17_1_0 + 1.39174603174603*G0_0_1_17_1_1 - 2.57015873015872*G0_0_1_18_1_0 - 2.14349206349206*G0_0_1_18_1_1 + 0.426666666666666*G0_0_1_19_1_0 - 0.426666666666664*G0_0_1_19_1_1 + 0.792380952380948*G0_1_0_1_0_0 - 0.792380952380947*G0_1_0_2_0_1 + 0.609523809523807*G0_1_0_3_0_0 + 1.40190476190475*G0_1_0_3_0_1 - 1.40190476190475*G0_1_0_4_0_0 - 0.609523809523804*G0_1_0_4_0_1 - 0.975238095238088*G0_1_0_5_0_0 - 0.975238095238088*G0_1_0_5_0_1 + 1.40190476190475*G0_1_0_6_0_0 + 1.76761904761904*G0_1_0_6_0_1 + 0.975238095238089*G0_1_0_7_0_0 + 0.97523809523809*G0_1_0_7_0_1 - 1.76761904761904*G0_1_0_8_0_0 - 1.40190476190476*G0_1_0_8_0_1 + 0.365714285714281*G0_1_0_9_0_0 - 0.365714285714284*G0_1_0_9_0_1 + 0.792380952380948*G0_1_0_11_1_0 - 0.792380952380947*G0_1_0_12_1_1 + 0.609523809523807*G0_1_0_13_1_0 + 1.40190476190475*G0_1_0_13_1_1 - 1.40190476190475*G0_1_0_14_1_0 - 0.609523809523804*G0_1_0_14_1_1 - 0.975238095238088*G0_1_0_15_1_0 - 0.975238095238088*G0_1_0_15_1_1 + 1.40190476190475*G0_1_0_16_1_0 + 1.76761904761904*G0_1_0_16_1_1 + 0.975238095238089*G0_1_0_17_1_0 + 0.97523809523809*G0_1_0_17_1_1 - 1.76761904761904*G0_1_0_18_1_0 - 1.40190476190476*G0_1_0_18_1_1 + 0.365714285714281*G0_1_0_19_1_0 - 0.365714285714284*G0_1_0_19_1_1 - 0.284444444444442*G0_1_1_0_0_0 - 0.284444444444442*G0_1_1_0_0_1 + 1.44253968253967*G0_1_1_1_0_0 - 0.507936507936505*G0_1_1_2_0_1 + 0.314920634920634*G0_1_1_3_0_0 + 2.35682539682538*G0_1_1_3_0_1 - 1.26984126984126*G0_1_1_4_0_0 - 1.36126984126983*G0_1_1_4_0_1 - 1.10730158730158*G0_1_1_5_0_0 - 0.670476190476188*G0_1_1_5_0_1 + 1.26984126984126*G0_1_1_6_0_0 + 1.46285714285713*G0_1_1_6_0_1 + 1.5542857142857*G0_1_1_7_0_0 + 1.11746031746031*G0_1_1_7_0_1 - 2.71238095238093*G0_1_1_8_0_0 - 2.35682539682538*G0_1_1_8_0_1 + 0.792380952380946*G0_1_1_9_0_0 + 0.243809523809521*G0_1_1_9_0_1 - 0.284444444444442*G0_1_1_10_1_0 - 0.284444444444442*G0_1_1_10_1_1 + 1.44253968253967*G0_1_1_11_1_0 - 0.507936507936505*G0_1_1_12_1_1 + 0.314920634920634*G0_1_1_13_1_0 + 2.35682539682538*G0_1_1_13_1_1 - 1.26984126984126*G0_1_1_14_1_0 - 1.36126984126983*G0_1_1_14_1_1 - 1.10730158730158*G0_1_1_15_1_0 - 0.670476190476188*G0_1_1_15_1_1 + 1.26984126984126*G0_1_1_16_1_0 + 1.46285714285713*G0_1_1_16_1_1 + 1.5542857142857*G0_1_1_17_1_0 + 1.11746031746031*G0_1_1_17_1_1 - 2.71238095238093*G0_1_1_18_1_0 - 2.35682539682538*G0_1_1_18_1_1 + 0.792380952380946*G0_1_1_19_1_0 + 0.243809523809521*G0_1_1_19_1_1;
    A[156] = A[621];
    A[738] = A[273];
    A[650] = A[621] + 0.0203174603174588*G0_0_1_0_0_0 + 0.020317460317459*G0_0_1_0_0_1 + 0.121904761904763*G0_0_1_1_0_0 + 0.507936507936508*G0_0_1_2_0_1 - 0.751746031746027*G0_0_1_3_0_0 - 0.0304761904761874*G0_0_1_3_0_1 + 0.711111111111111*G0_0_1_4_0_0 - 0.396190476190474*G0_0_1_4_0_1 + 0.264126984126986*G0_0_1_5_0_0 + 0.193015873015876*G0_0_1_5_0_1 - 0.711111111111111*G0_0_1_6_0_0 - 0.721269841269844*G0_0_1_6_0_1 - 0.223492063492062*G0_0_1_7_0_0 - 0.152380952380951*G0_0_1_7_0_1 + 0.0812698412698399*G0_0_1_8_0_0 + 0.0304761904761875*G0_0_1_8_0_1 + 0.487619047619042*G0_0_1_9_0_0 + 0.548571428571426*G0_0_1_9_0_1 + 0.0203174603174588*G0_0_1_10_1_0 + 0.020317460317459*G0_0_1_10_1_1 + 0.121904761904763*G0_0_1_11_1_0 + 0.507936507936508*G0_0_1_12_1_1 - 0.751746031746027*G0_0_1_13_1_0 - 0.0304761904761874*G0_0_1_13_1_1 + 0.711111111111111*G0_0_1_14_1_0 - 0.396190476190474*G0_0_1_14_1_1 + 0.264126984126986*G0_0_1_15_1_0 + 0.193015873015876*G0_0_1_15_1_1 - 0.711111111111111*G0_0_1_16_1_0 - 0.721269841269844*G0_0_1_16_1_1 - 0.223492063492062*G0_0_1_17_1_0 - 0.152380952380951*G0_0_1_17_1_1 + 0.0812698412698399*G0_0_1_18_1_0 + 0.0304761904761875*G0_0_1_18_1_1 + 0.487619047619042*G0_0_1_19_1_0 + 0.548571428571426*G0_0_1_19_1_1 - 0.0203174603174588*G0_1_0_0_0_0 - 0.020317460317459*G0_1_0_0_0_1 - 0.121904761904763*G0_1_0_1_0_0 - 0.507936507936508*G0_1_0_2_0_1 + 0.751746031746028*G0_1_0_3_0_0 + 0.0304761904761875*G0_1_0_3_0_1 - 0.711111111111111*G0_1_0_4_0_0 + 0.396190476190474*G0_1_0_4_0_1 - 0.264126984126986*G0_1_0_5_0_0 - 0.193015873015876*G0_1_0_5_0_1 + 0.711111111111111*G0_1_0_6_0_0 + 0.721269841269844*G0_1_0_6_0_1 + 0.223492063492062*G0_1_0_7_0_0 + 0.152380952380951*G0_1_0_7_0_1 - 0.0812698412698399*G0_1_0_8_0_0 - 0.0304761904761875*G0_1_0_8_0_1 - 0.487619047619042*G0_1_0_9_0_0 - 0.548571428571426*G0_1_0_9_0_1 - 0.0203174603174588*G0_1_0_10_1_0 - 0.020317460317459*G0_1_0_10_1_1 - 0.121904761904763*G0_1_0_11_1_0 - 0.507936507936508*G0_1_0_12_1_1 + 0.751746031746028*G0_1_0_13_1_0 + 0.0304761904761875*G0_1_0_13_1_1 - 0.711111111111111*G0_1_0_14_1_0 + 0.396190476190474*G0_1_0_14_1_1 - 0.264126984126986*G0_1_0_15_1_0 - 0.193015873015876*G0_1_0_15_1_1 + 0.711111111111111*G0_1_0_16_1_0 + 0.721269841269844*G0_1_0_16_1_1 + 0.223492063492062*G0_1_0_17_1_0 + 0.152380952380951*G0_1_0_17_1_1 - 0.0812698412698399*G0_1_0_18_1_0 - 0.0304761904761875*G0_1_0_18_1_1 - 0.487619047619042*G0_1_0_19_1_0 - 0.548571428571426*G0_1_0_19_1_1;
    A[185] = A[650];
    A[711] = -A[621] - 0.115132275132276*G0_1_0_0_0_0 - 0.115132275132276*G0_1_0_0_0_1 + 0.318306878306878*G0_1_0_1_0_0 + 0.64338624338624*G0_1_0_2_0_1 - 1.32063492063491*G0_1_0_3_0_0 - 0.172698412698408*G0_1_0_3_0_1 + 1.42222222222221*G0_1_0_4_0_0 - 0.0507936507936502*G0_1_0_4_0_1 - 1.11746031746031*G0_1_0_5_0_0 - 0.477460317460313*G0_1_0_5_0_1 - 1.42222222222221*G0_1_0_6_0_0 - 0.0507936507936511*G0_1_0_6_0_1 + 0.142222222222223*G0_1_0_7_0_0 - 0.497777777777777*G0_1_0_7_0_1 - 0.345396825396825*G0_1_0_8_0_0 + 0.172698412698409*G0_1_0_8_0_1 + 2.43809523809523*G0_1_0_9_0_0 + 0.548571428571427*G0_1_0_9_0_1 - 0.115132275132276*G0_1_0_10_1_0 - 0.115132275132276*G0_1_0_10_1_1 + 0.318306878306878*G0_1_0_11_1_0 + 0.64338624338624*G0_1_0_12_1_1 - 1.32063492063491*G0_1_0_13_1_0 - 0.172698412698408*G0_1_0_13_1_1 + 1.42222222222221*G0_1_0_14_1_0 - 0.0507936507936502*G0_1_0_14_1_1 - 1.11746031746031*G0_1_0_15_1_0 - 0.477460317460313*G0_1_0_15_1_1 - 1.42222222222221*G0_1_0_16_1_0 - 0.0507936507936511*G0_1_0_16_1_1 + 0.142222222222223*G0_1_0_17_1_0 - 0.497777777777777*G0_1_0_17_1_1 - 0.345396825396825*G0_1_0_18_1_0 + 0.172698412698409*G0_1_0_18_1_1 + 2.43809523809523*G0_1_0_19_1_0 + 0.548571428571427*G0_1_0_19_1_1 - 1.46962962962962*G0_1_1_0_0_0 - 1.46962962962962*G0_1_1_0_0_1 + 0.331851851851851*G0_1_1_1_0_0 + 1.08359788359788*G0_1_1_2_0_1 - 1.1479365079365*G0_1_1_3_0_0 - 0.243809523809519*G0_1_1_3_0_1 + 1.47301587301587*G0_1_1_4_0_0 - 0.18285714285714*G0_1_1_4_0_1 - 0.741587301587296*G0_1_1_5_0_0 + 2.23492063492062*G0_1_1_5_0_1 - 1.47301587301587*G0_1_1_6_0_0 - 1.84888888888888*G0_1_1_6_0_1 + 1.69650793650793*G0_1_1_7_0_0 - 1.27999999999999*G0_1_1_7_0_1 - 0.558730158730155*G0_1_1_8_0_0 + 0.243809523809519*G0_1_1_8_0_1 + 1.8895238095238*G0_1_1_9_0_0 + 1.46285714285713*G0_1_1_9_0_1 - 1.46962962962962*G0_1_1_10_1_0 - 1.46962962962962*G0_1_1_10_1_1 + 0.331851851851851*G0_1_1_11_1_0 + 1.08359788359788*G0_1_1_12_1_1 - 1.1479365079365*G0_1_1_13_1_0 - 0.243809523809519*G0_1_1_13_1_1 + 1.47301587301587*G0_1_1_14_1_0 - 0.18285714285714*G0_1_1_14_1_1 - 0.741587301587296*G0_1_1_15_1_0 + 2.23492063492062*G0_1_1_15_1_1 - 1.47301587301587*G0_1_1_16_1_0 - 1.84888888888888*G0_1_1_16_1_1 + 1.69650793650793*G0_1_1_17_1_0 - 1.27999999999999*G0_1_1_17_1_1 - 0.558730158730155*G0_1_1_18_1_0 + 0.243809523809519*G0_1_1_18_1_1 + 1.8895238095238*G0_1_1_19_1_0 + 1.46285714285713*G0_1_1_19_1_1;
    A[246] = A[711];
    A[653] = A[711] - 0.135449735449735*G0_0_1_0_0_0 - 0.135449735449735*G0_0_1_0_0_1 + 0.196402116402115*G0_0_1_1_0_0 + 0.135449735449732*G0_0_1_2_0_1 - 0.568888888888884*G0_0_1_3_0_0 - 0.142222222222221*G0_0_1_3_0_1 + 0.711111111111105*G0_0_1_4_0_0 + 0.345396825396824*G0_0_1_4_0_1 - 1.3815873015873*G0_0_1_5_0_0 - 0.670476190476188*G0_0_1_5_0_1 - 0.711111111111105*G0_0_1_6_0_0 + 0.670476190476191*G0_0_1_6_0_1 + 0.365714285714285*G0_0_1_7_0_0 - 0.345396825396825*G0_0_1_7_0_1 - 0.426666666666665*G0_0_1_8_0_0 + 0.142222222222221*G0_0_1_8_0_1 + 1.95047619047618*G0_0_1_9_0_0 - 0.135449735449735*G0_0_1_10_1_0 - 0.135449735449735*G0_0_1_10_1_1 + 0.196402116402115*G0_0_1_11_1_0 + 0.135449735449732*G0_0_1_12_1_1 - 0.568888888888884*G0_0_1_13_1_0 - 0.142222222222221*G0_0_1_13_1_1 + 0.711111111111105*G0_0_1_14_1_0 + 0.345396825396824*G0_0_1_14_1_1 - 1.3815873015873*G0_0_1_15_1_0 - 0.670476190476188*G0_0_1_15_1_1 - 0.711111111111105*G0_0_1_16_1_0 + 0.670476190476191*G0_0_1_16_1_1 + 0.365714285714285*G0_0_1_17_1_0 - 0.345396825396825*G0_0_1_17_1_1 - 0.426666666666665*G0_0_1_18_1_0 + 0.142222222222221*G0_0_1_18_1_1 + 1.95047619047618*G0_0_1_19_1_0 + 0.135449735449735*G0_1_0_0_0_0 + 0.135449735449735*G0_1_0_0_0_1 - 0.196402116402115*G0_1_0_1_0_0 - 0.135449735449732*G0_1_0_2_0_1 + 0.568888888888884*G0_1_0_3_0_0 + 0.142222222222221*G0_1_0_3_0_1 - 0.711111111111105*G0_1_0_4_0_0 - 0.345396825396824*G0_1_0_4_0_1 + 1.3815873015873*G0_1_0_5_0_0 + 0.670476190476188*G0_1_0_5_0_1 + 0.711111111111105*G0_1_0_6_0_0 - 0.670476190476191*G0_1_0_6_0_1 - 0.365714285714285*G0_1_0_7_0_0 + 0.345396825396825*G0_1_0_7_0_1 + 0.426666666666665*G0_1_0_8_0_0 - 0.142222222222221*G0_1_0_8_0_1 - 1.95047619047618*G0_1_0_9_0_0 + 0.135449735449735*G0_1_0_10_1_0 + 0.135449735449735*G0_1_0_10_1_1 - 0.196402116402115*G0_1_0_11_1_0 - 0.135449735449732*G0_1_0_12_1_1 + 0.568888888888884*G0_1_0_13_1_0 + 0.142222222222221*G0_1_0_13_1_1 - 0.711111111111105*G0_1_0_14_1_0 - 0.345396825396824*G0_1_0_14_1_1 + 1.3815873015873*G0_1_0_15_1_0 + 0.670476190476188*G0_1_0_15_1_1 + 0.711111111111105*G0_1_0_16_1_0 - 0.670476190476191*G0_1_0_16_1_1 - 0.365714285714285*G0_1_0_17_1_0 + 0.345396825396825*G0_1_0_17_1_1 + 0.426666666666665*G0_1_0_18_1_0 - 0.142222222222221*G0_1_0_18_1_1 - 1.95047619047618*G0_1_0_19_1_0;
    A[705] = A[240];
    A[300] = A[765];
    A[256] = 0.0;
    A[343] = A[808];
    A[22] = 0.0;
    A[739] = A[274];
    A[430] = A[895];
    A[374] = A[897] - 0.975238095238095*G0_0_1_0_0_0 - 0.975238095238095*G0_0_1_0_0_1 + 0.97523809523809*G0_0_1_1_0_0 + 0.975238095238094*G0_0_1_2_0_1 - 2.80380952380951*G0_0_1_3_0_0 - 0.243809523809523*G0_0_1_3_0_1 + 1.5847619047619*G0_0_1_4_0_0 - 0.975238095238089*G0_0_1_4_0_1 - 0.853333333333329*G0_0_1_5_0_0 + 0.731428571428577*G0_0_1_5_0_1 - 1.5847619047619*G0_0_1_6_0_0 - 0.731428571428576*G0_0_1_6_0_1 + 2.55999999999999*G0_0_1_7_0_0 + 0.975238095238087*G0_0_1_7_0_1 - 2.55999999999999*G0_0_1_8_0_0 + 0.243809523809524*G0_0_1_8_0_1 + 3.65714285714284*G0_0_1_9_0_0 - 0.975238095238095*G0_0_1_10_1_0 - 0.975238095238095*G0_0_1_10_1_1 + 0.97523809523809*G0_0_1_11_1_0 + 0.975238095238094*G0_0_1_12_1_1 - 2.80380952380951*G0_0_1_13_1_0 - 0.243809523809523*G0_0_1_13_1_1 + 1.5847619047619*G0_0_1_14_1_0 - 0.975238095238089*G0_0_1_14_1_1 - 0.853333333333329*G0_0_1_15_1_0 + 0.731428571428577*G0_0_1_15_1_1 - 1.5847619047619*G0_0_1_16_1_0 - 0.731428571428576*G0_0_1_16_1_1 + 2.55999999999999*G0_0_1_17_1_0 + 0.975238095238087*G0_0_1_17_1_1 - 2.55999999999999*G0_0_1_18_1_0 + 0.243809523809524*G0_0_1_18_1_1 + 3.65714285714284*G0_0_1_19_1_0 + 0.975238095238095*G0_1_0_0_0_0 + 0.975238095238095*G0_1_0_0_0_1 - 0.97523809523809*G0_1_0_1_0_0 - 0.975238095238094*G0_1_0_2_0_1 + 2.80380952380951*G0_1_0_3_0_0 + 0.243809523809523*G0_1_0_3_0_1 - 1.5847619047619*G0_1_0_4_0_0 + 0.975238095238088*G0_1_0_4_0_1 + 0.853333333333329*G0_1_0_5_0_0 - 0.731428571428577*G0_1_0_5_0_1 + 1.5847619047619*G0_1_0_6_0_0 + 0.731428571428576*G0_1_0_6_0_1 - 2.55999999999999*G0_1_0_7_0_0 - 0.975238095238087*G0_1_0_7_0_1 + 2.55999999999999*G0_1_0_8_0_0 - 0.243809523809524*G0_1_0_8_0_1 - 3.65714285714284*G0_1_0_9_0_0 + 0.975238095238095*G0_1_0_10_1_0 + 0.975238095238095*G0_1_0_10_1_1 - 0.97523809523809*G0_1_0_11_1_0 - 0.975238095238094*G0_1_0_12_1_1 + 2.80380952380951*G0_1_0_13_1_0 + 0.243809523809523*G0_1_0_13_1_1 - 1.5847619047619*G0_1_0_14_1_0 + 0.975238095238088*G0_1_0_14_1_1 + 0.853333333333329*G0_1_0_15_1_0 - 0.731428571428577*G0_1_0_15_1_1 + 1.5847619047619*G0_1_0_16_1_0 + 0.731428571428576*G0_1_0_16_1_1 - 2.55999999999999*G0_1_0_17_1_0 - 0.975238095238087*G0_1_0_17_1_1 + 2.55999999999999*G0_1_0_18_1_0 - 0.243809523809524*G0_1_0_18_1_1 - 3.65714285714284*G0_1_0_19_1_0;
    A[53] = 0.0;
    A[768] = A[303];
    A[453] = 0.0;
    A[405] = 0.0;
    A[80] = 0.0;
    A[789] = 0.0;
    A[12] = A[477];
    A[99] = -A[804] - 1.46962962962963*G0_0_0_0_0_0 - 1.46962962962963*G0_0_0_0_0_1 + 1.08359788359788*G0_0_0_1_0_0 + 0.331851851851851*G0_0_0_2_0_1 - 0.182857142857142*G0_0_0_3_0_0 + 1.47301587301587*G0_0_0_3_0_1 - 0.243809523809524*G0_0_0_4_0_0 - 1.14793650793651*G0_0_0_4_0_1 - 1.27999999999999*G0_0_0_5_0_0 + 1.69650793650794*G0_0_0_5_0_1 + 0.243809523809524*G0_0_0_6_0_0 - 0.55873015873016*G0_0_0_6_0_1 + 2.23492063492063*G0_0_0_7_0_0 - 0.741587301587299*G0_0_0_7_0_1 - 1.84888888888888*G0_0_0_8_0_0 - 1.47301587301587*G0_0_0_8_0_1 + 1.46285714285714*G0_0_0_9_0_0 + 1.8895238095238*G0_0_0_9_0_1 - 1.46962962962963*G0_0_0_10_1_0 - 1.46962962962963*G0_0_0_10_1_1 + 1.08359788359788*G0_0_0_11_1_0 + 0.331851851851851*G0_0_0_12_1_1 - 0.182857142857142*G0_0_0_13_1_0 + 1.47301587301587*G0_0_0_13_1_1 - 0.243809523809524*G0_0_0_14_1_0 - 1.14793650793651*G0_0_0_14_1_1 - 1.27999999999999*G0_0_0_15_1_0 + 1.69650793650794*G0_0_0_15_1_1 + 0.243809523809524*G0_0_0_16_1_0 - 0.55873015873016*G0_0_0_16_1_1 + 2.23492063492063*G0_0_0_17_1_0 - 0.741587301587299*G0_0_0_17_1_1 - 1.84888888888888*G0_0_0_18_1_0 - 1.47301587301587*G0_0_0_18_1_1 + 1.46285714285714*G0_0_0_19_1_0 + 1.8895238095238*G0_0_0_19_1_1 - 0.115132275132274*G0_0_1_0_0_0 - 0.115132275132274*G0_0_1_0_0_1 + 0.643386243386241*G0_0_1_1_0_0 + 0.318306878306877*G0_0_1_2_0_1 - 0.0507936507936524*G0_0_1_3_0_0 + 1.42222222222221*G0_0_1_3_0_1 - 0.172698412698412*G0_0_1_4_0_0 - 1.32063492063492*G0_0_1_4_0_1 - 0.497777777777777*G0_0_1_5_0_0 + 0.142222222222219*G0_0_1_5_0_1 + 0.172698412698412*G0_0_1_6_0_0 - 0.345396825396822*G0_0_1_6_0_1 - 0.477460317460316*G0_0_1_7_0_0 - 1.11746031746031*G0_0_1_7_0_1 - 0.0507936507936495*G0_0_1_8_0_0 - 1.42222222222221*G0_0_1_8_0_1 + 0.548571428571429*G0_0_1_9_0_0 + 2.43809523809523*G0_0_1_9_0_1 - 0.115132275132274*G0_0_1_10_1_0 - 0.115132275132274*G0_0_1_10_1_1 + 0.643386243386241*G0_0_1_11_1_0 + 0.318306878306877*G0_0_1_12_1_1 - 0.0507936507936524*G0_0_1_13_1_0 + 1.42222222222221*G0_0_1_13_1_1 - 0.172698412698412*G0_0_1_14_1_0 - 1.32063492063492*G0_0_1_14_1_1 - 0.497777777777777*G0_0_1_15_1_0 + 0.142222222222219*G0_0_1_15_1_1 + 0.172698412698412*G0_0_1_16_1_0 - 0.345396825396822*G0_0_1_16_1_1 - 0.477460317460316*G0_0_1_17_1_0 - 1.11746031746031*G0_0_1_17_1_1 - 0.0507936507936495*G0_0_1_18_1_0 - 1.42222222222221*G0_0_1_18_1_1 + 0.548571428571429*G0_0_1_19_1_0 + 2.43809523809523*G0_0_1_19_1_1;
    A[814] = 0.0;
    A[39] = A[504];
    A[122] = A[587];
    A[847] = 0.0;
    A[74] = A[539];
    A[153] = -A[161] - 0.0135449735449744*G0_0_0_0_0_0 - 0.0135449735449742*G0_0_0_0_0_1 + 0.440211640211639*G0_0_0_1_0_0 + 1.35449735449735*G0_0_0_2_0_1 - 1.74730158730158*G0_0_0_3_0_0 + 0.0507936507936533*G0_0_0_3_0_1 + 2.33650793650792*G0_0_0_4_0_0 - 0.375873015873014*G0_0_0_4_0_1 + 0.284444444444444*G0_0_0_5_0_0 + 0.213333333333334*G0_0_0_5_0_1 - 2.33650793650792*G0_0_0_6_0_0 - 1.55428571428571*G0_0_0_6_0_1 - 0.243809523809521*G0_0_0_7_0_0 - 0.172698412698409*G0_0_0_7_0_1 - 0.182857142857145*G0_0_0_8_0_0 - 0.0507936507936531*G0_0_0_8_0_1 + 1.46285714285713*G0_0_0_9_0_0 + 0.548571428571423*G0_0_0_9_0_1 - 0.0135449735449744*G0_0_0_10_1_0 - 0.0135449735449742*G0_0_0_10_1_1 + 0.440211640211639*G0_0_0_11_1_0 + 1.35449735449735*G0_0_0_12_1_1 - 1.74730158730158*G0_0_0_13_1_0 + 0.0507936507936533*G0_0_0_13_1_1 + 2.33650793650792*G0_0_0_14_1_0 - 0.375873015873014*G0_0_0_14_1_1 + 0.284444444444444*G0_0_0_15_1_0 + 0.213333333333334*G0_0_0_15_1_1 - 2.33650793650792*G0_0_0_16_1_0 - 1.55428571428571*G0_0_0_16_1_1 - 0.243809523809521*G0_0_0_17_1_0 - 0.172698412698409*G0_0_0_17_1_1 - 0.182857142857145*G0_0_0_18_1_0 - 0.0507936507936531*G0_0_0_18_1_1 + 1.46285714285713*G0_0_0_19_1_0 + 0.548571428571423*G0_0_0_19_1_1 + 0.318306878306878*G0_1_0_0_0_0 + 0.318306878306877*G0_1_0_0_0_1 - 0.643386243386246*G0_1_0_1_0_0 - 0.115132275132276*G0_1_0_2_0_1 - 1.37142857142857*G0_1_0_3_0_0 - 1.42222222222223*G0_1_0_3_0_1 - 0.64*G0_1_0_4_0_0 - 1.11746031746031*G0_1_0_4_0_1 - 0.518095238095236*G0_1_0_5_0_0 - 0.345396825396824*G0_1_0_5_0_1 + 0.639999999999999*G0_1_0_6_0_0 + 0.142222222222223*G0_1_0_6_0_1 - 1.14793650793651*G0_1_0_7_0_0 - 1.32063492063492*G0_1_0_7_0_1 + 1.47301587301587*G0_1_0_8_0_0 + 1.42222222222223*G0_1_0_8_0_1 + 1.8895238095238*G0_1_0_9_0_0 + 2.43809523809523*G0_1_0_9_0_1 + 0.318306878306878*G0_1_0_10_1_0 + 0.318306878306877*G0_1_0_10_1_1 - 0.643386243386246*G0_1_0_11_1_0 - 0.115132275132276*G0_1_0_12_1_1 - 1.37142857142857*G0_1_0_13_1_0 - 1.42222222222223*G0_1_0_13_1_1 - 0.64*G0_1_0_14_1_0 - 1.11746031746031*G0_1_0_14_1_1 - 0.518095238095236*G0_1_0_15_1_0 - 0.345396825396824*G0_1_0_15_1_1 + 0.639999999999999*G0_1_0_16_1_0 + 0.142222222222223*G0_1_0_16_1_1 - 1.14793650793651*G0_1_0_17_1_0 - 1.32063492063492*G0_1_0_17_1_1 + 1.47301587301587*G0_1_0_18_1_0 + 1.42222222222223*G0_1_0_18_1_1 + 1.8895238095238*G0_1_0_19_1_0 + 2.43809523809523*G0_1_0_19_1_1;
    A[876] = 0.0;
    A[485] = 0.0;
    A[188] = A[653];
    A[586] = A[121];
    A[510] = 0.0;
    A[223] = A[688];
    A[611] = 0.0;
    A[547] = 0.0;
    A[507] = A[42];
    A[640] = 0.0;
    A[536] = A[71];
    A[661] = 0.0;
    A[282] = A[747];
    A[694] = 0.0;
    A[311] = A[776];
    A[263] = 0.0;
    A[332] = A[797];
    A[292] = 0.0;
    A[746] = A[281];
    A[433] = A[898];
    A[365] = A[830];
    A[321] = 0.0;
    A[777] = A[312];
    A[458] = 0.0;
    A[398] = A[863];
    A[354] = 0.0;
    A[796] = A[331];
    A[3] = A[468];
    A[720] = 0.0;
    A[104] = A[569];
    A[839] = A[374];
    A[32] = A[497];
    A[129] = A[594];
    A[69] = A[534];
    A[162] = A[627];
    A[110] = 0.0;
    A[183] = A[648];
    A[143] = 0.0;
    A[595] = A[130];
    A[220] = A[685];
    A[172] = 0.0;
    A[618] = A[153];
    A[498] = A[33];
    A[649] = A[184];
    A[529] = A[64];
    A[684] = A[219];
    A[564] = A[99];
    A[719] = A[254];
    A[440] = 0.0;
    A[328] = 0.0;
    A[778] = A[313];
    A[467] = A[2];
    A[391] = A[856];
    A[347] = 0.0;
    A[807] = A[342];
    A[26] = 0.0;
    A[727] = 0.0;
    A[386] = 0.0;
    A[828] = A[363];
    A[57] = 0.0;
    A[756] = 0.0;
    A[417] = 0.0;
    A[861] = A[396];
    A[60] = A[525];
    A[785] = 0.0;
    A[894] = A[429];
    A[119] = 0.0;
    A[818] = 0.0;
  }

  /// Tabulate the tensor for the contribution from a local cell
  /// using the specified reference cell quadrature points/weights
  virtual void tabulate_tensor(double* A,
                               const double * const * w,
                               const ufc::cell& c,
                               unsigned int num_quadrature_points,
                               const double * const * quadrature_points,
                               const double* quadrature_weights) const
  {
    throw std::runtime_error("Quadrature version of tabulate_tensor not available when using the FFC tensor representation.");
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class vector_laplacian_f1_p3_q4_tensor_form_0: public ufc::form
{
public:

  /// Constructor
  vector_laplacian_f1_p3_q4_tensor_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~vector_laplacian_f1_p3_q4_tensor_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "Form([Integral(Product(IndexSum(IndexSum(Product(Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 4, 2, None), 0), MultiIndex((Index(0),), {Index(0): 2})), MultiIndex((Index(1),), {Index(1): 2})), MultiIndex((Index(1), Index(0)), {Index(0): 2, Index(1): 2})), MultiIndex((Index(2), Index(3)), {Index(2): 2, Index(3): 2})), Indexed(ComponentTensor(Indexed(SpatialDerivative(Argument(VectorElement('Lagrange', Cell('triangle', Space(2)), 4, 2, None), 1), MultiIndex((Index(4),), {Index(4): 2})), MultiIndex((Index(5),), {Index(5): 2})), MultiIndex((Index(5), Index(4)), {Index(4): 2, Index(5): 2})), MultiIndex((Index(2), Index(3)), {Index(2): 2, Index(3): 2}))), MultiIndex((Index(2),), {Index(2): 2})), MultiIndex((Index(3),), {Index(3): 2})), IndexSum(Indexed(SpatialDerivative(Coefficient(VectorElement('Lagrange', Cell('triangle', Space(2)), 3, 2, None), 0), MultiIndex((Index(6),), {Index(6): 2})), MultiIndex((Index(6),), {Index(6): 2})), MultiIndex((Index(6),), {Index(6): 2}))), Measure('cell', 0, None))])";
  }

  /// Return the rank of the global tensor (r)
  virtual unsigned int rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual unsigned int num_coefficients() const
  {
    return 1;
  }

  /// Return the number of cell domains
  virtual unsigned int num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual unsigned int num_exterior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of interior facet domains
  virtual unsigned int num_interior_facet_domains() const
  {
    return 0;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f1_p3_q4_tensor_finite_element_3();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f1_p3_q4_tensor_finite_element_3();
        break;
      }
    case 2:
      {
        return new vector_laplacian_f1_p3_q4_tensor_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f1_p3_q4_tensor_dofmap_3();
        break;
      }
    case 1:
      {
        return new vector_laplacian_f1_p3_q4_tensor_dofmap_3();
        break;
      }
    case 2:
      {
        return new vector_laplacian_f1_p3_q4_tensor_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(unsigned int i) const
  {
    switch (i)
    {
    case 0:
      {
        return new vector_laplacian_f1_p3_q4_tensor_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(unsigned int i) const
  {
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(unsigned int i) const
  {
    return 0;
  }

};

#endif
